
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_start>:
    1000:	20008f20 	.word	0x20008f20
    1004:	000142e9 	.word	0x000142e9
    1008:	00022825 	.word	0x00022825
    100c:	000142a1 	.word	0x000142a1
    1010:	000142a1 	.word	0x000142a1
    1014:	000142a1 	.word	0x000142a1
    1018:	000142a1 	.word	0x000142a1
	...
    102c:	00013f2d 	.word	0x00013f2d
    1030:	000142a1 	.word	0x000142a1
    1034:	00000000 	.word	0x00000000
    1038:	00013ed5 	.word	0x00013ed5
    103c:	000267a7 	.word	0x000267a7

00001040 <_irq_vector_table>:
    1040:	00014019 0002710f 00014019 00014019     .@...q...@...@..
    1050:	00014019 00014019 00014019 00014019     .@...@...@...@..
    1060:	000270d7 00014019 00014019 000270f5     .p...@...@...p..
    1070:	00014019 00014019 00014019 00014019     .@...@...@...@..
    1080:	00014019 00014019 00014019 00014019     .@...@...@...@..
    1090:	00014019 00014019 00014019 00014019     .@...@...@...@..
    10a0:	00014019 00014019 00014019 00014019     .@...@...@...@..
    10b0:	00014019 00014019 00014019 00014019     .@...@...@...@..
    10c0:	00014019 00014019 00014019 00014019     .@...@...@...@..
    10d0:	00014019 00014019 00014019 00014019     .@...@...@...@..
    10e0:	00014019 00014019 00014019 00014019     .@...@...@...@..
    10f0:	00014019 00014019 00014019 00014019     .@...@...@...@..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295
    1110:	f04f 30ff 	movne.w	r0, #4294967295
    1114:	f000 b96c 	b.w	13f0 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f806 	bl	1130 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__udivmoddi4>:
    1130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1134:	9e08      	ldr	r6, [sp, #32]
    1136:	460d      	mov	r5, r1
    1138:	4604      	mov	r4, r0
    113a:	468e      	mov	lr, r1
    113c:	2b00      	cmp	r3, #0
    113e:	f040 8082 	bne.w	1246 <__udivmoddi4+0x116>
    1142:	428a      	cmp	r2, r1
    1144:	4617      	mov	r7, r2
    1146:	d946      	bls.n	11d6 <__udivmoddi4+0xa6>
    1148:	fab2 f282 	clz	r2, r2
    114c:	b14a      	cbz	r2, 1162 <__udivmoddi4+0x32>
    114e:	f1c2 0120 	rsb	r1, r2, #32
    1152:	fa05 f302 	lsl.w	r3, r5, r2
    1156:	fa20 f101 	lsr.w	r1, r0, r1
    115a:	4097      	lsls	r7, r2
    115c:	ea41 0e03 	orr.w	lr, r1, r3
    1160:	4094      	lsls	r4, r2
    1162:	ea4f 4817 	mov.w	r8, r7, lsr #16
    1166:	0c23      	lsrs	r3, r4, #16
    1168:	fbbe fcf8 	udiv	ip, lr, r8
    116c:	b2b9      	uxth	r1, r7
    116e:	fb08 ee1c 	mls	lr, r8, ip, lr
    1172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    1176:	fb0c f001 	mul.w	r0, ip, r1
    117a:	4298      	cmp	r0, r3
    117c:	d90a      	bls.n	1194 <__udivmoddi4+0x64>
    117e:	18fb      	adds	r3, r7, r3
    1180:	f10c 35ff 	add.w	r5, ip, #4294967295
    1184:	f080 8116 	bcs.w	13b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c>
    1188:	4298      	cmp	r0, r3
    118a:	f240 8113 	bls.w	13b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c>
    118e:	f1ac 0c02 	sub.w	ip, ip, #2
    1192:	443b      	add	r3, r7
    1194:	1a1b      	subs	r3, r3, r0
    1196:	b2a4      	uxth	r4, r4
    1198:	fbb3 f0f8 	udiv	r0, r3, r8
    119c:	fb08 3310 	mls	r3, r8, r0, r3
    11a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11a4:	fb00 f101 	mul.w	r1, r0, r1
    11a8:	42a1      	cmp	r1, r4
    11aa:	d909      	bls.n	11c0 <__udivmoddi4+0x90>
    11ac:	193c      	adds	r4, r7, r4
    11ae:	f100 33ff 	add.w	r3, r0, #4294967295
    11b2:	f080 8101 	bcs.w	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    11b6:	42a1      	cmp	r1, r4
    11b8:	f240 80fe 	bls.w	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    11bc:	3802      	subs	r0, #2
    11be:	443c      	add	r4, r7
    11c0:	1a64      	subs	r4, r4, r1
    11c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    11c6:	2100      	movs	r1, #0
    11c8:	b11e      	cbz	r6, 11d2 <__udivmoddi4+0xa2>
    11ca:	40d4      	lsrs	r4, r2
    11cc:	2300      	movs	r3, #0
    11ce:	e9c6 4300 	strd	r4, r3, [r6]
    11d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11d6:	b902      	cbnz	r2, 11da <__udivmoddi4+0xaa>
    11d8:	deff      	udf	#255	; 0xff
    11da:	fab2 f282 	clz	r2, r2
    11de:	2a00      	cmp	r2, #0
    11e0:	d14f      	bne.n	1282 <__udivmoddi4+0x152>
    11e2:	1bcb      	subs	r3, r1, r7
    11e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    11e8:	fa1f f887 	uxth.w	r8, r7
    11ec:	2101      	movs	r1, #1
    11ee:	fbb3 fcfe 	udiv	ip, r3, lr
    11f2:	0c25      	lsrs	r5, r4, #16
    11f4:	fb0e 331c 	mls	r3, lr, ip, r3
    11f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    11fc:	fb08 f30c 	mul.w	r3, r8, ip
    1200:	42ab      	cmp	r3, r5
    1202:	d907      	bls.n	1214 <__udivmoddi4+0xe4>
    1204:	197d      	adds	r5, r7, r5
    1206:	f10c 30ff 	add.w	r0, ip, #4294967295
    120a:	d202      	bcs.n	1212 <__udivmoddi4+0xe2>
    120c:	42ab      	cmp	r3, r5
    120e:	f200 80e7 	bhi.w	13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>
    1212:	4684      	mov	ip, r0
    1214:	1aed      	subs	r5, r5, r3
    1216:	b2a3      	uxth	r3, r4
    1218:	fbb5 f0fe 	udiv	r0, r5, lr
    121c:	fb0e 5510 	mls	r5, lr, r0, r5
    1220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1224:	fb08 f800 	mul.w	r8, r8, r0
    1228:	45a0      	cmp	r8, r4
    122a:	d907      	bls.n	123c <__udivmoddi4+0x10c>
    122c:	193c      	adds	r4, r7, r4
    122e:	f100 33ff 	add.w	r3, r0, #4294967295
    1232:	d202      	bcs.n	123a <__udivmoddi4+0x10a>
    1234:	45a0      	cmp	r8, r4
    1236:	f200 80d7 	bhi.w	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    123a:	4618      	mov	r0, r3
    123c:	eba4 0408 	sub.w	r4, r4, r8
    1240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1244:	e7c0      	b.n	11c8 <__udivmoddi4+0x98>
    1246:	428b      	cmp	r3, r1
    1248:	d908      	bls.n	125c <__udivmoddi4+0x12c>
    124a:	2e00      	cmp	r6, #0
    124c:	f000 80af 	beq.w	13ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26>
    1250:	2100      	movs	r1, #0
    1252:	e9c6 0500 	strd	r0, r5, [r6]
    1256:	4608      	mov	r0, r1
    1258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    125c:	fab3 f183 	clz	r1, r3
    1260:	2900      	cmp	r1, #0
    1262:	d14b      	bne.n	12fc <__udivmoddi4+0x1cc>
    1264:	42ab      	cmp	r3, r5
    1266:	d302      	bcc.n	126e <__udivmoddi4+0x13e>
    1268:	4282      	cmp	r2, r0
    126a:	f200 80b7 	bhi.w	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
    126e:	1a84      	subs	r4, r0, r2
    1270:	eb65 0303 	sbc.w	r3, r5, r3
    1274:	2001      	movs	r0, #1
    1276:	469e      	mov	lr, r3
    1278:	2e00      	cmp	r6, #0
    127a:	d0aa      	beq.n	11d2 <__udivmoddi4+0xa2>
    127c:	e9c6 4e00 	strd	r4, lr, [r6]
    1280:	e7a7      	b.n	11d2 <__udivmoddi4+0xa2>
    1282:	f1c2 0c20 	rsb	ip, r2, #32
    1286:	fa01 f302 	lsl.w	r3, r1, r2
    128a:	4097      	lsls	r7, r2
    128c:	fa20 f00c 	lsr.w	r0, r0, ip
    1290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1294:	fa21 fc0c 	lsr.w	ip, r1, ip
    1298:	4318      	orrs	r0, r3
    129a:	fbbc f1fe 	udiv	r1, ip, lr
    129e:	0c05      	lsrs	r5, r0, #16
    12a0:	fb0e cc11 	mls	ip, lr, r1, ip
    12a4:	fa1f f887 	uxth.w	r8, r7
    12a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    12ac:	fb01 f308 	mul.w	r3, r1, r8
    12b0:	42ab      	cmp	r3, r5
    12b2:	fa04 f402 	lsl.w	r4, r4, r2
    12b6:	d909      	bls.n	12cc <__udivmoddi4+0x19c>
    12b8:	197d      	adds	r5, r7, r5
    12ba:	f101 3cff 	add.w	ip, r1, #4294967295
    12be:	f080 808b 	bcs.w	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    12c2:	42ab      	cmp	r3, r5
    12c4:	f240 8088 	bls.w	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    12c8:	3902      	subs	r1, #2
    12ca:	443d      	add	r5, r7
    12cc:	1aeb      	subs	r3, r5, r3
    12ce:	b285      	uxth	r5, r0
    12d0:	fbb3 f0fe 	udiv	r0, r3, lr
    12d4:	fb0e 3310 	mls	r3, lr, r0, r3
    12d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    12dc:	fb00 f308 	mul.w	r3, r0, r8
    12e0:	42ab      	cmp	r3, r5
    12e2:	d907      	bls.n	12f4 <__udivmoddi4+0x1c4>
    12e4:	197d      	adds	r5, r7, r5
    12e6:	f100 3cff 	add.w	ip, r0, #4294967295
    12ea:	d271      	bcs.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    12ec:	42ab      	cmp	r3, r5
    12ee:	d96f      	bls.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    12f0:	3802      	subs	r0, #2
    12f2:	443d      	add	r5, r7
    12f4:	1aeb      	subs	r3, r5, r3
    12f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    12fa:	e778      	b.n	11ee <__udivmoddi4+0xbe>
    12fc:	f1c1 0c20 	rsb	ip, r1, #32
    1300:	408b      	lsls	r3, r1
    1302:	fa22 f70c 	lsr.w	r7, r2, ip
    1306:	431f      	orrs	r7, r3
    1308:	fa20 f40c 	lsr.w	r4, r0, ip
    130c:	fa05 f301 	lsl.w	r3, r5, r1
    1310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1314:	fa25 f50c 	lsr.w	r5, r5, ip
    1318:	431c      	orrs	r4, r3
    131a:	0c23      	lsrs	r3, r4, #16
    131c:	fbb5 f9fe 	udiv	r9, r5, lr
    1320:	fa1f f887 	uxth.w	r8, r7
    1324:	fb0e 5519 	mls	r5, lr, r9, r5
    1328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    132c:	fb09 fa08 	mul.w	sl, r9, r8
    1330:	45aa      	cmp	sl, r5
    1332:	fa02 f201 	lsl.w	r2, r2, r1
    1336:	fa00 f301 	lsl.w	r3, r0, r1
    133a:	d908      	bls.n	134e <__udivmoddi4+0x21e>
    133c:	197d      	adds	r5, r7, r5
    133e:	f109 30ff 	add.w	r0, r9, #4294967295
    1342:	d247      	bcs.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    1344:	45aa      	cmp	sl, r5
    1346:	d945      	bls.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    1348:	f1a9 0902 	sub.w	r9, r9, #2
    134c:	443d      	add	r5, r7
    134e:	eba5 050a 	sub.w	r5, r5, sl
    1352:	b2a4      	uxth	r4, r4
    1354:	fbb5 f0fe 	udiv	r0, r5, lr
    1358:	fb0e 5510 	mls	r5, lr, r0, r5
    135c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1360:	fb00 f808 	mul.w	r8, r0, r8
    1364:	45a0      	cmp	r8, r4
    1366:	d907      	bls.n	1378 <__udivmoddi4+0x248>
    1368:	193c      	adds	r4, r7, r4
    136a:	f100 35ff 	add.w	r5, r0, #4294967295
    136e:	d22d      	bcs.n	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
    1370:	45a0      	cmp	r8, r4
    1372:	d92b      	bls.n	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
    1374:	3802      	subs	r0, #2
    1376:	443c      	add	r4, r7
    1378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    137c:	eba4 0408 	sub.w	r4, r4, r8
    1380:	fba0 8902 	umull	r8, r9, r0, r2
    1384:	454c      	cmp	r4, r9
    1386:	46c6      	mov	lr, r8
    1388:	464d      	mov	r5, r9
    138a:	d319      	bcc.n	13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>
    138c:	d016      	beq.n	13bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34>
    138e:	b15e      	cbz	r6, 13a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20>
    1390:	ebb3 020e 	subs.w	r2, r3, lr
    1394:	eb64 0405 	sbc.w	r4, r4, r5
    1398:	fa04 fc0c 	lsl.w	ip, r4, ip
    139c:	40ca      	lsrs	r2, r1
    139e:	ea4c 0202 	orr.w	r2, ip, r2
    13a2:	40cc      	lsrs	r4, r1
    13a4:	e9c6 2400 	strd	r2, r4, [r6]
    13a8:	2100      	movs	r1, #0
    13aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13ae:	4631      	mov	r1, r6
    13b0:	4630      	mov	r0, r6
    13b2:	e70e      	b.n	11d2 <__udivmoddi4+0xa2>
    13b4:	46ac      	mov	ip, r5
    13b6:	e6ed      	b.n	1194 <__udivmoddi4+0x64>
    13b8:	4618      	mov	r0, r3
    13ba:	e701      	b.n	11c0 <__udivmoddi4+0x90>
    13bc:	4543      	cmp	r3, r8
    13be:	d2e6      	bcs.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    13c0:	ebb8 0e02 	subs.w	lr, r8, r2
    13c4:	eb69 0507 	sbc.w	r5, r9, r7
    13c8:	3801      	subs	r0, #1
    13ca:	e7e0      	b.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    13cc:	4628      	mov	r0, r5
    13ce:	e7d3      	b.n	1378 <__udivmoddi4+0x248>
    13d0:	4660      	mov	r0, ip
    13d2:	e78f      	b.n	12f4 <__udivmoddi4+0x1c4>
    13d4:	4681      	mov	r9, r0
    13d6:	e7ba      	b.n	134e <__udivmoddi4+0x21e>
    13d8:	4661      	mov	r1, ip
    13da:	e777      	b.n	12cc <__udivmoddi4+0x19c>
    13dc:	4608      	mov	r0, r1
    13de:	e74b      	b.n	1278 <__udivmoddi4+0x148>
    13e0:	f1ac 0c02 	sub.w	ip, ip, #2
    13e4:	443d      	add	r5, r7
    13e6:	e715      	b.n	1214 <__udivmoddi4+0xe4>
    13e8:	3802      	subs	r0, #2
    13ea:	443c      	add	r4, r7
    13ec:	e726      	b.n	123c <__udivmoddi4+0x10c>
    13ee:	bf00      	nop

000013f0 <__aeabi_idiv0>:
    13f0:	4770      	bx	lr
    13f2:	bf00      	nop

000013f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    13f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13f6:	4615      	mov	r5, r2
    13f8:	4a0a      	ldr	r2, [pc, #40]	; (1424 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    13fa:	461c      	mov	r4, r3
    13fc:	6856      	ldr	r6, [r2, #4]
    13fe:	b12e      	cbz	r6, 140c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    1400:	b001      	add	sp, #4
    1402:	462a      	mov	r2, r5
    1404:	46b4      	mov	ip, r6
    1406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    140a:	4760      	bx	ip
    140c:	2000      	movs	r0, #0
    140e:	f88d 0000 	strb.w	r0, [sp]
    1412:	4668      	mov	r0, sp
    1414:	f00b fee8 	bl	d1e8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    1418:	f89d 0000 	ldrb.w	r0, [sp]
    141c:	1a28      	subs	r0, r5, r0
    141e:	7020      	strb	r0, [r4, #0]
    1420:	2000      	movs	r0, #0
    1422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1424:	20000000 	.word	0x20000000

00001428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1428:	4801      	ldr	r0, [pc, #4]	; (1430 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    142a:	7800      	ldrb	r0, [r0, #0]
    142c:	4770      	bx	lr
    142e:	0000      	.short	0x0000
    1430:	20000008 	.word	0x20000008

00001434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    1434:	4905      	ldr	r1, [pc, #20]	; (144c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    1436:	780a      	ldrb	r2, [r1, #0]
    1438:	4290      	cmp	r0, r2
    143a:	d301      	bcc.n	1440 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    143c:	2000      	movs	r0, #0
    143e:	4770      	bx	lr
    1440:	6849      	ldr	r1, [r1, #4]
    1442:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1446:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    144a:	4770      	bx	lr
    144c:	20000008 	.word	0x20000008
    1450:	b570      	push	{r4, r5, r6, lr}
    1452:	4605      	mov	r5, r0
    1454:	2a20      	cmp	r2, #32
    1456:	d027      	beq.n	14a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    1458:	4819      	ldr	r0, [pc, #100]	; (14c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    145a:	4c1a      	ldr	r4, [pc, #104]	; (14c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    145c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1460:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    1464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1468:	2920      	cmp	r1, #32
    146a:	d022      	beq.n	14b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    146c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    1470:	7840      	ldrb	r0, [r0, #1]
    1472:	784c      	ldrb	r4, [r1, #1]
    1474:	7048      	strb	r0, [r1, #1]
    1476:	4620      	mov	r0, r4
    1478:	4601      	mov	r1, r0
    147a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    147e:	4291      	cmp	r1, r2
    1480:	7005      	strb	r5, [r0, #0]
    1482:	7840      	ldrb	r0, [r0, #1]
    1484:	d1f8      	bne.n	1478 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    1486:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    148a:	2a20      	cmp	r2, #32
    148c:	bf1a      	itte	ne
    148e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    1492:	7054      	strbne	r4, [r2, #1]
    1494:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    1498:	2220      	movs	r2, #32
    149a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    149e:	f88c 2001 	strb.w	r2, [ip, #1]
    14a2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    14a6:	bd70      	pop	{r4, r5, r6, pc}
    14a8:	f240 217e 	movw	r1, #638	; 0x27e
    14ac:	2070      	movs	r0, #112	; 0x70
    14ae:	f003 f957 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14b2:	f893 4020 	ldrb.w	r4, [r3, #32]
    14b6:	7840      	ldrb	r0, [r0, #1]
    14b8:	f883 0020 	strb.w	r0, [r3, #32]
    14bc:	e7db      	b.n	1476 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    14be:	0000      	.short	0x0000
    14c0:	20000f1c 	.word	0x20000f1c
    14c4:	20000f9c 	.word	0x20000f9c
    14c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14cc:	b085      	sub	sp, #20
    14ce:	4615      	mov	r5, r2
    14d0:	460c      	mov	r4, r1
    14d2:	f002 f91b 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    14d6:	4428      	add	r0, r5
    14d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14dc:	9002      	str	r0, [sp, #8]
    14de:	6821      	ldr	r1, [r4, #0]
    14e0:	1a08      	subs	r0, r1, r0
    14e2:	0200      	lsls	r0, r0, #8
    14e4:	17c1      	asrs	r1, r0, #31
    14e6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    14ea:	1200      	asrs	r0, r0, #8
    14ec:	2800      	cmp	r0, #0
    14ee:	f300 80d5 	bgt.w	169c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    14f2:	48ac      	ldr	r0, [pc, #688]	; (17a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    14f4:	9f08      	ldr	r7, [sp, #32]
    14f6:	4eac      	ldr	r6, [pc, #688]	; (17a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    14f8:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    14fc:	9003      	str	r0, [sp, #12]
    14fe:	f890 5020 	ldrb.w	r5, [r0, #32]
    1502:	2020      	movs	r0, #32
    1504:	46e9      	mov	r9, sp
    1506:	f10d 0804 	add.w	r8, sp, #4
    150a:	f88d 0000 	strb.w	r0, [sp]
    150e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    1512:	2d20      	cmp	r5, #32
    1514:	bf18      	it	ne
    1516:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    151a:	d025      	beq.n	1568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    151c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1520:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1524:	6822      	ldr	r2, [r4, #0]
    1526:	68c1      	ldr	r1, [r0, #12]
    1528:	1a51      	subs	r1, r2, r1
    152a:	0209      	lsls	r1, r1, #8
    152c:	17ca      	asrs	r2, r1, #31
    152e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1532:	3008      	adds	r0, #8
    1534:	1209      	asrs	r1, r1, #8
    1536:	d417      	bmi.n	1568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1538:	8961      	ldrh	r1, [r4, #10]
    153a:	b171      	cbz	r1, 155a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    153c:	8941      	ldrh	r1, [r0, #10]
    153e:	b961      	cbnz	r1, 155a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    1540:	f000 fdba 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    1544:	f002 f8e2 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1548:	6821      	ldr	r1, [r4, #0]
    154a:	1a08      	subs	r0, r1, r0
    154c:	0200      	lsls	r0, r0, #8
    154e:	17c1      	asrs	r1, r0, #31
    1550:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1554:	1200      	asrs	r0, r0, #8
    1556:	2833      	cmp	r0, #51	; 0x33
    1558:	db06      	blt.n	1568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    155a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    155e:	f889 5000 	strb.w	r5, [r9]
    1562:	7845      	ldrb	r5, [r0, #1]
    1564:	2d20      	cmp	r5, #32
    1566:	d1d9      	bne.n	151c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    1568:	f899 0000 	ldrb.w	r0, [r9]
    156c:	f888 0000 	strb.w	r0, [r8]
    1570:	46a1      	mov	r9, r4
    1572:	2d20      	cmp	r5, #32
    1574:	bf1c      	itt	ne
    1576:	488d      	ldrne	r0, [pc, #564]	; (17ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1578:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    157c:	f000 810e 	beq.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1580:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1584:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    1588:	f8d9 2004 	ldr.w	r2, [r9, #4]
    158c:	f8da 1008 	ldr.w	r1, [sl, #8]
    1590:	4648      	mov	r0, r9
    1592:	1a89      	subs	r1, r1, r2
    1594:	0209      	lsls	r1, r1, #8
    1596:	17ca      	asrs	r2, r1, #31
    1598:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    159c:	f10a 0708 	add.w	r7, sl, #8
    15a0:	1209      	asrs	r1, r1, #8
    15a2:	d415      	bmi.n	15d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    15a4:	8979      	ldrh	r1, [r7, #10]
    15a6:	2900      	cmp	r1, #0
    15a8:	f000 80f8 	beq.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15ac:	8941      	ldrh	r1, [r0, #10]
    15ae:	2900      	cmp	r1, #0
    15b0:	f040 80f4 	bne.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15b4:	f000 fd80 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    15b8:	f002 f8a8 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    15bc:	6839      	ldr	r1, [r7, #0]
    15be:	1a08      	subs	r0, r1, r0
    15c0:	0200      	lsls	r0, r0, #8
    15c2:	17c1      	asrs	r1, r0, #31
    15c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    15c8:	1200      	asrs	r0, r0, #8
    15ca:	2833      	cmp	r0, #51	; 0x33
    15cc:	f280 80e6 	bge.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15d0:	f888 5000 	strb.w	r5, [r8]
    15d4:	f89a 1014 	ldrb.w	r1, [sl, #20]
    15d8:	f899 000c 	ldrb.w	r0, [r9, #12]
    15dc:	4281      	cmp	r1, r0
    15de:	d906      	bls.n	15ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    15e0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    15e4:	7845      	ldrb	r5, [r0, #1]
    15e6:	2d20      	cmp	r5, #32
    15e8:	d1ca      	bne.n	1580 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    15ea:	f000 b8d7 	b.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
    15f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    15f6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    15fa:	8a68      	ldrh	r0, [r5, #18]
    15fc:	68ef      	ldr	r7, [r5, #12]
    15fe:	2800      	cmp	r0, #0
    1600:	d143      	bne.n	168a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1602:	8960      	ldrh	r0, [r4, #10]
    1604:	b3e8      	cbz	r0, 1682 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    1606:	68a8      	ldr	r0, [r5, #8]
    1608:	f00b fe0e 	bl	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    160c:	8a69      	ldrh	r1, [r5, #18]
    160e:	7c2a      	ldrb	r2, [r5, #16]
    1610:	4b67      	ldr	r3, [pc, #412]	; (17b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    1612:	4411      	add	r1, r2
    1614:	1c49      	adds	r1, r1, #1
    1616:	1842      	adds	r2, r0, r1
    1618:	4298      	cmp	r0, r3
    161a:	d904      	bls.n	1626 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    161c:	f240 6109 	movw	r1, #1545	; 0x609
    1620:	2070      	movs	r0, #112	; 0x70
    1622:	f003 f89d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1626:	4863      	ldr	r0, [pc, #396]	; (17b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    1628:	4281      	cmp	r1, r0
    162a:	dd04      	ble.n	1636 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    162c:	f240 610a 	movw	r1, #1546	; 0x60a
    1630:	2070      	movs	r0, #112	; 0x70
    1632:	f003 f895 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1636:	4860      	ldr	r0, [pc, #384]	; (17b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    1638:	4281      	cmp	r1, r0
    163a:	da04      	bge.n	1646 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    163c:	f240 610b 	movw	r1, #1547	; 0x60b
    1640:	2070      	movs	r0, #112	; 0x70
    1642:	f003 f88d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1646:	485d      	ldr	r0, [pc, #372]	; (17bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    1648:	4290      	cmp	r0, r2
    164a:	bfdc      	itt	le
    164c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1650:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1654:	dd05      	ble.n	1662 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    1656:	2a00      	cmp	r2, #0
    1658:	bfbc      	itt	lt
    165a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    165e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1662:	4610      	mov	r0, r2
    1664:	f002 f852 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1668:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    166c:	1a78      	subs	r0, r7, r1
    166e:	0200      	lsls	r0, r0, #8
    1670:	17c2      	asrs	r2, r0, #31
    1672:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1676:	1200      	asrs	r0, r0, #8
    1678:	2833      	cmp	r0, #51	; 0x33
    167a:	bfb8      	it	lt
    167c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    1680:	e000      	b.n	1684 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    1682:	e002      	b.n	168a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1684:	bfb8      	it	lt
    1686:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    168a:	9802      	ldr	r0, [sp, #8]
    168c:	1a38      	subs	r0, r7, r0
    168e:	0200      	lsls	r0, r0, #8
    1690:	17c1      	asrs	r1, r0, #31
    1692:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1696:	1200      	asrs	r0, r0, #8
    1698:	2800      	cmp	r0, #0
    169a:	dd03      	ble.n	16a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    169c:	b009      	add	sp, #36	; 0x24
    169e:	2000      	movs	r0, #0
    16a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16a4:	e9d4 1000 	ldrd	r1, r0, [r4]
    16a8:	1a40      	subs	r0, r0, r1
    16aa:	4438      	add	r0, r7
    16ac:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    16b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16b4:	e9c4 1000 	strd	r1, r0, [r4]
    16b8:	9803      	ldr	r0, [sp, #12]
    16ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
    16be:	466f      	mov	r7, sp
    16c0:	f890 5020 	ldrb.w	r5, [r0, #32]
    16c4:	2020      	movs	r0, #32
    16c6:	f10d 0a04 	add.w	sl, sp, #4
    16ca:	f88d 0000 	strb.w	r0, [sp]
    16ce:	2d20      	cmp	r5, #32
    16d0:	bf1c      	itt	ne
    16d2:	4836      	ldrne	r0, [pc, #216]	; (17ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    16d4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    16d8:	d025      	beq.n	1726 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    16da:	bf00      	nop
    16dc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    16e0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    16e4:	6822      	ldr	r2, [r4, #0]
    16e6:	68c1      	ldr	r1, [r0, #12]
    16e8:	1a51      	subs	r1, r2, r1
    16ea:	0209      	lsls	r1, r1, #8
    16ec:	17ca      	asrs	r2, r1, #31
    16ee:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    16f2:	3008      	adds	r0, #8
    16f4:	1209      	asrs	r1, r1, #8
    16f6:	d416      	bmi.n	1726 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    16f8:	8961      	ldrh	r1, [r4, #10]
    16fa:	b171      	cbz	r1, 171a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    16fc:	8941      	ldrh	r1, [r0, #10]
    16fe:	b961      	cbnz	r1, 171a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    1700:	f000 fcda 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    1704:	f002 f802 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1708:	6821      	ldr	r1, [r4, #0]
    170a:	1a08      	subs	r0, r1, r0
    170c:	0200      	lsls	r0, r0, #8
    170e:	17c1      	asrs	r1, r0, #31
    1710:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1714:	1200      	asrs	r0, r0, #8
    1716:	2833      	cmp	r0, #51	; 0x33
    1718:	db05      	blt.n	1726 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    171a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    171e:	703d      	strb	r5, [r7, #0]
    1720:	7845      	ldrb	r5, [r0, #1]
    1722:	2d20      	cmp	r5, #32
    1724:	d1da      	bne.n	16dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    1726:	7838      	ldrb	r0, [r7, #0]
    1728:	f88a 0000 	strb.w	r0, [sl]
    172c:	4627      	mov	r7, r4
    172e:	2d20      	cmp	r5, #32
    1730:	bf1c      	itt	ne
    1732:	481e      	ldrne	r0, [pc, #120]	; (17ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1734:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1738:	d030      	beq.n	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    173a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    173e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    1742:	6879      	ldr	r1, [r7, #4]
    1744:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1748:	4638      	mov	r0, r7
    174a:	1a51      	subs	r1, r2, r1
    174c:	0209      	lsls	r1, r1, #8
    174e:	17ca      	asrs	r2, r1, #31
    1750:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1754:	f109 0808 	add.w	r8, r9, #8
    1758:	1209      	asrs	r1, r1, #8
    175a:	d412      	bmi.n	1782 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    175c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    1760:	b1e1      	cbz	r1, 179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1762:	8941      	ldrh	r1, [r0, #10]
    1764:	b9d1      	cbnz	r1, 179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1766:	f000 fca7 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    176a:	f001 ffcf 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    176e:	f8d8 1000 	ldr.w	r1, [r8]
    1772:	1a08      	subs	r0, r1, r0
    1774:	0200      	lsls	r0, r0, #8
    1776:	17c1      	asrs	r1, r0, #31
    1778:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    177c:	1200      	asrs	r0, r0, #8
    177e:	2833      	cmp	r0, #51	; 0x33
    1780:	da0c      	bge.n	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1782:	f88a 5000 	strb.w	r5, [sl]
    1786:	f899 0014 	ldrb.w	r0, [r9, #20]
    178a:	7b39      	ldrb	r1, [r7, #12]
    178c:	4288      	cmp	r0, r1
    178e:	f67f af2e 	bls.w	15ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1792:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1796:	7845      	ldrb	r5, [r0, #1]
    1798:	2d20      	cmp	r5, #32
    179a:	d1ce      	bne.n	173a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    179c:	b009      	add	sp, #36	; 0x24
    179e:	2001      	movs	r0, #1
    17a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17a4:	20000f9c 	.word	0x20000f9c
    17a8:	20000c1c 	.word	0x20000c1c
    17ac:	20000f1c 	.word	0x20000f1c
    17b0:	1e847fff 	.word	0x1e847fff
    17b4:	07a12000 	.word	0x07a12000
    17b8:	f85ee000 	.word	0xf85ee000
    17bc:	1e848000 	.word	0x1e848000
    17c0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    17c4:	4604      	mov	r4, r0
    17c6:	483c      	ldr	r0, [pc, #240]	; (18b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    17c8:	460e      	mov	r6, r1
    17ca:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    17ce:	4f3b      	ldr	r7, [pc, #236]	; (18bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    17d0:	f890 5020 	ldrb.w	r5, [r0, #32]
    17d4:	2020      	movs	r0, #32
    17d6:	4698      	mov	r8, r3
    17d8:	4692      	mov	sl, r2
    17da:	7010      	strb	r0, [r2, #0]
    17dc:	f507 7940 	add.w	r9, r7, #768	; 0x300
    17e0:	2d20      	cmp	r5, #32
    17e2:	bf18      	it	ne
    17e4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    17e8:	d028      	beq.n	183c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    17ea:	bf00      	nop
    17ec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    17f0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    17f4:	f100 0108 	add.w	r1, r0, #8
    17f8:	68c0      	ldr	r0, [r0, #12]
    17fa:	6822      	ldr	r2, [r4, #0]
    17fc:	1a10      	subs	r0, r2, r0
    17fe:	0200      	lsls	r0, r0, #8
    1800:	17c2      	asrs	r2, r0, #31
    1802:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1806:	1200      	asrs	r0, r0, #8
    1808:	d418      	bmi.n	183c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    180a:	8960      	ldrh	r0, [r4, #10]
    180c:	b178      	cbz	r0, 182e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    180e:	8948      	ldrh	r0, [r1, #10]
    1810:	b968      	cbnz	r0, 182e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    1812:	4608      	mov	r0, r1
    1814:	f000 fc50 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    1818:	f001 ff78 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    181c:	6821      	ldr	r1, [r4, #0]
    181e:	1a08      	subs	r0, r1, r0
    1820:	0200      	lsls	r0, r0, #8
    1822:	17c1      	asrs	r1, r0, #31
    1824:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1828:	1200      	asrs	r0, r0, #8
    182a:	2833      	cmp	r0, #51	; 0x33
    182c:	db06      	blt.n	183c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    182e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1832:	f88a 5000 	strb.w	r5, [sl]
    1836:	7845      	ldrb	r5, [r0, #1]
    1838:	2d20      	cmp	r5, #32
    183a:	d1d7      	bne.n	17ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    183c:	f89a 0000 	ldrb.w	r0, [sl]
    1840:	f888 0000 	strb.w	r0, [r8]
    1844:	2d20      	cmp	r5, #32
    1846:	bf18      	it	ne
    1848:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    184c:	d030      	beq.n	18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    184e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1852:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    1856:	6861      	ldr	r1, [r4, #4]
    1858:	f8d9 2008 	ldr.w	r2, [r9, #8]
    185c:	4620      	mov	r0, r4
    185e:	1a51      	subs	r1, r2, r1
    1860:	0209      	lsls	r1, r1, #8
    1862:	17ca      	asrs	r2, r1, #31
    1864:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1868:	f109 0608 	add.w	r6, r9, #8
    186c:	1209      	asrs	r1, r1, #8
    186e:	d410      	bmi.n	1892 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    1870:	8971      	ldrh	r1, [r6, #10]
    1872:	b1e9      	cbz	r1, 18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1874:	8941      	ldrh	r1, [r0, #10]
    1876:	b9d9      	cbnz	r1, 18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1878:	f000 fc1e 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    187c:	f001 ff46 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1880:	6831      	ldr	r1, [r6, #0]
    1882:	1a08      	subs	r0, r1, r0
    1884:	0200      	lsls	r0, r0, #8
    1886:	17c1      	asrs	r1, r0, #31
    1888:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    188c:	1200      	asrs	r0, r0, #8
    188e:	2833      	cmp	r0, #51	; 0x33
    1890:	da0e      	bge.n	18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1892:	f888 5000 	strb.w	r5, [r8]
    1896:	f899 0014 	ldrb.w	r0, [r9, #20]
    189a:	7b21      	ldrb	r1, [r4, #12]
    189c:	4288      	cmp	r0, r1
    189e:	d802      	bhi.n	18a6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    18a0:	2000      	movs	r0, #0
    18a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    18a6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    18aa:	7845      	ldrb	r5, [r0, #1]
    18ac:	2d20      	cmp	r5, #32
    18ae:	d1ce      	bne.n	184e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    18b0:	2001      	movs	r0, #1
    18b2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    18b6:	0000      	.short	0x0000
    18b8:	20000f9c 	.word	0x20000f9c
    18bc:	20000c1c 	.word	0x20000c1c
    18c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18c4:	f04f 0800 	mov.w	r8, #0
    18c8:	b098      	sub	sp, #96	; 0x60
    18ca:	4616      	mov	r6, r2
    18cc:	460d      	mov	r5, r1
    18ce:	46c3      	mov	fp, r8
    18d0:	f002 f994 	bl	3bfc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    18d4:	4604      	mov	r4, r0
    18d6:	2d01      	cmp	r5, #1
    18d8:	bf18      	it	ne
    18da:	2d02      	cmpne	r5, #2
    18dc:	d005      	beq.n	18ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b6>
    18de:	f640 1194 	movw	r1, #2452	; 0x994
    18e2:	f04f 0070 	mov.w	r0, #112	; 0x70
    18e6:	f002 ff3b 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ea:	49fd      	ldr	r1, [pc, #1012]	; (1ce0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    18ec:	2001      	movs	r0, #1
    18ee:	6008      	str	r0, [r1, #0]
    18f0:	49fc      	ldr	r1, [pc, #1008]	; (1ce4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    18f2:	6889      	ldr	r1, [r1, #8]
    18f4:	6008      	str	r0, [r1, #0]
    18f6:	2000      	movs	r0, #0
    18f8:	900c      	str	r0, [sp, #48]	; 0x30
    18fa:	1e40      	subs	r0, r0, #1
    18fc:	900e      	str	r0, [sp, #56]	; 0x38
    18fe:	49fa      	ldr	r1, [pc, #1000]	; (1ce8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>)
    1900:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1904:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    1908:	3308      	adds	r3, #8
    190a:	af0f      	add	r7, sp, #60	; 0x3c
    190c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    190e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    1912:	a80f      	add	r0, sp, #60	; 0x3c
    1914:	f000 fbd0 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    1918:	900d      	str	r0, [sp, #52]	; 0x34
    191a:	48f3      	ldr	r0, [pc, #972]	; (1ce8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>)
    191c:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    1920:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1924:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    1928:	f1b9 0f00 	cmp.w	r9, #0
    192c:	bf14      	ite	ne
    192e:	f04f 0a01 	movne.w	sl, #1
    1932:	f04f 0a00 	moveq.w	sl, #0
    1936:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1938:	9014      	str	r0, [sp, #80]	; 0x50
    193a:	f1ba 0f00 	cmp.w	sl, #0
    193e:	d009      	beq.n	1954 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x520>
    1940:	48ea      	ldr	r0, [pc, #936]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1942:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1946:	b928      	cbnz	r0, 1954 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x520>
    1948:	f002 fea6 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    194c:	2800      	cmp	r0, #0
    194e:	bf08      	it	eq
    1950:	2701      	moveq	r7, #1
    1952:	d000      	beq.n	1956 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x522>
    1954:	2700      	movs	r7, #0
    1956:	48e6      	ldr	r0, [pc, #920]	; (1cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    1958:	2200      	movs	r2, #0
    195a:	9215      	str	r2, [sp, #84]	; 0x54
    195c:	7800      	ldrb	r0, [r0, #0]
    195e:	4616      	mov	r6, r2
    1960:	2801      	cmp	r0, #1
    1962:	bf18      	it	ne
    1964:	2803      	cmpne	r0, #3
    1966:	d140      	bne.n	19ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5b6>
    1968:	48e1      	ldr	r0, [pc, #900]	; (1cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    196a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    196e:	eba8 0009 	sub.w	r0, r8, r9
    1972:	9015      	str	r0, [sp, #84]	; 0x54
    1974:	45c8      	cmp	r8, r9
    1976:	d938      	bls.n	19ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5b6>
    1978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    197a:	ea6f 0108 	mvn.w	r1, r8
    197e:	f8df e374 	ldr.w	lr, [pc, #884]	; 1cf4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c0>
    1982:	1858      	adds	r0, r3, r1
    1984:	f10d 0c0c 	add.w	ip, sp, #12
    1988:	aa17      	add	r2, sp, #92	; 0x5c
    198a:	4573      	cmp	r3, lr
    198c:	d904      	bls.n	1998 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x564>
    198e:	f240 6109 	movw	r1, #1545	; 0x609
    1992:	2070      	movs	r0, #112	; 0x70
    1994:	f002 fee4 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1998:	4bd7      	ldr	r3, [pc, #860]	; (1cf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c4>)
    199a:	4299      	cmp	r1, r3
    199c:	dd04      	ble.n	19a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x574>
    199e:	f240 610a 	movw	r1, #1546	; 0x60a
    19a2:	2070      	movs	r0, #112	; 0x70
    19a4:	f002 fedc 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19a8:	4bd4      	ldr	r3, [pc, #848]	; (1cfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c8>)
    19aa:	4299      	cmp	r1, r3
    19ac:	da04      	bge.n	19b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x584>
    19ae:	f240 610b 	movw	r1, #1547	; 0x60b
    19b2:	2070      	movs	r0, #112	; 0x70
    19b4:	f002 fed4 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19b8:	49d1      	ldr	r1, [pc, #836]	; (1d00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8cc>)
    19ba:	4281      	cmp	r1, r0
    19bc:	bfdc      	itt	le
    19be:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    19c2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    19c6:	dd05      	ble.n	19d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a0>
    19c8:	2800      	cmp	r0, #0
    19ca:	bfbc      	itt	lt
    19cc:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    19d0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    19d4:	4661      	mov	r1, ip
    19d6:	f001 feb5 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    19da:	9803      	ldr	r0, [sp, #12]
    19dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    19de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    19e2:	9003      	str	r0, [sp, #12]
    19e4:	1a08      	subs	r0, r1, r0
    19e6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    19ea:	2f00      	cmp	r7, #0
    19ec:	bf18      	it	ne
    19ee:	2632      	movne	r6, #50	; 0x32
    19f0:	d104      	bne.n	19fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5c8>
    19f2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    19f6:	2800      	cmp	r0, #0
    19f8:	bf18      	it	ne
    19fa:	2602      	movne	r6, #2
    19fc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1a00:	d008      	beq.n	1a14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e0>
    1a02:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1a04:	1b00      	subs	r0, r0, r4
    1a06:	0200      	lsls	r0, r0, #8
    1a08:	17c1      	asrs	r1, r0, #31
    1a0a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a0e:	1200      	asrs	r0, r0, #8
    1a10:	2801      	cmp	r0, #1
    1a12:	da02      	bge.n	1a1a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e6>
    1a14:	2104      	movs	r1, #4
    1a16:	9818      	ldr	r0, [sp, #96]	; 0x60
    1a18:	e00b      	b.n	1a32 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fe>
    1a1a:	b147      	cbz	r7, 1a2e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fa>
    1a1c:	48b3      	ldr	r0, [pc, #716]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1a1e:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1a22:	b120      	cbz	r0, 1a2e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fa>
    1a24:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1a28:	1c06      	adds	r6, r0, #0
    1a2a:	bf18      	it	ne
    1a2c:	2602      	movne	r6, #2
    1a2e:	4620      	mov	r0, r4
    1a30:	2101      	movs	r1, #1
    1a32:	f1b9 0f00 	cmp.w	r9, #0
    1a36:	d002      	beq.n	1a3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x60a>
    1a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1a3a:	2b1e      	cmp	r3, #30
    1a3c:	da02      	bge.n	1a44 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x610>
    1a3e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    1a42:	b113      	cbz	r3, 1a4a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x616>
    1a44:	f04f 0b01 	mov.w	fp, #1
    1a48:	1e49      	subs	r1, r1, #1
    1a4a:	198b      	adds	r3, r1, r6
    1a4c:	49a8      	ldr	r1, [pc, #672]	; (1cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    1a4e:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    1a52:	7809      	ldrb	r1, [r1, #0]
    1a54:	9115      	str	r1, [sp, #84]	; 0x54
    1a56:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1a58:	1a89      	subs	r1, r1, r2
    1a5a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
    1a5e:	ebac 0100 	sub.w	r1, ip, r0
    1a62:	0209      	lsls	r1, r1, #8
    1a64:	17ce      	asrs	r6, r1, #31
    1a66:	eb01 6116 	add.w	r1, r1, r6, lsr #24
    1a6a:	1209      	asrs	r1, r1, #8
    1a6c:	4299      	cmp	r1, r3
    1a6e:	db18      	blt.n	1aa2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x66e>
    1a70:	2a00      	cmp	r2, #0
    1a72:	bf18      	it	ne
    1a74:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    1a78:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    1a7a:	9705      	str	r7, [sp, #20]
    1a7c:	2700      	movs	r7, #0
    1a7e:	f001 ffb7 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1a82:	1a30      	subs	r0, r6, r0
    1a84:	0200      	lsls	r0, r0, #8
    1a86:	17c1      	asrs	r1, r0, #31
    1a88:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a8c:	1200      	asrs	r0, r0, #8
    1a8e:	283e      	cmp	r0, #62	; 0x3e
    1a90:	da3f      	bge.n	1b12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6de>
    1a92:	2d01      	cmp	r5, #1
    1a94:	d020      	beq.n	1ad8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6a4>
    1a96:	1e70      	subs	r0, r6, #1
    1a98:	9905      	ldr	r1, [sp, #20]
    1a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a9e:	b319      	cbz	r1, 1ae8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6b4>
    1aa0:	e02d      	b.n	1afe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ca>
    1aa2:	b182      	cbz	r2, 1ac6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x692>
    1aa4:	f1be 0f00 	cmp.w	lr, #0
    1aa8:	bf04      	itt	eq
    1aaa:	9915      	ldreq	r1, [sp, #84]	; 0x54
    1aac:	2903      	cmpeq	r1, #3
    1aae:	d00a      	beq.n	1ac6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x692>
    1ab0:	b927      	cbnz	r7, 1abc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x688>
    1ab2:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1ab6:	2900      	cmp	r1, #0
    1ab8:	bf18      	it	ne
    1aba:	1e9b      	subne	r3, r3, #2
    1abc:	2200      	movs	r2, #0
    1abe:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    1ac2:	4690      	mov	r8, r2
    1ac4:	e7c7      	b.n	1a56 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x622>
    1ac6:	bb07      	cbnz	r7, 1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1ac8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1acc:	b1e9      	cbz	r1, 1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1ace:	2100      	movs	r1, #0
    1ad0:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    1ad4:	1e9b      	subs	r3, r3, #2
    1ad6:	e7be      	b.n	1a56 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x622>
    1ad8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1adc:	d120      	bne.n	1b20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ec>
    1ade:	f640 110d 	movw	r1, #2317	; 0x90d
    1ae2:	2070      	movs	r0, #112	; 0x70
    1ae4:	f002 fe3c 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ae8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1aec:	d007      	beq.n	1afe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ca>
    1aee:	1a21      	subs	r1, r4, r0
    1af0:	0209      	lsls	r1, r1, #8
    1af2:	17ca      	asrs	r2, r1, #31
    1af4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1af8:	1209      	asrs	r1, r1, #8
    1afa:	2904      	cmp	r1, #4
    1afc:	dd03      	ble.n	1b06 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d2>
    1afe:	4604      	mov	r4, r0
    1b00:	f001 ff7c 	bl	39fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1b04:	e00c      	b.n	1b20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ec>
    1b06:	2900      	cmp	r1, #0
    1b08:	dd0a      	ble.n	1b20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ec>
    1b0a:	b01b      	add	sp, #108	; 0x6c
    1b0c:	2000      	movs	r0, #0
    1b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b12:	1e70      	subs	r0, r6, #1
    1b14:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1b18:	4620      	mov	r0, r4
    1b1a:	f001 ff6f 	bl	39fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1b1e:	4657      	mov	r7, sl
    1b20:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1b24:	d028      	beq.n	1b78 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x744>
    1b26:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1b28:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    1b2c:	1b00      	subs	r0, r0, r4
    1b2e:	f08b 0301 	eor.w	r3, fp, #1
    1b32:	4a74      	ldr	r2, [pc, #464]	; (1d04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d0>)
    1b34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b38:	ebac 0c04 	sub.w	ip, ip, r4
    1b3c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    1b40:	4283      	cmp	r3, r0
    1b42:	bf98      	it	ls
    1b44:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    1b48:	d2df      	bcs.n	1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1b4a:	4562      	cmp	r2, ip
    1b4c:	d3dd      	bcc.n	1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1b4e:	4620      	mov	r0, r4
    1b50:	f00b fb6a 	bl	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1b54:	4967      	ldr	r1, [pc, #412]	; (1cf4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c0>)
    1b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1b58:	1c4b      	adds	r3, r1, #1
    1b5a:	1a16      	subs	r6, r2, r0
    1b5c:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    1b60:	bf24      	itt	cs
    1b62:	eba0 0c02 	subcs.w	ip, r0, r2
    1b66:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    1b6a:	d310      	bcc.n	1b8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75a>
    1b6c:	42b1      	cmp	r1, r6
    1b6e:	d208      	bcs.n	1b82 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74e>
    1b70:	1a08      	subs	r0, r1, r0
    1b72:	4410      	add	r0, r2
    1b74:	1c46      	adds	r6, r0, #1
    1b76:	e00a      	b.n	1b8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75a>
    1b78:	f640 212c 	movw	r1, #2604	; 0xa2c
    1b7c:	2070      	movs	r0, #112	; 0x70
    1b7e:	f002 fdef 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b82:	4561      	cmp	r1, ip
    1b84:	d22c      	bcs.n	1be0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7ac>
    1b86:	1a89      	subs	r1, r1, r2
    1b88:	4408      	add	r0, r1
    1b8a:	1c40      	adds	r0, r0, #1
    1b8c:	4246      	negs	r6, r0
    1b8e:	4857      	ldr	r0, [pc, #348]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1b90:	7f80      	ldrb	r0, [r0, #30]
    1b92:	b350      	cbz	r0, 1bea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7b6>
    1b94:	4628      	mov	r0, r5
    1b96:	4645      	mov	r5, r8
    1b98:	f04f 0b00 	mov.w	fp, #0
    1b9c:	46d8      	mov	r8, fp
    1b9e:	2801      	cmp	r0, #1
    1ba0:	d005      	beq.n	1bae <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x77a>
    1ba2:	2002      	movs	r0, #2
    1ba4:	f002 f972 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ba8:	2001      	movs	r0, #1
    1baa:	f002 f96f 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1bae:	45a9      	cmp	r9, r5
    1bb0:	d22c      	bcs.n	1c0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7d8>
    1bb2:	eba6 0105 	sub.w	r1, r6, r5
    1bb6:	f04f 0301 	mov.w	r3, #1
    1bba:	f04f 0203 	mov.w	r2, #3
    1bbe:	f04f 0002 	mov.w	r0, #2
    1bc2:	f002 f89b 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1bc6:	2800      	cmp	r0, #0
    1bc8:	bf08      	it	eq
    1bca:	f04f 0801 	moveq.w	r8, #1
    1bce:	f1b9 0f00 	cmp.w	r9, #0
    1bd2:	d035      	beq.n	1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1bd4:	2301      	movs	r3, #1
    1bd6:	eba6 0109 	sub.w	r1, r6, r9
    1bda:	2203      	movs	r2, #3
    1bdc:	4618      	mov	r0, r3
    1bde:	e023      	b.n	1c28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7f4>
    1be0:	f640 310c 	movw	r1, #2828	; 0xb0c
    1be4:	2070      	movs	r0, #112	; 0x70
    1be6:	f002 fdbb 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bea:	45c1      	cmp	r9, r8
    1bec:	bf34      	ite	cc
    1bee:	4640      	movcc	r0, r8
    1bf0:	4648      	movcs	r0, r9
    1bf2:	f1bb 0f00 	cmp.w	fp, #0
    1bf6:	bf14      	ite	ne
    1bf8:	2100      	movne	r1, #0
    1bfa:	211e      	moveq	r1, #30
    1bfc:	4408      	add	r0, r1
    1bfe:	42b0      	cmp	r0, r6
    1c00:	dbc8      	blt.n	1b94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x760>
    1c02:	f640 213f 	movw	r1, #2623	; 0xa3f
    1c06:	2070      	movs	r0, #112	; 0x70
    1c08:	f002 fdaa 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c0c:	d910      	bls.n	1c30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7fc>
    1c0e:	2301      	movs	r3, #1
    1c10:	eba6 0109 	sub.w	r1, r6, r9
    1c14:	2203      	movs	r2, #3
    1c16:	4618      	mov	r0, r3
    1c18:	f002 f870 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c1c:	b328      	cbz	r0, 1c6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x836>
    1c1e:	b17d      	cbz	r5, 1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1c20:	1b71      	subs	r1, r6, r5
    1c22:	2301      	movs	r3, #1
    1c24:	2203      	movs	r2, #3
    1c26:	2002      	movs	r0, #2
    1c28:	f002 f868 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c2c:	b1e8      	cbz	r0, 1c6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x836>
    1c2e:	e007      	b.n	1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1c30:	ea55 0009 	orrs.w	r0, r5, r9
    1c34:	d004      	beq.n	1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1c36:	f640 1177 	movw	r1, #2423	; 0x977
    1c3a:	2070      	movs	r0, #112	; 0x70
    1c3c:	f002 fd90 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c40:	2301      	movs	r3, #1
    1c42:	2203      	movs	r2, #3
    1c44:	4631      	mov	r1, r6
    1c46:	2000      	movs	r0, #0
    1c48:	f002 f858 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c4c:	b168      	cbz	r0, 1c6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x836>
    1c4e:	2501      	movs	r5, #1
    1c50:	f1b8 0f00 	cmp.w	r8, #0
    1c54:	d003      	beq.n	1c5e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    1c56:	9814      	ldr	r0, [sp, #80]	; 0x50
    1c58:	900f      	str	r0, [sp, #60]	; 0x3c
    1c5a:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    1c5e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1d08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d4>
    1c62:	f1ba 0f00 	cmp.w	sl, #0
    1c66:	d10e      	bne.n	1c86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x852>
    1c68:	e009      	b.n	1c7e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x84a>
    1c6a:	2002      	movs	r0, #2
    1c6c:	f002 f90e 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c70:	2001      	movs	r0, #1
    1c72:	f002 f90b 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c76:	b01b      	add	sp, #108	; 0x6c
    1c78:	2000      	movs	r0, #0
    1c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c7e:	481b      	ldr	r0, [pc, #108]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1c80:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1c84:	b100      	cbz	r0, 1c88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x854>
    1c86:	b34f      	cbz	r7, 1cdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>
    1c88:	f8df a060 	ldr.w	sl, [pc, #96]	; 1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>
    1c8c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1c90:	b118      	cbz	r0, 1c9a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x866>
    1c92:	f002 fbc9 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1c96:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    1c9a:	b307      	cbz	r7, 1cde <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8aa>
    1c9c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1ca0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ca4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1ca8:	f8c8 0000 	str.w	r0, [r8]
    1cac:	2300      	movs	r3, #0
    1cae:	2203      	movs	r2, #3
    1cb0:	2005      	movs	r0, #5
    1cb2:	f002 f823 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cb6:	b368      	cbz	r0, 1d14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e0>
    1cb8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1cbc:	2005      	movs	r0, #5
    1cbe:	f002 f9ab 	bl	4018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    1cc2:	4912      	ldr	r1, [pc, #72]	; (1d0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d8>)
    1cc4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    1cc8:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    1ccc:	4910      	ldr	r1, [pc, #64]	; (1d10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8dc>)
    1cce:	12e0      	asrs	r0, r4, #11
    1cd0:	6008      	str	r0, [r1, #0]
    1cd2:	4c06      	ldr	r4, [pc, #24]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1cd4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1cd8:	b3f0      	cbz	r0, 1d58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>
    1cda:	e05b      	b.n	1d94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>
    1cdc:	e01b      	b.n	1d16 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e2>
    1cde:	e01f      	b.n	1d20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ec>
    1ce0:	40000508 	.word	0x40000508
    1ce4:	20000010 	.word	0x20000010
    1ce8:	20000c1c 	.word	0x20000c1c
    1cec:	20000f9c 	.word	0x20000f9c
    1cf0:	20000012 	.word	0x20000012
    1cf4:	1e847fff 	.word	0x1e847fff
    1cf8:	07a12000 	.word	0x07a12000
    1cfc:	f85ee000 	.word	0xf85ee000
    1d00:	1e848000 	.word	0x1e848000
    1d04:	003fffff 	.word	0x003fffff
    1d08:	4001f508 	.word	0x4001f508
    1d0c:	4001f098 	.word	0x4001f098
    1d10:	4001f504 	.word	0x4001f504
    1d14:	e035      	b.n	1d82 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36>
    1d16:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1dd0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>
    1d1a:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1d1e:	b358      	cbz	r0, 1d78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d20:	4c2b      	ldr	r4, [pc, #172]	; (1dd0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>)
    1d22:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d26:	b150      	cbz	r0, 1d3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90a>
    1d28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1d2c:	f8c8 0000 	str.w	r0, [r8]
    1d30:	2005      	movs	r0, #5
    1d32:	f002 f8ab 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1d36:	f002 fbdf 	bl	44f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1d3a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    1d3e:	ac0c      	add	r4, sp, #48	; 0x30
    1d40:	4824      	ldr	r0, [pc, #144]	; (1dd4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>)
    1d42:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1d46:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    1d4a:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    1d4e:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1d52:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1d56:	e000      	b.n	1d5a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1d58:	e018      	b.n	1d8c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>
    1d5a:	ac10      	add	r4, sp, #64	; 0x40
    1d5c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1d60:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    1d64:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1d68:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    1d6c:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    1d70:	b01b      	add	sp, #108	; 0x6c
    1d72:	2001      	movs	r0, #1
    1d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d78:	f002 fb72 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1d7c:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    1d80:	e78b      	b.n	1c9a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x866>
    1d82:	f240 313e 	movw	r1, #830	; 0x33e
    1d86:	2070      	movs	r0, #112	; 0x70
    1d88:	f002 fcea 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d8c:	f002 fba6 	bl	44dc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    1d90:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1d94:	eba6 0009 	sub.w	r0, r6, r9
    1d98:	f1a0 0119 	sub.w	r1, r0, #25
    1d9c:	2900      	cmp	r1, #0
    1d9e:	dc04      	bgt.n	1daa <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e>
    1da0:	f640 2169 	movw	r1, #2665	; 0xa69
    1da4:	2070      	movs	r0, #112	; 0x70
    1da6:	f002 fcdb 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1daa:	2203      	movs	r2, #3
    1dac:	2301      	movs	r3, #1
    1dae:	4610      	mov	r0, r2
    1db0:	f001 ffa4 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1db4:	b138      	cbz	r0, 1dc6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7a>
    1db6:	4808      	ldr	r0, [pc, #32]	; (1dd8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>)
    1db8:	6880      	ldr	r0, [r0, #8]
    1dba:	f8c0 b000 	str.w	fp, [r0]
    1dbe:	4807      	ldr	r0, [pc, #28]	; (1ddc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>)
    1dc0:	f8c0 b000 	str.w	fp, [r0]
    1dc4:	e7bb      	b.n	1d3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90a>
    1dc6:	f640 2174 	movw	r1, #2676	; 0xa74
    1dca:	2070      	movs	r0, #112	; 0x70
    1dcc:	f002 fcc8 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dd0:	20000f9c 	.word	0x20000f9c
    1dd4:	20000c1c 	.word	0x20000c1c
    1dd8:	20000010 	.word	0x20000010
    1ddc:	40000508 	.word	0x40000508
    1de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1de4:	4606      	mov	r6, r0
    1de6:	b083      	sub	sp, #12
    1de8:	7808      	ldrb	r0, [r1, #0]
    1dea:	7390      	strb	r0, [r2, #14]
    1dec:	7acf      	ldrb	r7, [r1, #11]
    1dee:	7357      	strb	r7, [r2, #13]
    1df0:	7a88      	ldrb	r0, [r1, #10]
    1df2:	7310      	strb	r0, [r2, #12]
    1df4:	8908      	ldrh	r0, [r1, #8]
    1df6:	4614      	mov	r4, r2
    1df8:	8150      	strh	r0, [r2, #10]
    1dfa:	460d      	mov	r5, r1
    1dfc:	780a      	ldrb	r2, [r1, #0]
    1dfe:	495f      	ldr	r1, [pc, #380]	; (1f7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>)
    1e00:	4699      	mov	r9, r3
    1e02:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    1e06:	424b      	negs	r3, r1
    1e08:	f1ac 0801 	sub.w	r8, ip, #1
    1e0c:	b15a      	cbz	r2, 1e26 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1e0e:	43c0      	mvns	r0, r0
    1e10:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1e14:	f104 0208 	add.w	r2, r4, #8
    1e18:	4288      	cmp	r0, r1
    1e1a:	dd3d      	ble.n	1e98 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>
    1e1c:	f240 610a 	movw	r1, #1546	; 0x60a
    1e20:	2070      	movs	r0, #112	; 0x70
    1e22:	f002 fc9d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e26:	68ee      	ldr	r6, [r5, #12]
    1e28:	686d      	ldr	r5, [r5, #4]
    1e2a:	ea6f 0900 	mvn.w	r9, r0
    1e2e:	f104 0208 	add.w	r2, r4, #8
    1e32:	eb06 0009 	add.w	r0, r6, r9
    1e36:	4546      	cmp	r6, r8
    1e38:	d904      	bls.n	1e44 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1e3a:	f240 6109 	movw	r1, #1545	; 0x609
    1e3e:	2070      	movs	r0, #112	; 0x70
    1e40:	f002 fc8e 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e44:	4589      	cmp	r9, r1
    1e46:	dce9      	bgt.n	1e1c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1e48:	4599      	cmp	r9, r3
    1e4a:	db28      	blt.n	1e9e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x152>
    1e4c:	4584      	cmp	ip, r0
    1e4e:	bfdc      	itt	le
    1e50:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1e54:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1e58:	dd05      	ble.n	1e66 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11a>
    1e5a:	2800      	cmp	r0, #0
    1e5c:	bfbc      	itt	lt
    1e5e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1e62:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1e66:	4621      	mov	r1, r4
    1e68:	f001 fc6c 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1e6c:	6820      	ldr	r0, [r4, #0]
    1e6e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1e72:	1970      	adds	r0, r6, r5
    1e74:	1c40      	adds	r0, r0, #1
    1e76:	6021      	str	r1, [r4, #0]
    1e78:	2f00      	cmp	r7, #0
    1e7a:	bf08      	it	eq
    1e7c:	307a      	addeq	r0, #122	; 0x7a
    1e7e:	d003      	beq.n	1e88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1e80:	2f01      	cmp	r7, #1
    1e82:	bf08      	it	eq
    1e84:	3044      	addeq	r0, #68	; 0x44
    1e86:	d12d      	bne.n	1ee4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>
    1e88:	f001 fc40 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1e8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e90:	6060      	str	r0, [r4, #4]
    1e92:	b003      	add	sp, #12
    1e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e98:	4601      	mov	r1, r0
    1e9a:	4298      	cmp	r0, r3
    1e9c:	da04      	bge.n	1ea8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1e9e:	f240 610b 	movw	r1, #1547	; 0x60b
    1ea2:	2070      	movs	r0, #112	; 0x70
    1ea4:	f002 fc5c 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ea8:	4584      	cmp	ip, r0
    1eaa:	bfdc      	itt	le
    1eac:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1eb0:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1eb4:	dd05      	ble.n	1ec2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x176>
    1eb6:	2800      	cmp	r0, #0
    1eb8:	bfbc      	itt	lt
    1eba:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1ebe:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1ec2:	4621      	mov	r1, r4
    1ec4:	f001 fc3e 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1ec8:	6820      	ldr	r0, [r4, #0]
    1eca:	2f00      	cmp	r7, #0
    1ecc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ed0:	f108 0001 	add.w	r0, r8, #1
    1ed4:	6021      	str	r1, [r4, #0]
    1ed6:	bf08      	it	eq
    1ed8:	307a      	addeq	r0, #122	; 0x7a
    1eda:	d008      	beq.n	1eee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a2>
    1edc:	2f01      	cmp	r7, #1
    1ede:	bf08      	it	eq
    1ee0:	3044      	addeq	r0, #68	; 0x44
    1ee2:	d004      	beq.n	1eee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a2>
    1ee4:	f240 61b1 	movw	r1, #1713	; 0x6b1
    1ee8:	2070      	movs	r0, #112	; 0x70
    1eea:	f002 fc39 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eee:	f001 fc0d 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1ef2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ef6:	6061      	str	r1, [r4, #4]
    1ef8:	8960      	ldrh	r0, [r4, #10]
    1efa:	aa01      	add	r2, sp, #4
    1efc:	4669      	mov	r1, sp
    1efe:	f001 fc21 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1f02:	481f      	ldr	r0, [pc, #124]	; (1f80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>)
    1f04:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1f08:	2920      	cmp	r1, #32
    1f0a:	d023      	beq.n	1f54 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>
    1f0c:	6900      	ldr	r0, [r0, #16]
    1f0e:	1d40      	adds	r0, r0, #5
    1f10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f14:	e9d4 2100 	ldrd	r2, r1, [r4]
    1f18:	1a89      	subs	r1, r1, r2
    1f1a:	6020      	str	r0, [r4, #0]
    1f1c:	4408      	add	r0, r1
    1f1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f22:	6060      	str	r0, [r4, #4]
    1f24:	464b      	mov	r3, r9
    1f26:	4632      	mov	r2, r6
    1f28:	4621      	mov	r1, r4
    1f2a:	68e8      	ldr	r0, [r5, #12]
    1f2c:	f7ff facc 	bl	14c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1f30:	2800      	cmp	r0, #0
    1f32:	bf1c      	itt	ne
    1f34:	b003      	addne	sp, #12
    1f36:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f3a:	e9d4 1000 	ldrd	r1, r0, [r4]
    1f3e:	1a40      	subs	r0, r0, r1
    1f40:	4430      	add	r0, r6
    1f42:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1f46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f4a:	e9c4 1000 	strd	r1, r0, [r4]
    1f4e:	b003      	add	sp, #12
    1f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f54:	8960      	ldrh	r0, [r4, #10]
    1f56:	f106 0709 	add.w	r7, r6, #9
    1f5a:	b120      	cbz	r0, 1f66 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21a>
    1f5c:	f002 fb9c 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f60:	2800      	cmp	r0, #0
    1f62:	bf08      	it	eq
    1f64:	3732      	addeq	r7, #50	; 0x32
    1f66:	4807      	ldr	r0, [pc, #28]	; (1f84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>)
    1f68:	7841      	ldrb	r1, [r0, #1]
    1f6a:	9800      	ldr	r0, [sp, #0]
    1f6c:	4281      	cmp	r1, r0
    1f6e:	bf84      	itt	hi
    1f70:	1a08      	subhi	r0, r1, r0
    1f72:	4407      	addhi	r7, r0
    1f74:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1f78:	e7cc      	b.n	1f14 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c8>
    1f7a:	0000      	.short	0x0000
    1f7c:	07a12000 	.word	0x07a12000
    1f80:	20000f9c 	.word	0x20000f9c
    1f84:	20000012 	.word	0x20000012
    1f88:	b510      	push	{r4, lr}
    1f8a:	4c15      	ldr	r4, [pc, #84]	; (1fe0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>)
    1f8c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1f90:	2820      	cmp	r0, #32
    1f92:	bf18      	it	ne
    1f94:	bd10      	popne	{r4, pc}
    1f96:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1f9a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    1f9e:	f890 1020 	ldrb.w	r1, [r0, #32]
    1fa2:	2920      	cmp	r1, #32
    1fa4:	d017      	beq.n	1fd6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28a>
    1fa6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1fe4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    1faa:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    1fae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1fb2:	785b      	ldrb	r3, [r3, #1]
    1fb4:	f880 3020 	strb.w	r3, [r0, #32]
    1fb8:	2301      	movs	r3, #1
    1fba:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    1fbe:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    1fc2:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    1fc6:	2002      	movs	r0, #2
    1fc8:	f000 f8b0 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    1fcc:	2000      	movs	r0, #0
    1fce:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1fd2:	77a0      	strb	r0, [r4, #30]
    1fd4:	bd10      	pop	{r4, pc}
    1fd6:	f240 318b 	movw	r1, #907	; 0x38b
    1fda:	2070      	movs	r0, #112	; 0x70
    1fdc:	f002 fbc0 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fe0:	20000f9c 	.word	0x20000f9c
    1fe4:	20000f1c 	.word	0x20000f1c
    1fe8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1fec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 20a8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x35c>
    1ff0:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1ff4:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1ff8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1ffc:	2c20      	cmp	r4, #32
    1ffe:	bf08      	it	eq
    2000:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2004:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 20ac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x360>
    2008:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 20b0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    200c:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    2010:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    2014:	2607      	movs	r6, #7
    2016:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    201a:	2801      	cmp	r0, #1
    201c:	d00e      	beq.n	203c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f0>
    201e:	2804      	cmp	r0, #4
    2020:	bf08      	it	eq
    2022:	2602      	moveq	r6, #2
    2024:	d00a      	beq.n	203c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f0>
    2026:	2805      	cmp	r0, #5
    2028:	bf0c      	ite	eq
    202a:	2603      	moveq	r6, #3
    202c:	2806      	cmpne	r0, #6
    202e:	d005      	beq.n	203c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f0>
    2030:	f640 01d9 	movw	r1, #2265	; 0x8d9
    2034:	f04f 0070 	mov.w	r0, #112	; 0x70
    2038:	f002 fb92 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    203c:	f1bb 0f00 	cmp.w	fp, #0
    2040:	bf18      	it	ne
    2042:	f3af 8000 	nopne.w
    2046:	f3ef 8010 	mrs	r0, PRIMASK
    204a:	b672      	cpsid	i
    204c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    2050:	784a      	ldrb	r2, [r1, #1]
    2052:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    2056:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    205a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    205e:	42a2      	cmp	r2, r4
    2060:	bf04      	itt	eq
    2062:	2220      	moveq	r2, #32
    2064:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    2068:	b1b8      	cbz	r0, 209a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34e>
    206a:	462a      	mov	r2, r5
    206c:	4621      	mov	r1, r4
    206e:	2001      	movs	r0, #1
    2070:	f000 f85c 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    2074:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2078:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    207c:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    2080:	6840      	ldr	r0, [r0, #4]
    2082:	4631      	mov	r1, r6
    2084:	4790      	blx	r2
    2086:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    208a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    208e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    2092:	2c20      	cmp	r4, #32
    2094:	d1bc      	bne.n	2010 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c4>
    2096:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    209a:	4806      	ldr	r0, [pc, #24]	; (20b4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x368>)
    209c:	2800      	cmp	r0, #0
    209e:	bf18      	it	ne
    20a0:	f3af 8000 	nopne.w
    20a4:	b662      	cpsie	i
    20a6:	e7e0      	b.n	206a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x31e>
    20a8:	20000f9c 	.word	0x20000f9c
    20ac:	00000000 	.word	0x00000000
    20b0:	20000f1c 	.word	0x20000f1c
    20b4:	00000000 	.word	0x00000000
    20b8:	b510      	push	{r4, lr}
    20ba:	4604      	mov	r4, r0
    20bc:	6800      	ldr	r0, [r0, #0]
    20be:	f00b f8b3 	bl	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    20c2:	4602      	mov	r2, r0
    20c4:	8960      	ldrh	r0, [r4, #10]
    20c6:	7a21      	ldrb	r1, [r4, #8]
    20c8:	4b14      	ldr	r3, [pc, #80]	; (211c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3d0>)
    20ca:	4408      	add	r0, r1
    20cc:	1c41      	adds	r1, r0, #1
    20ce:	1850      	adds	r0, r2, r1
    20d0:	429a      	cmp	r2, r3
    20d2:	d904      	bls.n	20de <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x392>
    20d4:	f240 6109 	movw	r1, #1545	; 0x609
    20d8:	2070      	movs	r0, #112	; 0x70
    20da:	f002 fb41 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20de:	4a10      	ldr	r2, [pc, #64]	; (2120 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3d4>)
    20e0:	4291      	cmp	r1, r2
    20e2:	dd04      	ble.n	20ee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a2>
    20e4:	f240 610a 	movw	r1, #1546	; 0x60a
    20e8:	2070      	movs	r0, #112	; 0x70
    20ea:	f002 fb39 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20ee:	4a0d      	ldr	r2, [pc, #52]	; (2124 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3d8>)
    20f0:	4291      	cmp	r1, r2
    20f2:	da04      	bge.n	20fe <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3b2>
    20f4:	f240 610b 	movw	r1, #1547	; 0x60b
    20f8:	2070      	movs	r0, #112	; 0x70
    20fa:	f002 fb31 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20fe:	490a      	ldr	r1, [pc, #40]	; (2128 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3dc>)
    2100:	4281      	cmp	r1, r0
    2102:	bfde      	ittt	le
    2104:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2108:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    210c:	bd10      	pople	{r4, pc}
    210e:	2800      	cmp	r0, #0
    2110:	bfbc      	itt	lt
    2112:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2116:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    211a:	bd10      	pop	{r4, pc}
    211c:	1e847fff 	.word	0x1e847fff
    2120:	07a12000 	.word	0x07a12000
    2124:	f85ee000 	.word	0xf85ee000
    2128:	1e848000 	.word	0x1e848000
    212c:	f8df c054 	ldr.w	ip, [pc, #84]	; 2184 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x438>
    2130:	b510      	push	{r4, lr}
    2132:	2300      	movs	r3, #0
    2134:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    2138:	2807      	cmp	r0, #7
    213a:	d21e      	bcs.n	217a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x42e>
    213c:	e8df f000 	tbb	[pc, r0]
    2140:	05050505 	.word	0x05050505
    2144:	00040404 	.word	0x00040404
    2148:	2301      	movs	r3, #1
    214a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    214e:	2b00      	cmp	r3, #0
    2150:	bf08      	it	eq
    2152:	bd10      	popeq	{r4, pc}
    2154:	480c      	ldr	r0, [pc, #48]	; (2188 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x43c>)
    2156:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    215a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    215e:	2820      	cmp	r0, #32
    2160:	bf0e      	itee	eq
    2162:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    2166:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    216a:	7041      	strbne	r1, [r0, #1]
    216c:	2020      	movs	r0, #32
    216e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    2172:	7058      	strb	r0, [r3, #1]
    2174:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    2178:	bd10      	pop	{r4, pc}
    217a:	f44f 7115 	mov.w	r1, #596	; 0x254
    217e:	2070      	movs	r0, #112	; 0x70
    2180:	f002 faee 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2184:	20000f1c 	.word	0x20000f1c
    2188:	20000f9c 	.word	0x20000f9c
    218c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2190:	b083      	sub	sp, #12
    2192:	485c      	ldr	r0, [pc, #368]	; (2304 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>)
    2194:	9904      	ldr	r1, [sp, #16]
    2196:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    219a:	9001      	str	r0, [sp, #4]
    219c:	f890 4020 	ldrb.w	r4, [r0, #32]
    21a0:	9803      	ldr	r0, [sp, #12]
    21a2:	4625      	mov	r5, r4
    21a4:	2801      	cmp	r0, #1
    21a6:	bf18      	it	ne
    21a8:	2802      	cmpne	r0, #2
    21aa:	d005      	beq.n	21b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x46c>
    21ac:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    21b0:	f04f 0070 	mov.w	r0, #112	; 0x70
    21b4:	f002 fad4 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21b8:	2700      	movs	r7, #0
    21ba:	2d20      	cmp	r5, #32
    21bc:	d04a      	beq.n	2254 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x508>
    21be:	4851      	ldr	r0, [pc, #324]	; (2304 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>)
    21c0:	9100      	str	r1, [sp, #0]
    21c2:	2600      	movs	r6, #0
    21c4:	7f80      	ldrb	r0, [r0, #30]
    21c6:	2800      	cmp	r0, #0
    21c8:	bf08      	it	eq
    21ca:	2602      	moveq	r6, #2
    21cc:	f001 fc10 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    21d0:	f8df a138 	ldr.w	sl, [pc, #312]	; 230c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c0>
    21d4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    21d8:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    21dc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 2308 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5bc>
    21e0:	688a      	ldr	r2, [r1, #8]
    21e2:	68c9      	ldr	r1, [r1, #12]
    21e4:	1a12      	subs	r2, r2, r0
    21e6:	1a09      	subs	r1, r1, r0
    21e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    21ec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    21f0:	4296      	cmp	r6, r2
    21f2:	bf98      	it	ls
    21f4:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    21f8:	d201      	bcs.n	21fe <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4b2>
    21fa:	4589      	cmp	r9, r1
    21fc:	d228      	bcs.n	2250 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    21fe:	4a44      	ldr	r2, [pc, #272]	; (2310 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c4>)
    2200:	9900      	ldr	r1, [sp, #0]
    2202:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    2206:	4622      	mov	r2, r4
    2208:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    220c:	784c      	ldrb	r4, [r1, #1]
    220e:	2c20      	cmp	r4, #32
    2210:	d016      	beq.n	2240 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4f4>
    2212:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2216:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    221a:	f8dc 8008 	ldr.w	r8, [ip, #8]
    221e:	f8dc c00c 	ldr.w	ip, [ip, #12]
    2222:	eba8 0800 	sub.w	r8, r8, r0
    2226:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    222a:	ebac 0100 	sub.w	r1, ip, r0
    222e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2232:	4546      	cmp	r6, r8
    2234:	bf98      	it	ls
    2236:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    223a:	d2e4      	bcs.n	2206 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ba>
    223c:	4589      	cmp	r9, r1
    223e:	d3e2      	bcc.n	2206 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ba>
    2240:	2a20      	cmp	r2, #32
    2242:	d005      	beq.n	2250 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    2244:	2120      	movs	r1, #32
    2246:	2004      	movs	r0, #4
    2248:	9b00      	ldr	r3, [sp, #0]
    224a:	f7ff f901 	bl	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    224e:	4604      	mov	r4, r0
    2250:	42ac      	cmp	r4, r5
    2252:	d115      	bne.n	2280 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x534>
    2254:	482f      	ldr	r0, [pc, #188]	; (2314 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c8>)
    2256:	2800      	cmp	r0, #0
    2258:	bf18      	it	ne
    225a:	f3af 8000 	nopne.w
    225e:	f001 fbc7 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2262:	4c28      	ldr	r4, [pc, #160]	; (2304 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>)
    2264:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    2268:	2920      	cmp	r1, #32
    226a:	d00d      	beq.n	2288 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x53c>
    226c:	68e1      	ldr	r1, [r4, #12]
    226e:	1c82      	adds	r2, r0, #2
    2270:	1a51      	subs	r1, r2, r1
    2272:	0209      	lsls	r1, r1, #8
    2274:	17ca      	asrs	r2, r1, #31
    2276:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    227a:	1209      	asrs	r1, r1, #8
    227c:	2900      	cmp	r1, #0
    227e:	dd03      	ble.n	2288 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x53c>
    2280:	b005      	add	sp, #20
    2282:	2000      	movs	r0, #0
    2284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2288:	2d20      	cmp	r5, #32
    228a:	d00d      	beq.n	22a8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x55c>
    228c:	462a      	mov	r2, r5
    228e:	9903      	ldr	r1, [sp, #12]
    2290:	f7ff fb16 	bl	18c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    2294:	b358      	cbz	r0, 22ee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a2>
    2296:	9801      	ldr	r0, [sp, #4]
    2298:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    229c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    22a0:	b005      	add	sp, #20
    22a2:	2001      	movs	r0, #1
    22a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22a8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    22ac:	b118      	cbz	r0, 22b6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x56a>
    22ae:	f002 f8bb 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    22b2:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    22b6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    22ba:	b150      	cbz	r0, 22d2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x586>
    22bc:	4916      	ldr	r1, [pc, #88]	; (2318 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5cc>)
    22be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    22c2:	6008      	str	r0, [r1, #0]
    22c4:	2005      	movs	r0, #5
    22c6:	f001 fde1 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    22ca:	f002 f915 	bl	44f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    22ce:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    22d2:	2004      	movs	r0, #4
    22d4:	f001 fdda 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    22d8:	f001 fe40 	bl	3f5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    22dc:	2020      	movs	r0, #32
    22de:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    22e2:	480e      	ldr	r0, [pc, #56]	; (231c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5d0>)
    22e4:	6880      	ldr	r0, [r0, #8]
    22e6:	6007      	str	r7, [r0, #0]
    22e8:	480d      	ldr	r0, [pc, #52]	; (2320 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5d4>)
    22ea:	6007      	str	r7, [r0, #0]
    22ec:	e7d8      	b.n	22a0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x554>
    22ee:	462a      	mov	r2, r5
    22f0:	2120      	movs	r1, #32
    22f2:	2004      	movs	r0, #4
    22f4:	9b04      	ldr	r3, [sp, #16]
    22f6:	f7ff f8ab 	bl	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    22fa:	b005      	add	sp, #20
    22fc:	2000      	movs	r0, #0
    22fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2302:	0000      	.short	0x0000
    2304:	20000f9c 	.word	0x20000f9c
    2308:	003fffff 	.word	0x003fffff
    230c:	20000c1c 	.word	0x20000c1c
    2310:	20000f1c 	.word	0x20000f1c
    2314:	00000000 	.word	0x00000000
    2318:	4001f508 	.word	0x4001f508
    231c:	20000010 	.word	0x20000010
    2320:	40000508 	.word	0x40000508

00002324 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    2324:	4906      	ldr	r1, [pc, #24]	; (2340 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    2326:	b510      	push	{r4, lr}
    2328:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    232c:	2a20      	cmp	r2, #32
    232e:	bf1c      	itt	ne
    2330:	7788      	strbne	r0, [r1, #30]
    2332:	bd10      	popne	{r4, pc}
    2334:	f240 31ea 	movw	r1, #1002	; 0x3ea
    2338:	2070      	movs	r0, #112	; 0x70
    233a:	f002 fa11 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    233e:	0000      	.short	0x0000
    2340:	20000f9c 	.word	0x20000f9c

00002344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    2344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2348:	4e5b      	ldr	r6, [pc, #364]	; (24b8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    234a:	4681      	mov	r9, r0
    234c:	b085      	sub	sp, #20
    234e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2352:	468a      	mov	sl, r1
    2354:	2820      	cmp	r0, #32
    2356:	d04d      	beq.n	23f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    2358:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    235c:	f106 040c 	add.w	r4, r6, #12
    2360:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2364:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    2368:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    236c:	2020      	movs	r0, #32
    236e:	f88d 0000 	strb.w	r0, [sp]
    2372:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2376:	aa03      	add	r2, sp, #12
    2378:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    237c:	a901      	add	r1, sp, #4
    237e:	f890 5020 	ldrb.w	r5, [r0, #32]
    2382:	6930      	ldr	r0, [r6, #16]
    2384:	9002      	str	r0, [sp, #8]
    2386:	6830      	ldr	r0, [r6, #0]
    2388:	4448      	add	r0, r9
    238a:	f001 f9db 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    238e:	68f8      	ldr	r0, [r7, #12]
    2390:	9901      	ldr	r1, [sp, #4]
    2392:	4a4a      	ldr	r2, [pc, #296]	; (24bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    2394:	4408      	add	r0, r1
    2396:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    239a:	4291      	cmp	r1, r2
    239c:	d82f      	bhi.n	23fe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    239e:	68b9      	ldr	r1, [r7, #8]
    23a0:	1a41      	subs	r1, r0, r1
    23a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    23a6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    23aa:	d228      	bcs.n	23fe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    23ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23b0:	6060      	str	r0, [r4, #4]
    23b2:	4630      	mov	r0, r6
    23b4:	f884 a00c 	strb.w	sl, [r4, #12]
    23b8:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    23bc:	46ea      	mov	sl, sp
    23be:	2d20      	cmp	r5, #32
    23c0:	bf1c      	itt	ne
    23c2:	493f      	ldrne	r1, [pc, #252]	; (24c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    23c4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    23c8:	d03c      	beq.n	2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    23ca:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    23ce:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    23d2:	6860      	ldr	r0, [r4, #4]
    23d4:	68ba      	ldr	r2, [r7, #8]
    23d6:	4621      	mov	r1, r4
    23d8:	1a10      	subs	r0, r2, r0
    23da:	0200      	lsls	r0, r0, #8
    23dc:	17c2      	asrs	r2, r0, #31
    23de:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    23e2:	f107 0608 	add.w	r6, r7, #8
    23e6:	1200      	asrs	r0, r0, #8
    23e8:	d41b      	bmi.n	2422 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    23ea:	8970      	ldrh	r0, [r6, #10]
    23ec:	b350      	cbz	r0, 2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    23ee:	8948      	ldrh	r0, [r1, #10]
    23f0:	b148      	cbz	r0, 2406 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    23f2:	e027      	b.n	2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    23f4:	f640 317b 	movw	r1, #2939	; 0xb7b
    23f8:	2070      	movs	r0, #112	; 0x70
    23fa:	f002 f9b1 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23fe:	b005      	add	sp, #20
    2400:	2001      	movs	r0, #1
    2402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2406:	4620      	mov	r0, r4
    2408:	f7ff fe56 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    240c:	f001 f97e 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2410:	6831      	ldr	r1, [r6, #0]
    2412:	1a08      	subs	r0, r1, r0
    2414:	0200      	lsls	r0, r0, #8
    2416:	17c1      	asrs	r1, r0, #31
    2418:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    241c:	1200      	asrs	r0, r0, #8
    241e:	2833      	cmp	r0, #51	; 0x33
    2420:	da10      	bge.n	2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2422:	f88a 5000 	strb.w	r5, [sl]
    2426:	7d39      	ldrb	r1, [r7, #20]
    2428:	7b20      	ldrb	r0, [r4, #12]
    242a:	4281      	cmp	r1, r0
    242c:	d805      	bhi.n	243a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    242e:	9802      	ldr	r0, [sp, #8]
    2430:	6060      	str	r0, [r4, #4]
    2432:	b005      	add	sp, #20
    2434:	2002      	movs	r0, #2
    2436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    243a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    243e:	7845      	ldrb	r5, [r0, #1]
    2440:	2d20      	cmp	r5, #32
    2442:	d1c2      	bne.n	23ca <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    2444:	2005      	movs	r0, #5
    2446:	f001 fd21 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    244a:	4c1b      	ldr	r4, [pc, #108]	; (24b8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    244c:	f04f 30ff 	mov.w	r0, #4294967295
    2450:	60a0      	str	r0, [r4, #8]
    2452:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2456:	f89d 2000 	ldrb.w	r2, [sp]
    245a:	2120      	movs	r1, #32
    245c:	2a20      	cmp	r2, #32
    245e:	bf13      	iteet	ne
    2460:	2005      	movne	r0, #5
    2462:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    2466:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    246a:	f7fe fff1 	blne	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    246e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    2472:	4913      	ldr	r1, [pc, #76]	; (24c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    2474:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    2478:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    247c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2480:	7048      	strb	r0, [r1, #1]
    2482:	6820      	ldr	r0, [r4, #0]
    2484:	4448      	add	r0, r9
    2486:	6020      	str	r0, [r4, #0]
    2488:	2001      	movs	r0, #1
    248a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    248e:	7e60      	ldrb	r0, [r4, #25]
    2490:	2801      	cmp	r0, #1
    2492:	d105      	bne.n	24a0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    2494:	6920      	ldr	r0, [r4, #16]
    2496:	1e40      	subs	r0, r0, #1
    2498:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    249c:	f001 fb48 	bl	3b30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    24a0:	f89d 0000 	ldrb.w	r0, [sp]
    24a4:	2820      	cmp	r0, #32
    24a6:	d003      	beq.n	24b0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    24a8:	4806      	ldr	r0, [pc, #24]	; (24c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    24aa:	7840      	ldrb	r0, [r0, #1]
    24ac:	f002 fa28 	bl	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    24b0:	b005      	add	sp, #20
    24b2:	2000      	movs	r0, #0
    24b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24b8:	20000f9c 	.word	0x20000f9c
    24bc:	07a11f9c 	.word	0x07a11f9c
    24c0:	20000f1c 	.word	0x20000f1c
    24c4:	20000010 	.word	0x20000010

000024c8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    24c8:	b570      	push	{r4, r5, r6, lr}
    24ca:	4a23      	ldr	r2, [pc, #140]	; (2558 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    24cc:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    24d0:	2920      	cmp	r1, #32
    24d2:	d039      	beq.n	2548 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    24d4:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    24d8:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    24dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    24e0:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    24e4:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    24e8:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    24ec:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    24f0:	f891 1020 	ldrb.w	r1, [r1, #32]
    24f4:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    24f8:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    24fc:	2920      	cmp	r1, #32
    24fe:	d028      	beq.n	2552 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    2500:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    2504:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    2508:	7d2d      	ldrb	r5, [r5, #20]
    250a:	4285      	cmp	r5, r0
    250c:	bf84      	itt	hi
    250e:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    2512:	7849      	ldrbhi	r1, [r1, #1]
    2514:	d8f2      	bhi.n	24fc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    2516:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    251a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    251e:	f8dc 000c 	ldr.w	r0, [ip, #12]
    2522:	6889      	ldr	r1, [r1, #8]
    2524:	6814      	ldr	r4, [r2, #0]
    2526:	1a08      	subs	r0, r1, r0
    2528:	0200      	lsls	r0, r0, #8
    252a:	17c1      	asrs	r1, r0, #31
    252c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2530:	1200      	asrs	r0, r0, #8
    2532:	d407      	bmi.n	2544 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    2534:	f00a fe78 	bl	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2538:	f104 0164 	add.w	r1, r4, #100	; 0x64
    253c:	4288      	cmp	r0, r1
    253e:	bf24      	itt	cs
    2540:	1b00      	subcs	r0, r0, r4
    2542:	bd70      	popcs	{r4, r5, r6, pc}
    2544:	2000      	movs	r0, #0
    2546:	bd70      	pop	{r4, r5, r6, pc}
    2548:	f640 314d 	movw	r1, #2893	; 0xb4d
    254c:	2070      	movs	r0, #112	; 0x70
    254e:	f002 f907 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2552:	f04f 30ff 	mov.w	r0, #4294967295
    2556:	bd70      	pop	{r4, r5, r6, pc}
    2558:	20000f9c 	.word	0x20000f9c

0000255c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    255c:	4806      	ldr	r0, [pc, #24]	; (2578 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    255e:	b510      	push	{r4, lr}
    2560:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    2564:	2920      	cmp	r1, #32
    2566:	bf1c      	itt	ne
    2568:	7e00      	ldrbne	r0, [r0, #24]
    256a:	bd10      	popne	{r4, pc}
    256c:	f640 3174 	movw	r1, #2932	; 0xb74
    2570:	2070      	movs	r0, #112	; 0x70
    2572:	f002 f8f5 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2576:	0000      	.short	0x0000
    2578:	20000f9c 	.word	0x20000f9c

0000257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    257c:	4602      	mov	r2, r0
    257e:	4b14      	ldr	r3, [pc, #80]	; (25d0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    2580:	b510      	push	{r4, lr}
    2582:	4408      	add	r0, r1
    2584:	429a      	cmp	r2, r3
    2586:	d904      	bls.n	2592 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    2588:	f240 6109 	movw	r1, #1545	; 0x609
    258c:	2070      	movs	r0, #112	; 0x70
    258e:	f002 f8e7 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2592:	4a10      	ldr	r2, [pc, #64]	; (25d4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    2594:	4291      	cmp	r1, r2
    2596:	dd04      	ble.n	25a2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    2598:	f240 610a 	movw	r1, #1546	; 0x60a
    259c:	2070      	movs	r0, #112	; 0x70
    259e:	f002 f8df 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25a2:	4a0d      	ldr	r2, [pc, #52]	; (25d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    25a4:	4291      	cmp	r1, r2
    25a6:	da04      	bge.n	25b2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    25a8:	f240 610b 	movw	r1, #1547	; 0x60b
    25ac:	2070      	movs	r0, #112	; 0x70
    25ae:	f002 f8d7 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25b2:	490a      	ldr	r1, [pc, #40]	; (25dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    25b4:	4281      	cmp	r1, r0
    25b6:	bfde      	ittt	le
    25b8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    25bc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    25c0:	bd10      	pople	{r4, pc}
    25c2:	2800      	cmp	r0, #0
    25c4:	bfbc      	itt	lt
    25c6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    25ca:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    25ce:	bd10      	pop	{r4, pc}
    25d0:	1e847fff 	.word	0x1e847fff
    25d4:	07a12000 	.word	0x07a12000
    25d8:	f85ee000 	.word	0xf85ee000
    25dc:	1e848000 	.word	0x1e848000

000025e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    25e0:	4a10      	ldr	r2, [pc, #64]	; (2624 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    25e2:	1a0b      	subs	r3, r1, r0
    25e4:	f102 0c01 	add.w	ip, r2, #1
    25e8:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    25ec:	bf3c      	itt	cc
    25ee:	4618      	movcc	r0, r3
    25f0:	4770      	bxcc	lr
    25f2:	b510      	push	{r4, lr}
    25f4:	1a44      	subs	r4, r0, r1
    25f6:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    25fa:	bf3c      	itt	cc
    25fc:	4618      	movcc	r0, r3
    25fe:	bd10      	popcc	{r4, pc}
    2600:	429a      	cmp	r2, r3
    2602:	d203      	bcs.n	260c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    2604:	1a10      	subs	r0, r2, r0
    2606:	4408      	add	r0, r1
    2608:	1c40      	adds	r0, r0, #1
    260a:	bd10      	pop	{r4, pc}
    260c:	42a2      	cmp	r2, r4
    260e:	d204      	bcs.n	261a <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    2610:	1a51      	subs	r1, r2, r1
    2612:	4408      	add	r0, r1
    2614:	1c40      	adds	r0, r0, #1
    2616:	4240      	negs	r0, r0
    2618:	bd10      	pop	{r4, pc}
    261a:	f640 310c 	movw	r1, #2828	; 0xb0c
    261e:	2070      	movs	r0, #112	; 0x70
    2620:	f002 f89e 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2624:	1e847fff 	.word	0x1e847fff

00002628 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    2628:	4907      	ldr	r1, [pc, #28]	; (2648 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    262a:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    262e:	4282      	cmp	r2, r0
    2630:	bf04      	itt	eq
    2632:	6848      	ldreq	r0, [r1, #4]
    2634:	4770      	bxeq	lr
    2636:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    263a:	4904      	ldr	r1, [pc, #16]	; (264c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    263c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2640:	3008      	adds	r0, #8
    2642:	f7ff bd39 	b.w	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    2646:	0000      	.short	0x0000
    2648:	20000f9c 	.word	0x20000f9c
    264c:	20000c1c 	.word	0x20000c1c

00002650 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    2650:	490e      	ldr	r1, [pc, #56]	; (268c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    2652:	b510      	push	{r4, lr}
    2654:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2658:	2820      	cmp	r0, #32
    265a:	d012      	beq.n	2682 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    265c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2660:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    2664:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2668:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    266c:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    2670:	6840      	ldr	r0, [r0, #4]
    2672:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2676:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    267a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    267e:	2104      	movs	r1, #4
    2680:	4710      	bx	r2
    2682:	f640 01bc 	movw	r1, #2236	; 0x8bc
    2686:	2070      	movs	r0, #112	; 0x70
    2688:	f002 f86a 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    268c:	20000f9c 	.word	0x20000f9c

00002690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2692:	4d6d      	ldr	r5, [pc, #436]	; (2848 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2694:	496d      	ldr	r1, [pc, #436]	; (284c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    2696:	2601      	movs	r6, #1
    2698:	f505 7460 	add.w	r4, r5, #896	; 0x380
    269c:	2808      	cmp	r0, #8
    269e:	d273      	bcs.n	2788 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    26a0:	e8df f000 	tbb	[pc, r0]
    26a4:	af9d6704 	.word	0xaf9d6704
    26a8:	b9b444cd 	.word	0xb9b444cd
    26ac:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    26b0:	b918      	cbnz	r0, 26ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    26b2:	f001 fed5 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    26b6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    26ba:	8ae0      	ldrh	r0, [r4, #22]
    26bc:	b110      	cbz	r0, 26c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    26be:	f001 ffeb 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    26c2:	b188      	cbz	r0, 26e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    26c4:	f7ff fc60 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    26c8:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    26cc:	68a1      	ldr	r1, [r4, #8]
    26ce:	f1b1 3fff 	cmp.w	r1, #4294967295
    26d2:	d005      	beq.n	26e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    26d4:	2301      	movs	r3, #1
    26d6:	2203      	movs	r2, #3
    26d8:	2005      	movs	r0, #5
    26da:	f001 fb0f 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    26de:	b140      	cbz	r0, 26f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    26e0:	7e60      	ldrb	r0, [r4, #25]
    26e2:	2801      	cmp	r0, #1
    26e4:	d110      	bne.n	2708 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    26e6:	e009      	b.n	26fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    26e8:	f44f 6107 	mov.w	r1, #2160	; 0x870
    26ec:	2070      	movs	r0, #112	; 0x70
    26ee:	f002 f837 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26f2:	f640 0175 	movw	r1, #2165	; 0x875
    26f6:	2070      	movs	r0, #112	; 0x70
    26f8:	f002 f832 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26fc:	6920      	ldr	r0, [r4, #16]
    26fe:	1e40      	subs	r0, r0, #1
    2700:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2704:	f001 fa14 	bl	3b30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2708:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    270c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2710:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2714:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2718:	6840      	ldr	r0, [r0, #4]
    271a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    271e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2722:	b001      	add	sp, #4
    2724:	2101      	movs	r1, #1
    2726:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    272a:	4710      	bx	r2
    272c:	f7ff fc2c 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    2730:	f04f 30ff 	mov.w	r0, #4294967295
    2734:	60a0      	str	r0, [r4, #8]
    2736:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    273a:	f88d 0000 	strb.w	r0, [sp]
    273e:	f89d 0000 	ldrb.w	r0, [sp]
    2742:	b188      	cbz	r0, 2768 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    2744:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2748:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    274c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2750:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2754:	6840      	ldr	r0, [r0, #4]
    2756:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    275a:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    275e:	b001      	add	sp, #4
    2760:	2106      	movs	r1, #6
    2762:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2766:	4710      	bx	r2
    2768:	f640 0186 	movw	r1, #2182	; 0x886
    276c:	2070      	movs	r0, #112	; 0x70
    276e:	f001 fff7 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2772:	f7ff fc09 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    2776:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    277a:	f001 ff8d 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    277e:	b120      	cbz	r0, 278a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    2780:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2784:	b130      	cbz	r0, 2794 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    2786:	e009      	b.n	279c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    2788:	e059      	b.n	283e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    278a:	f640 0196 	movw	r1, #2198	; 0x896
    278e:	2070      	movs	r0, #112	; 0x70
    2790:	f001 ffe6 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2794:	f001 fe64 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2798:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    279c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    27a0:	b158      	cbz	r0, 27ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    27a2:	492b      	ldr	r1, [pc, #172]	; (2850 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    27a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    27a8:	6008      	str	r0, [r1, #0]
    27aa:	2005      	movs	r0, #5
    27ac:	f001 fb6e 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27b0:	f001 fea2 	bl	44f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    27b4:	2000      	movs	r0, #0
    27b6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    27ba:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    27be:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    27c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    27c6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    27ca:	6840      	ldr	r0, [r0, #4]
    27cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    27d0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    27d4:	b001      	add	sp, #4
    27d6:	2100      	movs	r1, #0
    27d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    27dc:	4710      	bx	r2
    27de:	f001 fc07 	bl	3ff0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    27e2:	8ae0      	ldrh	r0, [r4, #22]
    27e4:	b110      	cbz	r0, 27ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    27e6:	f001 ff57 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    27ea:	b128      	cbz	r0, 27f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    27ec:	4819      	ldr	r0, [pc, #100]	; (2854 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    27ee:	7800      	ldrb	r0, [r0, #0]
    27f0:	2803      	cmp	r0, #3
    27f2:	bf08      	it	eq
    27f4:	7766      	strbeq	r6, [r4, #29]
    27f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27f8:	f640 01a1 	movw	r1, #2209	; 0x8a1
    27fc:	2070      	movs	r0, #112	; 0x70
    27fe:	f001 ffaf 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2802:	4815      	ldr	r0, [pc, #84]	; (2858 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    2804:	6006      	str	r6, [r0, #0]
    2806:	6888      	ldr	r0, [r1, #8]
    2808:	6006      	str	r6, [r0, #0]
    280a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    280c:	7808      	ldrb	r0, [r1, #0]
    280e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2812:	f002 b875 	b.w	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2816:	f7ff fbb7 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    281a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    281e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2822:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2826:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    282a:	6840      	ldr	r0, [r0, #4]
    282c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2830:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2834:	b001      	add	sp, #4
    2836:	2105      	movs	r1, #5
    2838:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    283c:	4710      	bx	r2
    283e:	f640 01b4 	movw	r1, #2228	; 0x8b4
    2842:	2070      	movs	r0, #112	; 0x70
    2844:	f001 ff8c 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2848:	20000c1c 	.word	0x20000c1c
    284c:	20000010 	.word	0x20000010
    2850:	4001f508 	.word	0x4001f508
    2854:	20000012 	.word	0x20000012
    2858:	40000508 	.word	0x40000508

0000285c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    285c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2860:	4682      	mov	sl, r0
    2862:	48dc      	ldr	r0, [pc, #880]	; (2bd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    2864:	b08b      	sub	sp, #44	; 0x2c
    2866:	6800      	ldr	r0, [r0, #0]
    2868:	4ddb      	ldr	r5, [pc, #876]	; (2bd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    286a:	05c0      	lsls	r0, r0, #23
    286c:	0dc0      	lsrs	r0, r0, #23
    286e:	d00e      	beq.n	288e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2870:	3810      	subs	r0, #16
    2872:	b240      	sxtb	r0, r0
    2874:	2800      	cmp	r0, #0
    2876:	bfb8      	it	lt
    2878:	f000 000f 	andlt.w	r0, r0, #15
    287c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2880:	bfac      	ite	ge
    2882:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2886:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    288a:	0940      	lsrs	r0, r0, #5
    288c:	d00d      	beq.n	28aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    288e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2890:	f04f 0b00 	mov.w	fp, #0
    2894:	7800      	ldrb	r0, [r0, #0]
    2896:	2800      	cmp	r0, #0
    2898:	bf18      	it	ne
    289a:	2801      	cmpne	r0, #1
    289c:	d018      	beq.n	28d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    289e:	f240 714f 	movw	r1, #1871	; 0x74f
    28a2:	f04f 0070 	mov.w	r0, #112	; 0x70
    28a6:	f001 ff5b 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28aa:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    28ae:	f04f 0b01 	mov.w	fp, #1
    28b2:	2820      	cmp	r0, #32
    28b4:	d007      	beq.n	28c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    28b6:	980c      	ldr	r0, [sp, #48]	; 0x30
    28b8:	7800      	ldrb	r0, [r0, #0]
    28ba:	b148      	cbz	r0, 28d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    28bc:	f240 714b 	movw	r1, #1867	; 0x74b
    28c0:	2070      	movs	r0, #112	; 0x70
    28c2:	f001 ff4d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28c6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    28ca:	2070      	movs	r0, #112	; 0x70
    28cc:	f001 ff48 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28d0:	4cc2      	ldr	r4, [pc, #776]	; (2bdc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    28d2:	b124      	cbz	r4, 28de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    28d4:	2100      	movs	r1, #0
    28d6:	f240 7052 	movw	r0, #1874	; 0x752
    28da:	f3af 8000 	nop.w
    28de:	49c0      	ldr	r1, [pc, #768]	; (2be0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    28e0:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    28e4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    28e8:	f04f 0801 	mov.w	r8, #1
    28ec:	9000      	str	r0, [sp, #0]
    28ee:	b124      	cbz	r4, 28fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    28f0:	2100      	movs	r1, #0
    28f2:	f240 705a 	movw	r0, #1882	; 0x75a
    28f6:	f3af 8000 	nop.w
    28fa:	f1b8 0f00 	cmp.w	r8, #0
    28fe:	d009      	beq.n	2914 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    2900:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    2904:	f04f 0900 	mov.w	r9, #0
    2908:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    290c:	f1bb 0f00 	cmp.w	fp, #0
    2910:	d007      	beq.n	2922 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    2912:	e032      	b.n	297a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    2914:	48b3      	ldr	r0, [pc, #716]	; (2be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2916:	2800      	cmp	r0, #0
    2918:	bf18      	it	ne
    291a:	f3af 8000 	nopne.w
    291e:	b662      	cpsie	i
    2920:	e7ee      	b.n	2900 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    2922:	4637      	mov	r7, r6
    2924:	2001      	movs	r0, #1
    2926:	ea20 0607 	bic.w	r6, r0, r7
    292a:	48af      	ldr	r0, [pc, #700]	; (2be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    292c:	2240      	movs	r2, #64	; 0x40
    292e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2932:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2936:	f00a fde5 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    293a:	b124      	cbz	r4, 2946 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    293c:	2100      	movs	r1, #0
    293e:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2942:	f3af 8000 	nop.w
    2946:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    294a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    294e:	6a09      	ldr	r1, [r1, #32]
    2950:	6201      	str	r1, [r0, #32]
    2952:	b124      	cbz	r4, 295e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    2954:	2100      	movs	r1, #0
    2956:	f240 50d1 	movw	r0, #1489	; 0x5d1
    295a:	f3af 8000 	nop.w
    295e:	b124      	cbz	r4, 296a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    2960:	2100      	movs	r1, #0
    2962:	f240 7064 	movw	r0, #1892	; 0x764
    2966:	f3af 8000 	nop.w
    296a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    296e:	f88d 0004 	strb.w	r0, [sp, #4]
    2972:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2976:	2800      	cmp	r0, #0
    2978:	d1b9      	bne.n	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    297a:	b124      	cbz	r4, 2986 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    297c:	2100      	movs	r1, #0
    297e:	f240 706e 	movw	r0, #1902	; 0x76e
    2982:	f3af 8000 	nop.w
    2986:	f001 f833 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    298a:	4680      	mov	r8, r0
    298c:	4633      	mov	r3, r6
    298e:	aa06      	add	r2, sp, #24
    2990:	990c      	ldr	r1, [sp, #48]	; 0x30
    2992:	f7ff fa25 	bl	1de0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    2996:	b124      	cbz	r4, 29a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    2998:	2100      	movs	r1, #0
    299a:	f240 7075 	movw	r0, #1909	; 0x775
    299e:	f3af 8000 	nop.w
    29a2:	4991      	ldr	r1, [pc, #580]	; (2be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    29a4:	a806      	add	r0, sp, #24
    29a6:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    29aa:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    29ae:	2901      	cmp	r1, #1
    29b0:	bf18      	it	ne
    29b2:	2902      	cmpne	r1, #2
    29b4:	d13c      	bne.n	2a30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    29b6:	9906      	ldr	r1, [sp, #24]
    29b8:	9b07      	ldr	r3, [sp, #28]
    29ba:	eba1 0108 	sub.w	r1, r1, r8
    29be:	4a8b      	ldr	r2, [pc, #556]	; (2bec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    29c0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    29c4:	eba3 0308 	sub.w	r3, r3, r8
    29c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    29cc:	2902      	cmp	r1, #2
    29ce:	d371      	bcc.n	2ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    29d0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    29d4:	d26e      	bcs.n	2ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    29d6:	429a      	cmp	r2, r3
    29d8:	d36c      	bcc.n	2ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    29da:	f04f 0901 	mov.w	r9, #1
    29de:	ab01      	add	r3, sp, #4
    29e0:	aa05      	add	r2, sp, #20
    29e2:	4631      	mov	r1, r6
    29e4:	f7fe feec 	bl	17c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    29e8:	2800      	cmp	r0, #0
    29ea:	d06b      	beq.n	2ac4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    29ec:	f89d 1014 	ldrb.w	r1, [sp, #20]
    29f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    29f4:	4633      	mov	r3, r6
    29f6:	428a      	cmp	r2, r1
    29f8:	d068      	beq.n	2acc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    29fa:	2005      	movs	r0, #5
    29fc:	f7fe fd28 	bl	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2a00:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2a04:	7048      	strb	r0, [r1, #1]
    2a06:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2a0a:	2820      	cmp	r0, #32
    2a0c:	bf03      	ittte	eq
    2a0e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2a12:	f880 a020 	strbeq.w	sl, [r0, #32]
    2a16:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    2a1a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2a1e:	bf18      	it	ne
    2a20:	f880 a001 	strbne.w	sl, [r0, #1]
    2a24:	4632      	mov	r2, r6
    2a26:	4651      	mov	r1, sl
    2a28:	f05f 0003 	movs.w	r0, #3
    2a2c:	f7ff fb7e 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    2a30:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2a34:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2a38:	f88d 0004 	strb.w	r0, [sp, #4]
    2a3c:	f89d 7004 	ldrb.w	r7, [sp, #4]
    2a40:	b124      	cbz	r4, 2a4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    2a42:	2100      	movs	r1, #0
    2a44:	f240 707c 	movw	r0, #1916	; 0x77c
    2a48:	f3af 8000 	nop.w
    2a4c:	4868      	ldr	r0, [pc, #416]	; (2bf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    2a4e:	2800      	cmp	r0, #0
    2a50:	bf18      	it	ne
    2a52:	f3af 8000 	nopne.w
    2a56:	f3ef 8810 	mrs	r8, PRIMASK
    2a5a:	b672      	cpsid	i
    2a5c:	b124      	cbz	r4, 2a68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    2a5e:	2100      	movs	r1, #0
    2a60:	f240 7082 	movw	r0, #1922	; 0x782
    2a64:	f3af 8000 	nop.w
    2a68:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2a6c:	f88d 0004 	strb.w	r0, [sp, #4]
    2a70:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2a74:	2800      	cmp	r0, #0
    2a76:	f47f af3a 	bne.w	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2a7a:	b124      	cbz	r4, 2a86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    2a7c:	2100      	movs	r1, #0
    2a7e:	f240 708a 	movw	r0, #1930	; 0x78a
    2a82:	f3af 8000 	nop.w
    2a86:	f10d 0e18 	add.w	lr, sp, #24
    2a8a:	9800      	ldr	r0, [sp, #0]
    2a8c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    2a90:	f100 0008 	add.w	r0, r0, #8
    2a94:	f1b9 0f00 	cmp.w	r9, #0
    2a98:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    2a9c:	d044      	beq.n	2b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2a9e:	b124      	cbz	r4, 2aaa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    2aa0:	2100      	movs	r1, #0
    2aa2:	f240 7097 	movw	r0, #1943	; 0x797
    2aa6:	f3af 8000 	nop.w
    2aaa:	f1bb 0f00 	cmp.w	fp, #0
    2aae:	d12c      	bne.n	2b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2ab0:	e016      	b.n	2ae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    2ab2:	e7ff      	b.n	2ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2ab4:	4632      	mov	r2, r6
    2ab6:	4651      	mov	r1, sl
    2ab8:	2004      	movs	r0, #4
    2aba:	f7ff fb37 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    2abe:	f04f 0901 	mov.w	r9, #1
    2ac2:	e7b5      	b.n	2a30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    2ac4:	4632      	mov	r2, r6
    2ac6:	4651      	mov	r1, sl
    2ac8:	2004      	movs	r0, #4
    2aca:	e7af      	b.n	2a2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    2acc:	2920      	cmp	r1, #32
    2ace:	bf19      	ittee	ne
    2ad0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2ad4:	7840      	ldrbne	r0, [r0, #1]
    2ad6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2ada:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2ade:	e78f      	b.n	2a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    2ae0:	b19f      	cbz	r7, 2b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2ae2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2ae6:	2820      	cmp	r0, #32
    2ae8:	d10f      	bne.n	2b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2aea:	b124      	cbz	r4, 2af6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    2aec:	2100      	movs	r1, #0
    2aee:	f240 709c 	movw	r0, #1948	; 0x79c
    2af2:	f3af 8000 	nop.w
    2af6:	4631      	mov	r1, r6
    2af8:	2002      	movs	r0, #2
    2afa:	f7ff fb47 	bl	218c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x440>
    2afe:	b920      	cbnz	r0, 2b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2b00:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b02:	7800      	ldrb	r0, [r0, #0]
    2b04:	b3f0      	cbz	r0, 2b84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    2b06:	2801      	cmp	r0, #1
    2b08:	d04c      	beq.n	2ba4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    2b0a:	b124      	cbz	r4, 2b16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2b0c:	2100      	movs	r1, #0
    2b0e:	f240 70b9 	movw	r0, #1977	; 0x7b9
    2b12:	f3af 8000 	nop.w
    2b16:	f1bb 0f00 	cmp.w	fp, #0
    2b1a:	bf18      	it	ne
    2b1c:	2001      	movne	r0, #1
    2b1e:	d04a      	beq.n	2bb6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    2b20:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2b24:	f04f 0901 	mov.w	r9, #1
    2b28:	b124      	cbz	r4, 2b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2b2a:	2100      	movs	r1, #0
    2b2c:	f240 70ca 	movw	r0, #1994	; 0x7ca
    2b30:	f3af 8000 	nop.w
    2b34:	f1b8 0f00 	cmp.w	r8, #0
    2b38:	d045      	beq.n	2bc6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    2b3a:	b124      	cbz	r4, 2b46 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    2b3c:	2100      	movs	r1, #0
    2b3e:	f240 70ce 	movw	r0, #1998	; 0x7ce
    2b42:	f3af 8000 	nop.w
    2b46:	f1b9 0f00 	cmp.w	r9, #0
    2b4a:	d011      	beq.n	2b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2b4c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2b50:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2b54:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2b58:	2820      	cmp	r0, #32
    2b5a:	d009      	beq.n	2b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2b5c:	b124      	cbz	r4, 2b68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    2b5e:	2100      	movs	r1, #0
    2b60:	f240 70d5 	movw	r0, #2005	; 0x7d5
    2b64:	f3af 8000 	nop.w
    2b68:	4822      	ldr	r0, [pc, #136]	; (2bf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2b6a:	7840      	ldrb	r0, [r0, #1]
    2b6c:	f001 fec8 	bl	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2b70:	b124      	cbz	r4, 2b7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2b72:	2100      	movs	r1, #0
    2b74:	f240 70da 	movw	r0, #2010	; 0x7da
    2b78:	f3af 8000 	nop.w
    2b7c:	b00d      	add	sp, #52	; 0x34
    2b7e:	4648      	mov	r0, r9
    2b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b84:	e7ff      	b.n	2b86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    2b86:	b124      	cbz	r4, 2b92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2b88:	2100      	movs	r1, #0
    2b8a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    2b8e:	f3af 8000 	nop.w
    2b92:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2b96:	4651      	mov	r1, sl
    2b98:	2004      	movs	r0, #4
    2b9a:	f7ff fac7 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    2b9e:	f04f 0901 	mov.w	r9, #1
    2ba2:	e7c1      	b.n	2b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2ba4:	2c00      	cmp	r4, #0
    2ba6:	f43f aea2 	beq.w	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2baa:	2100      	movs	r1, #0
    2bac:	f240 70af 	movw	r0, #1967	; 0x7af
    2bb0:	f3af 8000 	nop.w
    2bb4:	e69b      	b.n	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2bb6:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    2bba:	2001      	movs	r0, #1
    2bbc:	ea20 0101 	bic.w	r1, r0, r1
    2bc0:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    2bc4:	e7ac      	b.n	2b20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    2bc6:	4807      	ldr	r0, [pc, #28]	; (2be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2bc8:	2800      	cmp	r0, #0
    2bca:	bf18      	it	ne
    2bcc:	f3af 8000 	nopne.w
    2bd0:	b662      	cpsie	i
    2bd2:	e7b2      	b.n	2b3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    2bd4:	e000ed04 	.word	0xe000ed04
    2bd8:	20000f9c 	.word	0x20000f9c
    2bdc:	00000000 	.word	0x00000000
    2be0:	20000c1c 	.word	0x20000c1c
    2be4:	00000000 	.word	0x00000000
    2be8:	20000f1c 	.word	0x20000f1c
    2bec:	003fffff 	.word	0x003fffff
    2bf0:	00000000 	.word	0x00000000
    2bf4:	20000010 	.word	0x20000010

00002bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2bf8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bfc:	48a5      	ldr	r0, [pc, #660]	; (2e94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    2bfe:	b08c      	sub	sp, #48	; 0x30
    2c00:	6800      	ldr	r0, [r0, #0]
    2c02:	05c0      	lsls	r0, r0, #23
    2c04:	0dc0      	lsrs	r0, r0, #23
    2c06:	d011      	beq.n	2c2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    2c08:	3810      	subs	r0, #16
    2c0a:	b240      	sxtb	r0, r0
    2c0c:	2800      	cmp	r0, #0
    2c0e:	bfb8      	it	lt
    2c10:	f000 000f 	andlt.w	r0, r0, #15
    2c14:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2c18:	bfac      	ite	ge
    2c1a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2c1e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2c22:	0940      	lsrs	r0, r0, #5
    2c24:	bf08      	it	eq
    2c26:	f04f 0901 	moveq.w	r9, #1
    2c2a:	d001      	beq.n	2c30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2c2c:	f04f 0900 	mov.w	r9, #0
    2c30:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c32:	7800      	ldrb	r0, [r0, #0]
    2c34:	2800      	cmp	r0, #0
    2c36:	f04f 0000 	mov.w	r0, #0
    2c3a:	bf1c      	itt	ne
    2c3c:	b00d      	addne	sp, #52	; 0x34
    2c3e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c42:	f8df a254 	ldr.w	sl, [pc, #596]	; 2e98 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    2c46:	4d95      	ldr	r5, [pc, #596]	; (2e9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    2c48:	4c95      	ldr	r4, [pc, #596]	; (2ea0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2c4a:	f04f 0b00 	mov.w	fp, #0
    2c4e:	900b      	str	r0, [sp, #44]	; 0x2c
    2c50:	b125      	cbz	r5, 2c5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    2c52:	2100      	movs	r1, #0
    2c54:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    2c58:	f3af 8000 	nop.w
    2c5c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2c60:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    2c64:	f04f 0800 	mov.w	r8, #0
    2c68:	b125      	cbz	r5, 2c74 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    2c6a:	2100      	movs	r1, #0
    2c6c:	f240 605d 	movw	r0, #1629	; 0x65d
    2c70:	f3af 8000 	nop.w
    2c74:	f1b9 0f00 	cmp.w	r9, #0
    2c78:	d11d      	bne.n	2cb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2c7a:	4637      	mov	r7, r6
    2c7c:	2001      	movs	r0, #1
    2c7e:	ea20 0607 	bic.w	r6, r0, r7
    2c82:	4888      	ldr	r0, [pc, #544]	; (2ea4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2c84:	2240      	movs	r2, #64	; 0x40
    2c86:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2c8a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2c8e:	f00a fc39 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2c92:	b125      	cbz	r5, 2c9e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    2c94:	2100      	movs	r1, #0
    2c96:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2c9a:	f3af 8000 	nop.w
    2c9e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    2ca2:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    2ca6:	6a09      	ldr	r1, [r1, #32]
    2ca8:	6201      	str	r1, [r0, #32]
    2caa:	b125      	cbz	r5, 2cb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2cac:	2100      	movs	r1, #0
    2cae:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2cb2:	f3af 8000 	nop.w
    2cb6:	b125      	cbz	r5, 2cc2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    2cb8:	2100      	movs	r1, #0
    2cba:	f240 6065 	movw	r0, #1637	; 0x665
    2cbe:	f3af 8000 	nop.w
    2cc2:	f000 fe95 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2cc6:	4607      	mov	r7, r0
    2cc8:	4633      	mov	r3, r6
    2cca:	466a      	mov	r2, sp
    2ccc:	990c      	ldr	r1, [sp, #48]	; 0x30
    2cce:	f7ff f887 	bl	1de0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    2cd2:	b125      	cbz	r5, 2cde <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    2cd4:	2100      	movs	r1, #0
    2cd6:	f240 606b 	movw	r0, #1643	; 0x66b
    2cda:	f3af 8000 	nop.w
    2cde:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2ce2:	2820      	cmp	r0, #32
    2ce4:	d014      	beq.n	2d10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2ce6:	6920      	ldr	r0, [r4, #16]
    2ce8:	9900      	ldr	r1, [sp, #0]
    2cea:	1a09      	subs	r1, r1, r0
    2cec:	0209      	lsls	r1, r1, #8
    2cee:	17ca      	asrs	r2, r1, #31
    2cf0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2cf4:	1209      	asrs	r1, r1, #8
    2cf6:	d50b      	bpl.n	2d10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2cf8:	e9dd 2100 	ldrd	r2, r1, [sp]
    2cfc:	1a89      	subs	r1, r1, r2
    2cfe:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2d02:	4408      	add	r0, r1
    2d04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d08:	e9cd 2000 	strd	r2, r0, [sp]
    2d0c:	f04f 0801 	mov.w	r8, #1
    2d10:	b14d      	cbz	r5, 2d26 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    2d12:	2100      	movs	r1, #0
    2d14:	f240 6075 	movw	r0, #1653	; 0x675
    2d18:	f3af 8000 	nop.w
    2d1c:	2100      	movs	r1, #0
    2d1e:	f240 607b 	movw	r0, #1659	; 0x67b
    2d22:	f3af 8000 	nop.w
    2d26:	9800      	ldr	r0, [sp, #0]
    2d28:	9901      	ldr	r1, [sp, #4]
    2d2a:	1bc0      	subs	r0, r0, r7
    2d2c:	1bc9      	subs	r1, r1, r7
    2d2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2d36:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2d3a:	d205      	bcs.n	2d48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2d3c:	458a      	cmp	sl, r1
    2d3e:	d303      	bcc.n	2d48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2d40:	f1b9 0f00 	cmp.w	r9, #0
    2d44:	d10c      	bne.n	2d60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    2d46:	e003      	b.n	2d50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    2d48:	f1b9 0f00 	cmp.w	r9, #0
    2d4c:	d038      	beq.n	2dc0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    2d4e:	e094      	b.n	2e7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2d50:	4633      	mov	r3, r6
    2d52:	463a      	mov	r2, r7
    2d54:	4669      	mov	r1, sp
    2d56:	4854      	ldr	r0, [pc, #336]	; (2ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2d58:	f7fe fbb6 	bl	14c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2d5c:	ea48 0800 	orr.w	r8, r8, r0
    2d60:	f1b8 0f00 	cmp.w	r8, #0
    2d64:	d022      	beq.n	2dac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    2d66:	9800      	ldr	r0, [sp, #0]
    2d68:	f00a fa5e 	bl	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2d6c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2d70:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2d74:	4b4d      	ldr	r3, [pc, #308]	; (2eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2d76:	4411      	add	r1, r2
    2d78:	1c49      	adds	r1, r1, #1
    2d7a:	1842      	adds	r2, r0, r1
    2d7c:	4298      	cmp	r0, r3
    2d7e:	d841      	bhi.n	2e04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    2d80:	4849      	ldr	r0, [pc, #292]	; (2ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2d82:	4281      	cmp	r1, r0
    2d84:	dc5a      	bgt.n	2e3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2d86:	4240      	negs	r0, r0
    2d88:	4281      	cmp	r1, r0
    2d8a:	db5f      	blt.n	2e4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    2d8c:	1c58      	adds	r0, r3, #1
    2d8e:	4290      	cmp	r0, r2
    2d90:	bfdc      	itt	le
    2d92:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2d96:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2d9a:	dd05      	ble.n	2da8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2d9c:	2a00      	cmp	r2, #0
    2d9e:	bfbc      	itt	lt
    2da0:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2da4:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2da8:	980c      	ldr	r0, [sp, #48]	; 0x30
    2daa:	60c2      	str	r2, [r0, #12]
    2dac:	2001      	movs	r0, #1
    2dae:	900b      	str	r0, [sp, #44]	; 0x2c
    2db0:	2d00      	cmp	r5, #0
    2db2:	d062      	beq.n	2e7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2db4:	2100      	movs	r1, #0
    2db6:	f240 608e 	movw	r0, #1678	; 0x68e
    2dba:	f3af 8000 	nop.w
    2dbe:	e05c      	b.n	2e7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2dc0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2dc4:	aa08      	add	r2, sp, #32
    2dc6:	a907      	add	r1, sp, #28
    2dc8:	f000 fcbc 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2dcc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2dd0:	2820      	cmp	r0, #32
    2dd2:	d01c      	beq.n	2e0e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    2dd4:	6920      	ldr	r0, [r4, #16]
    2dd6:	1d40      	adds	r0, r0, #5
    2dd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ddc:	e9dd 2100 	ldrd	r2, r1, [sp]
    2de0:	1a89      	subs	r1, r1, r2
    2de2:	4401      	add	r1, r0
    2de4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2de8:	e9cd 0100 	strd	r0, r1, [sp]
    2dec:	f00a fa1c 	bl	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2df0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2df4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2df8:	4b2c      	ldr	r3, [pc, #176]	; (2eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2dfa:	4411      	add	r1, r2
    2dfc:	1c4a      	adds	r2, r1, #1
    2dfe:	1881      	adds	r1, r0, r2
    2e00:	4298      	cmp	r0, r3
    2e02:	d918      	bls.n	2e36 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    2e04:	f240 6109 	movw	r1, #1545	; 0x609
    2e08:	2070      	movs	r0, #112	; 0x70
    2e0a:	f001 fca9 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e0e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2e12:	f107 0609 	add.w	r6, r7, #9
    2e16:	b120      	cbz	r0, 2e22 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    2e18:	f001 fc3e 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2e1c:	2800      	cmp	r0, #0
    2e1e:	bf08      	it	eq
    2e20:	3632      	addeq	r6, #50	; 0x32
    2e22:	4823      	ldr	r0, [pc, #140]	; (2eb0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    2e24:	7841      	ldrb	r1, [r0, #1]
    2e26:	9807      	ldr	r0, [sp, #28]
    2e28:	4281      	cmp	r1, r0
    2e2a:	bf84      	itt	hi
    2e2c:	1a08      	subhi	r0, r1, r0
    2e2e:	4406      	addhi	r6, r0
    2e30:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2e34:	e7d2      	b.n	2ddc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    2e36:	481c      	ldr	r0, [pc, #112]	; (2ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2e38:	4282      	cmp	r2, r0
    2e3a:	dd04      	ble.n	2e46 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    2e3c:	f240 610a 	movw	r1, #1546	; 0x60a
    2e40:	2070      	movs	r0, #112	; 0x70
    2e42:	f001 fc8d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e46:	481b      	ldr	r0, [pc, #108]	; (2eb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    2e48:	4282      	cmp	r2, r0
    2e4a:	da04      	bge.n	2e56 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2e4c:	f240 610b 	movw	r1, #1547	; 0x60b
    2e50:	2070      	movs	r0, #112	; 0x70
    2e52:	f001 fc85 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e56:	4818      	ldr	r0, [pc, #96]	; (2eb8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    2e58:	4288      	cmp	r0, r1
    2e5a:	bfdc      	itt	le
    2e5c:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2e60:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2e64:	dd05      	ble.n	2e72 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    2e66:	2900      	cmp	r1, #0
    2e68:	bfbc      	itt	lt
    2e6a:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2e6e:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2e72:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e74:	60c1      	str	r1, [r0, #12]
    2e76:	2001      	movs	r0, #1
    2e78:	900b      	str	r0, [sp, #44]	; 0x2c
    2e7a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2e7e:	f88d 0010 	strb.w	r0, [sp, #16]
    2e82:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2e86:	2800      	cmp	r0, #0
    2e88:	f47f aee2 	bne.w	2c50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    2e8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2e8e:	b00d      	add	sp, #52	; 0x34
    2e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e94:	e000ed04 	.word	0xe000ed04
    2e98:	003fffff 	.word	0x003fffff
    2e9c:	00000000 	.word	0x00000000
    2ea0:	20000f9c 	.word	0x20000f9c
    2ea4:	20000f1c 	.word	0x20000f1c
    2ea8:	07a12000 	.word	0x07a12000
    2eac:	1e847fff 	.word	0x1e847fff
    2eb0:	20000012 	.word	0x20000012
    2eb4:	f85ee000 	.word	0xf85ee000
    2eb8:	1e848000 	.word	0x1e848000

00002ebc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2ebc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ec0:	4d88      	ldr	r5, [pc, #544]	; (30e4 <CONFIG_USB_DEVICE_VID+0x101>)
    2ec2:	b08c      	sub	sp, #48	; 0x30
    2ec4:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2ec8:	2000      	movs	r0, #0
    2eca:	9009      	str	r0, [sp, #36]	; 0x24
    2ecc:	2001      	movs	r0, #1
    2ece:	4c86      	ldr	r4, [pc, #536]	; (30e8 <CONFIG_USB_DEVICE_VID+0x105>)
    2ed0:	f04f 0900 	mov.w	r9, #0
    2ed4:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    2ed8:	4680      	mov	r8, r0
    2eda:	9008      	str	r0, [sp, #32]
    2edc:	b124      	cbz	r4, 2ee8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    2ede:	2100      	movs	r1, #0
    2ee0:	f240 70e9 	movw	r0, #2025	; 0x7e9
    2ee4:	f3af 8000 	nop.w
    2ee8:	9808      	ldr	r0, [sp, #32]
    2eea:	2800      	cmp	r0, #0
    2eec:	d037      	beq.n	2f5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    2eee:	bf00      	nop
    2ef0:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2ef4:	b124      	cbz	r4, 2f00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    2ef6:	2100      	movs	r1, #0
    2ef8:	f240 70ee 	movw	r0, #2030	; 0x7ee
    2efc:	f3af 8000 	nop.w
    2f00:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    2f04:	2240      	movs	r2, #64	; 0x40
    2f06:	ea28 060a 	bic.w	r6, r8, sl
    2f0a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    2f0e:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    2f12:	4683      	mov	fp, r0
    2f14:	f00a faf6 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2f18:	b124      	cbz	r4, 2f24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    2f1a:	2100      	movs	r1, #0
    2f1c:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2f20:	f3af 8000 	nop.w
    2f24:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2f28:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    2f2c:	9000      	str	r0, [sp, #0]
    2f2e:	6a09      	ldr	r1, [r1, #32]
    2f30:	6201      	str	r1, [r0, #32]
    2f32:	b124      	cbz	r4, 2f3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    2f34:	2100      	movs	r1, #0
    2f36:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2f3a:	f3af 8000 	nop.w
    2f3e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2f42:	f88d 0008 	strb.w	r0, [sp, #8]
    2f46:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2f4a:	b178      	cbz	r0, 2f6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    2f4c:	2c00      	cmp	r4, #0
    2f4e:	bf1c      	itt	ne
    2f50:	2100      	movne	r1, #0
    2f52:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    2f56:	d0c1      	beq.n	2edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2f58:	f3af 8000 	nop.w
    2f5c:	e7be      	b.n	2edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2f5e:	4863      	ldr	r0, [pc, #396]	; (30ec <CONFIG_USB_DEVICE_VID+0x109>)
    2f60:	2800      	cmp	r0, #0
    2f62:	bf18      	it	ne
    2f64:	f3af 8000 	nopne.w
    2f68:	b662      	cpsie	i
    2f6a:	e7c1      	b.n	2ef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    2f6c:	b124      	cbz	r4, 2f78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    2f6e:	2100      	movs	r1, #0
    2f70:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2f74:	f3af 8000 	nop.w
    2f78:	980c      	ldr	r0, [sp, #48]	; 0x30
    2f7a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2f7e:	2803      	cmp	r0, #3
    2f80:	d172      	bne.n	3068 <CONFIG_USB_DEVICE_VID+0x85>
    2f82:	f8dd a000 	ldr.w	sl, [sp]
    2f86:	f8cd a018 	str.w	sl, [sp, #24]
    2f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    2f8c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2f90:	4288      	cmp	r0, r1
    2f92:	bf14      	ite	ne
    2f94:	f04f 0b00 	movne.w	fp, #0
    2f98:	f04f 0b01 	moveq.w	fp, #1
    2f9c:	f10a 0c20 	add.w	ip, sl, #32
    2fa0:	4686      	mov	lr, r0
    2fa2:	2220      	movs	r2, #32
    2fa4:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2fa8:	e003      	b.n	2fb2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    2faa:	4602      	mov	r2, r0
    2fac:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2fb0:	7840      	ldrb	r0, [r0, #1]
    2fb2:	4288      	cmp	r0, r1
    2fb4:	d002      	beq.n	2fbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    2fb6:	2820      	cmp	r0, #32
    2fb8:	d00a      	beq.n	2fd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2fba:	e7f6      	b.n	2faa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    2fbc:	2820      	cmp	r0, #32
    2fbe:	d007      	beq.n	2fd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2fc0:	4586      	cmp	lr, r0
    2fc2:	d107      	bne.n	2fd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    2fc4:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    2fc8:	7840      	ldrb	r0, [r0, #1]
    2fca:	f88c 0000 	strb.w	r0, [ip]
    2fce:	e007      	b.n	2fe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    2fd0:	4648      	mov	r0, r9
    2fd2:	e00c      	b.n	2fee <CONFIG_USB_DEVICE_VID+0xb>
    2fd4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2fd8:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2fdc:	7840      	ldrb	r0, [r0, #1]
    2fde:	7048      	strb	r0, [r1, #1]
    2fe0:	b124      	cbz	r4, 2fec <CONFIG_USB_DEVICE_VID+0x9>
    2fe2:	2100      	movs	r1, #0
    2fe4:	f240 5037 	movw	r0, #1335	; 0x537
    2fe8:	f3af 8000 	nop.w
    2fec:	4640      	mov	r0, r8
    2fee:	ea10 0f0b 	tst.w	r0, fp
    2ff2:	bf18      	it	ne
    2ff4:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    2ff8:	2800      	cmp	r0, #0
    2ffa:	d052      	beq.n	30a2 <CONFIG_USB_DEVICE_VID+0xbf>
    2ffc:	b124      	cbz	r4, 3008 <CONFIG_USB_DEVICE_VID+0x25>
    2ffe:	2100      	movs	r1, #0
    3000:	f240 70fd 	movw	r0, #2045	; 0x7fd
    3004:	f3af 8000 	nop.w
    3008:	4632      	mov	r2, r6
    300a:	2001      	movs	r0, #1
    300c:	990c      	ldr	r1, [sp, #48]	; 0x30
    300e:	f7ff f88d 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    3012:	9806      	ldr	r0, [sp, #24]
    3014:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    3018:	f88d 0008 	strb.w	r0, [sp, #8]
    301c:	f89d a008 	ldrb.w	sl, [sp, #8]
    3020:	b124      	cbz	r4, 302c <CONFIG_USB_DEVICE_VID+0x49>
    3022:	2100      	movs	r1, #0
    3024:	f640 0008 	movw	r0, #2056	; 0x808
    3028:	f3af 8000 	nop.w
    302c:	4830      	ldr	r0, [pc, #192]	; (30f0 <CONFIG_USB_DEVICE_VID+0x10d>)
    302e:	2800      	cmp	r0, #0
    3030:	bf18      	it	ne
    3032:	f3af 8000 	nopne.w
    3036:	f3ef 8010 	mrs	r0, PRIMASK
    303a:	b672      	cpsid	i
    303c:	9008      	str	r0, [sp, #32]
    303e:	b124      	cbz	r4, 304a <CONFIG_USB_DEVICE_VID+0x67>
    3040:	2100      	movs	r1, #0
    3042:	f640 000d 	movw	r0, #2061	; 0x80d
    3046:	f3af 8000 	nop.w
    304a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    304e:	f88d 0008 	strb.w	r0, [sp, #8]
    3052:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3056:	b140      	cbz	r0, 306a <CONFIG_USB_DEVICE_VID+0x87>
    3058:	2c00      	cmp	r4, #0
    305a:	bf1c      	itt	ne
    305c:	2100      	movne	r1, #0
    305e:	f640 0011 	movwne	r0, #2065	; 0x811
    3062:	f43f af3b 	beq.w	2edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    3066:	e777      	b.n	2f58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    3068:	e01b      	b.n	30a2 <CONFIG_USB_DEVICE_VID+0xbf>
    306a:	f1ba 0f00 	cmp.w	sl, #0
    306e:	d008      	beq.n	3082 <CONFIG_USB_DEVICE_VID+0x9f>
    3070:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    3074:	2820      	cmp	r0, #32
    3076:	d104      	bne.n	3082 <CONFIG_USB_DEVICE_VID+0x9f>
    3078:	4631      	mov	r1, r6
    307a:	2002      	movs	r0, #2
    307c:	f7ff f886 	bl	218c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x440>
    3080:	b308      	cbz	r0, 30c6 <CONFIG_USB_DEVICE_VID+0xe3>
    3082:	b124      	cbz	r4, 308e <CONFIG_USB_DEVICE_VID+0xab>
    3084:	2100      	movs	r1, #0
    3086:	f640 0025 	movw	r0, #2085	; 0x825
    308a:	f3af 8000 	nop.w
    308e:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    3092:	ea28 0000 	bic.w	r0, r8, r0
    3096:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    309a:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    309e:	2001      	movs	r0, #1
    30a0:	9009      	str	r0, [sp, #36]	; 0x24
    30a2:	b124      	cbz	r4, 30ae <CONFIG_USB_DEVICE_VID+0xcb>
    30a4:	2100      	movs	r1, #0
    30a6:	f640 002e 	movw	r0, #2094	; 0x82e
    30aa:	f3af 8000 	nop.w
    30ae:	9808      	ldr	r0, [sp, #32]
    30b0:	b188      	cbz	r0, 30d6 <CONFIG_USB_DEVICE_VID+0xf3>
    30b2:	b124      	cbz	r4, 30be <CONFIG_USB_DEVICE_VID+0xdb>
    30b4:	2100      	movs	r1, #0
    30b6:	f640 0032 	movw	r0, #2098	; 0x832
    30ba:	f3af 8000 	nop.w
    30be:	9809      	ldr	r0, [sp, #36]	; 0x24
    30c0:	b00d      	add	sp, #52	; 0x34
    30c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30c6:	2c00      	cmp	r4, #0
    30c8:	d0f1      	beq.n	30ae <CONFIG_USB_DEVICE_VID+0xcb>
    30ca:	2100      	movs	r1, #0
    30cc:	f44f 6002 	mov.w	r0, #2080	; 0x820
    30d0:	f3af 8000 	nop.w
    30d4:	e7e6      	b.n	30a4 <CONFIG_USB_DEVICE_VID+0xc1>
    30d6:	4805      	ldr	r0, [pc, #20]	; (30ec <CONFIG_USB_DEVICE_VID+0x109>)
    30d8:	2800      	cmp	r0, #0
    30da:	bf18      	it	ne
    30dc:	f3af 8000 	nopne.w
    30e0:	b662      	cpsie	i
    30e2:	e7e6      	b.n	30b2 <CONFIG_USB_DEVICE_VID+0xcf>
    30e4:	20000f9c 	.word	0x20000f9c
	...

000030f4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    30f4:	b510      	push	{r4, lr}
    30f6:	2820      	cmp	r0, #32
    30f8:	d211      	bcs.n	311e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    30fa:	490e      	ldr	r1, [pc, #56]	; (3134 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    30fc:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    3100:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    3104:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    3108:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    310c:	b13b      	cbz	r3, 311e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    310e:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    3112:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    3116:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    311a:	2a01      	cmp	r2, #1
    311c:	d001      	beq.n	3122 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    311e:	2000      	movs	r0, #0
    3120:	bd10      	pop	{r4, pc}
    3122:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    3126:	4601      	mov	r1, r0
    3128:	2000      	movs	r0, #0
    312a:	f7fe ffff 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    312e:	2001      	movs	r0, #1
    3130:	bd10      	pop	{r4, pc}
    3132:	0000      	.short	0x0000
    3134:	20000f9c 	.word	0x20000f9c

00003138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    3138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    313c:	4e80      	ldr	r6, [pc, #512]	; (3340 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    313e:	4680      	mov	r8, r0
    3140:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    3144:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    3148:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    314c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3150:	2800      	cmp	r0, #0
    3152:	d068      	beq.n	3226 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    3154:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    3158:	4d7a      	ldr	r5, [pc, #488]	; (3344 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    315a:	b125      	cbz	r5, 3166 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    315c:	2100      	movs	r1, #0
    315e:	f640 30c1 	movw	r0, #3009	; 0xbc1
    3162:	f3af 8000 	nop.w
    3166:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    316a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    316e:	2801      	cmp	r0, #1
    3170:	d018      	beq.n	31a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    3172:	b2c0      	uxtb	r0, r0
    3174:	2804      	cmp	r0, #4
    3176:	bf1c      	itt	ne
    3178:	2805      	cmpne	r0, #5
    317a:	2806      	cmpne	r0, #6
    317c:	d058      	beq.n	3230 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    317e:	b12d      	cbz	r5, 318c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    3180:	f04f 0100 	mov.w	r1, #0
    3184:	f640 30cd 	movw	r0, #3021	; 0xbcd
    3188:	f3af 8000 	nop.w
    318c:	f001 fc0e 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3190:	b125      	cbz	r5, 319c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    3192:	2100      	movs	r1, #0
    3194:	f640 30d1 	movw	r0, #3025	; 0xbd1
    3198:	f3af 8000 	nop.w
    319c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    31a0:	2801      	cmp	r0, #1
    31a2:	d1e6      	bne.n	3172 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    31a4:	2401      	movs	r4, #1
    31a6:	b125      	cbz	r5, 31b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    31a8:	2100      	movs	r1, #0
    31aa:	f640 30d8 	movw	r0, #3032	; 0xbd8
    31ae:	f3af 8000 	nop.w
    31b2:	2c00      	cmp	r4, #0
    31b4:	d042      	beq.n	323c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    31b6:	2000      	movs	r0, #0
    31b8:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    31bc:	b125      	cbz	r5, 31c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    31be:	2100      	movs	r1, #0
    31c0:	f640 30dd 	movw	r0, #3037	; 0xbdd
    31c4:	f3af 8000 	nop.w
    31c8:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    31cc:	2001      	movs	r0, #1
    31ce:	ea20 090b 	bic.w	r9, r0, fp
    31d2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    31d6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    31da:	2240      	movs	r2, #64	; 0x40
    31dc:	f00a f992 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    31e0:	b125      	cbz	r5, 31ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    31e2:	2100      	movs	r1, #0
    31e4:	f240 50cd 	movw	r0, #1485	; 0x5cd
    31e8:	f3af 8000 	nop.w
    31ec:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    31f0:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    31f4:	6a00      	ldr	r0, [r0, #32]
    31f6:	f8ca 0020 	str.w	r0, [sl, #32]
    31fa:	b125      	cbz	r5, 3206 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    31fc:	2100      	movs	r1, #0
    31fe:	f240 50d1 	movw	r0, #1489	; 0x5d1
    3202:	f3af 8000 	nop.w
    3206:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    320a:	f88d 0000 	strb.w	r0, [sp]
    320e:	f89d 0000 	ldrb.w	r0, [sp]
    3212:	b1d0      	cbz	r0, 324a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    3214:	2d00      	cmp	r5, #0
    3216:	bf1c      	itt	ne
    3218:	2100      	movne	r1, #0
    321a:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    321e:	d0c2      	beq.n	31a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3220:	f3af 8000 	nop.w
    3224:	e7bf      	b.n	31a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3226:	f640 31b8 	movw	r1, #3000	; 0xbb8
    322a:	2070      	movs	r0, #112	; 0x70
    322c:	f001 fa98 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3230:	464a      	mov	r2, r9
    3232:	4641      	mov	r1, r8
    3234:	2001      	movs	r0, #1
    3236:	f7fe ff79 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    323a:	e7a9      	b.n	3190 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    323c:	4842      	ldr	r0, [pc, #264]	; (3348 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    323e:	2800      	cmp	r0, #0
    3240:	bf18      	it	ne
    3242:	f3af 8000 	nopne.w
    3246:	b662      	cpsie	i
    3248:	e7b5      	b.n	31b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    324a:	b125      	cbz	r5, 3256 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    324c:	2100      	movs	r1, #0
    324e:	f640 30e7 	movw	r0, #3047	; 0xbe7
    3252:	f3af 8000 	nop.w
    3256:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    325a:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    325e:	4614      	mov	r4, r2
    3260:	f04f 0b20 	mov.w	fp, #32
    3264:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    3268:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    326c:	e003      	b.n	3276 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    326e:	46a3      	mov	fp, r4
    3270:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    3274:	785c      	ldrb	r4, [r3, #1]
    3276:	4544      	cmp	r4, r8
    3278:	d002      	beq.n	3280 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    327a:	2c20      	cmp	r4, #32
    327c:	d02b      	beq.n	32d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    327e:	e7f6      	b.n	326e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    3280:	2c20      	cmp	r4, #32
    3282:	d028      	beq.n	32d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    3284:	42a2      	cmp	r2, r4
    3286:	d104      	bne.n	3292 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    3288:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    328c:	7840      	ldrb	r0, [r0, #1]
    328e:	7008      	strb	r0, [r1, #0]
    3290:	e005      	b.n	329e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    3292:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    3296:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    329a:	7849      	ldrb	r1, [r1, #1]
    329c:	7041      	strb	r1, [r0, #1]
    329e:	f1ba 0f00 	cmp.w	sl, #0
    32a2:	d011      	beq.n	32c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    32a4:	b125      	cbz	r5, 32b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    32a6:	2100      	movs	r1, #0
    32a8:	f240 502f 	movw	r0, #1327	; 0x52f
    32ac:	f3af 8000 	nop.w
    32b0:	f89a 0000 	ldrb.w	r0, [sl]
    32b4:	42a0      	cmp	r0, r4
    32b6:	d107      	bne.n	32c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    32b8:	b125      	cbz	r5, 32c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    32ba:	2100      	movs	r1, #0
    32bc:	f240 5032 	movw	r0, #1330	; 0x532
    32c0:	f3af 8000 	nop.w
    32c4:	f88a b000 	strb.w	fp, [sl]
    32c8:	b15d      	cbz	r5, 32e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    32ca:	2100      	movs	r1, #0
    32cc:	f240 5037 	movw	r0, #1335	; 0x537
    32d0:	f3af 8000 	nop.w
    32d4:	e000      	b.n	32d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    32d6:	b125      	cbz	r5, 32e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    32d8:	2100      	movs	r1, #0
    32da:	f640 30eb 	movw	r0, #3051	; 0xbeb
    32de:	f3af 8000 	nop.w
    32e2:	481a      	ldr	r0, [pc, #104]	; (334c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    32e4:	2800      	cmp	r0, #0
    32e6:	bf18      	it	ne
    32e8:	f3af 8000 	nopne.w
    32ec:	f3ef 8410 	mrs	r4, PRIMASK
    32f0:	b672      	cpsid	i
    32f2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    32f6:	f88d 0000 	strb.w	r0, [sp]
    32fa:	f89d 0000 	ldrb.w	r0, [sp]
    32fe:	b138      	cbz	r0, 3310 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    3300:	2d00      	cmp	r5, #0
    3302:	bf1c      	itt	ne
    3304:	2100      	movne	r1, #0
    3306:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    330a:	f43f af4c 	beq.w	31a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    330e:	e787      	b.n	3220 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    3310:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    3314:	2001      	movs	r0, #1
    3316:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    331a:	b154      	cbz	r4, 3332 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    331c:	2d00      	cmp	r5, #0
    331e:	bf08      	it	eq
    3320:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3324:	2100      	movs	r1, #0
    3326:	f640 30fe 	movw	r0, #3070	; 0xbfe
    332a:	f3af 8000 	nop.w
    332e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3332:	4805      	ldr	r0, [pc, #20]	; (3348 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    3334:	2800      	cmp	r0, #0
    3336:	bf18      	it	ne
    3338:	f3af 8000 	nopne.w
    333c:	b662      	cpsie	i
    333e:	e7ed      	b.n	331c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    3340:	20000f9c 	.word	0x20000f9c
	...

00003350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3350:	b570      	push	{r4, r5, r6, lr}
    3352:	460d      	mov	r5, r1
    3354:	4606      	mov	r6, r0
    3356:	f001 f98d 	bl	4674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    335a:	480f      	ldr	r0, [pc, #60]	; (3398 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    335c:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    3360:	2400      	movs	r4, #0
    3362:	3880      	subs	r0, #128	; 0x80
    3364:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    3368:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    336c:	b129      	cbz	r1, 337a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    336e:	1c61      	adds	r1, r4, #1
    3370:	b2cc      	uxtb	r4, r1
    3372:	2c20      	cmp	r4, #32
    3374:	d3f8      	bcc.n	3368 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    3376:	2020      	movs	r0, #32
    3378:	bd70      	pop	{r4, r5, r6, pc}
    337a:	4808      	ldr	r0, [pc, #32]	; (339c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    337c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    3380:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    3384:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    3388:	4621      	mov	r1, r4
    338a:	6045      	str	r5, [r0, #4]
    338c:	2001      	movs	r0, #1
    338e:	f7fe fecd 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    3392:	4620      	mov	r0, r4
    3394:	bd70      	pop	{r4, r5, r6, pc}
    3396:	0000      	.short	0x0000
    3398:	20000f9c 	.word	0x20000f9c
    339c:	20000c1c 	.word	0x20000c1c

000033a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    33a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33a4:	b083      	sub	sp, #12
    33a6:	f000 fb23 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    33aa:	4605      	mov	r5, r0
    33ac:	f000 fdd6 	bl	3f5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    33b0:	4c67      	ldr	r4, [pc, #412]	; (3550 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    33b2:	68a0      	ldr	r0, [r4, #8]
    33b4:	f1b0 3fff 	cmp.w	r0, #4294967295
    33b8:	bf1c      	itt	ne
    33ba:	f04f 30ff 	movne.w	r0, #4294967295
    33be:	60a0      	strne	r0, [r4, #8]
    33c0:	7fa0      	ldrb	r0, [r4, #30]
    33c2:	f8df b190 	ldr.w	fp, [pc, #400]	; 3554 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    33c6:	b9a8      	cbnz	r0, 33f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    33c8:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    33cc:	1a08      	subs	r0, r1, r0
    33ce:	0200      	lsls	r0, r0, #8
    33d0:	17c1      	asrs	r1, r0, #31
    33d2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    33d6:	1200      	asrs	r0, r0, #8
    33d8:	f44f 710c 	mov.w	r1, #560	; 0x230
    33dc:	f009 ff51 	bl	d282 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    33e0:	6921      	ldr	r1, [r4, #16]
    33e2:	4408      	add	r0, r1
    33e4:	1a28      	subs	r0, r5, r0
    33e6:	0200      	lsls	r0, r0, #8
    33e8:	17c1      	asrs	r1, r0, #31
    33ea:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    33ee:	1200      	asrs	r0, r0, #8
    33f0:	0fc0      	lsrs	r0, r0, #31
    33f2:	d013      	beq.n	341c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    33f4:	7e60      	ldrb	r0, [r4, #25]
    33f6:	b328      	cbz	r0, 3444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    33f8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    33fc:	f88d 0000 	strb.w	r0, [sp]
    3400:	f89d 0000 	ldrb.w	r0, [sp]
    3404:	b1f0      	cbz	r0, 3444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    3406:	f000 fbff 	bl	3c08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    340a:	bf00      	nop
    340c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    3410:	b1f0      	cbz	r0, 3450 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    3412:	f240 4147 	movw	r1, #1095	; 0x447
    3416:	2070      	movs	r0, #112	; 0x70
    3418:	f001 f9a2 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    341c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3420:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    3424:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3428:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    342c:	6840      	ldr	r0, [r0, #4]
    342e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3432:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    3436:	2108      	movs	r1, #8
    3438:	4790      	blx	r2
    343a:	f44f 6186 	mov.w	r1, #1072	; 0x430
    343e:	2070      	movs	r0, #112	; 0x70
    3440:	f001 f98e 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3444:	1ce8      	adds	r0, r5, #3
    3446:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    344a:	f000 fad7 	bl	39fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    344e:	e7dd      	b.n	340c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    3450:	f04f 0a01 	mov.w	sl, #1
    3454:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    3458:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    345c:	2820      	cmp	r0, #32
    345e:	d024      	beq.n	34aa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    3460:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    3464:	2020      	movs	r0, #32
    3466:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    346a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    346e:	2600      	movs	r6, #0
    3470:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3474:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    3478:	4837      	ldr	r0, [pc, #220]	; (3558 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    347a:	6026      	str	r6, [r4, #0]
    347c:	7800      	ldrb	r0, [r0, #0]
    347e:	2802      	cmp	r0, #2
    3480:	bf16      	itet	ne
    3482:	2803      	cmpne	r0, #3
    3484:	2001      	moveq	r0, #1
    3486:	2000      	movne	r0, #0
    3488:	7720      	strb	r0, [r4, #28]
    348a:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    348e:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    3492:	f899 0020 	ldrb.w	r0, [r9, #32]
    3496:	2820      	cmp	r0, #32
    3498:	d031      	beq.n	34fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    349a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    349e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    34a2:	7d81      	ldrb	r1, [r0, #22]
    34a4:	2901      	cmp	r1, #1
    34a6:	d005      	beq.n	34b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    34a8:	e029      	b.n	34fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    34aa:	f240 414a 	movw	r1, #1098	; 0x44a
    34ae:	2070      	movs	r0, #112	; 0x70
    34b0:	f001 f956 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34b4:	46ab      	mov	fp, r5
    34b6:	f100 0508 	add.w	r5, r0, #8
    34ba:	8a40      	ldrh	r0, [r0, #18]
    34bc:	aa01      	add	r2, sp, #4
    34be:	4669      	mov	r1, sp
    34c0:	f000 f940 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    34c4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    34c8:	2820      	cmp	r0, #32
    34ca:	d004      	beq.n	34d6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    34cc:	6920      	ldr	r0, [r4, #16]
    34ce:	1d40      	adds	r0, r0, #5
    34d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34d4:	e00b      	b.n	34ee <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    34d6:	8968      	ldrh	r0, [r5, #10]
    34d8:	f10b 0b09 	add.w	fp, fp, #9
    34dc:	b128      	cbz	r0, 34ea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    34de:	f001 f8db 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34e2:	2800      	cmp	r0, #0
    34e4:	bf08      	it	eq
    34e6:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    34ea:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    34ee:	e9d5 2100 	ldrd	r2, r1, [r5]
    34f2:	1a89      	subs	r1, r1, r2
    34f4:	6028      	str	r0, [r5, #0]
    34f6:	4408      	add	r0, r1
    34f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34fc:	6068      	str	r0, [r5, #4]
    34fe:	4639      	mov	r1, r7
    3500:	2001      	movs	r0, #1
    3502:	f7fe fe43 	bl	218c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x440>
    3506:	2800      	cmp	r0, #0
    3508:	d0f9      	beq.n	34fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    350a:	4814      	ldr	r0, [pc, #80]	; (355c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    350c:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    3510:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3514:	2802      	cmp	r0, #2
    3516:	d104      	bne.n	3522 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    3518:	463a      	mov	r2, r7
    351a:	4641      	mov	r1, r8
    351c:	2006      	movs	r0, #6
    351e:	f7fe fe05 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    3522:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    3526:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    352a:	2820      	cmp	r0, #32
    352c:	d003      	beq.n	3536 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    352e:	480c      	ldr	r0, [pc, #48]	; (3560 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    3530:	7840      	ldrb	r0, [r0, #1]
    3532:	f001 f9e5 	bl	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3536:	7f20      	ldrb	r0, [r4, #28]
    3538:	2800      	cmp	r0, #0
    353a:	bf04      	itt	eq
    353c:	b003      	addeq	sp, #12
    353e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3542:	f000 fd55 	bl	3ff0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    3546:	7726      	strb	r6, [r4, #28]
    3548:	7766      	strb	r6, [r4, #29]
    354a:	b003      	add	sp, #12
    354c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3550:	20000f9c 	.word	0x20000f9c
    3554:	20000c1c 	.word	0x20000c1c
    3558:	20000012 	.word	0x20000012
    355c:	20000f1c 	.word	0x20000f1c
    3560:	20000010 	.word	0x20000010

00003564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3564:	b510      	push	{r4, lr}
    3566:	4c32      	ldr	r4, [pc, #200]	; (3630 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    3568:	b082      	sub	sp, #8
    356a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    356e:	2920      	cmp	r1, #32
    3570:	d008      	beq.n	3584 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    3572:	68a1      	ldr	r1, [r4, #8]
    3574:	f1b1 3fff 	cmp.w	r1, #4294967295
    3578:	d009      	beq.n	358e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    357a:	f640 21e9 	movw	r1, #2793	; 0xae9
    357e:	2070      	movs	r0, #112	; 0x70
    3580:	f001 f8ee 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3584:	f640 21e8 	movw	r1, #2792	; 0xae8
    3588:	2070      	movs	r0, #112	; 0x70
    358a:	f001 f8e9 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    358e:	6862      	ldr	r2, [r4, #4]
    3590:	4601      	mov	r1, r0
    3592:	4b28      	ldr	r3, [pc, #160]	; (3634 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    3594:	1850      	adds	r0, r2, r1
    3596:	429a      	cmp	r2, r3
    3598:	d904      	bls.n	35a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    359a:	f240 6109 	movw	r1, #1545	; 0x609
    359e:	2070      	movs	r0, #112	; 0x70
    35a0:	f001 f8de 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35a4:	4a24      	ldr	r2, [pc, #144]	; (3638 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    35a6:	4291      	cmp	r1, r2
    35a8:	dd04      	ble.n	35b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    35aa:	f240 610a 	movw	r1, #1546	; 0x60a
    35ae:	2070      	movs	r0, #112	; 0x70
    35b0:	f001 f8d6 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35b4:	4a21      	ldr	r2, [pc, #132]	; (363c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    35b6:	4291      	cmp	r1, r2
    35b8:	da04      	bge.n	35c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    35ba:	f240 610b 	movw	r1, #1547	; 0x60b
    35be:	2070      	movs	r0, #112	; 0x70
    35c0:	f001 f8ce 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35c4:	491e      	ldr	r1, [pc, #120]	; (3640 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    35c6:	4281      	cmp	r1, r0
    35c8:	bfdc      	itt	le
    35ca:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    35ce:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    35d2:	dd05      	ble.n	35e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    35d4:	2800      	cmp	r0, #0
    35d6:	bfbc      	itt	lt
    35d8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    35dc:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    35e0:	aa01      	add	r2, sp, #4
    35e2:	4669      	mov	r1, sp
    35e4:	f000 f8ae 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    35e8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    35ec:	280f      	cmp	r0, #15
    35ee:	bf8c      	ite	hi
    35f0:	2001      	movhi	r0, #1
    35f2:	2000      	movls	r0, #0
    35f4:	9900      	ldr	r1, [sp, #0]
    35f6:	4408      	add	r0, r1
    35f8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    35fc:	60a1      	str	r1, [r4, #8]
    35fe:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3602:	f88d 0000 	strb.w	r0, [sp]
    3606:	f89d 0000 	ldrb.w	r0, [sp]
    360a:	2800      	cmp	r0, #0
    360c:	bf04      	itt	eq
    360e:	b002      	addeq	sp, #8
    3610:	bd10      	popeq	{r4, pc}
    3612:	2301      	movs	r3, #1
    3614:	2203      	movs	r2, #3
    3616:	2005      	movs	r0, #5
    3618:	f000 fb70 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    361c:	2800      	cmp	r0, #0
    361e:	bf1c      	itt	ne
    3620:	b002      	addne	sp, #8
    3622:	bd10      	popne	{r4, pc}
    3624:	f640 21f1 	movw	r1, #2801	; 0xaf1
    3628:	2070      	movs	r0, #112	; 0x70
    362a:	f001 f899 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    362e:	0000      	.short	0x0000
    3630:	20000f9c 	.word	0x20000f9c
    3634:	1e847fff 	.word	0x1e847fff
    3638:	07a12000 	.word	0x07a12000
    363c:	f85ee000 	.word	0xf85ee000
    3640:	1e848000 	.word	0x1e848000

00003644 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3644:	b570      	push	{r4, r5, r6, lr}
    3646:	4c1e      	ldr	r4, [pc, #120]	; (36c0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3648:	2120      	movs	r1, #32
    364a:	f884 1020 	strb.w	r1, [r4, #32]
    364e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3652:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    3656:	2000      	movs	r0, #0
    3658:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    365c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3660:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    3664:	1e42      	subs	r2, r0, #1
    3666:	60a2      	str	r2, [r4, #8]
    3668:	6020      	str	r0, [r4, #0]
    366a:	77a0      	strb	r0, [r4, #30]
    366c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3670:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3674:	7720      	strb	r0, [r4, #28]
    3676:	7760      	strb	r0, [r4, #29]
    3678:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    367c:	4911      	ldr	r1, [pc, #68]	; (36c4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    367e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3682:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    3686:	7008      	strb	r0, [r1, #0]
    3688:	7048      	strb	r0, [r1, #1]
    368a:	8048      	strh	r0, [r1, #2]
    368c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3690:	2210      	movs	r2, #16
    3692:	7088      	strb	r0, [r1, #2]
    3694:	f801 0f04 	strb.w	r0, [r1, #4]!
    3698:	1e52      	subs	r2, r2, #1
    369a:	d1fa      	bne.n	3692 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    369c:	4d0a      	ldr	r5, [pc, #40]	; (36c8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    369e:	2601      	movs	r6, #1
    36a0:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    36a4:	20ff      	movs	r0, #255	; 0xff
    36a6:	7028      	strb	r0, [r5, #0]
    36a8:	4808      	ldr	r0, [pc, #32]	; (36cc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    36aa:	f001 f90b 	bl	48c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    36ae:	7068      	strb	r0, [r5, #1]
    36b0:	f001 f966 	bl	4980 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    36b4:	60a8      	str	r0, [r5, #8]
    36b6:	f000 fcc9 	bl	404c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    36ba:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    36be:	bd70      	pop	{r4, r5, r6, pc}
    36c0:	20000f9c 	.word	0x20000f9c
    36c4:	20000012 	.word	0x20000012
    36c8:	20000010 	.word	0x20000010
    36cc:	00001fe9 	.word	0x00001fe9

000036d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    36d0:	b570      	push	{r4, r5, r6, lr}
    36d2:	4605      	mov	r5, r0
    36d4:	2001      	movs	r0, #1
    36d6:	fa00 f405 	lsl.w	r4, r0, r5
    36da:	460e      	mov	r6, r1
    36dc:	2a00      	cmp	r2, #0
    36de:	bf08      	it	eq
    36e0:	4808      	ldreq	r0, [pc, #32]	; (3704 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    36e2:	d00c      	beq.n	36fe <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    36e4:	2000      	movs	r0, #0
    36e6:	f000 fc97 	bl	4018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    36ea:	00e9      	lsls	r1, r5, #3
    36ec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    36f0:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    36f4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    36f8:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    36fc:	4802      	ldr	r0, [pc, #8]	; (3708 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    36fe:	6004      	str	r4, [r0, #0]
    3700:	bd70      	pop	{r4, r5, r6, pc}
    3702:	0000      	.short	0x0000
    3704:	4001f508 	.word	0x4001f508
    3708:	4001f504 	.word	0x4001f504

0000370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    370c:	0b41      	lsrs	r1, r0, #13
    370e:	f248 6237 	movw	r2, #34359	; 0x8637
    3712:	4351      	muls	r1, r2
    3714:	0c0a      	lsrs	r2, r1, #16
    3716:	4b09      	ldr	r3, [pc, #36]	; (373c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3718:	0251      	lsls	r1, r2, #9
    371a:	fb02 0203 	mla	r2, r2, r3, r0
    371e:	4808      	ldr	r0, [pc, #32]	; (3740 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3720:	4350      	muls	r0, r2
    3722:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    3726:	306e      	adds	r0, #110	; 0x6e
    3728:	0d40      	lsrs	r0, r0, #21
    372a:	425b      	negs	r3, r3
    372c:	fb10 f303 	smulbb	r3, r0, r3
    3730:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    3734:	bf88      	it	hi
    3736:	1c49      	addhi	r1, r1, #1
    3738:	4408      	add	r0, r1
    373a:	4770      	bx	lr
    373c:	ffffc2f7 	.word	0xffffc2f7
    3740:	00010c6f 	.word	0x00010c6f

00003744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    3744:	0b43      	lsrs	r3, r0, #13
    3746:	f248 6c37 	movw	ip, #34359	; 0x8637
    374a:	fb03 f30c 	mul.w	r3, r3, ip
    374e:	b430      	push	{r4, r5}
    3750:	0c1b      	lsrs	r3, r3, #16
    3752:	f8df c044 	ldr.w	ip, [pc, #68]	; 3798 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    3756:	025c      	lsls	r4, r3, #9
    3758:	fb03 030c 	mla	r3, r3, ip, r0
    375c:	480f      	ldr	r0, [pc, #60]	; (379c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    375e:	4358      	muls	r0, r3
    3760:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3764:	eb04 000c 	add.w	r0, r4, ip
    3768:	f643 5409 	movw	r4, #15625	; 0x3d09
    376c:	fb1c f404 	smulbb	r4, ip, r4
    3770:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3774:	f643 5508 	movw	r5, #15624	; 0x3d08
    3778:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    377c:	442c      	add	r4, r5
    377e:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    3782:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    3786:	bf84      	itt	hi
    3788:	f04f 0c00 	movhi.w	ip, #0
    378c:	1c40      	addhi	r0, r0, #1
    378e:	6008      	str	r0, [r1, #0]
    3790:	f882 c000 	strb.w	ip, [r2]
    3794:	bc30      	pop	{r4, r5}
    3796:	4770      	bx	lr
    3798:	ffffc2f7 	.word	0xffffc2f7
    379c:	00010c6f 	.word	0x00010c6f

000037a0 <MPSL_IRQ_RTC0_Handler>:
    37a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37a4:	4c38      	ldr	r4, [pc, #224]	; (3888 <MPSL_IRQ_RTC0_Handler+0xe8>)
    37a6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    37aa:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 388c <MPSL_IRQ_RTC0_Handler+0xec>
    37ae:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    37b2:	f44f 6600 	mov.w	r6, #2048	; 0x800
    37b6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    37ba:	f04f 0500 	mov.w	r5, #0
    37be:	bf1c      	itt	ne
    37c0:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    37c4:	2800      	cmpne	r0, #0
    37c6:	d017      	beq.n	37f8 <MPSL_IRQ_RTC0_Handler+0x58>
    37c8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    37cc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    37d0:	482f      	ldr	r0, [pc, #188]	; (3890 <MPSL_IRQ_RTC0_Handler+0xf0>)
    37d2:	6800      	ldr	r0, [r0, #0]
    37d4:	f8d8 1000 	ldr.w	r1, [r8]
    37d8:	eba0 0001 	sub.w	r0, r0, r1
    37dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    37e0:	2802      	cmp	r0, #2
    37e2:	d302      	bcc.n	37ea <MPSL_IRQ_RTC0_Handler+0x4a>
    37e4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    37e8:	d306      	bcc.n	37f8 <MPSL_IRQ_RTC0_Handler+0x58>
    37ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    37ee:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    37f2:	2004      	movs	r0, #4
    37f4:	f7fe ff4c 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    37f8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    37fc:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3800:	bf1c      	itt	ne
    3802:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    3806:	2800      	cmpne	r0, #0
    3808:	d017      	beq.n	383a <MPSL_IRQ_RTC0_Handler+0x9a>
    380a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    380e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3812:	4820      	ldr	r0, [pc, #128]	; (3894 <MPSL_IRQ_RTC0_Handler+0xf4>)
    3814:	6800      	ldr	r0, [r0, #0]
    3816:	f8d8 1000 	ldr.w	r1, [r8]
    381a:	eba0 0001 	sub.w	r0, r0, r1
    381e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3822:	2802      	cmp	r0, #2
    3824:	d302      	bcc.n	382c <MPSL_IRQ_RTC0_Handler+0x8c>
    3826:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    382a:	d306      	bcc.n	383a <MPSL_IRQ_RTC0_Handler+0x9a>
    382c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3830:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3834:	2005      	movs	r0, #5
    3836:	f7fe ff2b 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    383a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    383e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3842:	bf1a      	itte	ne
    3844:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    3848:	2800      	cmpne	r0, #0
    384a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    384e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    3852:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3856:	4810      	ldr	r0, [pc, #64]	; (3898 <MPSL_IRQ_RTC0_Handler+0xf8>)
    3858:	6800      	ldr	r0, [r0, #0]
    385a:	f8d8 1000 	ldr.w	r1, [r8]
    385e:	eba0 0001 	sub.w	r0, r0, r1
    3862:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3866:	2802      	cmp	r0, #2
    3868:	d304      	bcc.n	3874 <MPSL_IRQ_RTC0_Handler+0xd4>
    386a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    386e:	bf38      	it	cc
    3870:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    3874:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3878:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    387c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3880:	2006      	movs	r0, #6
    3882:	f7fe bf05 	b.w	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3886:	0000      	.short	0x0000
    3888:	4000b000 	.word	0x4000b000
    388c:	4000b504 	.word	0x4000b504
    3890:	4000b540 	.word	0x4000b540
    3894:	4000b544 	.word	0x4000b544
    3898:	4000b548 	.word	0x4000b548

0000389c <MPSL_IRQ_TIMER0_Handler>:
    389c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38a0:	4d3a      	ldr	r5, [pc, #232]	; (398c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    38a2:	7828      	ldrb	r0, [r5, #0]
    38a4:	2804      	cmp	r0, #4
    38a6:	d06c      	beq.n	3982 <MPSL_IRQ_TIMER0_Handler+0xe6>
    38a8:	1ce8      	adds	r0, r5, #3
    38aa:	2201      	movs	r2, #1
    38ac:	7801      	ldrb	r1, [r0, #0]
    38ae:	b159      	cbz	r1, 38c8 <MPSL_IRQ_TIMER0_Handler+0x2c>
    38b0:	2901      	cmp	r1, #1
    38b2:	bf08      	it	eq
    38b4:	706a      	strbeq	r2, [r5, #1]
    38b6:	d002      	beq.n	38be <MPSL_IRQ_TIMER0_Handler+0x22>
    38b8:	7869      	ldrb	r1, [r5, #1]
    38ba:	2900      	cmp	r1, #0
    38bc:	d05c      	beq.n	3978 <MPSL_IRQ_TIMER0_Handler+0xdc>
    38be:	2102      	movs	r1, #2
    38c0:	7001      	strb	r1, [r0, #0]
    38c2:	7840      	ldrb	r0, [r0, #1]
    38c4:	f000 fae2 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    38c8:	4c31      	ldr	r4, [pc, #196]	; (3990 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    38ca:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    38ce:	f04f 0800 	mov.w	r8, #0
    38d2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    38d6:	f44f 7680 	mov.w	r6, #256	; 0x100
    38da:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    38de:	bf1c      	itt	ne
    38e0:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    38e4:	2800      	cmpne	r0, #0
    38e6:	d008      	beq.n	38fa <MPSL_IRQ_TIMER0_Handler+0x5e>
    38e8:	f04f 0003 	mov.w	r0, #3
    38ec:	f000 face 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    38f0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    38f4:	2003      	movs	r0, #3
    38f6:	f7fe fecb 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    38fa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    38fe:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3902:	bf1c      	itt	ne
    3904:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    3908:	2800      	cmpne	r0, #0
    390a:	d008      	beq.n	391e <MPSL_IRQ_TIMER0_Handler+0x82>
    390c:	f04f 0002 	mov.w	r0, #2
    3910:	f000 fabc 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3914:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3918:	2002      	movs	r0, #2
    391a:	f7fe feb9 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    391e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3922:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3926:	bf1c      	itt	ne
    3928:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    392c:	2800      	cmpne	r0, #0
    392e:	d008      	beq.n	3942 <MPSL_IRQ_TIMER0_Handler+0xa6>
    3930:	f04f 0001 	mov.w	r0, #1
    3934:	f000 faaa 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3938:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    393c:	2001      	movs	r0, #1
    393e:	f7fe fea7 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3942:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3946:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    394a:	bf1a      	itte	ne
    394c:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    3950:	2800      	cmpne	r0, #0
    3952:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3956:	f04f 0000 	mov.w	r0, #0
    395a:	f000 fa97 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    395e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3962:	2004      	movs	r0, #4
    3964:	7028      	strb	r0, [r5, #0]
    3966:	f8c5 8008 	str.w	r8, [r5, #8]
    396a:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    396e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3972:	2000      	movs	r0, #0
    3974:	f7fe be8c 	b.w	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3978:	f44f 715a 	mov.w	r1, #872	; 0x368
    397c:	206c      	movs	r0, #108	; 0x6c
    397e:	f000 feef 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3986:	2007      	movs	r0, #7
    3988:	f7fe be82 	b.w	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    398c:	2000001c 	.word	0x2000001c
    3990:	40008000 	.word	0x40008000
    3994:	2201      	movs	r2, #1
    3996:	0213      	lsls	r3, r2, #8
    3998:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    399c:	2000      	movs	r0, #0
    399e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    39a2:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    39a6:	f3bf 8f4f 	dsb	sy
    39aa:	f3bf 8f6f 	isb	sy
    39ae:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    39b2:	490c      	ldr	r1, [pc, #48]	; (39e4 <MPSL_IRQ_TIMER0_Handler+0x148>)
    39b4:	604a      	str	r2, [r1, #4]
    39b6:	1e43      	subs	r3, r0, #1
    39b8:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    39bc:	4b0a      	ldr	r3, [pc, #40]	; (39e8 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    39be:	6018      	str	r0, [r3, #0]
    39c0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    39c4:	1d1b      	adds	r3, r3, #4
    39c6:	6018      	str	r0, [r3, #0]
    39c8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    39cc:	1d1b      	adds	r3, r3, #4
    39ce:	6018      	str	r0, [r3, #0]
    39d0:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    39d4:	1d1b      	adds	r3, r3, #4
    39d6:	6018      	str	r0, [r3, #0]
    39d8:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    39dc:	610a      	str	r2, [r1, #16]
    39de:	4903      	ldr	r1, [pc, #12]	; (39ec <MPSL_IRQ_TIMER0_Handler+0x150>)
    39e0:	7048      	strb	r0, [r1, #1]
    39e2:	4770      	bx	lr
    39e4:	40008000 	.word	0x40008000
    39e8:	40008540 	.word	0x40008540
    39ec:	2000001c 	.word	0x2000001c

000039f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    39f0:	4801      	ldr	r0, [pc, #4]	; (39f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    39f2:	6800      	ldr	r0, [r0, #0]
    39f4:	4770      	bx	lr
    39f6:	0000      	.short	0x0000
    39f8:	4000b504 	.word	0x4000b504

000039fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    39fc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3a00:	4e41      	ldr	r6, [pc, #260]	; (3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>)
    3a02:	4604      	mov	r4, r0
    3a04:	1ef7      	subs	r7, r6, #3
    3a06:	f896 c000 	ldrb.w	ip, [r6]
    3a0a:	68f8      	ldr	r0, [r7, #12]
    3a0c:	f1bc 0f01 	cmp.w	ip, #1
    3a10:	bf04      	itt	eq
    3a12:	42a0      	cmpeq	r0, r4
    3a14:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3a18:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3a1c:	4a3b      	ldr	r2, [pc, #236]	; (3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>)
    3a1e:	6011      	str	r1, [r2, #0]
    3a20:	493b      	ldr	r1, [pc, #236]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3a22:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3a26:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3a2a:	4a3a      	ldr	r2, [pc, #232]	; (3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>)
    3a2c:	f04f 0500 	mov.w	r5, #0
    3a30:	f1bc 0f00 	cmp.w	ip, #0
    3a34:	d057      	beq.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3a36:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3a3a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3a3e:	6015      	str	r5, [r2, #0]
    3a40:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    3a44:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    3a48:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3a4c:	f04f 0801 	mov.w	r8, #1
    3a50:	2a00      	cmp	r2, #0
    3a52:	bf04      	itt	eq
    3a54:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    3a58:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    3a5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3a60:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3a64:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3a68:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    3a6c:	4a2a      	ldr	r2, [pc, #168]	; (3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>)
    3a6e:	f8d2 a000 	ldr.w	sl, [r2]
    3a72:	eba4 0a0a 	sub.w	sl, r4, sl
    3a76:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    3a7a:	f1bb 0f02 	cmp.w	fp, #2
    3a7e:	d33c      	bcc.n	3afa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x62>
    3a80:	f04f 0a02 	mov.w	sl, #2
    3a84:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    3a88:	d237      	bcs.n	3afa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x62>
    3a8a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3a8e:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    3a92:	f1bc 0f00 	cmp.w	ip, #0
    3a96:	d005      	beq.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    3a98:	6811      	ldr	r1, [r2, #0]
    3a9a:	1a41      	subs	r1, r0, r1
    3a9c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3aa0:	2902      	cmp	r1, #2
    3aa2:	d3f9      	bcc.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3aa4:	f8c7 8008 	str.w	r8, [r7, #8]
    3aa8:	703d      	strb	r5, [r7, #0]
    3aaa:	f7ff ff73 	bl	3994 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3aae:	481b      	ldr	r0, [pc, #108]	; (3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>)
    3ab0:	6005      	str	r5, [r0, #0]
    3ab2:	1d00      	adds	r0, r0, #4
    3ab4:	f8c0 a000 	str.w	sl, [r0]
    3ab8:	4919      	ldr	r1, [pc, #100]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3aba:	2004      	movs	r0, #4
    3abc:	6008      	str	r0, [r1, #0]
    3abe:	4919      	ldr	r1, [pc, #100]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3ac0:	f8c1 800c 	str.w	r8, [r1, #12]
    3ac4:	68ba      	ldr	r2, [r7, #8]
    3ac6:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    3aca:	0181      	lsls	r1, r0, #6
    3acc:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    3ad0:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    3ad4:	4a14      	ldr	r2, [pc, #80]	; (3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>)
    3ad6:	0741      	lsls	r1, r0, #29
    3ad8:	6011      	str	r1, [r2, #0]
    3ada:	60fc      	str	r4, [r7, #12]
    3adc:	7070      	strb	r0, [r6, #1]
    3ade:	f886 8000 	strb.w	r8, [r6]
    3ae2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3ae6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3aea:	4b10      	ldr	r3, [pc, #64]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3aec:	601d      	str	r5, [r3, #0]
    3aee:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    3af2:	6015      	str	r5, [r2, #0]
    3af4:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    3af8:	e7a4      	b.n	3a44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    3afa:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    3afe:	f240 11f1 	movw	r1, #497	; 0x1f1
    3b02:	206c      	movs	r0, #108	; 0x6c
    3b04:	f000 fe2c 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b08:	2000001f 	.word	0x2000001f
    3b0c:	4001f508 	.word	0x4001f508
    3b10:	4000b000 	.word	0x4000b000
    3b14:	4000b544 	.word	0x4000b544
    3b18:	4000b504 	.word	0x4000b504
    3b1c:	40008504 	.word	0x40008504
    3b20:	40008510 	.word	0x40008510
    3b24:	40008000 	.word	0x40008000
    3b28:	4001f504 	.word	0x4001f504
    3b2c:	4000b540 	.word	0x4000b540

00003b30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b34:	4c2b      	ldr	r4, [pc, #172]	; (3be4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3b36:	68e1      	ldr	r1, [r4, #12]
    3b38:	4281      	cmp	r1, r0
    3b3a:	bf14      	ite	ne
    3b3c:	2201      	movne	r2, #1
    3b3e:	2200      	moveq	r2, #0
    3b40:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 3be8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    3b44:	f89c 7000 	ldrb.w	r7, [ip]
    3b48:	2f02      	cmp	r7, #2
    3b4a:	d002      	beq.n	3b52 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    3b4c:	2a00      	cmp	r2, #0
    3b4e:	d038      	beq.n	3bc2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3b50:	e003      	b.n	3b5a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    3b52:	2a00      	cmp	r2, #0
    3b54:	bf08      	it	eq
    3b56:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b5a:	7862      	ldrb	r2, [r4, #1]
    3b5c:	b382      	cbz	r2, 3bc0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    3b5e:	4b23      	ldr	r3, [pc, #140]	; (3bec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3b64:	601a      	str	r2, [r3, #0]
    3b66:	4b22      	ldr	r3, [pc, #136]	; (3bf0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3b68:	1395      	asrs	r5, r2, #14
    3b6a:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    3b6e:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    3b72:	2600      	movs	r6, #0
    3b74:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    3b78:	4a1e      	ldr	r2, [pc, #120]	; (3bf4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    3b7a:	f8d2 8000 	ldr.w	r8, [r2]
    3b7e:	eba0 0808 	sub.w	r8, r0, r8
    3b82:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    3b86:	f1b8 0f02 	cmp.w	r8, #2
    3b8a:	d324      	bcc.n	3bd6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    3b8c:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    3b90:	d221      	bcs.n	3bd6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    3b92:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3b96:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    3b9a:	b12f      	cbz	r7, 3ba8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    3b9c:	6813      	ldr	r3, [r2, #0]
    3b9e:	1acb      	subs	r3, r1, r3
    3ba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3ba4:	2b02      	cmp	r3, #2
    3ba6:	d3f9      	bcc.n	3b9c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    3ba8:	4b13      	ldr	r3, [pc, #76]	; (3bf8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    3baa:	2102      	movs	r1, #2
    3bac:	074a      	lsls	r2, r1, #29
    3bae:	601a      	str	r2, [r3, #0]
    3bb0:	60e0      	str	r0, [r4, #12]
    3bb2:	2004      	movs	r0, #4
    3bb4:	f88c 0001 	strb.w	r0, [ip, #1]
    3bb8:	f88c 1000 	strb.w	r1, [ip]
    3bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bc0:	e004      	b.n	3bcc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3bc2:	f240 11ff 	movw	r1, #511	; 0x1ff
    3bc6:	206c      	movs	r0, #108	; 0x6c
    3bc8:	f000 fdca 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bcc:	f240 2103 	movw	r1, #515	; 0x203
    3bd0:	206c      	movs	r0, #108	; 0x6c
    3bd2:	f000 fdc5 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bd6:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    3bda:	f240 210f 	movw	r1, #527	; 0x20f
    3bde:	206c      	movs	r0, #108	; 0x6c
    3be0:	f000 fdbe 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3be4:	2000001c 	.word	0x2000001c
    3be8:	2000001f 	.word	0x2000001f
    3bec:	4001f508 	.word	0x4001f508
    3bf0:	4000b000 	.word	0x4000b000
    3bf4:	4000b504 	.word	0x4000b504
    3bf8:	4001f504 	.word	0x4001f504

00003bfc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3bfc:	4801      	ldr	r0, [pc, #4]	; (3c04 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3bfe:	68c0      	ldr	r0, [r0, #12]
    3c00:	4770      	bx	lr
    3c02:	0000      	.short	0x0000
    3c04:	2000001c 	.word	0x2000001c

00003c08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c0c:	4833      	ldr	r0, [pc, #204]	; (3cdc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    3c0e:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    3c12:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    3c16:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 3ce0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    3c1a:	4a32      	ldr	r2, [pc, #200]	; (3ce4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    3c1c:	2100      	movs	r1, #0
    3c1e:	f89c 3000 	ldrb.w	r3, [ip]
    3c22:	b163      	cbz	r3, 3c3e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    3c24:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    3c28:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3c2c:	6011      	str	r1, [r2, #0]
    3c2e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3c32:	bf00      	nop
    3c34:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    3c38:	2201      	movs	r2, #1
    3c3a:	b980      	cbnz	r0, 3c5e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    3c3c:	e009      	b.n	3c52 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    3c3e:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3c42:	4c29      	ldr	r4, [pc, #164]	; (3ce8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3c44:	6021      	str	r1, [r4, #0]
    3c46:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3c4a:	6011      	str	r1, [r2, #0]
    3c4c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3c50:	e7f0      	b.n	3c34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    3c52:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3c56:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3c5a:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    3c5e:	2b02      	cmp	r3, #2
    3c60:	d004      	beq.n	3c6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    3c62:	f240 211b 	movw	r1, #539	; 0x21b
    3c66:	206c      	movs	r0, #108	; 0x6c
    3c68:	f000 fd7a 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c6c:	4e1f      	ldr	r6, [pc, #124]	; (3cec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3c6e:	6830      	ldr	r0, [r6, #0]
    3c70:	4c1f      	ldr	r4, [pc, #124]	; (3cf0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3c72:	1cc0      	adds	r0, r0, #3
    3c74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3c78:	68e3      	ldr	r3, [r4, #12]
    3c7a:	4d1e      	ldr	r5, [pc, #120]	; (3cf4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3c7c:	4298      	cmp	r0, r3
    3c7e:	d00b      	beq.n	3c98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3c80:	6837      	ldr	r7, [r6, #0]
    3c82:	1bdf      	subs	r7, r3, r7
    3c84:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3c88:	2f04      	cmp	r7, #4
    3c8a:	d305      	bcc.n	3c98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3c8c:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    3c90:	d202      	bcs.n	3c98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3c92:	f7ff feb3 	bl	39fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3c96:	e01b      	b.n	3cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    3c98:	6830      	ldr	r0, [r6, #0]
    3c9a:	1a18      	subs	r0, r3, r0
    3c9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3ca0:	2802      	cmp	r0, #2
    3ca2:	d313      	bcc.n	3ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    3ca4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3ca8:	d210      	bcs.n	3ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    3caa:	4b13      	ldr	r3, [pc, #76]	; (3cf8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3cac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3cb0:	6018      	str	r0, [r3, #0]
    3cb2:	60a2      	str	r2, [r4, #8]
    3cb4:	7021      	strb	r1, [r4, #0]
    3cb6:	606a      	str	r2, [r5, #4]
    3cb8:	60ea      	str	r2, [r5, #12]
    3cba:	0040      	lsls	r0, r0, #1
    3cbc:	1f19      	subs	r1, r3, #4
    3cbe:	6008      	str	r0, [r1, #0]
    3cc0:	2004      	movs	r0, #4
    3cc2:	f88c 0001 	strb.w	r0, [ip, #1]
    3cc6:	f88c 2000 	strb.w	r2, [ip]
    3cca:	e001      	b.n	3cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    3ccc:	60a2      	str	r2, [r4, #8]
    3cce:	7021      	strb	r1, [r4, #0]
    3cd0:	68a0      	ldr	r0, [r4, #8]
    3cd2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cda:	0000      	.short	0x0000
    3cdc:	4000b000 	.word	0x4000b000
    3ce0:	2000001f 	.word	0x2000001f
    3ce4:	4000b544 	.word	0x4000b544
    3ce8:	4000b540 	.word	0x4000b540
    3cec:	4000b504 	.word	0x4000b504
    3cf0:	2000001c 	.word	0x2000001c
    3cf4:	40008000 	.word	0x40008000
    3cf8:	4001f508 	.word	0x4001f508

00003cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d00:	f8df c174 	ldr.w	ip, [pc, #372]	; 3e78 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    3d04:	2701      	movs	r7, #1
    3d06:	f04f 0800 	mov.w	r8, #0
    3d0a:	f89c 5000 	ldrb.w	r5, [ip]
    3d0e:	f89c c001 	ldrb.w	ip, [ip, #1]
    3d12:	2807      	cmp	r0, #7
    3d14:	d27e      	bcs.n	3e14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    3d16:	e8df f000 	tbb	[pc, r0]
    3d1a:	0404      	.short	0x0404
    3d1c:	6a6a0404 	.word	0x6a6a0404
    3d20:	006a      	.short	0x006a
    3d22:	4c56      	ldr	r4, [pc, #344]	; (3e7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    3d24:	68e6      	ldr	r6, [r4, #12]
    3d26:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    3d2a:	bf04      	itt	eq
    3d2c:	7864      	ldrbeq	r4, [r4, #1]
    3d2e:	2c00      	cmpeq	r4, #0
    3d30:	d002      	beq.n	3d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    3d32:	2d02      	cmp	r5, #2
    3d34:	d005      	beq.n	3d42 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3d36:	e03c      	b.n	3db2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    3d38:	f240 214e 	movw	r1, #590	; 0x24e
    3d3c:	206c      	movs	r0, #108	; 0x6c
    3d3e:	f000 fd0f 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d42:	ea4f 048c 	mov.w	r4, ip, lsl #2
    3d46:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    3d4a:	f1ac 0404 	sub.w	r4, ip, #4
    3d4e:	0624      	lsls	r4, r4, #24
    3d50:	0da4      	lsrs	r4, r4, #22
    3d52:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    3d56:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    3d5a:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    3d5e:	2400      	movs	r4, #0
    3d60:	2d01      	cmp	r5, #1
    3d62:	d002      	beq.n	3d6a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    3d64:	2d02      	cmp	r5, #2
    3d66:	d011      	beq.n	3d8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    3d68:	e020      	b.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d6a:	f1bc 0f04 	cmp.w	ip, #4
    3d6e:	d205      	bcs.n	3d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    3d70:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3d74:	f1ba 0f00 	cmp.w	sl, #0
    3d78:	d118      	bne.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d7a:	e004      	b.n	3d86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3d7c:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3d80:	f1ba 0f00 	cmp.w	sl, #0
    3d84:	d112      	bne.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d86:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    3d8a:	e00f      	b.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d8c:	f1bc 0f04 	cmp.w	ip, #4
    3d90:	d205      	bcs.n	3d9e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    3d92:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3d96:	f1ba 0f00 	cmp.w	sl, #0
    3d9a:	d107      	bne.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d9c:	e004      	b.n	3da8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    3d9e:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3da2:	f1ba 0f00 	cmp.w	sl, #0
    3da6:	d101      	bne.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3da8:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    3dac:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    3db0:	d1d5      	bne.n	3d5e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    3db2:	4c33      	ldr	r4, [pc, #204]	; (3e80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    3db4:	f100 0c10 	add.w	ip, r0, #16
    3db8:	fa07 fc0c 	lsl.w	ip, r7, ip
    3dbc:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    3dc0:	0080      	lsls	r0, r0, #2
    3dc2:	4420      	add	r0, r4
    3dc4:	b152      	cbz	r2, 3ddc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3dc6:	6407      	str	r7, [r0, #64]	; 0x40
    3dc8:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    3dcc:	1b8d      	subs	r5, r1, r6
    3dce:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3dd2:	42aa      	cmp	r2, r5
    3dd4:	bf98      	it	ls
    3dd6:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3dda:	d243      	bcs.n	3e64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3ddc:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3de0:	2b01      	cmp	r3, #1
    3de2:	bf08      	it	eq
    3de4:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3de8:	2001      	movs	r0, #1
    3dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3dee:	b135      	cbz	r5, 3dfe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3df0:	4584      	cmp	ip, r0
    3df2:	d104      	bne.n	3dfe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3df4:	f240 2171 	movw	r1, #625	; 0x271
    3df8:	206c      	movs	r0, #108	; 0x6c
    3dfa:	f000 fcb1 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dfe:	1f00      	subs	r0, r0, #4
    3e00:	b2c0      	uxtb	r0, r0
    3e02:	2b01      	cmp	r3, #1
    3e04:	bf0c      	ite	eq
    3e06:	2401      	moveq	r4, #1
    3e08:	2400      	movne	r4, #0
    3e0a:	2803      	cmp	r0, #3
    3e0c:	d306      	bcc.n	3e1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    3e0e:	f240 114b 	movw	r1, #331	; 0x14b
    3e12:	e000      	b.n	3e16 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    3e14:	e02b      	b.n	3e6e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    3e16:	206c      	movs	r0, #108	; 0x6c
    3e18:	f000 fca2 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e1c:	f8df c064 	ldr.w	ip, [pc, #100]	; 3e84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3e20:	f100 0310 	add.w	r3, r0, #16
    3e24:	fa07 f303 	lsl.w	r3, r7, r3
    3e28:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3e2c:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3e30:	0080      	lsls	r0, r0, #2
    3e32:	4460      	add	r0, ip
    3e34:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    3e38:	b14a      	cbz	r2, 3e4e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    3e3a:	4d13      	ldr	r5, [pc, #76]	; (3e88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    3e3c:	682e      	ldr	r6, [r5, #0]
    3e3e:	1b8d      	subs	r5, r1, r6
    3e40:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3e44:	42aa      	cmp	r2, r5
    3e46:	bf98      	it	ls
    3e48:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3e4c:	d20a      	bcs.n	3e64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3e4e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3e52:	2c00      	cmp	r4, #0
    3e54:	bf18      	it	ne
    3e56:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    3e5a:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3e5e:	2001      	movs	r0, #1
    3e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e64:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    3e68:	2000      	movs	r0, #0
    3e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e6e:	f240 2176 	movw	r1, #630	; 0x276
    3e72:	206c      	movs	r0, #108	; 0x6c
    3e74:	f000 fc74 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e78:	2000001f 	.word	0x2000001f
    3e7c:	2000001c 	.word	0x2000001c
    3e80:	40008000 	.word	0x40008000
    3e84:	4000b000 	.word	0x4000b000
    3e88:	4000b504 	.word	0x4000b504

00003e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e8e:	2701      	movs	r7, #1
    3e90:	2400      	movs	r4, #0
    3e92:	2807      	cmp	r0, #7
    3e94:	d24c      	bcs.n	3f30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    3e96:	e8df f000 	tbb	[pc, r0]
    3e9a:	0404      	.short	0x0404
    3e9c:	16160404 	.word	0x16160404
    3ea0:	0016      	.short	0x0016
    3ea2:	4a26      	ldr	r2, [pc, #152]	; (3f3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    3ea4:	f100 0110 	add.w	r1, r0, #16
    3ea8:	fa07 f101 	lsl.w	r1, r7, r1
    3eac:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    3eb0:	0081      	lsls	r1, r0, #2
    3eb2:	4411      	add	r1, r2
    3eb4:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3eb8:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    3ebc:	4920      	ldr	r1, [pc, #128]	; (3f40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    3ebe:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3ec2:	9000      	str	r0, [sp, #0]
    3ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ec6:	4d1f      	ldr	r5, [pc, #124]	; (3f44 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    3ec8:	1f01      	subs	r1, r0, #4
    3eca:	b2ce      	uxtb	r6, r1
    3ecc:	7829      	ldrb	r1, [r5, #0]
    3ece:	b179      	cbz	r1, 3ef0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3ed0:	786a      	ldrb	r2, [r5, #1]
    3ed2:	4282      	cmp	r2, r0
    3ed4:	d10c      	bne.n	3ef0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3ed6:	4a1c      	ldr	r2, [pc, #112]	; (3f48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    3ed8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3edc:	6010      	str	r0, [r2, #0]
    3ede:	2901      	cmp	r1, #1
    3ee0:	bf08      	it	eq
    3ee2:	f7ff fd57 	bleq	3994 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3ee6:	702c      	strb	r4, [r5, #0]
    3ee8:	4918      	ldr	r1, [pc, #96]	; (3f4c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3eea:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3eee:	60c8      	str	r0, [r1, #12]
    3ef0:	f106 0010 	add.w	r0, r6, #16
    3ef4:	fa07 f100 	lsl.w	r1, r7, r0
    3ef8:	4815      	ldr	r0, [pc, #84]	; (3f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3efa:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3efe:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3f02:	00b0      	lsls	r0, r6, #2
    3f04:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3f08:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    3f0c:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    3f10:	4a10      	ldr	r2, [pc, #64]	; (3f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3f12:	6812      	ldr	r2, [r2, #0]
    3f14:	1a89      	subs	r1, r1, r2
    3f16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3f1a:	2902      	cmp	r1, #2
    3f1c:	bf24      	itt	cs
    3f1e:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    3f22:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    3f26:	480c      	ldr	r0, [pc, #48]	; (3f58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3f28:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    3f2c:	9000      	str	r0, [sp, #0]
    3f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f30:	f240 21ef 	movw	r1, #751	; 0x2ef
    3f34:	206c      	movs	r0, #108	; 0x6c
    3f36:	f000 fc13 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f3a:	0000      	.short	0x0000
    3f3c:	40008000 	.word	0x40008000
    3f40:	40008140 	.word	0x40008140
    3f44:	2000001f 	.word	0x2000001f
    3f48:	4001f508 	.word	0x4001f508
    3f4c:	2000001c 	.word	0x2000001c
    3f50:	4000b000 	.word	0x4000b000
    3f54:	4000b504 	.word	0x4000b504
    3f58:	4000b140 	.word	0x4000b140

00003f5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3f5c:	491e      	ldr	r1, [pc, #120]	; (3fd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    3f5e:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3f62:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3f66:	481d      	ldr	r0, [pc, #116]	; (3fdc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    3f68:	4a1d      	ldr	r2, [pc, #116]	; (3fe0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    3f6a:	f890 c000 	ldrb.w	ip, [r0]
    3f6e:	2000      	movs	r0, #0
    3f70:	f1bc 0f00 	cmp.w	ip, #0
    3f74:	d00a      	beq.n	3f8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    3f76:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3f7a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3f7e:	6010      	str	r0, [r2, #0]
    3f80:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3f84:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    3f88:	b981      	cbnz	r1, 3fac <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3f8a:	e009      	b.n	3fa0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    3f8c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3f90:	4b14      	ldr	r3, [pc, #80]	; (3fe4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3f92:	6018      	str	r0, [r3, #0]
    3f94:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3f98:	6010      	str	r0, [r2, #0]
    3f9a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3f9e:	e7f1      	b.n	3f84 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3fa0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3fa8:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    3fac:	490e      	ldr	r1, [pc, #56]	; (3fe8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    3fae:	f04f 32ff 	mov.w	r2, #4294967295
    3fb2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3fb6:	4a0d      	ldr	r2, [pc, #52]	; (3fec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    3fb8:	6010      	str	r0, [r2, #0]
    3fba:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3fbe:	1d12      	adds	r2, r2, #4
    3fc0:	6010      	str	r0, [r2, #0]
    3fc2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3fc6:	1d12      	adds	r2, r2, #4
    3fc8:	6010      	str	r0, [r2, #0]
    3fca:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3fce:	1d12      	adds	r2, r2, #4
    3fd0:	6010      	str	r0, [r2, #0]
    3fd2:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3fd6:	4770      	bx	lr
    3fd8:	4000b000 	.word	0x4000b000
    3fdc:	2000001f 	.word	0x2000001f
    3fe0:	4000b544 	.word	0x4000b544
    3fe4:	4000b540 	.word	0x4000b540
    3fe8:	40008000 	.word	0x40008000
    3fec:	40008540 	.word	0x40008540

00003ff0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3ff0:	4808      	ldr	r0, [pc, #32]	; (4014 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3ff2:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3ff6:	2800      	cmp	r0, #0
    3ff8:	bfb8      	it	lt
    3ffa:	4770      	bxlt	lr
    3ffc:	f000 011f 	and.w	r1, r0, #31
    4000:	2201      	movs	r2, #1
    4002:	fa02 f101 	lsl.w	r1, r2, r1
    4006:	0940      	lsrs	r0, r0, #5
    4008:	0080      	lsls	r0, r0, #2
    400a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    400e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4012:	4770      	bx	lr
    4014:	2000001c 	.word	0x2000001c

00004018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    4018:	b510      	push	{r4, lr}
    401a:	2807      	cmp	r0, #7
    401c:	d20d      	bcs.n	403a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    401e:	e8df f000 	tbb	[pc, r0]
    4022:	0404      	.short	0x0404
    4024:	06060404 	.word	0x06060404
    4028:	0006      	.short	0x0006
    402a:	4906      	ldr	r1, [pc, #24]	; (4044 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    402c:	e002      	b.n	4034 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    402e:	1f00      	subs	r0, r0, #4
    4030:	4905      	ldr	r1, [pc, #20]	; (4048 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    4032:	b2c0      	uxtb	r0, r0
    4034:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    4038:	bd10      	pop	{r4, pc}
    403a:	f240 219a 	movw	r1, #666	; 0x29a
    403e:	206c      	movs	r0, #108	; 0x6c
    4040:	f000 fb8e 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4044:	40008140 	.word	0x40008140
    4048:	4000b140 	.word	0x4000b140

0000404c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    404c:	b570      	push	{r4, r5, r6, lr}
    404e:	4819      	ldr	r0, [pc, #100]	; (40b4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    4050:	2400      	movs	r4, #0
    4052:	2104      	movs	r1, #4
    4054:	7004      	strb	r4, [r0, #0]
    4056:	1ec0      	subs	r0, r0, #3
    4058:	7001      	strb	r1, [r0, #0]
    405a:	0589      	lsls	r1, r1, #22
    405c:	60c1      	str	r1, [r0, #12]
    405e:	f7ff fc99 	bl	3994 <MPSL_IRQ_TIMER0_Handler+0xf8>
    4062:	2501      	movs	r5, #1
    4064:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    4068:	02eb      	lsls	r3, r5, #11
    406a:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    406e:	f3bf 8f4f 	dsb	sy
    4072:	f3bf 8f6f 	isb	sy
    4076:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    407a:	4a0f      	ldr	r2, [pc, #60]	; (40b8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    407c:	6055      	str	r5, [r2, #4]
    407e:	6095      	str	r5, [r2, #8]
    4080:	480e      	ldr	r0, [pc, #56]	; (40bc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    4082:	6801      	ldr	r1, [r0, #0]
    4084:	2900      	cmp	r1, #0
    4086:	d1fc      	bne.n	4082 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    4088:	1e48      	subs	r0, r1, #1
    408a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    408e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    4092:	480b      	ldr	r0, [pc, #44]	; (40c0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    4094:	6004      	str	r4, [r0, #0]
    4096:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    409a:	1d00      	adds	r0, r0, #4
    409c:	6004      	str	r4, [r0, #0]
    409e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    40a2:	1d00      	adds	r0, r0, #4
    40a4:	6004      	str	r4, [r0, #0]
    40a6:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    40aa:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    40ae:	6015      	str	r5, [r2, #0]
    40b0:	bd70      	pop	{r4, r5, r6, pc}
    40b2:	0000      	.short	0x0000
    40b4:	2000001f 	.word	0x2000001f
    40b8:	4000b000 	.word	0x4000b000
    40bc:	4000b504 	.word	0x4000b504
    40c0:	4000b540 	.word	0x4000b540

000040c4 <MPSL_IRQ_CLOCK_Handler>:
    40c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40c8:	4c16      	ldr	r4, [pc, #88]	; (4124 <MPSL_IRQ_CLOCK_Handler+0x60>)
    40ca:	7a60      	ldrb	r0, [r4, #9]
    40cc:	2800      	cmp	r0, #0
    40ce:	d027      	beq.n	4120 <MPSL_IRQ_CLOCK_Handler+0x5c>
    40d0:	f44f 7180 	mov.w	r1, #256	; 0x100
    40d4:	058d      	lsls	r5, r1, #22
    40d6:	4628      	mov	r0, r5
    40d8:	f009 f8f7 	bl	d2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    40dc:	4680      	mov	r8, r0
    40de:	f44f 7182 	mov.w	r1, #260	; 0x104
    40e2:	4628      	mov	r0, r5
    40e4:	f009 f8f1 	bl	d2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    40e8:	2600      	movs	r6, #0
    40ea:	4607      	mov	r7, r0
    40ec:	f1b8 0f00 	cmp.w	r8, #0
    40f0:	d009      	beq.n	4106 <MPSL_IRQ_CLOCK_Handler+0x42>
    40f2:	2001      	movs	r0, #1
    40f4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    40f8:	7920      	ldrb	r0, [r4, #4]
    40fa:	b120      	cbz	r0, 4106 <MPSL_IRQ_CLOCK_Handler+0x42>
    40fc:	7126      	strb	r6, [r4, #4]
    40fe:	69e0      	ldr	r0, [r4, #28]
    4100:	b108      	cbz	r0, 4106 <MPSL_IRQ_CLOCK_Handler+0x42>
    4102:	4780      	blx	r0
    4104:	61e6      	str	r6, [r4, #28]
    4106:	b137      	cbz	r7, 4116 <MPSL_IRQ_CLOCK_Handler+0x52>
    4108:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    410c:	2002      	movs	r0, #2
    410e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4112:	f000 fa6d 	bl	45f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4116:	4640      	mov	r0, r8
    4118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    411c:	f000 b85a 	b.w	41d4 <MPSL_IRQ_CLOCK_Handler+0x110>
    4120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4124:	2000002c 	.word	0x2000002c
    4128:	b510      	push	{r4, lr}
    412a:	f009 f978 	bl	d41e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    412e:	b930      	cbnz	r0, 413e <MPSL_IRQ_CLOCK_Handler+0x7a>
    4130:	f009 f996 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4134:	b918      	cbnz	r0, 413e <MPSL_IRQ_CLOCK_Handler+0x7a>
    4136:	f009 f9c9 	bl	d4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    413a:	2800      	cmp	r0, #0
    413c:	d002      	beq.n	4144 <MPSL_IRQ_CLOCK_Handler+0x80>
    413e:	4902      	ldr	r1, [pc, #8]	; (4148 <MPSL_IRQ_CLOCK_Handler+0x84>)
    4140:	2002      	movs	r0, #2
    4142:	6008      	str	r0, [r1, #0]
    4144:	bd10      	pop	{r4, pc}
    4146:	0000      	.short	0x0000
    4148:	40000c34 	.word	0x40000c34
    414c:	b570      	push	{r4, r5, r6, lr}
    414e:	f000 f987 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4152:	f000 faa1 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4156:	4c09      	ldr	r4, [pc, #36]	; (417c <MPSL_IRQ_CLOCK_Handler+0xb8>)
    4158:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    415c:	b130      	cbz	r0, 416c <MPSL_IRQ_CLOCK_Handler+0xa8>
    415e:	f7ff ffe3 	bl	4128 <MPSL_IRQ_CLOCK_Handler+0x64>
    4162:	2001      	movs	r0, #1
    4164:	6128      	str	r0, [r5, #16]
    4166:	2004      	movs	r0, #4
    4168:	72a0      	strb	r0, [r4, #10]
    416a:	e004      	b.n	4176 <MPSL_IRQ_CLOCK_Handler+0xb2>
    416c:	2003      	movs	r0, #3
    416e:	72a0      	strb	r0, [r4, #10]
    4170:	2001      	movs	r0, #1
    4172:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4176:	2000      	movs	r0, #0
    4178:	71e0      	strb	r0, [r4, #7]
    417a:	bd70      	pop	{r4, r5, r6, pc}
    417c:	2000002c 	.word	0x2000002c
    4180:	b570      	push	{r4, r5, r6, lr}
    4182:	4c13      	ldr	r4, [pc, #76]	; (41d0 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    4184:	79a0      	ldrb	r0, [r4, #6]
    4186:	b1f0      	cbz	r0, 41c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    4188:	2801      	cmp	r0, #1
    418a:	d003      	beq.n	4194 <MPSL_IRQ_CLOCK_Handler+0xd0>
    418c:	79e1      	ldrb	r1, [r4, #7]
    418e:	1e40      	subs	r0, r0, #1
    4190:	4281      	cmp	r1, r0
    4192:	da18      	bge.n	41c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    4194:	f000 fa80 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4198:	4605      	mov	r5, r0
    419a:	f000 fb51 	bl	4840 <mpsl_temperature_get>
    419e:	79a1      	ldrb	r1, [r4, #6]
    41a0:	2901      	cmp	r1, #1
    41a2:	d902      	bls.n	41aa <MPSL_IRQ_CLOCK_Handler+0xe6>
    41a4:	79e1      	ldrb	r1, [r4, #7]
    41a6:	1c49      	adds	r1, r1, #1
    41a8:	71e1      	strb	r1, [r4, #7]
    41aa:	b10d      	cbz	r5, 41b0 <MPSL_IRQ_CLOCK_Handler+0xec>
    41ac:	6961      	ldr	r1, [r4, #20]
    41ae:	e000      	b.n	41b2 <MPSL_IRQ_CLOCK_Handler+0xee>
    41b0:	6921      	ldr	r1, [r4, #16]
    41b2:	1a41      	subs	r1, r0, r1
    41b4:	2902      	cmp	r1, #2
    41b6:	da02      	bge.n	41be <MPSL_IRQ_CLOCK_Handler+0xfa>
    41b8:	f111 0f02 	cmn.w	r1, #2
    41bc:	dc07      	bgt.n	41ce <MPSL_IRQ_CLOCK_Handler+0x10a>
    41be:	b10d      	cbz	r5, 41c4 <MPSL_IRQ_CLOCK_Handler+0x100>
    41c0:	6160      	str	r0, [r4, #20]
    41c2:	e000      	b.n	41c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    41c4:	6120      	str	r0, [r4, #16]
    41c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41ca:	f7ff bfbf 	b.w	414c <MPSL_IRQ_CLOCK_Handler+0x88>
    41ce:	bd70      	pop	{r4, r5, r6, pc}
    41d0:	2000002c 	.word	0x2000002c
    41d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    41d8:	4606      	mov	r6, r0
    41da:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    41de:	f44f 7186 	mov.w	r1, #268	; 0x10c
    41e2:	4628      	mov	r0, r5
    41e4:	f009 f871 	bl	d2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    41e8:	4680      	mov	r8, r0
    41ea:	f44f 7188 	mov.w	r1, #272	; 0x110
    41ee:	4628      	mov	r0, r5
    41f0:	f009 f86b 	bl	d2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    41f4:	4c27      	ldr	r4, [pc, #156]	; (4294 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    41f6:	4682      	mov	sl, r0
    41f8:	7827      	ldrb	r7, [r4, #0]
    41fa:	f104 0008 	add.w	r0, r4, #8
    41fe:	f009 f8d8 	bl	d3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4202:	b110      	cbz	r0, 420a <MPSL_IRQ_CLOCK_Handler+0x146>
    4204:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    4208:	e016      	b.n	4238 <MPSL_IRQ_CLOCK_Handler+0x174>
    420a:	f04f 0901 	mov.w	r9, #1
    420e:	b146      	cbz	r6, 4222 <MPSL_IRQ_CLOCK_Handler+0x15e>
    4210:	7aa0      	ldrb	r0, [r4, #10]
    4212:	2803      	cmp	r0, #3
    4214:	d105      	bne.n	4222 <MPSL_IRQ_CLOCK_Handler+0x15e>
    4216:	2004      	movs	r0, #4
    4218:	72a0      	strb	r0, [r4, #10]
    421a:	f7ff ff85 	bl	4128 <MPSL_IRQ_CLOCK_Handler+0x64>
    421e:	f8c5 9010 	str.w	r9, [r5, #16]
    4222:	2600      	movs	r6, #0
    4224:	f1b8 0f00 	cmp.w	r8, #0
    4228:	d018      	beq.n	425c <MPSL_IRQ_CLOCK_Handler+0x198>
    422a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    422e:	7aa0      	ldrb	r0, [r4, #10]
    4230:	2804      	cmp	r0, #4
    4232:	d004      	beq.n	423e <MPSL_IRQ_CLOCK_Handler+0x17a>
    4234:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    4238:	206d      	movs	r0, #109	; 0x6d
    423a:	f000 fa91 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    423e:	f009 f8ee 	bl	d41e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4242:	b928      	cbnz	r0, 4250 <MPSL_IRQ_CLOCK_Handler+0x18c>
    4244:	f009 f90c 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4248:	b910      	cbnz	r0, 4250 <MPSL_IRQ_CLOCK_Handler+0x18c>
    424a:	f009 f93f 	bl	d4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    424e:	b108      	cbz	r0, 4254 <MPSL_IRQ_CLOCK_Handler+0x190>
    4250:	4811      	ldr	r0, [pc, #68]	; (4298 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    4252:	6006      	str	r6, [r0, #0]
    4254:	2002      	movs	r0, #2
    4256:	72a0      	strb	r0, [r4, #10]
    4258:	f000 f8e6 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    425c:	f1ba 0f00 	cmp.w	sl, #0
    4260:	d008      	beq.n	4274 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    4262:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    4266:	7aa0      	ldrb	r0, [r4, #10]
    4268:	2802      	cmp	r0, #2
    426a:	d101      	bne.n	4270 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    426c:	f7ff ff88 	bl	4180 <MPSL_IRQ_CLOCK_Handler+0xbc>
    4270:	f8c5 9014 	str.w	r9, [r5, #20]
    4274:	b13f      	cbz	r7, 4286 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    4276:	7026      	strb	r6, [r4, #0]
    4278:	7aa0      	ldrb	r0, [r4, #10]
    427a:	2802      	cmp	r0, #2
    427c:	d101      	bne.n	4282 <MPSL_IRQ_CLOCK_Handler+0x1be>
    427e:	f7ff ff65 	bl	414c <MPSL_IRQ_CLOCK_Handler+0x88>
    4282:	f000 f8d1 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4286:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    428a:	4802      	ldr	r0, [pc, #8]	; (4294 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    428c:	3008      	adds	r0, #8
    428e:	f009 b8a7 	b.w	d3e0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4292:	0000      	.short	0x0000
    4294:	2000002c 	.word	0x2000002c
    4298:	40000c34 	.word	0x40000c34
    429c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    42a0:	4c5c      	ldr	r4, [pc, #368]	; (4414 <MPSL_IRQ_CLOCK_Handler+0x350>)
    42a2:	f04f 0800 	mov.w	r8, #0
    42a6:	4606      	mov	r6, r0
    42a8:	f8c4 8018 	str.w	r8, [r4, #24]
    42ac:	7843      	ldrb	r3, [r0, #1]
    42ae:	7882      	ldrb	r2, [r0, #2]
    42b0:	7800      	ldrb	r0, [r0, #0]
    42b2:	72e0      	strb	r0, [r4, #11]
    42b4:	7163      	strb	r3, [r4, #5]
    42b6:	2701      	movs	r7, #1
    42b8:	71a2      	strb	r2, [r4, #6]
    42ba:	07bd      	lsls	r5, r7, #30
    42bc:	f884 8007 	strb.w	r8, [r4, #7]
    42c0:	2805      	cmp	r0, #5
    42c2:	d224      	bcs.n	430e <MPSL_IRQ_CLOCK_Handler+0x24a>
    42c4:	e8df f000 	tbb	[pc, r0]
    42c8:	1f05030f 	.word	0x1f05030f
    42cc:	0021      	.short	0x0021
    42ce:	61a7      	str	r7, [r4, #24]
    42d0:	e009      	b.n	42e6 <MPSL_IRQ_CLOCK_Handler+0x222>
    42d2:	f000 f8c5 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    42d6:	2101      	movs	r1, #1
    42d8:	4628      	mov	r0, r5
    42da:	f008 fffb 	bl	d2d4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    42de:	2800      	cmp	r0, #0
    42e0:	d0f9      	beq.n	42d6 <MPSL_IRQ_CLOCK_Handler+0x212>
    42e2:	2002      	movs	r0, #2
    42e4:	61a0      	str	r0, [r4, #24]
    42e6:	f009 f821 	bl	d32c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    42ea:	b1b0      	cbz	r0, 431a <MPSL_IRQ_CLOCK_Handler+0x256>
    42ec:	f000 f9ee 	bl	46cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    42f0:	7e21      	ldrb	r1, [r4, #24]
    42f2:	f001 0103 	and.w	r1, r1, #3
    42f6:	4288      	cmp	r0, r1
    42f8:	d10f      	bne.n	431a <MPSL_IRQ_CLOCK_Handler+0x256>
    42fa:	79b0      	ldrb	r0, [r6, #6]
    42fc:	b150      	cbz	r0, 4314 <MPSL_IRQ_CLOCK_Handler+0x250>
    42fe:	2002      	movs	r0, #2
    4300:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4304:	e06a      	b.n	43dc <MPSL_IRQ_CLOCK_Handler+0x318>
    4306:	4844      	ldr	r0, [pc, #272]	; (4418 <MPSL_IRQ_CLOCK_Handler+0x354>)
    4308:	e7ec      	b.n	42e4 <MPSL_IRQ_CLOCK_Handler+0x220>
    430a:	4844      	ldr	r0, [pc, #272]	; (441c <MPSL_IRQ_CLOCK_Handler+0x358>)
    430c:	e7ea      	b.n	42e4 <MPSL_IRQ_CLOCK_Handler+0x220>
    430e:	f44f 714c 	mov.w	r1, #816	; 0x330
    4312:	e049      	b.n	43a8 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    4314:	f000 f9ae 	bl	4674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4318:	e060      	b.n	43dc <MPSL_IRQ_CLOCK_Handler+0x318>
    431a:	60ef      	str	r7, [r5, #12]
    431c:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4320:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    4324:	69a0      	ldr	r0, [r4, #24]
    4326:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    432a:	f009 f864 	bl	d3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    432e:	b940      	cbnz	r0, 4342 <MPSL_IRQ_CLOCK_Handler+0x27e>
    4330:	f009 f86b 	bl	d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4334:	b928      	cbnz	r0, 4342 <MPSL_IRQ_CLOCK_Handler+0x27e>
    4336:	f009 f87f 	bl	d438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    433a:	b910      	cbnz	r0, 4342 <MPSL_IRQ_CLOCK_Handler+0x27e>
    433c:	f009 f890 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4340:	b138      	cbz	r0, 4352 <MPSL_IRQ_CLOCK_Handler+0x28e>
    4342:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    4346:	4836      	ldr	r0, [pc, #216]	; (4420 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4348:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    434c:	f3c1 3142 	ubfx	r1, r1, #13, #3
    4350:	6001      	str	r1, [r0, #0]
    4352:	f009 f850 	bl	d3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4356:	b940      	cbnz	r0, 436a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    4358:	f009 f857 	bl	d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    435c:	b928      	cbnz	r0, 436a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    435e:	f009 f86b 	bl	d438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4362:	b910      	cbnz	r0, 436a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    4364:	f009 f87c 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4368:	b110      	cbz	r0, 4370 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    436a:	482d      	ldr	r0, [pc, #180]	; (4420 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    436c:	3010      	adds	r0, #16
    436e:	6007      	str	r7, [r0, #0]
    4370:	60af      	str	r7, [r5, #8]
    4372:	2002      	movs	r0, #2
    4374:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4378:	79b0      	ldrb	r0, [r6, #6]
    437a:	bb78      	cbnz	r0, 43dc <MPSL_IRQ_CLOCK_Handler+0x318>
    437c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    4380:	f010 0f02 	tst.w	r0, #2
    4384:	d00e      	beq.n	43a4 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    4386:	f8df 909c 	ldr.w	r9, [pc, #156]	; 4424 <MPSL_IRQ_CLOCK_Handler+0x360>
    438a:	f8d9 1000 	ldr.w	r1, [r9]
    438e:	43c9      	mvns	r1, r1
    4390:	f341 1700 	sbfx	r7, r1, #4, #1
    4394:	f8d9 1000 	ldr.w	r1, [r9]
    4398:	f041 0110 	orr.w	r1, r1, #16
    439c:	f8c9 1000 	str.w	r1, [r9]
    43a0:	1c7f      	adds	r7, r7, #1
    43a2:	e007      	b.n	43b4 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    43a4:	f240 21f1 	movw	r1, #753	; 0x2f1
    43a8:	206d      	movs	r0, #109	; 0x6d
    43aa:	f000 f9d9 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    43ae:	bf00      	nop
    43b0:	f000 fafc 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    43b4:	4651      	mov	r1, sl
    43b6:	4628      	mov	r0, r5
    43b8:	f008 ff87 	bl	d2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    43bc:	2800      	cmp	r0, #0
    43be:	d0f7      	beq.n	43b0 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    43c0:	f000 f958 	bl	4674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    43c4:	b92f      	cbnz	r7, 43d2 <MPSL_IRQ_CLOCK_Handler+0x30e>
    43c6:	f8d9 1000 	ldr.w	r1, [r9]
    43ca:	f021 0110 	bic.w	r1, r1, #16
    43ce:	f8c9 1000 	str.w	r1, [r9]
    43d2:	2002      	movs	r0, #2
    43d4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    43d8:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    43dc:	79a0      	ldrb	r0, [r4, #6]
    43de:	b170      	cbz	r0, 43fe <MPSL_IRQ_CLOCK_Handler+0x33a>
    43e0:	7830      	ldrb	r0, [r6, #0]
    43e2:	b960      	cbnz	r0, 43fe <MPSL_IRQ_CLOCK_Handler+0x33a>
    43e4:	f000 f958 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    43e8:	4606      	mov	r6, r0
    43ea:	f000 fa29 	bl	4840 <mpsl_temperature_get>
    43ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    43f2:	b116      	cbz	r6, 43fa <MPSL_IRQ_CLOCK_Handler+0x336>
    43f4:	e9c4 2004 	strd	r2, r0, [r4, #16]
    43f8:	e001      	b.n	43fe <MPSL_IRQ_CLOCK_Handler+0x33a>
    43fa:	e9c4 0204 	strd	r0, r2, [r4, #16]
    43fe:	2101      	movs	r1, #1
    4400:	4628      	mov	r0, r5
    4402:	f008 ff67 	bl	d2d4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4406:	b108      	cbz	r0, 440c <MPSL_IRQ_CLOCK_Handler+0x348>
    4408:	f000 f940 	bl	468c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    440c:	f884 800a 	strb.w	r8, [r4, #10]
    4410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4414:	2000002c 	.word	0x2000002c
    4418:	00020001 	.word	0x00020001
    441c:	00030001 	.word	0x00030001
    4420:	4000053c 	.word	0x4000053c
    4424:	e000ed10 	.word	0xe000ed10

00004428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4428:	b510      	push	{r4, lr}
    442a:	f3ef 8410 	mrs	r4, PRIMASK
    442e:	b672      	cpsid	i
    4430:	480a      	ldr	r0, [pc, #40]	; (445c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    4432:	7841      	ldrb	r1, [r0, #1]
    4434:	b129      	cbz	r1, 4442 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    4436:	7841      	ldrb	r1, [r0, #1]
    4438:	1e49      	subs	r1, r1, #1
    443a:	7041      	strb	r1, [r0, #1]
    443c:	7841      	ldrb	r1, [r0, #1]
    443e:	b129      	cbz	r1, 444c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4440:	e008      	b.n	4454 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4442:	f240 110d 	movw	r1, #269	; 0x10d
    4446:	206d      	movs	r0, #109	; 0x6d
    4448:	f000 f98a 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    444c:	7880      	ldrb	r0, [r0, #2]
    444e:	b908      	cbnz	r0, 4454 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4450:	f000 f930 	bl	46b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4454:	2c00      	cmp	r4, #0
    4456:	d100      	bne.n	445a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4458:	b662      	cpsie	i
    445a:	bd10      	pop	{r4, pc}
    445c:	2000002c 	.word	0x2000002c

00004460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4460:	b510      	push	{r4, lr}
    4462:	f3ef 8410 	mrs	r4, PRIMASK
    4466:	b672      	cpsid	i
    4468:	4806      	ldr	r0, [pc, #24]	; (4484 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    446a:	7841      	ldrb	r1, [r0, #1]
    446c:	1c49      	adds	r1, r1, #1
    446e:	7041      	strb	r1, [r0, #1]
    4470:	7840      	ldrb	r0, [r0, #1]
    4472:	2801      	cmp	r0, #1
    4474:	d101      	bne.n	447a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    4476:	f008 ff44 	bl	d302 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    447a:	2c00      	cmp	r4, #0
    447c:	d100      	bne.n	4480 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    447e:	b662      	cpsie	i
    4480:	bd10      	pop	{r4, pc}
    4482:	0000      	.short	0x0000
    4484:	2000002c 	.word	0x2000002c

00004488 <mpsl_clock_hfclk_release>:
    4488:	4805      	ldr	r0, [pc, #20]	; (44a0 <mpsl_clock_hfclk_release+0x18>)
    448a:	b510      	push	{r4, lr}
    448c:	78c1      	ldrb	r1, [r0, #3]
    448e:	b121      	cbz	r1, 449a <mpsl_clock_hfclk_release+0x12>
    4490:	2100      	movs	r1, #0
    4492:	7101      	strb	r1, [r0, #4]
    4494:	70c1      	strb	r1, [r0, #3]
    4496:	f7ff ffc7 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    449a:	2000      	movs	r0, #0
    449c:	bd10      	pop	{r4, pc}
    449e:	0000      	.short	0x0000
    44a0:	2000002c 	.word	0x2000002c

000044a4 <mpsl_clock_hfclk_request>:
    44a4:	b570      	push	{r4, r5, r6, lr}
    44a6:	4c0c      	ldr	r4, [pc, #48]	; (44d8 <mpsl_clock_hfclk_request+0x34>)
    44a8:	78e1      	ldrb	r1, [r4, #3]
    44aa:	b961      	cbnz	r1, 44c6 <mpsl_clock_hfclk_request+0x22>
    44ac:	2501      	movs	r5, #1
    44ae:	70e5      	strb	r5, [r4, #3]
    44b0:	61e0      	str	r0, [r4, #28]
    44b2:	f7ff ffd5 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    44b6:	f000 f8ef 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    44ba:	b130      	cbz	r0, 44ca <mpsl_clock_hfclk_request+0x26>
    44bc:	69e0      	ldr	r0, [r4, #28]
    44be:	b110      	cbz	r0, 44c6 <mpsl_clock_hfclk_request+0x22>
    44c0:	4780      	blx	r0
    44c2:	2000      	movs	r0, #0
    44c4:	61e0      	str	r0, [r4, #28]
    44c6:	2000      	movs	r0, #0
    44c8:	bd70      	pop	{r4, r5, r6, pc}
    44ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    44ce:	7125      	strb	r5, [r4, #4]
    44d0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    44d4:	e7f7      	b.n	44c6 <mpsl_clock_hfclk_request+0x22>
    44d6:	0000      	.short	0x0000
    44d8:	2000002c 	.word	0x2000002c

000044dc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    44dc:	f3ef 8010 	mrs	r0, PRIMASK
    44e0:	b672      	cpsid	i
    44e2:	4904      	ldr	r1, [pc, #16]	; (44f4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    44e4:	788a      	ldrb	r2, [r1, #2]
    44e6:	1c52      	adds	r2, r2, #1
    44e8:	708a      	strb	r2, [r1, #2]
    44ea:	2800      	cmp	r0, #0
    44ec:	d100      	bne.n	44f0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    44ee:	b662      	cpsie	i
    44f0:	4770      	bx	lr
    44f2:	0000      	.short	0x0000
    44f4:	2000002c 	.word	0x2000002c

000044f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    44f8:	b510      	push	{r4, lr}
    44fa:	f3ef 8410 	mrs	r4, PRIMASK
    44fe:	b672      	cpsid	i
    4500:	480a      	ldr	r0, [pc, #40]	; (452c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    4502:	7881      	ldrb	r1, [r0, #2]
    4504:	b129      	cbz	r1, 4512 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    4506:	7881      	ldrb	r1, [r0, #2]
    4508:	1e49      	subs	r1, r1, #1
    450a:	7081      	strb	r1, [r0, #2]
    450c:	7841      	ldrb	r1, [r0, #1]
    450e:	b129      	cbz	r1, 451c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    4510:	e008      	b.n	4524 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4512:	f240 1125 	movw	r1, #293	; 0x125
    4516:	206d      	movs	r0, #109	; 0x6d
    4518:	f000 f922 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    451c:	7880      	ldrb	r0, [r0, #2]
    451e:	b908      	cbnz	r0, 4524 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4520:	f000 f8c8 	bl	46b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4524:	2c00      	cmp	r4, #0
    4526:	d100      	bne.n	452a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    4528:	b662      	cpsie	i
    452a:	bd10      	pop	{r4, pc}
    452c:	2000002c 	.word	0x2000002c

00004530 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4534:	0004      	movs	r4, r0
    4536:	f06f 0015 	mvn.w	r0, #21
    453a:	d03c      	beq.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    453c:	7821      	ldrb	r1, [r4, #0]
    453e:	2904      	cmp	r1, #4
    4540:	d839      	bhi.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4542:	2900      	cmp	r1, #0
    4544:	7861      	ldrb	r1, [r4, #1]
    4546:	d038      	beq.n	45ba <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    4548:	2900      	cmp	r1, #0
    454a:	d134      	bne.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    454c:	78a1      	ldrb	r1, [r4, #2]
    454e:	2900      	cmp	r1, #0
    4550:	d131      	bne.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4552:	2000      	movs	r0, #0
    4554:	f008 fe84 	bl	d260 <MPSL_IRQ_RADIO_Handler+0x1e>
    4558:	2000      	movs	r0, #0
    455a:	f008 fe74 	bl	d246 <MPSL_IRQ_RADIO_Handler+0x4>
    455e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4562:	f04f 31ff 	mov.w	r1, #4294967295
    4566:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    456a:	2600      	movs	r6, #0
    456c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4570:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    4574:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    4578:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    457c:	4f14      	ldr	r7, [pc, #80]	; (45d0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    457e:	707e      	strb	r6, [r7, #1]
    4580:	88a0      	ldrh	r0, [r4, #4]
    4582:	81b8      	strh	r0, [r7, #12]
    4584:	f008 feb4 	bl	d2f0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    4588:	2501      	movs	r5, #1
    458a:	b108      	cbz	r0, 4590 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    458c:	70fd      	strb	r5, [r7, #3]
    458e:	707d      	strb	r5, [r7, #1]
    4590:	2101      	movs	r1, #1
    4592:	4640      	mov	r0, r8
    4594:	f008 fe9e 	bl	d2d4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4598:	b108      	cbz	r0, 459e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    459a:	f000 f877 	bl	468c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    459e:	4620      	mov	r0, r4
    45a0:	f7ff fe7c 	bl	429c <MPSL_IRQ_CLOCK_Handler+0x1d8>
    45a4:	727d      	strb	r5, [r7, #9]
    45a6:	2000      	movs	r0, #0
    45a8:	f008 fe4d 	bl	d246 <MPSL_IRQ_RADIO_Handler+0x4>
    45ac:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    45b0:	4630      	mov	r0, r6
    45b2:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    45b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45ba:	2900      	cmp	r1, #0
    45bc:	d0fb      	beq.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45be:	2920      	cmp	r1, #32
    45c0:	d8f9      	bhi.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45c2:	78a1      	ldrb	r1, [r4, #2]
    45c4:	2921      	cmp	r1, #33	; 0x21
    45c6:	d8f6      	bhi.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45c8:	2901      	cmp	r1, #1
    45ca:	d1c2      	bne.n	4552 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    45cc:	e7f3      	b.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45ce:	0000      	.short	0x0000
    45d0:	2000002c 	.word	0x2000002c

000045d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    45d4:	4801      	ldr	r0, [pc, #4]	; (45dc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    45d6:	8980      	ldrh	r0, [r0, #12]
    45d8:	4770      	bx	lr
    45da:	0000      	.short	0x0000
    45dc:	2000002c 	.word	0x2000002c

000045e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    45e0:	4802      	ldr	r0, [pc, #8]	; (45ec <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    45e2:	7a80      	ldrb	r0, [r0, #10]
    45e4:	2800      	cmp	r0, #0
    45e6:	d000      	beq.n	45ea <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    45e8:	2001      	movs	r0, #1
    45ea:	4770      	bx	lr
    45ec:	2000002c 	.word	0x2000002c

000045f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    45f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45f2:	4d1f      	ldr	r5, [pc, #124]	; (4670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    45f4:	7ae8      	ldrb	r0, [r5, #11]
    45f6:	2800      	cmp	r0, #0
    45f8:	d10f      	bne.n	461a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    45fa:	7e28      	ldrb	r0, [r5, #24]
    45fc:	f000 0003 	and.w	r0, r0, #3
    4600:	f008 fe84 	bl	d30c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4604:	2800      	cmp	r0, #0
    4606:	d008      	beq.n	461a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4608:	f3ef 8110 	mrs	r1, PRIMASK
    460c:	b672      	cpsid	i
    460e:	f7ff ffe7 	bl	45e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4612:	b118      	cbz	r0, 461c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4614:	2900      	cmp	r1, #0
    4616:	d100      	bne.n	461a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4618:	b662      	cpsie	i
    461a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    461c:	2601      	movs	r6, #1
    461e:	72ae      	strb	r6, [r5, #10]
    4620:	b901      	cbnz	r1, 4624 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4622:	b662      	cpsie	i
    4624:	2018      	movs	r0, #24
    4626:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    462a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    462e:	61a6      	str	r6, [r4, #24]
    4630:	f44f 7020 	mov.w	r0, #640	; 0x280
    4634:	f8ad 0000 	strh.w	r0, [sp]
    4638:	f8bd 0000 	ldrh.w	r0, [sp]
    463c:	1e41      	subs	r1, r0, #1
    463e:	f8ad 1000 	strh.w	r1, [sp]
    4642:	d2f9      	bcs.n	4638 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4644:	2700      	movs	r7, #0
    4646:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    464a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    464e:	4808      	ldr	r0, [pc, #32]	; (4670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4650:	3008      	adds	r0, #8
    4652:	f008 fec1 	bl	d3d8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4656:	702f      	strb	r7, [r5, #0]
    4658:	f7ff fd78 	bl	414c <MPSL_IRQ_CLOCK_Handler+0x88>
    465c:	6166      	str	r6, [r4, #20]
    465e:	7968      	ldrb	r0, [r5, #5]
    4660:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4664:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4668:	2018      	movs	r0, #24
    466a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    466e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4670:	2000002c 	.word	0x2000002c

00004674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    4674:	b510      	push	{r4, lr}
    4676:	4c04      	ldr	r4, [pc, #16]	; (4688 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4678:	7e20      	ldrb	r0, [r4, #24]
    467a:	f000 0003 	and.w	r0, r0, #3
    467e:	f008 fe45 	bl	d30c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4682:	2800      	cmp	r0, #0
    4684:	d0f8      	beq.n	4678 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    4686:	bd10      	pop	{r4, pc}
    4688:	2000002c 	.word	0x2000002c

0000468c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    468c:	4901      	ldr	r1, [pc, #4]	; (4694 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    468e:	2001      	movs	r0, #1
    4690:	7008      	strb	r0, [r1, #0]
    4692:	4770      	bx	lr
    4694:	2000027c 	.word	0x2000027c

00004698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4698:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    469c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    46a0:	b918      	cbnz	r0, 46aa <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    46a2:	4803      	ldr	r0, [pc, #12]	; (46b0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    46a4:	7800      	ldrb	r0, [r0, #0]
    46a6:	2800      	cmp	r0, #0
    46a8:	d000      	beq.n	46ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    46aa:	2001      	movs	r0, #1
    46ac:	4770      	bx	lr
    46ae:	0000      	.short	0x0000
    46b0:	2000027c 	.word	0x2000027c

000046b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    46b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    46b8:	2101      	movs	r1, #1
    46ba:	6041      	str	r1, [r0, #4]
    46bc:	2100      	movs	r1, #0
    46be:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    46c2:	4801      	ldr	r0, [pc, #4]	; (46c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    46c4:	7001      	strb	r1, [r0, #0]
    46c6:	4770      	bx	lr
    46c8:	2000027c 	.word	0x2000027c

000046cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    46cc:	4802      	ldr	r0, [pc, #8]	; (46d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    46ce:	6800      	ldr	r0, [r0, #0]
    46d0:	f000 0003 	and.w	r0, r0, #3
    46d4:	4770      	bx	lr
    46d6:	0000      	.short	0x0000
    46d8:	4000041c 	.word	0x4000041c
    46dc:	b510      	push	{r4, lr}
    46de:	b131      	cbz	r1, 46ee <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    46e0:	2901      	cmp	r1, #1
    46e2:	d007      	beq.n	46f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    46e4:	f240 3102 	movw	r1, #770	; 0x302
    46e8:	a005      	add	r0, pc, #20	; (adr r0, 4700 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    46ea:	f000 f80f 	bl	470c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    46ee:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    46f2:	e001      	b.n	46f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    46f4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    46f8:	f000 0001 	and.w	r0, r0, #1
    46fc:	bd10      	pop	{r4, pc}
    46fe:	0000      	.short	0x0000
    4700:	5f66726e 	.word	0x5f66726e
    4704:	636f6c63 	.word	0x636f6c63
    4708:	00682e6b 	.word	0x00682e6b

0000470c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    470c:	4a02      	ldr	r2, [pc, #8]	; (4718 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    470e:	6852      	ldr	r2, [r2, #4]
    4710:	b102      	cbz	r2, 4714 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    4712:	4710      	bx	r2
    4714:	e7fe      	b.n	4714 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    4716:	0000      	.short	0x0000
    4718:	2000004c 	.word	0x2000004c
    471c:	4806      	ldr	r0, [pc, #24]	; (4738 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    471e:	b510      	push	{r4, lr}
    4720:	2100      	movs	r1, #0
    4722:	6001      	str	r1, [r0, #0]
    4724:	2101      	movs	r1, #1
    4726:	6001      	str	r1, [r0, #0]
    4728:	4608      	mov	r0, r1
    472a:	f008 fe16 	bl	d35a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    472e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4732:	2001      	movs	r0, #1
    4734:	f008 be04 	b.w	d340 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4738:	40001ffc 	.word	0x40001ffc
    473c:	4807      	ldr	r0, [pc, #28]	; (475c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    473e:	b510      	push	{r4, lr}
    4740:	2101      	movs	r1, #1
    4742:	6041      	str	r1, [r0, #4]
    4744:	1e89      	subs	r1, r1, #2
    4746:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    474a:	200c      	movs	r0, #12
    474c:	f008 fe05 	bl	d35a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4754:	200c      	movs	r0, #12
    4756:	f008 bdf3 	b.w	d340 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    475a:	0000      	.short	0x0000
    475c:	4000c000 	.word	0x4000c000

00004760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4760:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    4762:	4a10      	ldr	r2, [pc, #64]	; (47a4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4764:	6855      	ldr	r5, [r2, #4]
    4766:	b1e5      	cbz	r5, 47a2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    4768:	2200      	movs	r2, #0
    476a:	4603      	mov	r3, r0
    476c:	466e      	mov	r6, sp
    476e:	240a      	movs	r4, #10
    4770:	e003      	b.n	477a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    4772:	fbb0 f0f4 	udiv	r0, r0, r4
    4776:	1c52      	adds	r2, r2, #1
    4778:	b2d2      	uxtb	r2, r2
    477a:	2800      	cmp	r0, #0
    477c:	d1f9      	bne.n	4772 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    477e:	54b0      	strb	r0, [r6, r2]
    4780:	e00a      	b.n	4798 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4782:	bf00      	nop
    4784:	fbb3 f0f4 	udiv	r0, r3, r4
    4788:	fb04 3010 	mls	r0, r4, r0, r3
    478c:	fbb3 f3f4 	udiv	r3, r3, r4
    4790:	1e52      	subs	r2, r2, #1
    4792:	b2d2      	uxtb	r2, r2
    4794:	3030      	adds	r0, #48	; 0x30
    4796:	54b0      	strb	r0, [r6, r2]
    4798:	2a00      	cmp	r2, #0
    479a:	d1f3      	bne.n	4784 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    479c:	4630      	mov	r0, r6
    479e:	47a8      	blx	r5
    47a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    47a2:	e7fe      	b.n	47a2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    47a4:	2000004c 	.word	0x2000004c

000047a8 <mpsl_init>:
    47a8:	b570      	push	{r4, r5, r6, lr}
    47aa:	4c17      	ldr	r4, [pc, #92]	; (4808 <mpsl_init+0x60>)
    47ac:	4606      	mov	r6, r0
    47ae:	460d      	mov	r5, r1
    47b0:	7860      	ldrb	r0, [r4, #1]
    47b2:	b110      	cbz	r0, 47ba <mpsl_init+0x12>
    47b4:	f04f 30ff 	mov.w	r0, #4294967295
    47b8:	bd70      	pop	{r4, r5, r6, pc}
    47ba:	b906      	cbnz	r6, 47be <mpsl_init+0x16>
    47bc:	4e13      	ldr	r6, [pc, #76]	; (480c <mpsl_init+0x64>)
    47be:	6062      	str	r2, [r4, #4]
    47c0:	7025      	strb	r5, [r4, #0]
    47c2:	f7ff ffab 	bl	471c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    47c6:	f7ff ffb9 	bl	473c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    47ca:	4630      	mov	r0, r6
    47cc:	f7ff feb0 	bl	4530 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    47d0:	0006      	movs	r6, r0
    47d2:	d1f1      	bne.n	47b8 <mpsl_init+0x10>
    47d4:	f7fe ff36 	bl	3644 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    47d8:	f7ff ff0a 	bl	45f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    47dc:	f008 fd0a 	bl	d1f4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    47e0:	4628      	mov	r0, r5
    47e2:	f008 fdad 	bl	d340 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    47e6:	2001      	movs	r0, #1
    47e8:	2d00      	cmp	r5, #0
    47ea:	db09      	blt.n	4800 <mpsl_init+0x58>
    47ec:	f005 011f 	and.w	r1, r5, #31
    47f0:	fa00 f101 	lsl.w	r1, r0, r1
    47f4:	096a      	lsrs	r2, r5, #5
    47f6:	0092      	lsls	r2, r2, #2
    47f8:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    47fc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4800:	7060      	strb	r0, [r4, #1]
    4802:	4630      	mov	r0, r6
    4804:	bd70      	pop	{r4, r5, r6, pc}
    4806:	0000      	.short	0x0000
    4808:	2000004c 	.word	0x2000004c
    480c:	0000d37c 	.word	0x0000d37c

00004810 <mpsl_is_initialized>:
    4810:	4801      	ldr	r0, [pc, #4]	; (4818 <mpsl_is_initialized+0x8>)
    4812:	7840      	ldrb	r0, [r0, #1]
    4814:	4770      	bx	lr
    4816:	0000      	.short	0x0000
    4818:	2000004c 	.word	0x2000004c

0000481c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    481c:	4807      	ldr	r0, [pc, #28]	; (483c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    481e:	f990 0000 	ldrsb.w	r0, [r0]
    4822:	2800      	cmp	r0, #0
    4824:	db09      	blt.n	483a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    4826:	f000 021f 	and.w	r2, r0, #31
    482a:	2101      	movs	r1, #1
    482c:	4091      	lsls	r1, r2
    482e:	0940      	lsrs	r0, r0, #5
    4830:	0080      	lsls	r0, r0, #2
    4832:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4836:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    483a:	4770      	bx	lr
    483c:	2000004c 	.word	0x2000004c

00004840 <mpsl_temperature_get>:
    4840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4844:	2601      	movs	r6, #1
    4846:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    484a:	0331      	lsls	r1, r6, #12
    484c:	f04f 0800 	mov.w	r8, #0
    4850:	4640      	mov	r0, r8
    4852:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    4856:	f3bf 8f4f 	dsb	sy
    485a:	f3bf 8f6f 	isb	sy
    485e:	4c16      	ldr	r4, [pc, #88]	; (48b8 <mpsl_temperature_get+0x78>)
    4860:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4864:	200c      	movs	r0, #12
    4866:	f008 fd97 	bl	d398 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    486a:	4d14      	ldr	r5, [pc, #80]	; (48bc <mpsl_temperature_get+0x7c>)
    486c:	6828      	ldr	r0, [r5, #0]
    486e:	43c0      	mvns	r0, r0
    4870:	f340 1700 	sbfx	r7, r0, #4, #1
    4874:	6828      	ldr	r0, [r5, #0]
    4876:	f040 0010 	orr.w	r0, r0, #16
    487a:	6028      	str	r0, [r5, #0]
    487c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4880:	6026      	str	r6, [r4, #0]
    4882:	1c7f      	adds	r7, r7, #1
    4884:	e002      	b.n	488c <mpsl_temperature_get+0x4c>
    4886:	bf00      	nop
    4888:	f000 f890 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    488c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4890:	2800      	cmp	r0, #0
    4892:	d0f9      	beq.n	4888 <mpsl_temperature_get+0x48>
    4894:	b91f      	cbnz	r7, 489e <mpsl_temperature_get+0x5e>
    4896:	6828      	ldr	r0, [r5, #0]
    4898:	f020 0010 	bic.w	r0, r0, #16
    489c:	6028      	str	r0, [r5, #0]
    489e:	4808      	ldr	r0, [pc, #32]	; (48c0 <mpsl_temperature_get+0x80>)
    48a0:	6805      	ldr	r5, [r0, #0]
    48a2:	6066      	str	r6, [r4, #4]
    48a4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    48a8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    48ac:	200c      	movs	r0, #12
    48ae:	f008 fd73 	bl	d398 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    48b2:	4628      	mov	r0, r5
    48b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    48b8:	4000c000 	.word	0x4000c000
    48bc:	e000ed10 	.word	0xe000ed10
    48c0:	4000c508 	.word	0x4000c508

000048c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    48c4:	b510      	push	{r4, lr}
    48c6:	4602      	mov	r2, r0
    48c8:	2005      	movs	r0, #5
    48ca:	490c      	ldr	r1, [pc, #48]	; (48fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    48cc:	e004      	b.n	48d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    48ce:	bf00      	nop
    48d0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    48d4:	791b      	ldrb	r3, [r3, #4]
    48d6:	b133      	cbz	r3, 48e6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    48d8:	1e40      	subs	r0, r0, #1
    48da:	b2c0      	uxtb	r0, r0
    48dc:	d2f8      	bcs.n	48d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    48de:	214b      	movs	r1, #75	; 0x4b
    48e0:	2069      	movs	r0, #105	; 0x69
    48e2:	f7ff ff3d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48e6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    48ea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    48ee:	2200      	movs	r2, #0
    48f0:	714a      	strb	r2, [r1, #5]
    48f2:	718a      	strb	r2, [r1, #6]
    48f4:	2201      	movs	r2, #1
    48f6:	710a      	strb	r2, [r1, #4]
    48f8:	bd10      	pop	{r4, pc}
    48fa:	0000      	.short	0x0000
    48fc:	20000fd0 	.word	0x20000fd0

00004900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4900:	b510      	push	{r4, lr}
    4902:	2805      	cmp	r0, #5
    4904:	d301      	bcc.n	490a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4906:	215a      	movs	r1, #90	; 0x5a
    4908:	e006      	b.n	4918 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    490a:	490a      	ldr	r1, [pc, #40]	; (4934 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    490c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4910:	7901      	ldrb	r1, [r0, #4]
    4912:	2901      	cmp	r1, #1
    4914:	d003      	beq.n	491e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    4916:	215b      	movs	r1, #91	; 0x5b
    4918:	2069      	movs	r0, #105	; 0x69
    491a:	f7ff ff21 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    491e:	7941      	ldrb	r1, [r0, #5]
    4920:	7982      	ldrb	r2, [r0, #6]
    4922:	1c49      	adds	r1, r1, #1
    4924:	b2c9      	uxtb	r1, r1
    4926:	428a      	cmp	r2, r1
    4928:	d000      	beq.n	492c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    492a:	7141      	strb	r1, [r0, #5]
    492c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4930:	f7ff bf74 	b.w	481c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4934:	20000fd0 	.word	0x20000fd0

00004938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4938:	b570      	push	{r4, r5, r6, lr}
    493a:	2505      	movs	r5, #5
    493c:	4e0e      	ldr	r6, [pc, #56]	; (4978 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    493e:	4c0f      	ldr	r4, [pc, #60]	; (497c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4940:	e016      	b.n	4970 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4942:	7821      	ldrb	r1, [r4, #0]
    4944:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4948:	7902      	ldrb	r2, [r0, #4]
    494a:	2a01      	cmp	r2, #1
    494c:	d108      	bne.n	4960 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    494e:	7942      	ldrb	r2, [r0, #5]
    4950:	7983      	ldrb	r3, [r0, #6]
    4952:	429a      	cmp	r2, r3
    4954:	d004      	beq.n	4960 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4956:	7942      	ldrb	r2, [r0, #5]
    4958:	7182      	strb	r2, [r0, #6]
    495a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    495e:	4780      	blx	r0
    4960:	7820      	ldrb	r0, [r4, #0]
    4962:	1c40      	adds	r0, r0, #1
    4964:	b2c0      	uxtb	r0, r0
    4966:	7020      	strb	r0, [r4, #0]
    4968:	2805      	cmp	r0, #5
    496a:	d301      	bcc.n	4970 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    496c:	2000      	movs	r0, #0
    496e:	7020      	strb	r0, [r4, #0]
    4970:	1e6d      	subs	r5, r5, #1
    4972:	b2ed      	uxtb	r5, r5
    4974:	d2e5      	bcs.n	4942 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    4976:	bd70      	pop	{r4, r5, r6, pc}
    4978:	20000fd0 	.word	0x20000fd0
    497c:	2000027d 	.word	0x2000027d

00004980 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4980:	b500      	push	{lr}
    4982:	f008 fd38 	bl	d3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4986:	b940      	cbnz	r0, 499a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4988:	f008 fd3f 	bl	d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    498c:	b928      	cbnz	r0, 499a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    498e:	f008 fd53 	bl	d438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4992:	b910      	cbnz	r0, 499a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4994:	f008 fd64 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4998:	b108      	cbz	r0, 499e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    499a:	4802      	ldr	r0, [pc, #8]	; (49a4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    499c:	bd00      	pop	{pc}
    499e:	4802      	ldr	r0, [pc, #8]	; (49a8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    49a0:	bd00      	pop	{pc}
    49a2:	0000      	.short	0x0000
    49a4:	4000050c 	.word	0x4000050c
    49a8:	4001e700 	.word	0x4001e700

000049ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    49ac:	b510      	push	{r4, lr}
    49ae:	f008 fd57 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    49b2:	b330      	cbz	r0, 4a02 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    49b4:	f3ef 8010 	mrs	r0, PRIMASK
    49b8:	b1c8      	cbz	r0, 49ee <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    49ba:	2100      	movs	r1, #0
    49bc:	b672      	cpsid	i
    49be:	4812      	ldr	r0, [pc, #72]	; (4a08 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    49c0:	6802      	ldr	r2, [r0, #0]
    49c2:	6803      	ldr	r3, [r0, #0]
    49c4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    49c8:	f043 0310 	orr.w	r3, r3, #16
    49cc:	6003      	str	r3, [r0, #0]
    49ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    49d2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    49d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    49da:	431c      	orrs	r4, r3
    49dc:	d000      	beq.n	49e0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    49de:	bf40      	sev
    49e0:	bf20      	wfe
    49e2:	bf00      	nop
    49e4:	bf00      	nop
    49e6:	bf00      	nop
    49e8:	bf00      	nop
    49ea:	b112      	cbz	r2, 49f2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    49ec:	e005      	b.n	49fa <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    49ee:	2101      	movs	r1, #1
    49f0:	e7e4      	b.n	49bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    49f2:	6802      	ldr	r2, [r0, #0]
    49f4:	f022 0210 	bic.w	r2, r2, #16
    49f8:	6002      	str	r2, [r0, #0]
    49fa:	2900      	cmp	r1, #0
    49fc:	d000      	beq.n	4a00 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    49fe:	b662      	cpsie	i
    4a00:	bd10      	pop	{r4, pc}
    4a02:	bf20      	wfe
    4a04:	bd10      	pop	{r4, pc}
    4a06:	0000      	.short	0x0000
    4a08:	e000ed10 	.word	0xe000ed10

00004a0c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4a0c:	0000d6d1 0000d6ed 0000d6db 0000d6e7     ................
    4a1c:	0000d6d5 0000d6cf 0000d6cd 0000d6f3     ................
    4a2c:	0000d6e1 0000d6c7 0000d6bf 0000d6c3     ................
    4a3c:	0000d6b9                                ....

00004a40 <mpsl_fem_disable>:
    4a40:	4801      	ldr	r0, [pc, #4]	; (4a48 <mpsl_fem_disable+0x8>)
    4a42:	6800      	ldr	r0, [r0, #0]
    4a44:	6800      	ldr	r0, [r0, #0]
    4a46:	4700      	bx	r0
    4a48:	20000054 	.word	0x20000054

00004a4c <mpsl_fem_lna_configuration_clear>:
    4a4c:	4801      	ldr	r0, [pc, #4]	; (4a54 <mpsl_fem_lna_configuration_clear+0x8>)
    4a4e:	6800      	ldr	r0, [r0, #0]
    4a50:	6900      	ldr	r0, [r0, #16]
    4a52:	4700      	bx	r0
    4a54:	20000054 	.word	0x20000054

00004a58 <mpsl_fem_lna_configuration_set>:
    4a58:	4a01      	ldr	r2, [pc, #4]	; (4a60 <mpsl_fem_lna_configuration_set+0x8>)
    4a5a:	6812      	ldr	r2, [r2, #0]
    4a5c:	6892      	ldr	r2, [r2, #8]
    4a5e:	4710      	bx	r2
    4a60:	20000054 	.word	0x20000054

00004a64 <mpsl_fem_pa_configuration_clear>:
    4a64:	4801      	ldr	r0, [pc, #4]	; (4a6c <mpsl_fem_pa_configuration_clear+0x8>)
    4a66:	6800      	ldr	r0, [r0, #0]
    4a68:	68c0      	ldr	r0, [r0, #12]
    4a6a:	4700      	bx	r0
    4a6c:	20000054 	.word	0x20000054

00004a70 <mpsl_fem_pa_configuration_set>:
    4a70:	4a01      	ldr	r2, [pc, #4]	; (4a78 <mpsl_fem_pa_configuration_set+0x8>)
    4a72:	6812      	ldr	r2, [r2, #0]
    4a74:	6852      	ldr	r2, [r2, #4]
    4a76:	4710      	bx	r2
    4a78:	20000054 	.word	0x20000054

00004a7c <mpsl_fem_pa_is_configured>:
    4a7c:	4901      	ldr	r1, [pc, #4]	; (4a84 <mpsl_fem_pa_is_configured+0x8>)
    4a7e:	6809      	ldr	r1, [r1, #0]
    4a80:	6a09      	ldr	r1, [r1, #32]
    4a82:	4708      	bx	r1
    4a84:	20000054 	.word	0x20000054

00004a88 <mpsl_fem_device_config_254_apply_get>:
    4a88:	4801      	ldr	r0, [pc, #4]	; (4a90 <mpsl_fem_device_config_254_apply_get+0x8>)
    4a8a:	7800      	ldrb	r0, [r0, #0]
    4a8c:	4770      	bx	lr
    4a8e:	0000      	.short	0x0000
    4a90:	2000027e 	.word	0x2000027e
    4a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4a96:	4c17      	ldr	r4, [pc, #92]	; (4af4 <mpsl_fem_device_config_254_apply_get+0x6c>)
    4a98:	7a20      	ldrb	r0, [r4, #8]
    4a9a:	2802      	cmp	r0, #2
    4a9c:	d200      	bcs.n	4aa0 <mpsl_fem_device_config_254_apply_get+0x18>
    4a9e:	2002      	movs	r0, #2
    4aa0:	f88d 0001 	strb.w	r0, [sp, #1]
    4aa4:	79e0      	ldrb	r0, [r4, #7]
    4aa6:	2803      	cmp	r0, #3
    4aa8:	d200      	bcs.n	4aac <mpsl_fem_device_config_254_apply_get+0x24>
    4aaa:	2003      	movs	r0, #3
    4aac:	f88d 0000 	strb.w	r0, [sp]
    4ab0:	79a0      	ldrb	r0, [r4, #6]
    4ab2:	f8ad 0004 	strh.w	r0, [sp, #4]
    4ab6:	7960      	ldrb	r0, [r4, #5]
    4ab8:	f8ad 0002 	strh.w	r0, [sp, #2]
    4abc:	4668      	mov	r0, sp
    4abe:	f006 ffd5 	bl	ba6c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4ac2:	b108      	cbz	r0, 4ac8 <mpsl_fem_device_config_254_apply_get+0x40>
    4ac4:	2180      	movs	r1, #128	; 0x80
    4ac6:	e010      	b.n	4aea <mpsl_fem_device_config_254_apply_get+0x62>
    4ac8:	68e0      	ldr	r0, [r4, #12]
    4aca:	9002      	str	r0, [sp, #8]
    4acc:	a802      	add	r0, sp, #8
    4ace:	f006 ffe3 	bl	ba98 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4ad2:	b108      	cbz	r0, 4ad8 <mpsl_fem_device_config_254_apply_get+0x50>
    4ad4:	2184      	movs	r1, #132	; 0x84
    4ad6:	e008      	b.n	4aea <mpsl_fem_device_config_254_apply_get+0x62>
    4ad8:	4807      	ldr	r0, [pc, #28]	; (4af8 <mpsl_fem_device_config_254_apply_get+0x70>)
    4ada:	6800      	ldr	r0, [r0, #0]
    4adc:	9003      	str	r0, [sp, #12]
    4ade:	a803      	add	r0, sp, #12
    4ae0:	f00b f9ea 	bl	feb8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4ae4:	2800      	cmp	r0, #0
    4ae6:	d003      	beq.n	4af0 <mpsl_fem_device_config_254_apply_get+0x68>
    4ae8:	2188      	movs	r1, #136	; 0x88
    4aea:	2003      	movs	r0, #3
    4aec:	f000 f914 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4af0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4af2:	0000      	.short	0x0000
    4af4:	20000ff8 	.word	0x20000ff8
    4af8:	00004e04 	.word	0x00004e04
    4afc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4afe:	4604      	mov	r4, r0
    4b00:	460e      	mov	r6, r1
    4b02:	f100 0003 	add.w	r0, r0, #3
    4b06:	f020 0003 	bic.w	r0, r0, #3
    4b0a:	f04f 0100 	mov.w	r1, #0
    4b0e:	e9cd 0100 	strd	r0, r1, [sp]
    4b12:	7831      	ldrb	r1, [r6, #0]
    4b14:	0015      	movs	r5, r2
    4b16:	f88d 1005 	strb.w	r1, [sp, #5]
    4b1a:	d000      	beq.n	4b1e <mpsl_fem_device_config_254_apply_get+0x96>
    4b1c:	2000      	movs	r0, #0
    4b1e:	a901      	add	r1, sp, #4
    4b20:	f000 faea 	bl	50f8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    4b24:	9900      	ldr	r1, [sp, #0]
    4b26:	4408      	add	r0, r1
    4b28:	490c      	ldr	r1, [pc, #48]	; (4b5c <mpsl_fem_device_config_254_apply_get+0xd4>)
    4b2a:	9000      	str	r0, [sp, #0]
    4b2c:	78c9      	ldrb	r1, [r1, #3]
    4b2e:	b149      	cbz	r1, 4b44 <mpsl_fem_device_config_254_apply_get+0xbc>
    4b30:	7c31      	ldrb	r1, [r6, #16]
    4b32:	b139      	cbz	r1, 4b44 <mpsl_fem_device_config_254_apply_get+0xbc>
    4b34:	2225      	movs	r2, #37	; 0x25
    4b36:	b105      	cbz	r5, 4b3a <mpsl_fem_device_config_254_apply_get+0xb2>
    4b38:	2000      	movs	r0, #0
    4b3a:	f000 fd25 	bl	5588 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4b3e:	9900      	ldr	r1, [sp, #0]
    4b40:	4408      	add	r0, r1
    4b42:	9000      	str	r0, [sp, #0]
    4b44:	462a      	mov	r2, r5
    4b46:	4631      	mov	r1, r6
    4b48:	4668      	mov	r0, sp
    4b4a:	f008 fdd4 	bl	d6f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4b4e:	9800      	ldr	r0, [sp, #0]
    4b50:	1dc0      	adds	r0, r0, #7
    4b52:	f020 0007 	bic.w	r0, r0, #7
    4b56:	9000      	str	r0, [sp, #0]
    4b58:	1b00      	subs	r0, r0, r4
    4b5a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4b5c:	20000058 	.word	0x20000058

00004b60 <sdc_build_revision_get>:
    4b60:	b510      	push	{r4, lr}
    4b62:	b128      	cbz	r0, 4b70 <sdc_build_revision_get+0x10>
    4b64:	2214      	movs	r2, #20
    4b66:	4904      	ldr	r1, [pc, #16]	; (4b78 <sdc_build_revision_get+0x18>)
    4b68:	f008 fccc 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4b6c:	2000      	movs	r0, #0
    4b6e:	bd10      	pop	{r4, pc}
    4b70:	f06f 0015 	mvn.w	r0, #21
    4b74:	bd10      	pop	{r4, pc}
    4b76:	0000      	.short	0x0000
    4b78:	00004e20 	.word	0x00004e20

00004b7c <sdc_cfg_set>:
    4b7c:	b570      	push	{r4, r5, r6, lr}
    4b7e:	0003      	movs	r3, r0
    4b80:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    4b84:	d103      	bne.n	4b8e <sdc_cfg_set+0x12>
    4b86:	4c28      	ldr	r4, [pc, #160]	; (4c28 <sdc_cfg_set+0xac>)
    4b88:	7863      	ldrb	r3, [r4, #1]
    4b8a:	b10b      	cbz	r3, 4b90 <sdc_cfg_set+0x14>
    4b8c:	1180      	asrs	r0, r0, #6
    4b8e:	bd70      	pop	{r4, r5, r6, pc}
    4b90:	b319      	cbz	r1, 4bda <sdc_cfg_set+0x5e>
    4b92:	f06f 0515 	mvn.w	r5, #21
    4b96:	b38a      	cbz	r2, 4bfc <sdc_cfg_set+0x80>
    4b98:	4b24      	ldr	r3, [pc, #144]	; (4c2c <sdc_cfg_set+0xb0>)
    4b9a:	290b      	cmp	r1, #11
    4b9c:	d23e      	bcs.n	4c1c <sdc_cfg_set+0xa0>
    4b9e:	e8df f001 	tbb	[pc, r1]
    4ba2:	063d      	.short	0x063d
    4ba4:	13100c09 	.word	0x13100c09
    4ba8:	2818251d 	.word	0x2818251d
    4bac:	002e      	.short	0x002e
    4bae:	7810      	ldrb	r0, [r2, #0]
    4bb0:	7018      	strb	r0, [r3, #0]
    4bb2:	e028      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bb4:	7810      	ldrb	r0, [r2, #0]
    4bb6:	7058      	strb	r0, [r3, #1]
    4bb8:	e025      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bba:	6810      	ldr	r0, [r2, #0]
    4bbc:	f8c3 0005 	str.w	r0, [r3, #5]
    4bc0:	e021      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bc2:	6810      	ldr	r0, [r2, #0]
    4bc4:	60d8      	str	r0, [r3, #12]
    4bc6:	e01e      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bc8:	7811      	ldrb	r1, [r2, #0]
    4bca:	2900      	cmp	r1, #0
    4bcc:	d1df      	bne.n	4b8e <sdc_cfg_set+0x12>
    4bce:	7099      	strb	r1, [r3, #2]
    4bd0:	e019      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bd2:	7811      	ldrb	r1, [r2, #0]
    4bd4:	2900      	cmp	r1, #0
    4bd6:	d1da      	bne.n	4b8e <sdc_cfg_set+0x12>
    4bd8:	70d9      	strb	r1, [r3, #3]
    4bda:	e014      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bdc:	78e0      	ldrb	r0, [r4, #3]
    4bde:	b110      	cbz	r0, 4be6 <sdc_cfg_set+0x6a>
    4be0:	7810      	ldrb	r0, [r2, #0]
    4be2:	2802      	cmp	r0, #2
    4be4:	d31a      	bcc.n	4c1c <sdc_cfg_set+0xa0>
    4be6:	7810      	ldrb	r0, [r2, #0]
    4be8:	7418      	strb	r0, [r3, #16]
    4bea:	e00c      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bec:	8810      	ldrh	r0, [r2, #0]
    4bee:	8258      	strh	r0, [r3, #18]
    4bf0:	e009      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bf2:	7811      	ldrb	r1, [r2, #0]
    4bf4:	2900      	cmp	r1, #0
    4bf6:	d1ca      	bne.n	4b8e <sdc_cfg_set+0x12>
    4bf8:	7119      	strb	r1, [r3, #4]
    4bfa:	e004      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bfc:	e00e      	b.n	4c1c <sdc_cfg_set+0xa0>
    4bfe:	7810      	ldrb	r0, [r2, #0]
    4c00:	2802      	cmp	r0, #2
    4c02:	d30b      	bcc.n	4c1c <sdc_cfg_set+0xa0>
    4c04:	7518      	strb	r0, [r3, #20]
    4c06:	2201      	movs	r2, #1
    4c08:	4908      	ldr	r1, [pc, #32]	; (4c2c <sdc_cfg_set+0xb0>)
    4c0a:	2000      	movs	r0, #0
    4c0c:	f7ff ff76 	bl	4afc <mpsl_fem_device_config_254_apply_get+0x74>
    4c10:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4c14:	db04      	blt.n	4c20 <sdc_cfg_set+0xa4>
    4c16:	f06f 000b 	mvn.w	r0, #11
    4c1a:	bd70      	pop	{r4, r5, r6, pc}
    4c1c:	4628      	mov	r0, r5
    4c1e:	bd70      	pop	{r4, r5, r6, pc}
    4c20:	2101      	movs	r1, #1
    4c22:	70a1      	strb	r1, [r4, #2]
    4c24:	bd70      	pop	{r4, r5, r6, pc}
    4c26:	0000      	.short	0x0000
    4c28:	20000058 	.word	0x20000058
    4c2c:	20000ff8 	.word	0x20000ff8

00004c30 <sdc_enable>:
    4c30:	b570      	push	{r4, r5, r6, lr}
    4c32:	460c      	mov	r4, r1
    4c34:	0005      	movs	r5, r0
    4c36:	d019      	beq.n	4c6c <sdc_enable+0x3c>
    4c38:	b1c4      	cbz	r4, 4c6c <sdc_enable+0x3c>
    4c3a:	f000 f925 	bl	4e88 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4c3e:	b1c0      	cbz	r0, 4c72 <sdc_enable+0x42>
    4c40:	4628      	mov	r0, r5
    4c42:	f7ff fe3f 	bl	48c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4c46:	4d0c      	ldr	r5, [pc, #48]	; (4c78 <sdc_enable+0x48>)
    4c48:	2200      	movs	r2, #0
    4c4a:	490c      	ldr	r1, [pc, #48]	; (4c7c <sdc_enable+0x4c>)
    4c4c:	7028      	strb	r0, [r5, #0]
    4c4e:	4620      	mov	r0, r4
    4c50:	f7ff ff54 	bl	4afc <mpsl_fem_device_config_254_apply_get+0x74>
    4c54:	f00b fd31 	bl	106ba <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4c58:	2100      	movs	r1, #0
    4c5a:	7828      	ldrb	r0, [r5, #0]
    4c5c:	f007 f91a 	bl	be94 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4c60:	f7ff ff18 	bl	4a94 <mpsl_fem_device_config_254_apply_get+0xc>
    4c64:	2001      	movs	r0, #1
    4c66:	7068      	strb	r0, [r5, #1]
    4c68:	2000      	movs	r0, #0
    4c6a:	bd70      	pop	{r4, r5, r6, pc}
    4c6c:	f06f 0015 	mvn.w	r0, #21
    4c70:	bd70      	pop	{r4, r5, r6, pc}
    4c72:	f04f 30ff 	mov.w	r0, #4294967295
    4c76:	bd70      	pop	{r4, r5, r6, pc}
    4c78:	20000058 	.word	0x20000058
    4c7c:	20000ff8 	.word	0x20000ff8

00004c80 <sdc_init>:
    4c80:	b530      	push	{r4, r5, lr}
    4c82:	b087      	sub	sp, #28
    4c84:	0005      	movs	r5, r0
    4c86:	d00c      	beq.n	4ca2 <sdc_init+0x22>
    4c88:	f7ff fdc2 	bl	4810 <mpsl_is_initialized>
    4c8c:	f04f 34ff 	mov.w	r4, #4294967295
    4c90:	b120      	cbz	r0, 4c9c <sdc_init+0x1c>
    4c92:	f7ff fc9f 	bl	45d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4c96:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4c9a:	d905      	bls.n	4ca8 <sdc_init+0x28>
    4c9c:	4620      	mov	r0, r4
    4c9e:	b007      	add	sp, #28
    4ca0:	bd30      	pop	{r4, r5, pc}
    4ca2:	f06f 0015 	mvn.w	r0, #21
    4ca6:	e7fa      	b.n	4c9e <sdc_init+0x1e>
    4ca8:	4c15      	ldr	r4, [pc, #84]	; (4d00 <sdc_init+0x80>)
    4caa:	4816      	ldr	r0, [pc, #88]	; (4d04 <sdc_init+0x84>)
    4cac:	6065      	str	r5, [r4, #4]
    4cae:	f000 f9e5 	bl	507c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4cb2:	2000      	movs	r0, #0
    4cb4:	7060      	strb	r0, [r4, #1]
    4cb6:	70a0      	strb	r0, [r4, #2]
    4cb8:	70e0      	strb	r0, [r4, #3]
    4cba:	4601      	mov	r1, r0
    4cbc:	2218      	movs	r2, #24
    4cbe:	4668      	mov	r0, sp
    4cc0:	f008 fc9a 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4cc4:	2218      	movs	r2, #24
    4cc6:	4910      	ldr	r1, [pc, #64]	; (4d08 <sdc_init+0x88>)
    4cc8:	4668      	mov	r0, sp
    4cca:	f008 fc1b 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4cce:	2218      	movs	r2, #24
    4cd0:	4669      	mov	r1, sp
    4cd2:	480e      	ldr	r0, [pc, #56]	; (4d0c <sdc_init+0x8c>)
    4cd4:	f008 fc16 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4cd8:	f3ef 8410 	mrs	r4, PRIMASK
    4cdc:	b672      	cpsid	i
    4cde:	480c      	ldr	r0, [pc, #48]	; (4d10 <sdc_init+0x90>)
    4ce0:	f06f 010c 	mvn.w	r1, #12
    4ce4:	f000 fcf2 	bl	56cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4ce8:	480a      	ldr	r0, [pc, #40]	; (4d14 <sdc_init+0x94>)
    4cea:	f000 fdb3 	bl	5854 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4cee:	b118      	cbz	r0, 4cf8 <sdc_init+0x78>
    4cf0:	2196      	movs	r1, #150	; 0x96
    4cf2:	2003      	movs	r0, #3
    4cf4:	f000 f810 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cf8:	b904      	cbnz	r4, 4cfc <sdc_init+0x7c>
    4cfa:	b662      	cpsie	i
    4cfc:	2000      	movs	r0, #0
    4cfe:	e7ce      	b.n	4c9e <sdc_init+0x1e>
    4d00:	20000058 	.word	0x20000058
    4d04:	00004a95 	.word	0x00004a95
    4d08:	00004e08 	.word	0x00004e08
    4d0c:	20000ff8 	.word	0x20000ff8
    4d10:	4000c000 	.word	0x4000c000
    4d14:	00004eb5 	.word	0x00004eb5

00004d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4d18:	b50e      	push	{r1, r2, r3, lr}
    4d1a:	b672      	cpsid	i
    4d1c:	4a15      	ldr	r2, [pc, #84]	; (4d74 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4d1e:	6855      	ldr	r5, [r2, #4]
    4d20:	b1d5      	cbz	r5, 4d58 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4d22:	2200      	movs	r2, #0
    4d24:	4603      	mov	r3, r0
    4d26:	466e      	mov	r6, sp
    4d28:	240a      	movs	r4, #10
    4d2a:	e003      	b.n	4d34 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4d2c:	fbb0 f0f4 	udiv	r0, r0, r4
    4d30:	1c52      	adds	r2, r2, #1
    4d32:	b2d2      	uxtb	r2, r2
    4d34:	2800      	cmp	r0, #0
    4d36:	d1f9      	bne.n	4d2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4d38:	54b0      	strb	r0, [r6, r2]
    4d3a:	e009      	b.n	4d50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4d3c:	fbb3 f0f4 	udiv	r0, r3, r4
    4d40:	fb04 3010 	mls	r0, r4, r0, r3
    4d44:	fbb3 f3f4 	udiv	r3, r3, r4
    4d48:	1e52      	subs	r2, r2, #1
    4d4a:	b2d2      	uxtb	r2, r2
    4d4c:	3030      	adds	r0, #48	; 0x30
    4d4e:	54b0      	strb	r0, [r6, r2]
    4d50:	2a00      	cmp	r2, #0
    4d52:	d1f3      	bne.n	4d3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4d54:	4630      	mov	r0, r6
    4d56:	47a8      	blx	r5
    4d58:	f3bf 8f4f 	dsb	sy
    4d5c:	4806      	ldr	r0, [pc, #24]	; (4d78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4d5e:	6801      	ldr	r1, [r0, #0]
    4d60:	4a06      	ldr	r2, [pc, #24]	; (4d7c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4d62:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4d66:	4311      	orrs	r1, r2
    4d68:	6001      	str	r1, [r0, #0]
    4d6a:	f3bf 8f4f 	dsb	sy
    4d6e:	bf00      	nop
    4d70:	e7fd      	b.n	4d6e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    4d72:	0000      	.short	0x0000
    4d74:	20000058 	.word	0x20000058
    4d78:	e000ed0c 	.word	0xe000ed0c
    4d7c:	05fa0004 	.word	0x05fa0004

00004d80 <sdc_support_dle>:
    4d80:	4806      	ldr	r0, [pc, #24]	; (4d9c <sdc_support_dle+0x1c>)
    4d82:	b510      	push	{r4, lr}
    4d84:	7881      	ldrb	r1, [r0, #2]
    4d86:	7840      	ldrb	r0, [r0, #1]
    4d88:	4301      	orrs	r1, r0
    4d8a:	d002      	beq.n	4d92 <sdc_support_dle+0x12>
    4d8c:	f04f 30ff 	mov.w	r0, #4294967295
    4d90:	bd10      	pop	{r4, pc}
    4d92:	f006 fed7 	bl	bb44 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    4d96:	2000      	movs	r0, #0
    4d98:	bd10      	pop	{r4, pc}
    4d9a:	0000      	.short	0x0000
    4d9c:	20000058 	.word	0x20000058

00004da0 <sdc_support_le_2m_phy>:
    4da0:	4806      	ldr	r0, [pc, #24]	; (4dbc <sdc_support_le_2m_phy+0x1c>)
    4da2:	b510      	push	{r4, lr}
    4da4:	7881      	ldrb	r1, [r0, #2]
    4da6:	7840      	ldrb	r0, [r0, #1]
    4da8:	4301      	orrs	r1, r0
    4daa:	d002      	beq.n	4db2 <sdc_support_le_2m_phy+0x12>
    4dac:	f04f 30ff 	mov.w	r0, #4294967295
    4db0:	bd10      	pop	{r4, pc}
    4db2:	f00b f92e 	bl	10012 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4db6:	2000      	movs	r0, #0
    4db8:	bd10      	pop	{r4, pc}
    4dba:	0000      	.short	0x0000
    4dbc:	20000058 	.word	0x20000058

00004dc0 <sdc_support_master>:
    4dc0:	4806      	ldr	r0, [pc, #24]	; (4ddc <sdc_support_master+0x1c>)
    4dc2:	b510      	push	{r4, lr}
    4dc4:	7881      	ldrb	r1, [r0, #2]
    4dc6:	7840      	ldrb	r0, [r0, #1]
    4dc8:	4301      	orrs	r1, r0
    4dca:	d002      	beq.n	4dd2 <sdc_support_master+0x12>
    4dcc:	f04f 30ff 	mov.w	r0, #4294967295
    4dd0:	bd10      	pop	{r4, pc}
    4dd2:	f007 f893 	bl	befc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
    4dd6:	2000      	movs	r0, #0
    4dd8:	bd10      	pop	{r4, pc}
    4dda:	0000      	.short	0x0000
    4ddc:	20000058 	.word	0x20000058

00004de0 <sdc_support_scan>:
    4de0:	4807      	ldr	r0, [pc, #28]	; (4e00 <sdc_support_scan+0x20>)
    4de2:	b510      	push	{r4, lr}
    4de4:	7881      	ldrb	r1, [r0, #2]
    4de6:	7842      	ldrb	r2, [r0, #1]
    4de8:	4311      	orrs	r1, r2
    4dea:	d002      	beq.n	4df2 <sdc_support_scan+0x12>
    4dec:	f04f 30ff 	mov.w	r0, #4294967295
    4df0:	bd10      	pop	{r4, pc}
    4df2:	2101      	movs	r1, #1
    4df4:	70c1      	strb	r1, [r0, #3]
    4df6:	f007 f86f 	bl	bed8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    4dfa:	2000      	movs	r0, #0
    4dfc:	bd10      	pop	{r4, pc}
    4dfe:	0000      	.short	0x0000
    4e00:	20000058 	.word	0x20000058
    4e04:	00000001 	.word	0x00000001
    4e08:	00010101 	.word	0x00010101
    4e0c:	031b1b00 	.word	0x031b1b00
    4e10:	00000002 	.word	0x00000002
    4e14:	00001d4c 	.word	0x00001d4c
    4e18:	001f0003 	.word	0x001f0003
    4e1c:	00000000 	.word	0x00000000
    4e20:	d64ec0df 	.word	0xd64ec0df
    4e24:	09667c1f 	.word	0x09667c1f
    4e28:	a02bf50a 	.word	0xa02bf50a
    4e2c:	6443f298 	.word	0x6443f298
    4e30:	2aa6c562 	.word	0x2aa6c562

00004e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4e34:	4a05      	ldr	r2, [pc, #20]	; (4e4c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4e36:	b510      	push	{r4, lr}
    4e38:	6852      	ldr	r2, [r2, #4]
    4e3a:	b112      	cbz	r2, 4e42 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e40:	4710      	bx	r2
    4e42:	2183      	movs	r1, #131	; 0x83
    4e44:	2004      	movs	r0, #4
    4e46:	f7ff ff67 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e4a:	0000      	.short	0x0000
    4e4c:	20001010 	.word	0x20001010

00004e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    4e50:	4a05      	ldr	r2, [pc, #20]	; (4e68 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    4e52:	b510      	push	{r4, lr}
    4e54:	6812      	ldr	r2, [r2, #0]
    4e56:	b112      	cbz	r2, 4e5e <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    4e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e5c:	4710      	bx	r2
    4e5e:	217d      	movs	r1, #125	; 0x7d
    4e60:	2004      	movs	r0, #4
    4e62:	f7ff ff59 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e66:	0000      	.short	0x0000
    4e68:	20001010 	.word	0x20001010

00004e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4e6c:	4a05      	ldr	r2, [pc, #20]	; (4e84 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4e6e:	b510      	push	{r4, lr}
    4e70:	6892      	ldr	r2, [r2, #8]
    4e72:	b112      	cbz	r2, 4e7a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e78:	4710      	bx	r2
    4e7a:	2189      	movs	r1, #137	; 0x89
    4e7c:	2004      	movs	r0, #4
    4e7e:	f7ff ff4b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e82:	0000      	.short	0x0000
    4e84:	20001010 	.word	0x20001010

00004e88 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4e88:	4805      	ldr	r0, [pc, #20]	; (4ea0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4e8a:	6801      	ldr	r1, [r0, #0]
    4e8c:	b129      	cbz	r1, 4e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4e8e:	6841      	ldr	r1, [r0, #4]
    4e90:	b119      	cbz	r1, 4e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4e92:	6880      	ldr	r0, [r0, #8]
    4e94:	b108      	cbz	r0, 4e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4e96:	2001      	movs	r0, #1
    4e98:	4770      	bx	lr
    4e9a:	2000      	movs	r0, #0
    4e9c:	4770      	bx	lr
    4e9e:	0000      	.short	0x0000
    4ea0:	20001010 	.word	0x20001010

00004ea4 <sdc_rand_source_register>:
    4ea4:	4902      	ldr	r1, [pc, #8]	; (4eb0 <sdc_rand_source_register+0xc>)
    4ea6:	c80d      	ldmia	r0, {r0, r2, r3}
    4ea8:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4eac:	2000      	movs	r0, #0
    4eae:	4770      	bx	lr
    4eb0:	20001010 	.word	0x20001010

00004eb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4eb6:	4c12      	ldr	r4, [pc, #72]	; (4f00 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4eb8:	2600      	movs	r6, #0
    4eba:	6825      	ldr	r5, [r4, #0]
    4ebc:	e011      	b.n	4ee2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4ebe:	9800      	ldr	r0, [sp, #0]
    4ec0:	2802      	cmp	r0, #2
    4ec2:	d002      	beq.n	4eca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4ec4:	2803      	cmp	r0, #3
    4ec6:	d10c      	bne.n	4ee2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4ec8:	e006      	b.n	4ed8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4eca:	6820      	ldr	r0, [r4, #0]
    4ecc:	b110      	cbz	r0, 4ed4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4ece:	2000      	movs	r0, #0
    4ed0:	6026      	str	r6, [r4, #0]
    4ed2:	e005      	b.n	4ee0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4ed4:	2128      	movs	r1, #40	; 0x28
    4ed6:	e00c      	b.n	4ef2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4ed8:	6820      	ldr	r0, [r4, #0]
    4eda:	b168      	cbz	r0, 4ef8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4edc:	2001      	movs	r0, #1
    4ede:	6026      	str	r6, [r4, #0]
    4ee0:	47a8      	blx	r5
    4ee2:	4668      	mov	r0, sp
    4ee4:	f000 fc88 	bl	57f8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4ee8:	2800      	cmp	r0, #0
    4eea:	d0e8      	beq.n	4ebe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4eec:	2805      	cmp	r0, #5
    4eee:	d005      	beq.n	4efc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4ef0:	2135      	movs	r1, #53	; 0x35
    4ef2:	2004      	movs	r0, #4
    4ef4:	f7ff ff10 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ef8:	212d      	movs	r1, #45	; 0x2d
    4efa:	e7fa      	b.n	4ef2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4efe:	0000      	.short	0x0000
    4f00:	20000060 	.word	0x20000060
    4f04:	b570      	push	{r4, r5, r6, lr}
    4f06:	4c14      	ldr	r4, [pc, #80]	; (4f58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    4f08:	4605      	mov	r5, r0
    4f0a:	7820      	ldrb	r0, [r4, #0]
    4f0c:	b140      	cbz	r0, 4f20 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4f0e:	78a2      	ldrb	r2, [r4, #2]
    4f10:	1c61      	adds	r1, r4, #1
    4f12:	4628      	mov	r0, r5
    4f14:	1c92      	adds	r2, r2, #2
    4f16:	f008 faf5 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4f1a:	2000      	movs	r0, #0
    4f1c:	7020      	strb	r0, [r4, #0]
    4f1e:	e013      	b.n	4f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    4f20:	480e      	ldr	r0, [pc, #56]	; (4f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4f22:	f006 feb1 	bl	bc88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4f26:	2800      	cmp	r0, #0
    4f28:	d00f      	beq.n	4f4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    4f2a:	480c      	ldr	r0, [pc, #48]	; (4f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4f2c:	7800      	ldrb	r0, [r0, #0]
    4f2e:	2814      	cmp	r0, #20
    4f30:	d104      	bne.n	4f3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4f32:	210a      	movs	r1, #10
    4f34:	203e      	movs	r0, #62	; 0x3e
    4f36:	f008 fc36 	bl	d7a6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4f3a:	b138      	cbz	r0, 4f4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    4f3c:	4907      	ldr	r1, [pc, #28]	; (4f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4f3e:	4628      	mov	r0, r5
    4f40:	f008 fc8f 	bl	d862 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4f44:	2800      	cmp	r0, #0
    4f46:	d000      	beq.n	4f4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    4f48:	2001      	movs	r0, #1
    4f4a:	bd70      	pop	{r4, r5, r6, pc}
    4f4c:	4903      	ldr	r1, [pc, #12]	; (4f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4f4e:	4628      	mov	r0, r5
    4f50:	f008 fec4 	bl	dcdc <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4f54:	e7f8      	b.n	4f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    4f56:	0000      	.short	0x0000
    4f58:	20001124 	.word	0x20001124
    4f5c:	2000101c 	.word	0x2000101c
    4f60:	b570      	push	{r4, r5, r6, lr}
    4f62:	780a      	ldrb	r2, [r1, #0]
    4f64:	7082      	strb	r2, [r0, #2]
    4f66:	b33a      	cbz	r2, 4fb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    4f68:	2a01      	cmp	r2, #1
    4f6a:	d825      	bhi.n	4fb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    4f6c:	2313      	movs	r3, #19
    4f6e:	7003      	strb	r3, [r0, #0]
    4f70:	2300      	movs	r3, #0
    4f72:	e00a      	b.n	4f8a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    4f74:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4f78:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4f7c:	78a6      	ldrb	r6, [r4, #2]
    4f7e:	70ee      	strb	r6, [r5, #3]
    4f80:	8864      	ldrh	r4, [r4, #2]
    4f82:	0a24      	lsrs	r4, r4, #8
    4f84:	1c5b      	adds	r3, r3, #1
    4f86:	712c      	strb	r4, [r5, #4]
    4f88:	b2db      	uxtb	r3, r3
    4f8a:	4293      	cmp	r3, r2
    4f8c:	d3f2      	bcc.n	4f74 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    4f8e:	2300      	movs	r3, #0
    4f90:	e00b      	b.n	4faa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    4f92:	bf00      	nop
    4f94:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4f98:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4f9c:	792e      	ldrb	r6, [r5, #4]
    4f9e:	7166      	strb	r6, [r4, #5]
    4fa0:	88ad      	ldrh	r5, [r5, #4]
    4fa2:	0a2d      	lsrs	r5, r5, #8
    4fa4:	1c5b      	adds	r3, r3, #1
    4fa6:	71a5      	strb	r5, [r4, #6]
    4fa8:	b2db      	uxtb	r3, r3
    4faa:	4293      	cmp	r3, r2
    4fac:	d3f2      	bcc.n	4f94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    4fae:	2101      	movs	r1, #1
    4fb0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4fb4:	b2c0      	uxtb	r0, r0
    4fb6:	bd70      	pop	{r4, r5, r6, pc}
    4fb8:	2000      	movs	r0, #0
    4fba:	bd70      	pop	{r4, r5, r6, pc}

00004fbc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4fbc:	2101      	movs	r1, #1
    4fbe:	4a0c      	ldr	r2, [pc, #48]	; (4ff0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4fc0:	2840      	cmp	r0, #64	; 0x40
    4fc2:	d20c      	bcs.n	4fde <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4fc4:	2820      	cmp	r0, #32
    4fc6:	d803      	bhi.n	4fd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4fc8:	1e40      	subs	r0, r0, #1
    4fca:	4081      	lsls	r1, r0
    4fcc:	6810      	ldr	r0, [r2, #0]
    4fce:	e002      	b.n	4fd6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4fd0:	3821      	subs	r0, #33	; 0x21
    4fd2:	4081      	lsls	r1, r0
    4fd4:	6850      	ldr	r0, [r2, #4]
    4fd6:	4201      	tst	r1, r0
    4fd8:	d107      	bne.n	4fea <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4fda:	2000      	movs	r0, #0
    4fdc:	4770      	bx	lr
    4fde:	28ff      	cmp	r0, #255	; 0xff
    4fe0:	d003      	beq.n	4fea <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4fe2:	3840      	subs	r0, #64	; 0x40
    4fe4:	4081      	lsls	r1, r0
    4fe6:	6890      	ldr	r0, [r2, #8]
    4fe8:	e7f5      	b.n	4fd6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4fea:	2001      	movs	r0, #1
    4fec:	4770      	bx	lr
    4fee:	0000      	.short	0x0000
    4ff0:	20000064 	.word	0x20000064

00004ff4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4ff4:	2101      	movs	r1, #1
    4ff6:	1e40      	subs	r0, r0, #1
    4ff8:	4081      	lsls	r1, r0
    4ffa:	4804      	ldr	r0, [pc, #16]	; (500c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4ffc:	68c0      	ldr	r0, [r0, #12]
    4ffe:	4201      	tst	r1, r0
    5000:	d001      	beq.n	5006 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    5002:	2001      	movs	r0, #1
    5004:	4770      	bx	lr
    5006:	2000      	movs	r0, #0
    5008:	4770      	bx	lr
    500a:	0000      	.short	0x0000
    500c:	20000064 	.word	0x20000064

00005010 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    5010:	4901      	ldr	r1, [pc, #4]	; (5018 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    5012:	6800      	ldr	r0, [r0, #0]
    5014:	60c8      	str	r0, [r1, #12]
    5016:	4770      	bx	lr
    5018:	20000064 	.word	0x20000064

0000501c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    501c:	4904      	ldr	r1, [pc, #16]	; (5030 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    501e:	6802      	ldr	r2, [r0, #0]
    5020:	6840      	ldr	r0, [r0, #4]
    5022:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    5026:	600a      	str	r2, [r1, #0]
    5028:	4a02      	ldr	r2, [pc, #8]	; (5034 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    502a:	4310      	orrs	r0, r2
    502c:	6048      	str	r0, [r1, #4]
    502e:	4770      	bx	lr
    5030:	20000064 	.word	0x20000064
    5034:	024007f8 	.word	0x024007f8

00005038 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    5038:	4901      	ldr	r1, [pc, #4]	; (5040 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    503a:	6800      	ldr	r0, [r0, #0]
    503c:	6088      	str	r0, [r1, #8]
    503e:	4770      	bx	lr
    5040:	20000064 	.word	0x20000064

00005044 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    5044:	4805      	ldr	r0, [pc, #20]	; (505c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    5046:	f04f 31ff 	mov.w	r1, #4294967295
    504a:	6001      	str	r1, [r0, #0]
    504c:	0cc9      	lsrs	r1, r1, #19
    504e:	6041      	str	r1, [r0, #4]
    5050:	2100      	movs	r1, #0
    5052:	6081      	str	r1, [r0, #8]
    5054:	211f      	movs	r1, #31
    5056:	60c1      	str	r1, [r0, #12]
    5058:	4770      	bx	lr
    505a:	0000      	.short	0x0000
    505c:	20000064 	.word	0x20000064

00005060 <sdc_hci_cmd_cb_reset>:
    5060:	b510      	push	{r4, lr}
    5062:	f7ff ffef 	bl	5044 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    5066:	f00a ffad 	bl	ffc4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    506a:	4604      	mov	r4, r0
    506c:	4802      	ldr	r0, [pc, #8]	; (5078 <sdc_hci_cmd_cb_reset+0x18>)
    506e:	6800      	ldr	r0, [r0, #0]
    5070:	b100      	cbz	r0, 5074 <sdc_hci_cmd_cb_reset+0x14>
    5072:	4780      	blx	r0
    5074:	4620      	mov	r0, r4
    5076:	bd10      	pop	{r4, pc}
    5078:	20000074 	.word	0x20000074

0000507c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    507c:	4901      	ldr	r1, [pc, #4]	; (5084 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    507e:	6008      	str	r0, [r1, #0]
    5080:	4770      	bx	lr
    5082:	0000      	.short	0x0000
    5084:	20000074 	.word	0x20000074

00005088 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    5088:	2102      	movs	r1, #2
    508a:	8001      	strh	r1, [r0, #0]
    508c:	8041      	strh	r1, [r0, #2]
    508e:	2100      	movs	r1, #0
    5090:	7101      	strb	r1, [r0, #4]
    5092:	21df      	movs	r1, #223	; 0xdf
    5094:	7141      	strb	r1, [r0, #5]
    5096:	f644 61c0 	movw	r1, #20160	; 0x4ec0
    509a:	80c1      	strh	r1, [r0, #6]
    509c:	4901      	ldr	r1, [pc, #4]	; (50a4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    509e:	6081      	str	r1, [r0, #8]
    50a0:	2000      	movs	r0, #0
    50a2:	4770      	bx	lr
    50a4:	667c1fd6 	.word	0x667c1fd6

000050a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    50a8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    50aa:	4604      	mov	r4, r0
    50ac:	4669      	mov	r1, sp
    50ae:	f009 facf 	bl	e650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    50b2:	b170      	cbz	r0, 50d2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    50b4:	f240 215a 	movw	r1, #602	; 0x25a
    50b8:	e008      	b.n	50cc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    50ba:	bf00      	nop
    50bc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    50c0:	4621      	mov	r1, r4
    50c2:	f000 f8a7 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    50c6:	b120      	cbz	r0, 50d2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    50c8:	f240 215f 	movw	r1, #607	; 0x25f
    50cc:	2017      	movs	r0, #23
    50ce:	f7ff fe23 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50d2:	4668      	mov	r0, sp
    50d4:	f000 f850 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    50d8:	2800      	cmp	r0, #0
    50da:	d0ef      	beq.n	50bc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    50dc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000050e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    50e0:	b510      	push	{r4, lr}
    50e2:	b120      	cbz	r0, 50ee <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    50e4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    50e8:	2017      	movs	r0, #23
    50ea:	f7ff fe15 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50ee:	4801      	ldr	r0, [pc, #4]	; (50f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    50f0:	7800      	ldrb	r0, [r0, #0]
    50f2:	bd10      	pop	{r4, pc}
    50f4:	20001228 	.word	0x20001228

000050f8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    50f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50fa:	4605      	mov	r5, r0
    50fc:	7808      	ldrb	r0, [r1, #0]
    50fe:	784a      	ldrb	r2, [r1, #1]
    5100:	4290      	cmp	r0, r2
    5102:	d902      	bls.n	510a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    5104:	f240 1163 	movw	r1, #355	; 0x163
    5108:	e00a      	b.n	5120 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    510a:	9500      	str	r5, [sp, #0]
    510c:	b15d      	cbz	r5, 5126 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    510e:	2600      	movs	r6, #0
    5110:	1ce8      	adds	r0, r5, #3
    5112:	784c      	ldrb	r4, [r1, #1]
    5114:	f020 0003 	bic.w	r0, r0, #3
    5118:	42a8      	cmp	r0, r5
    511a:	d006      	beq.n	512a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    511c:	f240 1179 	movw	r1, #377	; 0x179
    5120:	2017      	movs	r0, #23
    5122:	f7ff fdf9 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5126:	2601      	movs	r6, #1
    5128:	e7f2      	b.n	5110 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    512a:	4f12      	ldr	r7, [pc, #72]	; (5174 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    512c:	4631      	mov	r1, r6
    512e:	4668      	mov	r0, sp
    5130:	703c      	strb	r4, [r7, #0]
    5132:	f000 f8e1 	bl	52f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
    5136:	2000      	movs	r0, #0
    5138:	4603      	mov	r3, r0
    513a:	9900      	ldr	r1, [sp, #0]
    513c:	1cc9      	adds	r1, r1, #3
    513e:	f021 0103 	bic.w	r1, r1, #3
    5142:	9100      	str	r1, [sp, #0]
    5144:	b966      	cbnz	r6, 5160 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    5146:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    514a:	6091      	str	r1, [r2, #8]
    514c:	2100      	movs	r1, #0
    514e:	e005      	b.n	515c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    5150:	f8d2 c008 	ldr.w	ip, [r2, #8]
    5154:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    5158:	1c49      	adds	r1, r1, #1
    515a:	b2c9      	uxtb	r1, r1
    515c:	42a1      	cmp	r1, r4
    515e:	d3f7      	bcc.n	5150 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    5160:	9900      	ldr	r1, [sp, #0]
    5162:	1c40      	adds	r0, r0, #1
    5164:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    5168:	9100      	str	r1, [sp, #0]
    516a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    516e:	d0e4      	beq.n	513a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    5170:	1b48      	subs	r0, r1, r5
    5172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5174:	20001228 	.word	0x20001228

00005178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    5178:	b570      	push	{r4, r5, r6, lr}
    517a:	4604      	mov	r4, r0
    517c:	f009 fabd 	bl	e6fa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    5180:	b108      	cbz	r0, 5186 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    5182:	2010      	movs	r0, #16
    5184:	bd70      	pop	{r4, r5, r6, pc}
    5186:	7825      	ldrb	r5, [r4, #0]
    5188:	f000 f8f2 	bl	5370 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    518c:	4602      	mov	r2, r0
    518e:	480c      	ldr	r0, [pc, #48]	; (51c0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    5190:	8861      	ldrh	r1, [r4, #2]
    5192:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5196:	e00e      	b.n	51b6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5198:	6883      	ldr	r3, [r0, #8]
    519a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    519e:	b143      	cbz	r3, 51b2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    51a0:	1c4a      	adds	r2, r1, #1
    51a2:	8062      	strh	r2, [r4, #2]
    51a4:	80a1      	strh	r1, [r4, #4]
    51a6:	6880      	ldr	r0, [r0, #8]
    51a8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    51ac:	60a0      	str	r0, [r4, #8]
    51ae:	2000      	movs	r0, #0
    51b0:	bd70      	pop	{r4, r5, r6, pc}
    51b2:	1c49      	adds	r1, r1, #1
    51b4:	b289      	uxth	r1, r1
    51b6:	4291      	cmp	r1, r2
    51b8:	d3ee      	bcc.n	5198 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    51ba:	8061      	strh	r1, [r4, #2]
    51bc:	2005      	movs	r0, #5
    51be:	bd70      	pop	{r4, r5, r6, pc}
    51c0:	20001228 	.word	0x20001228

000051c4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    51c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51c8:	b949      	cbnz	r1, 51de <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    51ca:	4c11      	ldr	r4, [pc, #68]	; (5210 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    51cc:	2700      	movs	r7, #0
    51ce:	463b      	mov	r3, r7
    51d0:	f64f 76ff 	movw	r6, #65535	; 0xffff
    51d4:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    51d8:	f814 c001 	ldrb.w	ip, [r4, r1]
    51dc:	e00d      	b.n	51fa <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    51de:	2000      	movs	r0, #0
    51e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51e4:	19dc      	adds	r4, r3, r7
    51e6:	f8d5 e008 	ldr.w	lr, [r5, #8]
    51ea:	b2a4      	uxth	r4, r4
    51ec:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    51f0:	f1be 0f00 	cmp.w	lr, #0
    51f4:	d004      	beq.n	5200 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    51f6:	1c5b      	adds	r3, r3, #1
    51f8:	b29b      	uxth	r3, r3
    51fa:	459c      	cmp	ip, r3
    51fc:	d8f2      	bhi.n	51e4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    51fe:	4634      	mov	r4, r6
    5200:	8004      	strh	r4, [r0, #0]
    5202:	4620      	mov	r0, r4
    5204:	42b4      	cmp	r4, r6
    5206:	d0ea      	beq.n	51de <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    5208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    520c:	f000 b82c 	b.w	5268 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    5210:	20001228 	.word	0x20001228

00005214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    5214:	b570      	push	{r4, r5, r6, lr}
    5216:	4606      	mov	r6, r0
    5218:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    521c:	f243 0502 	movw	r5, #12290	; 0x3002
    5220:	38ff      	subs	r0, #255	; 0xff
    5222:	d01a      	beq.n	525a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    5224:	b109      	cbz	r1, 522a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    5226:	2007      	movs	r0, #7
    5228:	bd70      	pop	{r4, r5, r6, pc}
    522a:	4630      	mov	r0, r6
    522c:	f000 f854 	bl	52d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    5230:	0004      	movs	r4, r0
    5232:	d012      	beq.n	525a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    5234:	480a      	ldr	r0, [pc, #40]	; (5260 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    5236:	4621      	mov	r1, r4
    5238:	6802      	ldr	r2, [r0, #0]
    523a:	4630      	mov	r0, r6
    523c:	4790      	blx	r2
    523e:	4d09      	ldr	r5, [pc, #36]	; (5264 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    5240:	2000      	movs	r0, #0
    5242:	68a9      	ldr	r1, [r5, #8]
    5244:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    5248:	f000 f888 	bl	535c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    524c:	4602      	mov	r2, r0
    524e:	4621      	mov	r1, r4
    5250:	6868      	ldr	r0, [r5, #4]
    5252:	f009 f9e7 	bl	e624 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5256:	2000      	movs	r0, #0
    5258:	bd70      	pop	{r4, r5, r6, pc}
    525a:	4628      	mov	r0, r5
    525c:	bd70      	pop	{r4, r5, r6, pc}
    525e:	0000      	.short	0x0000
    5260:	00005384 	.word	0x00005384
    5264:	20001228 	.word	0x20001228
    5268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    526c:	4690      	mov	r8, r2
    526e:	460e      	mov	r6, r1
    5270:	4607      	mov	r7, r0
    5272:	f009 f9fd 	bl	e670 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    5276:	b148      	cbz	r0, 528c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
    5278:	4815      	ldr	r0, [pc, #84]	; (52d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
    527a:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    527e:	68a8      	ldr	r0, [r5, #8]
    5280:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5284:	b128      	cbz	r0, 5292 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
    5286:	f44f 719d 	mov.w	r1, #314	; 0x13a
    528a:	e014      	b.n	52b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    528c:	f240 1139 	movw	r1, #313	; 0x139
    5290:	e011      	b.n	52b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    5292:	6868      	ldr	r0, [r5, #4]
    5294:	2800      	cmp	r0, #0
    5296:	d018      	beq.n	52ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
    5298:	4630      	mov	r0, r6
    529a:	f000 f85f 	bl	535c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    529e:	4601      	mov	r1, r0
    52a0:	6868      	ldr	r0, [r5, #4]
    52a2:	f009 f971 	bl	e588 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    52a6:	0004      	movs	r4, r0
    52a8:	d00e      	beq.n	52c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    52aa:	68a8      	ldr	r0, [r5, #8]
    52ac:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    52b0:	b126      	cbz	r6, 52bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
    52b2:	f240 1145 	movw	r1, #325	; 0x145
    52b6:	2017      	movs	r0, #23
    52b8:	f7ff fd2e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52bc:	4805      	ldr	r0, [pc, #20]	; (52d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
    52be:	4642      	mov	r2, r8
    52c0:	4621      	mov	r1, r4
    52c2:	6803      	ldr	r3, [r0, #0]
    52c4:	4638      	mov	r0, r7
    52c6:	4798      	blx	r3
    52c8:	4620      	mov	r0, r4
    52ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52ce:	0000      	.short	0x0000
    52d0:	20001228 	.word	0x20001228
    52d4:	00005380 	.word	0x00005380
    52d8:	b570      	push	{r4, r5, r6, lr}
    52da:	460c      	mov	r4, r1
    52dc:	4605      	mov	r5, r0
    52de:	f009 f9c7 	bl	e670 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    52e2:	2800      	cmp	r0, #0
    52e4:	d005      	beq.n	52f2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
    52e6:	4803      	ldr	r0, [pc, #12]	; (52f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
    52e8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    52ec:	6880      	ldr	r0, [r0, #8]
    52ee:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    52f2:	bd70      	pop	{r4, r5, r6, pc}
    52f4:	20001228 	.word	0x20001228
    52f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    52fc:	4e16      	ldr	r6, [pc, #88]	; (5358 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
    52fe:	4688      	mov	r8, r1
    5300:	4605      	mov	r5, r0
    5302:	2400      	movs	r4, #0
    5304:	6828      	ldr	r0, [r5, #0]
    5306:	1cc0      	adds	r0, r0, #3
    5308:	f020 0003 	bic.w	r0, r0, #3
    530c:	6028      	str	r0, [r5, #0]
    530e:	4620      	mov	r0, r4
    5310:	f000 f824 	bl	535c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    5314:	5d31      	ldrb	r1, [r6, r4]
    5316:	4348      	muls	r0, r1
    5318:	f1b8 0f00 	cmp.w	r8, #0
    531c:	d001      	beq.n	5322 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
    531e:	2200      	movs	r2, #0
    5320:	e000      	b.n	5324 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    5322:	682a      	ldr	r2, [r5, #0]
    5324:	4601      	mov	r1, r0
    5326:	9200      	str	r2, [sp, #0]
    5328:	b132      	cbz	r2, 5338 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    532a:	2700      	movs	r7, #0
    532c:	ea4f 000d 	mov.w	r0, sp
    5330:	f009 f957 	bl	e5e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5334:	b11f      	cbz	r7, 533e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    5336:	e006      	b.n	5346 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    5338:	2701      	movs	r7, #1
    533a:	2000      	movs	r0, #0
    533c:	e7f8      	b.n	5330 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
    533e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    5342:	9a00      	ldr	r2, [sp, #0]
    5344:	604a      	str	r2, [r1, #4]
    5346:	6829      	ldr	r1, [r5, #0]
    5348:	1c64      	adds	r4, r4, #1
    534a:	4408      	add	r0, r1
    534c:	6028      	str	r0, [r5, #0]
    534e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    5352:	d0d7      	beq.n	5304 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
    5354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5358:	20001228 	.word	0x20001228
    535c:	4903      	ldr	r1, [pc, #12]	; (536c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    535e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5362:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    5366:	1cc0      	adds	r0, r0, #3
    5368:	4008      	ands	r0, r1
    536a:	4770      	bx	lr
    536c:	0000537c 	.word	0x0000537c
    5370:	4801      	ldr	r0, [pc, #4]	; (5378 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
    5372:	7800      	ldrb	r0, [r0, #0]
    5374:	4770      	bx	lr
    5376:	0000      	.short	0x0000
    5378:	20001228 	.word	0x20001228
    537c:	000001e0 	.word	0x000001e0
    5380:	0000e685 	.word	0x0000e685
    5384:	0000f6ef 	.word	0x0000f6ef

00005388 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    5388:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    538c:	4c26      	ldr	r4, [pc, #152]	; (5428 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    538e:	4680      	mov	r8, r0
    5390:	b081      	sub	sp, #4
    5392:	6820      	ldr	r0, [r4, #0]
    5394:	469a      	mov	sl, r3
    5396:	4693      	mov	fp, r2
    5398:	b158      	cbz	r0, 53b2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    539a:	7a02      	ldrb	r2, [r0, #8]
    539c:	4542      	cmp	r2, r8
    539e:	d903      	bls.n	53a8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    53a0:	6841      	ldr	r1, [r0, #4]
    53a2:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    53a6:	b140      	cbz	r0, 53ba <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    53a8:	f243 0002 	movw	r0, #12290	; 0x3002
    53ac:	b005      	add	sp, #20
    53ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53b2:	21a5      	movs	r1, #165	; 0xa5
    53b4:	2018      	movs	r0, #24
    53b6:	f7ff fcaf 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53ba:	4619      	mov	r1, r3
    53bc:	9802      	ldr	r0, [sp, #8]
    53be:	f009 f979 	bl	e6b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    53c2:	b286      	uxth	r6, r0
    53c4:	4658      	mov	r0, fp
    53c6:	990e      	ldr	r1, [sp, #56]	; 0x38
    53c8:	f009 f96b 	bl	e6a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    53cc:	b285      	uxth	r5, r0
    53ce:	1970      	adds	r0, r6, r5
    53d0:	1d00      	adds	r0, r0, #4
    53d2:	b287      	uxth	r7, r0
    53d4:	6820      	ldr	r0, [r4, #0]
    53d6:	46a1      	mov	r9, r4
    53d8:	4639      	mov	r1, r7
    53da:	6800      	ldr	r0, [r0, #0]
    53dc:	f009 f8d4 	bl	e588 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    53e0:	0004      	movs	r4, r0
    53e2:	d01f      	beq.n	5424 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    53e4:	8067      	strh	r7, [r4, #2]
    53e6:	8025      	strh	r5, [r4, #0]
    53e8:	4629      	mov	r1, r5
    53ea:	1d20      	adds	r0, r4, #4
    53ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    53ee:	4607      	mov	r7, r0
    53f0:	465a      	mov	r2, fp
    53f2:	2301      	movs	r3, #1
    53f4:	9500      	str	r5, [sp, #0]
    53f6:	f009 f827 	bl	e448 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    53fa:	8820      	ldrh	r0, [r4, #0]
    53fc:	4631      	mov	r1, r6
    53fe:	4438      	add	r0, r7
    5400:	2301      	movs	r3, #1
    5402:	9a02      	ldr	r2, [sp, #8]
    5404:	f8cd a000 	str.w	sl, [sp]
    5408:	f009 f81e 	bl	e448 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    540c:	8820      	ldrh	r0, [r4, #0]
    540e:	19c1      	adds	r1, r0, r7
    5410:	4638      	mov	r0, r7
    5412:	f009 f84a 	bl	e4aa <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    5416:	f8d9 0000 	ldr.w	r0, [r9]
    541a:	6841      	ldr	r1, [r0, #4]
    541c:	2000      	movs	r0, #0
    541e:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    5422:	e7c3      	b.n	53ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5424:	2004      	movs	r0, #4
    5426:	e7c1      	b.n	53ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5428:	20000078 	.word	0x20000078

0000542c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    542c:	b570      	push	{r4, r5, r6, lr}
    542e:	4c14      	ldr	r4, [pc, #80]	; (5480 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    5430:	6823      	ldr	r3, [r4, #0]
    5432:	b18b      	cbz	r3, 5458 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5434:	7a19      	ldrb	r1, [r3, #8]
    5436:	4281      	cmp	r1, r0
    5438:	d912      	bls.n	5460 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    543a:	685a      	ldr	r2, [r3, #4]
    543c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    5440:	b171      	cbz	r1, 5460 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5442:	2500      	movs	r5, #0
    5444:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    5448:	884a      	ldrh	r2, [r1, #2]
    544a:	6818      	ldr	r0, [r3, #0]
    544c:	f009 f8ea 	bl	e624 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5450:	6821      	ldr	r1, [r4, #0]
    5452:	2000      	movs	r0, #0
    5454:	7a0a      	ldrb	r2, [r1, #8]
    5456:	e00c      	b.n	5472 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    5458:	21c8      	movs	r1, #200	; 0xc8
    545a:	2018      	movs	r0, #24
    545c:	f7ff fc5c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5460:	f243 0002 	movw	r0, #12290	; 0x3002
    5464:	bd70      	pop	{r4, r5, r6, pc}
    5466:	684b      	ldr	r3, [r1, #4]
    5468:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    546c:	b933      	cbnz	r3, 547c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    546e:	1c40      	adds	r0, r0, #1
    5470:	b2c0      	uxtb	r0, r0
    5472:	4282      	cmp	r2, r0
    5474:	d8f7      	bhi.n	5466 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    5476:	6808      	ldr	r0, [r1, #0]
    5478:	f009 f8c9 	bl	e60e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    547c:	2000      	movs	r0, #0
    547e:	bd70      	pop	{r4, r5, r6, pc}
    5480:	20000078 	.word	0x20000078

00005484 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5488:	460d      	mov	r5, r1
    548a:	0004      	movs	r4, r0
    548c:	4690      	mov	r8, r2
    548e:	f04f 0600 	mov.w	r6, #0
    5492:	d009      	beq.n	54a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5494:	2700      	movs	r7, #0
    5496:	1ce0      	adds	r0, r4, #3
    5498:	f020 0003 	bic.w	r0, r0, #3
    549c:	42a0      	cmp	r0, r4
    549e:	d005      	beq.n	54ac <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    54a0:	2186      	movs	r1, #134	; 0x86
    54a2:	2018      	movs	r0, #24
    54a4:	f7ff fc38 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54a8:	2701      	movs	r7, #1
    54aa:	e7f4      	b.n	5496 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    54ac:	b1cd      	cbz	r5, 54e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    54ae:	4611      	mov	r1, r2
    54b0:	2000      	movs	r0, #0
    54b2:	f009 f896 	bl	e5e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    54b6:	300c      	adds	r0, #12
    54b8:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    54bc:	b98f      	cbnz	r7, 54e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    54be:	4f0a      	ldr	r7, [pc, #40]	; (54e8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    54c0:	f104 000c 	add.w	r0, r4, #12
    54c4:	00aa      	lsls	r2, r5, #2
    54c6:	603c      	str	r4, [r7, #0]
    54c8:	7225      	strb	r5, [r4, #8]
    54ca:	6060      	str	r0, [r4, #4]
    54cc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    54d0:	6020      	str	r0, [r4, #0]
    54d2:	2100      	movs	r1, #0
    54d4:	6860      	ldr	r0, [r4, #4]
    54d6:	f008 f88f 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    54da:	4641      	mov	r1, r8
    54dc:	6838      	ldr	r0, [r7, #0]
    54de:	f009 f880 	bl	e5e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    54e2:	4630      	mov	r0, r6
    54e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54e8:	20000078 	.word	0x20000078

000054ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    54ec:	b570      	push	{r4, r5, r6, lr}
    54ee:	4d08      	ldr	r5, [pc, #32]	; (5510 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    54f0:	6828      	ldr	r0, [r5, #0]
    54f2:	2800      	cmp	r0, #0
    54f4:	d00a      	beq.n	550c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    54f6:	2400      	movs	r4, #0
    54f8:	e004      	b.n	5504 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    54fa:	4620      	mov	r0, r4
    54fc:	f7ff ff96 	bl	542c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5500:	1c64      	adds	r4, r4, #1
    5502:	b2e4      	uxtb	r4, r4
    5504:	6828      	ldr	r0, [r5, #0]
    5506:	7a00      	ldrb	r0, [r0, #8]
    5508:	42a0      	cmp	r0, r4
    550a:	d8f6      	bhi.n	54fa <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    550c:	bd70      	pop	{r4, r5, r6, pc}
    550e:	0000      	.short	0x0000
    5510:	20000078 	.word	0x20000078

00005514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5514:	4909      	ldr	r1, [pc, #36]	; (553c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    5516:	b510      	push	{r4, lr}
    5518:	4602      	mov	r2, r0
    551a:	6809      	ldr	r1, [r1, #0]
    551c:	2000      	movs	r0, #0
    551e:	b149      	cbz	r1, 5534 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5520:	7a0b      	ldrb	r3, [r1, #8]
    5522:	4293      	cmp	r3, r2
    5524:	d905      	bls.n	5532 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5526:	6849      	ldr	r1, [r1, #4]
    5528:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    552c:	2900      	cmp	r1, #0
    552e:	d000      	beq.n	5532 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5530:	1d08      	adds	r0, r1, #4
    5532:	bd10      	pop	{r4, pc}
    5534:	21ee      	movs	r1, #238	; 0xee
    5536:	2018      	movs	r0, #24
    5538:	f7ff fbee 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    553c:	20000078 	.word	0x20000078

00005540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    5540:	490a      	ldr	r1, [pc, #40]	; (556c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    5542:	b510      	push	{r4, lr}
    5544:	4602      	mov	r2, r0
    5546:	6809      	ldr	r1, [r1, #0]
    5548:	2000      	movs	r0, #0
    554a:	b159      	cbz	r1, 5564 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    554c:	7a0b      	ldrb	r3, [r1, #8]
    554e:	4293      	cmp	r3, r2
    5550:	d907      	bls.n	5562 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5552:	6849      	ldr	r1, [r1, #4]
    5554:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5558:	2900      	cmp	r1, #0
    555a:	d002      	beq.n	5562 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    555c:	f831 0b04 	ldrh.w	r0, [r1], #4
    5560:	4408      	add	r0, r1
    5562:	bd10      	pop	{r4, pc}
    5564:	21fc      	movs	r1, #252	; 0xfc
    5566:	2018      	movs	r0, #24
    5568:	f7ff fbd6 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    556c:	20000078 	.word	0x20000078

00005570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    5570:	4801      	ldr	r0, [pc, #4]	; (5578 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    5572:	7840      	ldrb	r0, [r0, #1]
    5574:	4770      	bx	lr
    5576:	0000      	.short	0x0000
    5578:	2000007c 	.word	0x2000007c

0000557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    557c:	4801      	ldr	r0, [pc, #4]	; (5584 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    557e:	6840      	ldr	r0, [r0, #4]
    5580:	4770      	bx	lr
    5582:	0000      	.short	0x0000
    5584:	2000007c 	.word	0x2000007c

00005588 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    5588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    558c:	460c      	mov	r4, r1
    558e:	4607      	mov	r7, r0
    5590:	4616      	mov	r6, r2
    5592:	211c      	movs	r1, #28
    5594:	4610      	mov	r0, r2
    5596:	460d      	mov	r5, r1
    5598:	4622      	mov	r2, r4
    559a:	f008 ffb0 	bl	e4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    559e:	4680      	mov	r8, r0
    55a0:	b157      	cbz	r7, 55b8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    55a2:	4638      	mov	r0, r7
    55a4:	4641      	mov	r1, r8
    55a6:	4632      	mov	r2, r6
    55a8:	462b      	mov	r3, r5
    55aa:	9400      	str	r4, [sp, #0]
    55ac:	f008 ff4c 	bl	e448 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    55b0:	4803      	ldr	r0, [pc, #12]	; (55c0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    55b2:	6047      	str	r7, [r0, #4]
    55b4:	7004      	strb	r4, [r0, #0]
    55b6:	7046      	strb	r6, [r0, #1]
    55b8:	4640      	mov	r0, r8
    55ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    55be:	0000      	.short	0x0000
    55c0:	2000007c 	.word	0x2000007c

000055c4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    55c4:	4802      	ldr	r0, [pc, #8]	; (55d0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    55c6:	7842      	ldrb	r2, [r0, #1]
    55c8:	7801      	ldrb	r1, [r0, #0]
    55ca:	6840      	ldr	r0, [r0, #4]
    55cc:	f7ff bfdc 	b.w	5588 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    55d0:	2000007c 	.word	0x2000007c
    55d4:	4909      	ldr	r1, [pc, #36]	; (55fc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    55d6:	b510      	push	{r4, lr}
    55d8:	4807      	ldr	r0, [pc, #28]	; (55f8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    55da:	6008      	str	r0, [r1, #0]
    55dc:	4b08      	ldr	r3, [pc, #32]	; (5600 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    55de:	2011      	movs	r0, #17
    55e0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    55e4:	2200      	movs	r2, #0
    55e6:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    55ea:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    55ee:	1c40      	adds	r0, r0, #1
    55f0:	b2c0      	uxtb	r0, r0
    55f2:	2814      	cmp	r0, #20
    55f4:	d3f4      	bcc.n	55e0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    55f6:	bd10      	pop	{r4, pc}
    55f8:	fffe0000 	.word	0xfffe0000
    55fc:	4001f508 	.word	0x4001f508
    5600:	4001f000 	.word	0x4001f000
    5604:	b570      	push	{r4, r5, r6, lr}
    5606:	2420      	movs	r4, #32
    5608:	2100      	movs	r1, #0
    560a:	2301      	movs	r3, #1
    560c:	fa20 f201 	lsr.w	r2, r0, r1
    5610:	07d2      	lsls	r2, r2, #31
    5612:	d020      	beq.n	5656 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    5614:	b24a      	sxtb	r2, r1
    5616:	2a00      	cmp	r2, #0
    5618:	db10      	blt.n	563c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    561a:	bf00      	nop
    561c:	ea4f 1652 	mov.w	r6, r2, lsr #5
    5620:	ea4f 0686 	mov.w	r6, r6, lsl #2
    5624:	f002 051f 	and.w	r5, r2, #31
    5628:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    562c:	fa03 f505 	lsl.w	r5, r3, r5
    5630:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    5634:	f3bf 8f4f 	dsb	sy
    5638:	f3bf 8f6f 	isb	sy
    563c:	db0b      	blt.n	5656 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    563e:	f002 051f 	and.w	r5, r2, #31
    5642:	ea4f 1252 	mov.w	r2, r2, lsr #5
    5646:	ea4f 0282 	mov.w	r2, r2, lsl #2
    564a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    564e:	fa03 f505 	lsl.w	r5, r3, r5
    5652:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    5656:	f101 0101 	add.w	r1, r1, #1
    565a:	42a1      	cmp	r1, r4
    565c:	d3d6      	bcc.n	560c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    565e:	bd70      	pop	{r4, r5, r6, pc}
    5660:	b570      	push	{r4, r5, r6, lr}
    5662:	0042      	lsls	r2, r0, #1
    5664:	f04f 0100 	mov.w	r1, #0
    5668:	d501      	bpl.n	566e <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    566a:	4a14      	ldr	r2, [pc, #80]	; (56bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    566c:	6011      	str	r1, [r2, #0]
    566e:	f3c0 3280 	ubfx	r2, r0, #14, #1
    5672:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    5676:	429a      	cmp	r2, r3
    5678:	d003      	beq.n	5682 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    567a:	2166      	movs	r1, #102	; 0x66
    567c:	201b      	movs	r0, #27
    567e:	f7ff fb4b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5682:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    5686:	d014      	beq.n	56b2 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    5688:	4a0d      	ldr	r2, [pc, #52]	; (56c0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    568a:	2001      	movs	r0, #1
    568c:	6050      	str	r0, [r2, #4]
    568e:	1e83      	subs	r3, r0, #2
    5690:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5694:	4a0b      	ldr	r2, [pc, #44]	; (56c4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    5696:	6090      	str	r0, [r2, #8]
    5698:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    569c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    56a0:	4c09      	ldr	r4, [pc, #36]	; (56c8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    56a2:	6021      	str	r1, [r4, #0]
    56a4:	1d25      	adds	r5, r4, #4
    56a6:	6028      	str	r0, [r5, #0]
    56a8:	6090      	str	r0, [r2, #8]
    56aa:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    56ae:	6021      	str	r1, [r4, #0]
    56b0:	6028      	str	r0, [r5, #0]
    56b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    56b6:	f7ff bf8d 	b.w	55d4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    56ba:	0000      	.short	0x0000
    56bc:	4001e504 	.word	0x4001e504
    56c0:	4000e000 	.word	0x4000e000
    56c4:	4000f000 	.word	0x4000f000
    56c8:	4000f500 	.word	0x4000f500

000056cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    56cc:	b570      	push	{r4, r5, r6, lr}
    56ce:	4c0a      	ldr	r4, [pc, #40]	; (56f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    56d0:	460d      	mov	r5, r1
    56d2:	6020      	str	r0, [r4, #0]
    56d4:	f7ff ffc4 	bl	5660 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    56d8:	6820      	ldr	r0, [r4, #0]
    56da:	f7ff ff93 	bl	5604 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    56de:	f000 f877 	bl	57d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    56e2:	f7ff ff77 	bl	55d4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    56e6:	f008 fffd 	bl	e6e4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    56ea:	4628      	mov	r0, r5
    56ec:	f000 f8aa 	bl	5844 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    56f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    56f4:	f000 b8c2 	b.w	587c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    56f8:	20000084 	.word	0x20000084

000056fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    56fc:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5700:	4e2f      	ldr	r6, [pc, #188]	; (57c0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    5702:	4683      	mov	fp, r0
    5704:	6830      	ldr	r0, [r6, #0]
    5706:	9001      	str	r0, [sp, #4]
    5708:	2701      	movs	r7, #1
    570a:	482e      	ldr	r0, [pc, #184]	; (57c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    570c:	f007 fe51 	bl	d3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5710:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 57c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    5714:	b920      	cbnz	r0, 5720 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    5716:	2700      	movs	r7, #0
    5718:	f108 0001 	add.w	r0, r8, #1
    571c:	f007 fe60 	bl	d3e0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    5720:	4c29      	ldr	r4, [pc, #164]	; (57c8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    5722:	2500      	movs	r5, #0
    5724:	f04f 0903 	mov.w	r9, #3
    5728:	2001      	movs	r0, #1
    572a:	6060      	str	r0, [r4, #4]
    572c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    5730:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    5734:	f8c6 b000 	str.w	fp, [r6]
    5738:	6020      	str	r0, [r4, #0]
    573a:	f8df a090 	ldr.w	sl, [pc, #144]	; 57cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    573e:	e017      	b.n	5770 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5740:	f8da 0000 	ldr.w	r0, [sl]
    5744:	06c0      	lsls	r0, r0, #27
    5746:	d513      	bpl.n	5770 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5748:	200e      	movs	r0, #14
    574a:	f008 ffbc 	bl	e6c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    574e:	f3ef 8010 	mrs	r0, PRIMASK
    5752:	9000      	str	r0, [sp, #0]
    5754:	b672      	cpsid	i
    5756:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    575a:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    575e:	b920      	cbnz	r0, 576a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    5760:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5764:	b908      	cbnz	r0, 576a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    5766:	f7ff f921 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    576a:	9800      	ldr	r0, [sp, #0]
    576c:	b900      	cbnz	r0, 5770 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    576e:	b662      	cpsie	i
    5770:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    5774:	b918      	cbnz	r0, 577e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    5776:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    577a:	2800      	cmp	r0, #0
    577c:	d0e0      	beq.n	5740 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    577e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5782:	2800      	cmp	r0, #0
    5784:	d1d0      	bne.n	5728 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    5786:	b137      	cbz	r7, 5796 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    5788:	9801      	ldr	r0, [sp, #4]
    578a:	6030      	str	r0, [r6, #0]
    578c:	f108 0001 	add.w	r0, r8, #1
    5790:	f007 fe0f 	bl	d3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5794:	e011      	b.n	57ba <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    5796:	f108 0001 	add.w	r0, r8, #1
    579a:	f007 fe0a 	bl	d3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    579e:	2800      	cmp	r0, #0
    57a0:	d1ba      	bne.n	5718 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    57a2:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    57a6:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    57aa:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    57ae:	200e      	movs	r0, #14
    57b0:	f008 ff89 	bl	e6c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    57b4:	4803      	ldr	r0, [pc, #12]	; (57c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    57b6:	f007 fe13 	bl	d3e0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    57ba:	2000      	movs	r0, #0
    57bc:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    57c0:	4000e504 	.word	0x4000e504
    57c4:	2000027f 	.word	0x2000027f
    57c8:	4000e000 	.word	0x4000e000
    57cc:	e000ed10 	.word	0xe000ed10

000057d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    57d0:	b510      	push	{r4, lr}
    57d2:	4808      	ldr	r0, [pc, #32]	; (57f4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    57d4:	f007 fe00 	bl	d3d8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    57d8:	b108      	cbz	r0, 57de <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    57da:	2124      	movs	r1, #36	; 0x24
    57dc:	e006      	b.n	57ec <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    57de:	4805      	ldr	r0, [pc, #20]	; (57f4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    57e0:	1c40      	adds	r0, r0, #1
    57e2:	f007 fdf9 	bl	d3d8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    57e6:	2800      	cmp	r0, #0
    57e8:	d003      	beq.n	57f2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    57ea:	2128      	movs	r1, #40	; 0x28
    57ec:	201d      	movs	r0, #29
    57ee:	f7ff fa93 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57f2:	bd10      	pop	{r4, pc}
    57f4:	2000027f 	.word	0x2000027f

000057f8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    57f8:	b570      	push	{r4, r5, r6, lr}
    57fa:	4911      	ldr	r1, [pc, #68]	; (5840 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    57fc:	680a      	ldr	r2, [r1, #0]
    57fe:	b1ea      	cbz	r2, 583c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    5800:	2300      	movs	r3, #0
    5802:	461d      	mov	r5, r3
    5804:	2401      	movs	r4, #1
    5806:	684a      	ldr	r2, [r1, #4]
    5808:	1c52      	adds	r2, r2, #1
    580a:	604a      	str	r2, [r1, #4]
    580c:	2a0c      	cmp	r2, #12
    580e:	d300      	bcc.n	5812 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    5810:	604d      	str	r5, [r1, #4]
    5812:	790e      	ldrb	r6, [r1, #4]
    5814:	fa04 f206 	lsl.w	r2, r4, r6
    5818:	680e      	ldr	r6, [r1, #0]
    581a:	4216      	tst	r6, r2
    581c:	d00b      	beq.n	5836 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    581e:	f3ef 8310 	mrs	r3, PRIMASK
    5822:	b672      	cpsid	i
    5824:	680c      	ldr	r4, [r1, #0]
    5826:	4394      	bics	r4, r2
    5828:	600c      	str	r4, [r1, #0]
    582a:	b903      	cbnz	r3, 582e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    582c:	b662      	cpsie	i
    582e:	6849      	ldr	r1, [r1, #4]
    5830:	6001      	str	r1, [r0, #0]
    5832:	2000      	movs	r0, #0
    5834:	bd70      	pop	{r4, r5, r6, pc}
    5836:	1c5b      	adds	r3, r3, #1
    5838:	2b0c      	cmp	r3, #12
    583a:	d3e4      	bcc.n	5806 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    583c:	2005      	movs	r0, #5
    583e:	bd70      	pop	{r4, r5, r6, pc}
    5840:	20000088 	.word	0x20000088

00005844 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5844:	4802      	ldr	r0, [pc, #8]	; (5850 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    5846:	2100      	movs	r1, #0
    5848:	6001      	str	r1, [r0, #0]
    584a:	6041      	str	r1, [r0, #4]
    584c:	4770      	bx	lr
    584e:	0000      	.short	0x0000
    5850:	20000088 	.word	0x20000088

00005854 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5854:	b510      	push	{r4, lr}
    5856:	4c08      	ldr	r4, [pc, #32]	; (5878 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5858:	7861      	ldrb	r1, [r4, #1]
    585a:	b109      	cbz	r1, 5860 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    585c:	200f      	movs	r0, #15
    585e:	bd10      	pop	{r4, pc}
    5860:	f7ff f830 	bl	48c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5864:	7020      	strb	r0, [r4, #0]
    5866:	28ff      	cmp	r0, #255	; 0xff
    5868:	d001      	beq.n	586e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    586a:	2000      	movs	r0, #0
    586c:	bd10      	pop	{r4, pc}
    586e:	2176      	movs	r1, #118	; 0x76
    5870:	201f      	movs	r0, #31
    5872:	f7ff fa51 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5876:	0000      	.short	0x0000
    5878:	20000090 	.word	0x20000090

0000587c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    587c:	4901      	ldr	r1, [pc, #4]	; (5884 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    587e:	2000      	movs	r0, #0
    5880:	7048      	strb	r0, [r1, #1]
    5882:	4770      	bx	lr
    5884:	20000090 	.word	0x20000090

00005888 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5888:	4806      	ldr	r0, [pc, #24]	; (58a4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    588a:	4a07      	ldr	r2, [pc, #28]	; (58a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    588c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    588e:	8852      	ldrh	r2, [r2, #2]
    5890:	4291      	cmp	r1, r2
    5892:	d104      	bne.n	589e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5894:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5898:	b108      	cbz	r0, 589e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    589a:	2000      	movs	r0, #0
    589c:	4770      	bx	lr
    589e:	2001      	movs	r0, #1
    58a0:	4770      	bx	lr
    58a2:	0000      	.short	0x0000
    58a4:	200013ac 	.word	0x200013ac
    58a8:	2000026c 	.word	0x2000026c

000058ac <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    58ac:	4901      	ldr	r1, [pc, #4]	; (58b4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    58ae:	8048      	strh	r0, [r1, #2]
    58b0:	4770      	bx	lr
    58b2:	0000      	.short	0x0000
    58b4:	2000026c 	.word	0x2000026c

000058b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    58b8:	4808      	ldr	r0, [pc, #32]	; (58dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    58ba:	4a09      	ldr	r2, [pc, #36]	; (58e0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    58bc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    58be:	8852      	ldrh	r2, [r2, #2]
    58c0:	4291      	cmp	r1, r2
    58c2:	d109      	bne.n	58d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    58c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    58c8:	8481      	strh	r1, [r0, #36]	; 0x24
    58ca:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    58ce:	b119      	cbz	r1, 58d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    58d0:	2100      	movs	r1, #0
    58d2:	7001      	strb	r1, [r0, #0]
    58d4:	2001      	movs	r0, #1
    58d6:	4770      	bx	lr
    58d8:	2000      	movs	r0, #0
    58da:	4770      	bx	lr
    58dc:	200013ac 	.word	0x200013ac
    58e0:	2000026c 	.word	0x2000026c

000058e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    58e4:	4807      	ldr	r0, [pc, #28]	; (5904 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    58e6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    58ea:	2901      	cmp	r1, #1
    58ec:	d007      	beq.n	58fe <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    58ee:	2101      	movs	r1, #1
    58f0:	7001      	strb	r1, [r0, #0]
    58f2:	4805      	ldr	r0, [pc, #20]	; (5908 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    58f4:	4903      	ldr	r1, [pc, #12]	; (5904 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    58f6:	8800      	ldrh	r0, [r0, #0]
    58f8:	8488      	strh	r0, [r1, #36]	; 0x24
    58fa:	2001      	movs	r0, #1
    58fc:	4770      	bx	lr
    58fe:	2000      	movs	r0, #0
    5900:	4770      	bx	lr
    5902:	0000      	.short	0x0000
    5904:	200013ac 	.word	0x200013ac
    5908:	2000026c 	.word	0x2000026c

0000590c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    590c:	4906      	ldr	r1, [pc, #24]	; (5928 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    590e:	4b07      	ldr	r3, [pc, #28]	; (592c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5910:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5912:	885b      	ldrh	r3, [r3, #2]
    5914:	429a      	cmp	r2, r3
    5916:	d105      	bne.n	5924 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5918:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    591c:	b112      	cbz	r2, 5924 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    591e:	6001      	str	r1, [r0, #0]
    5920:	2001      	movs	r0, #1
    5922:	4770      	bx	lr
    5924:	2000      	movs	r0, #0
    5926:	4770      	bx	lr
    5928:	200013ac 	.word	0x200013ac
    592c:	2000026c 	.word	0x2000026c

00005930 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5930:	4909      	ldr	r1, [pc, #36]	; (5958 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5932:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5934:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5938:	3bff      	subs	r3, #255	; 0xff
    593a:	d002      	beq.n	5942 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    593c:	2100      	movs	r1, #0
    593e:	6001      	str	r1, [r0, #0]
    5940:	e007      	b.n	5952 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5942:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5946:	4904      	ldr	r1, [pc, #16]	; (5958 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5948:	2a01      	cmp	r2, #1
    594a:	d002      	beq.n	5952 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    594c:	6001      	str	r1, [r0, #0]
    594e:	2001      	movs	r0, #1
    5950:	4770      	bx	lr
    5952:	2000      	movs	r0, #0
    5954:	4770      	bx	lr
    5956:	0000      	.short	0x0000
    5958:	200013ac 	.word	0x200013ac

0000595c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    595c:	4901      	ldr	r1, [pc, #4]	; (5964 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    595e:	8008      	strh	r0, [r1, #0]
    5960:	4770      	bx	lr
    5962:	0000      	.short	0x0000
    5964:	2000026c 	.word	0x2000026c

00005968 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5968:	4905      	ldr	r1, [pc, #20]	; (5980 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    596a:	2000      	movs	r0, #0
    596c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5970:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5974:	8488      	strh	r0, [r1, #36]	; 0x24
    5976:	4903      	ldr	r1, [pc, #12]	; (5984 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5978:	8008      	strh	r0, [r1, #0]
    597a:	8048      	strh	r0, [r1, #2]
    597c:	4770      	bx	lr
    597e:	0000      	.short	0x0000
    5980:	200013ac 	.word	0x200013ac
    5984:	2000026c 	.word	0x2000026c
    5988:	4905      	ldr	r1, [pc, #20]	; (59a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    598a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    598c:	4282      	cmp	r2, r0
    598e:	d105      	bne.n	599c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5990:	2000      	movs	r0, #0
    5992:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5996:	f64f 70ff 	movw	r0, #65535	; 0xffff
    599a:	8488      	strh	r0, [r1, #36]	; 0x24
    599c:	4770      	bx	lr
    599e:	0000      	.short	0x0000
    59a0:	200013ac 	.word	0x200013ac

000059a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    59a4:	4a0a      	ldr	r2, [pc, #40]	; (59d0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    59a6:	b110      	cbz	r0, 59ae <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    59a8:	2801      	cmp	r0, #1
    59aa:	d007      	beq.n	59bc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    59ac:	e00e      	b.n	59cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    59ae:	7850      	ldrb	r0, [r2, #1]
    59b0:	b160      	cbz	r0, 59cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    59b2:	f8d2 0002 	ldr.w	r0, [r2, #2]
    59b6:	6008      	str	r0, [r1, #0]
    59b8:	88d0      	ldrh	r0, [r2, #6]
    59ba:	e004      	b.n	59c6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    59bc:	7810      	ldrb	r0, [r2, #0]
    59be:	b128      	cbz	r0, 59cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    59c0:	6890      	ldr	r0, [r2, #8]
    59c2:	6008      	str	r0, [r1, #0]
    59c4:	8990      	ldrh	r0, [r2, #12]
    59c6:	8088      	strh	r0, [r1, #4]
    59c8:	2001      	movs	r0, #1
    59ca:	4770      	bx	lr
    59cc:	2000      	movs	r0, #0
    59ce:	4770      	bx	lr
    59d0:	20000281 	.word	0x20000281

000059d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    59d4:	4a08      	ldr	r2, [pc, #32]	; (59f8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    59d6:	2301      	movs	r3, #1
    59d8:	b138      	cbz	r0, 59ea <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    59da:	2801      	cmp	r0, #1
    59dc:	d104      	bne.n	59e8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    59de:	7013      	strb	r3, [r2, #0]
    59e0:	6808      	ldr	r0, [r1, #0]
    59e2:	6090      	str	r0, [r2, #8]
    59e4:	8888      	ldrh	r0, [r1, #4]
    59e6:	8190      	strh	r0, [r2, #12]
    59e8:	4770      	bx	lr
    59ea:	7053      	strb	r3, [r2, #1]
    59ec:	6808      	ldr	r0, [r1, #0]
    59ee:	f8c2 0002 	str.w	r0, [r2, #2]
    59f2:	8888      	ldrh	r0, [r1, #4]
    59f4:	80d0      	strh	r0, [r2, #6]
    59f6:	4770      	bx	lr
    59f8:	20000281 	.word	0x20000281

000059fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    59fc:	4906      	ldr	r1, [pc, #24]	; (5a18 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    59fe:	b110      	cbz	r0, 5a06 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5a00:	2801      	cmp	r0, #1
    5a02:	d002      	beq.n	5a0a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5a04:	e005      	b.n	5a12 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5a06:	7848      	ldrb	r0, [r1, #1]
    5a08:	e000      	b.n	5a0c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5a0a:	7808      	ldrb	r0, [r1, #0]
    5a0c:	b108      	cbz	r0, 5a12 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5a0e:	2001      	movs	r0, #1
    5a10:	4770      	bx	lr
    5a12:	2000      	movs	r0, #0
    5a14:	4770      	bx	lr
    5a16:	0000      	.short	0x0000
    5a18:	20000281 	.word	0x20000281

00005a1c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5a1c:	4901      	ldr	r1, [pc, #4]	; (5a24 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5a1e:	7448      	strb	r0, [r1, #17]
    5a20:	4770      	bx	lr
    5a22:	0000      	.short	0x0000
    5a24:	20000c0a 	.word	0x20000c0a

00005a28 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5a28:	b578      	push	{r3, r4, r5, r6, lr}
    5a2a:	4913      	ldr	r1, [pc, #76]	; (5a78 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    5a2c:	7c4a      	ldrb	r2, [r1, #17]
    5a2e:	b30a      	cbz	r2, 5a74 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5a30:	7c0a      	ldrb	r2, [r1, #16]
    5a32:	f88d 2000 	strb.w	r2, [sp]
    5a36:	9a00      	ldr	r2, [sp, #0]
    5a38:	9200      	str	r2, [sp, #0]
    5a3a:	f89d 2000 	ldrb.w	r2, [sp]
    5a3e:	b1ca      	cbz	r2, 5a74 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5a40:	2300      	movs	r3, #0
    5a42:	f101 0210 	add.w	r2, r1, #16
    5a46:	241f      	movs	r4, #31
    5a48:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    5a4c:	7c0e      	ldrb	r6, [r1, #16]
    5a4e:	f88d 6000 	strb.w	r6, [sp]
    5a52:	9e00      	ldr	r6, [sp, #0]
    5a54:	9600      	str	r6, [sp, #0]
    5a56:	f89d 6000 	ldrb.w	r6, [sp]
    5a5a:	b14e      	cbz	r6, 5a70 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    5a5c:	7013      	strb	r3, [r2, #0]
    5a5e:	7043      	strb	r3, [r0, #1]
    5a60:	7004      	strb	r4, [r0, #0]
    5a62:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    5a66:	6046      	str	r6, [r0, #4]
    5a68:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    5a6c:	6086      	str	r6, [r0, #8]
    5a6e:	e7ed      	b.n	5a4c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    5a70:	2001      	movs	r0, #1
    5a72:	bd78      	pop	{r3, r4, r5, r6, pc}
    5a74:	2000      	movs	r0, #0
    5a76:	bd78      	pop	{r3, r4, r5, r6, pc}
    5a78:	20000c0a 	.word	0x20000c0a

00005a7c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5a7c:	b510      	push	{r4, lr}
    5a7e:	4604      	mov	r4, r0
    5a80:	f000 f966 	bl	5d50 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5a84:	b118      	cbz	r0, 5a8e <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5a86:	21bd      	movs	r1, #189	; 0xbd
    5a88:	2027      	movs	r0, #39	; 0x27
    5a8a:	f7ff f945 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a8e:	4803      	ldr	r0, [pc, #12]	; (5a9c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5a90:	2101      	movs	r1, #1
    5a92:	f009 fa01 	bl	ee98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5a96:	4802      	ldr	r0, [pc, #8]	; (5aa0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5a98:	62c4      	str	r4, [r0, #44]	; 0x2c
    5a9a:	bd10      	pop	{r4, pc}
    5a9c:	20000be8 	.word	0x20000be8
    5aa0:	200000ac 	.word	0x200000ac

00005aa4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5aa4:	4901      	ldr	r1, [pc, #4]	; (5aac <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5aa6:	2001      	movs	r0, #1
    5aa8:	7188      	strb	r0, [r1, #6]
    5aaa:	4770      	bx	lr
    5aac:	200000ac 	.word	0x200000ac

00005ab0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ab4:	4d6b      	ldr	r5, [pc, #428]	; (5c64 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b4>)
    5ab6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5ab8:	782e      	ldrb	r6, [r5, #0]
    5aba:	bbee      	cbnz	r6, 5b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5abc:	b3e2      	cbz	r2, 5b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5abe:	b3db      	cbz	r3, 5b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5ac0:	b3d4      	cbz	r4, 5b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5ac2:	f105 0614 	add.w	r6, r5, #20
    5ac6:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    5aca:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    5ace:	2700      	movs	r7, #0
    5ad0:	71af      	strb	r7, [r5, #6]
    5ad2:	716f      	strb	r7, [r5, #5]
    5ad4:	70ef      	strb	r7, [r5, #3]
    5ad6:	70af      	strb	r7, [r5, #2]
    5ad8:	712f      	strb	r7, [r5, #4]
    5ada:	81af      	strh	r7, [r5, #12]
    5adc:	81ef      	strh	r7, [r5, #14]
    5ade:	f000 f97b 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5ae2:	4606      	mov	r6, r0
    5ae4:	f000 f972 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5ae8:	4604      	mov	r4, r0
    5aea:	f006 feb5 	bl	c858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5aee:	f006 fba5 	bl	c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5af2:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    5af6:	f006 ff39 	bl	c96c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5afa:	f104 0018 	add.w	r0, r4, #24
    5afe:	f007 f80f 	bl	cb20 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5b02:	6920      	ldr	r0, [r4, #16]
    5b04:	f007 f802 	bl	cb0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5b08:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    5b0c:	f007 f822 	bl	cb54 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5b10:	f04f 0b01 	mov.w	fp, #1
    5b14:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    5b18:	2000      	movs	r0, #0
    5b1a:	f006 fd69 	bl	c5f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5b1e:	2800      	cmp	r0, #0
    5b20:	d07e      	beq.n	5c20 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    5b22:	4851      	ldr	r0, [pc, #324]	; (5c68 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b8>)
    5b24:	f006 fdd8 	bl	c6d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5b28:	8820      	ldrh	r0, [r4, #0]
    5b2a:	f7ff fd09 	bl	5540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5b2e:	6328      	str	r0, [r5, #48]	; 0x30
    5b30:	8820      	ldrh	r0, [r4, #0]
    5b32:	f7ff fcef 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5b36:	e000      	b.n	5b3a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    5b38:	e00a      	b.n	5b50 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    5b3a:	6368      	str	r0, [r5, #52]	; 0x34
    5b3c:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    5b40:	f88d 0000 	strb.w	r0, [sp]
    5b44:	9800      	ldr	r0, [sp, #0]
    5b46:	9000      	str	r0, [sp, #0]
    5b48:	f89d 0000 	ldrb.w	r0, [sp]
    5b4c:	b118      	cbz	r0, 5b56 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    5b4e:	e012      	b.n	5b76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5b50:	f44f 718a 	mov.w	r1, #276	; 0x114
    5b54:	e082      	b.n	5c5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>
    5b56:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5b58:	b168      	cbz	r0, 5b76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5b5a:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    5b5c:	88b1      	ldrh	r1, [r6, #4]
    5b5e:	4288      	cmp	r0, r1
    5b60:	d109      	bne.n	5b76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5b62:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    5b66:	2201      	movs	r2, #1
    5b68:	4408      	add	r0, r1
    5b6a:	8670      	strh	r0, [r6, #50]	; 0x32
    5b6c:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    5b70:	6f21      	ldr	r1, [r4, #112]	; 0x70
    5b72:	f7fd fdad 	bl	36d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    5b76:	f106 0168 	add.w	r1, r6, #104	; 0x68
    5b7a:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 5c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>
    5b7e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    5b82:	f109 0808 	add.w	r8, r9, #8
    5b86:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    5b8a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    5b8c:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    5b90:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    5b92:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    5b96:	f000 f98d 	bl	5eb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    5b9a:	4601      	mov	r1, r0
    5b9c:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    5b9e:	46ba      	mov	sl, r7
    5ba0:	f008 ff65 	bl	ea6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5ba4:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    5ba6:	4281      	cmp	r1, r0
    5ba8:	d200      	bcs.n	5bac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    5baa:	4608      	mov	r0, r1
    5bac:	7228      	strb	r0, [r5, #8]
    5bae:	46a8      	mov	r8, r5
    5bb0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    5bb4:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    5bb6:	7cf7      	ldrb	r7, [r6, #19]
    5bb8:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    5bba:	2908      	cmp	r1, #8
    5bbc:	d100      	bne.n	5bc0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    5bbe:	2104      	movs	r1, #4
    5bc0:	f008 ff55 	bl	ea6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5bc4:	b90f      	cbnz	r7, 5bca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    5bc6:	1d00      	adds	r0, r0, #4
    5bc8:	b280      	uxth	r0, r0
    5bca:	4285      	cmp	r5, r0
    5bcc:	d200      	bcs.n	5bd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    5bce:	4628      	mov	r0, r5
    5bd0:	b2c0      	uxtb	r0, r0
    5bd2:	f888 0009 	strb.w	r0, [r8, #9]
    5bd6:	7cf2      	ldrb	r2, [r6, #19]
    5bd8:	b102      	cbz	r2, 5bdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    5bda:	2204      	movs	r2, #4
    5bdc:	4410      	add	r0, r2
    5bde:	b2c0      	uxtb	r0, r0
    5be0:	f888 0007 	strb.w	r0, [r8, #7]
    5be4:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    5be8:	1d09      	adds	r1, r1, #4
    5bea:	4281      	cmp	r1, r0
    5bec:	d202      	bcs.n	5bf4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x144>
    5bee:	f240 119f 	movw	r1, #415	; 0x19f
    5bf2:	e033      	b.n	5c5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>
    5bf4:	7cb0      	ldrb	r0, [r6, #18]
    5bf6:	b1b0      	cbz	r0, 5c26 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    5bf8:	481c      	ldr	r0, [pc, #112]	; (5c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    5bfa:	3008      	adds	r0, #8
    5bfc:	f880 b018 	strb.w	fp, [r0, #24]
    5c00:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    5c04:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5c08:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5c0c:	f008 fdf4 	bl	e7f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5c10:	4916      	ldr	r1, [pc, #88]	; (5c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    5c12:	4603      	mov	r3, r0
    5c14:	22fb      	movs	r2, #251	; 0xfb
    5c16:	3108      	adds	r1, #8
    5c18:	2000      	movs	r0, #0
    5c1a:	f006 fb59 	bl	c2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5c1e:	e000      	b.n	5c22 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5c20:	e018      	b.n	5c54 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>
    5c22:	f006 fb8b 	bl	c33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5c26:	2001      	movs	r0, #1
    5c28:	f000 fb94 	bl	6354 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    5c2c:	4810      	ldr	r0, [pc, #64]	; (5c70 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1c0>)
    5c2e:	6800      	ldr	r0, [r0, #0]
    5c30:	2803      	cmp	r0, #3
    5c32:	d011      	beq.n	5c58 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    5c34:	280b      	cmp	r0, #11
    5c36:	d00f      	beq.n	5c58 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    5c38:	4648      	mov	r0, r9
    5c3a:	f840 af52 	str.w	sl, [r0, #82]!
    5c3e:	f8c0 a004 	str.w	sl, [r0, #4]
    5c42:	480a      	ldr	r0, [pc, #40]	; (5c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    5c44:	88b1      	ldrh	r1, [r6, #4]
    5c46:	3052      	adds	r0, #82	; 0x52
    5c48:	8041      	strh	r1, [r0, #2]
    5c4a:	8821      	ldrh	r1, [r4, #0]
    5c4c:	8001      	strh	r1, [r0, #0]
    5c4e:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    5c52:	7101      	strb	r1, [r0, #4]
    5c54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c58:	f240 11c7 	movw	r1, #455	; 0x1c7
    5c5c:	2027      	movs	r0, #39	; 0x27
    5c5e:	f7ff f85b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c62:	0000      	.short	0x0000
    5c64:	200000ac 	.word	0x200000ac
    5c68:	000064d8 	.word	0x000064d8
    5c6c:	20000bb8 	.word	0x20000bb8
    5c70:	40001550 	.word	0x40001550

00005c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c78:	4605      	mov	r5, r0
    5c7a:	f000 f8ad 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5c7e:	4e33      	ldr	r6, [pc, #204]	; (5d4c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    5c80:	4604      	mov	r4, r0
    5c82:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5c84:	7847      	ldrb	r7, [r0, #1]
    5c86:	b10d      	cbz	r5, 5c8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    5c88:	2d01      	cmp	r5, #1
    5c8a:	d103      	bne.n	5c94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5c8c:	6b71      	ldr	r1, [r6, #52]	; 0x34
    5c8e:	f007 fd62 	bl	d756 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    5c92:	7070      	strb	r0, [r6, #1]
    5c94:	7870      	ldrb	r0, [r6, #1]
    5c96:	f04f 0800 	mov.w	r8, #0
    5c9a:	f04f 0901 	mov.w	r9, #1
    5c9e:	b150      	cbz	r0, 5cb6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    5ca0:	2801      	cmp	r0, #1
    5ca2:	d01a      	beq.n	5cda <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    5ca4:	2802      	cmp	r0, #2
    5ca6:	d034      	beq.n	5d12 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    5ca8:	2803      	cmp	r0, #3
    5caa:	d048      	beq.n	5d3e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    5cac:	f240 4114 	movw	r1, #1044	; 0x414
    5cb0:	2027      	movs	r0, #39	; 0x27
    5cb2:	f7ff f831 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cb6:	2d01      	cmp	r5, #1
    5cb8:	d032      	beq.n	5d20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5cba:	f000 f8e7 	bl	5e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5cbe:	4639      	mov	r1, r7
    5cc0:	2201      	movs	r2, #1
    5cc2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5cc4:	f008 fa21 	bl	e10a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5cc8:	e028      	b.n	5d1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5cca:	bf00      	nop
    5ccc:	f884 8008 	strb.w	r8, [r4, #8]
    5cd0:	e031      	b.n	5d36 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5cd2:	bf00      	nop
    5cd4:	f884 9008 	strb.w	r9, [r4, #8]
    5cd8:	e02d      	b.n	5d36 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5cda:	2d01      	cmp	r5, #1
    5cdc:	d008      	beq.n	5cf0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    5cde:	f000 f8d5 	bl	5e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5ce2:	4639      	mov	r1, r7
    5ce4:	2200      	movs	r2, #0
    5ce6:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5ce8:	f008 fa0f 	bl	e10a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5cec:	2d02      	cmp	r5, #2
    5cee:	d00b      	beq.n	5d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5cf0:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5cf4:	1c40      	adds	r0, r0, #1
    5cf6:	f141 0100 	adc.w	r1, r1, #0
    5cfa:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5cfe:	7a20      	ldrb	r0, [r4, #8]
    5d00:	2801      	cmp	r0, #1
    5d02:	d003      	beq.n	5d0c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    5d04:	f884 9008 	strb.w	r9, [r4, #8]
    5d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d0c:	f884 8008 	strb.w	r8, [r4, #8]
    5d10:	e7fa      	b.n	5d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5d12:	2d01      	cmp	r5, #1
    5d14:	d004      	beq.n	5d20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5d16:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5d18:	f008 fc31 	bl	e57e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5d1c:	2d02      	cmp	r5, #2
    5d1e:	d0f3      	beq.n	5d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5d20:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5d24:	1c40      	adds	r0, r0, #1
    5d26:	f141 0100 	adc.w	r1, r1, #0
    5d2a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5d2e:	7a20      	ldrb	r0, [r4, #8]
    5d30:	2801      	cmp	r0, #1
    5d32:	d1cf      	bne.n	5cd4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    5d34:	e7ca      	b.n	5ccc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    5d36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d3a:	f005 bc21 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5d3e:	2d01      	cmp	r5, #1
    5d40:	d0e2      	beq.n	5d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5d42:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5d44:	f008 fc1b 	bl	e57e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5d48:	e7f5      	b.n	5d36 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5d4a:	0000      	.short	0x0000
    5d4c:	200000ac 	.word	0x200000ac

00005d50 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5d50:	4804      	ldr	r0, [pc, #16]	; (5d64 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5d52:	7800      	ldrb	r0, [r0, #0]
    5d54:	b108      	cbz	r0, 5d5a <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5d56:	200c      	movs	r0, #12
    5d58:	4770      	bx	lr
    5d5a:	4903      	ldr	r1, [pc, #12]	; (5d68 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5d5c:	2000      	movs	r0, #0
    5d5e:	7448      	strb	r0, [r1, #17]
    5d60:	4770      	bx	lr
    5d62:	0000      	.short	0x0000
    5d64:	200000ac 	.word	0x200000ac
    5d68:	20000c0a 	.word	0x20000c0a

00005d6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5d6c:	4812      	ldr	r0, [pc, #72]	; (5db8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    5d6e:	b508      	push	{r3, lr}
    5d70:	7801      	ldrb	r1, [r0, #0]
    5d72:	b139      	cbz	r1, 5d84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    5d74:	7800      	ldrb	r0, [r0, #0]
    5d76:	2801      	cmp	r0, #1
    5d78:	d006      	beq.n	5d88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5d7a:	f240 11df 	movw	r1, #479	; 0x1df
    5d7e:	2027      	movs	r0, #39	; 0x27
    5d80:	f7fe ffca 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d84:	f000 f9ce 	bl	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5d88:	f000 f820 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5d8c:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    5d90:	f88d 1000 	strb.w	r1, [sp]
    5d94:	9900      	ldr	r1, [sp, #0]
    5d96:	9100      	str	r1, [sp, #0]
    5d98:	f89d 1000 	ldrb.w	r1, [sp]
    5d9c:	2900      	cmp	r1, #0
    5d9e:	d10a      	bne.n	5db6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    5da0:	6f01      	ldr	r1, [r0, #112]	; 0x70
    5da2:	2900      	cmp	r1, #0
    5da4:	d007      	beq.n	5db6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    5da6:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    5daa:	2200      	movs	r2, #0
    5dac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5db0:	4611      	mov	r1, r2
    5db2:	f7fd bc8d 	b.w	36d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    5db6:	bd08      	pop	{r3, pc}
    5db8:	200000ac 	.word	0x200000ac
    5dbc:	4a02      	ldr	r2, [pc, #8]	; (5dc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5dbe:	8993      	ldrh	r3, [r2, #12]
    5dc0:	4303      	orrs	r3, r0
    5dc2:	8193      	strh	r3, [r2, #12]
    5dc4:	6952      	ldr	r2, [r2, #20]
    5dc6:	4710      	bx	r2
    5dc8:	200000ac 	.word	0x200000ac
    5dcc:	4801      	ldr	r0, [pc, #4]	; (5dd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5dce:	6840      	ldr	r0, [r0, #4]
    5dd0:	4770      	bx	lr
    5dd2:	0000      	.short	0x0000
    5dd4:	200000e4 	.word	0x200000e4
    5dd8:	4801      	ldr	r0, [pc, #4]	; (5de0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    5dda:	6840      	ldr	r0, [r0, #4]
    5ddc:	3078      	adds	r0, #120	; 0x78
    5dde:	4770      	bx	lr
    5de0:	200000e4 	.word	0x200000e4
    5de4:	4a01      	ldr	r2, [pc, #4]	; (5dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    5de6:	2100      	movs	r1, #0
    5de8:	6952      	ldr	r2, [r2, #20]
    5dea:	4710      	bx	r2
    5dec:	200000ac 	.word	0x200000ac
    5df0:	b570      	push	{r4, r5, r6, lr}
    5df2:	f7ff fff1 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5df6:	4604      	mov	r4, r0
    5df8:	f7ff ffe8 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5dfc:	4605      	mov	r5, r0
    5dfe:	4621      	mov	r1, r4
    5e00:	f008 fefd 	bl	ebfe <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5e04:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    5e08:	2901      	cmp	r1, #1
    5e0a:	d114      	bne.n	5e36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    5e0c:	2800      	cmp	r0, #0
    5e0e:	d012      	beq.n	5e36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    5e10:	4909      	ldr	r1, [pc, #36]	; (5e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    5e12:	2001      	movs	r0, #1
    5e14:	684a      	ldr	r2, [r1, #4]
    5e16:	8829      	ldrh	r1, [r5, #0]
    5e18:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    5e1c:	7a61      	ldrb	r1, [r4, #9]
    5e1e:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    5e22:	7aa1      	ldrb	r1, [r4, #10]
    5e24:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    5e28:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    5e2c:	7010      	strb	r0, [r2, #0]
    5e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e32:	f005 bba5 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5e36:	bd70      	pop	{r4, r5, r6, pc}
    5e38:	200000e4 	.word	0x200000e4
    5e3c:	b570      	push	{r4, r5, r6, lr}
    5e3e:	4605      	mov	r5, r0
    5e40:	2901      	cmp	r1, #1
    5e42:	d81c      	bhi.n	5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5e44:	4c10      	ldr	r4, [pc, #64]	; (5e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    5e46:	69a1      	ldr	r1, [r4, #24]
    5e48:	4788      	blx	r1
    5e4a:	b1c0      	cbz	r0, 5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5e4c:	7960      	ldrb	r0, [r4, #5]
    5e4e:	b9b0      	cbnz	r0, 5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5e50:	2d01      	cmp	r5, #1
    5e52:	d116      	bne.n	5e82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    5e54:	f104 0010 	add.w	r0, r4, #16
    5e58:	7800      	ldrb	r0, [r0, #0]
    5e5a:	06c1      	lsls	r1, r0, #27
    5e5c:	d405      	bmi.n	5e6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    5e5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5e60:	7809      	ldrb	r1, [r1, #0]
    5e62:	06c9      	lsls	r1, r1, #27
    5e64:	d401      	bmi.n	5e6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    5e66:	2101      	movs	r1, #1
    5e68:	e000      	b.n	5e6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    5e6a:	2100      	movs	r1, #0
    5e6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5e6e:	b91a      	cbnz	r2, 5e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5e70:	8962      	ldrh	r2, [r4, #10]
    5e72:	b10a      	cbz	r2, 5e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5e74:	06c0      	lsls	r0, r0, #27
    5e76:	d502      	bpl.n	5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5e78:	89a0      	ldrh	r0, [r4, #12]
    5e7a:	4301      	orrs	r1, r0
    5e7c:	d001      	beq.n	5e82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    5e7e:	2001      	movs	r0, #1
    5e80:	bd70      	pop	{r4, r5, r6, pc}
    5e82:	2000      	movs	r0, #0
    5e84:	bd70      	pop	{r4, r5, r6, pc}
    5e86:	0000      	.short	0x0000
    5e88:	200000ac 	.word	0x200000ac
    5e8c:	b510      	push	{r4, lr}
    5e8e:	4c08      	ldr	r4, [pc, #32]	; (5eb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    5e90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5e92:	b138      	cbz	r0, 5ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5e94:	8962      	ldrh	r2, [r4, #10]
    5e96:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5e98:	1cd2      	adds	r2, r2, #3
    5e9a:	f007 fb33 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5e9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5ea0:	6260      	str	r0, [r4, #36]	; 0x24
    5ea2:	bd10      	pop	{r4, pc}
    5ea4:	f240 415a 	movw	r1, #1114	; 0x45a
    5ea8:	2027      	movs	r0, #39	; 0x27
    5eaa:	f7fe ff35 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eae:	0000      	.short	0x0000
    5eb0:	200000ac 	.word	0x200000ac
    5eb4:	b510      	push	{r4, lr}
    5eb6:	f7ff ff89 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5eba:	4604      	mov	r4, r0
    5ebc:	f7ff ff8c 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5ec0:	7b41      	ldrb	r1, [r0, #13]
    5ec2:	4a0a      	ldr	r2, [pc, #40]	; (5eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    5ec4:	2924      	cmp	r1, #36	; 0x24
    5ec6:	d008      	beq.n	5eda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    5ec8:	7b80      	ldrb	r0, [r0, #14]
    5eca:	2824      	cmp	r0, #36	; 0x24
    5ecc:	d005      	beq.n	5eda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    5ece:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5ed2:	2804      	cmp	r0, #4
    5ed4:	d100      	bne.n	5ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5ed6:	2008      	movs	r0, #8
    5ed8:	bd10      	pop	{r4, pc}
    5eda:	6850      	ldr	r0, [r2, #4]
    5edc:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    5ee0:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5ee8:	f008 bc94 	b.w	e814 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    5eec:	200000e4 	.word	0x200000e4
    5ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ef4:	4689      	mov	r9, r1
    5ef6:	4606      	mov	r6, r0
    5ef8:	f7ff ff6e 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5efc:	4c58      	ldr	r4, [pc, #352]	; (6060 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    5efe:	2700      	movs	r7, #0
    5f00:	4605      	mov	r5, r0
    5f02:	f88d 7000 	strb.w	r7, [sp]
    5f06:	7820      	ldrb	r0, [r4, #0]
    5f08:	2802      	cmp	r0, #2
    5f0a:	d004      	beq.n	5f16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    5f0c:	f240 41b9 	movw	r1, #1209	; 0x4b9
    5f10:	2027      	movs	r0, #39	; 0x27
    5f12:	f7fe ff01 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f16:	7ba0      	ldrb	r0, [r4, #14]
    5f18:	0640      	lsls	r0, r0, #25
    5f1a:	d406      	bmi.n	5f2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    5f1c:	2040      	movs	r0, #64	; 0x40
    5f1e:	f7ff ff61 	bl	5de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5f22:	89e0      	ldrh	r0, [r4, #14]
    5f24:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5f28:	81e0      	strh	r0, [r4, #14]
    5f2a:	7ce8      	ldrb	r0, [r5, #19]
    5f2c:	f04f 0801 	mov.w	r8, #1
    5f30:	b3c6      	cbz	r6, 5fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    5f32:	f006 fa33 	bl	c39c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5f36:	f006 fa17 	bl	c368 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5f3a:	b968      	cbnz	r0, 5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5f3c:	7ce8      	ldrb	r0, [r5, #19]
    5f3e:	b158      	cbz	r0, 5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5f40:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f42:	7841      	ldrb	r1, [r0, #1]
    5f44:	b141      	cbz	r1, 5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5f46:	7800      	ldrb	r0, [r0, #0]
    5f48:	7a29      	ldrb	r1, [r5, #8]
    5f4a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5f4e:	4288      	cmp	r0, r1
    5f50:	d102      	bne.n	5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5f52:	f884 8002 	strb.w	r8, [r4, #2]
    5f56:	e064      	b.n	6022 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    5f58:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f5a:	7841      	ldrb	r1, [r0, #1]
    5f5c:	8161      	strh	r1, [r4, #10]
    5f5e:	b121      	cbz	r1, 5f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    5f60:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5f62:	f008 fad9 	bl	e518 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5f66:	62a0      	str	r0, [r4, #40]	; 0x28
    5f68:	e000      	b.n	5f6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    5f6a:	62a7      	str	r7, [r4, #40]	; 0x28
    5f6c:	89e0      	ldrh	r0, [r4, #14]
    5f6e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5f72:	81e0      	strh	r0, [r4, #14]
    5f74:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f76:	79e9      	ldrb	r1, [r5, #7]
    5f78:	7800      	ldrb	r0, [r0, #0]
    5f7a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5f7e:	4288      	cmp	r0, r1
    5f80:	d005      	beq.n	5f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    5f82:	f000 f963 	bl	624c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    5f86:	89e0      	ldrh	r0, [r4, #14]
    5f88:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5f8c:	81e0      	strh	r0, [r4, #14]
    5f8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f90:	7a29      	ldrb	r1, [r5, #8]
    5f92:	7800      	ldrb	r0, [r0, #0]
    5f94:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5f98:	4288      	cmp	r0, r1
    5f9a:	d10e      	bne.n	5fba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    5f9c:	4668      	mov	r0, sp
    5f9e:	f000 f917 	bl	61d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    5fa2:	e00a      	b.n	5fba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    5fa4:	e7ff      	b.n	5fa6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    5fa6:	b108      	cbz	r0, 5fac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    5fa8:	f006 f9f2 	bl	c390 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5fac:	78e0      	ldrb	r0, [r4, #3]
    5fae:	1c40      	adds	r0, r0, #1
    5fb0:	70e0      	strb	r0, [r4, #3]
    5fb2:	89e0      	ldrh	r0, [r4, #14]
    5fb4:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5fb8:	81e0      	strh	r0, [r4, #14]
    5fba:	7ca8      	ldrb	r0, [r5, #18]
    5fbc:	b1a0      	cbz	r0, 5fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    5fbe:	f7ff ff05 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5fc2:	4928      	ldr	r1, [pc, #160]	; (6064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5fc4:	f881 8018 	strb.w	r8, [r1, #24]
    5fc8:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    5fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5fd0:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5fd4:	f008 fc10 	bl	e7f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5fd8:	4603      	mov	r3, r0
    5fda:	22fb      	movs	r2, #251	; 0xfb
    5fdc:	4921      	ldr	r1, [pc, #132]	; (6064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5fde:	2000      	movs	r0, #0
    5fe0:	f006 f976 	bl	c2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5fe4:	f006 f9aa 	bl	c33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5fe8:	4d1e      	ldr	r5, [pc, #120]	; (6064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5fea:	354a      	adds	r5, #74	; 0x4a
    5fec:	f1b9 0f00 	cmp.w	r9, #0
    5ff0:	d104      	bne.n	5ffc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    5ff2:	78e1      	ldrb	r1, [r4, #3]
    5ff4:	2001      	movs	r0, #1
    5ff6:	f7ff ff21 	bl	5e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5ffa:	b1b0      	cbz	r0, 602a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    5ffc:	f006 fd64 	bl	cac8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    6000:	f89d 0000 	ldrb.w	r0, [sp]
    6004:	b110      	cbz	r0, 600c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    6006:	2000      	movs	r0, #0
    6008:	f7ff fe34 	bl	5c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    600c:	b136      	cbz	r6, 601c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    600e:	70e7      	strb	r7, [r4, #3]
    6010:	7968      	ldrb	r0, [r5, #5]
    6012:	1c40      	adds	r0, r0, #1
    6014:	7168      	strb	r0, [r5, #5]
    6016:	f7ff feeb 	bl	5df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    601a:	e002      	b.n	6022 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    601c:	79a8      	ldrb	r0, [r5, #6]
    601e:	1c40      	adds	r0, r0, #1
    6020:	71a8      	strb	r0, [r5, #6]
    6022:	f000 f87f 	bl	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    6026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    602a:	f89d 0000 	ldrb.w	r0, [sp]
    602e:	b110      	cbz	r0, 6036 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    6030:	2001      	movs	r0, #1
    6032:	f7ff fe1f 	bl	5c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6036:	2000      	movs	r0, #0
    6038:	f000 f98c 	bl	6354 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    603c:	f89d 0000 	ldrb.w	r0, [sp]
    6040:	b110      	cbz	r0, 6048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    6042:	2002      	movs	r0, #2
    6044:	f7ff fe16 	bl	5c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6048:	b136      	cbz	r6, 6058 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    604a:	70e7      	strb	r7, [r4, #3]
    604c:	7968      	ldrb	r0, [r5, #5]
    604e:	1c40      	adds	r0, r0, #1
    6050:	7168      	strb	r0, [r5, #5]
    6052:	f7ff fecd 	bl	5df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    6056:	e7e6      	b.n	6026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    6058:	79a8      	ldrb	r0, [r5, #6]
    605a:	1c40      	adds	r0, r0, #1
    605c:	71a8      	strb	r0, [r5, #6]
    605e:	e7e2      	b.n	6026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    6060:	200000ac 	.word	0x200000ac
    6064:	20000bc0 	.word	0x20000bc0
    6068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    606c:	4688      	mov	r8, r1
    606e:	4681      	mov	r9, r0
    6070:	f7ff feb2 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6074:	4d29      	ldr	r5, [pc, #164]	; (611c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    6076:	4604      	mov	r4, r0
    6078:	7828      	ldrb	r0, [r5, #0]
    607a:	2801      	cmp	r0, #1
    607c:	d004      	beq.n	6088 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    607e:	f240 4169 	movw	r1, #1129	; 0x469
    6082:	2027      	movs	r0, #39	; 0x27
    6084:	f7fe fe48 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6088:	7860      	ldrb	r0, [r4, #1]
    608a:	2600      	movs	r6, #0
    608c:	2701      	movs	r7, #1
    608e:	b120      	cbz	r0, 609a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    6090:	7066      	strb	r6, [r4, #1]
    6092:	2100      	movs	r1, #0
    6094:	2004      	movs	r0, #4
    6096:	f7ff fe91 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    609a:	6a29      	ldr	r1, [r5, #32]
    609c:	7808      	ldrb	r0, [r1, #0]
    609e:	43c0      	mvns	r0, r0
    60a0:	0780      	lsls	r0, r0, #30
    60a2:	d109      	bne.n	60b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    60a4:	79a0      	ldrb	r0, [r4, #6]
    60a6:	bb88      	cbnz	r0, 610c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    60a8:	2002      	movs	r0, #2
    60aa:	f7ff fe87 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    60ae:	6a28      	ldr	r0, [r5, #32]
    60b0:	7800      	ldrb	r0, [r0, #0]
    60b2:	43c0      	mvns	r0, r0
    60b4:	0780      	lsls	r0, r0, #30
    60b6:	d029      	beq.n	610c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    60b8:	6a28      	ldr	r0, [r5, #32]
    60ba:	7840      	ldrb	r0, [r0, #1]
    60bc:	b110      	cbz	r0, 60c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    60be:	2002      	movs	r0, #2
    60c0:	71a0      	strb	r0, [r4, #6]
    60c2:	e000      	b.n	60c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    60c4:	71a7      	strb	r7, [r4, #6]
    60c6:	7ce0      	ldrb	r0, [r4, #19]
    60c8:	b1a0      	cbz	r0, 60f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    60ca:	f7ff fe7f 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    60ce:	4914      	ldr	r1, [pc, #80]	; (6120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    60d0:	7a6d      	ldrb	r5, [r5, #9]
    60d2:	760e      	strb	r6, [r1, #24]
    60d4:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    60d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    60dc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    60e0:	f008 fb8a 	bl	e7f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    60e4:	4603      	mov	r3, r0
    60e6:	462a      	mov	r2, r5
    60e8:	490d      	ldr	r1, [pc, #52]	; (6120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    60ea:	2001      	movs	r0, #1
    60ec:	f006 f8f0 	bl	c2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    60f0:	f006 f924 	bl	c33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    60f4:	ea38 0009 	bics.w	r0, r8, r9
    60f8:	d004      	beq.n	6104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    60fa:	2100      	movs	r1, #0
    60fc:	4608      	mov	r0, r1
    60fe:	f7ff fe9d 	bl	5e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    6102:	b128      	cbz	r0, 6110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    6104:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6108:	f000 b80c 	b.w	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    610c:	2003      	movs	r0, #3
    610e:	e7d7      	b.n	60c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    6110:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6114:	2000      	movs	r0, #0
    6116:	f000 b8df 	b.w	62d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    611a:	0000      	.short	0x0000
    611c:	200000ac 	.word	0x200000ac
    6120:	20000bc0 	.word	0x20000bc0
    6124:	b510      	push	{r4, lr}
    6126:	f006 f9cf 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    612a:	f006 f887 	bl	c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    612e:	4c0d      	ldr	r4, [pc, #52]	; (6164 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    6130:	89e0      	ldrh	r0, [r4, #14]
    6132:	f7ff fe57 	bl	5de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    6136:	69e2      	ldr	r2, [r4, #28]
    6138:	7961      	ldrb	r1, [r4, #5]
    613a:	78a0      	ldrb	r0, [r4, #2]
    613c:	4790      	blx	r2
    613e:	480a      	ldr	r0, [pc, #40]	; (6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    6140:	7c40      	ldrb	r0, [r0, #17]
    6142:	b158      	cbz	r0, 615c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    6144:	4808      	ldr	r0, [pc, #32]	; (6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    6146:	3852      	subs	r0, #82	; 0x52
    6148:	f850 1f52 	ldr.w	r1, [r0, #82]!
    614c:	6081      	str	r1, [r0, #8]
    614e:	6841      	ldr	r1, [r0, #4]
    6150:	60c1      	str	r1, [r0, #12]
    6152:	4805      	ldr	r0, [pc, #20]	; (6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    6154:	2101      	movs	r1, #1
    6156:	7401      	strb	r1, [r0, #16]
    6158:	f005 fa12 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    615c:	2000      	movs	r0, #0
    615e:	7020      	strb	r0, [r4, #0]
    6160:	bd10      	pop	{r4, pc}
    6162:	0000      	.short	0x0000
    6164:	200000ac 	.word	0x200000ac
    6168:	20000c0a 	.word	0x20000c0a
    616c:	4808      	ldr	r0, [pc, #32]	; (6190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    616e:	b510      	push	{r4, lr}
    6170:	7800      	ldrb	r0, [r0, #0]
    6172:	2802      	cmp	r0, #2
    6174:	d004      	beq.n	6180 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    6176:	f240 2117 	movw	r1, #535	; 0x217
    617a:	2027      	movs	r0, #39	; 0x27
    617c:	f7fe fdcc 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6180:	4904      	ldr	r1, [pc, #16]	; (6194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    6182:	2001      	movs	r0, #1
    6184:	71c8      	strb	r0, [r1, #7]
    6186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    618a:	f7ff bfcb 	b.w	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    618e:	0000      	.short	0x0000
    6190:	200000ac 	.word	0x200000ac
    6194:	20000c0a 	.word	0x20000c0a
    6198:	b430      	push	{r4, r5}
    619a:	4b0c      	ldr	r3, [pc, #48]	; (61cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    619c:	b942      	cbnz	r2, 61b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    619e:	79da      	ldrb	r2, [r3, #7]
    61a0:	2aff      	cmp	r2, #255	; 0xff
    61a2:	d105      	bne.n	61b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    61a4:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    61a8:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    61ac:	42a2      	cmp	r2, r4
    61ae:	d00b      	beq.n	61c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    61b0:	b131      	cbz	r1, 61c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    61b2:	79da      	ldrb	r2, [r3, #7]
    61b4:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    61b8:	bc30      	pop	{r4, r5}
    61ba:	4610      	mov	r0, r2
    61bc:	f006 bcb8 	b.w	cb30 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    61c0:	22ff      	movs	r2, #255	; 0xff
    61c2:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    61c6:	e7f7      	b.n	61b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    61c8:	bc30      	pop	{r4, r5}
    61ca:	4770      	bx	lr
    61cc:	200000ac 	.word	0x200000ac
    61d0:	b570      	push	{r4, r5, r6, lr}
    61d2:	4606      	mov	r6, r0
    61d4:	f7ff fe00 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    61d8:	4a1b      	ldr	r2, [pc, #108]	; (6248 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    61da:	4604      	mov	r4, r0
    61dc:	2501      	movs	r5, #1
    61de:	6a51      	ldr	r1, [r2, #36]	; 0x24
    61e0:	7808      	ldrb	r0, [r1, #0]
    61e2:	f000 0003 	and.w	r0, r0, #3
    61e6:	2801      	cmp	r0, #1
    61e8:	d00c      	beq.n	6204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    61ea:	2802      	cmp	r0, #2
    61ec:	d00a      	beq.n	6204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    61ee:	2803      	cmp	r0, #3
    61f0:	d121      	bne.n	6236 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    61f2:	7065      	strb	r5, [r4, #1]
    61f4:	89d0      	ldrh	r0, [r2, #14]
    61f6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    61fa:	81d0      	strh	r0, [r2, #14]
    61fc:	2001      	movs	r0, #1
    61fe:	f7ff fddd 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    6202:	e018      	b.n	6236 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    6204:	7848      	ldrb	r0, [r1, #1]
    6206:	b1b0      	cbz	r0, 6236 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    6208:	89d1      	ldrh	r1, [r2, #14]
    620a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    620e:	81d1      	strh	r1, [r2, #14]
    6210:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6212:	2900      	cmp	r1, #0
    6214:	d009      	beq.n	622a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    6216:	28fb      	cmp	r0, #251	; 0xfb
    6218:	d808      	bhi.n	622c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    621a:	7990      	ldrb	r0, [r2, #6]
    621c:	b120      	cbz	r0, 6228 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    621e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6222:	2020      	movs	r0, #32
    6224:	f7ff bdde 	b.w	5de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    6228:	7035      	strb	r5, [r6, #0]
    622a:	bd70      	pop	{r4, r5, r6, pc}
    622c:	7950      	ldrb	r0, [r2, #5]
    622e:	f040 0010 	orr.w	r0, r0, #16
    6232:	7150      	strb	r0, [r2, #5]
    6234:	bd70      	pop	{r4, r5, r6, pc}
    6236:	7a20      	ldrb	r0, [r4, #8]
    6238:	2801      	cmp	r0, #1
    623a:	d001      	beq.n	6240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    623c:	7225      	strb	r5, [r4, #8]
    623e:	bd70      	pop	{r4, r5, r6, pc}
    6240:	2000      	movs	r0, #0
    6242:	7220      	strb	r0, [r4, #8]
    6244:	bd70      	pop	{r4, r5, r6, pc}
    6246:	0000      	.short	0x0000
    6248:	200000ac 	.word	0x200000ac
    624c:	b570      	push	{r4, r5, r6, lr}
    624e:	f7ff fdc3 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6252:	4604      	mov	r4, r0
    6254:	7980      	ldrb	r0, [r0, #6]
    6256:	2800      	cmp	r0, #0
    6258:	d027      	beq.n	62aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    625a:	2802      	cmp	r0, #2
    625c:	d10d      	bne.n	627a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    625e:	4818      	ldr	r0, [pc, #96]	; (62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    6260:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6262:	f007 ff2b 	bl	e0bc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    6266:	b308      	cbz	r0, 62ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    6268:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    626c:	1c40      	adds	r0, r0, #1
    626e:	f141 0100 	adc.w	r1, r1, #0
    6272:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    6276:	f005 f983 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    627a:	2500      	movs	r5, #0
    627c:	71a5      	strb	r5, [r4, #6]
    627e:	78a0      	ldrb	r0, [r4, #2]
    6280:	2601      	movs	r6, #1
    6282:	b170      	cbz	r0, 62a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6284:	70a5      	strb	r5, [r4, #2]
    6286:	f7ff fb17 	bl	58b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    628a:	b190      	cbz	r0, 62b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    628c:	2100      	movs	r1, #0
    628e:	2008      	movs	r0, #8
    6290:	f7ff fd94 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    6294:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    6298:	1c40      	adds	r0, r0, #1
    629a:	f141 0100 	adc.w	r1, r1, #0
    629e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    62a2:	79e0      	ldrb	r0, [r4, #7]
    62a4:	2801      	cmp	r0, #1
    62a6:	d009      	beq.n	62bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    62a8:	71e6      	strb	r6, [r4, #7]
    62aa:	bd70      	pop	{r4, r5, r6, pc}
    62ac:	f240 31af 	movw	r1, #943	; 0x3af
    62b0:	e001      	b.n	62b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    62b2:	f240 31c7 	movw	r1, #967	; 0x3c7
    62b6:	2027      	movs	r0, #39	; 0x27
    62b8:	f7fe fd2e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62bc:	71e5      	strb	r5, [r4, #7]
    62be:	bd70      	pop	{r4, r5, r6, pc}
    62c0:	200000ac 	.word	0x200000ac
    62c4:	4803      	ldr	r0, [pc, #12]	; (62d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    62c6:	7800      	ldrb	r0, [r0, #0]
    62c8:	2800      	cmp	r0, #0
    62ca:	d001      	beq.n	62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    62cc:	f7ff bf2a 	b.w	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    62d0:	4770      	bx	lr
    62d2:	0000      	.short	0x0000
    62d4:	200000ac 	.word	0x200000ac
    62d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62dc:	4607      	mov	r7, r0
    62de:	f7ff fd75 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    62e2:	4680      	mov	r8, r0
    62e4:	f7ff fd78 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    62e8:	4c17      	ldr	r4, [pc, #92]	; (6348 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    62ea:	4605      	mov	r5, r0
    62ec:	463a      	mov	r2, r7
    62ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    62f0:	6260      	str	r0, [r4, #36]	; 0x24
    62f2:	2101      	movs	r1, #1
    62f4:	4640      	mov	r0, r8
    62f6:	f7ff ff4f 	bl	6198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    62fa:	7ce8      	ldrb	r0, [r5, #19]
    62fc:	2600      	movs	r6, #0
    62fe:	b178      	cbz	r0, 6320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    6300:	4812      	ldr	r0, [pc, #72]	; (634c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    6302:	f006 fb39 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6306:	4812      	ldr	r0, [pc, #72]	; (6350 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    6308:	7606      	strb	r6, [r0, #24]
    630a:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    630e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6312:	490e      	ldr	r1, [pc, #56]	; (634c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    6314:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6316:	f005 ff63 	bl	c1e0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    631a:	f005 ff75 	bl	c208 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    631e:	e004      	b.n	632a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    6320:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6322:	f006 fb29 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6326:	f005 ff89 	bl	c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    632a:	b917      	cbnz	r7, 6332 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    632c:	4630      	mov	r0, r6
    632e:	f006 f9db 	bl	c6e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6332:	2100      	movs	r1, #0
    6334:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    6338:	4608      	mov	r0, r1
    633a:	f006 fba7 	bl	ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    633e:	2002      	movs	r0, #2
    6340:	7020      	strb	r0, [r4, #0]
    6342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6346:	0000      	.short	0x0000
    6348:	200000ac 	.word	0x200000ac
    634c:	20000ab8 	.word	0x20000ab8
    6350:	20000bc0 	.word	0x20000bc0
    6354:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6358:	4604      	mov	r4, r0
    635a:	f7ff fd3d 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    635e:	4605      	mov	r5, r0
    6360:	f7ff fd34 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6364:	4606      	mov	r6, r0
    6366:	f8df 9164 	ldr.w	r9, [pc, #356]	; 64cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    636a:	4622      	mov	r2, r4
    636c:	2100      	movs	r1, #0
    636e:	f7ff ff13 	bl	6198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    6372:	79a8      	ldrb	r0, [r5, #6]
    6374:	f04f 0800 	mov.w	r8, #0
    6378:	2701      	movs	r7, #1
    637a:	f1a9 0420 	sub.w	r4, r9, #32
    637e:	b140      	cbz	r0, 6392 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    6380:	2801      	cmp	r0, #1
    6382:	d01f      	beq.n	63c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    6384:	2802      	cmp	r0, #2
    6386:	d030      	beq.n	63ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    6388:	2803      	cmp	r0, #3
    638a:	d03c      	beq.n	6406 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    638c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    6390:	e058      	b.n	6444 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    6392:	7a20      	ldrb	r0, [r4, #8]
    6394:	2150      	movs	r1, #80	; 0x50
    6396:	f8ad 0004 	strh.w	r0, [sp, #4]
    639a:	5388      	strh	r0, [r1, r6]
    639c:	4648      	mov	r0, r9
    639e:	f7ff fab5 	bl	590c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    63a2:	b128      	cbz	r0, 63b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    63a4:	2080      	movs	r0, #128	; 0x80
    63a6:	6a21      	ldr	r1, [r4, #32]
    63a8:	f7ff fd08 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    63ac:	70af      	strb	r7, [r5, #2]
    63ae:	e02e      	b.n	640e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    63b0:	466a      	mov	r2, sp
    63b2:	a901      	add	r1, sp, #4
    63b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    63b6:	f008 fa37 	bl	e828 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    63ba:	6220      	str	r0, [r4, #32]
    63bc:	b110      	cbz	r0, 63c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    63be:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    63c2:	b111      	cbz	r1, 63ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    63c4:	4842      	ldr	r0, [pc, #264]	; (64d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    63c6:	6220      	str	r0, [r4, #32]
    63c8:	e021      	b.n	640e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    63ca:	f89d 1000 	ldrb.w	r1, [sp]
    63ce:	b931      	cbnz	r1, 63de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    63d0:	f8a0 8000 	strh.w	r8, [r0]
    63d4:	f880 8002 	strb.w	r8, [r0, #2]
    63d8:	2101      	movs	r1, #1
    63da:	f008 fd5d 	bl	ee98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    63de:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    63e2:	6a20      	ldr	r0, [r4, #32]
    63e4:	f008 fd12 	bl	ee0c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    63e8:	e011      	b.n	640e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    63ea:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    63ee:	f8ad 0004 	strh.w	r0, [sp, #4]
    63f2:	466a      	mov	r2, sp
    63f4:	a901      	add	r1, sp, #4
    63f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    63f8:	f008 fa16 	bl	e828 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    63fc:	6220      	str	r0, [r4, #32]
    63fe:	b930      	cbnz	r0, 640e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    6400:	f240 21a5 	movw	r1, #677	; 0x2a5
    6404:	e01e      	b.n	6444 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    6406:	4648      	mov	r0, r9
    6408:	f7ff fa80 	bl	590c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    640c:	b1c0      	cbz	r0, 6440 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    640e:	6a20      	ldr	r0, [r4, #32]
    6410:	2308      	movs	r3, #8
    6412:	7801      	ldrb	r1, [r0, #0]
    6414:	f021 0108 	bic.w	r1, r1, #8
    6418:	7001      	strb	r1, [r0, #0]
    641a:	79ea      	ldrb	r2, [r5, #7]
    641c:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    6420:	4311      	orrs	r1, r2
    6422:	f021 0104 	bic.w	r1, r1, #4
    6426:	7001      	strb	r1, [r0, #0]
    6428:	7a2a      	ldrb	r2, [r5, #8]
    642a:	2304      	movs	r3, #4
    642c:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    6430:	4311      	orrs	r1, r2
    6432:	f021 0110 	bic.w	r1, r1, #16
    6436:	7001      	strb	r1, [r0, #0]
    6438:	43c9      	mvns	r1, r1
    643a:	0789      	lsls	r1, r1, #30
    643c:	d005      	beq.n	644a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    643e:	e007      	b.n	6450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    6440:	f240 21ae 	movw	r1, #686	; 0x2ae
    6444:	2027      	movs	r0, #39	; 0x27
    6446:	f7fe fc67 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    644a:	78c0      	ldrb	r0, [r0, #3]
    644c:	2802      	cmp	r0, #2
    644e:	d00f      	beq.n	6470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    6450:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6452:	f007 ff84 	bl	e35e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6456:	b108      	cbz	r0, 645c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    6458:	2101      	movs	r1, #1
    645a:	e00a      	b.n	6472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    645c:	6a20      	ldr	r0, [r4, #32]
    645e:	7800      	ldrb	r0, [r0, #0]
    6460:	43c0      	mvns	r0, r0
    6462:	0780      	lsls	r0, r0, #30
    6464:	d004      	beq.n	6470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    6466:	f7ff fa0f 	bl	5888 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    646a:	f080 0101 	eor.w	r1, r0, #1
    646e:	e000      	b.n	6472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    6470:	2100      	movs	r1, #0
    6472:	6a20      	ldr	r0, [r4, #32]
    6474:	7802      	ldrb	r2, [r0, #0]
    6476:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    647a:	7001      	strb	r1, [r0, #0]
    647c:	7ca9      	ldrb	r1, [r5, #18]
    647e:	b191      	cbz	r1, 64a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    6480:	7841      	ldrb	r1, [r0, #1]
    6482:	b181      	cbz	r1, 64a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    6484:	4813      	ldr	r0, [pc, #76]	; (64d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    6486:	f006 fa77 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    648a:	4811      	ldr	r0, [pc, #68]	; (64d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    648c:	3828      	subs	r0, #40	; 0x28
    648e:	7607      	strb	r7, [r0, #24]
    6490:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    6494:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6498:	480e      	ldr	r0, [pc, #56]	; (64d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    649a:	6a21      	ldr	r1, [r4, #32]
    649c:	f005 fea0 	bl	c1e0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    64a0:	f005 feea 	bl	c278 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    64a4:	e003      	b.n	64ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    64a6:	f006 fa67 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    64aa:	f005 fec7 	bl	c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    64ae:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    64b2:	2101      	movs	r1, #1
    64b4:	2000      	movs	r0, #0
    64b6:	f006 fae9 	bl	ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    64ba:	7127      	strb	r7, [r4, #4]
    64bc:	6a20      	ldr	r0, [r4, #32]
    64be:	8801      	ldrh	r1, [r0, #0]
    64c0:	8221      	strh	r1, [r4, #16]
    64c2:	7880      	ldrb	r0, [r0, #2]
    64c4:	74a0      	strb	r0, [r4, #18]
    64c6:	7027      	strb	r7, [r4, #0]
    64c8:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    64cc:	200000cc 	.word	0x200000cc
    64d0:	20000be8 	.word	0x20000be8
    64d4:	20000ab8 	.word	0x20000ab8
    64d8:	0000616d 	.word	0x0000616d
    64dc:	00005ef1 	.word	0x00005ef1
    64e0:	00006069 	.word	0x00006069
    64e4:	000062c5 	.word	0x000062c5

000064e8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    64e8:	4800      	ldr	r0, [pc, #0]	; (64ec <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    64ea:	4770      	bx	lr
    64ec:	200015a5 	.word	0x200015a5

000064f0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    64f0:	b570      	push	{r4, r5, r6, lr}
    64f2:	2600      	movs	r6, #0
    64f4:	4635      	mov	r5, r6
    64f6:	4c0f      	ldr	r4, [pc, #60]	; (6534 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    64f8:	e018      	b.n	652c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    64fa:	1960      	adds	r0, r4, r5
    64fc:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    6500:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6504:	2a01      	cmp	r2, #1
    6506:	d002      	beq.n	650e <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    6508:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    650c:	b160      	cbz	r0, 6528 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    650e:	480a      	ldr	r0, [pc, #40]	; (6538 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    6510:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    6514:	1c73      	adds	r3, r6, #1
    6516:	5585      	strb	r5, [r0, r6]
    6518:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    651c:	4630      	mov	r0, r6
    651e:	b2de      	uxtb	r6, r3
    6520:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    6524:	f006 fbd2 	bl	cccc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6528:	1c6d      	adds	r5, r5, #1
    652a:	b2ed      	uxtb	r5, r5
    652c:	78a0      	ldrb	r0, [r4, #2]
    652e:	42a8      	cmp	r0, r5
    6530:	d8e3      	bhi.n	64fa <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    6532:	bd70      	pop	{r4, r5, r6, pc}
    6534:	200013d2 	.word	0x200013d2
    6538:	20000274 	.word	0x20000274

0000653c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    653c:	4904      	ldr	r1, [pc, #16]	; (6550 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    653e:	788a      	ldrb	r2, [r1, #2]
    6540:	4282      	cmp	r2, r0
    6542:	d903      	bls.n	654c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6544:	4408      	add	r0, r1
    6546:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    654a:	4770      	bx	lr
    654c:	2000      	movs	r0, #0
    654e:	4770      	bx	lr
    6550:	200013d2 	.word	0x200013d2

00006554 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6554:	4904      	ldr	r1, [pc, #16]	; (6568 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    6556:	788a      	ldrb	r2, [r1, #2]
    6558:	4282      	cmp	r2, r0
    655a:	d903      	bls.n	6564 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    655c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6560:	3083      	adds	r0, #131	; 0x83
    6562:	4770      	bx	lr
    6564:	2000      	movs	r0, #0
    6566:	4770      	bx	lr
    6568:	200013d2 	.word	0x200013d2

0000656c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    656c:	4a05      	ldr	r2, [pc, #20]	; (6584 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    656e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6572:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6576:	6802      	ldr	r2, [r0, #0]
    6578:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    657c:	8880      	ldrh	r0, [r0, #4]
    657e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6582:	4770      	bx	lr
    6584:	200013d2 	.word	0x200013d2

00006588 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    6588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    658c:	4607      	mov	r7, r0
    658e:	2400      	movs	r4, #0
    6590:	4d10      	ldr	r5, [pc, #64]	; (65d4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    6592:	e019      	b.n	65c8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    6594:	4620      	mov	r0, r4
    6596:	f7ff ffdd 	bl	6554 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    659a:	0003      	movs	r3, r0
    659c:	d012      	beq.n	65c4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    659e:	1928      	adds	r0, r5, r4
    65a0:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    65a4:	b970      	cbnz	r0, 65c4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    65a6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    65aa:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    65ae:	f206 160b 	addw	r6, r6, #267	; 0x10b
    65b2:	463a      	mov	r2, r7
    65b4:	4631      	mov	r1, r6
    65b6:	4618      	mov	r0, r3
    65b8:	f008 f8b9 	bl	e72e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    65bc:	4630      	mov	r0, r6
    65be:	4621      	mov	r1, r4
    65c0:	f7ff ffd4 	bl	656c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    65c4:	1c64      	adds	r4, r4, #1
    65c6:	b2e4      	uxtb	r4, r4
    65c8:	78a8      	ldrb	r0, [r5, #2]
    65ca:	42a0      	cmp	r0, r4
    65cc:	d8e2      	bhi.n	6594 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    65ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65d2:	0000      	.short	0x0000
    65d4:	200013d2 	.word	0x200013d2

000065d8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    65d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65dc:	460e      	mov	r6, r1
    65de:	4607      	mov	r7, r0
    65e0:	4615      	mov	r5, r2
    65e2:	2106      	movs	r1, #6
    65e4:	4630      	mov	r0, r6
    65e6:	f008 fb5a 	bl	ec9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    65ea:	4c0d      	ldr	r4, [pc, #52]	; (6620 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    65ec:	b160      	cbz	r0, 6608 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    65ee:	2000      	movs	r0, #0
    65f0:	e004      	b.n	65fc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    65f2:	1821      	adds	r1, r4, r0
    65f4:	1c40      	adds	r0, r0, #1
    65f6:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    65fa:	b2c0      	uxtb	r0, r0
    65fc:	78a1      	ldrb	r1, [r4, #2]
    65fe:	4281      	cmp	r1, r0
    6600:	d8f7      	bhi.n	65f2 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    6602:	2001      	movs	r0, #1
    6604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6608:	4631      	mov	r1, r6
    660a:	4638      	mov	r0, r7
    660c:	f008 f91b 	bl	e846 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6610:	2808      	cmp	r0, #8
    6612:	d003      	beq.n	661c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    6614:	4420      	add	r0, r4
    6616:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    661a:	e7f2      	b.n	6602 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    661c:	2000      	movs	r0, #0
    661e:	e7f1      	b.n	6604 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    6620:	200013d2 	.word	0x200013d2

00006624 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6624:	4904      	ldr	r1, [pc, #16]	; (6638 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6626:	788a      	ldrb	r2, [r1, #2]
    6628:	4282      	cmp	r2, r0
    662a:	d903      	bls.n	6634 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    662c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6630:	1cc0      	adds	r0, r0, #3
    6632:	4770      	bx	lr
    6634:	2000      	movs	r0, #0
    6636:	4770      	bx	lr
    6638:	200013d2 	.word	0x200013d2

0000663c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    663c:	4908      	ldr	r1, [pc, #32]	; (6660 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    663e:	788a      	ldrb	r2, [r1, #2]
    6640:	4282      	cmp	r2, r0
    6642:	d903      	bls.n	664c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    6644:	180a      	adds	r2, r1, r0
    6646:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    664a:	b10a      	cbz	r2, 6650 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    664c:	2000      	movs	r0, #0
    664e:	4770      	bx	lr
    6650:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6654:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6658:	f200 100b 	addw	r0, r0, #267	; 0x10b
    665c:	4770      	bx	lr
    665e:	0000      	.short	0x0000
    6660:	200013d2 	.word	0x200013d2

00006664 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6664:	b510      	push	{r4, lr}
    6666:	f240 12d3 	movw	r2, #467	; 0x1d3
    666a:	2100      	movs	r1, #0
    666c:	4808      	ldr	r0, [pc, #32]	; (6690 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    666e:	f006 ffc3 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6672:	2208      	movs	r2, #8
    6674:	21ff      	movs	r1, #255	; 0xff
    6676:	4807      	ldr	r0, [pc, #28]	; (6694 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6678:	f006 ffbe 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    667c:	4805      	ldr	r0, [pc, #20]	; (6694 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    667e:	2100      	movs	r1, #0
    6680:	1f00      	subs	r0, r0, #4
    6682:	7001      	strb	r1, [r0, #0]
    6684:	7041      	strb	r1, [r0, #1]
    6686:	f44f 7161 	mov.w	r1, #900	; 0x384
    668a:	8041      	strh	r1, [r0, #2]
    668c:	bd10      	pop	{r4, pc}
    668e:	0000      	.short	0x0000
    6690:	200013d2 	.word	0x200013d2
    6694:	20000274 	.word	0x20000274

00006698 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    6698:	4901      	ldr	r1, [pc, #4]	; (66a0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    669a:	7008      	strb	r0, [r1, #0]
    669c:	4770      	bx	lr
    669e:	0000      	.short	0x0000
    66a0:	20000270 	.word	0x20000270

000066a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    66a4:	4801      	ldr	r0, [pc, #4]	; (66ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    66a6:	7800      	ldrb	r0, [r0, #0]
    66a8:	4770      	bx	lr
    66aa:	0000      	.short	0x0000
    66ac:	20000270 	.word	0x20000270

000066b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    66b0:	4b0b      	ldr	r3, [pc, #44]	; (66e0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    66b2:	b510      	push	{r4, lr}
    66b4:	789c      	ldrb	r4, [r3, #2]
    66b6:	4284      	cmp	r4, r0
    66b8:	d90f      	bls.n	66da <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    66ba:	4418      	add	r0, r3
    66bc:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    66c0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    66c4:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    66c8:	700b      	strb	r3, [r1, #0]
    66ca:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    66ce:	6011      	str	r1, [r2, #0]
    66d0:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    66d4:	8090      	strh	r0, [r2, #4]
    66d6:	2001      	movs	r0, #1
    66d8:	bd10      	pop	{r4, pc}
    66da:	2000      	movs	r0, #0
    66dc:	bd10      	pop	{r4, pc}
    66de:	0000      	.short	0x0000
    66e0:	200013d2 	.word	0x200013d2

000066e4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    66e4:	4907      	ldr	r1, [pc, #28]	; (6704 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    66e6:	788a      	ldrb	r2, [r1, #2]
    66e8:	4282      	cmp	r2, r0
    66ea:	d909      	bls.n	6700 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    66ec:	4408      	add	r0, r1
    66ee:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    66f2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    66f6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    66fa:	f000 0001 	and.w	r0, r0, #1
    66fe:	4770      	bx	lr
    6700:	2000      	movs	r0, #0
    6702:	4770      	bx	lr
    6704:	200013d2 	.word	0x200013d2

00006708 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    6708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    670c:	4698      	mov	r8, r3
    670e:	4691      	mov	r9, r2
    6710:	460c      	mov	r4, r1
    6712:	4605      	mov	r5, r0
    6714:	f000 f962 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6718:	4606      	mov	r6, r0
    671a:	2810      	cmp	r0, #16
    671c:	d006      	beq.n	672c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    671e:	f000 f92d 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6722:	2810      	cmp	r0, #16
    6724:	d002      	beq.n	672c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6726:	2012      	movs	r0, #18
    6728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    672c:	4f18      	ldr	r7, [pc, #96]	; (6790 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    672e:	78b8      	ldrb	r0, [r7, #2]
    6730:	2808      	cmp	r0, #8
    6732:	d22a      	bcs.n	678a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    6734:	2e10      	cmp	r6, #16
    6736:	d105      	bne.n	6744 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    6738:	2200      	movs	r2, #0
    673a:	4621      	mov	r1, r4
    673c:	4628      	mov	r0, r5
    673e:	f000 f931 	bl	69a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6742:	4606      	mov	r6, r0
    6744:	78bc      	ldrb	r4, [r7, #2]
    6746:	2210      	movs	r2, #16
    6748:	1c60      	adds	r0, r4, #1
    674a:	70b8      	strb	r0, [r7, #2]
    674c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    6750:	1ce8      	adds	r0, r5, #3
    6752:	4649      	mov	r1, r9
    6754:	f008 fa46 	bl	ebe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6758:	f105 0083 	add.w	r0, r5, #131	; 0x83
    675c:	2210      	movs	r2, #16
    675e:	4641      	mov	r1, r8
    6760:	f008 fa40 	bl	ebe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6764:	2110      	movs	r1, #16
    6766:	4640      	mov	r0, r8
    6768:	f008 fa99 	bl	ec9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    676c:	443c      	add	r4, r7
    676e:	2110      	movs	r1, #16
    6770:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6774:	4648      	mov	r0, r9
    6776:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    677a:	f008 fa90 	bl	ec9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    677e:	77e0      	strb	r0, [r4, #31]
    6780:	f804 6c29 	strb.w	r6, [r4, #-41]
    6784:	2000      	movs	r0, #0
    6786:	73e0      	strb	r0, [r4, #15]
    6788:	e7ce      	b.n	6728 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    678a:	2007      	movs	r0, #7
    678c:	e7cc      	b.n	6728 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    678e:	0000      	.short	0x0000
    6790:	200013d2 	.word	0x200013d2

00006794 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6794:	4806      	ldr	r0, [pc, #24]	; (67b0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    6796:	b510      	push	{r4, lr}
    6798:	7880      	ldrb	r0, [r0, #2]
    679a:	1e40      	subs	r0, r0, #1
    679c:	b244      	sxtb	r4, r0
    679e:	e004      	b.n	67aa <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    67a0:	b2e0      	uxtb	r0, r4
    67a2:	f000 f963 	bl	6a6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    67a6:	1e64      	subs	r4, r4, #1
    67a8:	b264      	sxtb	r4, r4
    67aa:	2c00      	cmp	r4, #0
    67ac:	daf8      	bge.n	67a0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    67ae:	bd10      	pop	{r4, pc}
    67b0:	200013d2 	.word	0x200013d2

000067b4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    67b4:	4801      	ldr	r0, [pc, #4]	; (67bc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    67b6:	8840      	ldrh	r0, [r0, #2]
    67b8:	4770      	bx	lr
    67ba:	0000      	.short	0x0000
    67bc:	20000270 	.word	0x20000270

000067c0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    67c0:	b138      	cbz	r0, 67d2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    67c2:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    67c6:	4288      	cmp	r0, r1
    67c8:	d803      	bhi.n	67d2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    67ca:	4903      	ldr	r1, [pc, #12]	; (67d8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    67cc:	8048      	strh	r0, [r1, #2]
    67ce:	2001      	movs	r0, #1
    67d0:	4770      	bx	lr
    67d2:	2000      	movs	r0, #0
    67d4:	4770      	bx	lr
    67d6:	0000      	.short	0x0000
    67d8:	20000270 	.word	0x20000270

000067dc <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY>:
    67dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67e0:	2501      	movs	r5, #1
    67e2:	461f      	mov	r7, r3
    67e4:	4691      	mov	r9, r2
    67e6:	462c      	mov	r4, r5
    67e8:	2600      	movs	r6, #0
    67ea:	f000 f8f7 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    67ee:	2810      	cmp	r0, #16
    67f0:	d023      	beq.n	683a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    67f2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 684c <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x70>
    67f6:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    67fa:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    67fe:	f001 0601 	and.w	r6, r1, #1
    6802:	f000 f8bb 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6806:	4603      	mov	r3, r0
    6808:	2810      	cmp	r0, #16
    680a:	d016      	beq.n	683a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    680c:	b107      	cbz	r7, 6810 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x34>
    680e:	703b      	strb	r3, [r7, #0]
    6810:	4618      	mov	r0, r3
    6812:	f7ff ff07 	bl	6624 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6816:	b180      	cbz	r0, 683a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    6818:	f898 1002 	ldrb.w	r1, [r8, #2]
    681c:	4640      	mov	r0, r8
    681e:	4299      	cmp	r1, r3
    6820:	d903      	bls.n	682a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x4e>
    6822:	18c1      	adds	r1, r0, r3
    6824:	f891 414b 	ldrb.w	r4, [r1, #331]	; 0x14b
    6828:	e000      	b.n	682c <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x50>
    682a:	2400      	movs	r4, #0
    682c:	eb08 0003 	add.w	r0, r8, r3
    6830:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6834:	2801      	cmp	r0, #1
    6836:	d006      	beq.n	6846 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x6a>
    6838:	2500      	movs	r5, #0
    683a:	ea49 0006 	orr.w	r0, r9, r6
    683e:	4325      	orrs	r5, r4
    6840:	4028      	ands	r0, r5
    6842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6846:	2501      	movs	r5, #1
    6848:	e7f7      	b.n	683a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    684a:	0000      	.short	0x0000
    684c:	200013d2 	.word	0x200013d2

00006850 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6850:	b570      	push	{r4, r5, r6, lr}
    6852:	460d      	mov	r5, r1
    6854:	4606      	mov	r6, r0
    6856:	f000 f8c1 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    685a:	4c10      	ldr	r4, [pc, #64]	; (689c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    685c:	2810      	cmp	r0, #16
    685e:	d007      	beq.n	6870 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6860:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6864:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6868:	07c9      	lsls	r1, r1, #31
    686a:	d001      	beq.n	6870 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    686c:	2001      	movs	r0, #1
    686e:	bd70      	pop	{r4, r5, r6, pc}
    6870:	7861      	ldrb	r1, [r4, #1]
    6872:	2908      	cmp	r1, #8
    6874:	d210      	bcs.n	6898 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6876:	2810      	cmp	r0, #16
    6878:	d008      	beq.n	688c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    687a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    687e:	2101      	movs	r1, #1
    6880:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6884:	7860      	ldrb	r0, [r4, #1]
    6886:	1c40      	adds	r0, r0, #1
    6888:	7060      	strb	r0, [r4, #1]
    688a:	e7ef      	b.n	686c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    688c:	2201      	movs	r2, #1
    688e:	4629      	mov	r1, r5
    6890:	4630      	mov	r0, r6
    6892:	f000 f887 	bl	69a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6896:	e7f5      	b.n	6884 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6898:	2000      	movs	r0, #0
    689a:	bd70      	pop	{r4, r5, r6, pc}
    689c:	200013d2 	.word	0x200013d2

000068a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    68a0:	b570      	push	{r4, r5, r6, lr}
    68a2:	4d0b      	ldr	r5, [pc, #44]	; (68d0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    68a4:	7828      	ldrb	r0, [r5, #0]
    68a6:	1e40      	subs	r0, r0, #1
    68a8:	b244      	sxtb	r4, r0
    68aa:	e00a      	b.n	68c2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    68ac:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    68b0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    68b4:	07c0      	lsls	r0, r0, #31
    68b6:	d002      	beq.n	68be <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    68b8:	b2e0      	uxtb	r0, r4
    68ba:	f000 f91f 	bl	6afc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    68be:	1e64      	subs	r4, r4, #1
    68c0:	b264      	sxtb	r4, r4
    68c2:	2c00      	cmp	r4, #0
    68c4:	daf2      	bge.n	68ac <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    68c6:	4903      	ldr	r1, [pc, #12]	; (68d4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    68c8:	2000      	movs	r0, #0
    68ca:	7048      	strb	r0, [r1, #1]
    68cc:	bd70      	pop	{r4, r5, r6, pc}
    68ce:	0000      	.short	0x0000
    68d0:	200013d2 	.word	0x200013d2
    68d4:	20000270 	.word	0x20000270

000068d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    68d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68dc:	2400      	movs	r4, #0
    68de:	4625      	mov	r5, r4
    68e0:	4e18      	ldr	r6, [pc, #96]	; (6944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    68e2:	e029      	b.n	6938 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    68e4:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    68e8:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    68ec:	07c0      	lsls	r0, r0, #31
    68ee:	d021      	beq.n	6934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    68f0:	4628      	mov	r0, r5
    68f2:	f000 f843 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    68f6:	4603      	mov	r3, r0
    68f8:	f7ff fe94 	bl	6624 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    68fc:	4601      	mov	r1, r0
    68fe:	2000      	movs	r0, #0
    6900:	2b10      	cmp	r3, #16
    6902:	d009      	beq.n	6918 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6904:	18f2      	adds	r2, r6, r3
    6906:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    690a:	f1bc 0f01 	cmp.w	ip, #1
    690e:	d002      	beq.n	6916 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6910:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6914:	b102      	cbz	r2, 6918 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6916:	2001      	movs	r0, #1
    6918:	1e40      	subs	r0, r0, #1
    691a:	4201      	tst	r1, r0
    691c:	d10a      	bne.n	6934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    691e:	480a      	ldr	r0, [pc, #40]	; (6948 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6920:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6924:	5503      	strb	r3, [r0, r4]
    6926:	4620      	mov	r0, r4
    6928:	1c64      	adds	r4, r4, #1
    692a:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    692e:	b2e4      	uxtb	r4, r4
    6930:	f006 f9cc 	bl	cccc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6934:	1c6d      	adds	r5, r5, #1
    6936:	b2ed      	uxtb	r5, r5
    6938:	7830      	ldrb	r0, [r6, #0]
    693a:	42a8      	cmp	r0, r5
    693c:	d8d2      	bhi.n	68e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    693e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6942:	0000      	.short	0x0000
    6944:	200013d2 	.word	0x200013d2
    6948:	20000274 	.word	0x20000274
    694c:	4602      	mov	r2, r0
    694e:	4809      	ldr	r0, [pc, #36]	; (6974 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6950:	b510      	push	{r4, lr}
    6952:	7800      	ldrb	r0, [r0, #0]
    6954:	460b      	mov	r3, r1
    6956:	b158      	cbz	r0, 6970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6958:	4807      	ldr	r0, [pc, #28]	; (6978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    695a:	7881      	ldrb	r1, [r0, #2]
    695c:	b141      	cbz	r1, 6970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    695e:	b10b      	cbz	r3, 6964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6960:	1cc0      	adds	r0, r0, #3
    6962:	e001      	b.n	6968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6964:	4804      	ldr	r0, [pc, #16]	; (6978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6966:	3083      	adds	r0, #131	; 0x83
    6968:	f005 fb5c 	bl	c024 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    696c:	2001      	movs	r0, #1
    696e:	bd10      	pop	{r4, pc}
    6970:	2000      	movs	r0, #0
    6972:	bd10      	pop	{r4, pc}
    6974:	20000270 	.word	0x20000270
    6978:	200013d2 	.word	0x200013d2
    697c:	4908      	ldr	r1, [pc, #32]	; (69a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    697e:	b510      	push	{r4, lr}
    6980:	4603      	mov	r3, r0
    6982:	2000      	movs	r0, #0
    6984:	788a      	ldrb	r2, [r1, #2]
    6986:	e006      	b.n	6996 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6988:	180c      	adds	r4, r1, r0
    698a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    698e:	429c      	cmp	r4, r3
    6990:	d004      	beq.n	699c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    6992:	1c40      	adds	r0, r0, #1
    6994:	b2c0      	uxtb	r0, r0
    6996:	4282      	cmp	r2, r0
    6998:	d8f6      	bhi.n	6988 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    699a:	2010      	movs	r0, #16
    699c:	bd10      	pop	{r4, pc}
    699e:	0000      	.short	0x0000
    69a0:	200013d2 	.word	0x200013d2
    69a4:	b570      	push	{r4, r5, r6, lr}
    69a6:	4b0c      	ldr	r3, [pc, #48]	; (69d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    69a8:	4604      	mov	r4, r0
    69aa:	7818      	ldrb	r0, [r3, #0]
    69ac:	1c45      	adds	r5, r0, #1
    69ae:	701d      	strb	r5, [r3, #0]
    69b0:	2810      	cmp	r0, #16
    69b2:	d303      	bcc.n	69bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    69b4:	2146      	movs	r1, #70	; 0x46
    69b6:	2028      	movs	r0, #40	; 0x28
    69b8:	f7fe f9ae 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69bc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    69c0:	680d      	ldr	r5, [r1, #0]
    69c2:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    69c6:	8889      	ldrh	r1, [r1, #4]
    69c8:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    69cc:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    69d0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    69d4:	bd70      	pop	{r4, r5, r6, pc}
    69d6:	0000      	.short	0x0000
    69d8:	200013d2 	.word	0x200013d2
    69dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69e0:	460f      	mov	r7, r1
    69e2:	4606      	mov	r6, r0
    69e4:	2400      	movs	r4, #0
    69e6:	4d0d      	ldr	r5, [pc, #52]	; (6a1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    69e8:	e00f      	b.n	6a0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    69ea:	bf00      	nop
    69ec:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    69f0:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    69f4:	42b1      	cmp	r1, r6
    69f6:	d106      	bne.n	6a06 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    69f8:	2206      	movs	r2, #6
    69fa:	4639      	mov	r1, r7
    69fc:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    6a00:	f006 fd6e 	bl	d4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6a04:	b138      	cbz	r0, 6a16 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    6a06:	1c64      	adds	r4, r4, #1
    6a08:	b2e4      	uxtb	r4, r4
    6a0a:	7828      	ldrb	r0, [r5, #0]
    6a0c:	42a0      	cmp	r0, r4
    6a0e:	d8ed      	bhi.n	69ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    6a10:	2010      	movs	r0, #16
    6a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a16:	4620      	mov	r0, r4
    6a18:	e7fb      	b.n	6a12 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    6a1a:	0000      	.short	0x0000
    6a1c:	200013d2 	.word	0x200013d2
    6a20:	b570      	push	{r4, r5, r6, lr}
    6a22:	4605      	mov	r5, r0
    6a24:	f7ff ffaa 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6a28:	2810      	cmp	r0, #16
    6a2a:	d11c      	bne.n	6a66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a2c:	4c0e      	ldr	r4, [pc, #56]	; (6a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    6a2e:	7820      	ldrb	r0, [r4, #0]
    6a30:	1e40      	subs	r0, r0, #1
    6a32:	b2c0      	uxtb	r0, r0
    6a34:	7020      	strb	r0, [r4, #0]
    6a36:	42a8      	cmp	r0, r5
    6a38:	d015      	beq.n	6a66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a3a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6a3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6a42:	f502 7080 	add.w	r0, r2, #256	; 0x100
    6a46:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    6a4a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6a4e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6a52:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6a56:	7820      	ldrb	r0, [r4, #0]
    6a58:	f7ff ff90 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6a5c:	2810      	cmp	r0, #16
    6a5e:	d002      	beq.n	6a66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a60:	4420      	add	r0, r4
    6a62:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6a66:	bd70      	pop	{r4, r5, r6, pc}
    6a68:	200013d2 	.word	0x200013d2
    6a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a70:	4c21      	ldr	r4, [pc, #132]	; (6af8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    6a72:	4606      	mov	r6, r0
    6a74:	19a7      	adds	r7, r4, r6
    6a76:	78a0      	ldrb	r0, [r4, #2]
    6a78:	1e40      	subs	r0, r0, #1
    6a7a:	b2c5      	uxtb	r5, r0
    6a7c:	70a5      	strb	r5, [r4, #2]
    6a7e:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6a82:	42ae      	cmp	r6, r5
    6a84:	d02a      	beq.n	6adc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    6a86:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    6a8a:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    6a8e:	f10a 0103 	add.w	r1, sl, #3
    6a92:	f109 0003 	add.w	r0, r9, #3
    6a96:	2210      	movs	r2, #16
    6a98:	f006 fd34 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6a9c:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6aa0:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6aa4:	2210      	movs	r2, #16
    6aa6:	f006 fd2d 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6aaa:	1960      	adds	r0, r4, r5
    6aac:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6ab0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6ab4:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6ab8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6abc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6ac0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6ac4:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6ac8:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6acc:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6ad0:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6ad4:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6ad8:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6adc:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6ae0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6ae4:	07c0      	lsls	r0, r0, #31
    6ae6:	d104      	bne.n	6af2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    6ae8:	4640      	mov	r0, r8
    6aea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6aee:	f7ff bf97 	b.w	6a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6af6:	0000      	.short	0x0000
    6af8:	200013d2 	.word	0x200013d2
    6afc:	4905      	ldr	r1, [pc, #20]	; (6b14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    6afe:	784a      	ldrb	r2, [r1, #1]
    6b00:	1e52      	subs	r2, r2, #1
    6b02:	704a      	strb	r2, [r1, #1]
    6b04:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6b08:	2200      	movs	r2, #0
    6b0a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6b0e:	f7ff bf87 	b.w	6a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6b12:	0000      	.short	0x0000
    6b14:	200013d2 	.word	0x200013d2

00006b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    6b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b1c:	4604      	mov	r4, r0
    6b1e:	f100 0778 	add.w	r7, r0, #120	; 0x78
    6b22:	b171      	cbz	r1, 6b42 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    6b24:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    6b28:	1e75      	subs	r5, r6, #1
    6b2a:	2901      	cmp	r1, #1
    6b2c:	d016      	beq.n	6b5c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    6b2e:	2902      	cmp	r1, #2
    6b30:	d025      	beq.n	6b7e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    6b32:	2903      	cmp	r1, #3
    6b34:	d110      	bne.n	6b58 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    6b36:	4631      	mov	r1, r6
    6b38:	4628      	mov	r0, r5
    6b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6b3e:	f008 b900 	b.w	ed42 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6b42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    6b46:	2100      	movs	r1, #0
    6b48:	f006 fd56 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b4c:	4638      	mov	r0, r7
    6b4e:	f008 f8b5 	bl	ecbc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    6b52:	2020      	movs	r0, #32
    6b54:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    6b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b5c:	68e1      	ldr	r1, [r4, #12]
    6b5e:	480d      	ldr	r0, [pc, #52]	; (6b94 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    6b60:	460a      	mov	r2, r1
    6b62:	4408      	add	r0, r1
    6b64:	fbb0 f0f1 	udiv	r0, r0, r1
    6b68:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    6b6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6b70:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    6b74:	8ae3      	ldrh	r3, [r4, #22]
    6b76:	4638      	mov	r0, r7
    6b78:	f000 f80e 	bl	6b98 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    6b7c:	e7db      	b.n	6b36 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    6b7e:	68c1      	ldr	r1, [r0, #12]
    6b80:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    6b84:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    6b88:	4638      	mov	r0, r7
    6b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6b8e:	f000 b803 	b.w	6b98 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    6b92:	0000      	.short	0x0000
    6b94:	01c9c37f 	.word	0x01c9c37f
    6b98:	b530      	push	{r4, r5, lr}
    6b9a:	2400      	movs	r4, #0
    6b9c:	86c4      	strh	r4, [r0, #54]	; 0x36
    6b9e:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    6ba0:	4d13      	ldr	r5, [pc, #76]	; (6bf0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    6ba2:	434c      	muls	r4, r1
    6ba4:	fbb4 f4f2 	udiv	r4, r4, r2
    6ba8:	8744      	strh	r4, [r0, #58]	; 0x3a
    6baa:	f242 7410 	movw	r4, #10000	; 0x2710
    6bae:	4363      	muls	r3, r4
    6bb0:	fbb3 f3f2 	udiv	r3, r3, r2
    6bb4:	1c5b      	adds	r3, r3, #1
    6bb6:	b29b      	uxth	r3, r3
    6bb8:	fb03 f402 	mul.w	r4, r3, r2
    6bbc:	8703      	strh	r3, [r0, #56]	; 0x38
    6bbe:	42ac      	cmp	r4, r5
    6bc0:	d901      	bls.n	6bc6 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    6bc2:	1e5b      	subs	r3, r3, #1
    6bc4:	8703      	strh	r3, [r0, #56]	; 0x38
    6bc6:	4b0b      	ldr	r3, [pc, #44]	; (6bf4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    6bc8:	f240 2471 	movw	r4, #625	; 0x271
    6bcc:	fbb3 f3f2 	udiv	r3, r3, r2
    6bd0:	1c5b      	adds	r3, r3, #1
    6bd2:	87c3      	strh	r3, [r0, #62]	; 0x3e
    6bd4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    6bd6:	4363      	muls	r3, r4
    6bd8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6bdc:	1e5b      	subs	r3, r3, #1
    6bde:	fbb3 f3f2 	udiv	r3, r3, r2
    6be2:	62c3      	str	r3, [r0, #44]	; 0x2c
    6be4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6be6:	434b      	muls	r3, r1
    6be8:	fbb3 f1f2 	udiv	r1, r3, r2
    6bec:	6281      	str	r1, [r0, #40]	; 0x28
    6bee:	bd30      	pop	{r4, r5, pc}
    6bf0:	01e84800 	.word	0x01e84800
    6bf4:	02625a00 	.word	0x02625a00

00006bf8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    6bf8:	4909      	ldr	r1, [pc, #36]	; (6c20 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    6bfa:	b508      	push	{r3, lr}
    6bfc:	7809      	ldrb	r1, [r1, #0]
    6bfe:	f88d 1000 	strb.w	r1, [sp]
    6c02:	9900      	ldr	r1, [sp, #0]
    6c04:	9100      	str	r1, [sp, #0]
    6c06:	f89d 1000 	ldrb.w	r1, [sp]
    6c0a:	b109      	cbz	r1, 6c10 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    6c0c:	2000      	movs	r0, #0
    6c0e:	bd08      	pop	{r3, pc}
    6c10:	4903      	ldr	r1, [pc, #12]	; (6c20 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    6c12:	f8d1 2001 	ldr.w	r2, [r1, #1]
    6c16:	6002      	str	r2, [r0, #0]
    6c18:	7949      	ldrb	r1, [r1, #5]
    6c1a:	7101      	strb	r1, [r0, #4]
    6c1c:	2001      	movs	r0, #1
    6c1e:	bd08      	pop	{r3, pc}
    6c20:	2000028f 	.word	0x2000028f

00006c24 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    6c24:	4905      	ldr	r1, [pc, #20]	; (6c3c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    6c26:	2201      	movs	r2, #1
    6c28:	700a      	strb	r2, [r1, #0]
    6c2a:	460a      	mov	r2, r1
    6c2c:	6803      	ldr	r3, [r0, #0]
    6c2e:	f8c2 3001 	str.w	r3, [r2, #1]
    6c32:	7900      	ldrb	r0, [r0, #4]
    6c34:	7150      	strb	r0, [r2, #5]
    6c36:	2000      	movs	r0, #0
    6c38:	7008      	strb	r0, [r1, #0]
    6c3a:	4770      	bx	lr
    6c3c:	2000028f 	.word	0x2000028f

00006c40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6c40:	b570      	push	{r4, r5, r6, lr}
    6c42:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    6c46:	b28b      	uxth	r3, r1
    6c48:	7ac5      	ldrb	r5, [r0, #11]
    6c4a:	ea83 0102 	eor.w	r1, r3, r2
    6c4e:	2200      	movs	r2, #0
    6c50:	b2cc      	uxtb	r4, r1
    6c52:	0a09      	lsrs	r1, r1, #8
    6c54:	fa94 f4a4 	rbit	r4, r4
    6c58:	fa91 f1a1 	rbit	r1, r1
    6c5c:	0e24      	lsrs	r4, r4, #24
    6c5e:	0e09      	lsrs	r1, r1, #24
    6c60:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6c64:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6c68:	1c52      	adds	r2, r2, #1
    6c6a:	4419      	add	r1, r3
    6c6c:	b2d2      	uxtb	r2, r2
    6c6e:	b289      	uxth	r1, r1
    6c70:	2a03      	cmp	r2, #3
    6c72:	d3ed      	bcc.n	6c50 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6c74:	4059      	eors	r1, r3
    6c76:	2225      	movs	r2, #37	; 0x25
    6c78:	fbb1 f3f2 	udiv	r3, r1, r2
    6c7c:	fb02 1213 	mls	r2, r2, r3, r1
    6c80:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6c84:	f002 0607 	and.w	r6, r2, #7
    6c88:	785b      	ldrb	r3, [r3, #1]
    6c8a:	2401      	movs	r4, #1
    6c8c:	fa04 f606 	lsl.w	r6, r4, r6
    6c90:	4233      	tst	r3, r6
    6c92:	d001      	beq.n	6c98 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    6c94:	4610      	mov	r0, r2
    6c96:	bd70      	pop	{r4, r5, r6, pc}
    6c98:	434d      	muls	r5, r1
    6c9a:	0c29      	lsrs	r1, r5, #16
    6c9c:	1c49      	adds	r1, r1, #1
    6c9e:	b2c9      	uxtb	r1, r1
    6ca0:	2200      	movs	r2, #0
    6ca2:	1885      	adds	r5, r0, r2
    6ca4:	79ab      	ldrb	r3, [r5, #6]
    6ca6:	428b      	cmp	r3, r1
    6ca8:	d312      	bcc.n	6cd0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6caa:	f895 5001 	ldrb.w	r5, [r5, #1]
    6cae:	2300      	movs	r3, #0
    6cb0:	fa04 f603 	lsl.w	r6, r4, r3
    6cb4:	4235      	tst	r5, r6
    6cb6:	d001      	beq.n	6cbc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6cb8:	1e49      	subs	r1, r1, #1
    6cba:	b2c9      	uxtb	r1, r1
    6cbc:	b121      	cbz	r1, 6cc8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6cbe:	1c5b      	adds	r3, r3, #1
    6cc0:	b2db      	uxtb	r3, r3
    6cc2:	2b08      	cmp	r3, #8
    6cc4:	d3f4      	bcc.n	6cb0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    6cc6:	e005      	b.n	6cd4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6cc8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6ccc:	b2c0      	uxtb	r0, r0
    6cce:	bd70      	pop	{r4, r5, r6, pc}
    6cd0:	1ac9      	subs	r1, r1, r3
    6cd2:	b2c9      	uxtb	r1, r1
    6cd4:	1c52      	adds	r2, r2, #1
    6cd6:	b2d2      	uxtb	r2, r2
    6cd8:	2a05      	cmp	r2, #5
    6cda:	d3e2      	bcc.n	6ca2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6cdc:	f240 110d 	movw	r1, #269	; 0x10d
    6ce0:	2046      	movs	r0, #70	; 0x46
    6ce2:	f7fe f819 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ce6:	0000      	movs	r0, r0
    6ce8:	b570      	push	{r4, r5, r6, lr}
    6cea:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6cee:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    6cf2:	2401      	movs	r4, #1
    6cf4:	fb03 2101 	mla	r1, r3, r1, r2
    6cf8:	2225      	movs	r2, #37	; 0x25
    6cfa:	fbb1 f3f2 	udiv	r3, r1, r2
    6cfe:	fb02 1113 	mls	r1, r2, r3, r1
    6d02:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6d06:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    6d0a:	f001 0307 	and.w	r3, r1, #7
    6d0e:	7d92      	ldrb	r2, [r2, #22]
    6d10:	fa04 f303 	lsl.w	r3, r4, r3
    6d14:	421a      	tst	r2, r3
    6d16:	d003      	beq.n	6d20 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6d18:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6d1c:	2000      	movs	r0, #0
    6d1e:	bd70      	pop	{r4, r5, r6, pc}
    6d20:	f890 2020 	ldrb.w	r2, [r0, #32]
    6d24:	fbb1 f3f2 	udiv	r3, r1, r2
    6d28:	fb02 1113 	mls	r1, r2, r3, r1
    6d2c:	1c49      	adds	r1, r1, #1
    6d2e:	b2c9      	uxtb	r1, r1
    6d30:	2300      	movs	r3, #0
    6d32:	18c5      	adds	r5, r0, r3
    6d34:	7eea      	ldrb	r2, [r5, #27]
    6d36:	428a      	cmp	r2, r1
    6d38:	d311      	bcc.n	6d5e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6d3a:	f895 5016 	ldrb.w	r5, [r5, #22]
    6d3e:	2200      	movs	r2, #0
    6d40:	fa04 f602 	lsl.w	r6, r4, r2
    6d44:	4235      	tst	r5, r6
    6d46:	d001      	beq.n	6d4c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6d48:	1e49      	subs	r1, r1, #1
    6d4a:	b2c9      	uxtb	r1, r1
    6d4c:	b121      	cbz	r1, 6d58 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6d4e:	1c52      	adds	r2, r2, #1
    6d50:	b2d2      	uxtb	r2, r2
    6d52:	2a08      	cmp	r2, #8
    6d54:	d3f4      	bcc.n	6d40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    6d56:	e004      	b.n	6d62 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6d58:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6d5c:	e7dc      	b.n	6d18 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6d5e:	1a89      	subs	r1, r1, r2
    6d60:	b2c9      	uxtb	r1, r1
    6d62:	1c5b      	adds	r3, r3, #1
    6d64:	b2db      	uxtb	r3, r3
    6d66:	2b05      	cmp	r3, #5
    6d68:	d3e3      	bcc.n	6d32 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    6d6a:	201f      	movs	r0, #31
    6d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006d70 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6d70:	7841      	ldrb	r1, [r0, #1]
    6d72:	b141      	cbz	r1, 6d86 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6d74:	78c0      	ldrb	r0, [r0, #3]
    6d76:	2819      	cmp	r0, #25
    6d78:	d203      	bcs.n	6d82 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6d7a:	4a04      	ldr	r2, [pc, #16]	; (6d8c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6d7c:	5c10      	ldrb	r0, [r2, r0]
    6d7e:	4288      	cmp	r0, r1
    6d80:	d101      	bne.n	6d86 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6d82:	2001      	movs	r0, #1
    6d84:	4770      	bx	lr
    6d86:	2000      	movs	r0, #0
    6d88:	4770      	bx	lr
    6d8a:	0000      	.short	0x0000
    6d8c:	00010914 	.word	0x00010914

00006d90 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6d90:	b510      	push	{r4, lr}
    6d92:	2201      	movs	r2, #1
    6d94:	70c1      	strb	r1, [r0, #3]
    6d96:	2919      	cmp	r1, #25
    6d98:	d202      	bcs.n	6da0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6d9a:	4a06      	ldr	r2, [pc, #24]	; (6db4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6d9c:	5c52      	ldrb	r2, [r2, r1]
    6d9e:	e006      	b.n	6dae <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6da0:	29ff      	cmp	r1, #255	; 0xff
    6da2:	d004      	beq.n	6dae <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6da4:	f240 31d5 	movw	r1, #981	; 0x3d5
    6da8:	202a      	movs	r0, #42	; 0x2a
    6daa:	f7fd ffb5 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dae:	7042      	strb	r2, [r0, #1]
    6db0:	bd10      	pop	{r4, pc}
    6db2:	0000      	.short	0x0000
    6db4:	00010914 	.word	0x00010914

00006db8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    6db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6dbc:	ea5f 0900 	movs.w	r9, r0
    6dc0:	d006      	beq.n	6dd0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    6dc2:	4c21      	ldr	r4, [pc, #132]	; (6e48 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    6dc4:	f104 0010 	add.w	r0, r4, #16
    6dc8:	7b61      	ldrb	r1, [r4, #13]
    6dca:	4682      	mov	sl, r0
    6dcc:	b119      	cbz	r1, 6dd6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    6dce:	e00b      	b.n	6de8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6dd0:	f240 3193 	movw	r1, #915	; 0x393
    6dd4:	e005      	b.n	6de2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    6dd6:	2100      	movs	r1, #0
    6dd8:	f008 f92e 	bl	f038 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    6ddc:	b120      	cbz	r0, 6de8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6dde:	f240 3196 	movw	r1, #918	; 0x396
    6de2:	202b      	movs	r0, #43	; 0x2b
    6de4:	f7fd ff98 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6de8:	8a26      	ldrh	r6, [r4, #16]
    6dea:	2000      	movs	r0, #0
    6dec:	f7fe f978 	bl	50e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6df0:	4f16      	ldr	r7, [pc, #88]	; (6e4c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    6df2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 6e50 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    6df6:	4605      	mov	r5, r0
    6df8:	6839      	ldr	r1, [r7, #0]
    6dfa:	b129      	cbz	r1, 6e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x50>
    6dfc:	8a20      	ldrh	r0, [r4, #16]
    6dfe:	42a8      	cmp	r0, r5
    6e00:	d102      	bne.n	6e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x50>
    6e02:	4648      	mov	r0, r9
    6e04:	4788      	blx	r1
    6e06:	e005      	b.n	6e14 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    6e08:	f8d8 2000 	ldr.w	r2, [r8]
    6e0c:	b11a      	cbz	r2, 6e16 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5e>
    6e0e:	8a20      	ldrh	r0, [r4, #16]
    6e10:	4649      	mov	r1, r9
    6e12:	4790      	blx	r2
    6e14:	b998      	cbnz	r0, 6e3e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    6e16:	2100      	movs	r1, #0
    6e18:	4650      	mov	r0, sl
    6e1a:	f008 f90d 	bl	f038 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    6e1e:	b910      	cbnz	r0, 6e26 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6e>
    6e20:	8a20      	ldrh	r0, [r4, #16]
    6e22:	42b0      	cmp	r0, r6
    6e24:	d1e8      	bne.n	6df8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    6e26:	480b      	ldr	r0, [pc, #44]	; (6e54 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    6e28:	6801      	ldr	r1, [r0, #0]
    6e2a:	b111      	cbz	r1, 6e32 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    6e2c:	4648      	mov	r0, r9
    6e2e:	4788      	blx	r1
    6e30:	b928      	cbnz	r0, 6e3e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    6e32:	4809      	ldr	r0, [pc, #36]	; (6e58 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xa0>)
    6e34:	6801      	ldr	r1, [r0, #0]
    6e36:	b129      	cbz	r1, 6e44 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    6e38:	4648      	mov	r0, r9
    6e3a:	4788      	blx	r1
    6e3c:	b110      	cbz	r0, 6e44 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    6e3e:	2001      	movs	r0, #1
    6e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e44:	2000      	movs	r0, #0
    6e46:	e7fb      	b.n	6e40 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    6e48:	20001270 	.word	0x20001270
    6e4c:	20000218 	.word	0x20000218
    6e50:	2000020c 	.word	0x2000020c
    6e54:	2000021c 	.word	0x2000021c
    6e58:	20000208 	.word	0x20000208

00006e5c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    6e5c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e60:	b087      	sub	sp, #28
    6e62:	460c      	mov	r4, r1
    6e64:	a902      	add	r1, sp, #8
    6e66:	9807      	ldr	r0, [sp, #28]
    6e68:	f007 fd67 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6e6c:	2800      	cmp	r0, #0
    6e6e:	d17d      	bne.n	6f6c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6e70:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6f94 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    6e74:	f04f 0801 	mov.w	r8, #1
    6e78:	4682      	mov	sl, r0
    6e7a:	9803      	ldr	r0, [sp, #12]
    6e7c:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    6e80:	2800      	cmp	r0, #0
    6e82:	d00c      	beq.n	6e9e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6e84:	f8d9 2000 	ldr.w	r2, [r9]
    6e88:	b162      	cbz	r2, 6ea4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6e8a:	4621      	mov	r1, r4
    6e8c:	9807      	ldr	r0, [sp, #28]
    6e8e:	4790      	blx	r2
    6e90:	b140      	cbz	r0, 6ea4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6e92:	4620      	mov	r0, r4
    6e94:	f000 f9c0 	bl	7218 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1b0>
    6e98:	2800      	cmp	r0, #0
    6e9a:	d1ee      	bne.n	6e7a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    6e9c:	2001      	movs	r0, #1
    6e9e:	b009      	add	sp, #36	; 0x24
    6ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ea4:	9d03      	ldr	r5, [sp, #12]
    6ea6:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    6eaa:	3578      	adds	r5, #120	; 0x78
    6eac:	b950      	cbnz	r0, 6ec4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    6eae:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6eb2:	f88d 0004 	strb.w	r0, [sp, #4]
    6eb6:	9801      	ldr	r0, [sp, #4]
    6eb8:	9001      	str	r0, [sp, #4]
    6eba:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6ebe:	b108      	cbz	r0, 6ec4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    6ec0:	2001      	movs	r0, #1
    6ec2:	e000      	b.n	6ec6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    6ec4:	2000      	movs	r0, #0
    6ec6:	4683      	mov	fp, r0
    6ec8:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    6ecc:	b1c0      	cbz	r0, 6f00 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    6ece:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    6ed2:	0780      	lsls	r0, r0, #30
    6ed4:	d514      	bpl.n	6f00 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    6ed6:	f884 a001 	strb.w	sl, [r4, #1]
    6eda:	f884 8000 	strb.w	r8, [r4]
    6ede:	f884 a004 	strb.w	sl, [r4, #4]
    6ee2:	9907      	ldr	r1, [sp, #28]
    6ee4:	f8a4 1005 	strh.w	r1, [r4, #5]
    6ee8:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    6eec:	71e1      	strb	r1, [r4, #7]
    6eee:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    6ef2:	8121      	strh	r1, [r4, #8]
    6ef4:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    6ef8:	8161      	strh	r1, [r4, #10]
    6efa:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    6efe:	e7c8      	b.n	6e92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6f00:	9807      	ldr	r0, [sp, #28]
    6f02:	f7fe fb1d 	bl	5540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6f06:	0007      	movs	r7, r0
    6f08:	d00d      	beq.n	6f26 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    6f0a:	f007 f9ad 	bl	e268 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6f0e:	0006      	movs	r6, r0
    6f10:	d015      	beq.n	6f3e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    6f12:	f884 a001 	strb.w	sl, [r4, #1]
    6f16:	200f      	movs	r0, #15
    6f18:	7020      	strb	r0, [r4, #0]
    6f1a:	9807      	ldr	r0, [sp, #28]
    6f1c:	80e0      	strh	r0, [r4, #6]
    6f1e:	8126      	strh	r6, [r4, #8]
    6f20:	f884 8004 	strb.w	r8, [r4, #4]
    6f24:	e007      	b.n	6f36 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    6f26:	f240 213a 	movw	r1, #570	; 0x23a
    6f2a:	e02d      	b.n	6f88 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    6f2c:	2100      	movs	r1, #0
    6f2e:	4638      	mov	r0, r7
    6f30:	460a      	mov	r2, r1
    6f32:	f007 fabd 	bl	e4b0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6f36:	1e76      	subs	r6, r6, #1
    6f38:	b2b6      	uxth	r6, r6
    6f3a:	d2f7      	bcs.n	6f2c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    6f3c:	e7a9      	b.n	6e92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6f3e:	9807      	ldr	r0, [sp, #28]
    6f40:	f7fe fae8 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6f44:	b1f0      	cbz	r0, 6f84 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    6f46:	f1bb 0f00 	cmp.w	fp, #0
    6f4a:	d020      	beq.n	6f8e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    6f4c:	f007 f8a6 	bl	e09c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6f50:	b160      	cbz	r0, 6f6c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6f52:	9807      	ldr	r0, [sp, #28]
    6f54:	f007 fbd6 	bl	e704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6f58:	2100      	movs	r1, #0
    6f5a:	9807      	ldr	r0, [sp, #28]
    6f5c:	f7fe f95a 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6f60:	f884 a001 	strb.w	sl, [r4, #1]
    6f64:	210c      	movs	r1, #12
    6f66:	4650      	mov	r0, sl
    6f68:	7021      	strb	r1, [r4, #0]
    6f6a:	e000      	b.n	6f6e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    6f6c:	e00f      	b.n	6f8e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    6f6e:	f884 a004 	strb.w	sl, [r4, #4]
    6f72:	9907      	ldr	r1, [sp, #28]
    6f74:	f8a4 1005 	strh.w	r1, [r4, #5]
    6f78:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6f7c:	71e1      	strb	r1, [r4, #7]
    6f7e:	3524      	adds	r5, #36	; 0x24
    6f80:	7028      	strb	r0, [r5, #0]
    6f82:	e786      	b.n	6e92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6f84:	f44f 7116 	mov.w	r1, #600	; 0x258
    6f88:	202b      	movs	r0, #43	; 0x2b
    6f8a:	f7fd fec5 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f8e:	2000      	movs	r0, #0
    6f90:	e785      	b.n	6e9e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6f92:	0000      	.short	0x0000
    6f94:	20000210 	.word	0x20000210

00006f98 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI>:
    6f98:	b570      	push	{r4, r5, r6, lr}
    6f9a:	4604      	mov	r4, r0
    6f9c:	481b      	ldr	r0, [pc, #108]	; (700c <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x74>)
    6f9e:	6801      	ldr	r1, [r0, #0]
    6fa0:	b319      	cbz	r1, 6fea <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x52>
    6fa2:	4620      	mov	r0, r4
    6fa4:	4788      	blx	r1
    6fa6:	b300      	cbz	r0, 6fea <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x52>
    6fa8:	7820      	ldrb	r0, [r4, #0]
    6faa:	2818      	cmp	r0, #24
    6fac:	d002      	beq.n	6fb4 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x1c>
    6fae:	2805      	cmp	r0, #5
    6fb0:	d016      	beq.n	6fe0 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x48>
    6fb2:	e018      	b.n	6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6fb4:	7920      	ldrb	r0, [r4, #4]
    6fb6:	2801      	cmp	r0, #1
    6fb8:	d115      	bne.n	6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6fba:	88e0      	ldrh	r0, [r4, #6]
    6fbc:	2100      	movs	r1, #0
    6fbe:	f007 fb3e 	bl	e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6fc2:	0004      	movs	r4, r0
    6fc4:	d00f      	beq.n	6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6fc6:	8820      	ldrh	r0, [r4, #0]
    6fc8:	f007 fb9c 	bl	e704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6fcc:	8820      	ldrh	r0, [r4, #0]
    6fce:	2100      	movs	r1, #0
    6fd0:	f7fe f920 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6fd4:	b138      	cbz	r0, 6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6fd6:	f240 2192 	movw	r1, #658	; 0x292
    6fda:	202b      	movs	r0, #43	; 0x2b
    6fdc:	f7fd fe9c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fe0:	4620      	mov	r0, r4
    6fe2:	f000 f85b 	bl	709c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    6fe6:	2001      	movs	r0, #1
    6fe8:	bd70      	pop	{r4, r5, r6, pc}
    6fea:	4d09      	ldr	r5, [pc, #36]	; (7010 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x78>)
    6fec:	7868      	ldrb	r0, [r5, #1]
    6fee:	2800      	cmp	r0, #0
    6ff0:	d0fa      	beq.n	6fe8 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x50>
    6ff2:	2600      	movs	r6, #0
    6ff4:	7066      	strb	r6, [r4, #1]
    6ff6:	2014      	movs	r0, #20
    6ff8:	7020      	strb	r0, [r4, #0]
    6ffa:	2220      	movs	r2, #32
    6ffc:	4631      	mov	r1, r6
    6ffe:	1d20      	adds	r0, r4, #4
    7000:	f006 fafa 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7004:	2002      	movs	r0, #2
    7006:	7120      	strb	r0, [r4, #4]
    7008:	706e      	strb	r6, [r5, #1]
    700a:	e7ec      	b.n	6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    700c:	20000214 	.word	0x20000214
    7010:	20001270 	.word	0x20001270

00007014 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    7014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7018:	4c12      	ldr	r4, [pc, #72]	; (7064 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    701a:	4607      	mov	r7, r0
    701c:	460e      	mov	r6, r1
    701e:	7de0      	ldrb	r0, [r4, #23]
    7020:	b110      	cbz	r0, 7028 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    7022:	8b20      	ldrh	r0, [r4, #24]
    7024:	2800      	cmp	r0, #0
    7026:	d012      	beq.n	704e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7028:	480e      	ldr	r0, [pc, #56]	; (7064 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    702a:	300e      	adds	r0, #14
    702c:	4680      	mov	r8, r0
    702e:	f007 ffb9 	bl	efa4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7032:	b9a8      	cbnz	r0, 7060 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    7034:	89e5      	ldrh	r5, [r4, #14]
    7036:	89e0      	ldrh	r0, [r4, #14]
    7038:	4632      	mov	r2, r6
    703a:	4639      	mov	r1, r7
    703c:	f007 ffb5 	bl	efaa <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x6>
    7040:	b138      	cbz	r0, 7052 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    7042:	7de0      	ldrb	r0, [r4, #23]
    7044:	b110      	cbz	r0, 704c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    7046:	8b20      	ldrh	r0, [r4, #24]
    7048:	1e40      	subs	r0, r0, #1
    704a:	8320      	strh	r0, [r4, #24]
    704c:	2001      	movs	r0, #1
    704e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7052:	4640      	mov	r0, r8
    7054:	f007 ffa6 	bl	efa4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7058:	b910      	cbnz	r0, 7060 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    705a:	89e0      	ldrh	r0, [r4, #14]
    705c:	42a8      	cmp	r0, r5
    705e:	d1ea      	bne.n	7036 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    7060:	2000      	movs	r0, #0
    7062:	e7f4      	b.n	704e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7064:	20001270 	.word	0x20001270

00007068 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    7068:	b510      	push	{r4, lr}
    706a:	7901      	ldrb	r1, [r0, #4]
    706c:	b119      	cbz	r1, 7076 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    706e:	2901      	cmp	r1, #1
    7070:	d006      	beq.n	7080 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    7072:	2000      	movs	r0, #0
    7074:	bd10      	pop	{r4, pc}
    7076:	8842      	ldrh	r2, [r0, #2]
    7078:	6883      	ldr	r3, [r0, #8]
    707a:	8800      	ldrh	r0, [r0, #0]
    707c:	2102      	movs	r1, #2
    707e:	e003      	b.n	7088 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    7080:	8842      	ldrh	r2, [r0, #2]
    7082:	6883      	ldr	r3, [r0, #8]
    7084:	8800      	ldrh	r0, [r0, #0]
    7086:	2101      	movs	r1, #1
    7088:	f000 f878 	bl	717c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x114>
    708c:	b910      	cbnz	r0, 7094 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    708e:	4902      	ldr	r1, [pc, #8]	; (7098 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    7090:	2001      	movs	r0, #1
    7092:	7008      	strb	r0, [r1, #0]
    7094:	2001      	movs	r0, #1
    7096:	bd10      	pop	{r4, pc}
    7098:	20001270 	.word	0x20001270
    709c:	b570      	push	{r4, r5, r6, lr}
    709e:	4604      	mov	r4, r0
    70a0:	7800      	ldrb	r0, [r0, #0]
    70a2:	2805      	cmp	r0, #5
    70a4:	d002      	beq.n	70ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x44>
    70a6:	f240 1187 	movw	r1, #391	; 0x187
    70aa:	e059      	b.n	7160 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    70ac:	7ba0      	ldrb	r0, [r4, #14]
    70ae:	06c0      	lsls	r0, r0, #27
    70b0:	d402      	bmi.n	70b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x50>
    70b2:	f44f 71c4 	mov.w	r1, #392	; 0x188
    70b6:	e053      	b.n	7160 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    70b8:	221c      	movs	r2, #28
    70ba:	1d21      	adds	r1, r4, #4
    70bc:	482e      	ldr	r0, [pc, #184]	; (7178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    70be:	f006 fa21 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    70c2:	482d      	ldr	r0, [pc, #180]	; (7178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    70c4:	7b22      	ldrb	r2, [r4, #12]
    70c6:	f104 0120 	add.w	r1, r4, #32
    70ca:	301c      	adds	r0, #28
    70cc:	f006 fa1a 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    70d0:	4829      	ldr	r0, [pc, #164]	; (7178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    70d2:	f04f 0201 	mov.w	r2, #1
    70d6:	7a81      	ldrb	r1, [r0, #10]
    70d8:	0749      	lsls	r1, r1, #29
    70da:	d502      	bpl.n	70e2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7a>
    70dc:	7cc1      	ldrb	r1, [r0, #19]
    70de:	29fe      	cmp	r1, #254	; 0xfe
    70e0:	d00c      	beq.n	70fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x94>
    70e2:	2304      	movs	r3, #4
    70e4:	7023      	strb	r3, [r4, #0]
    70e6:	6801      	ldr	r1, [r0, #0]
    70e8:	6061      	str	r1, [r4, #4]
    70ea:	6841      	ldr	r1, [r0, #4]
    70ec:	60a1      	str	r1, [r4, #8]
    70ee:	8901      	ldrh	r1, [r0, #8]
    70f0:	81a1      	strh	r1, [r4, #12]
    70f2:	7a81      	ldrb	r1, [r0, #10]
    70f4:	070d      	lsls	r5, r1, #28
    70f6:	d519      	bpl.n	712c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    70f8:	73a3      	strb	r3, [r4, #14]
    70fa:	e02c      	b.n	7156 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    70fc:	2113      	movs	r1, #19
    70fe:	7021      	strb	r1, [r4, #0]
    7100:	7801      	ldrb	r1, [r0, #0]
    7102:	7121      	strb	r1, [r4, #4]
    7104:	7162      	strb	r2, [r4, #5]
    7106:	7841      	ldrb	r1, [r0, #1]
    7108:	71a1      	strb	r1, [r4, #6]
    710a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    710e:	f8c4 1007 	str.w	r1, [r4, #7]
    7112:	88c1      	ldrh	r1, [r0, #6]
    7114:	f8a4 100b 	strh.w	r1, [r4, #11]
    7118:	21fe      	movs	r1, #254	; 0xfe
    711a:	7361      	strb	r1, [r4, #13]
    711c:	6941      	ldr	r1, [r0, #20]
    711e:	f8c4 100e 	str.w	r1, [r4, #14]
    7122:	8b01      	ldrh	r1, [r0, #24]
    7124:	8261      	strh	r1, [r4, #18]
    7126:	7a40      	ldrb	r0, [r0, #9]
    7128:	7520      	strb	r0, [r4, #20]
    712a:	bd70      	pop	{r4, r5, r6, pc}
    712c:	07cb      	lsls	r3, r1, #31
    712e:	d003      	beq.n	7138 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    7130:	078b      	lsls	r3, r1, #30
    7132:	d501      	bpl.n	7138 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    7134:	2100      	movs	r1, #0
    7136:	e00d      	b.n	7154 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    7138:	074b      	lsls	r3, r1, #29
    713a:	d501      	bpl.n	7140 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd8>
    713c:	73a2      	strb	r2, [r4, #14]
    713e:	e00a      	b.n	7156 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    7140:	07ca      	lsls	r2, r1, #31
    7142:	d002      	beq.n	714a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe2>
    7144:	f240 11cf 	movw	r1, #463	; 0x1cf
    7148:	e00a      	b.n	7160 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    714a:	0789      	lsls	r1, r1, #30
    714c:	d501      	bpl.n	7152 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xea>
    714e:	2102      	movs	r1, #2
    7150:	e000      	b.n	7154 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    7152:	2103      	movs	r1, #3
    7154:	73a1      	strb	r1, [r4, #14]
    7156:	7a02      	ldrb	r2, [r0, #8]
    7158:	2a1f      	cmp	r2, #31
    715a:	d904      	bls.n	7166 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfe>
    715c:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    7160:	202b      	movs	r0, #43	; 0x2b
    7162:	f7fd fdd9 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7166:	f104 000f 	add.w	r0, r4, #15
    716a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    716e:	4902      	ldr	r1, [pc, #8]	; (7178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    7170:	311c      	adds	r1, #28
    7172:	f006 b9c7 	b.w	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7176:	0000      	.short	0x0000
    7178:	20001234 	.word	0x20001234
    717c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    7180:	468a      	mov	sl, r1
    7182:	4699      	mov	r9, r3
    7184:	4615      	mov	r5, r2
    7186:	4604      	mov	r4, r0
    7188:	a901      	add	r1, sp, #4
    718a:	f007 fbd6 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    718e:	bbd8      	cbnz	r0, 7208 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a0>
    7190:	9f02      	ldr	r7, [sp, #8]
    7192:	2001      	movs	r0, #1
    7194:	3778      	adds	r7, #120	; 0x78
    7196:	b18d      	cbz	r5, 71bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x154>
    7198:	4620      	mov	r0, r4
    719a:	f7fe f9d1 	bl	5540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    719e:	0004      	movs	r4, r0
    71a0:	d00e      	beq.n	71c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x158>
    71a2:	4629      	mov	r1, r5
    71a4:	f007 f8ad 	bl	e302 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    71a8:	0006      	movs	r6, r0
    71aa:	d003      	beq.n	71b4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14c>
    71ac:	4819      	ldr	r0, [pc, #100]	; (7214 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1ac>)
    71ae:	8880      	ldrh	r0, [r0, #4]
    71b0:	42a8      	cmp	r0, r5
    71b2:	d207      	bcs.n	71c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x15c>
    71b4:	2000      	movs	r0, #0
    71b6:	b004      	add	sp, #16
    71b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    71bc:	7538      	strb	r0, [r7, #20]
    71be:	e023      	b.n	7208 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a0>
    71c0:	2189      	movs	r1, #137	; 0x89
    71c2:	e024      	b.n	720e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a6>
    71c4:	4620      	mov	r0, r4
    71c6:	4631      	mov	r1, r6
    71c8:	aa03      	add	r2, sp, #12
    71ca:	f007 f893 	bl	e2f4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    71ce:	9803      	ldr	r0, [sp, #12]
    71d0:	f04f 0800 	mov.w	r8, #0
    71d4:	f8a0 8000 	strh.w	r8, [r0]
    71d8:	f880 8002 	strb.w	r8, [r0, #2]
    71dc:	7d39      	ldrb	r1, [r7, #20]
    71de:	b109      	cbz	r1, 71e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17c>
    71e0:	f04f 0a02 	mov.w	sl, #2
    71e4:	4651      	mov	r1, sl
    71e6:	f007 fe57 	bl	ee98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    71ea:	4631      	mov	r1, r6
    71ec:	2603      	movs	r6, #3
    71ee:	4620      	mov	r0, r4
    71f0:	464a      	mov	r2, r9
    71f2:	462b      	mov	r3, r5
    71f4:	9600      	str	r6, [sp, #0]
    71f6:	f006 ff3a 	bl	e06e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    71fa:	4620      	mov	r0, r4
    71fc:	4629      	mov	r1, r5
    71fe:	f007 f80f 	bl	e220 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    7202:	b118      	cbz	r0, 720c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a4>
    7204:	f887 8014 	strb.w	r8, [r7, #20]
    7208:	2001      	movs	r0, #1
    720a:	e7d4      	b.n	71b6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14e>
    720c:	219f      	movs	r1, #159	; 0x9f
    720e:	202b      	movs	r0, #43	; 0x2b
    7210:	f7fd fd82 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7214:	20001270 	.word	0x20001270
    7218:	b510      	push	{r4, lr}
    721a:	492c      	ldr	r1, [pc, #176]	; (72cc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>)
    721c:	b086      	sub	sp, #24
    721e:	7d8a      	ldrb	r2, [r1, #22]
    7220:	7801      	ldrb	r1, [r0, #0]
    7222:	07d3      	lsls	r3, r2, #31
    7224:	d101      	bne.n	722a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1c2>
    7226:	291d      	cmp	r1, #29
    7228:	d004      	beq.n	7234 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1cc>
    722a:	291c      	cmp	r1, #28
    722c:	d01e      	beq.n	726c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x204>
    722e:	2915      	cmp	r1, #21
    7230:	d045      	beq.n	72be <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x256>
    7232:	e049      	b.n	72c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    7234:	8880      	ldrh	r0, [r0, #4]
    7236:	f8ad 0000 	strh.w	r0, [sp]
    723a:	a902      	add	r1, sp, #8
    723c:	f007 fb7d 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7240:	b108      	cbz	r0, 7246 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1de>
    7242:	2158      	movs	r1, #88	; 0x58
    7244:	e035      	b.n	72b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    7246:	9803      	ldr	r0, [sp, #12]
    7248:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    724c:	f88d 1002 	strb.w	r1, [sp, #2]
    7250:	7841      	ldrb	r1, [r0, #1]
    7252:	f88d 1003 	strb.w	r1, [sp, #3]
    7256:	8840      	ldrh	r0, [r0, #2]
    7258:	f8ad 0004 	strh.w	r0, [sp, #4]
    725c:	2102      	movs	r1, #2
    725e:	4668      	mov	r0, sp
    7260:	f004 fc7e 	bl	bb60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7264:	b340      	cbz	r0, 72b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    7266:	f240 114d 	movw	r1, #333	; 0x14d
    726a:	e022      	b.n	72b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    726c:	0791      	lsls	r1, r2, #30
    726e:	d42b      	bmi.n	72c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    7270:	8884      	ldrh	r4, [r0, #4]
    7272:	a903      	add	r1, sp, #12
    7274:	4620      	mov	r0, r4
    7276:	f008 fdfc 	bl	fe72 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    727a:	b110      	cbz	r0, 7282 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21a>
    727c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    7280:	e017      	b.n	72b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    7282:	f8ad 4000 	strh.w	r4, [sp]
    7286:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    728a:	f8ad 0002 	strh.w	r0, [sp, #2]
    728e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7292:	f8ad 0004 	strh.w	r0, [sp, #4]
    7296:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    729a:	f8ad 0006 	strh.w	r0, [sp, #6]
    729e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    72a2:	f8ad 0008 	strh.w	r0, [sp, #8]
    72a6:	4668      	mov	r0, sp
    72a8:	f008 fe0e 	bl	fec8 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    72ac:	b120      	cbz	r0, 72b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    72ae:	f240 115d 	movw	r1, #349	; 0x15d
    72b2:	202b      	movs	r0, #43	; 0x2b
    72b4:	f7fd fd30 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72b8:	2001      	movs	r0, #1
    72ba:	b006      	add	sp, #24
    72bc:	bd10      	pop	{r4, pc}
    72be:	0751      	lsls	r1, r2, #29
    72c0:	d402      	bmi.n	72c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    72c2:	7b80      	ldrb	r0, [r0, #14]
    72c4:	07c0      	lsls	r0, r0, #31
    72c6:	d0f7      	beq.n	72b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    72c8:	2000      	movs	r0, #0
    72ca:	e7f6      	b.n	72ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x252>
    72cc:	20001270 	.word	0x20001270

000072d0 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q>:
    72d0:	b510      	push	{r4, lr}
    72d2:	4603      	mov	r3, r0
    72d4:	4907      	ldr	r1, [pc, #28]	; (72f4 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0x24>)
    72d6:	4c08      	ldr	r4, [pc, #32]	; (72f8 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0x28>)
    72d8:	2001      	movs	r0, #1
    72da:	780a      	ldrb	r2, [r1, #0]
    72dc:	1c52      	adds	r2, r2, #1
    72de:	f002 021f 	and.w	r2, r2, #31
    72e2:	700a      	strb	r2, [r1, #0]
    72e4:	fa00 f202 	lsl.w	r2, r0, r2
    72e8:	4222      	tst	r2, r4
    72ea:	d0f6      	beq.n	72da <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0xa>
    72ec:	7809      	ldrb	r1, [r1, #0]
    72ee:	4088      	lsls	r0, r1
    72f0:	4058      	eors	r0, r3
    72f2:	bd10      	pop	{r4, pc}
    72f4:	20000295 	.word	0x20000295
    72f8:	abd7aeaa 	.word	0xabd7aeaa

000072fc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    72fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    72fe:	f06f 021f 	mvn.w	r2, #31
    7302:	0c01      	lsrs	r1, r0, #16
    7304:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    7308:	251f      	movs	r5, #31
    730a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    730e:	3854      	subs	r0, #84	; 0x54
    7310:	d00d      	beq.n	732e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7312:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7316:	3855      	subs	r0, #85	; 0x55
    7318:	d009      	beq.n	732e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    731a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    731e:	38aa      	subs	r0, #170	; 0xaa
    7320:	d005      	beq.n	732e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7322:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    7326:	38aa      	subs	r0, #170	; 0xaa
    7328:	d001      	beq.n	732e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    732a:	2001      	movs	r0, #1
    732c:	e000      	b.n	7330 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    732e:	2000      	movs	r0, #0
    7330:	2200      	movs	r2, #0
    7332:	4613      	mov	r3, r2
    7334:	ea4f 0402 	mov.w	r4, r2
    7338:	ea82 0701 	eor.w	r7, r2, r1
    733c:	43ff      	mvns	r7, r7
    733e:	431f      	orrs	r7, r3
    7340:	1c7f      	adds	r7, r7, #1
    7342:	d00f      	beq.n	7364 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    7344:	f006 0701 	and.w	r7, r6, #1
    7348:	0852      	lsrs	r2, r2, #1
    734a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    734e:	f005 0701 	and.w	r7, r5, #1
    7352:	085b      	lsrs	r3, r3, #1
    7354:	0876      	lsrs	r6, r6, #1
    7356:	086d      	lsrs	r5, r5, #1
    7358:	1c64      	adds	r4, r4, #1
    735a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    735e:	2c16      	cmp	r4, #22
    7360:	d3ea      	bcc.n	7338 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    7362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7364:	2000      	movs	r0, #0
    7366:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007368 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    7368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    736c:	2500      	movs	r5, #0
    736e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 73fc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x94>
    7372:	f8df 908c 	ldr.w	r9, [pc, #140]	; 7400 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x98>
    7376:	4607      	mov	r7, r0
    7378:	260a      	movs	r6, #10
    737a:	2104      	movs	r1, #4
    737c:	4668      	mov	r0, sp
    737e:	f7fd fd75 	bl	4e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    7382:	9800      	ldr	r0, [sp, #0]
    7384:	ea00 0008 	and.w	r0, r0, r8
    7388:	ea40 0009 	orr.w	r0, r0, r9
    738c:	9000      	str	r0, [sp, #0]
    738e:	2000      	movs	r0, #0
    7390:	f7fd fea6 	bl	50e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7394:	4604      	mov	r4, r0
    7396:	e019      	b.n	73cc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x64>
    7398:	a901      	add	r1, sp, #4
    739a:	2000      	movs	r0, #0
    739c:	f007 f958 	bl	e650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    73a0:	e00e      	b.n	73c0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    73a2:	bf00      	nop
    73a4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    73a8:	42b8      	cmp	r0, r7
    73aa:	d009      	beq.n	73c0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    73ac:	9803      	ldr	r0, [sp, #12]
    73ae:	9900      	ldr	r1, [sp, #0]
    73b0:	6900      	ldr	r0, [r0, #16]
    73b2:	4288      	cmp	r0, r1
    73b4:	d104      	bne.n	73c0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    73b6:	4608      	mov	r0, r1
    73b8:	f7ff ff8a 	bl	72d0 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q>
    73bc:	9000      	str	r0, [sp, #0]
    73be:	e004      	b.n	73ca <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x62>
    73c0:	a801      	add	r0, sp, #4
    73c2:	f7fd fed9 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    73c6:	0005      	movs	r5, r0
    73c8:	d0ec      	beq.n	73a4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3c>
    73ca:	1e64      	subs	r4, r4, #1
    73cc:	2c00      	cmp	r4, #0
    73ce:	dd01      	ble.n	73d4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x6c>
    73d0:	2d00      	cmp	r5, #0
    73d2:	d0e1      	beq.n	7398 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x30>
    73d4:	2000      	movs	r0, #0
    73d6:	f7fd fe83 	bl	50e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    73da:	b100      	cbz	r0, 73de <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    73dc:	b155      	cbz	r5, 73f4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8c>
    73de:	9800      	ldr	r0, [sp, #0]
    73e0:	f7ff ff8c 	bl	72fc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    73e4:	1e76      	subs	r6, r6, #1
    73e6:	d001      	beq.n	73ec <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x84>
    73e8:	2800      	cmp	r0, #0
    73ea:	d0c6      	beq.n	737a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x12>
    73ec:	9800      	ldr	r0, [sp, #0]
    73ee:	b004      	add	sp, #16
    73f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    73f4:	2152      	movs	r1, #82	; 0x52
    73f6:	200f      	movs	r0, #15
    73f8:	f7fd fc8e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73fc:	abd7aeaa 	.word	0xabd7aeaa
    7400:	10204115 	.word	0x10204115

00007404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    7404:	4801      	ldr	r0, [pc, #4]	; (740c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    7406:	6840      	ldr	r0, [r0, #4]
    7408:	3080      	adds	r0, #128	; 0x80
    740a:	4770      	bx	lr
    740c:	200000ec 	.word	0x200000ec

00007410 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    7410:	b510      	push	{r4, lr}
    7412:	4c1f      	ldr	r4, [pc, #124]	; (7490 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    7414:	6860      	ldr	r0, [r4, #4]
    7416:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    741a:	f007 ff77 	bl	f30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    741e:	6861      	ldr	r1, [r4, #4]
    7420:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    7424:	3132      	adds	r1, #50	; 0x32
    7426:	f7fe fabd 	bl	59a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    742a:	6860      	ldr	r0, [r4, #4]
    742c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    7430:	f007 ff73 	bl	f31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    7434:	6861      	ldr	r1, [r4, #4]
    7436:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    743a:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    743e:	3132      	adds	r1, #50	; 0x32
    7440:	f007 ff50 	bl	f2e4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    7444:	b930      	cbnz	r0, 7454 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    7446:	6861      	ldr	r1, [r4, #4]
    7448:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    744c:	3132      	adds	r1, #50	; 0x32
    744e:	f007 ff52 	bl	f2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7452:	b108      	cbz	r0, 7458 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    7454:	2101      	movs	r1, #1
    7456:	e000      	b.n	745a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    7458:	2100      	movs	r1, #0
    745a:	6860      	ldr	r0, [r4, #4]
    745c:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    7460:	b919      	cbnz	r1, 746a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    7462:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    7466:	2900      	cmp	r1, #0
    7468:	d010      	beq.n	748c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    746a:	2100      	movs	r1, #0
    746c:	6781      	str	r1, [r0, #120]	; 0x78
    746e:	f005 fed4 	bl	d21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7472:	6861      	ldr	r1, [r4, #4]
    7474:	6448      	str	r0, [r1, #68]	; 0x44
    7476:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    747a:	b110      	cbz	r0, 7482 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    747c:	2000      	movs	r0, #0
    747e:	f7ff f883 	bl	6588 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    7482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7486:	2000      	movs	r0, #0
    7488:	f000 bddc 	b.w	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    748c:	bd10      	pop	{r4, pc}
    748e:	0000      	.short	0x0000
    7490:	200000ec 	.word	0x200000ec

00007494 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    7494:	b510      	push	{r4, lr}
    7496:	4c09      	ldr	r4, [pc, #36]	; (74bc <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    7498:	2803      	cmp	r0, #3
    749a:	6864      	ldr	r4, [r4, #4]
    749c:	d109      	bne.n	74b2 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    749e:	63e1      	str	r1, [r4, #60]	; 0x3c
    74a0:	b13b      	cbz	r3, 74b2 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    74a2:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    74a6:	6819      	ldr	r1, [r3, #0]
    74a8:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    74ac:	8899      	ldrh	r1, [r3, #4]
    74ae:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    74b2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    74b6:	2000      	movs	r0, #0
    74b8:	bd10      	pop	{r4, pc}
    74ba:	0000      	.short	0x0000
    74bc:	200000ec 	.word	0x200000ec

000074c0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    74c0:	4807      	ldr	r0, [pc, #28]	; (74e0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
    74c2:	b508      	push	{r3, lr}
    74c4:	6840      	ldr	r0, [r0, #4]
    74c6:	7801      	ldrb	r1, [r0, #0]
    74c8:	f88d 1000 	strb.w	r1, [sp]
    74cc:	9900      	ldr	r1, [sp, #0]
    74ce:	9100      	str	r1, [sp, #0]
    74d0:	f89d 1000 	ldrb.w	r1, [sp]
    74d4:	b109      	cbz	r1, 74da <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
    74d6:	8880      	ldrh	r0, [r0, #4]
    74d8:	bd08      	pop	{r3, pc}
    74da:	f64f 70ff 	movw	r0, #65535	; 0xffff
    74de:	bd08      	pop	{r3, pc}
    74e0:	200000ec 	.word	0x200000ec

000074e4 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    74e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74e6:	4604      	mov	r4, r0
    74e8:	f007 ff60 	bl	f3ac <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    74ec:	bb48      	cbnz	r0, 7542 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    74ee:	4e17      	ldr	r6, [pc, #92]	; (754c <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    74f0:	6870      	ldr	r0, [r6, #4]
    74f2:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    74f6:	f88d 1000 	strb.w	r1, [sp]
    74fa:	9900      	ldr	r1, [sp, #0]
    74fc:	9100      	str	r1, [sp, #0]
    74fe:	f89d 1000 	ldrb.w	r1, [sp]
    7502:	2500      	movs	r5, #0
    7504:	b139      	cbz	r1, 7516 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    7506:	7065      	strb	r5, [r4, #1]
    7508:	2107      	movs	r1, #7
    750a:	7021      	strb	r1, [r4, #0]
    750c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    750e:	6061      	str	r1, [r4, #4]
    7510:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    7514:	e015      	b.n	7542 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    7516:	4620      	mov	r0, r4
    7518:	f000 f9d0 	bl	78bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    751c:	b988      	cbnz	r0, 7542 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    751e:	6870      	ldr	r0, [r6, #4]
    7520:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    7524:	f88d 1000 	strb.w	r1, [sp]
    7528:	9900      	ldr	r1, [sp, #0]
    752a:	9100      	str	r1, [sp, #0]
    752c:	f89d 1000 	ldrb.w	r1, [sp]
    7530:	b149      	cbz	r1, 7546 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    7532:	7065      	strb	r5, [r4, #1]
    7534:	2118      	movs	r1, #24
    7536:	7021      	strb	r1, [r4, #0]
    7538:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    753c:	6061      	str	r1, [r4, #4]
    753e:	300a      	adds	r0, #10
    7540:	7785      	strb	r5, [r0, #30]
    7542:	2001      	movs	r0, #1
    7544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7546:	2000      	movs	r0, #0
    7548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    754a:	0000      	.short	0x0000
    754c:	200000ec 	.word	0x200000ec

00007550 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    7550:	4902      	ldr	r1, [pc, #8]	; (755c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    7552:	6849      	ldr	r1, [r1, #4]
    7554:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    7558:	2000      	movs	r0, #0
    755a:	4770      	bx	lr
    755c:	200000ec 	.word	0x200000ec

00007560 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    7560:	4809      	ldr	r0, [pc, #36]	; (7588 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    7562:	6841      	ldr	r1, [r0, #4]
    7564:	6d48      	ldr	r0, [r1, #84]	; 0x54
    7566:	b168      	cbz	r0, 7584 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    7568:	f101 0059 	add.w	r0, r1, #89	; 0x59
    756c:	2201      	movs	r2, #1
    756e:	7002      	strb	r2, [r0, #0]
    7570:	2300      	movs	r3, #0
    7572:	654b      	str	r3, [r1, #84]	; 0x54
    7574:	7003      	strb	r3, [r0, #0]
    7576:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    757a:	4082      	lsls	r2, r0
    757c:	4803      	ldr	r0, [pc, #12]	; (758c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    757e:	6002      	str	r2, [r0, #0]
    7580:	2000      	movs	r0, #0
    7582:	4770      	bx	lr
    7584:	200c      	movs	r0, #12
    7586:	4770      	bx	lr
    7588:	200000ec 	.word	0x200000ec
    758c:	4001f508 	.word	0x4001f508

00007590 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    7590:	4909      	ldr	r1, [pc, #36]	; (75b8 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    7592:	b510      	push	{r4, lr}
    7594:	6088      	str	r0, [r1, #8]
    7596:	68c8      	ldr	r0, [r1, #12]
    7598:	b150      	cbz	r0, 75b0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    759a:	f000 ff55 	bl	8448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    759e:	f000 f885 	bl	76ac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    75a2:	2800      	cmp	r0, #0
    75a4:	d007      	beq.n	75b6 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    75a6:	f640 0169 	movw	r1, #2153	; 0x869
    75aa:	2032      	movs	r0, #50	; 0x32
    75ac:	f7fd fbb4 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75b0:	f640 0165 	movw	r1, #2149	; 0x865
    75b4:	e7f9      	b.n	75aa <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    75b6:	bd10      	pop	{r4, pc}
    75b8:	200000ec 	.word	0x200000ec

000075bc <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    75bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75c0:	4c0f      	ldr	r4, [pc, #60]	; (7600 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    75c2:	4605      	mov	r5, r0
    75c4:	4616      	mov	r6, r2
    75c6:	6860      	ldr	r0, [r4, #4]
    75c8:	460f      	mov	r7, r1
    75ca:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    75ce:	f007 fea4 	bl	f31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    75d2:	b158      	cbz	r0, 75ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    75d4:	b955      	cbnz	r5, 75ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    75d6:	4638      	mov	r0, r7
    75d8:	f007 fe98 	bl	f30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    75dc:	4631      	mov	r1, r6
    75de:	f007 f932 	bl	e846 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    75e2:	2808      	cmp	r0, #8
    75e4:	d002      	beq.n	75ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    75e6:	2001      	movs	r0, #1
    75e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75ec:	6860      	ldr	r0, [r4, #4]
    75ee:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    75f2:	f007 fe8b 	bl	f30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    75f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    75fa:	f7fe b9ff 	b.w	59fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    75fe:	0000      	.short	0x0000
    7600:	200000ec 	.word	0x200000ec

00007604 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    7604:	b570      	push	{r4, r5, r6, lr}
    7606:	4c13      	ldr	r4, [pc, #76]	; (7654 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    7608:	4615      	mov	r5, r2
    760a:	460e      	mov	r6, r1
    760c:	2800      	cmp	r0, #0
    760e:	d016      	beq.n	763e <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    7610:	f04f 0200 	mov.w	r2, #0
    7614:	6861      	ldr	r1, [r4, #4]
    7616:	f801 2f39 	strb.w	r2, [r1, #57]!
    761a:	7248      	strb	r0, [r1, #9]
    761c:	f04f 0008 	mov.w	r0, #8
    7620:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
    7624:	d114      	bne.n	7650 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    7626:	4630      	mov	r0, r6
    7628:	f007 fe70 	bl	f30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    762c:	4629      	mov	r1, r5
    762e:	f007 f90a 	bl	e846 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7632:	6861      	ldr	r1, [r4, #4]
    7634:	2808      	cmp	r0, #8
    7636:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
    763a:	d003      	beq.n	7644 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    763c:	e008      	b.n	7650 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    763e:	f04f 0201 	mov.w	r2, #1
    7642:	e7e7      	b.n	7614 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    7644:	4630      	mov	r0, r6
    7646:	f007 fe68 	bl	f31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    764a:	b108      	cbz	r0, 7650 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    764c:	2012      	movs	r0, #18
    764e:	bd70      	pop	{r4, r5, r6, pc}
    7650:	2000      	movs	r0, #0
    7652:	bd70      	pop	{r4, r5, r6, pc}
    7654:	200000ec 	.word	0x200000ec

00007658 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    7658:	4902      	ldr	r1, [pc, #8]	; (7664 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    765a:	4801      	ldr	r0, [pc, #4]	; (7660 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    765c:	60c8      	str	r0, [r1, #12]
    765e:	4770      	bx	lr
    7660:	0000868c 	.word	0x0000868c
    7664:	200000ec 	.word	0x200000ec

00007668 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    7668:	4902      	ldr	r1, [pc, #8]	; (7674 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    766a:	6849      	ldr	r1, [r1, #4]
    766c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    7670:	4770      	bx	lr
    7672:	0000      	.short	0x0000
    7674:	200000ec 	.word	0x200000ec

00007678 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    7678:	b570      	push	{r4, r5, r6, lr}
    767a:	4605      	mov	r5, r0
    767c:	f7fd ff78 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7680:	4604      	mov	r4, r0
    7682:	f7fd ff7b 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7686:	4621      	mov	r1, r4
    7688:	f007 fe8e 	bl	f3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    768c:	0001      	movs	r1, r0
    768e:	d006      	beq.n	769e <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    7690:	4805      	ldr	r0, [pc, #20]	; (76a8 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    7692:	68c0      	ldr	r0, [r0, #12]
    7694:	6802      	ldr	r2, [r0, #0]
    7696:	4628      	mov	r0, r5
    7698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    769c:	4710      	bx	r2
    769e:	f640 1161 	movw	r1, #2401	; 0x961
    76a2:	2032      	movs	r0, #50	; 0x32
    76a4:	f7fd fb38 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76a8:	200000ec 	.word	0x200000ec

000076ac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    76ac:	b570      	push	{r4, r5, r6, lr}
    76ae:	4d19      	ldr	r5, [pc, #100]	; (7714 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    76b0:	6868      	ldr	r0, [r5, #4]
    76b2:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    76b6:	2901      	cmp	r1, #1
    76b8:	d004      	beq.n	76c4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    76ba:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    76be:	b108      	cbz	r0, 76c4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    76c0:	200c      	movs	r0, #12
    76c2:	bd70      	pop	{r4, r5, r6, pc}
    76c4:	f7fd ff7e 	bl	55c4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    76c8:	f007 fed4 	bl	f474 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    76cc:	6868      	ldr	r0, [r5, #4]
    76ce:	2400      	movs	r4, #0
    76d0:	7004      	strb	r4, [r0, #0]
    76d2:	f100 0122 	add.w	r1, r0, #34	; 0x22
    76d6:	700c      	strb	r4, [r1, #0]
    76d8:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    76dc:	f000 f8b4 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    76e0:	6868      	ldr	r0, [r5, #4]
    76e2:	2201      	movs	r2, #1
    76e4:	2107      	movs	r1, #7
    76e6:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    76ea:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    76ee:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    76f2:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    76f6:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    76fa:	f880 407d 	strb.w	r4, [r0, #125]	; 0x7d
    76fe:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    7702:	f100 0159 	add.w	r1, r0, #89	; 0x59
    7706:	700a      	strb	r2, [r1, #0]
    7708:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    770c:	6544      	str	r4, [r0, #84]	; 0x54
    770e:	700c      	strb	r4, [r1, #0]
    7710:	2000      	movs	r0, #0
    7712:	bd70      	pop	{r4, r5, r6, pc}
    7714:	200000ec 	.word	0x200000ec

00007718 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    7718:	4805      	ldr	r0, [pc, #20]	; (7730 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    771a:	b510      	push	{r4, lr}
    771c:	6840      	ldr	r0, [r0, #4]
    771e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    7722:	f007 fdf3 	bl	f30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    7726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    772a:	f7fe b967 	b.w	59fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    772e:	0000      	.short	0x0000
    7730:	200000ec 	.word	0x200000ec

00007734 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    7734:	b140      	cbz	r0, 7748 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    7736:	2802      	cmp	r0, #2
    7738:	d006      	beq.n	7748 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    773a:	2200      	movs	r2, #0
    773c:	4903      	ldr	r1, [pc, #12]	; (774c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    773e:	6849      	ldr	r1, [r1, #4]
    7740:	f801 2f39 	strb.w	r2, [r1, #57]!
    7744:	7208      	strb	r0, [r1, #8]
    7746:	4770      	bx	lr
    7748:	2201      	movs	r2, #1
    774a:	e7f7      	b.n	773c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    774c:	200000ec 	.word	0x200000ec

00007750 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    7750:	4902      	ldr	r1, [pc, #8]	; (775c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    7752:	6849      	ldr	r1, [r1, #4]
    7754:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    7758:	4770      	bx	lr
    775a:	0000      	.short	0x0000
    775c:	200000ec 	.word	0x200000ec

00007760 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    7760:	b510      	push	{r4, lr}
    7762:	4604      	mov	r4, r0
    7764:	7800      	ldrb	r0, [r0, #0]
    7766:	07c0      	lsls	r0, r0, #31
    7768:	d007      	beq.n	777a <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    776a:	2300      	movs	r3, #0
    776c:	7860      	ldrb	r0, [r4, #1]
    776e:	461a      	mov	r2, r3
    7770:	4619      	mov	r1, r3
    7772:	f7ff fe8f 	bl	7494 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    7776:	2800      	cmp	r0, #0
    7778:	d10c      	bne.n	7794 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    777a:	4b07      	ldr	r3, [pc, #28]	; (7798 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    777c:	78a0      	ldrb	r0, [r4, #2]
    777e:	6859      	ldr	r1, [r3, #4]
    7780:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    7784:	78e0      	ldrb	r0, [r4, #3]
    7786:	f7ff ffd5 	bl	7734 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    778a:	6859      	ldr	r1, [r3, #4]
    778c:	7920      	ldrb	r0, [r4, #4]
    778e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    7792:	2000      	movs	r0, #0
    7794:	bd10      	pop	{r4, pc}
    7796:	0000      	.short	0x0000
    7798:	200000ec 	.word	0x200000ec

0000779c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    779c:	4801      	ldr	r0, [pc, #4]	; (77a4 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    779e:	68c0      	ldr	r0, [r0, #12]
    77a0:	6840      	ldr	r0, [r0, #4]
    77a2:	4700      	bx	r0
    77a4:	200000ec 	.word	0x200000ec

000077a8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    77a8:	b510      	push	{r4, lr}
    77aa:	2000      	movs	r0, #0
    77ac:	f000 fc70 	bl	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    77b0:	f000 f84a 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    77b4:	f000 fe48 	bl	8448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    77b8:	4803      	ldr	r0, [pc, #12]	; (77c8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    77ba:	6840      	ldr	r0, [r0, #4]
    77bc:	2100      	movs	r1, #0
    77be:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    77c2:	4608      	mov	r0, r1
    77c4:	bd10      	pop	{r4, pc}
    77c6:	0000      	.short	0x0000
    77c8:	200000ec 	.word	0x200000ec

000077cc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    77cc:	b510      	push	{r4, lr}
    77ce:	f000 f951 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    77d2:	4909      	ldr	r1, [pc, #36]	; (77f8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    77d4:	2201      	movs	r2, #1
    77d6:	b130      	cbz	r0, 77e6 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    77d8:	6848      	ldr	r0, [r1, #4]
    77da:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    77de:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    77e0:	881b      	ldrh	r3, [r3, #0]
    77e2:	8583      	strh	r3, [r0, #44]	; 0x2c
    77e4:	e004      	b.n	77f0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    77e6:	684b      	ldr	r3, [r1, #4]
    77e8:	2000      	movs	r0, #0
    77ea:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    77ee:	8598      	strh	r0, [r3, #44]	; 0x2c
    77f0:	6848      	ldr	r0, [r1, #4]
    77f2:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    77f6:	bd10      	pop	{r4, pc}
    77f8:	200000ec 	.word	0x200000ec

000077fc <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    77fc:	4802      	ldr	r0, [pc, #8]	; (7808 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    77fe:	6840      	ldr	r0, [r0, #4]
    7800:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7804:	4770      	bx	lr
    7806:	0000      	.short	0x0000
    7808:	200000ec 	.word	0x200000ec

0000780c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    780c:	b510      	push	{r4, lr}
    780e:	f000 f931 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7812:	490c      	ldr	r1, [pc, #48]	; (7844 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    7814:	b128      	cbz	r0, 7822 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    7816:	6848      	ldr	r0, [r1, #4]
    7818:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    781c:	2801      	cmp	r0, #1
    781e:	d00e      	beq.n	783e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    7820:	e00c      	b.n	783c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    7822:	6849      	ldr	r1, [r1, #4]
    7824:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    7828:	2801      	cmp	r0, #1
    782a:	d001      	beq.n	7830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    782c:	2802      	cmp	r0, #2
    782e:	d105      	bne.n	783c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    7830:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    7834:	2801      	cmp	r0, #1
    7836:	d003      	beq.n	7840 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    7838:	2803      	cmp	r0, #3
    783a:	d001      	beq.n	7840 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    783c:	2000      	movs	r0, #0
    783e:	bd10      	pop	{r4, pc}
    7840:	2001      	movs	r0, #1
    7842:	bd10      	pop	{r4, pc}
    7844:	200000ec 	.word	0x200000ec
    7848:	b510      	push	{r4, lr}
    784a:	4c07      	ldr	r4, [pc, #28]	; (7868 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    784c:	6860      	ldr	r0, [r4, #4]
    784e:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    7852:	2800      	cmp	r0, #0
    7854:	d007      	beq.n	7866 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    7856:	f004 fe19 	bl	c48c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    785a:	f004 fbfb 	bl	c054 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    785e:	6861      	ldr	r1, [r4, #4]
    7860:	2000      	movs	r0, #0
    7862:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    7866:	bd10      	pop	{r4, pc}
    7868:	200000ec 	.word	0x200000ec
    786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7870:	4d10      	ldr	r5, [pc, #64]	; (78b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    7872:	4606      	mov	r6, r0
    7874:	460f      	mov	r7, r1
    7876:	6868      	ldr	r0, [r5, #4]
    7878:	490f      	ldr	r1, [pc, #60]	; (78b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    787a:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    787e:	5c0c      	ldrb	r4, [r1, r0]
    7880:	4620      	mov	r0, r4
    7882:	f005 f967 	bl	cb54 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    7886:	6868      	ldr	r0, [r5, #4]
    7888:	2101      	movs	r1, #1
    788a:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    788e:	2025      	movs	r0, #37	; 0x25
    7890:	f008 ffb0 	bl	107f4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    7894:	4638      	mov	r0, r7
    7896:	f005 f86f 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    789a:	f04f 0101 	mov.w	r1, #1
    789e:	4608      	mov	r0, r1
    78a0:	b126      	cbz	r6, 78ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    78a2:	f004 fea5 	bl	c5f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    78a6:	b918      	cbnz	r0, 78b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    78a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78ac:	f004 fe54 	bl	c558 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    78b0:	2001      	movs	r0, #1
    78b2:	e7f9      	b.n	78a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    78b4:	200000ec 	.word	0x200000ec
    78b8:	00010930 	.word	0x00010930
    78bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78be:	4e20      	ldr	r6, [pc, #128]	; (7940 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    78c0:	4604      	mov	r4, r0
    78c2:	6870      	ldr	r0, [r6, #4]
    78c4:	7801      	ldrb	r1, [r0, #0]
    78c6:	f88d 1000 	strb.w	r1, [sp]
    78ca:	9900      	ldr	r1, [sp, #0]
    78cc:	9100      	str	r1, [sp, #0]
    78ce:	f89d 1000 	ldrb.w	r1, [sp]
    78d2:	b389      	cbz	r1, 7938 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    78d4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    78d6:	6882      	ldr	r2, [r0, #8]
    78d8:	f841 2f03 	str.w	r2, [r1, #3]!
    78dc:	8982      	ldrh	r2, [r0, #12]
    78de:	808a      	strh	r2, [r1, #4]
    78e0:	79c0      	ldrb	r0, [r0, #7]
    78e2:	f007 fd13 	bl	f30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    78e6:	6871      	ldr	r1, [r6, #4]
    78e8:	2500      	movs	r5, #0
    78ea:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    78ec:	1c89      	adds	r1, r1, #2
    78ee:	7090      	strb	r0, [r2, #2]
    78f0:	7065      	strb	r5, [r4, #1]
    78f2:	2014      	movs	r0, #20
    78f4:	7020      	strb	r0, [r4, #0]
    78f6:	2220      	movs	r2, #32
    78f8:	1d20      	adds	r0, r4, #4
    78fa:	f005 fe03 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    78fe:	4a11      	ldr	r2, [pc, #68]	; (7944 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    7900:	7225      	strb	r5, [r4, #8]
    7902:	2301      	movs	r3, #1
    7904:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7906:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    790a:	6871      	ldr	r1, [r6, #4]
    790c:	700d      	strb	r5, [r1, #0]
    790e:	f101 0028 	add.w	r0, r1, #40	; 0x28
    7912:	7005      	strb	r5, [r0, #0]
    7914:	88e0      	ldrh	r0, [r4, #6]
    7916:	8490      	strh	r0, [r2, #36]	; 0x24
    7918:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    791a:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    791e:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    7922:	4610      	mov	r0, r2
    7924:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    7928:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    792a:	8800      	ldrh	r0, [r0, #0]
    792c:	f7fd fdf2 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7930:	f006 fd70 	bl	e414 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7934:	2001      	movs	r0, #1
    7936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7938:	e7ff      	b.n	793a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    793a:	2000      	movs	r0, #0
    793c:	e7fb      	b.n	7936 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    793e:	0000      	.short	0x0000
    7940:	200000ec 	.word	0x200000ec
    7944:	2000128c 	.word	0x2000128c
    7948:	b570      	push	{r4, r5, r6, lr}
    794a:	4c1d      	ldr	r4, [pc, #116]	; (79c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b4>)
    794c:	4605      	mov	r5, r0
    794e:	2907      	cmp	r1, #7
    7950:	6860      	ldr	r0, [r4, #4]
    7952:	f890 6039 	ldrb.w	r6, [r0, #57]	; 0x39
    7956:	d301      	bcc.n	795c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x150>
    7958:	2000      	movs	r0, #0
    795a:	bd70      	pop	{r4, r5, r6, pc}
    795c:	7c68      	ldrb	r0, [r5, #17]
    795e:	6869      	ldr	r1, [r5, #4]
    7960:	f007 fcc9 	bl	f2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7964:	6861      	ldr	r1, [r4, #4]
    7966:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    796a:	b141      	cbz	r1, 797e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x172>
    796c:	b138      	cbz	r0, 797e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x172>
    796e:	f006 ff60 	bl	e832 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7972:	4601      	mov	r1, r0
    7974:	6860      	ldr	r0, [r4, #4]
    7976:	f800 1f64 	strb.w	r1, [r0, #100]!
    797a:	2101      	movs	r1, #1
    797c:	71c1      	strb	r1, [r0, #7]
    797e:	6863      	ldr	r3, [r4, #4]
    7980:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    7984:	28ff      	cmp	r0, #255	; 0xff
    7986:	d012      	beq.n	79ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a2>
    7988:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
    798c:	f7fe feaa 	bl	66e4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7990:	4330      	orrs	r0, r6
    7992:	6869      	ldr	r1, [r5, #4]
    7994:	2900      	cmp	r1, #0
    7996:	d0e0      	beq.n	795a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14e>
    7998:	6861      	ldr	r1, [r4, #4]
    799a:	7c6a      	ldrb	r2, [r5, #17]
    799c:	f881 2075 	strb.w	r2, [r1, #117]	; 0x75
    79a0:	686a      	ldr	r2, [r5, #4]
    79a2:	6813      	ldr	r3, [r2, #0]
    79a4:	f841 3f6e 	str.w	r3, [r1, #110]!
    79a8:	8892      	ldrh	r2, [r2, #4]
    79aa:	808a      	strh	r2, [r1, #4]
    79ac:	bd70      	pop	{r4, r5, r6, pc}
    79ae:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
    79b2:	7c68      	ldrb	r0, [r5, #17]
    79b4:	3364      	adds	r3, #100	; 0x64
    79b6:	6869      	ldr	r1, [r5, #4]
    79b8:	f7fe ff10 	bl	67dc <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY>
    79bc:	e7e9      	b.n	7992 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x186>
    79be:	0000      	.short	0x0000
    79c0:	200000ec 	.word	0x200000ec
    79c4:	b510      	push	{r4, lr}
    79c6:	4915      	ldr	r1, [pc, #84]	; (7a1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x210>)
    79c8:	6842      	ldr	r2, [r0, #4]
    79ca:	6849      	ldr	r1, [r1, #4]
    79cc:	7813      	ldrb	r3, [r2, #0]
    79ce:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    79d2:	42a3      	cmp	r3, r4
    79d4:	d11f      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79d6:	7853      	ldrb	r3, [r2, #1]
    79d8:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    79dc:	42a3      	cmp	r3, r4
    79de:	d11a      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79e0:	7893      	ldrb	r3, [r2, #2]
    79e2:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    79e6:	42a3      	cmp	r3, r4
    79e8:	d115      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79ea:	78d3      	ldrb	r3, [r2, #3]
    79ec:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    79f0:	42a3      	cmp	r3, r4
    79f2:	d110      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79f4:	7913      	ldrb	r3, [r2, #4]
    79f6:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    79fa:	42a3      	cmp	r3, r4
    79fc:	d10b      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79fe:	7952      	ldrb	r2, [r2, #5]
    7a00:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    7a04:	429a      	cmp	r2, r3
    7a06:	d106      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    7a08:	7c40      	ldrb	r0, [r0, #17]
    7a0a:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    7a0e:	4288      	cmp	r0, r1
    7a10:	d101      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    7a12:	2001      	movs	r0, #1
    7a14:	bd10      	pop	{r4, pc}
    7a16:	2000      	movs	r0, #0
    7a18:	bd10      	pop	{r4, pc}
    7a1a:	0000      	.short	0x0000
    7a1c:	200000ec 	.word	0x200000ec
    7a20:	b530      	push	{r4, r5, lr}
    7a22:	7801      	ldrb	r1, [r0, #0]
    7a24:	b08b      	sub	sp, #44	; 0x2c
    7a26:	f001 040f 	and.w	r4, r1, #15
    7a2a:	4622      	mov	r2, r4
    7a2c:	a901      	add	r1, sp, #4
    7a2e:	f000 feb9 	bl	87a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    7a32:	a801      	add	r0, sp, #4
    7a34:	f7ff ffc6 	bl	79c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b8>
    7a38:	4605      	mov	r5, r0
    7a3a:	f004 fd45 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7a3e:	f000 fb41 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    7a42:	2c04      	cmp	r4, #4
    7a44:	d111      	bne.n	7a6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    7a46:	b185      	cbz	r5, 7a6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    7a48:	a80a      	add	r0, sp, #40	; 0x28
    7a4a:	f000 fb47 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7a4e:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    7a52:	9000      	str	r0, [sp, #0]
    7a54:	4806      	ldr	r0, [pc, #24]	; (7a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x264>)
    7a56:	6840      	ldr	r0, [r0, #4]
    7a58:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    7a5c:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    7a60:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    7a64:	a801      	add	r0, sp, #4
    7a66:	f007 fd07 	bl	f478 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    7a6a:	b00b      	add	sp, #44	; 0x2c
    7a6c:	2005      	movs	r0, #5
    7a6e:	bd30      	pop	{r4, r5, pc}
    7a70:	200000ec 	.word	0x200000ec
    7a74:	4804      	ldr	r0, [pc, #16]	; (7a88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>)
    7a76:	6840      	ldr	r0, [r0, #4]
    7a78:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7a7c:	2803      	cmp	r0, #3
    7a7e:	d001      	beq.n	7a84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x278>
    7a80:	2000      	movs	r0, #0
    7a82:	4770      	bx	lr
    7a84:	2001      	movs	r0, #1
    7a86:	4770      	bx	lr
    7a88:	200000ec 	.word	0x200000ec
    7a8c:	4908      	ldr	r1, [pc, #32]	; (7ab0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a4>)
    7a8e:	b510      	push	{r4, lr}
    7a90:	6849      	ldr	r1, [r1, #4]
    7a92:	7c83      	ldrb	r3, [r0, #18]
    7a94:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    7a98:	429a      	cmp	r2, r3
    7a9a:	d105      	bne.n	7aa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x29c>
    7a9c:	6880      	ldr	r0, [r0, #8]
    7a9e:	2206      	movs	r2, #6
    7aa0:	3132      	adds	r1, #50	; 0x32
    7aa2:	f005 fd1d 	bl	d4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7aa6:	b108      	cbz	r0, 7aac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a0>
    7aa8:	2000      	movs	r0, #0
    7aaa:	bd10      	pop	{r4, pc}
    7aac:	2001      	movs	r0, #1
    7aae:	bd10      	pop	{r4, pc}
    7ab0:	200000ec 	.word	0x200000ec
    7ab4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7ab6:	4c3d      	ldr	r4, [pc, #244]	; (7bac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a0>)
    7ab8:	466f      	mov	r7, sp
    7aba:	6860      	ldr	r0, [r4, #4]
    7abc:	7801      	ldrb	r1, [r0, #0]
    7abe:	f88d 1008 	strb.w	r1, [sp, #8]
    7ac2:	9902      	ldr	r1, [sp, #8]
    7ac4:	9102      	str	r1, [sp, #8]
    7ac6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7aca:	b111      	cbz	r1, 7ad2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c6>
    7acc:	f241 313a 	movw	r1, #4922	; 0x133a
    7ad0:	e04f      	b.n	7b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x366>
    7ad2:	2500      	movs	r5, #0
    7ad4:	7085      	strb	r5, [r0, #2]
    7ad6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7ad8:	880a      	ldrh	r2, [r1, #0]
    7ada:	8082      	strh	r2, [r0, #4]
    7adc:	68c8      	ldr	r0, [r1, #12]
    7ade:	f006 ff3c 	bl	e95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7ae2:	6861      	ldr	r1, [r4, #4]
    7ae4:	8348      	strh	r0, [r1, #26]
    7ae6:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    7ae8:	8a82      	ldrh	r2, [r0, #20]
    7aea:	838a      	strh	r2, [r1, #28]
    7aec:	8ac0      	ldrh	r0, [r0, #22]
    7aee:	83c8      	strh	r0, [r1, #30]
    7af0:	f881 5020 	strb.w	r5, [r1, #32]
    7af4:	4669      	mov	r1, sp
    7af6:	68a0      	ldr	r0, [r4, #8]
    7af8:	f007 fa06 	bl	ef08 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    7afc:	68a0      	ldr	r0, [r4, #8]
    7afe:	7800      	ldrb	r0, [r0, #0]
    7b00:	f3c0 1680 	ubfx	r6, r0, #6, #1
    7b04:	6860      	ldr	r0, [r4, #4]
    7b06:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7b0a:	b120      	cbz	r0, 7b16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30a>
    7b0c:	4639      	mov	r1, r7
    7b0e:	4630      	mov	r0, r6
    7b10:	f007 fbf1 	bl	f2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7b14:	b940      	cbnz	r0, 7b28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x31c>
    7b16:	6860      	ldr	r0, [r4, #4]
    7b18:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    7b1c:	b160      	cbz	r0, 7b38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32c>
    7b1e:	4639      	mov	r1, r7
    7b20:	4630      	mov	r0, r6
    7b22:	f007 fbdf 	bl	f2e4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    7b26:	b138      	cbz	r0, 7b38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32c>
    7b28:	6860      	ldr	r0, [r4, #4]
    7b2a:	9900      	ldr	r1, [sp, #0]
    7b2c:	f8c0 100e 	str.w	r1, [r0, #14]
    7b30:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7b34:	8241      	strh	r1, [r0, #18]
    7b36:	e003      	b.n	7b40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x334>
    7b38:	6860      	ldr	r0, [r4, #4]
    7b3a:	f8c0 500e 	str.w	r5, [r0, #14]
    7b3e:	8245      	strh	r5, [r0, #18]
    7b40:	6861      	ldr	r1, [r4, #4]
    7b42:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    7b46:	28ff      	cmp	r0, #255	; 0xff
    7b48:	d016      	beq.n	7b78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    7b4a:	f101 0208 	add.w	r2, r1, #8
    7b4e:	1dc9      	adds	r1, r1, #7
    7b50:	f7fe fdae 	bl	66b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7b54:	b158      	cbz	r0, 7b6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x362>
    7b56:	6860      	ldr	r0, [r4, #4]
    7b58:	79c1      	ldrb	r1, [r0, #7]
    7b5a:	f041 0102 	orr.w	r1, r1, #2
    7b5e:	71c1      	strb	r1, [r0, #7]
    7b60:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    7b64:	6141      	str	r1, [r0, #20]
    7b66:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    7b6a:	8301      	strh	r1, [r0, #24]
    7b6c:	e00f      	b.n	7b8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x382>
    7b6e:	f241 3165 	movw	r1, #4965	; 0x1365
    7b72:	2032      	movs	r0, #50	; 0x32
    7b74:	f7fd f8d0 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b78:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    7b7c:	71c8      	strb	r0, [r1, #7]
    7b7e:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    7b82:	6088      	str	r0, [r1, #8]
    7b84:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    7b88:	8188      	strh	r0, [r1, #12]
    7b8a:	614d      	str	r5, [r1, #20]
    7b8c:	830d      	strh	r5, [r1, #24]
    7b8e:	6860      	ldr	r0, [r4, #4]
    7b90:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    7b92:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    7b96:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    7b9a:	2101      	movs	r1, #1
    7b9c:	7001      	strb	r1, [r0, #0]
    7b9e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7ba0:	8800      	ldrh	r0, [r0, #0]
    7ba2:	f7fd fcb7 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7ba6:	f006 fc3b 	bl	e420 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7baa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7bac:	200000ec 	.word	0x200000ec
    7bb0:	b570      	push	{r4, r5, r6, lr}
    7bb2:	4d39      	ldr	r5, [pc, #228]	; (7c98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48c>)
    7bb4:	4601      	mov	r1, r0
    7bb6:	2200      	movs	r2, #0
    7bb8:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    7bbc:	365c      	adds	r6, #92	; 0x5c
    7bbe:	8002      	strh	r2, [r0, #0]
    7bc0:	2903      	cmp	r1, #3
    7bc2:	d002      	beq.n	7bca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3be>
    7bc4:	2905      	cmp	r1, #5
    7bc6:	d004      	beq.n	7bd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c6>
    7bc8:	e056      	b.n	7c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46c>
    7bca:	2103      	movs	r1, #3
    7bcc:	f007 f9b3 	bl	ef36 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7bd0:	e052      	b.n	7c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46c>
    7bd2:	2105      	movs	r1, #5
    7bd4:	f007 f9af 	bl	ef36 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7bd8:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7bdc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7bde:	6909      	ldr	r1, [r1, #16]
    7be0:	f844 1f0f 	str.w	r1, [r4, #15]!
    7be4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7be6:	8b0a      	ldrh	r2, [r1, #24]
    7be8:	80a2      	strh	r2, [r4, #4]
    7bea:	7e89      	ldrb	r1, [r1, #26]
    7bec:	71a1      	strb	r1, [r4, #6]
    7bee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7bf0:	68c1      	ldr	r1, [r0, #12]
    7bf2:	8b80      	ldrh	r0, [r0, #28]
    7bf4:	f007 f84d 	bl	ec92 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    7bf8:	71e0      	strb	r0, [r4, #7]
    7bfa:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7bfe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7c00:	68c1      	ldr	r1, [r0, #12]
    7c02:	6a00      	ldr	r0, [r0, #32]
    7c04:	f007 f83a 	bl	ec7c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    7c08:	75e0      	strb	r0, [r4, #23]
    7c0a:	0a00      	lsrs	r0, r0, #8
    7c0c:	7620      	strb	r0, [r4, #24]
    7c0e:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7c12:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7c14:	68c0      	ldr	r0, [r0, #12]
    7c16:	f006 fea0 	bl	e95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7c1a:	7660      	strb	r0, [r4, #25]
    7c1c:	0a00      	lsrs	r0, r0, #8
    7c1e:	76a0      	strb	r0, [r4, #26]
    7c20:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7c24:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7c26:	8a89      	ldrh	r1, [r1, #20]
    7c28:	76e1      	strb	r1, [r4, #27]
    7c2a:	0a09      	lsrs	r1, r1, #8
    7c2c:	7721      	strb	r1, [r4, #28]
    7c2e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7c30:	8ac9      	ldrh	r1, [r1, #22]
    7c32:	7761      	strb	r1, [r4, #29]
    7c34:	0a09      	lsrs	r1, r1, #8
    7c36:	77a1      	strb	r1, [r4, #30]
    7c38:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7c3a:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    7c3e:	f8c4 201f 	str.w	r2, [r4, #31]
    7c42:	7909      	ldrb	r1, [r1, #4]
    7c44:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    7c48:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7c4a:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    7c4e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    7c52:	f001 011f 	and.w	r1, r1, #31
    7c56:	f020 001f 	bic.w	r0, r0, #31
    7c5a:	4308      	orrs	r0, r1
    7c5c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    7c60:	f004 f9da 	bl	c018 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    7c64:	2807      	cmp	r0, #7
    7c66:	d900      	bls.n	7c6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x45e>
    7c68:	2007      	movs	r0, #7
    7c6a:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    7c6e:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    7c72:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    7c76:	7021      	strb	r1, [r4, #0]
    7c78:	f106 0112 	add.w	r1, r6, #18
    7c7c:	68a8      	ldr	r0, [r5, #8]
    7c7e:	f007 f975 	bl	ef6c <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7c82:	7e71      	ldrb	r1, [r6, #25]
    7c84:	68a8      	ldr	r0, [r5, #8]
    7c86:	f007 f977 	bl	ef78 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7c8a:	f000 fba5 	bl	83d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    7c8e:	68a8      	ldr	r0, [r5, #8]
    7c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c94:	f004 be70 	b.w	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7c98:	200000ec 	.word	0x200000ec
    7c9c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7ca0:	4f65      	ldr	r7, [pc, #404]	; (7e38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62c>)
    7ca2:	4604      	mov	r4, r0
    7ca4:	468a      	mov	sl, r1
    7ca6:	6878      	ldr	r0, [r7, #4]
    7ca8:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7cac:	b180      	cbz	r0, 7cd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>
    7cae:	2600      	movs	r6, #0
    7cb0:	2500      	movs	r5, #0
    7cb2:	7ca0      	ldrb	r0, [r4, #18]
    7cb4:	68a1      	ldr	r1, [r4, #8]
    7cb6:	f007 fb1e 	bl	f2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7cba:	4681      	mov	r9, r0
    7cbc:	f7ff feda 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7cc0:	b140      	cbz	r0, 7cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    7cc2:	6878      	ldr	r0, [r7, #4]
    7cc4:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    7cc8:	b121      	cbz	r1, 7cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    7cca:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    7cce:	e004      	b.n	7cda <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ce>
    7cd0:	2601      	movs	r6, #1
    7cd2:	e7ed      	b.n	7cb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    7cd4:	6878      	ldr	r0, [r7, #4]
    7cd6:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    7cda:	4683      	mov	fp, r0
    7cdc:	f7fe fc3a 	bl	6554 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    7ce0:	ea5f 0800 	movs.w	r8, r0
    7ce4:	d00c      	beq.n	7d00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    7ce6:	4658      	mov	r0, fp
    7ce8:	f7fe fc28 	bl	653c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    7cec:	b100      	cbz	r0, 7cf0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4e4>
    7cee:	2601      	movs	r6, #1
    7cf0:	f1b9 0f00 	cmp.w	r9, #0
    7cf4:	d004      	beq.n	7d00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    7cf6:	4640      	mov	r0, r8
    7cf8:	68a1      	ldr	r1, [r4, #8]
    7cfa:	f006 fd4d 	bl	e798 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    7cfe:	4605      	mov	r5, r0
    7d00:	6878      	ldr	r0, [r7, #4]
    7d02:	46b8      	mov	r8, r7
    7d04:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    7d08:	b10d      	cbz	r5, 7d0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    7d0a:	f047 0702 	orr.w	r7, r7, #2
    7d0e:	f7ff feb1 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7d12:	b3a0      	cbz	r0, 7d7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x572>
    7d14:	6860      	ldr	r0, [r4, #4]
    7d16:	f8d8 1004 	ldr.w	r1, [r8, #4]
    7d1a:	7802      	ldrb	r2, [r0, #0]
    7d1c:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    7d20:	429a      	cmp	r2, r3
    7d22:	d11f      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d24:	7842      	ldrb	r2, [r0, #1]
    7d26:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    7d2a:	429a      	cmp	r2, r3
    7d2c:	d11a      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d2e:	7882      	ldrb	r2, [r0, #2]
    7d30:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    7d34:	429a      	cmp	r2, r3
    7d36:	d115      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d38:	78c2      	ldrb	r2, [r0, #3]
    7d3a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    7d3e:	429a      	cmp	r2, r3
    7d40:	d110      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d42:	7902      	ldrb	r2, [r0, #4]
    7d44:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    7d48:	429a      	cmp	r2, r3
    7d4a:	d10b      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d4c:	7940      	ldrb	r0, [r0, #5]
    7d4e:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    7d52:	4290      	cmp	r0, r2
    7d54:	d106      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d56:	7c60      	ldrb	r0, [r4, #17]
    7d58:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    7d5c:	4288      	cmp	r0, r1
    7d5e:	d101      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d60:	2001      	movs	r0, #1
    7d62:	e000      	b.n	7d66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x55a>
    7d64:	2000      	movs	r0, #0
    7d66:	4f35      	ldr	r7, [pc, #212]	; (7e3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x630>)
    7d68:	4681      	mov	r9, r0
    7d6a:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    7d6e:	2808      	cmp	r0, #8
    7d70:	d006      	beq.n	7d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    7d72:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    7d76:	4288      	cmp	r0, r1
    7d78:	d102      	bne.n	7d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    7d7a:	2001      	movs	r0, #1
    7d7c:	e001      	b.n	7d82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x576>
    7d7e:	e021      	b.n	7dc4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b8>
    7d80:	2000      	movs	r0, #0
    7d82:	4680      	mov	r8, r0
    7d84:	b925      	cbnz	r5, 7d90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x584>
    7d86:	b12e      	cbz	r6, 7d94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x588>
    7d88:	4620      	mov	r0, r4
    7d8a:	f7ff fe7f 	bl	7a8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    7d8e:	b108      	cbz	r0, 7d94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x588>
    7d90:	2001      	movs	r0, #1
    7d92:	e000      	b.n	7d96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x58a>
    7d94:	2000      	movs	r0, #0
    7d96:	f1ba 0f00 	cmp.w	sl, #0
    7d9a:	d009      	beq.n	7db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    7d9c:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    7da0:	2901      	cmp	r1, #1
    7da2:	d003      	beq.n	7dac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a0>
    7da4:	b921      	cbnz	r1, 7db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    7da6:	ea59 0108 	orrs.w	r1, r9, r8
    7daa:	d001      	beq.n	7db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    7dac:	2101      	movs	r1, #1
    7dae:	e000      	b.n	7db2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a6>
    7db0:	2100      	movs	r1, #0
    7db2:	4208      	tst	r0, r1
    7db4:	d003      	beq.n	7dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b2>
    7db6:	200c      	movs	r0, #12
    7db8:	b004      	add	sp, #16
    7dba:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    7dbe:	f004 fb83 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7dc2:	e036      	b.n	7e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    7dc4:	f004 fb80 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7dc8:	f1ba 0f00 	cmp.w	sl, #0
    7dcc:	d031      	beq.n	7e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    7dce:	4620      	mov	r0, r4
    7dd0:	f7ff fe5c 	bl	7a8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    7dd4:	b900      	cbnz	r0, 7dd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5cc>
    7dd6:	b175      	cbz	r5, 7df6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ea>
    7dd8:	a803      	add	r0, sp, #12
    7dda:	f000 f97f 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7dde:	f8d8 2004 	ldr.w	r2, [r8, #4]
    7de2:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7de6:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7dea:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7dee:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7df2:	463b      	mov	r3, r7
    7df4:	e018      	b.n	7e28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61c>
    7df6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    7dfa:	4645      	mov	r5, r8
    7dfc:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    7e00:	2803      	cmp	r0, #3
    7e02:	d001      	beq.n	7e08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fc>
    7e04:	2802      	cmp	r0, #2
    7e06:	d114      	bne.n	7e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    7e08:	f1b9 0f00 	cmp.w	r9, #0
    7e0c:	d011      	beq.n	7e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    7e0e:	a803      	add	r0, sp, #12
    7e10:	f000 f964 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7e14:	686a      	ldr	r2, [r5, #4]
    7e16:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7e1a:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7e1e:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7e22:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7e26:	23fe      	movs	r3, #254	; 0xfe
    7e28:	2101      	movs	r1, #1
    7e2a:	4620      	mov	r0, r4
    7e2c:	3232      	adds	r2, #50	; 0x32
    7e2e:	f000 fc43 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7e32:	2005      	movs	r0, #5
    7e34:	e7c0      	b.n	7db8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    7e36:	0000      	.short	0x0000
    7e38:	200000ec 	.word	0x200000ec
    7e3c:	2000128c 	.word	0x2000128c
    7e40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7e42:	4605      	mov	r5, r0
    7e44:	2900      	cmp	r1, #0
    7e46:	d06e      	beq.n	7f26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x71a>
    7e48:	4c3c      	ldr	r4, [pc, #240]	; (7f3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x730>)
    7e4a:	6860      	ldr	r0, [r4, #4]
    7e4c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7e50:	2802      	cmp	r0, #2
    7e52:	d02c      	beq.n	7eae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a2>
    7e54:	2801      	cmp	r0, #1
    7e56:	d043      	beq.n	7ee0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d4>
    7e58:	f7ff fe0c 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7e5c:	2800      	cmp	r0, #0
    7e5e:	d067      	beq.n	7f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x724>
    7e60:	686a      	ldr	r2, [r5, #4]
    7e62:	6861      	ldr	r1, [r4, #4]
    7e64:	7810      	ldrb	r0, [r2, #0]
    7e66:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    7e6a:	4298      	cmp	r0, r3
    7e6c:	d14c      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e6e:	7850      	ldrb	r0, [r2, #1]
    7e70:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    7e74:	4298      	cmp	r0, r3
    7e76:	d147      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e78:	7890      	ldrb	r0, [r2, #2]
    7e7a:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    7e7e:	4298      	cmp	r0, r3
    7e80:	d142      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e82:	78d0      	ldrb	r0, [r2, #3]
    7e84:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    7e88:	4298      	cmp	r0, r3
    7e8a:	d13d      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e8c:	7910      	ldrb	r0, [r2, #4]
    7e8e:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    7e92:	4298      	cmp	r0, r3
    7e94:	d138      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e96:	7950      	ldrb	r0, [r2, #5]
    7e98:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    7e9c:	4290      	cmp	r0, r2
    7e9e:	d133      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7ea0:	7c68      	ldrb	r0, [r5, #17]
    7ea2:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    7ea6:	4290      	cmp	r0, r2
    7ea8:	d12e      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7eaa:	2001      	movs	r0, #1
    7eac:	e02d      	b.n	7f0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fe>
    7eae:	a803      	add	r0, sp, #12
    7eb0:	f000 f914 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7eb4:	6862      	ldr	r2, [r4, #4]
    7eb6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7eba:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7ebe:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7ec2:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7ec6:	23ff      	movs	r3, #255	; 0xff
    7ec8:	2100      	movs	r1, #0
    7eca:	4628      	mov	r0, r5
    7ecc:	3232      	adds	r2, #50	; 0x32
    7ece:	f000 fbf3 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7ed2:	6861      	ldr	r1, [r4, #4]
    7ed4:	2001      	movs	r0, #1
    7ed6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    7eda:	200b      	movs	r0, #11
    7edc:	b004      	add	sp, #16
    7ede:	bd70      	pop	{r4, r5, r6, pc}
    7ee0:	a803      	add	r0, sp, #12
    7ee2:	f000 f8fb 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7ee6:	6862      	ldr	r2, [r4, #4]
    7ee8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7eec:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7ef0:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7ef4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7ef8:	23ff      	movs	r3, #255	; 0xff
    7efa:	2100      	movs	r1, #0
    7efc:	4628      	mov	r0, r5
    7efe:	3232      	adds	r2, #50	; 0x32
    7f00:	f000 fbda 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7f04:	2005      	movs	r0, #5
    7f06:	e7e9      	b.n	7edc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>
    7f08:	2000      	movs	r0, #0
    7f0a:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    7f0e:	2901      	cmp	r1, #1
    7f10:	d00c      	beq.n	7f2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    7f12:	b958      	cbnz	r0, 7f2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    7f14:	490a      	ldr	r1, [pc, #40]	; (7f40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x734>)
    7f16:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    7f1a:	2808      	cmp	r0, #8
    7f1c:	d003      	beq.n	7f26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x71a>
    7f1e:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    7f22:	4281      	cmp	r1, r0
    7f24:	d002      	beq.n	7f2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    7f26:	f004 facf 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f2a:	e7eb      	b.n	7f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f8>
    7f2c:	200c      	movs	r0, #12
    7f2e:	e7d5      	b.n	7edc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>
    7f30:	f640 515b 	movw	r1, #3419	; 0xd5b
    7f34:	2032      	movs	r0, #50	; 0x32
    7f36:	f7fc feef 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f3a:	0000      	.short	0x0000
    7f3c:	200000ec 	.word	0x200000ec
    7f40:	2000128c 	.word	0x2000128c
    7f44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7f46:	4605      	mov	r5, r0
    7f48:	b139      	cbz	r1, 7f5a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74e>
    7f4a:	4c1c      	ldr	r4, [pc, #112]	; (7fbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7b0>)
    7f4c:	6860      	ldr	r0, [r4, #4]
    7f4e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7f52:	2802      	cmp	r0, #2
    7f54:	d004      	beq.n	7f60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x754>
    7f56:	2801      	cmp	r0, #1
    7f58:	d01b      	beq.n	7f92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x786>
    7f5a:	f004 fab5 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f5e:	e02a      	b.n	7fb6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7aa>
    7f60:	a803      	add	r0, sp, #12
    7f62:	f000 f8bb 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7f66:	6862      	ldr	r2, [r4, #4]
    7f68:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7f6c:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7f70:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7f74:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7f78:	23ff      	movs	r3, #255	; 0xff
    7f7a:	2106      	movs	r1, #6
    7f7c:	4628      	mov	r0, r5
    7f7e:	3232      	adds	r2, #50	; 0x32
    7f80:	f000 fb9a 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7f84:	6862      	ldr	r2, [r4, #4]
    7f86:	200b      	movs	r0, #11
    7f88:	2100      	movs	r1, #0
    7f8a:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    7f8e:	b004      	add	sp, #16
    7f90:	bd70      	pop	{r4, r5, r6, pc}
    7f92:	a803      	add	r0, sp, #12
    7f94:	f000 f8a2 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7f98:	6862      	ldr	r2, [r4, #4]
    7f9a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7f9e:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7fa2:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7fa6:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7faa:	23ff      	movs	r3, #255	; 0xff
    7fac:	2106      	movs	r1, #6
    7fae:	4628      	mov	r0, r5
    7fb0:	3232      	adds	r2, #50	; 0x32
    7fb2:	f000 fb81 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7fb6:	2005      	movs	r0, #5
    7fb8:	e7e9      	b.n	7f8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x782>
    7fba:	0000      	.short	0x0000
    7fbc:	200000ec 	.word	0x200000ec
    7fc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7fc2:	b389      	cbz	r1, 8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    7fc4:	2901      	cmp	r1, #1
    7fc6:	d035      	beq.n	8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
    7fc8:	2405      	movs	r4, #5
    7fca:	2902      	cmp	r1, #2
    7fcc:	d004      	beq.n	7fd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7cc>
    7fce:	2906      	cmp	r1, #6
    7fd0:	d024      	beq.n	801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    7fd2:	f004 fa79 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7fd6:	e01e      	b.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7fd8:	4605      	mov	r5, r0
    7fda:	4616      	mov	r6, r2
    7fdc:	f004 fa74 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7fe0:	b1ce      	cbz	r6, 8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7fe2:	4e17      	ldr	r6, [pc, #92]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    7fe4:	6870      	ldr	r0, [r6, #4]
    7fe6:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7fea:	2801      	cmp	r0, #1
    7fec:	d001      	beq.n	7ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e6>
    7fee:	2802      	cmp	r0, #2
    7ff0:	d111      	bne.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7ff2:	a803      	add	r0, sp, #12
    7ff4:	f000 f872 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7ff8:	6872      	ldr	r2, [r6, #4]
    7ffa:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7ffe:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    8002:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    8006:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    800a:	23ff      	movs	r3, #255	; 0xff
    800c:	2102      	movs	r1, #2
    800e:	4628      	mov	r0, r5
    8010:	3232      	adds	r2, #50	; 0x32
    8012:	f000 fb51 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    8016:	b004      	add	sp, #16
    8018:	4620      	mov	r0, r4
    801a:	bd70      	pop	{r4, r5, r6, pc}
    801c:	b004      	add	sp, #16
    801e:	4611      	mov	r1, r2
    8020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8024:	f7ff bf8e 	b.w	7f44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    8028:	b004      	add	sp, #16
    802a:	4611      	mov	r1, r2
    802c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8030:	f7ff bf06 	b.w	7e40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x634>
    8034:	b004      	add	sp, #16
    8036:	4611      	mov	r1, r2
    8038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    803c:	f7ff be2e 	b.w	7c9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x490>
    8040:	200000ec 	.word	0x200000ec
    8044:	b570      	push	{r4, r5, r6, lr}
    8046:	4c11      	ldr	r4, [pc, #68]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    8048:	4605      	mov	r5, r0
    804a:	6861      	ldr	r1, [r4, #4]
    804c:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    8050:	2800      	cmp	r0, #0
    8052:	d019      	beq.n	8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    8054:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    8058:	2800      	cmp	r0, #0
    805a:	d015      	beq.n	8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    805c:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    8060:	3132      	adds	r1, #50	; 0x32
    8062:	f007 f948 	bl	f2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    8066:	b140      	cbz	r0, 807a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7a>
    8068:	f7fe fa3e 	bl	64e8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    806c:	6861      	ldr	r1, [r4, #4]
    806e:	462a      	mov	r2, r5
    8070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8074:	3132      	adds	r1, #50	; 0x32
    8076:	f006 bb5a 	b.w	e72e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    807a:	6860      	ldr	r0, [r4, #4]
    807c:	4629      	mov	r1, r5
    807e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8082:	3032      	adds	r0, #50	; 0x32
    8084:	f006 bb42 	b.w	e70c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    8088:	bd70      	pop	{r4, r5, r6, pc}
    808a:	0000      	.short	0x0000
    808c:	200000ec 	.word	0x200000ec
    8090:	4602      	mov	r2, r0
    8092:	480b      	ldr	r0, [pc, #44]	; (80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>)
    8094:	b082      	sub	sp, #8
    8096:	6840      	ldr	r0, [r0, #4]
    8098:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    809c:	f88d 1000 	strb.w	r1, [sp]
    80a0:	9900      	ldr	r1, [sp, #0]
    80a2:	9100      	str	r1, [sp, #0]
    80a4:	f89d 1000 	ldrb.w	r1, [sp]
    80a8:	2900      	cmp	r1, #0
    80aa:	d107      	bne.n	80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    80ac:	6d41      	ldr	r1, [r0, #84]	; 0x54
    80ae:	2900      	cmp	r1, #0
    80b0:	d004      	beq.n	80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    80b2:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    80b6:	b002      	add	sp, #8
    80b8:	f7fb bb0a 	b.w	36d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    80bc:	b002      	add	sp, #8
    80be:	4770      	bx	lr
    80c0:	200000ec 	.word	0x200000ec
    80c4:	b510      	push	{r4, lr}
    80c6:	4804      	ldr	r0, [pc, #16]	; (80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>)
    80c8:	f004 fd04 	bl	cad4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    80cc:	2800      	cmp	r0, #0
    80ce:	d102      	bne.n	80d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd6>
    80d0:	4901      	ldr	r1, [pc, #4]	; (80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>)
    80d2:	207f      	movs	r0, #127	; 0x7f
    80d4:	7008      	strb	r0, [r1, #0]
    80d6:	bd10      	pop	{r4, pc}
    80d8:	200000ec 	.word	0x200000ec
    80dc:	4a07      	ldr	r2, [pc, #28]	; (80fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>)
    80de:	b510      	push	{r4, lr}
    80e0:	f992 1000 	ldrsb.w	r1, [r2]
    80e4:	297f      	cmp	r1, #127	; 0x7f
    80e6:	d003      	beq.n	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    80e8:	7001      	strb	r1, [r0, #0]
    80ea:	207f      	movs	r0, #127	; 0x7f
    80ec:	7010      	strb	r0, [r2, #0]
    80ee:	bd10      	pop	{r4, pc}
    80f0:	f240 3172 	movw	r1, #882	; 0x372
    80f4:	2032      	movs	r0, #50	; 0x32
    80f6:	f7fc fe0f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80fa:	0000      	.short	0x0000
    80fc:	200000ec 	.word	0x200000ec
    8100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8104:	4607      	mov	r7, r0
    8106:	f7fd fa33 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    810a:	4604      	mov	r4, r0
    810c:	f7fd fa36 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8110:	4621      	mov	r1, r4
    8112:	f007 f949 	bl	f3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    8116:	0005      	movs	r5, r0
    8118:	d012      	beq.n	8140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>
    811a:	4c2d      	ldr	r4, [pc, #180]	; (81d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d0>)
    811c:	6860      	ldr	r0, [r4, #4]
    811e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    8122:	2801      	cmp	r0, #1
    8124:	d004      	beq.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    8126:	2802      	cmp	r0, #2
    8128:	d002      	beq.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    812a:	f7ff fca3 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    812e:	b150      	cbz	r0, 8146 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x146>
    8130:	f06f 0613 	mvn.w	r6, #19
    8134:	b33f      	cbz	r7, 8186 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x186>
    8136:	4628      	mov	r0, r5
    8138:	f006 fece 	bl	eed8 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    813c:	b950      	cbnz	r0, 8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    813e:	e005      	b.n	814c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>
    8140:	f241 310a 	movw	r1, #4874	; 0x130a
    8144:	e03a      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    8146:	f241 3110 	movw	r1, #4880	; 0x1310
    814a:	e037      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    814c:	4628      	mov	r0, r5
    814e:	f006 fee5 	bl	ef1c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    8152:	b1c0      	cbz	r0, 8186 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x186>
    8154:	6861      	ldr	r1, [r4, #4]
    8156:	4628      	mov	r0, r5
    8158:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    815c:	2a05      	cmp	r2, #5
    815e:	d202      	bcs.n	8166 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x166>
    8160:	f241 2194 	movw	r1, #4756	; 0x1294
    8164:	e02a      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    8166:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    816a:	2a0b      	cmp	r2, #11
    816c:	d302      	bcc.n	8174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>
    816e:	f241 2195 	movw	r1, #4757	; 0x1295
    8172:	e023      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    8174:	68e2      	ldr	r2, [r4, #12]
    8176:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    817a:	6952      	ldr	r2, [r2, #20]
    817c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8180:	5851      	ldr	r1, [r2, r1]
    8182:	4788      	blx	r1
    8184:	e016      	b.n	81b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b4>
    8186:	6860      	ldr	r0, [r4, #4]
    8188:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    818c:	2905      	cmp	r1, #5
    818e:	d202      	bcs.n	8196 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x196>
    8190:	f44f 5198 	mov.w	r1, #4864	; 0x1300
    8194:	e012      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    8196:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    819a:	290b      	cmp	r1, #11
    819c:	d302      	bcc.n	81a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4>
    819e:	f241 3101 	movw	r1, #4865	; 0x1301
    81a2:	e00b      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    81a4:	68e1      	ldr	r1, [r4, #12]
    81a6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    81aa:	6989      	ldr	r1, [r1, #24]
    81ac:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    81b0:	5808      	ldr	r0, [r1, r0]
    81b2:	4780      	blx	r0
    81b4:	280f      	cmp	r0, #15
    81b6:	d304      	bcc.n	81c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c2>
    81b8:	f241 3125 	movw	r1, #4901	; 0x1325
    81bc:	2032      	movs	r0, #50	; 0x32
    81be:	f7fc fdab 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81c2:	68e1      	ldr	r1, [r4, #12]
    81c4:	6909      	ldr	r1, [r1, #16]
    81c6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    81ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    81ce:	4700      	bx	r0
    81d0:	200000ec 	.word	0x200000ec
    81d4:	b510      	push	{r4, lr}
    81d6:	b118      	cbz	r0, 81e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e0>
    81d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    81dc:	f000 b924 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    81e0:	2900      	cmp	r1, #0
    81e2:	d01d      	beq.n	8220 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x220>
    81e4:	480f      	ldr	r0, [pc, #60]	; (8224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>)
    81e6:	6841      	ldr	r1, [r0, #4]
    81e8:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    81ec:	2a0b      	cmp	r2, #11
    81ee:	d202      	bcs.n	81f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f6>
    81f0:	f241 31cc 	movw	r1, #5068	; 0x13cc
    81f4:	e005      	b.n	8202 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x202>
    81f6:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    81fa:	2a0f      	cmp	r2, #15
    81fc:	d304      	bcc.n	8208 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x208>
    81fe:	f241 31cd 	movw	r1, #5069	; 0x13cd
    8202:	2032      	movs	r0, #50	; 0x32
    8204:	f7fc fd88 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8208:	68c0      	ldr	r0, [r0, #12]
    820a:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    820e:	6880      	ldr	r0, [r0, #8]
    8210:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    8214:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    8218:	5840      	ldr	r0, [r0, r1]
    821a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    821e:	4700      	bx	r0
    8220:	bd10      	pop	{r4, pc}
    8222:	0000      	.short	0x0000
    8224:	200000ec 	.word	0x200000ec
    8228:	b510      	push	{r4, lr}
    822a:	f7ff fb0d 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    822e:	f000 f90b 	bl	8448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    8232:	4805      	ldr	r0, [pc, #20]	; (8248 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x248>)
    8234:	6881      	ldr	r1, [r0, #8]
    8236:	2000      	movs	r0, #0
    8238:	f7ff fc3c 	bl	7ab4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a8>
    823c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8240:	2003      	movs	r0, #3
    8242:	f000 bc97 	b.w	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    8246:	0000      	.short	0x0000
    8248:	200000ec 	.word	0x200000ec
    824c:	b510      	push	{r4, lr}
    824e:	f7fd f98f 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    8252:	4604      	mov	r4, r0
    8254:	f7fd f992 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8258:	4621      	mov	r1, r4
    825a:	f007 f8a5 	bl	f3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    825e:	b150      	cbz	r0, 8276 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x276>
    8260:	f004 fb8a 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8264:	2000      	movs	r0, #0
    8266:	f004 fa3f 	bl	c6e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    826a:	4905      	ldr	r1, [pc, #20]	; (8280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>)
    826c:	2006      	movs	r0, #6
    826e:	6849      	ldr	r1, [r1, #4]
    8270:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8274:	bd10      	pop	{r4, pc}
    8276:	f240 41e7 	movw	r1, #1255	; 0x4e7
    827a:	2032      	movs	r0, #50	; 0x32
    827c:	f7fc fd4c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8280:	200000ec 	.word	0x200000ec
    8284:	490f      	ldr	r1, [pc, #60]	; (82c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c4>)
    8286:	b510      	push	{r4, lr}
    8288:	6848      	ldr	r0, [r1, #4]
    828a:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    828e:	2a06      	cmp	r2, #6
    8290:	d202      	bcs.n	8298 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x298>
    8292:	f241 31fa 	movw	r1, #5114	; 0x13fa
    8296:	e005      	b.n	82a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a4>
    8298:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    829c:	2a0b      	cmp	r2, #11
    829e:	d304      	bcc.n	82aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2aa>
    82a0:	f241 31fb 	movw	r1, #5115	; 0x13fb
    82a4:	2032      	movs	r0, #50	; 0x32
    82a6:	f7fc fd37 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82aa:	68c9      	ldr	r1, [r1, #12]
    82ac:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    82b0:	68c9      	ldr	r1, [r1, #12]
    82b2:	f06f 0213 	mvn.w	r2, #19
    82b6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    82ba:	5808      	ldr	r0, [r1, r0]
    82bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    82c0:	4700      	bx	r0
    82c2:	0000      	.short	0x0000
    82c4:	200000ec 	.word	0x200000ec
    82c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82cc:	4c31      	ldr	r4, [pc, #196]	; (8394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>)
    82ce:	4605      	mov	r5, r0
    82d0:	460e      	mov	r6, r1
    82d2:	6860      	ldr	r0, [r4, #4]
    82d4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    82d8:	b120      	cbz	r0, 82e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    82da:	2801      	cmp	r0, #1
    82dc:	d002      	beq.n	82e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    82de:	200c      	movs	r0, #12
    82e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82e4:	f004 fab8 	bl	c858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    82e8:	f004 f8d0 	bl	c48c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    82ec:	f003 feb2 	bl	c054 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    82f0:	f004 fd14 	bl	cd1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    82f4:	4828      	ldr	r0, [pc, #160]	; (8398 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x398>)
    82f6:	f004 f9ef 	bl	c6d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    82fa:	4828      	ldr	r0, [pc, #160]	; (839c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>)
    82fc:	f004 fc10 	bl	cb20 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    8300:	4827      	ldr	r0, [pc, #156]	; (83a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a0>)
    8302:	f004 fc03 	bl	cb0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    8306:	4630      	mov	r0, r6
    8308:	f004 fb36 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    830c:	7968      	ldrb	r0, [r5, #5]
    830e:	b110      	cbz	r0, 8316 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x316>
    8310:	2001      	movs	r0, #1
    8312:	f7ff febd 	bl	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    8316:	7928      	ldrb	r0, [r5, #4]
    8318:	2803      	cmp	r0, #3
    831a:	d001      	beq.n	8320 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x320>
    831c:	b118      	cbz	r0, 8326 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x326>
    831e:	e018      	b.n	8352 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x352>
    8320:	f640 01f7 	movw	r1, #2295	; 0x8f7
    8324:	e033      	b.n	838e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38e>
    8326:	6861      	ldr	r1, [r4, #4]
    8328:	2000      	movs	r0, #0
    832a:	2503      	movs	r5, #3
    832c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    8330:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    8334:	1c52      	adds	r2, r2, #1
    8336:	fbb2 f7f5 	udiv	r7, r2, r5
    833a:	fb05 2217 	mls	r2, r5, r7, r2
    833e:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    8342:	fa23 f202 	lsr.w	r2, r3, r2
    8346:	07d2      	lsls	r2, r2, #31
    8348:	d103      	bne.n	8352 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x352>
    834a:	1c40      	adds	r0, r0, #1
    834c:	b2c0      	uxtb	r0, r0
    834e:	2803      	cmp	r0, #3
    8350:	d3ee      	bcc.n	8330 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x330>
    8352:	6860      	ldr	r0, [r4, #4]
    8354:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    8358:	f004 fb08 	bl	c96c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    835c:	4631      	mov	r1, r6
    835e:	2001      	movs	r0, #1
    8360:	f7ff fa84 	bl	786c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    8364:	2800      	cmp	r0, #0
    8366:	d0bb      	beq.n	82e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e0>
    8368:	f000 f920 	bl	85ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ac>
    836c:	6860      	ldr	r0, [r4, #4]
    836e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    8372:	b138      	cbz	r0, 8384 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x384>
    8374:	f7fe f8bc 	bl	64f0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    8378:	480a      	ldr	r0, [pc, #40]	; (83a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a4>)
    837a:	6800      	ldr	r0, [r0, #0]
    837c:	2803      	cmp	r0, #3
    837e:	d004      	beq.n	838a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38a>
    8380:	2000      	movs	r0, #0
    8382:	e7ad      	b.n	82e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e0>
    8384:	f7fe faa8 	bl	68d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    8388:	e7f6      	b.n	8378 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x378>
    838a:	f640 1109 	movw	r1, #2313	; 0x909
    838e:	2032      	movs	r0, #50	; 0x32
    8390:	f7fc fcc2 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8394:	200000ec 	.word	0x200000ec
    8398:	000086a8 	.word	0x000086a8
    839c:	0001092d 	.word	0x0001092d
    83a0:	8e89bed6 	.word	0x8e89bed6
    83a4:	40001550 	.word	0x40001550
    83a8:	b510      	push	{r4, lr}
    83aa:	2000      	movs	r0, #0
    83ac:	f7ff fe70 	bl	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    83b0:	4808      	ldr	r0, [pc, #32]	; (83d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d4>)
    83b2:	6840      	ldr	r0, [r0, #4]
    83b4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    83b8:	b128      	cbz	r0, 83c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c6>
    83ba:	2801      	cmp	r0, #1
    83bc:	d003      	beq.n	83c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c6>
    83be:	2802      	cmp	r0, #2
    83c0:	d004      	beq.n	83cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3cc>
    83c2:	200c      	movs	r0, #12
    83c4:	bd10      	pop	{r4, pc}
    83c6:	f000 f82f 	bl	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    83ca:	e001      	b.n	83d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d0>
    83cc:	f000 f844 	bl	8458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    83d0:	2000      	movs	r0, #0
    83d2:	bd10      	pop	{r4, pc}
    83d4:	200000ec 	.word	0x200000ec
    83d8:	b570      	push	{r4, r5, r6, lr}
    83da:	4c12      	ldr	r4, [pc, #72]	; (8424 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x424>)
    83dc:	6860      	ldr	r0, [r4, #4]
    83de:	f100 0532 	add.w	r5, r0, #50	; 0x32
    83e2:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    83e6:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    83ea:	b188      	cbz	r0, 8410 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x410>
    83ec:	f7ff fb42 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    83f0:	b130      	cbz	r0, 8400 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x400>
    83f2:	6860      	ldr	r0, [r4, #4]
    83f4:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    83f8:	b111      	cbz	r1, 8400 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x400>
    83fa:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    83fe:	e002      	b.n	8406 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x406>
    8400:	6860      	ldr	r0, [r4, #4]
    8402:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    8406:	f7fe f919 	bl	663c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    840a:	b108      	cbz	r0, 8410 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x410>
    840c:	2601      	movs	r6, #1
    840e:	4605      	mov	r5, r0
    8410:	4629      	mov	r1, r5
    8412:	68a0      	ldr	r0, [r4, #8]
    8414:	f006 fdb7 	bl	ef86 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    8418:	4631      	mov	r1, r6
    841a:	68a0      	ldr	r0, [r4, #8]
    841c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8420:	f006 bdb7 	b.w	ef92 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    8424:	200000ec 	.word	0x200000ec
    8428:	b510      	push	{r4, lr}
    842a:	f7ff fa0d 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    842e:	4905      	ldr	r1, [pc, #20]	; (8444 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x444>)
    8430:	2001      	movs	r0, #1
    8432:	6849      	ldr	r1, [r1, #4]
    8434:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    843c:	2000      	movs	r0, #0
    843e:	f000 bb99 	b.w	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    8442:	0000      	.short	0x0000
    8444:	200000ec 	.word	0x200000ec
    8448:	4902      	ldr	r1, [pc, #8]	; (8454 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x454>)
    844a:	2000      	movs	r0, #0
    844c:	6849      	ldr	r1, [r1, #4]
    844e:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8452:	4770      	bx	lr
    8454:	200000ec 	.word	0x200000ec
    8458:	b570      	push	{r4, r5, r6, lr}
    845a:	f7fd f889 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    845e:	4604      	mov	r4, r0
    8460:	f7fd f88c 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8464:	4621      	mov	r1, r4
    8466:	f006 ff9f 	bl	f3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    846a:	0005      	movs	r5, r0
    846c:	d020      	beq.n	84b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b0>
    846e:	f006 ffeb 	bl	f448 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    8472:	2000      	movs	r0, #0
    8474:	f000 fb4c 	bl	8b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8478:	b1f8      	cbz	r0, 84ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ba>
    847a:	4c1d      	ldr	r4, [pc, #116]	; (84f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f0>)
    847c:	6860      	ldr	r0, [r4, #4]
    847e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    8482:	2802      	cmp	r0, #2
    8484:	d003      	beq.n	848e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48e>
    8486:	4629      	mov	r1, r5
    8488:	2000      	movs	r0, #0
    848a:	f7ff f9ef 	bl	786c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    848e:	1ce8      	adds	r0, r5, #3
    8490:	f006 f9cc 	bl	e82c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    8494:	6861      	ldr	r1, [r4, #4]
    8496:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    849a:	b128      	cbz	r0, 84a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    849c:	2540      	movs	r5, #64	; 0x40
    849e:	f003 fdf9 	bl	c094 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    84a2:	4628      	mov	r0, r5
    84a4:	f004 f802 	bl	c4ac <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    84a8:	f7ff fae4 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    84ac:	b970      	cbnz	r0, 84cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4cc>
    84ae:	e008      	b.n	84c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c2>
    84b0:	f240 414a 	movw	r1, #1098	; 0x44a
    84b4:	2032      	movs	r0, #50	; 0x32
    84b6:	f7fc fc2f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    84be:	f7ff bfb3 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    84c2:	6860      	ldr	r0, [r4, #4]
    84c4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    84c8:	2802      	cmp	r0, #2
    84ca:	d104      	bne.n	84d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d6>
    84cc:	2100      	movs	r1, #0
    84ce:	2201      	movs	r2, #1
    84d0:	4608      	mov	r0, r1
    84d2:	f004 fadb 	bl	ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    84d6:	6860      	ldr	r0, [r4, #4]
    84d8:	21ff      	movs	r1, #255	; 0xff
    84da:	f800 1f64 	strb.w	r1, [r0, #100]!
    84de:	7041      	strb	r1, [r0, #1]
    84e0:	2100      	movs	r1, #0
    84e2:	7201      	strb	r1, [r0, #8]
    84e4:	71c1      	strb	r1, [r0, #7]
    84e6:	7641      	strb	r1, [r0, #25]
    84e8:	2105      	movs	r1, #5
    84ea:	f800 1c08 	strb.w	r1, [r0, #-8]
    84ee:	bd70      	pop	{r4, r5, r6, pc}
    84f0:	200000ec 	.word	0x200000ec
    84f4:	b570      	push	{r4, r5, r6, lr}
    84f6:	f7fd f83b 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    84fa:	4604      	mov	r4, r0
    84fc:	f7fd f83e 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8500:	4621      	mov	r1, r4
    8502:	f006 ff51 	bl	f3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    8506:	0005      	movs	r5, r0
    8508:	d028      	beq.n	855c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x55c>
    850a:	4e19      	ldr	r6, [pc, #100]	; (8570 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x570>)
    850c:	2004      	movs	r0, #4
    850e:	6874      	ldr	r4, [r6, #4]
    8510:	345c      	adds	r4, #92	; 0x5c
    8512:	f000 fafd 	bl	8b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8516:	b330      	cbz	r0, 8566 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x566>
    8518:	200c      	movs	r0, #12
    851a:	7020      	strb	r0, [r4, #0]
    851c:	2001      	movs	r0, #1
    851e:	f000 fb29 	bl	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    8522:	7828      	ldrb	r0, [r5, #0]
    8524:	6871      	ldr	r1, [r6, #4]
    8526:	f3c0 1040 	ubfx	r0, r0, #5, #1
    852a:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    852e:	2005      	movs	r0, #5
    8530:	f7ff fb3e 	bl	7bb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    8534:	4a0f      	ldr	r2, [pc, #60]	; (8574 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x574>)
    8536:	68b1      	ldr	r1, [r6, #8]
    8538:	2520      	movs	r5, #32
    853a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    853c:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    8540:	7808      	ldrb	r0, [r1, #0]
    8542:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    8546:	f020 0020 	bic.w	r0, r0, #32
    854a:	4318      	orrs	r0, r3
    854c:	7008      	strb	r0, [r1, #0]
    854e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    8550:	7ea2      	ldrb	r2, [r4, #26]
    8552:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    8556:	4011      	ands	r1, r2
    8558:	7001      	strb	r1, [r0, #0]
    855a:	bd70      	pop	{r4, r5, r6, pc}
    855c:	f240 5152 	movw	r1, #1362	; 0x552
    8560:	2032      	movs	r0, #50	; 0x32
    8562:	f7fc fbd9 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    856a:	f7ff bf5d 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    856e:	0000      	.short	0x0000
    8570:	200000ec 	.word	0x200000ec
    8574:	2000128c 	.word	0x2000128c
    8578:	b510      	push	{r4, lr}
    857a:	2003      	movs	r0, #3
    857c:	f000 fac8 	bl	8b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8580:	b168      	cbz	r0, 859e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59e>
    8582:	2003      	movs	r0, #3
    8584:	f7ff fb14 	bl	7bb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    8588:	2201      	movs	r2, #1
    858a:	4611      	mov	r1, r2
    858c:	2000      	movs	r0, #0
    858e:	f004 fa7d 	bl	ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8592:	4905      	ldr	r1, [pc, #20]	; (85a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a8>)
    8594:	200b      	movs	r0, #11
    8596:	6849      	ldr	r1, [r1, #4]
    8598:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    859c:	bd10      	pop	{r4, pc}
    859e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    85a2:	f7ff bf41 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    85a6:	0000      	.short	0x0000
    85a8:	200000ec 	.word	0x200000ec
    85ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85b0:	4c1d      	ldr	r4, [pc, #116]	; (8628 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x628>)
    85b2:	2600      	movs	r6, #0
    85b4:	6860      	ldr	r0, [r4, #4]
    85b6:	f880 607d 	strb.w	r6, [r0, #125]	; 0x7d
    85ba:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    85be:	b911      	cbnz	r1, 85c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c6>
    85c0:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    85c4:	b350      	cbz	r0, 861c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61c>
    85c6:	f004 fe28 	bl	d21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    85ca:	4680      	mov	r8, r0
    85cc:	6860      	ldr	r0, [r4, #4]
    85ce:	4641      	mov	r1, r8
    85d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
    85d2:	f7fa f805 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    85d6:	4f15      	ldr	r7, [pc, #84]	; (862c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62c>)
    85d8:	4605      	mov	r5, r0
    85da:	fb90 f0f7 	sdiv	r0, r0, r7
    85de:	fb07 5010 	mls	r0, r7, r0, r5
    85e2:	4241      	negs	r1, r0
    85e4:	4640      	mov	r0, r8
    85e6:	f7f9 ffc9 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    85ea:	6861      	ldr	r1, [r4, #4]
    85ec:	6448      	str	r0, [r1, #68]	; 0x44
    85ee:	fb95 f0f7 	sdiv	r0, r5, r7
    85f2:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    85f4:	4410      	add	r0, r2
    85f6:	6788      	str	r0, [r1, #120]	; 0x78
    85f8:	f7fe f8dc 	bl	67b4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    85fc:	6861      	ldr	r1, [r4, #4]
    85fe:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    8600:	4290      	cmp	r0, r2
    8602:	d80b      	bhi.n	861c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61c>
    8604:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    8608:	678e      	str	r6, [r1, #120]	; 0x78
    860a:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    860e:	b110      	cbz	r0, 8616 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x616>
    8610:	2001      	movs	r0, #1
    8612:	f7fd ffb9 	bl	6588 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    8616:	2001      	movs	r0, #1
    8618:	f7ff fd14 	bl	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    861c:	6861      	ldr	r1, [r4, #4]
    861e:	2002      	movs	r0, #2
    8620:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8628:	200000ec 	.word	0x200000ec
    862c:	000f4240 	.word	0x000f4240
    8630:	00008449 	.word	0x00008449
    8634:	00008429 	.word	0x00008429
    8638:	0000f389 	.word	0x0000f389
    863c:	0000f389 	.word	0x0000f389
    8640:	0000f389 	.word	0x0000f389
    8644:	00008459 	.word	0x00008459
    8648:	0000f389 	.word	0x0000f389
    864c:	0000f389 	.word	0x0000f389
    8650:	0000f389 	.word	0x0000f389
    8654:	0000f389 	.word	0x0000f389
    8658:	0000f389 	.word	0x0000f389
    865c:	00008579 	.word	0x00008579
    8660:	000084f5 	.word	0x000084f5
    8664:	0000f389 	.word	0x0000f389
    8668:	0000f389 	.word	0x0000f389
    866c:	0000824d 	.word	0x0000824d
    8670:	00008229 	.word	0x00008229
    8674:	00000000 	.word	0x00000000
    8678:	0000f393 	.word	0x0000f393
    867c:	0000f32f 	.word	0x0000f32f
    8680:	0000f341 	.word	0x0000f341
    8684:	0000f34f 	.word	0x0000f34f
    8688:	00007a21 	.word	0x00007a21
    868c:	000082c9 	.word	0x000082c9
    8690:	000083a9 	.word	0x000083a9
    8694:	0000866c 	.word	0x0000866c
    8698:	00008674 	.word	0x00008674
    869c:	00008630 	.word	0x00008630
    86a0:	00008684 	.word	0x00008684
    86a4:	0000867c 	.word	0x0000867c
    86a8:	00008285 	.word	0x00008285
    86ac:	00008101 	.word	0x00008101
    86b0:	000081d5 	.word	0x000081d5
    86b4:	0000f3a5 	.word	0x0000f3a5

000086b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    86b8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    86bc:	461d      	mov	r5, r3
    86be:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    86c2:	4616      	mov	r6, r2
    86c4:	4688      	mov	r8, r1
    86c6:	4681      	mov	r9, r0
    86c8:	f7fc ff58 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    86cc:	4604      	mov	r4, r0
    86ce:	f005 fd76 	bl	e1be <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    86d2:	2801      	cmp	r0, #1
    86d4:	d063      	beq.n	879e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    86d6:	4620      	mov	r0, r4
    86d8:	f006 ff2f 	bl	f53a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    86dc:	4604      	mov	r4, r0
    86de:	221c      	movs	r2, #28
    86e0:	2100      	movs	r1, #0
    86e2:	f004 ff89 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    86e6:	2701      	movs	r7, #1
    86e8:	7027      	strb	r7, [r4, #0]
    86ea:	ea5f 0008 	movs.w	r0, r8
    86ee:	d009      	beq.n	8704 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    86f0:	2801      	cmp	r0, #1
    86f2:	d00b      	beq.n	870c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    86f4:	2802      	cmp	r0, #2
    86f6:	d02d      	beq.n	8754 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
    86f8:	f1b8 0f06 	cmp.w	r8, #6
    86fc:	d02c      	beq.n	8758 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
    86fe:	f240 217b 	movw	r1, #635	; 0x27b
    8702:	e049      	b.n	8798 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
    8704:	7aa0      	ldrb	r0, [r4, #10]
    8706:	f040 0001 	orr.w	r0, r0, #1
    870a:	e026      	b.n	875a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    870c:	7aa0      	ldrb	r0, [r4, #10]
    870e:	f040 0005 	orr.w	r0, r0, #5
    8712:	bf00      	nop
    8714:	f040 0010 	orr.w	r0, r0, #16
    8718:	72a0      	strb	r0, [r4, #10]
    871a:	1c63      	adds	r3, r4, #1
    871c:	1ca2      	adds	r2, r4, #2
    871e:	4648      	mov	r0, r9
    8720:	990a      	ldr	r1, [sp, #40]	; 0x28
    8722:	f006 feef 	bl	f504 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    8726:	f884 a009 	strb.w	sl, [r4, #9]
    872a:	7327      	strb	r7, [r4, #12]
    872c:	2000      	movs	r0, #0
    872e:	7360      	strb	r0, [r4, #13]
    8730:	20ff      	movs	r0, #255	; 0xff
    8732:	73a0      	strb	r0, [r4, #14]
    8734:	7aa1      	ldrb	r1, [r4, #10]
    8736:	0749      	lsls	r1, r1, #29
    8738:	d518      	bpl.n	876c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
    873a:	f104 0014 	add.w	r0, r4, #20
    873e:	1e41      	subs	r1, r0, #1
    8740:	2d02      	cmp	r5, #2
    8742:	d00d      	beq.n	8760 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    8744:	2d03      	cmp	r5, #3
    8746:	d00b      	beq.n	8760 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    8748:	f8d9 2008 	ldr.w	r2, [r9, #8]
    874c:	6813      	ldr	r3, [r2, #0]
    874e:	6003      	str	r3, [r0, #0]
    8750:	8892      	ldrh	r2, [r2, #4]
    8752:	e008      	b.n	8766 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
    8754:	7aa0      	ldrb	r0, [r4, #10]
    8756:	e7dd      	b.n	8714 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    8758:	7aa0      	ldrb	r0, [r4, #10]
    875a:	f040 0002 	orr.w	r0, r0, #2
    875e:	e7d9      	b.n	8714 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    8760:	6832      	ldr	r2, [r6, #0]
    8762:	6002      	str	r2, [r0, #0]
    8764:	88b2      	ldrh	r2, [r6, #4]
    8766:	8082      	strh	r2, [r0, #4]
    8768:	700d      	strb	r5, [r1, #0]
    876a:	e000      	b.n	876e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    876c:	74e0      	strb	r0, [r4, #19]
    876e:	207f      	movs	r0, #127	; 0x7f
    8770:	76a0      	strb	r0, [r4, #26]
    8772:	f884 b01b 	strb.w	fp, [r4, #27]
    8776:	f7fc fefb 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    877a:	4604      	mov	r4, r0
    877c:	f7fc fefe 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8780:	2201      	movs	r2, #1
    8782:	4621      	mov	r1, r4
    8784:	f006 fee2 	bl	f54c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    8788:	b120      	cbz	r0, 8794 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
    878a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    878e:	2005      	movs	r0, #5
    8790:	f000 b9f0 	b.w	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    8794:	f240 219b 	movw	r1, #667	; 0x29b
    8798:	2033      	movs	r0, #51	; 0x33
    879a:	f7fc fabd 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    879e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

000087a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    87a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87a8:	4616      	mov	r6, r2
    87aa:	460c      	mov	r4, r1
    87ac:	4605      	mov	r5, r0
    87ae:	f006 fbb1 	bl	ef14 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    87b2:	7460      	strb	r0, [r4, #17]
    87b4:	4628      	mov	r0, r5
    87b6:	f006 fba4 	bl	ef02 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    87ba:	74a0      	strb	r0, [r4, #18]
    87bc:	1cea      	adds	r2, r5, #3
    87be:	4b14      	ldr	r3, [pc, #80]	; (8810 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    87c0:	1d90      	adds	r0, r2, #6
    87c2:	2100      	movs	r1, #0
    87c4:	2e07      	cmp	r6, #7
    87c6:	d21f      	bcs.n	8808 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    87c8:	e8df f006 	tbb	[pc, r6]
    87cc:	1e110b04 	.word	0x1e110b04
    87d0:	00041e13 	.word	0x00041e13
    87d4:	781b      	ldrb	r3, [r3, #0]
    87d6:	e00d      	b.n	87f4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    87d8:	60e0      	str	r0, [r4, #12]
    87da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87de:	60e1      	str	r1, [r4, #12]
    87e0:	e7fb      	b.n	87da <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    87e2:	785b      	ldrb	r3, [r3, #1]
    87e4:	7063      	strb	r3, [r4, #1]
    87e6:	e9c4 2001 	strd	r2, r0, [r4, #4]
    87ea:	7421      	strb	r1, [r4, #16]
    87ec:	e7f7      	b.n	87de <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    87ee:	789b      	ldrb	r3, [r3, #2]
    87f0:	e000      	b.n	87f4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    87f2:	78db      	ldrb	r3, [r3, #3]
    87f4:	7063      	strb	r3, [r4, #1]
    87f6:	e9c4 2101 	strd	r2, r1, [r4, #4]
    87fa:	786a      	ldrb	r2, [r5, #1]
    87fc:	1f92      	subs	r2, r2, #6
    87fe:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    8802:	7422      	strb	r2, [r4, #16]
    8804:	d0eb      	beq.n	87de <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    8806:	e7e7      	b.n	87d8 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    8808:	7061      	strb	r1, [r4, #1]
    880a:	6061      	str	r1, [r4, #4]
    880c:	60a1      	str	r1, [r4, #8]
    880e:	e7ec      	b.n	87ea <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    8810:	00010933 	.word	0x00010933

00008814 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ>:
    8814:	b508      	push	{r3, lr}
    8816:	2244      	movs	r2, #68	; 0x44
    8818:	2100      	movs	r1, #0
    881a:	480c      	ldr	r0, [pc, #48]	; (884c <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ+0x38>)
    881c:	f004 feec 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8820:	f7fe fdf0 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8824:	2120      	movs	r1, #32
    8826:	7001      	strb	r1, [r0, #0]
    8828:	4808      	ldr	r0, [pc, #32]	; (884c <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ+0x38>)
    882a:	3810      	subs	r0, #16
    882c:	2100      	movs	r1, #0
    882e:	6001      	str	r1, [r0, #0]
    8830:	6041      	str	r1, [r0, #4]
    8832:	6081      	str	r1, [r0, #8]
    8834:	60c1      	str	r1, [r0, #12]
    8836:	f000 f871 	bl	891c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>
    883a:	f242 7010 	movw	r0, #10000	; 0x2710
    883e:	9000      	str	r0, [sp, #0]
    8840:	2201      	movs	r2, #1
    8842:	4669      	mov	r1, sp
    8844:	1080      	asrs	r0, r0, #2
    8846:	f000 fbb1 	bl	8fac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x438>
    884a:	bd08      	pop	{r3, pc}
    884c:	20001320 	.word	0x20001320

00008850 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ>:
    8850:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8854:	4c1e      	ldr	r4, [pc, #120]	; (88d0 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x80>)
    8856:	4607      	mov	r7, r0
    8858:	460e      	mov	r6, r1
    885a:	7820      	ldrb	r0, [r4, #0]
    885c:	b118      	cbz	r0, 8866 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x16>
    885e:	200c      	movs	r0, #12
    8860:	b004      	add	sp, #16
    8862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8866:	f7fe fdcd 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    886a:	4605      	mov	r5, r0
    886c:	61a7      	str	r7, [r4, #24]
    886e:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
    8872:	b110      	cbz	r0, 887a <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x2a>
    8874:	f240 4129 	movw	r1, #1065	; 0x429
    8878:	e026      	b.n	88c8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    887a:	2005      	movs	r0, #5
    887c:	7020      	strb	r0, [r4, #0]
    887e:	2000      	movs	r0, #0
    8880:	7060      	strb	r0, [r4, #1]
    8882:	7720      	strb	r0, [r4, #28]
    8884:	4630      	mov	r0, r6
    8886:	f000 f9f7 	bl	8c78 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x104>
    888a:	f000 fd27 	bl	92dc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x768>
    888e:	6320      	str	r0, [r4, #48]	; 0x30
    8890:	2100      	movs	r1, #0
    8892:	4810      	ldr	r0, [pc, #64]	; (88d4 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x84>)
    8894:	f7fa fd5c 	bl	3350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8898:	7028      	strb	r0, [r5, #0]
    889a:	2820      	cmp	r0, #32
    889c:	d00c      	beq.n	88b8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x68>
    889e:	2200      	movs	r2, #0
    88a0:	2101      	movs	r1, #1
    88a2:	4668      	mov	r0, sp
    88a4:	f000 fdb4 	bl	9410 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x89c>
    88a8:	b148      	cbz	r0, 88be <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x6e>
    88aa:	7828      	ldrb	r0, [r5, #0]
    88ac:	4669      	mov	r1, sp
    88ae:	f006 fe99 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    88b2:	b138      	cbz	r0, 88c4 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x74>
    88b4:	2000      	movs	r0, #0
    88b6:	e7d3      	b.n	8860 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x10>
    88b8:	f44f 6187 	mov.w	r1, #1080	; 0x438
    88bc:	e004      	b.n	88c8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    88be:	f240 413b 	movw	r1, #1083	; 0x43b
    88c2:	e001      	b.n	88c8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    88c4:	f240 413c 	movw	r1, #1084	; 0x43c
    88c8:	2035      	movs	r0, #53	; 0x35
    88ca:	f7fc fa25 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88ce:	0000      	.short	0x0000
    88d0:	20001320 	.word	0x20001320
    88d4:	00008d15 	.word	0x00008d15

000088d8 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q>:
    88d8:	4902      	ldr	r1, [pc, #8]	; (88e4 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q+0xc>)
    88da:	6989      	ldr	r1, [r1, #24]
    88dc:	6001      	str	r1, [r0, #0]
    88de:	f000 b865 	b.w	89ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    88e2:	0000      	.short	0x0000
    88e4:	20001320 	.word	0x20001320

000088e8 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>:
    88e8:	4901      	ldr	r1, [pc, #4]	; (88f0 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA+0x8>)
    88ea:	7048      	strb	r0, [r1, #1]
    88ec:	4770      	bx	lr
    88ee:	0000      	.short	0x0000
    88f0:	20001310 	.word	0x20001310

000088f4 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>:
    88f4:	b570      	push	{r4, r5, r6, lr}
    88f6:	4605      	mov	r5, r0
    88f8:	4907      	ldr	r1, [pc, #28]	; (8918 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY+0x24>)
    88fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    88fe:	fbb1 f4f0 	udiv	r4, r1, r0
    8902:	f006 febf 	bl	f684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    8906:	1901      	adds	r1, r0, r4
    8908:	4628      	mov	r0, r5
    890a:	f501 719b 	add.w	r1, r1, #310	; 0x136
    890e:	f006 fc83 	bl	f218 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8912:	b280      	uxth	r0, r0
    8914:	bd70      	pop	{r4, r5, r6, pc}
    8916:	0000      	.short	0x0000
    8918:	00012105 	.word	0x00012105

0000891c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>:
    891c:	4804      	ldr	r0, [pc, #16]	; (8930 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ+0x14>)
    891e:	b510      	push	{r4, lr}
    8920:	7800      	ldrb	r0, [r0, #0]
    8922:	b108      	cbz	r0, 8928 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ+0xc>
    8924:	f000 f842 	bl	89ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    8928:	f000 f972 	bl	8c10 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9c>
    892c:	2000      	movs	r0, #0
    892e:	bd10      	pop	{r4, pc}
    8930:	20001320 	.word	0x20001320

00008934 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA>:
    8934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8936:	4606      	mov	r6, r0
    8938:	b111      	cbz	r1, 8940 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0xc>
    893a:	2011      	movs	r0, #17
    893c:	b004      	add	sp, #16
    893e:	bd70      	pop	{r4, r5, r6, pc}
    8940:	4c18      	ldr	r4, [pc, #96]	; (89a4 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x70>)
    8942:	7820      	ldrb	r0, [r4, #0]
    8944:	b108      	cbz	r0, 894a <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x16>
    8946:	200c      	movs	r0, #12
    8948:	e7f8      	b.n	893c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x8>
    894a:	f7fe fd5b 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    894e:	4605      	mov	r5, r0
    8950:	2000      	movs	r0, #0
    8952:	7060      	strb	r0, [r4, #1]
    8954:	2004      	movs	r0, #4
    8956:	7020      	strb	r0, [r4, #0]
    8958:	4630      	mov	r0, r6
    895a:	f000 f98d 	bl	8c78 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x104>
    895e:	f000 fcbd 	bl	92dc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x768>
    8962:	6320      	str	r0, [r4, #48]	; 0x30
    8964:	2100      	movs	r1, #0
    8966:	4810      	ldr	r0, [pc, #64]	; (89a8 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x74>)
    8968:	f7fa fcf2 	bl	3350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    896c:	7028      	strb	r0, [r5, #0]
    896e:	2820      	cmp	r0, #32
    8970:	d00c      	beq.n	898c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x58>
    8972:	2200      	movs	r2, #0
    8974:	2101      	movs	r1, #1
    8976:	4668      	mov	r0, sp
    8978:	f000 fd4a 	bl	9410 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x89c>
    897c:	b148      	cbz	r0, 8992 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x5e>
    897e:	7828      	ldrb	r0, [r5, #0]
    8980:	4669      	mov	r1, sp
    8982:	f006 fe2f 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    8986:	b138      	cbz	r0, 8998 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x64>
    8988:	2000      	movs	r0, #0
    898a:	e7d7      	b.n	893c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x8>
    898c:	f240 419f 	movw	r1, #1183	; 0x49f
    8990:	e004      	b.n	899c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x68>
    8992:	f240 41a1 	movw	r1, #1185	; 0x4a1
    8996:	e001      	b.n	899c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x68>
    8998:	f240 41a2 	movw	r1, #1186	; 0x4a2
    899c:	2035      	movs	r0, #53	; 0x35
    899e:	f7fc f9bb 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89a2:	0000      	.short	0x0000
    89a4:	20001320 	.word	0x20001320
    89a8:	00008d15 	.word	0x00008d15

000089ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>:
    89ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89b0:	2700      	movs	r7, #0
    89b2:	f7fe fd27 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    89b6:	4c17      	ldr	r4, [pc, #92]	; (8a14 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x68>)
    89b8:	4605      	mov	r5, r0
    89ba:	7820      	ldrb	r0, [r4, #0]
    89bc:	2804      	cmp	r0, #4
    89be:	d005      	beq.n	89cc <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x20>
    89c0:	7820      	ldrb	r0, [r4, #0]
    89c2:	2805      	cmp	r0, #5
    89c4:	d002      	beq.n	89cc <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x20>
    89c6:	200c      	movs	r0, #12
    89c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89cc:	2001      	movs	r0, #1
    89ce:	7060      	strb	r0, [r4, #1]
    89d0:	7b20      	ldrb	r0, [r4, #12]
    89d2:	b160      	cbz	r0, 89ee <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x42>
    89d4:	f3ef 8610 	mrs	r6, PRIMASK
    89d8:	b672      	cpsid	i
    89da:	7b20      	ldrb	r0, [r4, #12]
    89dc:	b128      	cbz	r0, 89ea <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x3e>
    89de:	7b60      	ldrb	r0, [r4, #13]
    89e0:	b118      	cbz	r0, 89ea <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x3e>
    89e2:	f7fe fee1 	bl	77a8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    89e6:	f000 fad1 	bl	8f8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    89ea:	b126      	cbz	r6, 89f6 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4a>
    89ec:	e004      	b.n	89f8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4c>
    89ee:	7828      	ldrb	r0, [r5, #0]
    89f0:	f7fa fa64 	bl	2ebc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    89f4:	e000      	b.n	89f8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4c>
    89f6:	b662      	cpsie	i
    89f8:	7828      	ldrb	r0, [r5, #0]
    89fa:	f7fa fb9d 	bl	3138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    89fe:	f000 fe37 	bl	9670 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xafc>
    8a02:	2000      	movs	r0, #0
    8a04:	7060      	strb	r0, [r4, #1]
    8a06:	7f20      	ldrb	r0, [r4, #28]
    8a08:	b100      	cbz	r0, 8a0c <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x60>
    8a0a:	270c      	movs	r7, #12
    8a0c:	f000 fe5a 	bl	96c4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb50>
    8a10:	4638      	mov	r0, r7
    8a12:	e7d9      	b.n	89c8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x1c>
    8a14:	20001320 	.word	0x20001320

00008a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>:
    8a18:	4801      	ldr	r0, [pc, #4]	; (8a20 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ+0x8>)
    8a1a:	7800      	ldrb	r0, [r0, #0]
    8a1c:	4770      	bx	lr
    8a1e:	0000      	.short	0x0000
    8a20:	20001320 	.word	0x20001320

00008a24 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>:
    8a24:	490c      	ldr	r1, [pc, #48]	; (8a58 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x34>)
    8a26:	b508      	push	{r3, lr}
    8a28:	7809      	ldrb	r1, [r1, #0]
    8a2a:	b121      	cbz	r1, 8a36 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x12>
    8a2c:	f44f 618b 	mov.w	r1, #1112	; 0x458
    8a30:	2035      	movs	r0, #53	; 0x35
    8a32:	f7fc f971 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a36:	2300      	movs	r3, #0
    8a38:	9300      	str	r3, [sp, #0]
    8a3a:	7801      	ldrb	r1, [r0, #0]
    8a3c:	461a      	mov	r2, r3
    8a3e:	07c9      	lsls	r1, r1, #31
    8a40:	d003      	beq.n	8a4a <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x26>
    8a42:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    8a46:	2201      	movs	r2, #1
    8a48:	9000      	str	r0, [sp, #0]
    8a4a:	4669      	mov	r1, sp
    8a4c:	4618      	mov	r0, r3
    8a4e:	f000 faad 	bl	8fac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x438>
    8a52:	2000      	movs	r0, #0
    8a54:	bd08      	pop	{r3, pc}
    8a56:	0000      	.short	0x0000
    8a58:	20001320 	.word	0x20001320

00008a5c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    8a5c:	b570      	push	{r4, r5, r6, lr}
    8a5e:	f003 fe9b 	bl	c798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8a62:	4c0e      	ldr	r4, [pc, #56]	; (8a9c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    8a64:	4606      	mov	r6, r0
    8a66:	7860      	ldrb	r0, [r4, #1]
    8a68:	b170      	cbz	r0, 8a88 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    8a6a:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    8a6e:	4632      	mov	r2, r6
    8a70:	4628      	mov	r0, r5
    8a72:	f005 ff78 	bl	e966 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8a76:	6060      	str	r0, [r4, #4]
    8a78:	42a8      	cmp	r0, r5
    8a7a:	d005      	beq.n	8a88 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    8a7c:	68e1      	ldr	r1, [r4, #12]
    8a7e:	1b40      	subs	r0, r0, r5
    8a80:	4408      	add	r0, r1
    8a82:	60e0      	str	r0, [r4, #12]
    8a84:	f7fa fd6e 	bl	3564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8a88:	6860      	ldr	r0, [r4, #4]
    8a8a:	42b0      	cmp	r0, r6
    8a8c:	d301      	bcc.n	8a92 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    8a8e:	7820      	ldrb	r0, [r4, #0]
    8a90:	b108      	cbz	r0, 8a96 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    8a92:	2000      	movs	r0, #0
    8a94:	bd70      	pop	{r4, r5, r6, pc}
    8a96:	2001      	movs	r0, #1
    8a98:	bd70      	pop	{r4, r5, r6, pc}
    8a9a:	0000      	.short	0x0000
    8a9c:	20001310 	.word	0x20001310

00008aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    8aa0:	b510      	push	{r4, lr}
    8aa2:	2905      	cmp	r1, #5
    8aa4:	d22d      	bcs.n	8b02 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    8aa6:	e8df f001 	tbb	[pc, r1]
    8aaa:	0a05      	.short	0x0a05
    8aac:	00280e03 	.word	0x00280e03
    8ab0:	2100      	movs	r1, #0
    8ab2:	e000      	b.n	8ab6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    8ab4:	2101      	movs	r1, #1
    8ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8aba:	f000 b9d1 	b.w	8e60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ec>
    8abe:	2103      	movs	r1, #3
    8ac0:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    8ac4:	bd10      	pop	{r4, pc}
    8ac6:	4911      	ldr	r1, [pc, #68]	; (8b0c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    8ac8:	4604      	mov	r4, r0
    8aca:	68c0      	ldr	r0, [r0, #12]
    8acc:	6008      	str	r0, [r1, #0]
    8ace:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    8ad2:	6220      	str	r0, [r4, #32]
    8ad4:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    8ad8:	83a0      	strh	r0, [r4, #28]
    8ada:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    8ade:	60e0      	str	r0, [r4, #12]
    8ae0:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    8ae4:	82a0      	strh	r0, [r4, #20]
    8ae6:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    8aea:	82e0      	strh	r0, [r4, #22]
    8aec:	4620      	mov	r0, r4
    8aee:	f006 fd67 	bl	f5c0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    8af2:	2002      	movs	r0, #2
    8af4:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8af8:	bd10      	pop	{r4, pc}
    8afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8afe:	f006 bd5f 	b.w	f5c0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    8b02:	f640 3158 	movw	r1, #2904	; 0xb58
    8b06:	2035      	movs	r0, #53	; 0x35
    8b08:	f7fc f906 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b0c:	200000fc 	.word	0x200000fc

00008b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    8b10:	b570      	push	{r4, r5, r6, lr}
    8b12:	4605      	mov	r5, r0
    8b14:	f003 fe40 	bl	c798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8b18:	4604      	mov	r4, r0
    8b1a:	b155      	cbz	r5, 8b32 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x22>
    8b1c:	2d03      	cmp	r5, #3
    8b1e:	d00d      	beq.n	8b3c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    8b20:	2d04      	cmp	r5, #4
    8b22:	d00e      	beq.n	8b42 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x32>
    8b24:	2d06      	cmp	r5, #6
    8b26:	d01e      	beq.n	8b66 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x56>
    8b28:	f240 5194 	movw	r1, #1428	; 0x594
    8b2c:	2035      	movs	r0, #53	; 0x35
    8b2e:	f7fc f8f3 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b32:	2001      	movs	r0, #1
    8b34:	f006 fd28 	bl	f588 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    8b38:	3098      	adds	r0, #152	; 0x98
    8b3a:	e004      	b.n	8b46 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    8b3c:	f44f 7057 	mov.w	r0, #860	; 0x35c
    8b40:	e001      	b.n	8b46 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    8b42:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    8b46:	4e0a      	ldr	r6, [pc, #40]	; (8b70 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x60>)
    8b48:	1825      	adds	r5, r4, r0
    8b4a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8b4c:	38f0      	subs	r0, #240	; 0xf0
    8b4e:	4285      	cmp	r5, r0
    8b50:	d307      	bcc.n	8b62 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x52>
    8b52:	2400      	movs	r4, #0
    8b54:	f000 fc12 	bl	937c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x808>
    8b58:	b140      	cbz	r0, 8b6c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    8b5a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8b5c:	38f0      	subs	r0, #240	; 0xf0
    8b5e:	4285      	cmp	r5, r0
    8b60:	d203      	bcs.n	8b6a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    8b62:	2401      	movs	r4, #1
    8b64:	e002      	b.n	8b6c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    8b66:	2001      	movs	r0, #1
    8b68:	bd70      	pop	{r4, r5, r6, pc}
    8b6a:	2400      	movs	r4, #0
    8b6c:	4620      	mov	r0, r4
    8b6e:	bd70      	pop	{r4, r5, r6, pc}
    8b70:	20001320 	.word	0x20001320

00008b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    8b74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8b76:	2501      	movs	r5, #1
    8b78:	4c24      	ldr	r4, [pc, #144]	; (8c0c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    8b7a:	2806      	cmp	r0, #6
    8b7c:	d243      	bcs.n	8c06 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    8b7e:	e8df f000 	tbb	[pc, r0]
    8b82:	1903      	.short	0x1903
    8b84:	3e232319 	.word	0x3e232319
    8b88:	f002 fcfa 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8b8c:	7860      	ldrb	r0, [r4, #1]
    8b8e:	bb88      	cbnz	r0, 8bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8b90:	2200      	movs	r2, #0
    8b92:	4611      	mov	r1, r2
    8b94:	4668      	mov	r0, sp
    8b96:	f000 fc3b 	bl	9410 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x89c>
    8b9a:	b148      	cbz	r0, 8bb0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    8b9c:	f7fe fc32 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8ba0:	7800      	ldrb	r0, [r0, #0]
    8ba2:	4669      	mov	r1, sp
    8ba4:	f006 fd1e 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    8ba8:	bb20      	cbnz	r0, 8bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8baa:	f640 2163 	movw	r1, #2659	; 0xa63
    8bae:	e01c      	b.n	8bea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    8bb0:	70e5      	strb	r5, [r4, #3]
    8bb2:	e020      	b.n	8bf6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    8bb4:	2802      	cmp	r0, #2
    8bb6:	d005      	beq.n	8bc4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    8bb8:	2000      	movs	r0, #0
    8bba:	b004      	add	sp, #16
    8bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8bc0:	f000 b96a 	b.w	8e98 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x324>
    8bc4:	2001      	movs	r0, #1
    8bc6:	e7f8      	b.n	8bba <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    8bc8:	2804      	cmp	r0, #4
    8bca:	d011      	beq.n	8bf0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    8bcc:	f05f 0600 	movs.w	r6, #0
    8bd0:	f002 fcd6 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8bd4:	7725      	strb	r5, [r4, #28]
    8bd6:	7766      	strb	r6, [r4, #29]
    8bd8:	69a1      	ldr	r1, [r4, #24]
    8bda:	2000      	movs	r0, #0
    8bdc:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    8be0:	f000 f85a 	bl	8c98 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x124>
    8be4:	b130      	cbz	r0, 8bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8be6:	f640 3118 	movw	r1, #2840	; 0xb18
    8bea:	2035      	movs	r0, #53	; 0x35
    8bec:	f7fc f894 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8bf0:	2601      	movs	r6, #1
    8bf2:	e7ed      	b.n	8bd0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    8bf4:	e7ff      	b.n	8bf6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    8bf6:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8bfa:	f000 b9c7 	b.w	8f8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    8bfe:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8c02:	f002 bcbd 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8c06:	f640 31b2 	movw	r1, #2994	; 0xbb2
    8c0a:	e7ee      	b.n	8bea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    8c0c:	20001320 	.word	0x20001320
    8c10:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8c12:	4c18      	ldr	r4, [pc, #96]	; (8c74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x100>)
    8c14:	2001      	movs	r0, #1
    8c16:	7020      	strb	r0, [r4, #0]
    8c18:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8c1c:	e00b      	b.n	8c36 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xc2>
    8c1e:	2100      	movs	r1, #0
    8c20:	f005 fd0d 	bl	e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8c24:	0006      	movs	r6, r0
    8c26:	d010      	beq.n	8c4a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xd6>
    8c28:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    8c2c:	f7fa fa84 	bl	3138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8c30:	4630      	mov	r0, r6
    8c32:	f006 fcef 	bl	f614 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x9c>
    8c36:	4669      	mov	r1, sp
    8c38:	2000      	movs	r0, #0
    8c3a:	f005 fd09 	bl	e650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8c3e:	b180      	cbz	r0, 8c62 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    8c40:	f240 2145 	movw	r1, #581	; 0x245
    8c44:	2035      	movs	r0, #53	; 0x35
    8c46:	f7fc f867 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c4a:	f240 514a 	movw	r1, #1354	; 0x54a
    8c4e:	e7f9      	b.n	8c44 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xd0>
    8c50:	9802      	ldr	r0, [sp, #8]
    8c52:	b130      	cbz	r0, 8c62 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    8c54:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    8c58:	b119      	cbz	r1, 8c62 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    8c5a:	8800      	ldrh	r0, [r0, #0]
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d1de      	bne.n	8c1e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaa>
    8c60:	e004      	b.n	8c6c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xf8>
    8c62:	4668      	mov	r0, sp
    8c64:	f7fc fa88 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8c68:	2800      	cmp	r0, #0
    8c6a:	d0f1      	beq.n	8c50 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xdc>
    8c6c:	2000      	movs	r0, #0
    8c6e:	7020      	strb	r0, [r4, #0]
    8c70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8c72:	0000      	.short	0x0000
    8c74:	20001310 	.word	0x20001310
    8c78:	4906      	ldr	r1, [pc, #24]	; (8c94 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x120>)
    8c7a:	b140      	cbz	r0, 8c8e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x11a>
    8c7c:	2201      	movs	r2, #1
    8c7e:	708a      	strb	r2, [r1, #2]
    8c80:	f242 7210 	movw	r2, #10000	; 0x2710
    8c84:	4350      	muls	r0, r2
    8c86:	684a      	ldr	r2, [r1, #4]
    8c88:	4410      	add	r0, r2
    8c8a:	6208      	str	r0, [r1, #32]
    8c8c:	4770      	bx	lr
    8c8e:	2000      	movs	r0, #0
    8c90:	7088      	strb	r0, [r1, #2]
    8c92:	4770      	bx	lr
    8c94:	20001320 	.word	0x20001320
    8c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8c9a:	4c1c      	ldr	r4, [pc, #112]	; (8d0c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x198>)
    8c9c:	7820      	ldrb	r0, [r4, #0]
    8c9e:	2805      	cmp	r0, #5
    8ca0:	d002      	beq.n	8ca8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x134>
    8ca2:	200c      	movs	r0, #12
    8ca4:	b004      	add	sp, #16
    8ca6:	bd10      	pop	{r4, pc}
    8ca8:	69a1      	ldr	r1, [r4, #24]
    8caa:	b129      	cbz	r1, 8cb8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x144>
    8cac:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    8cb0:	b128      	cbz	r0, 8cbe <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x14a>
    8cb2:	f240 5103 	movw	r1, #1283	; 0x503
    8cb6:	e025      	b.n	8d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    8cb8:	f240 5102 	movw	r1, #1282	; 0x502
    8cbc:	e022      	b.n	8d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    8cbe:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    8cc2:	2820      	cmp	r0, #32
    8cc4:	d002      	beq.n	8ccc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x158>
    8cc6:	f240 5105 	movw	r1, #1285	; 0x505
    8cca:	e01b      	b.n	8d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    8ccc:	4810      	ldr	r0, [pc, #64]	; (8d10 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x19c>)
    8cce:	f7fa fb3f 	bl	3350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8cd2:	69a1      	ldr	r1, [r4, #24]
    8cd4:	2820      	cmp	r0, #32
    8cd6:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    8cda:	d00e      	beq.n	8cfa <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x186>
    8cdc:	2300      	movs	r3, #0
    8cde:	2201      	movs	r2, #1
    8ce0:	4668      	mov	r0, sp
    8ce2:	f000 fa09 	bl	90f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x584>
    8ce6:	69a0      	ldr	r0, [r4, #24]
    8ce8:	4669      	mov	r1, sp
    8cea:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    8cee:	f006 fc79 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    8cf2:	b128      	cbz	r0, 8d00 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x18c>
    8cf4:	2000      	movs	r0, #0
    8cf6:	61a0      	str	r0, [r4, #24]
    8cf8:	e7d4      	b.n	8ca4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x130>
    8cfa:	f240 5109 	movw	r1, #1289	; 0x509
    8cfe:	e001      	b.n	8d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    8d00:	f240 510c 	movw	r1, #1292	; 0x50c
    8d04:	2035      	movs	r0, #53	; 0x35
    8d06:	f7fc f807 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d0a:	0000      	.short	0x0000
    8d0c:	20001320 	.word	0x20001320
    8d10:	00009001 	.word	0x00009001
    8d14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8d16:	460d      	mov	r5, r1
    8d18:	2001      	movs	r0, #1
    8d1a:	f006 fc1e 	bl	f55a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8d1e:	b2c4      	uxtb	r4, r0
    8d20:	200b      	movs	r0, #11
    8d22:	f006 fc1a 	bl	f55a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8d26:	b2c0      	uxtb	r0, r0
    8d28:	4284      	cmp	r4, r0
    8d2a:	d002      	beq.n	8d32 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1be>
    8d2c:	f240 21ce 	movw	r1, #718	; 0x2ce
    8d30:	e073      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8d32:	f7fe fb67 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8d36:	2601      	movs	r6, #1
    8d38:	4c3b      	ldr	r4, [pc, #236]	; (8e28 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b4>)
    8d3a:	2d09      	cmp	r5, #9
    8d3c:	d270      	bcs.n	8e20 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ac>
    8d3e:	e8df f005 	tbb	[pc, r5]
    8d42:	3605      	.short	0x3605
    8d44:	6f464a4a 	.word	0x6f464a4a
    8d48:	006a665e 	.word	0x006a665e
    8d4c:	7326      	strb	r6, [r4, #12]
    8d4e:	7861      	ldrb	r1, [r4, #1]
    8d50:	2900      	cmp	r1, #0
    8d52:	d12b      	bne.n	8dac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    8d54:	7800      	ldrb	r0, [r0, #0]
    8d56:	f7f9 fc67 	bl	2628 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    8d5a:	4605      	mov	r5, r0
    8d5c:	6120      	str	r0, [r4, #16]
    8d5e:	f000 fccb 	bl	96f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb84>
    8d62:	b118      	cbz	r0, 8d6c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1f8>
    8d64:	2000      	movs	r0, #0
    8d66:	f88d 0004 	strb.w	r0, [sp, #4]
    8d6a:	e001      	b.n	8d70 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1fc>
    8d6c:	f88d 6004 	strb.w	r6, [sp, #4]
    8d70:	4629      	mov	r1, r5
    8d72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8d74:	f7f9 fc34 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8d78:	6861      	ldr	r1, [r4, #4]
    8d7a:	fbb0 f2f1 	udiv	r2, r0, r1
    8d7e:	fb01 0012 	mls	r0, r1, r2, r0
    8d82:	b150      	cbz	r0, 8d9a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x226>
    8d84:	f05f 0000 	movs.w	r0, #0
    8d88:	f88d 0005 	strb.w	r0, [sp, #5]
    8d8c:	4668      	mov	r0, sp
    8d8e:	f7fe fc73 	bl	7678 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    8d92:	b120      	cbz	r0, 8d9e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x22a>
    8d94:	f44f 7142 	mov.w	r1, #776	; 0x308
    8d98:	e03f      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8d9a:	2001      	movs	r0, #1
    8d9c:	e7f4      	b.n	8d88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x214>
    8d9e:	4922      	ldr	r1, [pc, #136]	; (8e28 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b4>)
    8da0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8da2:	3910      	subs	r1, #16
    8da4:	38df      	subs	r0, #223	; 0xdf
    8da6:	60c8      	str	r0, [r1, #12]
    8da8:	f7fa fbdc 	bl	3564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8dac:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    8dae:	7860      	ldrb	r0, [r4, #1]
    8db0:	b128      	cbz	r0, 8dbe <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x24a>
    8db2:	f7fe fcf9 	bl	77a8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    8db6:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8dba:	f000 b8e7 	b.w	8f8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    8dbe:	7366      	strb	r6, [r4, #13]
    8dc0:	f7fe fcec 	bl	779c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    8dc4:	2800      	cmp	r0, #0
    8dc6:	d0f1      	beq.n	8dac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    8dc8:	f240 311b 	movw	r1, #795	; 0x31b
    8dcc:	e025      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8dce:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8dd2:	f003 bec5 	b.w	cb60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    8dd6:	7805      	ldrb	r5, [r0, #0]
    8dd8:	2201      	movs	r2, #1
    8dda:	2100      	movs	r1, #0
    8ddc:	4668      	mov	r0, sp
    8dde:	f000 fb17 	bl	9410 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x89c>
    8de2:	b140      	cbz	r0, 8df6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x282>
    8de4:	4669      	mov	r1, sp
    8de6:	4628      	mov	r0, r5
    8de8:	f006 fbfc 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    8dec:	2800      	cmp	r0, #0
    8dee:	d1dd      	bne.n	8dac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    8df0:	f640 217f 	movw	r1, #2687	; 0xa7f
    8df4:	e011      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8df6:	70e6      	strb	r6, [r4, #3]
    8df8:	f000 f818 	bl	8e2c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b8>
    8dfc:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    8dfe:	f000 fabd 	bl	937c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x808>
    8e02:	2800      	cmp	r0, #0
    8e04:	d1fa      	bne.n	8dfc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x288>
    8e06:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8e0a:	f006 ba8e 	b.w	f32a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    8e0e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8e12:	f000 b80b 	b.w	8e2c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b8>
    8e16:	f240 313f 	movw	r1, #831	; 0x33f
    8e1a:	2035      	movs	r0, #53	; 0x35
    8e1c:	f7fb ff7c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e20:	f240 3143 	movw	r1, #835	; 0x343
    8e24:	e7f9      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8e26:	0000      	.short	0x0000
    8e28:	20001320 	.word	0x20001320
    8e2c:	b510      	push	{r4, lr}
    8e2e:	4c0b      	ldr	r4, [pc, #44]	; (8e5c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e8>)
    8e30:	7820      	ldrb	r0, [r4, #0]
    8e32:	b130      	cbz	r0, 8e42 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ce>
    8e34:	f000 fc1c 	bl	9670 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xafc>
    8e38:	78e0      	ldrb	r0, [r4, #3]
    8e3a:	b158      	cbz	r0, 8e54 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e0>
    8e3c:	7f20      	ldrb	r0, [r4, #28]
    8e3e:	b128      	cbz	r0, 8e4c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2d8>
    8e40:	e008      	b.n	8e54 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e0>
    8e42:	f240 21ba 	movw	r1, #698	; 0x2ba
    8e46:	2035      	movs	r0, #53	; 0x35
    8e48:	f7fb ff66 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e4c:	f7fe fcbe 	bl	77cc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    8e50:	f002 fb96 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e58:	f000 bc34 	b.w	96c4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb50>
    8e5c:	20001320 	.word	0x20001320
    8e60:	b510      	push	{r4, lr}
    8e62:	4604      	mov	r4, r0
    8e64:	2901      	cmp	r1, #1
    8e66:	d102      	bne.n	8e6e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2fa>
    8e68:	480a      	ldr	r0, [pc, #40]	; (8e94 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x320>)
    8e6a:	7800      	ldrb	r0, [r0, #0]
    8e6c:	b140      	cbz	r0, 8e80 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x30c>
    8e6e:	2004      	movs	r0, #4
    8e70:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8e74:	f003 fcc4 	bl	c800 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e7c:	f7fa ba90 	b.w	33a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8e80:	2200      	movs	r2, #0
    8e82:	2101      	movs	r1, #1
    8e84:	4620      	mov	r0, r4
    8e86:	f006 fbdd 	bl	f644 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xcc>
    8e8a:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    8e8e:	1c40      	adds	r0, r0, #1
    8e90:	8020      	strh	r0, [r4, #0]
    8e92:	e7ef      	b.n	8e74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x300>
    8e94:	20001310 	.word	0x20001310
    8e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e9c:	4c39      	ldr	r4, [pc, #228]	; (8f84 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x410>)
    8e9e:	4682      	mov	sl, r0
    8ea0:	6926      	ldr	r6, [r4, #16]
    8ea2:	f003 fc79 	bl	c798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8ea6:	4605      	mov	r5, r0
    8ea8:	69a0      	ldr	r0, [r4, #24]
    8eaa:	2201      	movs	r2, #1
    8eac:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    8eb0:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    8eb4:	3062      	adds	r0, #98	; 0x62
    8eb6:	2101      	movs	r1, #1
    8eb8:	7281      	strb	r1, [r0, #10]
    8eba:	69a0      	ldr	r0, [r4, #24]
    8ebc:	2100      	movs	r1, #0
    8ebe:	302c      	adds	r0, #44	; 0x2c
    8ec0:	f006 f991 	bl	f1e6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8ec4:	2101      	movs	r1, #1
    8ec6:	2000      	movs	r0, #0
    8ec8:	f006 fbe8 	bl	f69c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x124>
    8ecc:	69a7      	ldr	r7, [r4, #24]
    8ece:	1971      	adds	r1, r6, r5
    8ed0:	4408      	add	r0, r1
    8ed2:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    8ed6:	f8d7 800c 	ldr.w	r8, [r7, #12]
    8eda:	f002 fb29 	bl	b530 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    8ede:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    8ee2:	4288      	cmp	r0, r1
    8ee4:	d00a      	beq.n	8efc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x388>
    8ee6:	464a      	mov	r2, r9
    8ee8:	4641      	mov	r1, r8
    8eea:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    8eee:	f006 fd03 	bl	f8f8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    8ef2:	4540      	cmp	r0, r8
    8ef4:	d903      	bls.n	8efe <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x38a>
    8ef6:	f44f 61bf 	mov.w	r1, #1528	; 0x5f8
    8efa:	e022      	b.n	8f42 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3ce>
    8efc:	2000      	movs	r0, #0
    8efe:	4922      	ldr	r1, [pc, #136]	; (8f88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x414>)
    8f00:	4607      	mov	r7, r0
    8f02:	6849      	ldr	r1, [r1, #4]
    8f04:	4288      	cmp	r0, r1
    8f06:	69a0      	ldr	r0, [r4, #24]
    8f08:	68c1      	ldr	r1, [r0, #12]
    8f0a:	d202      	bcs.n	8f12 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x39e>
    8f0c:	440f      	add	r7, r1
    8f0e:	6201      	str	r1, [r0, #32]
    8f10:	e008      	b.n	8f24 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3b0>
    8f12:	4638      	mov	r0, r7
    8f14:	f005 feb2 	bl	ec7c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    8f18:	69a1      	ldr	r1, [r4, #24]
    8f1a:	68c9      	ldr	r1, [r1, #12]
    8f1c:	f005 feaa 	bl	ec74 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8f20:	69a1      	ldr	r1, [r4, #24]
    8f22:	6208      	str	r0, [r1, #32]
    8f24:	69a0      	ldr	r0, [r4, #24]
    8f26:	68c1      	ldr	r1, [r0, #12]
    8f28:	2005      	movs	r0, #5
    8f2a:	f005 fead 	bl	ec88 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8f2e:	69a1      	ldr	r1, [r4, #24]
    8f30:	b280      	uxth	r0, r0
    8f32:	8388      	strh	r0, [r1, #28]
    8f34:	69a1      	ldr	r1, [r4, #24]
    8f36:	6a09      	ldr	r1, [r1, #32]
    8f38:	1a79      	subs	r1, r7, r1
    8f3a:	4288      	cmp	r0, r1
    8f3c:	d804      	bhi.n	8f48 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3d4>
    8f3e:	f640 21ee 	movw	r1, #2798	; 0xaee
    8f42:	2035      	movs	r0, #53	; 0x35
    8f44:	f7fb fee8 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f48:	2101      	movs	r1, #1
    8f4a:	4650      	mov	r0, sl
    8f4c:	f006 fba6 	bl	f69c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x124>
    8f50:	4428      	add	r0, r5
    8f52:	19c5      	adds	r5, r0, r7
    8f54:	2101      	movs	r1, #1
    8f56:	4650      	mov	r0, sl
    8f58:	f005 fdc2 	bl	eae0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8f5c:	4405      	add	r5, r0
    8f5e:	2001      	movs	r0, #1
    8f60:	f007 fc38 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8f64:	f64a 2113 	movw	r1, #43539	; 0xaa13
    8f68:	4408      	add	r0, r1
    8f6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8f6e:	fbb0 f0f1 	udiv	r0, r0, r1
    8f72:	1a29      	subs	r1, r5, r0
    8f74:	4630      	mov	r0, r6
    8f76:	f7f9 fb01 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8f7a:	69a1      	ldr	r1, [r4, #24]
    8f7c:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    8f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8f84:	20001320 	.word	0x20001320
    8f88:	200000fc 	.word	0x200000fc
    8f8c:	b510      	push	{r4, lr}
    8f8e:	4c06      	ldr	r4, [pc, #24]	; (8fa8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x434>)
    8f90:	7b20      	ldrb	r0, [r4, #12]
    8f92:	2800      	cmp	r0, #0
    8f94:	d006      	beq.n	8fa4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x430>
    8f96:	f003 fc33 	bl	c800 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8f9a:	f7fa fa01 	bl	33a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8f9e:	2000      	movs	r0, #0
    8fa0:	7320      	strb	r0, [r4, #12]
    8fa2:	7360      	strb	r0, [r4, #13]
    8fa4:	bd10      	pop	{r4, pc}
    8fa6:	0000      	.short	0x0000
    8fa8:	20001320 	.word	0x20001320
    8fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fb0:	4d11      	ldr	r5, [pc, #68]	; (8ff8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x484>)
    8fb2:	4616      	mov	r6, r2
    8fb4:	460f      	mov	r7, r1
    8fb6:	2400      	movs	r4, #0
    8fb8:	6068      	str	r0, [r5, #4]
    8fba:	f006 fb63 	bl	f684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    8fbe:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8ffc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x488>
    8fc2:	2100      	movs	r1, #0
    8fc4:	f81c 2001 	ldrb.w	r2, [ip, r1]
    8fc8:	4232      	tst	r2, r6
    8fca:	d007      	beq.n	8fdc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x468>
    8fcc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    8fd0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    8fd4:	1a1b      	subs	r3, r3, r0
    8fd6:	1c64      	adds	r4, r4, #1
    8fd8:	b2e4      	uxtb	r4, r4
    8fda:	6093      	str	r3, [r2, #8]
    8fdc:	1c49      	adds	r1, r1, #1
    8fde:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8fe2:	d0ef      	beq.n	8fc4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x450>
    8fe4:	f016 0f0e 	tst.w	r6, #14
    8fe8:	d004      	beq.n	8ff4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x480>
    8fea:	f640 11b8 	movw	r1, #2488	; 0x9b8
    8fee:	2035      	movs	r0, #53	; 0x35
    8ff0:	f7fb fe92 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ff8:	20001320 	.word	0x20001320
    8ffc:	00010937 	.word	0x00010937
    9000:	b570      	push	{r4, r5, r6, lr}
    9002:	460d      	mov	r5, r1
    9004:	0004      	movs	r4, r0
    9006:	d00c      	beq.n	9022 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x4ae>
    9008:	2001      	movs	r0, #1
    900a:	f006 faa6 	bl	f55a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    900e:	b2c6      	uxtb	r6, r0
    9010:	200b      	movs	r0, #11
    9012:	f006 faa2 	bl	f55a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    9016:	b2c0      	uxtb	r0, r0
    9018:	4286      	cmp	r6, r0
    901a:	d005      	beq.n	9028 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x4b4>
    901c:	f44f 711a 	mov.w	r1, #616	; 0x268
    9020:	e061      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    9022:	f240 2165 	movw	r1, #613	; 0x265
    9026:	e05e      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    9028:	2d09      	cmp	r5, #9
    902a:	d25f      	bcs.n	90ec <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x578>
    902c:	e8df f005 	tbb	[pc, r5]
    9030:	3d3d3505 	.word	0x3d3d3505
    9034:	4b445e39 	.word	0x4b445e39
    9038:	0059      	.short	0x0059
    903a:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    903e:	b348      	cbz	r0, 9094 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x520>
    9040:	4620      	mov	r0, r4
    9042:	f000 fd69 	bl	9b18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    9046:	f006 fb1d 	bl	f684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    904a:	f200 1037 	addw	r0, r0, #311	; 0x137
    904e:	b285      	uxth	r5, r0
    9050:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    9054:	2128      	movs	r1, #40	; 0x28
    9056:	f006 fab1 	bl	f5bc <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x44>
    905a:	182e      	adds	r6, r5, r0
    905c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    905e:	68e0      	ldr	r0, [r4, #12]
    9060:	4288      	cmp	r0, r1
    9062:	d200      	bcs.n	9066 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x4f2>
    9064:	4601      	mov	r1, r0
    9066:	4632      	mov	r2, r6
    9068:	4620      	mov	r0, r4
    906a:	f006 f845 	bl	f0f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    906e:	4d21      	ldr	r5, [pc, #132]	; (90f4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x580>)
    9070:	4632      	mov	r2, r6
    9072:	6068      	str	r0, [r5, #4]
    9074:	4620      	mov	r0, r4
    9076:	68e1      	ldr	r1, [r4, #12]
    9078:	f006 f83e 	bl	f0f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    907c:	60a8      	str	r0, [r5, #8]
    907e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9082:	f006 f89a 	bl	f1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9086:	f5a0 7093 	sub.w	r0, r0, #294	; 0x126
    908a:	60e8      	str	r0, [r5, #12]
    908c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9090:	f7fa ba68 	b.w	3564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9094:	f240 216e 	movw	r1, #622	; 0x26e
    9098:	e025      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    909a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    909e:	f006 bb83 	b.w	f7a8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    90a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90a6:	f003 bd5b 	b.w	cb60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    90aa:	4620      	mov	r0, r4
    90ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90b0:	2201      	movs	r2, #1
    90b2:	2100      	movs	r1, #0
    90b4:	f006 bac6 	b.w	f644 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xcc>
    90b8:	2001      	movs	r0, #1
    90ba:	f7f9 f933 	bl	2324 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    90be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90c2:	f005 bb97 	b.w	e7f4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    90c6:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    90ca:	2804      	cmp	r0, #4
    90cc:	d002      	beq.n	90d4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x560>
    90ce:	f240 21a2 	movw	r1, #674	; 0x2a2
    90d2:	e008      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    90d4:	4620      	mov	r0, r4
    90d6:	f006 fa9d 	bl	f614 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x9c>
    90da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90de:	f002 ba4f 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    90e2:	f240 21ad 	movw	r1, #685	; 0x2ad
    90e6:	2035      	movs	r0, #53	; 0x35
    90e8:	f7fb fe16 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90ec:	f240 21b1 	movw	r1, #689	; 0x2b1
    90f0:	e7f9      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    90f2:	0000      	.short	0x0000
    90f4:	20001310 	.word	0x20001310
    90f8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    90fc:	4605      	mov	r5, r0
    90fe:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9102:	2600      	movs	r6, #0
    9104:	f8d1 b020 	ldr.w	fp, [r1, #32]
    9108:	469a      	mov	sl, r3
    910a:	460c      	mov	r4, r1
    910c:	280d      	cmp	r0, #13
    910e:	d020      	beq.n	9152 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5de>
    9110:	280c      	cmp	r0, #12
    9112:	d01e      	beq.n	9152 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5de>
    9114:	2824      	cmp	r0, #36	; 0x24
    9116:	d01c      	beq.n	9152 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5de>
    9118:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    911c:	2824      	cmp	r0, #36	; 0x24
    911e:	d018      	beq.n	9152 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5de>
    9120:	2000      	movs	r0, #0
    9122:	4680      	mov	r8, r0
    9124:	f006 faa3 	bl	f66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    9128:	4681      	mov	r9, r0
    912a:	f1ba 0f00 	cmp.w	sl, #0
    912e:	d003      	beq.n	9138 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c4>
    9130:	2101      	movs	r1, #1
    9132:	4620      	mov	r0, r4
    9134:	f006 fadf 	bl	f6f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    9138:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    913c:	2701      	movs	r7, #1
    913e:	b150      	cbz	r0, 9156 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5e2>
    9140:	2801      	cmp	r0, #1
    9142:	d01b      	beq.n	917c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x608>
    9144:	2802      	cmp	r0, #2
    9146:	d011      	beq.n	916c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5f8>
    9148:	2803      	cmp	r0, #3
    914a:	d017      	beq.n	917c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x608>
    914c:	f640 113b 	movw	r1, #2363	; 0x93b
    9150:	e07b      	b.n	924a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6d6>
    9152:	2001      	movs	r0, #1
    9154:	e7e5      	b.n	9122 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5ae>
    9156:	9802      	ldr	r0, [sp, #8]
    9158:	b128      	cbz	r0, 9166 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5f2>
    915a:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    915e:	4620      	mov	r0, r4
    9160:	f006 fa2e 	bl	f5c0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    9164:	e00b      	b.n	917e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x60a>
    9166:	f640 1101 	movw	r1, #2305	; 0x901
    916a:	e06e      	b.n	924a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6d6>
    916c:	4838      	ldr	r0, [pc, #224]	; (9250 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6dc>)
    916e:	6801      	ldr	r1, [r0, #0]
    9170:	2003      	movs	r0, #3
    9172:	eb01 060b 	add.w	r6, r1, fp
    9176:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    917a:	e000      	b.n	917e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x60a>
    917c:	68e6      	ldr	r6, [r4, #12]
    917e:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9182:	4631      	mov	r1, r6
    9184:	f7f9 f9fa 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9188:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    918c:	60e8      	str	r0, [r5, #12]
    918e:	2000      	movs	r0, #0
    9190:	7028      	strb	r0, [r5, #0]
    9192:	f8a5 9008 	strh.w	r9, [r5, #8]
    9196:	4620      	mov	r0, r4
    9198:	f000 fc0c 	bl	99b4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    919c:	f1a8 0101 	sub.w	r1, r8, #1
    91a0:	4208      	tst	r0, r1
    91a2:	d101      	bne.n	91a8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x634>
    91a4:	72af      	strb	r7, [r5, #10]
    91a6:	e005      	b.n	91b4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x640>
    91a8:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    91ac:	2801      	cmp	r0, #1
    91ae:	d017      	beq.n	91e0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x66c>
    91b0:	2003      	movs	r0, #3
    91b2:	72a8      	strb	r0, [r5, #10]
    91b4:	46b9      	mov	r9, r7
    91b6:	72ef      	strb	r7, [r5, #11]
    91b8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    91bc:	f005 fffd 	bl	f1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    91c0:	6068      	str	r0, [r5, #4]
    91c2:	f1ba 0f00 	cmp.w	sl, #0
    91c6:	d03c      	beq.n	9242 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6ce>
    91c8:	4631      	mov	r1, r6
    91ca:	4628      	mov	r0, r5
    91cc:	f005 fce7 	bl	eb9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    91d0:	b287      	uxth	r7, r0
    91d2:	4620      	mov	r0, r4
    91d4:	f000 fbee 	bl	99b4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    91d8:	f1b8 0f00 	cmp.w	r8, #0
    91dc:	d002      	beq.n	91e4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x670>
    91de:	e014      	b.n	920a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x696>
    91e0:	2002      	movs	r0, #2
    91e2:	e7e6      	b.n	91b2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x63e>
    91e4:	42b8      	cmp	r0, r7
    91e6:	d810      	bhi.n	920a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x696>
    91e8:	4607      	mov	r7, r0
    91ea:	f885 900a 	strb.w	r9, [r5, #10]
    91ee:	fb06 f107 	mul.w	r1, r6, r7
    91f2:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    91f6:	f7f9 f9c1 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    91fa:	60e8      	str	r0, [r5, #12]
    91fc:	b31e      	cbz	r6, 9246 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6d2>
    91fe:	4631      	mov	r1, r6
    9200:	4628      	mov	r0, r5
    9202:	f005 fccc 	bl	eb9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9206:	4438      	add	r0, r7
    9208:	b287      	uxth	r7, r0
    920a:	4639      	mov	r1, r7
    920c:	4620      	mov	r0, r4
    920e:	f006 fa72 	bl	f6f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    9212:	68e8      	ldr	r0, [r5, #12]
    9214:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    9218:	6f20      	ldr	r0, [r4, #112]	; 0x70
    921a:	2800      	cmp	r0, #0
    921c:	d011      	beq.n	9242 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6ce>
    921e:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    9222:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    9226:	1a40      	subs	r0, r0, r1
    9228:	b202      	sxth	r2, r0
    922a:	2a00      	cmp	r2, #0
    922c:	dd09      	ble.n	9242 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6ce>
    922e:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    9232:	4402      	add	r2, r0
    9234:	1e52      	subs	r2, r2, #1
    9236:	fb92 f2f0 	sdiv	r2, r2, r0
    923a:	b292      	uxth	r2, r2
    923c:	fb02 1000 	mla	r0, r2, r0, r1
    9240:	86e0      	strh	r0, [r4, #54]	; 0x36
    9242:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9246:	f640 1176 	movw	r1, #2422	; 0x976
    924a:	2035      	movs	r0, #53	; 0x35
    924c:	f7fb fd64 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9250:	200000fc 	.word	0x200000fc
    9254:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    9258:	460d      	mov	r5, r1
    925a:	4607      	mov	r7, r0
    925c:	f000 fa58 	bl	9710 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb9c>
    9260:	4c1d      	ldr	r4, [pc, #116]	; (92d8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x764>)
    9262:	6861      	ldr	r1, [r4, #4]
    9264:	f7f9 f98a 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9268:	4606      	mov	r6, r0
    926a:	4601      	mov	r1, r0
    926c:	4638      	mov	r0, r7
    926e:	f7f9 f9b7 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9272:	4607      	mov	r7, r0
    9274:	f006 fa0c 	bl	f690 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x118>
    9278:	4287      	cmp	r7, r0
    927a:	da10      	bge.n	929e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x72a>
    927c:	6960      	ldr	r0, [r4, #20]
    927e:	f000 fa47 	bl	9710 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb9c>
    9282:	4631      	mov	r1, r6
    9284:	f7f9 f9ac 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9288:	6861      	ldr	r1, [r4, #4]
    928a:	fbb0 f0f1 	udiv	r0, r0, r1
    928e:	6028      	str	r0, [r5, #0]
    9290:	6861      	ldr	r1, [r4, #4]
    9292:	b004      	add	sp, #16
    9294:	4630      	mov	r0, r6
    9296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    929a:	f7f9 b96f 	b.w	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    929e:	2000      	movs	r0, #0
    92a0:	f88d 0000 	strb.w	r0, [sp]
    92a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    92a6:	9001      	str	r0, [sp, #4]
    92a8:	f006 f9e1 	bl	f66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    92ac:	f8ad 0008 	strh.w	r0, [sp, #8]
    92b0:	2001      	movs	r0, #1
    92b2:	f88d 000b 	strb.w	r0, [sp, #11]
    92b6:	6960      	ldr	r0, [r4, #20]
    92b8:	f000 fa2a 	bl	9710 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb9c>
    92bc:	9003      	str	r0, [sp, #12]
    92be:	f000 f9c1 	bl	9644 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xad0>
    92c2:	f88d 000a 	strb.w	r0, [sp, #10]
    92c6:	4668      	mov	r0, sp
    92c8:	6861      	ldr	r1, [r4, #4]
    92ca:	f005 fc68 	bl	eb9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    92ce:	6028      	str	r0, [r5, #0]
    92d0:	9803      	ldr	r0, [sp, #12]
    92d2:	b004      	add	sp, #16
    92d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92d8:	20001320 	.word	0x20001320
    92dc:	b510      	push	{r4, lr}
    92de:	2400      	movs	r4, #0
    92e0:	f006 f9d0 	bl	f684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    92e4:	4a06      	ldr	r2, [pc, #24]	; (9300 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x78c>)
    92e6:	2100      	movs	r1, #0
    92e8:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    92ec:	4404      	add	r4, r0
    92ee:	689b      	ldr	r3, [r3, #8]
    92f0:	1c49      	adds	r1, r1, #1
    92f2:	441c      	add	r4, r3
    92f4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    92f8:	d0f6      	beq.n	92e8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x774>
    92fa:	4620      	mov	r0, r4
    92fc:	bd10      	pop	{r4, pc}
    92fe:	0000      	.short	0x0000
    9300:	20001320 	.word	0x20001320
    9304:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9306:	4c1b      	ldr	r4, [pc, #108]	; (9374 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x800>)
    9308:	4606      	mov	r6, r0
    930a:	460d      	mov	r5, r1
    930c:	78a0      	ldrb	r0, [r4, #2]
    930e:	b360      	cbz	r0, 936a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7f6>
    9310:	4919      	ldr	r1, [pc, #100]	; (9378 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x804>)
    9312:	6a20      	ldr	r0, [r4, #32]
    9314:	4288      	cmp	r0, r1
    9316:	d828      	bhi.n	936a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7f6>
    9318:	2000      	movs	r0, #0
    931a:	f88d 0000 	strb.w	r0, [sp]
    931e:	9501      	str	r5, [sp, #4]
    9320:	f006 f9a5 	bl	f66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    9324:	f8ad 0008 	strh.w	r0, [sp, #8]
    9328:	2001      	movs	r0, #1
    932a:	f88d 000b 	strb.w	r0, [sp, #11]
    932e:	f006 f9af 	bl	f690 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x118>
    9332:	4601      	mov	r1, r0
    9334:	4630      	mov	r0, r6
    9336:	f7f9 f921 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    933a:	9003      	str	r0, [sp, #12]
    933c:	2003      	movs	r0, #3
    933e:	f88d 000a 	strb.w	r0, [sp, #10]
    9342:	4668      	mov	r0, sp
    9344:	f7f9 fc58 	bl	2bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    9348:	4606      	mov	r6, r0
    934a:	4629      	mov	r1, r5
    934c:	9803      	ldr	r0, [sp, #12]
    934e:	f7f9 f915 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9352:	4605      	mov	r5, r0
    9354:	6a21      	ldr	r1, [r4, #32]
    9356:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9358:	f7f9 f910 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    935c:	4601      	mov	r1, r0
    935e:	b13e      	cbz	r6, 9370 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7fc>
    9360:	4628      	mov	r0, r5
    9362:	f7f9 f93d 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9366:	2800      	cmp	r0, #0
    9368:	db02      	blt.n	9370 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7fc>
    936a:	2001      	movs	r0, #1
    936c:	b004      	add	sp, #16
    936e:	bd70      	pop	{r4, r5, r6, pc}
    9370:	2000      	movs	r0, #0
    9372:	e7fb      	b.n	936c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7f8>
    9374:	20001320 	.word	0x20001320
    9378:	07a12000 	.word	0x07a12000
    937c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9380:	f003 ff4b 	bl	d21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9384:	4c21      	ldr	r4, [pc, #132]	; (940c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x898>)
    9386:	4607      	mov	r7, r0
    9388:	6920      	ldr	r0, [r4, #16]
    938a:	f000 f95b 	bl	9644 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xad0>
    938e:	4606      	mov	r6, r0
    9390:	f7f9 f89a 	bl	24c8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    9394:	4605      	mov	r5, r0
    9396:	2864      	cmp	r0, #100	; 0x64
    9398:	d326      	bcc.n	93e8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x874>
    939a:	1c68      	adds	r0, r5, #1
    939c:	d027      	beq.n	93ee <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x87a>
    939e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    93a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    93a2:	1948      	adds	r0, r1, r5
    93a4:	4282      	cmp	r2, r0
    93a6:	d800      	bhi.n	93aa <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x836>
    93a8:	1a55      	subs	r5, r2, r1
    93aa:	f06f 0138 	mvn.w	r1, #56	; 0x38
    93ae:	4638      	mov	r0, r7
    93b0:	f7f9 f8e4 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    93b4:	4629      	mov	r1, r5
    93b6:	f000 f9bd 	bl	9734 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbc0>
    93ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
    93bc:	4408      	add	r0, r1
    93be:	6a61      	ldr	r1, [r4, #36]	; 0x24
    93c0:	1a45      	subs	r5, r0, r1
    93c2:	f241 3088 	movw	r0, #5000	; 0x1388
    93c6:	4285      	cmp	r5, r0
    93c8:	d900      	bls.n	93cc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x858>
    93ca:	4605      	mov	r5, r0
    93cc:	f003 ff25 	bl	d21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    93d0:	4601      	mov	r1, r0
    93d2:	4638      	mov	r0, r7
    93d4:	f7f9 f904 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    93d8:	309b      	adds	r0, #155	; 0x9b
    93da:	4285      	cmp	r5, r0
    93dc:	d304      	bcc.n	93e8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x874>
    93de:	4631      	mov	r1, r6
    93e0:	4628      	mov	r0, r5
    93e2:	f7f8 ffaf 	bl	2344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    93e6:	b120      	cbz	r0, 93f2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x87e>
    93e8:	2000      	movs	r0, #0
    93ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    93ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    93f0:	e7e5      	b.n	93be <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x84a>
    93f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    93f4:	4905      	ldr	r1, [pc, #20]	; (940c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x898>)
    93f6:	4428      	add	r0, r5
    93f8:	3910      	subs	r1, #16
    93fa:	6260      	str	r0, [r4, #36]	; 0x24
    93fc:	68c8      	ldr	r0, [r1, #12]
    93fe:	4428      	add	r0, r5
    9400:	60c8      	str	r0, [r1, #12]
    9402:	f7fa f8af 	bl	3564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9406:	2001      	movs	r0, #1
    9408:	e7ef      	b.n	93ea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x876>
    940a:	0000      	.short	0x0000
    940c:	20001320 	.word	0x20001320
    9410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9414:	b08c      	sub	sp, #48	; 0x30
    9416:	4616      	mov	r6, r2
    9418:	4607      	mov	r7, r0
    941a:	f003 fefe 	bl	d21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    941e:	4c87      	ldr	r4, [pc, #540]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    9420:	9002      	str	r0, [sp, #8]
    9422:	2500      	movs	r5, #0
    9424:	f8d4 a008 	ldr.w	sl, [r4, #8]
    9428:	f006 f92c 	bl	f684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    942c:	68a1      	ldr	r1, [r4, #8]
    942e:	4408      	add	r0, r1
    9430:	6861      	ldr	r1, [r4, #4]
    9432:	4288      	cmp	r0, r1
    9434:	d101      	bne.n	943a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x8c6>
    9436:	2001      	movs	r0, #1
    9438:	e000      	b.n	943c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x8c8>
    943a:	2000      	movs	r0, #0
    943c:	4683      	mov	fp, r0
    943e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9440:	ea06 090b 	and.w	r9, r6, fp
    9444:	2800      	cmp	r0, #0
    9446:	d065      	beq.n	9514 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9a0>
    9448:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    944c:	9802      	ldr	r0, [sp, #8]
    944e:	f7f9 f895 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9452:	9000      	str	r0, [sp, #0]
    9454:	f002 f872 	bl	b53c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    9458:	4680      	mov	r8, r0
    945a:	4878      	ldr	r0, [pc, #480]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    945c:	7800      	ldrb	r0, [r0, #0]
    945e:	4e77      	ldr	r6, [pc, #476]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    9460:	362c      	adds	r6, #44	; 0x2c
    9462:	2805      	cmp	r0, #5
    9464:	d12e      	bne.n	94c4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x950>
    9466:	4875      	ldr	r0, [pc, #468]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    9468:	6980      	ldr	r0, [r0, #24]
    946a:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    946e:	f002 f845 	bl	b4fc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    9472:	4604      	mov	r4, r0
    9474:	4540      	cmp	r0, r8
    9476:	d009      	beq.n	948c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x918>
    9478:	4870      	ldr	r0, [pc, #448]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    947a:	4621      	mov	r1, r4
    947c:	6980      	ldr	r0, [r0, #24]
    947e:	f500 7084 	add.w	r0, r0, #264	; 0x108
    9482:	f001 ffff 	bl	b484 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    9486:	2000      	movs	r0, #0
    9488:	6170      	str	r0, [r6, #20]
    948a:	e00c      	b.n	94a6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x932>
    948c:	496b      	ldr	r1, [pc, #428]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    948e:	6988      	ldr	r0, [r1, #24]
    9490:	f500 7084 	add.w	r0, r0, #264	; 0x108
    9494:	6170      	str	r0, [r6, #20]
    9496:	698a      	ldr	r2, [r1, #24]
    9498:	6b08      	ldr	r0, [r1, #48]	; 0x30
    949a:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    949e:	4290      	cmp	r0, r2
    94a0:	d200      	bcs.n	94a4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x930>
    94a2:	4610      	mov	r0, r2
    94a4:	6308      	str	r0, [r1, #48]	; 0x30
    94a6:	4865      	ldr	r0, [pc, #404]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    94a8:	6980      	ldr	r0, [r0, #24]
    94aa:	b130      	cbz	r0, 94ba <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x946>
    94ac:	b144      	cbz	r4, 94c0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x94c>
    94ae:	e9d4 1200 	ldrd	r1, r2, [r4]
    94b2:	4411      	add	r1, r2
    94b4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    94b8:	e004      	b.n	94c4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x950>
    94ba:	f240 51c7 	movw	r1, #1479	; 0x5c7
    94be:	e017      	b.n	94f0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x97c>
    94c0:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    94c4:	4641      	mov	r1, r8
    94c6:	4630      	mov	r0, r6
    94c8:	f001 ffdc 	bl	b484 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    94cc:	ea5f 0008 	movs.w	r0, r8
    94d0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>
    94d4:	9a00      	ldr	r2, [sp, #0]
    94d6:	f8d8 4004 	ldr.w	r4, [r8, #4]
    94da:	d00c      	beq.n	94f6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x982>
    94dc:	e9d0 1000 	ldrd	r1, r0, [r0]
    94e0:	4408      	add	r0, r1
    94e2:	4621      	mov	r1, r4
    94e4:	f006 fa08 	bl	f8f8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    94e8:	42a0      	cmp	r0, r4
    94ea:	d904      	bls.n	94f6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x982>
    94ec:	f240 51e5 	movw	r1, #1509	; 0x5e5
    94f0:	2035      	movs	r0, #53	; 0x35
    94f2:	f7fb fc11 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94f6:	4601      	mov	r1, r0
    94f8:	9800      	ldr	r0, [sp, #0]
    94fa:	f7f9 f83f 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    94fe:	4606      	mov	r6, r0
    9500:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9504:	4644      	mov	r4, r8
    9506:	4241      	negs	r1, r0
    9508:	4630      	mov	r0, r6
    950a:	f7f9 f837 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    950e:	62e0      	str	r0, [r4, #44]	; 0x2c
    9510:	2001      	movs	r0, #1
    9512:	e042      	b.n	959a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa26>
    9514:	f1b9 0f00 	cmp.w	r9, #0
    9518:	d018      	beq.n	954c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9d8>
    951a:	2001      	movs	r0, #1
    951c:	f006 f834 	bl	f588 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    9520:	4604      	mov	r4, r0
    9522:	2001      	movs	r0, #1
    9524:	f007 f956 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9528:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    952c:	4401      	add	r1, r0
    952e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9532:	fbb1 f0f0 	udiv	r0, r1, r0
    9536:	1821      	adds	r1, r4, r0
    9538:	31f0      	adds	r1, #240	; 0xf0
    953a:	9802      	ldr	r0, [sp, #8]
    953c:	f7ff fee2 	bl	9304 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x790>
    9540:	b908      	cbnz	r0, 9546 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9d2>
    9542:	f04f 0a00 	mov.w	sl, #0
    9546:	9e02      	ldr	r6, [sp, #8]
    9548:	9508      	str	r5, [sp, #32]
    954a:	e027      	b.n	959c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa28>
    954c:	b12e      	cbz	r6, 955a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9e6>
    954e:	a908      	add	r1, sp, #32
    9550:	9802      	ldr	r0, [sp, #8]
    9552:	f7ff fe7f 	bl	9254 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6e0>
    9556:	4606      	mov	r6, r0
    9558:	e020      	b.n	959c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa28>
    955a:	9802      	ldr	r0, [sp, #8]
    955c:	f000 f8d8 	bl	9710 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb9c>
    9560:	4c36      	ldr	r4, [pc, #216]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    9562:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    9566:	f7f9 f809 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    956a:	4606      	mov	r6, r0
    956c:	6920      	ldr	r0, [r4, #16]
    956e:	f000 f8c3 	bl	96f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb84>
    9572:	6861      	ldr	r1, [r4, #4]
    9574:	4348      	muls	r0, r1
    9576:	78a1      	ldrb	r1, [r4, #2]
    9578:	b131      	cbz	r1, 9588 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa14>
    957a:	6a21      	ldr	r1, [r4, #32]
    957c:	4281      	cmp	r1, r0
    957e:	d302      	bcc.n	9586 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa12>
    9580:	1a09      	subs	r1, r1, r0
    9582:	6221      	str	r1, [r4, #32]
    9584:	e000      	b.n	9588 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa14>
    9586:	6225      	str	r5, [r4, #32]
    9588:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    958a:	4601      	mov	r1, r0
    958c:	4610      	mov	r0, r2
    958e:	f7f8 fff5 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9592:	62e0      	str	r0, [r4, #44]	; 0x2c
    9594:	4630      	mov	r0, r6
    9596:	f000 f8af 	bl	96f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb84>
    959a:	9008      	str	r0, [sp, #32]
    959c:	2001      	movs	r0, #1
    959e:	f005 fff3 	bl	f588 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    95a2:	4604      	mov	r4, r0
    95a4:	2001      	movs	r0, #1
    95a6:	f007 f915 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    95aa:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    95ae:	4401      	add	r1, r0
    95b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    95b4:	fbb1 f0f0 	udiv	r0, r1, r0
    95b8:	4404      	add	r4, r0
    95ba:	4651      	mov	r1, sl
    95bc:	4630      	mov	r0, r6
    95be:	34f0      	adds	r4, #240	; 0xf0
    95c0:	f000 f8b8 	bl	9734 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbc0>
    95c4:	491d      	ldr	r1, [pc, #116]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    95c6:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    95ca:	6892      	ldr	r2, [r2, #8]
    95cc:	4282      	cmp	r2, r0
    95ce:	d800      	bhi.n	95d2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa5e>
    95d0:	4610      	mov	r0, r2
    95d2:	6288      	str	r0, [r1, #40]	; 0x28
    95d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    95d6:	b102      	cbz	r2, 95da <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa66>
    95d8:	610e      	str	r6, [r1, #16]
    95da:	4688      	mov	r8, r1
    95dc:	614e      	str	r6, [r1, #20]
    95de:	f1bb 0f00 	cmp.w	fp, #0
    95e2:	d002      	beq.n	95ea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa76>
    95e4:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    95e8:	e001      	b.n	95ee <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa7a>
    95ea:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    95ee:	f04f 0a01 	mov.w	sl, #1
    95f2:	f887 a00b 	strb.w	sl, [r7, #11]
    95f6:	f006 f83a 	bl	f66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    95fa:	8138      	strh	r0, [r7, #8]
    95fc:	4630      	mov	r0, r6
    95fe:	f000 f821 	bl	9644 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xad0>
    9602:	72b8      	strb	r0, [r7, #10]
    9604:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    9608:	6078      	str	r0, [r7, #4]
    960a:	f1b9 0f00 	cmp.w	r9, #0
    960e:	d008      	beq.n	9622 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaae>
    9610:	f887 a000 	strb.w	sl, [r7]
    9614:	490a      	ldr	r1, [pc, #40]	; (9640 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xacc>)
    9616:	9802      	ldr	r0, [sp, #8]
    9618:	f000 f88c 	bl	9734 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbc0>
    961c:	1b00      	subs	r0, r0, r4
    961e:	60f8      	str	r0, [r7, #12]
    9620:	e001      	b.n	9626 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xab2>
    9622:	703d      	strb	r5, [r7, #0]
    9624:	60fe      	str	r6, [r7, #12]
    9626:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    962a:	42a0      	cmp	r0, r4
    962c:	d303      	bcc.n	9636 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac2>
    962e:	2001      	movs	r0, #1
    9630:	b00f      	add	sp, #60	; 0x3c
    9632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9636:	2000      	movs	r0, #0
    9638:	e7fa      	b.n	9630 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xabc>
    963a:	0000      	.short	0x0000
    963c:	20001320 	.word	0x20001320
    9640:	07a12000 	.word	0x07a12000
    9644:	4a09      	ldr	r2, [pc, #36]	; (966c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaf8>)
    9646:	b510      	push	{r4, lr}
    9648:	7811      	ldrb	r1, [r2, #0]
    964a:	2904      	cmp	r1, #4
    964c:	d10c      	bne.n	9668 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaf4>
    964e:	6851      	ldr	r1, [r2, #4]
    9650:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    9652:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    9656:	004c      	lsls	r4, r1, #1
    9658:	4601      	mov	r1, r0
    965a:	4610      	mov	r0, r2
    965c:	f7f8 ffc0 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9660:	42a0      	cmp	r0, r4
    9662:	d201      	bcs.n	9668 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaf4>
    9664:	2003      	movs	r0, #3
    9666:	bd10      	pop	{r4, pc}
    9668:	2002      	movs	r0, #2
    966a:	bd10      	pop	{r4, pc}
    966c:	20001320 	.word	0x20001320
    9670:	b570      	push	{r4, r5, r6, lr}
    9672:	4d13      	ldr	r5, [pc, #76]	; (96c0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb4c>)
    9674:	7f28      	ldrb	r0, [r5, #28]
    9676:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    967a:	2800      	cmp	r0, #0
    967c:	7828      	ldrb	r0, [r5, #0]
    967e:	d00f      	beq.n	96a0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb2c>
    9680:	2805      	cmp	r0, #5
    9682:	d004      	beq.n	968e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb1a>
    9684:	f44f 7166 	mov.w	r1, #920	; 0x398
    9688:	2035      	movs	r0, #53	; 0x35
    968a:	f7fb fb45 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    968e:	4620      	mov	r0, r4
    9690:	f005 ff75 	bl	f57e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6>
    9694:	b178      	cbz	r0, 96b6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb42>
    9696:	4620      	mov	r0, r4
    9698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    969c:	f001 bed0 	b.w	b440 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    96a0:	2805      	cmp	r0, #5
    96a2:	d108      	bne.n	96b6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb42>
    96a4:	4620      	mov	r0, r4
    96a6:	f005 ff6a 	bl	f57e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6>
    96aa:	b920      	cbnz	r0, 96b6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb42>
    96ac:	69a8      	ldr	r0, [r5, #24]
    96ae:	f500 7084 	add.w	r0, r0, #264	; 0x108
    96b2:	f001 ff07 	bl	b4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    96b6:	4620      	mov	r0, r4
    96b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    96bc:	f001 bf02 	b.w	b4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    96c0:	20001320 	.word	0x20001320
    96c4:	b510      	push	{r4, lr}
    96c6:	f7fd ff4b 	bl	7560 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    96ca:	490a      	ldr	r1, [pc, #40]	; (96f4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb80>)
    96cc:	2000      	movs	r0, #0
    96ce:	70c8      	strb	r0, [r1, #3]
    96d0:	7708      	strb	r0, [r1, #28]
    96d2:	6188      	str	r0, [r1, #24]
    96d4:	7008      	strb	r0, [r1, #0]
    96d6:	f7fd fe95 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    96da:	4604      	mov	r4, r0
    96dc:	7800      	ldrb	r0, [r0, #0]
    96de:	f7f9 fd09 	bl	30f4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    96e2:	b110      	cbz	r0, 96ea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb76>
    96e4:	2020      	movs	r0, #32
    96e6:	7020      	strb	r0, [r4, #0]
    96e8:	bd10      	pop	{r4, pc}
    96ea:	f240 5131 	movw	r1, #1329	; 0x531
    96ee:	2035      	movs	r0, #53	; 0x35
    96f0:	f7fb fb12 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96f4:	20001320 	.word	0x20001320
    96f8:	b510      	push	{r4, lr}
    96fa:	4c04      	ldr	r4, [pc, #16]	; (970c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb98>)
    96fc:	4601      	mov	r1, r0
    96fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9700:	f7f8 ff6e 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9704:	6861      	ldr	r1, [r4, #4]
    9706:	fbb0 f0f1 	udiv	r0, r0, r1
    970a:	bd10      	pop	{r4, pc}
    970c:	20001320 	.word	0x20001320
    9710:	b510      	push	{r4, lr}
    9712:	4c07      	ldr	r4, [pc, #28]	; (9730 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbbc>)
    9714:	4601      	mov	r1, r0
    9716:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9718:	f7f8 ff62 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    971c:	6861      	ldr	r1, [r4, #4]
    971e:	fbb0 f2f1 	udiv	r2, r0, r1
    9722:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9728:	4351      	muls	r1, r2
    972a:	f7f8 bf27 	b.w	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    972e:	0000      	.short	0x0000
    9730:	20001320 	.word	0x20001320
    9734:	b570      	push	{r4, r5, r6, lr}
    9736:	4605      	mov	r5, r0
    9738:	480d      	ldr	r0, [pc, #52]	; (9770 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbfc>)
    973a:	460c      	mov	r4, r1
    973c:	7881      	ldrb	r1, [r0, #2]
    973e:	b1a9      	cbz	r1, 976c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbf8>
    9740:	4a0c      	ldr	r2, [pc, #48]	; (9774 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xc00>)
    9742:	6a01      	ldr	r1, [r0, #32]
    9744:	4291      	cmp	r1, r2
    9746:	d211      	bcs.n	976c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbf8>
    9748:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    974a:	f7f8 ff17 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    974e:	4606      	mov	r6, r0
    9750:	4621      	mov	r1, r4
    9752:	4628      	mov	r0, r5
    9754:	f7f8 ff12 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9758:	4601      	mov	r1, r0
    975a:	4630      	mov	r0, r6
    975c:	f7f8 ff40 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9760:	2800      	cmp	r0, #0
    9762:	dd03      	ble.n	976c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbf8>
    9764:	1a20      	subs	r0, r4, r0
    9766:	d500      	bpl.n	976a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbf6>
    9768:	2000      	movs	r0, #0
    976a:	bd70      	pop	{r4, r5, r6, pc}
    976c:	4620      	mov	r0, r4
    976e:	bd70      	pop	{r4, r5, r6, pc}
    9770:	20001320 	.word	0x20001320
    9774:	07a12000 	.word	0x07a12000

00009778 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    9778:	4806      	ldr	r0, [pc, #24]	; (9794 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    977a:	4905      	ldr	r1, [pc, #20]	; (9790 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    977c:	6501      	str	r1, [r0, #80]	; 0x50
    977e:	4906      	ldr	r1, [pc, #24]	; (9798 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    9780:	6541      	str	r1, [r0, #84]	; 0x54
    9782:	4807      	ldr	r0, [pc, #28]	; (97a0 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    9784:	4905      	ldr	r1, [pc, #20]	; (979c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    9786:	6501      	str	r1, [r0, #80]	; 0x50
    9788:	4906      	ldr	r1, [pc, #24]	; (97a4 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    978a:	6541      	str	r1, [r0, #84]	; 0x54
    978c:	4770      	bx	lr
    978e:	0000      	.short	0x0000
    9790:	0000a8d5 	.word	0x0000a8d5
    9794:	20000114 	.word	0x20000114
    9798:	0000a9a1 	.word	0x0000a9a1
    979c:	0000afd1 	.word	0x0000afd1
    97a0:	20000178 	.word	0x20000178
    97a4:	0000b001 	.word	0x0000b001

000097a8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI>:
    97a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97aa:	460d      	mov	r5, r1
    97ac:	4607      	mov	r7, r0
    97ae:	2100      	movs	r1, #0
    97b0:	f004 ff45 	bl	e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    97b4:	1e04      	subs	r4, r0, #0
    97b6:	d051      	beq.n	985c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    97b8:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    97bc:	2800      	cmp	r0, #0
    97be:	d04d      	beq.n	985c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    97c0:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    97c4:	f88d 0000 	strb.w	r0, [sp]
    97c8:	9800      	ldr	r0, [sp, #0]
    97ca:	9000      	str	r0, [sp, #0]
    97cc:	f89d 0000 	ldrb.w	r0, [sp]
    97d0:	2600      	movs	r6, #0
    97d2:	b158      	cbz	r0, 97ec <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x44>
    97d4:	706e      	strb	r6, [r5, #1]
    97d6:	2009      	movs	r0, #9
    97d8:	7028      	strb	r0, [r5, #0]
    97da:	220a      	movs	r2, #10
    97dc:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    97e0:	1d28      	adds	r0, r5, #4
    97e2:	f003 fe8f 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    97e6:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    97ea:	e0e1      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    97ec:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    97f0:	280e      	cmp	r0, #14
    97f2:	d01d      	beq.n	9830 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x88>
    97f4:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    97f8:	280d      	cmp	r0, #13
    97fa:	d027      	beq.n	984c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xa4>
    97fc:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    9800:	f88d 0000 	strb.w	r0, [sp]
    9804:	9800      	ldr	r0, [sp, #0]
    9806:	9000      	str	r0, [sp, #0]
    9808:	f89d 0000 	ldrb.w	r0, [sp]
    980c:	b3b0      	cbz	r0, 987c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd4>
    980e:	706e      	strb	r6, [r5, #1]
    9810:	2008      	movs	r0, #8
    9812:	7028      	strb	r0, [r5, #0]
    9814:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    9818:	6068      	str	r0, [r5, #4]
    981a:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    981e:	60a8      	str	r0, [r5, #8]
    9820:	f8d4 01c2 	ldr.w	r0, [r4, #450]	; 0x1c2
    9824:	60e8      	str	r0, [r5, #12]
    9826:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
    982a:	f804 6c02 	strb.w	r6, [r4, #-2]
    982e:	e0bf      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9830:	8820      	ldrh	r0, [r4, #0]
    9832:	f7fb fe6f 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9836:	4607      	mov	r7, r0
    9838:	f004 fdd1 	bl	e3de <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    983c:	b968      	cbnz	r0, 985a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb2>
    983e:	706e      	strb	r6, [r5, #1]
    9840:	200e      	movs	r0, #14
    9842:	7028      	strb	r0, [r5, #0]
    9844:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    9848:	6068      	str	r0, [r5, #4]
    984a:	e011      	b.n	9870 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xc8>
    984c:	8820      	ldrh	r0, [r4, #0]
    984e:	f7fb fe61 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9852:	4607      	mov	r7, r0
    9854:	f004 fdc3 	bl	e3de <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    9858:	b108      	cbz	r0, 985e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb6>
    985a:	2000      	movs	r0, #0
    985c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    985e:	706e      	strb	r6, [r5, #1]
    9860:	200d      	movs	r0, #13
    9862:	7028      	strb	r0, [r5, #0]
    9864:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    9868:	6068      	str	r0, [r5, #4]
    986a:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    986e:	8128      	strh	r0, [r5, #8]
    9870:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    9874:	4638      	mov	r0, r7
    9876:	f004 fdcd 	bl	e414 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    987a:	e099      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    987c:	e7ff      	b.n	987e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd6>
    987e:	f894 018e 	ldrb.w	r0, [r4, #398]	; 0x18e
    9882:	f88d 0000 	strb.w	r0, [sp]
    9886:	9800      	ldr	r0, [sp, #0]
    9888:	9000      	str	r0, [sp, #0]
    988a:	f89d 0000 	ldrb.w	r0, [sp]
    988e:	b130      	cbz	r0, 989e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xf6>
    9890:	706e      	strb	r6, [r5, #1]
    9892:	2010      	movs	r0, #16
    9894:	7028      	strb	r0, [r5, #0]
    9896:	80af      	strh	r7, [r5, #4]
    9898:	f884 618e 	strb.w	r6, [r4, #398]	; 0x18e
    989c:	e088      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    989e:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    98a2:	f88d 0000 	strb.w	r0, [sp]
    98a6:	9800      	ldr	r0, [sp, #0]
    98a8:	9000      	str	r0, [sp, #0]
    98aa:	f89d 0000 	ldrb.w	r0, [sp]
    98ae:	b1c8      	cbz	r0, 98e4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x13c>
    98b0:	706e      	strb	r6, [r5, #1]
    98b2:	2015      	movs	r0, #21
    98b4:	7028      	strb	r0, [r5, #0]
    98b6:	e00a      	b.n	98ce <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x126>
    98b8:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
    98bc:	f8d4 0192 	ldr.w	r0, [r4, #402]	; 0x192
    98c0:	6068      	str	r0, [r5, #4]
    98c2:	f8d4 0196 	ldr.w	r0, [r4, #406]	; 0x196
    98c6:	60a8      	str	r0, [r5, #8]
    98c8:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
    98cc:	60e8      	str	r0, [r5, #12]
    98ce:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    98d2:	f88d 0000 	strb.w	r0, [sp]
    98d6:	9800      	ldr	r0, [sp, #0]
    98d8:	9000      	str	r0, [sp, #0]
    98da:	f89d 0000 	ldrb.w	r0, [sp]
    98de:	2800      	cmp	r0, #0
    98e0:	d1ea      	bne.n	98b8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x110>
    98e2:	e065      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    98e4:	f894 019e 	ldrb.w	r0, [r4, #414]	; 0x19e
    98e8:	f88d 0000 	strb.w	r0, [sp]
    98ec:	9800      	ldr	r0, [sp, #0]
    98ee:	9000      	str	r0, [sp, #0]
    98f0:	f89d 0000 	ldrb.w	r0, [sp]
    98f4:	b158      	cbz	r0, 990e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x166>
    98f6:	706e      	strb	r6, [r5, #1]
    98f8:	201c      	movs	r0, #28
    98fa:	7028      	strb	r0, [r5, #0]
    98fc:	220a      	movs	r2, #10
    98fe:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
    9902:	1d28      	adds	r0, r5, #4
    9904:	f003 fdfe 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9908:	f884 619e 	strb.w	r6, [r4, #414]	; 0x19e
    990c:	e050      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    990e:	f894 01aa 	ldrb.w	r0, [r4, #426]	; 0x1aa
    9912:	f88d 0000 	strb.w	r0, [sp]
    9916:	9800      	ldr	r0, [sp, #0]
    9918:	9000      	str	r0, [sp, #0]
    991a:	f89d 0000 	ldrb.w	r0, [sp]
    991e:	b140      	cbz	r0, 9932 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x18a>
    9920:	706e      	strb	r6, [r5, #1]
    9922:	201d      	movs	r0, #29
    9924:	7028      	strb	r0, [r5, #0]
    9926:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    992a:	6068      	str	r0, [r5, #4]
    992c:	f884 61aa 	strb.w	r6, [r4, #426]	; 0x1aa
    9930:	e03e      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9932:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    9936:	f88d 0000 	strb.w	r0, [sp]
    993a:	9800      	ldr	r0, [sp, #0]
    993c:	9000      	str	r0, [sp, #0]
    993e:	f89d 0000 	ldrb.w	r0, [sp]
    9942:	b198      	cbz	r0, 996c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1c4>
    9944:	706e      	strb	r6, [r5, #1]
    9946:	201a      	movs	r0, #26
    9948:	7028      	strb	r0, [r5, #0]
    994a:	e004      	b.n	9956 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1ae>
    994c:	f884 6188 	strb.w	r6, [r4, #392]	; 0x188
    9950:	f8d4 018a 	ldr.w	r0, [r4, #394]	; 0x18a
    9954:	6068      	str	r0, [r5, #4]
    9956:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    995a:	f88d 0000 	strb.w	r0, [sp]
    995e:	9800      	ldr	r0, [sp, #0]
    9960:	9000      	str	r0, [sp, #0]
    9962:	f89d 0000 	ldrb.w	r0, [sp]
    9966:	2800      	cmp	r0, #0
    9968:	d1f0      	bne.n	994c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1a4>
    996a:	e021      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    996c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    9970:	f88d 0000 	strb.w	r0, [sp]
    9974:	9800      	ldr	r0, [sp, #0]
    9976:	9000      	str	r0, [sp, #0]
    9978:	f89d 0000 	ldrb.w	r0, [sp]
    997c:	2800      	cmp	r0, #0
    997e:	f43f af6d 	beq.w	985c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    9982:	706e      	strb	r6, [r5, #1]
    9984:	2016      	movs	r0, #22
    9986:	7028      	strb	r0, [r5, #0]
    9988:	e008      	b.n	999c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1f4>
    998a:	bf00      	nop
    998c:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    9990:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    9994:	6068      	str	r0, [r5, #4]
    9996:	f8b4 01b6 	ldrh.w	r0, [r4, #438]	; 0x1b6
    999a:	8128      	strh	r0, [r5, #8]
    999c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    99a0:	f88d 0000 	strb.w	r0, [sp]
    99a4:	9800      	ldr	r0, [sp, #0]
    99a6:	9000      	str	r0, [sp, #0]
    99a8:	f89d 0000 	ldrb.w	r0, [sp]
    99ac:	2800      	cmp	r0, #0
    99ae:	d1ed      	bne.n	998c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1e4>
    99b0:	2001      	movs	r0, #1
    99b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000099b4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    99b4:	b570      	push	{r4, r5, r6, lr}
    99b6:	4605      	mov	r5, r0
    99b8:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    99bc:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    99c0:	b1c9      	cbz	r1, 99f6 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    99c2:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    99c6:	1a0c      	subs	r4, r1, r0
    99c8:	f1b4 0404 	subs.w	r4, r4, #4
    99cc:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    99d0:	b140      	cbz	r0, 99e4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    99d2:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    99d6:	2300      	movs	r3, #0
    99d8:	2109      	movs	r1, #9
    99da:	f105 0078 	add.w	r0, r5, #120	; 0x78
    99de:	f004 ffd5 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99e2:	b160      	cbz	r0, 99fe <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    99e4:	4628      	mov	r0, r5
    99e6:	f005 ff78 	bl	f8da <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    99ea:	b138      	cbz	r0, 99fc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    99ec:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    99f0:	1a40      	subs	r0, r0, r1
    99f2:	1f00      	subs	r0, r0, #4
    99f4:	e003      	b.n	99fe <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    99f6:	f1c0 0402 	rsb	r4, r0, #2
    99fa:	e7e7      	b.n	99cc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    99fc:	4620      	mov	r0, r4
    99fe:	42a0      	cmp	r0, r4
    9a00:	da00      	bge.n	9a04 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    9a02:	4604      	mov	r4, r0
    9a04:	2c00      	cmp	r4, #0
    9a06:	dc01      	bgt.n	9a0c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    9a08:	2000      	movs	r0, #0
    9a0a:	bd70      	pop	{r4, r5, r6, pc}
    9a0c:	b2a0      	uxth	r0, r4
    9a0e:	bd70      	pop	{r4, r5, r6, pc}

00009a10 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    9a10:	481b      	ldr	r0, [pc, #108]	; (9a80 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x70>)
    9a12:	491a      	ldr	r1, [pc, #104]	; (9a7c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x6c>)
    9a14:	6081      	str	r1, [r0, #8]
    9a16:	491b      	ldr	r1, [pc, #108]	; (9a84 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    9a18:	61c1      	str	r1, [r0, #28]
    9a1a:	491b      	ldr	r1, [pc, #108]	; (9a88 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    9a1c:	62c1      	str	r1, [r0, #44]	; 0x2c
    9a1e:	491b      	ldr	r1, [pc, #108]	; (9a8c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    9a20:	6101      	str	r1, [r0, #16]
    9a22:	491b      	ldr	r1, [pc, #108]	; (9a90 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    9a24:	6141      	str	r1, [r0, #20]
    9a26:	491b      	ldr	r1, [pc, #108]	; (9a94 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    9a28:	6441      	str	r1, [r0, #68]	; 0x44
    9a2a:	491b      	ldr	r1, [pc, #108]	; (9a98 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    9a2c:	6181      	str	r1, [r0, #24]
    9a2e:	491b      	ldr	r1, [pc, #108]	; (9a9c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    9a30:	6301      	str	r1, [r0, #48]	; 0x30
    9a32:	491b      	ldr	r1, [pc, #108]	; (9aa0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    9a34:	6241      	str	r1, [r0, #36]	; 0x24
    9a36:	491b      	ldr	r1, [pc, #108]	; (9aa4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    9a38:	64c1      	str	r1, [r0, #76]	; 0x4c
    9a3a:	491b      	ldr	r1, [pc, #108]	; (9aa8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    9a3c:	6481      	str	r1, [r0, #72]	; 0x48
    9a3e:	491b      	ldr	r1, [pc, #108]	; (9aac <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    9a40:	6341      	str	r1, [r0, #52]	; 0x34
    9a42:	481c      	ldr	r0, [pc, #112]	; (9ab4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    9a44:	491a      	ldr	r1, [pc, #104]	; (9ab0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    9a46:	6081      	str	r1, [r0, #8]
    9a48:	491b      	ldr	r1, [pc, #108]	; (9ab8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    9a4a:	61c1      	str	r1, [r0, #28]
    9a4c:	491b      	ldr	r1, [pc, #108]	; (9abc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    9a4e:	6201      	str	r1, [r0, #32]
    9a50:	491b      	ldr	r1, [pc, #108]	; (9ac0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    9a52:	6041      	str	r1, [r0, #4]
    9a54:	491b      	ldr	r1, [pc, #108]	; (9ac4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    9a56:	6001      	str	r1, [r0, #0]
    9a58:	491b      	ldr	r1, [pc, #108]	; (9ac8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    9a5a:	6281      	str	r1, [r0, #40]	; 0x28
    9a5c:	491b      	ldr	r1, [pc, #108]	; (9acc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    9a5e:	62c1      	str	r1, [r0, #44]	; 0x2c
    9a60:	491b      	ldr	r1, [pc, #108]	; (9ad0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    9a62:	60c1      	str	r1, [r0, #12]
    9a64:	491b      	ldr	r1, [pc, #108]	; (9ad4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    9a66:	6181      	str	r1, [r0, #24]
    9a68:	491b      	ldr	r1, [pc, #108]	; (9ad8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    9a6a:	6301      	str	r1, [r0, #48]	; 0x30
    9a6c:	491b      	ldr	r1, [pc, #108]	; (9adc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    9a6e:	6481      	str	r1, [r0, #72]	; 0x48
    9a70:	491b      	ldr	r1, [pc, #108]	; (9ae0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    9a72:	64c1      	str	r1, [r0, #76]	; 0x4c
    9a74:	491b      	ldr	r1, [pc, #108]	; (9ae4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    9a76:	6441      	str	r1, [r0, #68]	; 0x44
    9a78:	4770      	bx	lr
    9a7a:	0000      	.short	0x0000
    9a7c:	0000ad5d 	.word	0x0000ad5d
    9a80:	20000114 	.word	0x20000114
    9a84:	0000ad99 	.word	0x0000ad99
    9a88:	0000aa71 	.word	0x0000aa71
    9a8c:	0000a7b1 	.word	0x0000a7b1
    9a90:	0000aca9 	.word	0x0000aca9
    9a94:	0000ac0d 	.word	0x0000ac0d
    9a98:	0000ace9 	.word	0x0000ace9
    9a9c:	0000ae35 	.word	0x0000ae35
    9aa0:	0000a7e9 	.word	0x0000a7e9
    9aa4:	0000aa45 	.word	0x0000aa45
    9aa8:	0000aa11 	.word	0x0000aa11
    9aac:	0000ac99 	.word	0x0000ac99
    9ab0:	0000b1b5 	.word	0x0000b1b5
    9ab4:	20000178 	.word	0x20000178
    9ab8:	0000b1e5 	.word	0x0000b1e5
    9abc:	0000afa1 	.word	0x0000afa1
    9ac0:	0000af05 	.word	0x0000af05
    9ac4:	0000af35 	.word	0x0000af35
    9ac8:	0000b071 	.word	0x0000b071
    9acc:	0000b0a5 	.word	0x0000b0a5
    9ad0:	0000af65 	.word	0x0000af65
    9ad4:	0000b191 	.word	0x0000b191
    9ad8:	0000b225 	.word	0x0000b225
    9adc:	0000b031 	.word	0x0000b031
    9ae0:	0000b061 	.word	0x0000b061
    9ae4:	0000b17d 	.word	0x0000b17d

00009ae8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    9ae8:	4806      	ldr	r0, [pc, #24]	; (9b04 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    9aea:	4905      	ldr	r1, [pc, #20]	; (9b00 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    9aec:	6581      	str	r1, [r0, #88]	; 0x58
    9aee:	4906      	ldr	r1, [pc, #24]	; (9b08 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    9af0:	65c1      	str	r1, [r0, #92]	; 0x5c
    9af2:	4807      	ldr	r0, [pc, #28]	; (9b10 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    9af4:	4905      	ldr	r1, [pc, #20]	; (9b0c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    9af6:	6581      	str	r1, [r0, #88]	; 0x58
    9af8:	4906      	ldr	r1, [pc, #24]	; (9b14 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    9afa:	6601      	str	r1, [r0, #96]	; 0x60
    9afc:	4770      	bx	lr
    9afe:	0000      	.short	0x0000
    9b00:	0000aa95 	.word	0x0000aa95
    9b04:	20000114 	.word	0x20000114
    9b08:	0000aba5 	.word	0x0000aba5
    9b0c:	0000b0d1 	.word	0x0000b0d1
    9b10:	20000178 	.word	0x20000178
    9b14:	0000b101 	.word	0x0000b101

00009b18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    9b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b1a:	4d36      	ldr	r5, [pc, #216]	; (9bf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    9b1c:	2600      	movs	r6, #0
    9b1e:	4604      	mov	r4, r0
    9b20:	6068      	str	r0, [r5, #4]
    9b22:	806e      	strh	r6, [r5, #2]
    9b24:	706e      	strb	r6, [r5, #1]
    9b26:	702e      	strb	r6, [r5, #0]
    9b28:	8800      	ldrh	r0, [r0, #0]
    9b2a:	f7fb ff17 	bl	595c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    9b2e:	6868      	ldr	r0, [r5, #4]
    9b30:	8800      	ldrh	r0, [r0, #0]
    9b32:	f7fb febb 	bl	58ac <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    9b36:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    9b3a:	6869      	ldr	r1, [r5, #4]
    9b3c:	1c40      	adds	r0, r0, #1
    9b3e:	b282      	uxth	r2, r0
    9b40:	f101 0078 	add.w	r0, r1, #120	; 0x78
    9b44:	f005 f8dc 	bl	ed00 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    9b48:	b120      	cbz	r0, 9b54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    9b4a:	f44f 71ac 	mov.w	r1, #344	; 0x158
    9b4e:	2036      	movs	r0, #54	; 0x36
    9b50:	f7fb f8e2 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b54:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    9b58:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    9b5c:	4630      	mov	r0, r6
    9b5e:	2924      	cmp	r1, #36	; 0x24
    9b60:	d10a      	bne.n	9b78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    9b62:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    9b66:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    9b6a:	1a51      	subs	r1, r2, r1
    9b6c:	b209      	sxth	r1, r1
    9b6e:	2900      	cmp	r1, #0
    9b70:	db02      	blt.n	9b78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    9b72:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    9b76:	e00f      	b.n	9b98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    9b78:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    9b7c:	2924      	cmp	r1, #36	; 0x24
    9b7e:	d001      	beq.n	9b84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    9b80:	2925      	cmp	r1, #37	; 0x25
    9b82:	d10c      	bne.n	9b9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    9b84:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    9b88:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    9b8c:	1a51      	subs	r1, r2, r1
    9b8e:	b209      	sxth	r1, r1
    9b90:	2900      	cmp	r1, #0
    9b92:	db04      	blt.n	9b9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    9b94:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    9b98:	f000 fd5a 	bl	a650 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    9b9c:	b318      	cbz	r0, 9be6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    9b9e:	f000 fbfd 	bl	a39c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    9ba2:	2800      	cmp	r0, #0
    9ba4:	d125      	bne.n	9bf2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    9ba6:	6868      	ldr	r0, [r5, #4]
    9ba8:	3078      	adds	r0, #120	; 0x78
    9baa:	f005 fe0b 	bl	f7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9bae:	b120      	cbz	r0, 9bba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    9bb0:	6868      	ldr	r0, [r5, #4]
    9bb2:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    9bb6:	f000 faad 	bl	a114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    9bba:	480f      	ldr	r0, [pc, #60]	; (9bf8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    9bbc:	9000      	str	r0, [sp, #0]
    9bbe:	4b0f      	ldr	r3, [pc, #60]	; (9bfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    9bc0:	4a0f      	ldr	r2, [pc, #60]	; (9c00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    9bc2:	4621      	mov	r1, r4
    9bc4:	4630      	mov	r0, r6
    9bc6:	f7fb ff73 	bl	5ab0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    9bca:	6868      	ldr	r0, [r5, #4]
    9bcc:	2300      	movs	r3, #0
    9bce:	2105      	movs	r1, #5
    9bd0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9bd4:	3078      	adds	r0, #120	; 0x78
    9bd6:	f004 fed9 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9bda:	2800      	cmp	r0, #0
    9bdc:	d009      	beq.n	9bf2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    9bde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9be2:	f7fb bf5f 	b.w	5aa4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    9be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9bea:	2100      	movs	r1, #0
    9bec:	4608      	mov	r0, r1
    9bee:	f000 bb81 	b.w	a2f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    9bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9bf4:	20000104 	.word	0x20000104
    9bf8:	0000a2f5 	.word	0x0000a2f5
    9bfc:	00009d25 	.word	0x00009d25
    9c00:	0000a5c9 	.word	0x0000a5c9
    9c04:	4411      	add	r1, r2
    9c06:	78c2      	ldrb	r2, [r0, #3]
    9c08:	480c      	ldr	r0, [pc, #48]	; (9c3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    9c0a:	1d89      	adds	r1, r1, #6
    9c0c:	b289      	uxth	r1, r1
    9c0e:	6840      	ldr	r0, [r0, #4]
    9c10:	2a01      	cmp	r2, #1
    9c12:	d006      	beq.n	9c22 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    9c14:	b142      	cbz	r2, 9c28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    9c16:	2a18      	cmp	r2, #24
    9c18:	d105      	bne.n	9c26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    9c1a:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    9c1e:	b132      	cbz	r2, 9c2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    9c20:	e009      	b.n	9c36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    9c22:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    9c26:	4770      	bx	lr
    9c28:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    9c2c:	4770      	bx	lr
    9c2e:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    9c32:	b902      	cbnz	r2, 9c36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    9c34:	2100      	movs	r1, #0
    9c36:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    9c3a:	4770      	bx	lr
    9c3c:	20000104 	.word	0x20000104
    9c40:	490b      	ldr	r1, [pc, #44]	; (9c70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    9c42:	78c2      	ldrb	r2, [r0, #3]
    9c44:	6849      	ldr	r1, [r1, #4]
    9c46:	2a01      	cmp	r2, #1
    9c48:	d006      	beq.n	9c58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    9c4a:	b15a      	cbz	r2, 9c64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    9c4c:	2a18      	cmp	r2, #24
    9c4e:	d108      	bne.n	9c62 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    9c50:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    9c54:	f005 b93a 	b.w	eecc <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    9c58:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    9c5c:	7241      	strb	r1, [r0, #9]
    9c5e:	0a09      	lsrs	r1, r1, #8
    9c60:	7281      	strb	r1, [r0, #10]
    9c62:	4770      	bx	lr
    9c64:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    9c68:	7341      	strb	r1, [r0, #13]
    9c6a:	0a09      	lsrs	r1, r1, #8
    9c6c:	7381      	strb	r1, [r0, #14]
    9c6e:	4770      	bx	lr
    9c70:	20000104 	.word	0x20000104
    9c74:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9c76:	4c2a      	ldr	r4, [pc, #168]	; (9d20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    9c78:	2300      	movs	r3, #0
    9c7a:	4619      	mov	r1, r3
    9c7c:	6860      	ldr	r0, [r4, #4]
    9c7e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9c82:	3078      	adds	r0, #120	; 0x78
    9c84:	f004 fe82 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c88:	2800      	cmp	r0, #0
    9c8a:	d048      	beq.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9c8c:	6860      	ldr	r0, [r4, #4]
    9c8e:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    9c92:	f88d 1000 	strb.w	r1, [sp]
    9c96:	9900      	ldr	r1, [sp, #0]
    9c98:	9100      	str	r1, [sp, #0]
    9c9a:	f89d 1000 	ldrb.w	r1, [sp]
    9c9e:	2900      	cmp	r1, #0
    9ca0:	d03d      	beq.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9ca2:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9ca6:	f004 feca 	bl	ea3e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9caa:	2800      	cmp	r0, #0
    9cac:	d137      	bne.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9cae:	6860      	ldr	r0, [r4, #4]
    9cb0:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    9cb4:	280a      	cmp	r0, #10
    9cb6:	d932      	bls.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9cb8:	4668      	mov	r0, sp
    9cba:	f7fc ff9d 	bl	6bf8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    9cbe:	2800      	cmp	r0, #0
    9cc0:	d02d      	beq.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9cc2:	6861      	ldr	r1, [r4, #4]
    9cc4:	2205      	movs	r2, #5
    9cc6:	4668      	mov	r0, sp
    9cc8:	318e      	adds	r1, #142	; 0x8e
    9cca:	f003 fc09 	bl	d4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    9cce:	2500      	movs	r5, #0
    9cd0:	b310      	cbz	r0, 9d18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    9cd2:	6860      	ldr	r0, [r4, #4]
    9cd4:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    9cd8:	7808      	ldrb	r0, [r1, #0]
    9cda:	b158      	cbz	r0, 9cf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    9cdc:	2205      	movs	r2, #5
    9cde:	4668      	mov	r0, sp
    9ce0:	1c49      	adds	r1, r1, #1
    9ce2:	f003 fbfd 	bl	d4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    9ce6:	2800      	cmp	r0, #0
    9ce8:	d119      	bne.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9cea:	6860      	ldr	r0, [r4, #4]
    9cec:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    9cf0:	7800      	ldrb	r0, [r0, #0]
    9cf2:	b940      	cbnz	r0, 9d06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    9cf4:	6860      	ldr	r0, [r4, #4]
    9cf6:	9900      	ldr	r1, [sp, #0]
    9cf8:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    9cfc:	f8c0 1001 	str.w	r1, [r0, #1]
    9d00:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9d04:	7141      	strb	r1, [r0, #5]
    9d06:	6860      	ldr	r0, [r4, #4]
    9d08:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    9d0c:	7808      	ldrb	r0, [r1, #0]
    9d0e:	1c40      	adds	r0, r0, #1
    9d10:	7008      	strb	r0, [r1, #0]
    9d12:	2001      	movs	r0, #1
    9d14:	f000 fd04 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9d18:	6860      	ldr	r0, [r4, #4]
    9d1a:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    9d1e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9d20:	20000104 	.word	0x20000104
    9d24:	4a0c      	ldr	r2, [pc, #48]	; (9d58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    9d26:	7851      	ldrb	r1, [r2, #1]
    9d28:	b999      	cbnz	r1, 9d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    9d2a:	4611      	mov	r1, r2
    9d2c:	2801      	cmp	r0, #1
    9d2e:	6849      	ldr	r1, [r1, #4]
    9d30:	d008      	beq.n	9d44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    9d32:	7890      	ldrb	r0, [r2, #2]
    9d34:	0740      	lsls	r0, r0, #29
    9d36:	d503      	bpl.n	9d40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    9d38:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    9d3c:	2807      	cmp	r0, #7
    9d3e:	d008      	beq.n	9d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    9d40:	2001      	movs	r0, #1
    9d42:	4770      	bx	lr
    9d44:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    9d48:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    9d4a:	4288      	cmp	r0, r1
    9d4c:	d801      	bhi.n	9d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    9d4e:	f7fe be85 	b.w	8a5c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    9d52:	2000      	movs	r0, #0
    9d54:	4770      	bx	lr
    9d56:	0000      	.short	0x0000
    9d58:	20000104 	.word	0x20000104
    9d5c:	b538      	push	{r3, r4, r5, lr}
    9d5e:	4c87      	ldr	r4, [pc, #540]	; (9f7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    9d60:	6860      	ldr	r0, [r4, #4]
    9d62:	3078      	adds	r0, #120	; 0x78
    9d64:	f005 fd2e 	bl	f7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9d68:	2800      	cmp	r0, #0
    9d6a:	d15b      	bne.n	9e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    9d6c:	6860      	ldr	r0, [r4, #4]
    9d6e:	2300      	movs	r3, #0
    9d70:	2101      	movs	r1, #1
    9d72:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9d76:	3078      	adds	r0, #120	; 0x78
    9d78:	f004 fe08 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d7c:	2800      	cmp	r0, #0
    9d7e:	d151      	bne.n	9e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    9d80:	6860      	ldr	r0, [r4, #4]
    9d82:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    9d86:	f88d 1000 	strb.w	r1, [sp]
    9d8a:	9900      	ldr	r1, [sp, #0]
    9d8c:	9100      	str	r1, [sp, #0]
    9d8e:	f89d 1000 	ldrb.w	r1, [sp]
    9d92:	b109      	cbz	r1, 9d98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    9d94:	2002      	movs	r0, #2
    9d96:	e038      	b.n	9e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9d98:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9d9c:	2300      	movs	r3, #0
    9d9e:	4619      	mov	r1, r3
    9da0:	3078      	adds	r0, #120	; 0x78
    9da2:	f004 fdf3 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9da6:	b128      	cbz	r0, 9db4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    9da8:	6860      	ldr	r0, [r4, #4]
    9daa:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    9dae:	b108      	cbz	r0, 9db4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    9db0:	2012      	movs	r0, #18
    9db2:	e02a      	b.n	9e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9db4:	6860      	ldr	r0, [r4, #4]
    9db6:	2500      	movs	r5, #0
    9db8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9dbc:	2a12      	cmp	r2, #18
    9dbe:	d01d      	beq.n	9dfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    9dc0:	dc04      	bgt.n	9dcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    9dc2:	2a03      	cmp	r2, #3
    9dc4:	d025      	beq.n	9e12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    9dc6:	2a11      	cmp	r2, #17
    9dc8:	d104      	bne.n	9dd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    9dca:	e019      	b.n	9e00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    9dcc:	2a18      	cmp	r2, #24
    9dce:	d01b      	beq.n	9e08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    9dd0:	2a23      	cmp	r2, #35	; 0x23
    9dd2:	d028      	beq.n	9e26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    9dd4:	2300      	movs	r3, #0
    9dd6:	2104      	movs	r1, #4
    9dd8:	3078      	adds	r0, #120	; 0x78
    9dda:	f004 fdd7 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9dde:	2800      	cmp	r0, #0
    9de0:	d120      	bne.n	9e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    9de2:	6860      	ldr	r0, [r4, #4]
    9de4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9de8:	2919      	cmp	r1, #25
    9dea:	d07c      	beq.n	9ee6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    9dec:	dc22      	bgt.n	9e34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    9dee:	2901      	cmp	r1, #1
    9df0:	d02c      	beq.n	9e4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    9df2:	2902      	cmp	r1, #2
    9df4:	d037      	beq.n	9e66 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    9df6:	2903      	cmp	r1, #3
    9df8:	d134      	bne.n	9e64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    9dfa:	e022      	b.n	9e42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    9dfc:	200b      	movs	r0, #11
    9dfe:	e004      	b.n	9e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9e04:	f000 bba0 	b.w	a548 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    9e08:	2006      	movs	r0, #6
    9e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9e0e:	f000 bc87 	b.w	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9e12:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    9e16:	7101      	strb	r1, [r0, #4]
    9e18:	2007      	movs	r0, #7
    9e1a:	f000 fc81 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9e1e:	6860      	ldr	r0, [r4, #4]
    9e20:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9e24:	bd38      	pop	{r3, r4, r5, pc}
    9e26:	2018      	movs	r0, #24
    9e28:	f000 fc7a 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9e2c:	6860      	ldr	r0, [r4, #4]
    9e2e:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    9e32:	bd38      	pop	{r3, r4, r5, pc}
    9e34:	291d      	cmp	r1, #29
    9e36:	d018      	beq.n	9e6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    9e38:	291e      	cmp	r1, #30
    9e3a:	d016      	beq.n	9e6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    9e3c:	2921      	cmp	r1, #33	; 0x21
    9e3e:	d176      	bne.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9e40:	e056      	b.n	9ef0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    9e42:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    9e46:	7141      	strb	r1, [r0, #5]
    9e48:	2007      	movs	r0, #7
    9e4a:	e07e      	b.n	9f4a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    9e4c:	200c      	movs	r0, #12
    9e4e:	f000 fc67 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9e52:	6860      	ldr	r0, [r4, #4]
    9e54:	f820 5fba 	strh.w	r5, [r0, #186]!
    9e58:	7981      	ldrb	r1, [r0, #6]
    9e5a:	f041 0101 	orr.w	r1, r1, #1
    9e5e:	7181      	strb	r1, [r0, #6]
    9e60:	f800 5c34 	strb.w	r5, [r0, #-52]
    9e64:	e063      	b.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9e66:	2013      	movs	r0, #19
    9e68:	e037      	b.n	9eda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    9e6a:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    9e6e:	f88d 2000 	strb.w	r2, [sp]
    9e72:	9a00      	ldr	r2, [sp, #0]
    9e74:	9200      	str	r2, [sp, #0]
    9e76:	f89d 2000 	ldrb.w	r2, [sp]
    9e7a:	bbaa      	cbnz	r2, 9ee8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    9e7c:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    9e80:	f88d 2000 	strb.w	r2, [sp]
    9e84:	9a00      	ldr	r2, [sp, #0]
    9e86:	9200      	str	r2, [sp, #0]
    9e88:	f89d 2000 	ldrb.w	r2, [sp]
    9e8c:	b1aa      	cbz	r2, 9eba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    9e8e:	2924      	cmp	r1, #36	; 0x24
    9e90:	d011      	beq.n	9eb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    9e92:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9e96:	2924      	cmp	r1, #36	; 0x24
    9e98:	d00d      	beq.n	9eb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    9e9a:	2300      	movs	r3, #0
    9e9c:	f500 7293 	add.w	r2, r0, #294	; 0x126
    9ea0:	f500 7199 	add.w	r1, r0, #306	; 0x132
    9ea4:	f005 f91a 	bl	f0dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9ea8:	6860      	ldr	r0, [r4, #4]
    9eaa:	211e      	movs	r1, #30
    9eac:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    9eb0:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    9eb4:	e003      	b.n	9ebe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    9eb6:	2301      	movs	r3, #1
    9eb8:	e7f0      	b.n	9e9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    9eba:	291e      	cmp	r1, #30
    9ebc:	d137      	bne.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9ebe:	6860      	ldr	r0, [r4, #4]
    9ec0:	f005 f927 	bl	f112 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9ec4:	f000 f85c 	bl	9f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9ec8:	6861      	ldr	r1, [r4, #4]
    9eca:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    9ece:	8bc2      	ldrh	r2, [r0, #30]
    9ed0:	f821 2ffe 	strh.w	r2, [r1, #254]!
    9ed4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9ed6:	8048      	strh	r0, [r1, #2]
    9ed8:	2015      	movs	r0, #21
    9eda:	f000 fc21 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9ede:	6860      	ldr	r0, [r4, #4]
    9ee0:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    9ee4:	e001      	b.n	9eea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    9ee6:	e02f      	b.n	9f48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    9ee8:	e021      	b.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9eea:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9eee:	e01e      	b.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9ef0:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    9ef4:	2901      	cmp	r1, #1
    9ef6:	d108      	bne.n	9f0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    9ef8:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    9efc:	f88d 1000 	strb.w	r1, [sp]
    9f00:	9900      	ldr	r1, [sp, #0]
    9f02:	9100      	str	r1, [sp, #0]
    9f04:	f89d 1000 	ldrb.w	r1, [sp]
    9f08:	b121      	cbz	r1, 9f14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    9f0a:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    9f0e:	2902      	cmp	r1, #2
    9f10:	d005      	beq.n	9f1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    9f12:	e00c      	b.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9f14:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    9f18:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    9f1c:	e002      	b.n	9f24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    9f1e:	f850 1f62 	ldr.w	r1, [r0, #98]!
    9f22:	6840      	ldr	r0, [r0, #4]
    9f24:	f000 fc1e 	bl	a764 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    9f28:	2018      	movs	r0, #24
    9f2a:	f000 fbf9 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9f2e:	6860      	ldr	r0, [r4, #4]
    9f30:	3078      	adds	r0, #120	; 0x78
    9f32:	f005 fc47 	bl	f7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9f36:	2800      	cmp	r0, #0
    9f38:	f47f af7b 	bne.w	9e32 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    9f3c:	6860      	ldr	r0, [r4, #4]
    9f3e:	3078      	adds	r0, #120	; 0x78
    9f40:	f005 fc40 	bl	f7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9f44:	b128      	cbz	r0, 9f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    9f46:	e00f      	b.n	9f68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    9f48:	2011      	movs	r0, #17
    9f4a:	f000 fbe9 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9f4e:	6860      	ldr	r0, [r4, #4]
    9f50:	e7c8      	b.n	9ee4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    9f52:	6860      	ldr	r0, [r4, #4]
    9f54:	2300      	movs	r3, #0
    9f56:	4619      	mov	r1, r3
    9f58:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f5c:	3078      	adds	r0, #120	; 0x78
    9f5e:	f004 fd15 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f62:	b108      	cbz	r0, 9f68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    9f64:	f000 fa44 	bl	a3f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    9f68:	6860      	ldr	r0, [r4, #4]
    9f6a:	3078      	adds	r0, #120	; 0x78
    9f6c:	f005 fc2a 	bl	f7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9f70:	2800      	cmp	r0, #0
    9f72:	d1e1      	bne.n	9f38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    9f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9f78:	f7ff be7c 	b.w	9c74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    9f7c:	20000104 	.word	0x20000104
    9f80:	480a      	ldr	r0, [pc, #40]	; (9fac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    9f82:	b510      	push	{r4, lr}
    9f84:	6841      	ldr	r1, [r0, #4]
    9f86:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    9f8a:	2801      	cmp	r0, #1
    9f8c:	d009      	beq.n	9fa2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    9f8e:	8808      	ldrh	r0, [r1, #0]
    9f90:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    9f94:	312c      	adds	r1, #44	; 0x2c
    9f96:	f005 f87d 	bl	f094 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f9e:	f001 baef 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9fa2:	2002      	movs	r0, #2
    9fa4:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9fa8:	bd10      	pop	{r4, pc}
    9faa:	0000      	.short	0x0000
    9fac:	20000104 	.word	0x20000104
    9fb0:	b570      	push	{r4, r5, r6, lr}
    9fb2:	4c22      	ldr	r4, [pc, #136]	; (a03c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    9fb4:	f04f 0500 	mov.w	r5, #0
    9fb8:	8861      	ldrh	r1, [r4, #2]
    9fba:	0748      	lsls	r0, r1, #29
    9fbc:	d510      	bpl.n	9fe0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    9fbe:	6860      	ldr	r0, [r4, #4]
    9fc0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9fc4:	2a03      	cmp	r2, #3
    9fc6:	d004      	beq.n	9fd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    9fc8:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9fcc:	2a07      	cmp	r2, #7
    9fce:	d107      	bne.n	9fe0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    9fd0:	e002      	b.n	9fd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    9fd2:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    9fd6:	e026      	b.n	a026 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    9fd8:	2201      	movs	r2, #1
    9fda:	7022      	strb	r2, [r4, #0]
    9fdc:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    9fe0:	0788      	lsls	r0, r1, #30
    9fe2:	d508      	bpl.n	9ff6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    9fe4:	68a0      	ldr	r0, [r4, #8]
    9fe6:	78c0      	ldrb	r0, [r0, #3]
    9fe8:	2819      	cmp	r0, #25
    9fea:	d21a      	bcs.n	a022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    9fec:	4914      	ldr	r1, [pc, #80]	; (a040 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    9fee:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    9ff2:	b1b0      	cbz	r0, a022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    9ff4:	4780      	blx	r0
    9ff6:	f000 f867 	bl	a0c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    9ffa:	f000 f823 	bl	a044 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    9ffe:	4606      	mov	r6, r0
    a000:	7860      	ldrb	r0, [r4, #1]
    a002:	0700      	lsls	r0, r0, #28
    a004:	d515      	bpl.n	a032 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    a006:	6860      	ldr	r0, [r4, #4]
    a008:	2300      	movs	r3, #0
    a00a:	2105      	movs	r1, #5
    a00c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a010:	3078      	adds	r0, #120	; 0x78
    a012:	f004 fcbb 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a016:	b148      	cbz	r0, a02c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    a018:	6860      	ldr	r0, [r4, #4]
    a01a:	2608      	movs	r6, #8
    a01c:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    a020:	e007      	b.n	a032 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    a022:	f240 61b1 	movw	r1, #1713	; 0x6b1
    a026:	2036      	movs	r0, #54	; 0x36
    a028:	f7fa fe76 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a02c:	2000      	movs	r0, #0
    a02e:	f7fb fe21 	bl	5c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    a032:	6860      	ldr	r0, [r4, #4]
    a034:	f005 fbf6 	bl	f824 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    a038:	4630      	mov	r0, r6
    a03a:	bd70      	pop	{r4, r5, r6, pc}
    a03c:	20000104 	.word	0x20000104
    a040:	20000178 	.word	0x20000178
    a044:	b570      	push	{r4, r5, r6, lr}
    a046:	4c1e      	ldr	r4, [pc, #120]	; (a0c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    a048:	2000      	movs	r0, #0
    a04a:	78a1      	ldrb	r1, [r4, #2]
    a04c:	07c9      	lsls	r1, r1, #31
    a04e:	d01b      	beq.n	a088 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    a050:	68e0      	ldr	r0, [r4, #12]
    a052:	2300      	movs	r3, #0
    a054:	2105      	movs	r1, #5
    a056:	78c5      	ldrb	r5, [r0, #3]
    a058:	6860      	ldr	r0, [r4, #4]
    a05a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a05e:	3078      	adds	r0, #120	; 0x78
    a060:	f004 fc94 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a064:	b188      	cbz	r0, a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a066:	2d06      	cmp	r5, #6
    a068:	d00f      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a06a:	dc06      	bgt.n	a07a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    a06c:	2d02      	cmp	r5, #2
    a06e:	d00c      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a070:	2d04      	cmp	r5, #4
    a072:	d00a      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a074:	2d05      	cmp	r5, #5
    a076:	d106      	bne.n	a086 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    a078:	e007      	b.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a07a:	2d0b      	cmp	r5, #11
    a07c:	d005      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a07e:	2d0d      	cmp	r5, #13
    a080:	d003      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a082:	2d11      	cmp	r5, #17
    a084:	d001      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a086:	2008      	movs	r0, #8
    a088:	bd70      	pop	{r4, r5, r6, pc}
    a08a:	68e0      	ldr	r0, [r4, #12]
    a08c:	f7fc fe70 	bl	6d70 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    a090:	b148      	cbz	r0, a0a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    a092:	68e0      	ldr	r0, [r4, #12]
    a094:	78c0      	ldrb	r0, [r0, #3]
    a096:	2819      	cmp	r0, #25
    a098:	d205      	bcs.n	a0a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    a09a:	490a      	ldr	r1, [pc, #40]	; (a0c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    a09c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    a0a0:	b108      	cbz	r0, a0a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    a0a2:	4780      	blx	r0
    a0a4:	e002      	b.n	a0ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    a0a6:	2000      	movs	r0, #0
    a0a8:	f000 fbdc 	bl	a864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    a0ac:	6861      	ldr	r1, [r4, #4]
    a0ae:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    a0b2:	1c52      	adds	r2, r2, #1
    a0b4:	f143 0300 	adc.w	r3, r3, #0
    a0b8:	e9c1 2300 	strd	r2, r3, [r1]
    a0bc:	bd70      	pop	{r4, r5, r6, pc}
    a0be:	0000      	.short	0x0000
    a0c0:	20000104 	.word	0x20000104
    a0c4:	20000114 	.word	0x20000114
    a0c8:	b510      	push	{r4, lr}
    a0ca:	4c11      	ldr	r4, [pc, #68]	; (a110 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    a0cc:	78a0      	ldrb	r0, [r4, #2]
    a0ce:	0700      	lsls	r0, r0, #28
    a0d0:	d517      	bpl.n	a102 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    a0d2:	6860      	ldr	r0, [r4, #4]
    a0d4:	2100      	movs	r1, #0
    a0d6:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    a0da:	f001 f97b 	bl	b3d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    a0de:	6860      	ldr	r0, [r4, #4]
    a0e0:	3078      	adds	r0, #120	; 0x78
    a0e2:	f005 fb6f 	bl	f7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    a0e6:	b168      	cbz	r0, a104 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    a0e8:	6860      	ldr	r0, [r4, #4]
    a0ea:	21fe      	movs	r1, #254	; 0xfe
    a0ec:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    a0f0:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a0f4:	2908      	cmp	r1, #8
    a0f6:	d104      	bne.n	a102 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    a0f8:	2102      	movs	r1, #2
    a0fa:	7021      	strb	r1, [r4, #0]
    a0fc:	2100      	movs	r1, #0
    a0fe:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    a102:	bd10      	pop	{r4, pc}
    a104:	f240 61bd 	movw	r1, #1725	; 0x6bd
    a108:	2036      	movs	r0, #54	; 0x36
    a10a:	f7fa fe05 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a10e:	0000      	.short	0x0000
    a110:	20000104 	.word	0x20000104
    a114:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a116:	4605      	mov	r5, r0
    a118:	4668      	mov	r0, sp
    a11a:	f7fb fc09 	bl	5930 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    a11e:	b318      	cbz	r0, a168 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    a120:	2222      	movs	r2, #34	; 0x22
    a122:	2100      	movs	r1, #0
    a124:	9800      	ldr	r0, [sp, #0]
    a126:	f003 fa67 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a12a:	2103      	movs	r1, #3
    a12c:	9800      	ldr	r0, [sp, #0]
    a12e:	f004 feb3 	bl	ee98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    a132:	9800      	ldr	r0, [sp, #0]
    a134:	7801      	ldrb	r1, [r0, #0]
    a136:	f021 0110 	bic.w	r1, r1, #16
    a13a:	7001      	strb	r1, [r0, #0]
    a13c:	4629      	mov	r1, r5
    a13e:	f7fc fe27 	bl	6d90 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    a142:	2100      	movs	r1, #0
    a144:	4c6a      	ldr	r4, [pc, #424]	; (a2f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    a146:	2d19      	cmp	r5, #25
    a148:	d270      	bcs.n	a22c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    a14a:	e8df f005 	tbb	[pc, r5]
    a14e:	1c24      	.short	0x1c24
    a150:	c9c94c10 	.word	0xc9c94c10
    a154:	c97016c2 	.word	0xc97016c2
    a158:	c964c2c2 	.word	0xc964c2c2
    a15c:	b6c9c9c9 	.word	0xb6c9c9c9
    a160:	8181c2c2 	.word	0x8181c2c2
    a164:	00a3c99a 	.word	0x00a3c99a
    a168:	f640 014f 	movw	r1, #2127	; 0x84f
    a16c:	e0bd      	b.n	a2ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    a16e:	6860      	ldr	r0, [r4, #4]
    a170:	9900      	ldr	r1, [sp, #0]
    a172:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    a176:	7108      	strb	r0, [r1, #4]
    a178:	e0ab      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a17a:	6861      	ldr	r1, [r4, #4]
    a17c:	9800      	ldr	r0, [sp, #0]
    a17e:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    a182:	7101      	strb	r1, [r0, #4]
    a184:	e0a5      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a186:	6860      	ldr	r0, [r4, #4]
    a188:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    a18c:	9800      	ldr	r0, [sp, #0]
    a18e:	1c49      	adds	r1, r1, #1
    a190:	f004 fe62 	bl	ee58 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    a194:	e09d      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a196:	6860      	ldr	r0, [r4, #4]
    a198:	9d00      	ldr	r5, [sp, #0]
    a19a:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    a19e:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    a1a2:	f004 fd76 	bl	ec92 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    a1a6:	7128      	strb	r0, [r5, #4]
    a1a8:	6860      	ldr	r0, [r4, #4]
    a1aa:	9d00      	ldr	r5, [sp, #0]
    a1ac:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    a1b0:	c803      	ldmia	r0, {r0, r1}
    a1b2:	f004 fd63 	bl	ec7c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    a1b6:	7168      	strb	r0, [r5, #5]
    a1b8:	0a00      	lsrs	r0, r0, #8
    a1ba:	71a8      	strb	r0, [r5, #6]
    a1bc:	6860      	ldr	r0, [r4, #4]
    a1be:	9d00      	ldr	r5, [sp, #0]
    a1c0:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    a1c4:	f004 fbc9 	bl	e95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    a1c8:	71e8      	strb	r0, [r5, #7]
    a1ca:	0a00      	lsrs	r0, r0, #8
    a1cc:	7228      	strb	r0, [r5, #8]
    a1ce:	6862      	ldr	r2, [r4, #4]
    a1d0:	9800      	ldr	r0, [sp, #0]
    a1d2:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    a1d6:	7241      	strb	r1, [r0, #9]
    a1d8:	0a09      	lsrs	r1, r1, #8
    a1da:	7281      	strb	r1, [r0, #10]
    a1dc:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    a1e0:	f004 fe3f 	bl	ee62 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    a1e4:	e075      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a1e6:	6861      	ldr	r1, [r4, #4]
    a1e8:	9800      	ldr	r0, [sp, #0]
    a1ea:	f201 115b 	addw	r1, r1, #347	; 0x15b
    a1ee:	f004 fe43 	bl	ee78 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    a1f2:	6861      	ldr	r1, [r4, #4]
    a1f4:	9800      	ldr	r0, [sp, #0]
    a1f6:	f201 1163 	addw	r1, r1, #355	; 0x163
    a1fa:	f004 fe36 	bl	ee6a <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    a1fe:	6861      	ldr	r1, [r4, #4]
    a200:	9800      	ldr	r0, [sp, #0]
    a202:	f201 1175 	addw	r1, r1, #373	; 0x175
    a206:	f004 fe3c 	bl	ee82 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    a20a:	6861      	ldr	r1, [r4, #4]
    a20c:	9800      	ldr	r0, [sp, #0]
    a20e:	31f0      	adds	r1, #240	; 0xf0
    a210:	f004 fe2e 	bl	ee70 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    a214:	e05d      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a216:	9800      	ldr	r0, [sp, #0]
    a218:	220b      	movs	r2, #11
    a21a:	7102      	strb	r2, [r0, #4]
    a21c:	2259      	movs	r2, #89	; 0x59
    a21e:	7142      	strb	r2, [r0, #5]
    a220:	7181      	strb	r1, [r0, #6]
    a222:	21b0      	movs	r1, #176	; 0xb0
    a224:	71c1      	strb	r1, [r0, #7]
    a226:	2112      	movs	r1, #18
    a228:	7201      	strb	r1, [r0, #8]
    a22a:	e052      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a22c:	e058      	b.n	a2e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    a22e:	9101      	str	r1, [sp, #4]
    a230:	9102      	str	r1, [sp, #8]
    a232:	f001 fec7 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a236:	f644 112f 	movw	r1, #18735	; 0x492f
    a23a:	4008      	ands	r0, r1
    a23c:	f88d 0004 	strb.w	r0, [sp, #4]
    a240:	0a00      	lsrs	r0, r0, #8
    a242:	f88d 0005 	strb.w	r0, [sp, #5]
    a246:	a901      	add	r1, sp, #4
    a248:	9800      	ldr	r0, [sp, #0]
    a24a:	f004 fe20 	bl	ee8e <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    a24e:	e040      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a250:	6860      	ldr	r0, [r4, #4]
    a252:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    a256:	9800      	ldr	r0, [sp, #0]
    a258:	f004 fe30 	bl	eebc <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    a25c:	6860      	ldr	r0, [r4, #4]
    a25e:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    a262:	9800      	ldr	r0, [sp, #0]
    a264:	f004 fe2e 	bl	eec4 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    a268:	6860      	ldr	r0, [r4, #4]
    a26a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    a26e:	9800      	ldr	r0, [sp, #0]
    a270:	f004 fe1c 	bl	eeac <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    a274:	6860      	ldr	r0, [r4, #4]
    a276:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    a27a:	9800      	ldr	r0, [sp, #0]
    a27c:	f004 fe1a 	bl	eeb4 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    a280:	e027      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a282:	6861      	ldr	r1, [r4, #4]
    a284:	9800      	ldr	r0, [sp, #0]
    a286:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    a28a:	7102      	strb	r2, [r0, #4]
    a28c:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    a290:	7141      	strb	r1, [r0, #5]
    a292:	e01e      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a294:	6860      	ldr	r0, [r4, #4]
    a296:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    a29a:	f004 fc1b 	bl	ead4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    a29e:	4601      	mov	r1, r0
    a2a0:	9800      	ldr	r0, [sp, #0]
    a2a2:	f004 fe17 	bl	eed4 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    a2a6:	6860      	ldr	r0, [r4, #4]
    a2a8:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    a2ac:	f004 fc12 	bl	ead4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    a2b0:	4601      	mov	r1, r0
    a2b2:	9800      	ldr	r0, [sp, #0]
    a2b4:	f004 fdf8 	bl	eea8 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    a2b8:	e00b      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a2ba:	6860      	ldr	r0, [r4, #4]
    a2bc:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    a2c0:	9800      	ldr	r0, [sp, #0]
    a2c2:	f004 fdc5 	bl	ee50 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    a2c6:	6860      	ldr	r0, [r4, #4]
    a2c8:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    a2cc:	9800      	ldr	r0, [sp, #0]
    a2ce:	f004 fdc1 	bl	ee54 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    a2d2:	f7fb fb07 	bl	58e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    a2d6:	b130      	cbz	r0, a2e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    a2d8:	9800      	ldr	r0, [sp, #0]
    a2da:	f7ff fcb1 	bl	9c40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    a2de:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a2e0:	f640 01db 	movw	r1, #2267	; 0x8db
    a2e4:	e001      	b.n	a2ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    a2e6:	f640 01e1 	movw	r1, #2273	; 0x8e1
    a2ea:	2036      	movs	r0, #54	; 0x36
    a2ec:	f7fa fd14 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2f0:	20000104 	.word	0x20000104
    a2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2f8:	4c27      	ldr	r4, [pc, #156]	; (a398 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    a2fa:	4680      	mov	r8, r0
    a2fc:	460d      	mov	r5, r1
    a2fe:	8860      	ldrh	r0, [r4, #2]
    a300:	f04f 0600 	mov.w	r6, #0
    a304:	05c1      	lsls	r1, r0, #23
    a306:	4620      	mov	r0, r4
    a308:	6840      	ldr	r0, [r0, #4]
    a30a:	d502      	bpl.n	a312 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    a30c:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    a310:	e004      	b.n	a31c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    a312:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    a316:	1c49      	adds	r1, r1, #1
    a318:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    a31c:	f005 fadd 	bl	f8da <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    a320:	2701      	movs	r7, #1
    a322:	b1e0      	cbz	r0, a35e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    a324:	8860      	ldrh	r0, [r4, #2]
    a326:	0500      	lsls	r0, r0, #20
    a328:	d506      	bpl.n	a338 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    a32a:	6860      	ldr	r0, [r4, #4]
    a32c:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    a330:	b111      	cbz	r1, a338 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    a332:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    a336:	e012      	b.n	a35e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    a338:	6860      	ldr	r0, [r4, #4]
    a33a:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    a33e:	1c49      	adds	r1, r1, #1
    a340:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    a344:	f005 fa5f 	bl	f806 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    a348:	6860      	ldr	r0, [r4, #4]
    a34a:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    a34e:	4291      	cmp	r1, r2
    a350:	d305      	bcc.n	a35e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    a352:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    a356:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    a35a:	f001 f911 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a35e:	8860      	ldrh	r0, [r4, #2]
    a360:	f410 7f40 	tst.w	r0, #768	; 0x300
    a364:	d008      	beq.n	a378 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    a366:	6860      	ldr	r0, [r4, #4]
    a368:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    a36c:	b921      	cbnz	r1, a378 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    a36e:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    a372:	2101      	movs	r1, #1
    a374:	f7fe fb94 	bl	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a378:	ea58 0005 	orrs.w	r0, r8, r5
    a37c:	d104      	bne.n	a388 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    a37e:	f7ff fe17 	bl	9fb0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    a382:	4605      	mov	r5, r0
    a384:	f7ff fcea 	bl	9d5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    a388:	4629      	mov	r1, r5
    a38a:	4640      	mov	r0, r8
    a38c:	f000 ff7a 	bl	b284 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x176c>
    a390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a394:	f7fb ba90 	b.w	58b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    a398:	20000104 	.word	0x20000104
    a39c:	4813      	ldr	r0, [pc, #76]	; (a3ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    a39e:	6840      	ldr	r0, [r0, #4]
    a3a0:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a3a4:	b129      	cbz	r1, a3b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    a3a6:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    a3aa:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    a3ae:	4291      	cmp	r1, r2
    a3b0:	d215      	bcs.n	a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a3b2:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    a3b6:	b129      	cbz	r1, a3c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    a3b8:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    a3bc:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    a3c0:	4291      	cmp	r1, r2
    a3c2:	d20c      	bcs.n	a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a3c4:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    a3c8:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    a3cc:	428a      	cmp	r2, r1
    a3ce:	d206      	bcs.n	a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a3d0:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    a3d4:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    a3d8:	b11a      	cbz	r2, a3e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    a3da:	4288      	cmp	r0, r1
    a3dc:	d303      	bcc.n	a3e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    a3de:	2001      	movs	r0, #1
    a3e0:	4770      	bx	lr
    a3e2:	2806      	cmp	r0, #6
    a3e4:	d2fb      	bcs.n	a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a3e6:	2000      	movs	r0, #0
    a3e8:	4770      	bx	lr
    a3ea:	0000      	.short	0x0000
    a3ec:	20000104 	.word	0x20000104
    a3f0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a3f2:	4c54      	ldr	r4, [pc, #336]	; (a544 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    a3f4:	6860      	ldr	r0, [r4, #4]
    a3f6:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    a3fa:	f88d 1000 	strb.w	r1, [sp]
    a3fe:	9900      	ldr	r1, [sp, #0]
    a400:	9100      	str	r1, [sp, #0]
    a402:	f89d 1000 	ldrb.w	r1, [sp]
    a406:	b129      	cbz	r1, a414 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    a408:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a40c:	f004 fb17 	bl	ea3e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a410:	2800      	cmp	r0, #0
    a412:	d00a      	beq.n	a42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    a414:	6860      	ldr	r0, [r4, #4]
    a416:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    a41a:	b181      	cbz	r1, a43e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    a41c:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a420:	b149      	cbz	r1, a436 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    a422:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    a426:	b108      	cbz	r0, a42c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    a428:	200a      	movs	r0, #10
    a42a:	e087      	b.n	a53c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    a42c:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    a430:	2036      	movs	r0, #54	; 0x36
    a432:	f7fa fc71 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a436:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    a43a:	f000 b885 	b.w	a548 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    a43e:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    a442:	b109      	cbz	r1, a448 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    a444:	2008      	movs	r0, #8
    a446:	e079      	b.n	a53c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    a448:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    a44c:	2500      	movs	r5, #0
    a44e:	b181      	cbz	r1, a472 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    a450:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    a454:	0780      	lsls	r0, r0, #30
    a456:	d10b      	bne.n	a470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a458:	200c      	movs	r0, #12
    a45a:	f000 f961 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a45e:	6860      	ldr	r0, [r4, #4]
    a460:	2101      	movs	r1, #1
    a462:	f820 5fb4 	strh.w	r5, [r0, #180]!
    a466:	7101      	strb	r1, [r0, #4]
    a468:	7b01      	ldrb	r1, [r0, #12]
    a46a:	f041 0101 	orr.w	r1, r1, #1
    a46e:	7301      	strb	r1, [r0, #12]
    a470:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a472:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    a476:	f88d 1004 	strb.w	r1, [sp, #4]
    a47a:	9901      	ldr	r1, [sp, #4]
    a47c:	9101      	str	r1, [sp, #4]
    a47e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a482:	b141      	cbz	r1, a496 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    a484:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    a488:	f88d 1000 	strb.w	r1, [sp]
    a48c:	9900      	ldr	r1, [sp, #0]
    a48e:	9100      	str	r1, [sp, #0]
    a490:	f89d 1000 	ldrb.w	r1, [sp]
    a494:	b391      	cbz	r1, a4fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    a496:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    a49a:	2901      	cmp	r1, #1
    a49c:	d1e8      	bne.n	a470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a49e:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    a4a2:	f88d 1000 	strb.w	r1, [sp]
    a4a6:	9900      	ldr	r1, [sp, #0]
    a4a8:	9100      	str	r1, [sp, #0]
    a4aa:	f89d 1000 	ldrb.w	r1, [sp]
    a4ae:	2900      	cmp	r1, #0
    a4b0:	d1de      	bne.n	a470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a4b2:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a4b6:	f004 fac2 	bl	ea3e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a4ba:	2800      	cmp	r0, #0
    a4bc:	d1d8      	bne.n	a470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a4be:	6860      	ldr	r0, [r4, #4]
    a4c0:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    a4c4:	f005 f986 	bl	f7d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a4c8:	4605      	mov	r5, r0
    a4ca:	6860      	ldr	r0, [r4, #4]
    a4cc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    a4d0:	f005 f980 	bl	f7d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a4d4:	4606      	mov	r6, r0
    a4d6:	6860      	ldr	r0, [r4, #4]
    a4d8:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    a4dc:	4628      	mov	r0, r5
    a4de:	f005 f984 	bl	f7ea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    a4e2:	b350      	cbz	r0, a53a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    a4e4:	6860      	ldr	r0, [r4, #4]
    a4e6:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    a4ea:	4630      	mov	r0, r6
    a4ec:	f005 f97d 	bl	f7ea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    a4f0:	b318      	cbz	r0, a53a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    a4f2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    a4f6:	2000      	movs	r0, #0
    a4f8:	f000 b8ee 	b.w	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a4fc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a500:	2924      	cmp	r1, #36	; 0x24
    a502:	d018      	beq.n	a536 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    a504:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a508:	2924      	cmp	r1, #36	; 0x24
    a50a:	d014      	beq.n	a536 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    a50c:	f05f 0300 	movs.w	r3, #0
    a510:	f500 7293 	add.w	r2, r0, #294	; 0x126
    a514:	f500 7199 	add.w	r1, r0, #306	; 0x132
    a518:	f004 fde0 	bl	f0dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a51c:	6860      	ldr	r0, [r4, #4]
    a51e:	4602      	mov	r2, r0
    a520:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    a524:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    a528:	8bc8      	ldrh	r0, [r1, #30]
    a52a:	f822 0ffe 	strh.w	r0, [r2, #254]!
    a52e:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    a530:	8050      	strh	r0, [r2, #2]
    a532:	2014      	movs	r0, #20
    a534:	e002      	b.n	a53c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    a536:	2301      	movs	r3, #1
    a538:	e7ea      	b.n	a510 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    a53a:	2016      	movs	r0, #22
    a53c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    a540:	f000 b8ee 	b.w	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a544:	20000104 	.word	0x20000104
    a548:	b510      	push	{r4, lr}
    a54a:	4c1e      	ldr	r4, [pc, #120]	; (a5c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    a54c:	6862      	ldr	r2, [r4, #4]
    a54e:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    a552:	2808      	cmp	r0, #8
    a554:	d20d      	bcs.n	a572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    a556:	f1c0 0108 	rsb	r1, r0, #8
    a55a:	4410      	add	r0, r2
    a55c:	b2c9      	uxtb	r1, r1
    a55e:	f200 1075 	addw	r0, r0, #373	; 0x175
    a562:	f7fa fc67 	bl	4e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a566:	6861      	ldr	r1, [r4, #4]
    a568:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    a56c:	4410      	add	r0, r2
    a56e:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    a572:	6862      	ldr	r2, [r4, #4]
    a574:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    a578:	3808      	subs	r0, #8
    a57a:	2804      	cmp	r0, #4
    a57c:	d20c      	bcs.n	a598 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    a57e:	f1c0 0104 	rsb	r1, r0, #4
    a582:	4410      	add	r0, r2
    a584:	b2c9      	uxtb	r1, r1
    a586:	30f0      	adds	r0, #240	; 0xf0
    a588:	f7fa fc54 	bl	4e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a58c:	6861      	ldr	r1, [r4, #4]
    a58e:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    a592:	4410      	add	r0, r2
    a594:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    a598:	6860      	ldr	r0, [r4, #4]
    a59a:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    a59e:	290c      	cmp	r1, #12
    a5a0:	d30e      	bcc.n	a5c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    a5a2:	d005      	beq.n	a5b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    a5a4:	f640 1131 	movw	r1, #2353	; 0x931
    a5a8:	f04f 0036 	mov.w	r0, #54	; 0x36
    a5ac:	f7fa fbb4 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5b0:	2100      	movs	r1, #0
    a5b2:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    a5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5ba:	2003      	movs	r0, #3
    a5bc:	f000 b8b0 	b.w	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a5c0:	bd10      	pop	{r4, pc}
    a5c2:	0000      	.short	0x0000
    a5c4:	20000104 	.word	0x20000104
    a5c8:	b570      	push	{r4, r5, r6, lr}
    a5ca:	4b20      	ldr	r3, [pc, #128]	; (a64c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    a5cc:	4602      	mov	r2, r0
    a5ce:	460c      	mov	r4, r1
    a5d0:	8858      	ldrh	r0, [r3, #2]
    a5d2:	4310      	orrs	r0, r2
    a5d4:	8058      	strh	r0, [r3, #2]
    a5d6:	4618      	mov	r0, r3
    a5d8:	0791      	lsls	r1, r2, #30
    a5da:	6840      	ldr	r0, [r0, #4]
    a5dc:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    a5e0:	d507      	bpl.n	a5f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    a5e2:	b121      	cbz	r1, a5ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    a5e4:	f640 21c5 	movw	r1, #2757	; 0xac5
    a5e8:	2036      	movs	r0, #54	; 0x36
    a5ea:	f7fa fb95 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5ee:	609c      	str	r4, [r3, #8]
    a5f0:	e003      	b.n	a5fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    a5f2:	b101      	cbz	r1, a5f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    a5f4:	60dc      	str	r4, [r3, #12]
    a5f6:	0791      	lsls	r1, r2, #30
    a5f8:	d515      	bpl.n	a626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a5fa:	78e1      	ldrb	r1, [r4, #3]
    a5fc:	2906      	cmp	r1, #6
    a5fe:	d002      	beq.n	a606 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    a600:	290b      	cmp	r1, #11
    a602:	d110      	bne.n	a626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a604:	e008      	b.n	a618 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    a606:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a60a:	2918      	cmp	r1, #24
    a60c:	d10b      	bne.n	a626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a60e:	2100      	movs	r1, #0
    a610:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    a614:	2101      	movs	r1, #1
    a616:	e004      	b.n	a622 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    a618:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a61c:	2912      	cmp	r1, #18
    a61e:	d102      	bne.n	a626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a620:	2100      	movs	r1, #0
    a622:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    a626:	0691      	lsls	r1, r2, #26
    a628:	d501      	bpl.n	a62e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    a62a:	2108      	movs	r1, #8
    a62c:	7059      	strb	r1, [r3, #1]
    a62e:	0611      	lsls	r1, r2, #24
    a630:	d50a      	bpl.n	a648 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    a632:	8a82      	ldrh	r2, [r0, #20]
    a634:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    a638:	4620      	mov	r0, r4
    a63a:	f7ff fae3 	bl	9c04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    a63e:	4620      	mov	r0, r4
    a640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a644:	f7ff bafc 	b.w	9c40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    a648:	bd70      	pop	{r4, r5, r6, pc}
    a64a:	0000      	.short	0x0000
    a64c:	20000104 	.word	0x20000104
    a650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a654:	4c1f      	ldr	r4, [pc, #124]	; (a6d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    a656:	2501      	movs	r5, #1
    a658:	6862      	ldr	r2, [r4, #4]
    a65a:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    a65e:	b908      	cbnz	r0, a664 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    a660:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    a664:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    a668:	b909      	cbnz	r1, a66e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    a66a:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    a66e:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    a672:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    a676:	3262      	adds	r2, #98	; 0x62
    a678:	2001      	movs	r0, #1
    a67a:	7290      	strb	r0, [r2, #10]
    a67c:	2000      	movs	r0, #0
    a67e:	f000 f82b 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a682:	6860      	ldr	r0, [r4, #4]
    a684:	302c      	adds	r0, #44	; 0x2c
    a686:	f004 fd98 	bl	f1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a68a:	4606      	mov	r6, r0
    a68c:	6860      	ldr	r0, [r4, #4]
    a68e:	f004 fd40 	bl	f112 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a692:	b1c0      	cbz	r0, a6c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    a694:	6860      	ldr	r0, [r4, #4]
    a696:	302c      	adds	r0, #44	; 0x2c
    a698:	f004 fd8f 	bl	f1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a69c:	6861      	ldr	r1, [r4, #4]
    a69e:	4607      	mov	r7, r0
    a6a0:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    a6a4:	8808      	ldrh	r0, [r1, #0]
    a6a6:	312c      	adds	r1, #44	; 0x2c
    a6a8:	f004 fcf4 	bl	f094 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a6ac:	42be      	cmp	r6, r7
    a6ae:	d20a      	bcs.n	a6c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    a6b0:	f7f7 ff54 	bl	255c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    a6b4:	4601      	mov	r1, r0
    a6b6:	1bb8      	subs	r0, r7, r6
    a6b8:	2864      	cmp	r0, #100	; 0x64
    a6ba:	d200      	bcs.n	a6be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    a6bc:	2064      	movs	r0, #100	; 0x64
    a6be:	f7f7 fe41 	bl	2344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    a6c2:	b100      	cbz	r0, a6c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    a6c4:	2500      	movs	r5, #0
    a6c6:	2104      	movs	r1, #4
    a6c8:	6860      	ldr	r0, [r4, #4]
    a6ca:	f7fe f9e9 	bl	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a6ce:	4628      	mov	r0, r5
    a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6d4:	20000104 	.word	0x20000104
    a6d8:	b510      	push	{r4, lr}
    a6da:	4c10      	ldr	r4, [pc, #64]	; (a71c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    a6dc:	6861      	ldr	r1, [r4, #4]
    a6de:	880a      	ldrh	r2, [r1, #0]
    a6e0:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    a6e4:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    a6e8:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    a6ec:	f005 f872 	bl	f7d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a6f0:	6861      	ldr	r1, [r4, #4]
    a6f2:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    a6f6:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    a6fa:	f005 f86b 	bl	f7d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a6fe:	6862      	ldr	r2, [r4, #4]
    a700:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    a704:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    a708:	2001      	movs	r0, #1
    a70a:	7008      	strb	r0, [r1, #0]
    a70c:	2000      	movs	r0, #0
    a70e:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    a712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a716:	f000 bf33 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a71a:	0000      	.short	0x0000
    a71c:	20000104 	.word	0x20000104
    a720:	490f      	ldr	r1, [pc, #60]	; (a760 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    a722:	280c      	cmp	r0, #12
    a724:	6849      	ldr	r1, [r1, #4]
    a726:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    a72a:	d014      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a72c:	2813      	cmp	r0, #19
    a72e:	d012      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a730:	2818      	cmp	r0, #24
    a732:	d010      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a734:	2200      	movs	r2, #0
    a736:	2811      	cmp	r0, #17
    a738:	d00e      	beq.n	a758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    a73a:	2807      	cmp	r0, #7
    a73c:	d00b      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a73e:	2815      	cmp	r0, #21
    a740:	d00a      	beq.n	a758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    a742:	2801      	cmp	r0, #1
    a744:	d007      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a746:	2800      	cmp	r0, #0
    a748:	d005      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a74a:	2802      	cmp	r0, #2
    a74c:	d003      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a74e:	f821 2fb4 	strh.w	r2, [r1, #180]!
    a752:	2001      	movs	r0, #1
    a754:	7108      	strb	r0, [r1, #4]
    a756:	4770      	bx	lr
    a758:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    a75c:	4770      	bx	lr
    a75e:	0000      	.short	0x0000
    a760:	20000104 	.word	0x20000104
    a764:	b538      	push	{r3, r4, r5, lr}
    a766:	4c11      	ldr	r4, [pc, #68]	; (a7ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    a768:	6862      	ldr	r2, [r4, #4]
    a76a:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    a76e:	f8ad 2000 	strh.w	r2, [sp]
    a772:	f004 f9e4 	bl	eb3e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    a776:	f89d 3000 	ldrb.w	r3, [sp]
    a77a:	b2c2      	uxtb	r2, r0
    a77c:	2100      	movs	r1, #0
    a77e:	4293      	cmp	r3, r2
    a780:	d003      	beq.n	a78a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    a782:	6863      	ldr	r3, [r4, #4]
    a784:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    a788:	e002      	b.n	a790 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    a78a:	6862      	ldr	r2, [r4, #4]
    a78c:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    a790:	f89d 2001 	ldrb.w	r2, [sp, #1]
    a794:	f3c0 2007 	ubfx	r0, r0, #8, #8
    a798:	4282      	cmp	r2, r0
    a79a:	d003      	beq.n	a7a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    a79c:	6861      	ldr	r1, [r4, #4]
    a79e:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    a7a2:	bd38      	pop	{r3, r4, r5, pc}
    a7a4:	6860      	ldr	r0, [r4, #4]
    a7a6:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    a7aa:	bd38      	pop	{r3, r4, r5, pc}
    a7ac:	20000104 	.word	0x20000104
    a7b0:	b510      	push	{r4, lr}
    a7b2:	4c0c      	ldr	r4, [pc, #48]	; (a7e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xccc>)
    a7b4:	6861      	ldr	r1, [r4, #4]
    a7b6:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    a7ba:	2813      	cmp	r0, #19
    a7bc:	d001      	beq.n	a7c2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcaa>
    a7be:	2002      	movs	r0, #2
    a7c0:	bd10      	pop	{r4, pc}
    a7c2:	f201 117d 	addw	r1, r1, #381	; 0x17d
    a7c6:	68e0      	ldr	r0, [r4, #12]
    a7c8:	f004 faf4 	bl	edb4 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
    a7cc:	6861      	ldr	r1, [r4, #4]
    a7ce:	68e0      	ldr	r0, [r4, #12]
    a7d0:	31f4      	adds	r1, #244	; 0xf4
    a7d2:	f004 faec 	bl	edae <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
    a7d6:	6861      	ldr	r1, [r4, #4]
    a7d8:	2016      	movs	r0, #22
    a7da:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a7de:	2000      	movs	r0, #0
    a7e0:	bd10      	pop	{r4, pc}
    a7e2:	0000      	.short	0x0000
    a7e4:	20000104 	.word	0x20000104
    a7e8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a7ea:	4c1d      	ldr	r4, [pc, #116]	; (a860 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd48>)
    a7ec:	2300      	movs	r3, #0
    a7ee:	2107      	movs	r1, #7
    a7f0:	6860      	ldr	r0, [r4, #4]
    a7f2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a7f6:	3078      	adds	r0, #120	; 0x78
    a7f8:	f004 f8c8 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7fc:	b370      	cbz	r0, a85c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd44>
    a7fe:	4669      	mov	r1, sp
    a800:	68e0      	ldr	r0, [r4, #12]
    a802:	f004 fadc 	bl	edbe <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a806:	f001 fbdd 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a80a:	f644 112f 	movw	r1, #18735	; 0x492f
    a80e:	4008      	ands	r0, r1
    a810:	f89d 2000 	ldrb.w	r2, [sp]
    a814:	6861      	ldr	r1, [r4, #4]
    a816:	4002      	ands	r2, r0
    a818:	2500      	movs	r5, #0
    a81a:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    a81e:	f89d 2001 	ldrb.w	r2, [sp, #1]
    a822:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    a826:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
    a82a:	f881 50b8 	strb.w	r5, [r1, #184]	; 0xb8
    a82e:	f881 5159 	strb.w	r5, [r1, #345]	; 0x159
    a832:	8808      	ldrh	r0, [r1, #0]
    a834:	f8a1 01bc 	strh.w	r0, [r1, #444]	; 0x1bc
    a838:	f881 51ba 	strb.w	r5, [r1, #442]	; 0x1ba
    a83c:	9a00      	ldr	r2, [sp, #0]
    a83e:	f8c1 21be 	str.w	r2, [r1, #446]	; 0x1be
    a842:	9a01      	ldr	r2, [sp, #4]
    a844:	f8c1 21c2 	str.w	r2, [r1, #450]	; 0x1c2
    a848:	2001      	movs	r0, #1
    a84a:	f881 01b8 	strb.w	r0, [r1, #440]	; 0x1b8
    a84e:	f000 fe97 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a852:	6860      	ldr	r0, [r4, #4]
    a854:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a858:	2000      	movs	r0, #0
    a85a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a85c:	2001      	movs	r0, #1
    a85e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a860:	20000104 	.word	0x20000104
    a864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a868:	4c19      	ldr	r4, [pc, #100]	; (a8d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb8>)
    a86a:	2600      	movs	r6, #0
    a86c:	2703      	movs	r7, #3
    a86e:	f8d4 c004 	ldr.w	ip, [r4, #4]
    a872:	2501      	movs	r5, #1
    a874:	b1a0      	cbz	r0, a8a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd88>
    a876:	68e0      	ldr	r0, [r4, #12]
    a878:	78c0      	ldrb	r0, [r0, #3]
    a87a:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    a87e:	fa05 f000 	lsl.w	r0, r5, r0
    a882:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    a886:	b130      	cbz	r0, a896 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7e>
    a888:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    a88c:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    a890:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    a894:	e017      	b.n	a8c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdae>
    a896:	f240 5143 	movw	r1, #1347	; 0x543
    a89a:	2036      	movs	r0, #54	; 0x36
    a89c:	f7fa fa3c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8a0:	2300      	movs	r3, #0
    a8a2:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    a8a6:	4619      	mov	r1, r3
    a8a8:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    a8ac:	f004 f86e 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8b0:	b160      	cbz	r0, a8cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb4>
    a8b2:	68e0      	ldr	r0, [r4, #12]
    a8b4:	78c1      	ldrb	r1, [r0, #3]
    a8b6:	6860      	ldr	r0, [r4, #4]
    a8b8:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    a8bc:	f800 7f86 	strb.w	r7, [r0, #134]!
    a8c0:	8686      	strh	r6, [r0, #52]	; 0x34
    a8c2:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    a8c6:	2000      	movs	r0, #0
    a8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a8cc:	2001      	movs	r0, #1
    a8ce:	e7fb      	b.n	a8c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb0>
    a8d0:	20000104 	.word	0x20000104
    a8d4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a8d8:	4c30      	ldr	r4, [pc, #192]	; (a99c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe84>)
    a8da:	2300      	movs	r3, #0
    a8dc:	4619      	mov	r1, r3
    a8de:	6860      	ldr	r0, [r4, #4]
    a8e0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a8e4:	3078      	adds	r0, #120	; 0x78
    a8e6:	f004 f851 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8ea:	b308      	cbz	r0, a930 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe18>
    a8ec:	68e0      	ldr	r0, [r4, #12]
    a8ee:	f004 fa7b 	bl	ede8 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a8f2:	b300      	cbz	r0, a936 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    a8f4:	68e0      	ldr	r0, [r4, #12]
    a8f6:	f004 fa6d 	bl	edd4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a8fa:	4607      	mov	r7, r0
    a8fc:	68e0      	ldr	r0, [r4, #12]
    a8fe:	f004 fa6d 	bl	eddc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a902:	4606      	mov	r6, r0
    a904:	68e0      	ldr	r0, [r4, #12]
    a906:	f004 fa63 	bl	edd0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a90a:	4605      	mov	r5, r0
    a90c:	68e0      	ldr	r0, [r4, #12]
    a90e:	f004 fa63 	bl	edd8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a912:	4601      	mov	r1, r0
    a914:	9700      	str	r7, [sp, #0]
    a916:	6860      	ldr	r0, [r4, #4]
    a918:	4633      	mov	r3, r6
    a91a:	462a      	mov	r2, r5
    a91c:	302c      	adds	r0, #44	; 0x2c
    a91e:	f004 fc86 	bl	f22e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a922:	6861      	ldr	r1, [r4, #4]
    a924:	2501      	movs	r5, #1
    a926:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    a92a:	281c      	cmp	r0, #28
    a92c:	d008      	beq.n	a940 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    a92e:	e009      	b.n	a944 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2c>
    a930:	2001      	movs	r0, #1
    a932:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a936:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a93a:	2000      	movs	r0, #0
    a93c:	f7ff bf92 	b.w	a864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    a940:	f881 5060 	strb.w	r5, [r1, #96]	; 0x60
    a944:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    a948:	2801      	cmp	r0, #1
    a94a:	d011      	beq.n	a970 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    a94c:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
    a950:	f88d 0004 	strb.w	r0, [sp, #4]
    a954:	9801      	ldr	r0, [sp, #4]
    a956:	9001      	str	r0, [sp, #4]
    a958:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a95c:	b940      	cbnz	r0, a970 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    a95e:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
    a962:	f88d 0000 	strb.w	r0, [sp]
    a966:	9800      	ldr	r0, [sp, #0]
    a968:	9000      	str	r0, [sp, #0]
    a96a:	f89d 0000 	ldrb.w	r0, [sp]
    a96e:	b118      	cbz	r0, a978 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe60>
    a970:	201e      	movs	r0, #30
    a972:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a976:	e00a      	b.n	a98e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe76>
    a978:	201d      	movs	r0, #29
    a97a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a97e:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    a982:	f831 0b2c 	ldrh.w	r0, [r1], #44
    a986:	f004 fc59 	bl	f23c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a98a:	f000 fdf9 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a98e:	6860      	ldr	r0, [r4, #4]
    a990:	2100      	movs	r1, #0
    a992:	f820 1fba 	strh.w	r1, [r0, #186]!
    a996:	7085      	strb	r5, [r0, #2]
    a998:	4608      	mov	r0, r1
    a99a:	e7ca      	b.n	a932 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1a>
    a99c:	20000104 	.word	0x20000104
    a9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9a2:	4c1a      	ldr	r4, [pc, #104]	; (aa0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xef4>)
    a9a4:	2300      	movs	r3, #0
    a9a6:	210a      	movs	r1, #10
    a9a8:	6860      	ldr	r0, [r4, #4]
    a9aa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a9ae:	3078      	adds	r0, #120	; 0x78
    a9b0:	f003 ffec 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9b4:	b338      	cbz	r0, aa06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeee>
    a9b6:	68e0      	ldr	r0, [r4, #12]
    a9b8:	f004 fa16 	bl	ede8 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a9bc:	b1c8      	cbz	r0, a9f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeda>
    a9be:	68e0      	ldr	r0, [r4, #12]
    a9c0:	f004 fa08 	bl	edd4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a9c4:	4607      	mov	r7, r0
    a9c6:	68e0      	ldr	r0, [r4, #12]
    a9c8:	f004 fa08 	bl	eddc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a9cc:	4606      	mov	r6, r0
    a9ce:	68e0      	ldr	r0, [r4, #12]
    a9d0:	f004 f9fe 	bl	edd0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a9d4:	4605      	mov	r5, r0
    a9d6:	68e0      	ldr	r0, [r4, #12]
    a9d8:	f004 f9fe 	bl	edd8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a9dc:	4601      	mov	r1, r0
    a9de:	9700      	str	r7, [sp, #0]
    a9e0:	6860      	ldr	r0, [r4, #4]
    a9e2:	4633      	mov	r3, r6
    a9e4:	462a      	mov	r2, r5
    a9e6:	302c      	adds	r0, #44	; 0x2c
    a9e8:	f004 fc21 	bl	f22e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a9ec:	6860      	ldr	r0, [r4, #4]
    a9ee:	f004 fb90 	bl	f112 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a9f2:	6861      	ldr	r1, [r4, #4]
    a9f4:	2000      	movs	r0, #0
    a9f6:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    a9fa:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a9fe:	f7ff fabf 	bl	9f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    aa02:	2000      	movs	r0, #0
    aa04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa06:	2001      	movs	r0, #1
    aa08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa0a:	0000      	.short	0x0000
    aa0c:	20000104 	.word	0x20000104
    aa10:	b510      	push	{r4, lr}
    aa12:	4c0b      	ldr	r4, [pc, #44]	; (aa40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf28>)
    aa14:	2300      	movs	r3, #0
    aa16:	4619      	mov	r1, r3
    aa18:	6860      	ldr	r0, [r4, #4]
    aa1a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    aa1e:	3078      	adds	r0, #120	; 0x78
    aa20:	f003 ffb4 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa24:	b150      	cbz	r0, aa3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf24>
    aa26:	6860      	ldr	r0, [r4, #4]
    aa28:	2100      	movs	r1, #0
    aa2a:	f820 1fba 	strh.w	r1, [r0, #186]!
    aa2e:	2101      	movs	r1, #1
    aa30:	7081      	strb	r1, [r0, #2]
    aa32:	2102      	movs	r1, #2
    aa34:	f800 1c34 	strb.w	r1, [r0, #-52]
    aa38:	2000      	movs	r0, #0
    aa3a:	bd10      	pop	{r4, pc}
    aa3c:	2001      	movs	r0, #1
    aa3e:	bd10      	pop	{r4, pc}
    aa40:	20000104 	.word	0x20000104
    aa44:	b510      	push	{r4, lr}
    aa46:	4c09      	ldr	r4, [pc, #36]	; (aa6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf54>)
    aa48:	2300      	movs	r3, #0
    aa4a:	2109      	movs	r1, #9
    aa4c:	6860      	ldr	r0, [r4, #4]
    aa4e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aa52:	3078      	adds	r0, #120	; 0x78
    aa54:	f003 ff9a 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa58:	2800      	cmp	r0, #0
    aa5a:	d006      	beq.n	aa6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf52>
    aa5c:	6861      	ldr	r1, [r4, #4]
    aa5e:	2000      	movs	r0, #0
    aa60:	f801 0fac 	strb.w	r0, [r1, #172]!
    aa64:	7308      	strb	r0, [r1, #12]
    aa66:	f801 0c27 	strb.w	r0, [r1, #-39]
    aa6a:	bd10      	pop	{r4, pc}
    aa6c:	20000104 	.word	0x20000104
    aa70:	4807      	ldr	r0, [pc, #28]	; (aa90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf78>)
    aa72:	6840      	ldr	r0, [r0, #4]
    aa74:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aa78:	290f      	cmp	r1, #15
    aa7a:	d001      	beq.n	aa80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf68>
    aa7c:	2002      	movs	r0, #2
    aa7e:	4770      	bx	lr
    aa80:	2100      	movs	r1, #0
    aa82:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    aa86:	2112      	movs	r1, #18
    aa88:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    aa8c:	2000      	movs	r0, #0
    aa8e:	4770      	bx	lr
    aa90:	20000104 	.word	0x20000104
    aa94:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa96:	4c42      	ldr	r4, [pc, #264]	; (aba0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1088>)
    aa98:	2600      	movs	r6, #0
    aa9a:	b087      	sub	sp, #28
    aa9c:	6860      	ldr	r0, [r4, #4]
    aa9e:	4633      	mov	r3, r6
    aaa0:	4631      	mov	r1, r6
    aaa2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    aaa6:	3078      	adds	r0, #120	; 0x78
    aaa8:	f003 ff70 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aaac:	b180      	cbz	r0, aad0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfb8>
    aaae:	6860      	ldr	r0, [r4, #4]
    aab0:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    aab4:	2823      	cmp	r0, #35	; 0x23
    aab6:	d00e      	beq.n	aad6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    aab8:	2824      	cmp	r0, #36	; 0x24
    aaba:	d00c      	beq.n	aad6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    aabc:	4668      	mov	r0, sp
    aabe:	f7fa ff25 	bl	590c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    aac2:	b150      	cbz	r0, aada <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc2>
    aac4:	9800      	ldr	r0, [sp, #0]
    aac6:	a901      	add	r1, sp, #4
    aac8:	78c0      	ldrb	r0, [r0, #3]
    aaca:	f88d 0004 	strb.w	r0, [sp, #4]
    aace:	e005      	b.n	aadc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc4>
    aad0:	2001      	movs	r0, #1
    aad2:	b007      	add	sp, #28
    aad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aad6:	2020      	movs	r0, #32
    aad8:	e7fb      	b.n	aad2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    aada:	2100      	movs	r1, #0
    aadc:	6860      	ldr	r0, [r4, #4]
    aade:	ab04      	add	r3, sp, #16
    aae0:	2216      	movs	r2, #22
    aae2:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    aae6:	f004 f80d 	bl	eb04 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    aaea:	2700      	movs	r7, #0
    aaec:	2501      	movs	r5, #1
    aaee:	b178      	cbz	r0, ab10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xff8>
    aaf0:	6860      	ldr	r0, [r4, #4]
    aaf2:	f89d 1010 	ldrb.w	r1, [sp, #16]
    aaf6:	2216      	movs	r2, #22
    aaf8:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
    aafc:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    ab00:	2119      	movs	r1, #25
    ab02:	f800 1f86 	strb.w	r1, [r0, #134]!
    ab06:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    ab0a:	8687      	strh	r7, [r0, #52]	; 0x34
    ab0c:	2000      	movs	r0, #0
    ab0e:	e7e0      	b.n	aad2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    ab10:	68e0      	ldr	r0, [r4, #12]
    ab12:	f004 f985 	bl	ee20 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    ab16:	b1a8      	cbz	r0, ab44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x102c>
    ab18:	68e1      	ldr	r1, [r4, #12]
    ab1a:	7908      	ldrb	r0, [r1, #4]
    ab1c:	f000 0207 	and.w	r2, r0, #7
    ab20:	6860      	ldr	r0, [r4, #4]
    ab22:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    ab26:	7949      	ldrb	r1, [r1, #5]
    ab28:	f001 0107 	and.w	r1, r1, #7
    ab2c:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    ab30:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
    ab34:	f88d 3018 	strb.w	r3, [sp, #24]
    ab38:	9b06      	ldr	r3, [sp, #24]
    ab3a:	9301      	str	r3, [sp, #4]
    ab3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ab40:	bb23      	cbnz	r3, ab8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    ab42:	e004      	b.n	ab4e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1036>
    ab44:	2000      	movs	r0, #0
    ab46:	f7ff fe8d 	bl	a864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    ab4a:	4606      	mov	r6, r0
    ab4c:	e025      	b.n	ab9a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1082>
    ab4e:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    ab52:	2b01      	cmp	r3, #1
    ab54:	d01a      	beq.n	ab8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    ab56:	f890 c06b 	ldrb.w	ip, [r0, #107]	; 0x6b
    ab5a:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    ab5e:	4594      	cmp	ip, r2
    ab60:	d106      	bne.n	ab70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    ab62:	781a      	ldrb	r2, [r3, #0]
    ab64:	428a      	cmp	r2, r1
    ab66:	d103      	bne.n	ab70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    ab68:	2102      	movs	r1, #2
    ab6a:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
    ab6e:	e00d      	b.n	ab8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    ab70:	f500 71d6 	add.w	r1, r0, #428	; 0x1ac
    ab74:	8802      	ldrh	r2, [r0, #0]
    ab76:	f821 2902 	strh.w	r2, [r1], #-2
    ab7a:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    ab7e:	710a      	strb	r2, [r1, #4]
    ab80:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    ab84:	7148      	strb	r0, [r1, #5]
    ab86:	700d      	strb	r5, [r1, #0]
    ab88:	f000 fcfa 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ab8c:	6860      	ldr	r0, [r4, #4]
    ab8e:	2121      	movs	r1, #33	; 0x21
    ab90:	f800 1f86 	strb.w	r1, [r0, #134]!
    ab94:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    ab98:	8687      	strh	r7, [r0, #52]	; 0x34
    ab9a:	4630      	mov	r0, r6
    ab9c:	e799      	b.n	aad2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    ab9e:	0000      	.short	0x0000
    aba0:	20000104 	.word	0x20000104
    aba4:	b570      	push	{r4, r5, r6, lr}
    aba6:	4c18      	ldr	r4, [pc, #96]	; (ac08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10f0>)
    aba8:	6860      	ldr	r0, [r4, #4]
    abaa:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    abae:	281f      	cmp	r0, #31
    abb0:	d001      	beq.n	abb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x109e>
    abb2:	2001      	movs	r0, #1
    abb4:	bd70      	pop	{r4, r5, r6, pc}
    abb6:	68e0      	ldr	r0, [r4, #12]
    abb8:	f004 f93c 	bl	ee34 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    abbc:	b1d8      	cbz	r0, abf6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10de>
    abbe:	68e0      	ldr	r0, [r4, #12]
    abc0:	2201      	movs	r2, #1
    abc2:	7901      	ldrb	r1, [r0, #4]
    abc4:	7940      	ldrb	r0, [r0, #5]
    abc6:	f001 0107 	and.w	r1, r1, #7
    abca:	f361 0507 	bfi	r5, r1, #0, #8
    abce:	4629      	mov	r1, r5
    abd0:	f000 0007 	and.w	r0, r0, #7
    abd4:	f360 210f 	bfi	r1, r0, #8, #8
    abd8:	6860      	ldr	r0, [r4, #4]
    abda:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
    abde:	2200      	movs	r2, #0
    abe0:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
    abe4:	2223      	movs	r2, #35	; 0x23
    abe6:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    abea:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    abee:	f7ff fdb9 	bl	a764 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    abf2:	2000      	movs	r0, #0
    abf4:	bd70      	pop	{r4, r5, r6, pc}
    abf6:	2001      	movs	r0, #1
    abf8:	f7ff fe34 	bl	a864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    abfc:	4604      	mov	r4, r0
    abfe:	201e      	movs	r0, #30
    ac00:	f7ff fd6a 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    ac04:	4620      	mov	r0, r4
    ac06:	bd70      	pop	{r4, r5, r6, pc}
    ac08:	20000104 	.word	0x20000104
    ac0c:	b570      	push	{r4, r5, r6, lr}
    ac0e:	4d07      	ldr	r5, [pc, #28]	; (ac2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1114>)
    ac10:	2400      	movs	r4, #0
    ac12:	68e8      	ldr	r0, [r5, #12]
    ac14:	f004 f918 	bl	ee48 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    ac18:	2803      	cmp	r0, #3
    ac1a:	d105      	bne.n	ac28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1110>
    ac1c:	68e8      	ldr	r0, [r5, #12]
    ac1e:	f004 f915 	bl	ee4c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    ac22:	f000 f805 	bl	ac30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    ac26:	4604      	mov	r4, r0
    ac28:	4620      	mov	r0, r4
    ac2a:	bd70      	pop	{r4, r5, r6, pc}
    ac2c:	20000104 	.word	0x20000104
    ac30:	b570      	push	{r4, r5, r6, lr}
    ac32:	4d18      	ldr	r5, [pc, #96]	; (ac94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x117c>)
    ac34:	6869      	ldr	r1, [r5, #4]
    ac36:	f891 2085 	ldrb.w	r2, [r1, #133]	; 0x85
    ac3a:	2a16      	cmp	r2, #22
    ac3c:	d001      	beq.n	ac42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112a>
    ac3e:	2a13      	cmp	r2, #19
    ac40:	d102      	bne.n	ac48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1130>
    ac42:	f891 20be 	ldrb.w	r2, [r1, #190]	; 0xbe
    ac46:	b10a      	cbz	r2, ac4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1134>
    ac48:	2002      	movs	r0, #2
    ac4a:	bd70      	pop	{r4, r5, r6, pc}
    ac4c:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
    ac50:	2400      	movs	r4, #0
    ac52:	f881 40bd 	strb.w	r4, [r1, #189]	; 0xbd
    ac56:	f881 40b8 	strb.w	r4, [r1, #184]	; 0xb8
    ac5a:	f891 21d2 	ldrb.w	r2, [r1, #466]	; 0x1d2
    ac5e:	b122      	cbz	r2, ac6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1152>
    ac60:	f240 21eb 	movw	r1, #747	; 0x2eb
    ac64:	2036      	movs	r0, #54	; 0x36
    ac66:	f7fa f857 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac6a:	880a      	ldrh	r2, [r1, #0]
    ac6c:	f8a1 21d6 	strh.w	r2, [r1, #470]	; 0x1d6
    ac70:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    ac74:	f881 41d8 	strb.w	r4, [r1, #472]	; 0x1d8
    ac78:	200d      	movs	r0, #13
    ac7a:	f881 01d2 	strb.w	r0, [r1, #466]	; 0x1d2
    ac7e:	f881 415a 	strb.w	r4, [r1, #346]	; 0x15a
    ac82:	f000 fb9b 	bl	b3bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    ac86:	f000 fc7b 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ac8a:	6868      	ldr	r0, [r5, #4]
    ac8c:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    ac90:	2000      	movs	r0, #0
    ac92:	bd70      	pop	{r4, r5, r6, pc}
    ac94:	20000104 	.word	0x20000104
    ac98:	4802      	ldr	r0, [pc, #8]	; (aca4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x118c>)
    ac9a:	68c0      	ldr	r0, [r0, #12]
    ac9c:	7900      	ldrb	r0, [r0, #4]
    ac9e:	f7ff bfc7 	b.w	ac30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    aca2:	0000      	.short	0x0000
    aca4:	20000104 	.word	0x20000104
    aca8:	b510      	push	{r4, lr}
    acaa:	4c0e      	ldr	r4, [pc, #56]	; (ace4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11cc>)
    acac:	6860      	ldr	r0, [r4, #4]
    acae:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    acb2:	2916      	cmp	r1, #22
    acb4:	d001      	beq.n	acba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11a2>
    acb6:	2002      	movs	r0, #2
    acb8:	bd10      	pop	{r4, pc}
    acba:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    acbe:	f200 1175 	addw	r1, r0, #373	; 0x175
    acc2:	2200      	movs	r2, #0
    acc4:	f200 1065 	addw	r0, r0, #357	; 0x165
    acc8:	f003 fde2 	bl	e890 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    accc:	6860      	ldr	r0, [r4, #4]
    acce:	2100      	movs	r1, #0
    acd0:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    acd4:	2101      	movs	r1, #1
    acd6:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    acda:	2118      	movs	r1, #24
    acdc:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ace0:	2000      	movs	r0, #0
    ace2:	bd10      	pop	{r4, pc}
    ace4:	20000104 	.word	0x20000104
    ace8:	b570      	push	{r4, r5, r6, lr}
    acea:	4d1b      	ldr	r5, [pc, #108]	; (ad58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1240>)
    acec:	6868      	ldr	r0, [r5, #4]
    acee:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    acf2:	291a      	cmp	r1, #26
    acf4:	d001      	beq.n	acfa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e2>
    acf6:	2002      	movs	r0, #2
    acf8:	bd70      	pop	{r4, r5, r6, pc}
    acfa:	2400      	movs	r4, #0
    acfc:	f880 40bd 	strb.w	r4, [r0, #189]	; 0xbd
    ad00:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    ad04:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
    ad08:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
    ad0c:	b121      	cbz	r1, ad18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1200>
    ad0e:	f240 3113 	movw	r1, #787	; 0x313
    ad12:	2036      	movs	r0, #54	; 0x36
    ad14:	f7fa f800 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad18:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    ad1c:	b141      	cbz	r1, ad30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1218>
    ad1e:	f880 40be 	strb.w	r4, [r0, #190]	; 0xbe
    ad22:	8801      	ldrh	r1, [r0, #0]
    ad24:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    ad28:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    ad2c:	210e      	movs	r1, #14
    ad2e:	e008      	b.n	ad42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x122a>
    ad30:	8801      	ldrh	r1, [r0, #0]
    ad32:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    ad36:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    ad3a:	2101      	movs	r1, #1
    ad3c:	f880 11d8 	strb.w	r1, [r0, #472]	; 0x1d8
    ad40:	210d      	movs	r1, #13
    ad42:	f880 11d2 	strb.w	r1, [r0, #466]	; 0x1d2
    ad46:	f000 fb39 	bl	b3bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    ad4a:	f000 fc19 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ad4e:	6868      	ldr	r0, [r5, #4]
    ad50:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    ad54:	2000      	movs	r0, #0
    ad56:	bd70      	pop	{r4, r5, r6, pc}
    ad58:	20000104 	.word	0x20000104
    ad5c:	b510      	push	{r4, lr}
    ad5e:	4c0d      	ldr	r4, [pc, #52]	; (ad94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x127c>)
    ad60:	2300      	movs	r3, #0
    ad62:	2101      	movs	r1, #1
    ad64:	6860      	ldr	r0, [r4, #4]
    ad66:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    ad6a:	3078      	adds	r0, #120	; 0x78
    ad6c:	f003 fe0e 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad70:	b108      	cbz	r0, ad76 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125e>
    ad72:	2000      	movs	r0, #0
    ad74:	bd10      	pop	{r4, pc}
    ad76:	68e0      	ldr	r0, [r4, #12]
    ad78:	f004 f832 	bl	ede0 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    ad7c:	6861      	ldr	r1, [r4, #4]
    ad7e:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    ad82:	2007      	movs	r0, #7
    ad84:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    ad88:	2000      	movs	r0, #0
    ad8a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    ad8e:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    ad92:	e7ee      	b.n	ad72 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125a>
    ad94:	20000104 	.word	0x20000104
    ad98:	b570      	push	{r4, r5, r6, lr}
    ad9a:	4c25      	ldr	r4, [pc, #148]	; (ae30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1318>)
    ad9c:	2600      	movs	r6, #0
    ad9e:	2109      	movs	r1, #9
    ada0:	6860      	ldr	r0, [r4, #4]
    ada2:	4633      	mov	r3, r6
    ada4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ada8:	3078      	adds	r0, #120	; 0x78
    adaa:	f003 fdef 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    adae:	2500      	movs	r5, #0
    adb0:	b118      	cbz	r0, adba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12a2>
    adb2:	68e0      	ldr	r0, [r4, #12]
    adb4:	7900      	ldrb	r0, [r0, #4]
    adb6:	2812      	cmp	r0, #18
    adb8:	d011      	beq.n	adde <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12c6>
    adba:	6860      	ldr	r0, [r4, #4]
    adbc:	210a      	movs	r1, #10
    adbe:	2300      	movs	r3, #0
    adc0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    adc4:	3078      	adds	r0, #120	; 0x78
    adc6:	f003 fde1 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    adca:	b118      	cbz	r0, add4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12bc>
    adcc:	68e0      	ldr	r0, [r4, #12]
    adce:	7900      	ldrb	r0, [r0, #4]
    add0:	2814      	cmp	r0, #20
    add2:	d008      	beq.n	ade6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ce>
    add4:	68e0      	ldr	r0, [r4, #12]
    add6:	7900      	ldrb	r0, [r0, #4]
    add8:	2816      	cmp	r0, #22
    adda:	d012      	beq.n	ae02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ea>
    addc:	e026      	b.n	ae2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    adde:	f7ff fe31 	bl	aa44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf2c>
    ade2:	4606      	mov	r6, r0
    ade4:	e022      	b.n	ae2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    ade6:	6860      	ldr	r0, [r4, #4]
    ade8:	2105      	movs	r1, #5
    adea:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    adee:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    adf2:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    adf6:	30c6      	adds	r0, #198	; 0xc6
    adf8:	f004 fc6f 	bl	f6da <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    adfc:	f7ff f8c0 	bl	9f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    ae00:	e014      	b.n	ae2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    ae02:	6860      	ldr	r0, [r4, #4]
    ae04:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ae08:	291f      	cmp	r1, #31
    ae0a:	d10f      	bne.n	ae2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    ae0c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    ae10:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    ae14:	2108      	movs	r1, #8
    ae16:	30c6      	adds	r0, #198	; 0xc6
    ae18:	f004 fc5f 	bl	f6da <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    ae1c:	6860      	ldr	r0, [r4, #4]
    ae1e:	210b      	movs	r1, #11
    ae20:	30c6      	adds	r0, #198	; 0xc6
    ae22:	f004 fc5a 	bl	f6da <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    ae26:	201a      	movs	r0, #26
    ae28:	f7ff fc56 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    ae2c:	4630      	mov	r0, r6
    ae2e:	bd70      	pop	{r4, r5, r6, pc}
    ae30:	20000104 	.word	0x20000104
    ae34:	b570      	push	{r4, r5, r6, lr}
    ae36:	4c32      	ldr	r4, [pc, #200]	; (af00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e8>)
    ae38:	2300      	movs	r3, #0
    ae3a:	4619      	mov	r1, r3
    ae3c:	6860      	ldr	r0, [r4, #4]
    ae3e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    ae42:	3078      	adds	r0, #120	; 0x78
    ae44:	f003 fda2 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae48:	b940      	cbnz	r0, ae5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1344>
    ae4a:	6860      	ldr	r0, [r4, #4]
    ae4c:	2300      	movs	r3, #0
    ae4e:	2108      	movs	r1, #8
    ae50:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae54:	3078      	adds	r0, #120	; 0x78
    ae56:	f003 fd99 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae5a:	b1f8      	cbz	r0, ae9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1384>
    ae5c:	6860      	ldr	r0, [r4, #4]
    ae5e:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    ae62:	0780      	lsls	r0, r0, #30
    ae64:	d412      	bmi.n	ae8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1374>
    ae66:	68e0      	ldr	r0, [r4, #12]
    ae68:	f003 ffbc 	bl	ede4 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    ae6c:	6861      	ldr	r1, [r4, #4]
    ae6e:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
    ae72:	68e0      	ldr	r0, [r4, #12]
    ae74:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    ae78:	f8a1 20c2 	strh.w	r2, [r1, #194]	; 0xc2
    ae7c:	8840      	ldrh	r0, [r0, #2]
    ae7e:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
    ae82:	f811 0fc0 	ldrb.w	r0, [r1, #192]!
    ae86:	f040 0002 	orr.w	r0, r0, #2
    ae8a:	7008      	strb	r0, [r1, #0]
    ae8c:	6860      	ldr	r0, [r4, #4]
    ae8e:	f04f 0500 	mov.w	r5, #0
    ae92:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    ae96:	07c9      	lsls	r1, r1, #31
    ae98:	d002      	beq.n	aea0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1388>
    ae9a:	e010      	b.n	aebe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13a6>
    ae9c:	2001      	movs	r0, #1
    ae9e:	bd70      	pop	{r4, r5, r6, pc}
    aea0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    aea4:	2300      	movs	r3, #0
    aea6:	4619      	mov	r1, r3
    aea8:	3078      	adds	r0, #120	; 0x78
    aeaa:	f003 fd6f 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aeae:	b160      	cbz	r0, aeca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13b2>
    aeb0:	6860      	ldr	r0, [r4, #4]
    aeb2:	2101      	movs	r1, #1
    aeb4:	f800 1f86 	strb.w	r1, [r0, #134]!
    aeb8:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    aebc:	8685      	strh	r5, [r0, #52]	; 0x34
    aebe:	6860      	ldr	r0, [r4, #4]
    aec0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aec4:	2901      	cmp	r1, #1
    aec6:	d005      	beq.n	aed4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13bc>
    aec8:	e00a      	b.n	aee0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13c8>
    aeca:	f240 314e 	movw	r1, #846	; 0x34e
    aece:	2036      	movs	r0, #54	; 0x36
    aed0:	f7f9 ff22 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aed4:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    aed8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    aedc:	f000 fb50 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aee0:	6860      	ldr	r0, [r4, #4]
    aee2:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    aee6:	b149      	cbz	r1, aefc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    aee8:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
    aeec:	f000 fb48 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aef0:	6860      	ldr	r0, [r4, #4]
    aef2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aef6:	b909      	cbnz	r1, aefc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    aef8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    aefc:	2000      	movs	r0, #0
    aefe:	bd70      	pop	{r4, r5, r6, pc}
    af00:	20000104 	.word	0x20000104
    af04:	b510      	push	{r4, lr}
    af06:	4c0a      	ldr	r4, [pc, #40]	; (af30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1418>)
    af08:	2300      	movs	r3, #0
    af0a:	4619      	mov	r1, r3
    af0c:	6860      	ldr	r0, [r4, #4]
    af0e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af12:	3078      	adds	r0, #120	; 0x78
    af14:	f003 fd3a 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af18:	b120      	cbz	r0, af24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140c>
    af1a:	6861      	ldr	r1, [r4, #4]
    af1c:	200c      	movs	r0, #12
    af1e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    af22:	bd10      	pop	{r4, pc}
    af24:	f240 51fa 	movw	r1, #1530	; 0x5fa
    af28:	2036      	movs	r0, #54	; 0x36
    af2a:	f7f9 fef5 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af2e:	0000      	.short	0x0000
    af30:	20000104 	.word	0x20000104
    af34:	b510      	push	{r4, lr}
    af36:	4c0a      	ldr	r4, [pc, #40]	; (af60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1448>)
    af38:	2300      	movs	r3, #0
    af3a:	4619      	mov	r1, r3
    af3c:	6860      	ldr	r0, [r4, #4]
    af3e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af42:	3078      	adds	r0, #120	; 0x78
    af44:	f003 fd22 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af48:	b120      	cbz	r0, af54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x143c>
    af4a:	6861      	ldr	r1, [r4, #4]
    af4c:	200d      	movs	r0, #13
    af4e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    af52:	bd10      	pop	{r4, pc}
    af54:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    af58:	2036      	movs	r0, #54	; 0x36
    af5a:	f7f9 fedd 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af5e:	0000      	.short	0x0000
    af60:	20000104 	.word	0x20000104
    af64:	b510      	push	{r4, lr}
    af66:	4c0d      	ldr	r4, [pc, #52]	; (af9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1484>)
    af68:	2300      	movs	r3, #0
    af6a:	4619      	mov	r1, r3
    af6c:	6860      	ldr	r0, [r4, #4]
    af6e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af72:	3078      	adds	r0, #120	; 0x78
    af74:	f003 fd0a 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af78:	b918      	cbnz	r0, af82 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x146a>
    af7a:	6860      	ldr	r0, [r4, #4]
    af7c:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    af80:	b138      	cbz	r0, af92 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x147a>
    af82:	6860      	ldr	r0, [r4, #4]
    af84:	2101      	movs	r1, #1
    af86:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    af8a:	2113      	movs	r1, #19
    af8c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    af90:	bd10      	pop	{r4, pc}
    af92:	f240 6115 	movw	r1, #1557	; 0x615
    af96:	2036      	movs	r0, #54	; 0x36
    af98:	f7f9 febe 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af9c:	20000104 	.word	0x20000104
    afa0:	b510      	push	{r4, lr}
    afa2:	4c0a      	ldr	r4, [pc, #40]	; (afcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14b4>)
    afa4:	2300      	movs	r3, #0
    afa6:	4619      	mov	r1, r3
    afa8:	6860      	ldr	r0, [r4, #4]
    afaa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    afae:	3078      	adds	r0, #120	; 0x78
    afb0:	f003 fcec 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afb4:	b120      	cbz	r0, afc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a8>
    afb6:	6861      	ldr	r1, [r4, #4]
    afb8:	2004      	movs	r0, #4
    afba:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    afbe:	bd10      	pop	{r4, pc}
    afc0:	f240 51f4 	movw	r1, #1524	; 0x5f4
    afc4:	2036      	movs	r0, #54	; 0x36
    afc6:	f7f9 fea7 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afca:	0000      	.short	0x0000
    afcc:	20000104 	.word	0x20000104
    afd0:	b510      	push	{r4, lr}
    afd2:	4c0a      	ldr	r4, [pc, #40]	; (affc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14e4>)
    afd4:	2300      	movs	r3, #0
    afd6:	4619      	mov	r1, r3
    afd8:	6860      	ldr	r0, [r4, #4]
    afda:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    afde:	3078      	adds	r0, #120	; 0x78
    afe0:	f003 fcd4 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afe4:	b120      	cbz	r0, aff0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14d8>
    afe6:	6861      	ldr	r1, [r4, #4]
    afe8:	201c      	movs	r0, #28
    afea:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    afee:	bd10      	pop	{r4, pc}
    aff0:	f240 614c 	movw	r1, #1612	; 0x64c
    aff4:	2036      	movs	r0, #54	; 0x36
    aff6:	f7f9 fe8f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    affa:	0000      	.short	0x0000
    affc:	20000104 	.word	0x20000104
    b000:	b510      	push	{r4, lr}
    b002:	4c0a      	ldr	r4, [pc, #40]	; (b02c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1514>)
    b004:	2300      	movs	r3, #0
    b006:	4619      	mov	r1, r3
    b008:	6860      	ldr	r0, [r4, #4]
    b00a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b00e:	3078      	adds	r0, #120	; 0x78
    b010:	f003 fcbc 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b014:	b120      	cbz	r0, b020 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1508>
    b016:	6861      	ldr	r1, [r4, #4]
    b018:	2000      	movs	r0, #0
    b01a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    b01e:	bd10      	pop	{r4, pc}
    b020:	f240 6153 	movw	r1, #1619	; 0x653
    b024:	2036      	movs	r0, #54	; 0x36
    b026:	f7f9 fe77 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b02a:	0000      	.short	0x0000
    b02c:	20000104 	.word	0x20000104
    b030:	b510      	push	{r4, lr}
    b032:	4c0a      	ldr	r4, [pc, #40]	; (b05c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1544>)
    b034:	2300      	movs	r3, #0
    b036:	4619      	mov	r1, r3
    b038:	6860      	ldr	r0, [r4, #4]
    b03a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b03e:	3078      	adds	r0, #120	; 0x78
    b040:	f003 fca4 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b044:	b120      	cbz	r0, b050 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1538>
    b046:	6861      	ldr	r1, [r4, #4]
    b048:	2005      	movs	r0, #5
    b04a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b04e:	bd10      	pop	{r4, pc}
    b050:	f240 613f 	movw	r1, #1599	; 0x63f
    b054:	2036      	movs	r0, #54	; 0x36
    b056:	f7f9 fe5f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b05a:	0000      	.short	0x0000
    b05c:	20000104 	.word	0x20000104
    b060:	4902      	ldr	r1, [pc, #8]	; (b06c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1554>)
    b062:	2000      	movs	r0, #0
    b064:	6849      	ldr	r1, [r1, #4]
    b066:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    b06a:	4770      	bx	lr
    b06c:	20000104 	.word	0x20000104
    b070:	b510      	push	{r4, lr}
    b072:	4c0b      	ldr	r4, [pc, #44]	; (b0a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1588>)
    b074:	2300      	movs	r3, #0
    b076:	4619      	mov	r1, r3
    b078:	6860      	ldr	r0, [r4, #4]
    b07a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b07e:	3078      	adds	r0, #120	; 0x78
    b080:	f003 fc84 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b084:	b138      	cbz	r0, b096 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x157e>
    b086:	6860      	ldr	r0, [r4, #4]
    b088:	2101      	movs	r1, #1
    b08a:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    b08e:	210f      	movs	r1, #15
    b090:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b094:	bd10      	pop	{r4, pc}
    b096:	f240 6106 	movw	r1, #1542	; 0x606
    b09a:	2036      	movs	r0, #54	; 0x36
    b09c:	f7f9 fe3c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0a0:	20000104 	.word	0x20000104
    b0a4:	4809      	ldr	r0, [pc, #36]	; (b0cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15b4>)
    b0a6:	b510      	push	{r4, lr}
    b0a8:	6840      	ldr	r0, [r0, #4]
    b0aa:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b0ae:	2912      	cmp	r1, #18
    b0b0:	d004      	beq.n	b0bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15a4>
    b0b2:	f240 610e 	movw	r1, #1550	; 0x60e
    b0b6:	2036      	movs	r0, #54	; 0x36
    b0b8:	f7f9 fe2e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0bc:	2101      	movs	r1, #1
    b0be:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b0c2:	2111      	movs	r1, #17
    b0c4:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b0c8:	bd10      	pop	{r4, pc}
    b0ca:	0000      	.short	0x0000
    b0cc:	20000104 	.word	0x20000104
    b0d0:	b510      	push	{r4, lr}
    b0d2:	4c0a      	ldr	r4, [pc, #40]	; (b0fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15e4>)
    b0d4:	2300      	movs	r3, #0
    b0d6:	4619      	mov	r1, r3
    b0d8:	6860      	ldr	r0, [r4, #4]
    b0da:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b0de:	3078      	adds	r0, #120	; 0x78
    b0e0:	f003 fc54 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b0e4:	b120      	cbz	r0, b0f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15d8>
    b0e6:	6861      	ldr	r1, [r4, #4]
    b0e8:	201f      	movs	r0, #31
    b0ea:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b0ee:	bd10      	pop	{r4, pc}
    b0f0:	f240 615c 	movw	r1, #1628	; 0x65c
    b0f4:	2036      	movs	r0, #54	; 0x36
    b0f6:	f7f9 fe0f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0fa:	0000      	.short	0x0000
    b0fc:	20000104 	.word	0x20000104
    b100:	b570      	push	{r4, r5, r6, lr}
    b102:	4c1d      	ldr	r4, [pc, #116]	; (b178 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1660>)
    b104:	6860      	ldr	r0, [r4, #4]
    b106:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    b10a:	b911      	cbnz	r1, b112 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fa>
    b10c:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    b110:	b179      	cbz	r1, b132 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161a>
    b112:	2100      	movs	r1, #0
    b114:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    b118:	2224      	movs	r2, #36	; 0x24
    b11a:	2500      	movs	r5, #0
    b11c:	2b21      	cmp	r3, #33	; 0x21
    b11e:	d00a      	beq.n	b136 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161e>
    b120:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    b124:	2b23      	cmp	r3, #35	; 0x23
    b126:	d01a      	beq.n	b15e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1646>
    b128:	f44f 61d1 	mov.w	r1, #1672	; 0x688
    b12c:	2036      	movs	r0, #54	; 0x36
    b12e:	f7f9 fdf3 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b132:	2101      	movs	r1, #1
    b134:	e7ee      	b.n	b114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fc>
    b136:	b161      	cbz	r1, b152 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163a>
    b138:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    b13c:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    b140:	2801      	cmp	r0, #1
    b142:	d102      	bne.n	b14a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1632>
    b144:	2000      	movs	r0, #0
    b146:	f7ff fac7 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    b14a:	6860      	ldr	r0, [r4, #4]
    b14c:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    b150:	e001      	b.n	b156 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163e>
    b152:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
    b156:	6860      	ldr	r0, [r4, #4]
    b158:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    b15c:	bd70      	pop	{r4, r5, r6, pc}
    b15e:	b129      	cbz	r1, b16c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1654>
    b160:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    b164:	2000      	movs	r0, #0
    b166:	f7ff fab7 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    b16a:	e001      	b.n	b170 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1658>
    b16c:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    b170:	6860      	ldr	r0, [r4, #4]
    b172:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    b176:	bd70      	pop	{r4, r5, r6, pc}
    b178:	20000104 	.word	0x20000104
    b17c:	4903      	ldr	r1, [pc, #12]	; (b18c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1674>)
    b17e:	2000      	movs	r0, #0
    b180:	6849      	ldr	r1, [r1, #4]
    b182:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    b186:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    b18a:	4770      	bx	lr
    b18c:	20000104 	.word	0x20000104
    b190:	4807      	ldr	r0, [pc, #28]	; (b1b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1698>)
    b192:	b510      	push	{r4, lr}
    b194:	6840      	ldr	r0, [r0, #4]
    b196:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b19a:	2918      	cmp	r1, #24
    b19c:	d004      	beq.n	b1a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1690>
    b19e:	f240 611e 	movw	r1, #1566	; 0x61e
    b1a2:	2036      	movs	r0, #54	; 0x36
    b1a4:	f7f9 fdb8 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1a8:	211a      	movs	r1, #26
    b1aa:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b1ae:	bd10      	pop	{r4, pc}
    b1b0:	20000104 	.word	0x20000104
    b1b4:	b510      	push	{r4, lr}
    b1b6:	4c0a      	ldr	r4, [pc, #40]	; (b1e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c8>)
    b1b8:	2300      	movs	r3, #0
    b1ba:	2101      	movs	r1, #1
    b1bc:	6860      	ldr	r0, [r4, #4]
    b1be:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    b1c2:	3078      	adds	r0, #120	; 0x78
    b1c4:	f003 fbe2 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1c8:	2800      	cmp	r0, #0
    b1ca:	d108      	bne.n	b1de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c6>
    b1cc:	6860      	ldr	r0, [r4, #4]
    b1ce:	2108      	movs	r1, #8
    b1d0:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    b1d4:	2100      	movs	r1, #0
    b1d6:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    b1da:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    b1de:	bd10      	pop	{r4, pc}
    b1e0:	20000104 	.word	0x20000104
    b1e4:	b570      	push	{r4, r5, r6, lr}
    b1e6:	4c0e      	ldr	r4, [pc, #56]	; (b220 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1708>)
    b1e8:	2300      	movs	r3, #0
    b1ea:	4619      	mov	r1, r3
    b1ec:	6860      	ldr	r0, [r4, #4]
    b1ee:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b1f2:	3078      	adds	r0, #120	; 0x78
    b1f4:	f003 fbca 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1f8:	2500      	movs	r5, #0
    b1fa:	b110      	cbz	r0, b202 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16ea>
    b1fc:	6860      	ldr	r0, [r4, #4]
    b1fe:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    b202:	6860      	ldr	r0, [r4, #4]
    b204:	2300      	movs	r3, #0
    b206:	4619      	mov	r1, r3
    b208:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b20c:	3078      	adds	r0, #120	; 0x78
    b20e:	f003 fbbd 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b212:	2800      	cmp	r0, #0
    b214:	d002      	beq.n	b21c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1704>
    b216:	6860      	ldr	r0, [r4, #4]
    b218:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    b21c:	bd70      	pop	{r4, r5, r6, pc}
    b21e:	0000      	.short	0x0000
    b220:	20000104 	.word	0x20000104
    b224:	b570      	push	{r4, r5, r6, lr}
    b226:	4d16      	ldr	r5, [pc, #88]	; (b280 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1768>)
    b228:	f04f 0400 	mov.w	r4, #0
    b22c:	6868      	ldr	r0, [r5, #4]
    b22e:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    b232:	0789      	lsls	r1, r1, #30
    b234:	d411      	bmi.n	b25a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1742>
    b236:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b23a:	2300      	movs	r3, #0
    b23c:	4619      	mov	r1, r3
    b23e:	3078      	adds	r0, #120	; 0x78
    b240:	f003 fba4 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b244:	b120      	cbz	r0, b250 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1738>
    b246:	6869      	ldr	r1, [r5, #4]
    b248:	2001      	movs	r0, #1
    b24a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b24e:	e008      	b.n	b262 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x174a>
    b250:	f240 612b 	movw	r1, #1579	; 0x62b
    b254:	2036      	movs	r0, #54	; 0x36
    b256:	f7f9 fd5f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b25a:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    b25e:	f880 4158 	strb.w	r4, [r0, #344]	; 0x158
    b262:	6868      	ldr	r0, [r5, #4]
    b264:	2300      	movs	r3, #0
    b266:	4619      	mov	r1, r3
    b268:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b26c:	3078      	adds	r0, #120	; 0x78
    b26e:	f003 fb8d 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b272:	2800      	cmp	r0, #0
    b274:	d002      	beq.n	b27c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1764>
    b276:	6868      	ldr	r0, [r5, #4]
    b278:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    b27c:	bd70      	pop	{r4, r5, r6, pc}
    b27e:	0000      	.short	0x0000
    b280:	20000104 	.word	0x20000104
    b284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b286:	4d4c      	ldr	r5, [pc, #304]	; (b3b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a0>)
    b288:	4607      	mov	r7, r0
    b28a:	460e      	mov	r6, r1
    b28c:	6868      	ldr	r0, [r5, #4]
    b28e:	f100 0478 	add.w	r4, r0, #120	; 0x78
    b292:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    b296:	f88d 0000 	strb.w	r0, [sp]
    b29a:	9800      	ldr	r0, [sp, #0]
    b29c:	9000      	str	r0, [sp, #0]
    b29e:	f89d 0000 	ldrb.w	r0, [sp]
    b2a2:	b930      	cbnz	r0, b2b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x179a>
    b2a4:	7c22      	ldrb	r2, [r4, #16]
    b2a6:	2300      	movs	r3, #0
    b2a8:	2101      	movs	r1, #1
    b2aa:	4620      	mov	r0, r4
    b2ac:	f003 fb6e 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b2b0:	b110      	cbz	r0, b2b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17a0>
    b2b2:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    b2b4:	1c40      	adds	r0, r0, #1
    b2b6:	8760      	strh	r0, [r4, #58]	; 0x3a
    b2b8:	2001      	movs	r0, #1
    b2ba:	213d      	movs	r1, #61	; 0x3d
    b2bc:	bbf7      	cbnz	r7, b33c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1824>
    b2be:	782a      	ldrb	r2, [r5, #0]
    b2c0:	2a02      	cmp	r2, #2
    b2c2:	d006      	beq.n	b2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17ba>
    b2c4:	2a01      	cmp	r2, #1
    b2c6:	d006      	beq.n	b2d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17be>
    b2c8:	b1c6      	cbz	r6, b2fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e4>
    b2ca:	06f2      	lsls	r2, r6, #27
    b2cc:	d507      	bpl.n	b2de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17c6>
    b2ce:	211e      	movs	r1, #30
    b2d0:	e043      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2d2:	2116      	movs	r1, #22
    b2d4:	e041      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2d6:	6869      	ldr	r1, [r5, #4]
    b2d8:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    b2dc:	e03d      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2de:	0732      	lsls	r2, r6, #28
    b2e0:	d43b      	bmi.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2e2:	07b1      	lsls	r1, r6, #30
    b2e4:	d001      	beq.n	b2ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17d2>
    b2e6:	212a      	movs	r1, #42	; 0x2a
    b2e8:	e037      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2ea:	06b1      	lsls	r1, r6, #26
    b2ec:	d404      	bmi.n	b2f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e0>
    b2ee:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    b2f2:	2036      	movs	r0, #54	; 0x36
    b2f4:	f7f9 fd10 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2f8:	2123      	movs	r1, #35	; 0x23
    b2fa:	e02e      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2fc:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    b300:	b129      	cbz	r1, b30e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17f6>
    b302:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    b304:	1c4a      	adds	r2, r1, #1
    b306:	87a2      	strh	r2, [r4, #60]	; 0x3c
    b308:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    b30a:	4291      	cmp	r1, r2
    b30c:	d21d      	bcs.n	b34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    b30e:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    b312:	b139      	cbz	r1, b324 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x180c>
    b314:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    b318:	1c4a      	adds	r2, r1, #1
    b31a:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    b31e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    b320:	4291      	cmp	r1, r2
    b322:	d212      	bcs.n	b34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    b324:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    b326:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    b328:	428a      	cmp	r2, r1
    b32a:	d30b      	bcc.n	b344 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x182c>
    b32c:	686b      	ldr	r3, [r5, #4]
    b32e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    b332:	f88d 3000 	strb.w	r3, [sp]
    b336:	9b00      	ldr	r3, [sp, #0]
    b338:	9300      	str	r3, [sp, #0]
    b33a:	e000      	b.n	b33e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1826>
    b33c:	e00d      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b33e:	f89d 3000 	ldrb.w	r3, [sp]
    b342:	b913      	cbnz	r3, b34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    b344:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    b346:	429a      	cmp	r2, r3
    b348:	d301      	bcc.n	b34e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1836>
    b34a:	2122      	movs	r1, #34	; 0x22
    b34c:	e005      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b34e:	7c62      	ldrb	r2, [r4, #17]
    b350:	b1f2      	cbz	r2, b390 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1878>
    b352:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    b354:	428a      	cmp	r2, r1
    b356:	d304      	bcc.n	b362 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    b358:	2108      	movs	r1, #8
    b35a:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    b35e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    b362:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    b366:	f88d 0000 	strb.w	r0, [sp]
    b36a:	9800      	ldr	r0, [sp, #0]
    b36c:	9000      	str	r0, [sp, #0]
    b36e:	f89d 0000 	ldrb.w	r0, [sp]
    b372:	b1d8      	cbz	r0, b3ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1894>
    b374:	2000      	movs	r0, #0
    b376:	7360      	strb	r0, [r4, #13]
    b378:	73a0      	strb	r0, [r4, #14]
    b37a:	7460      	strb	r0, [r4, #17]
    b37c:	2102      	movs	r1, #2
    b37e:	6868      	ldr	r0, [r5, #4]
    b380:	f7fd fb8e 	bl	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    b384:	6868      	ldr	r0, [r5, #4]
    b386:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    b38a:	2901      	cmp	r1, #1
    b38c:	d005      	beq.n	b39a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1882>
    b38e:	e009      	b.n	b3a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x188c>
    b390:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    b392:	2906      	cmp	r1, #6
    b394:	d3e5      	bcc.n	b362 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    b396:	213e      	movs	r1, #62	; 0x3e
    b398:	e7df      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b39a:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    b39e:	7801      	ldrb	r1, [r0, #0]
    b3a0:	1e49      	subs	r1, r1, #1
    b3a2:	7001      	strb	r1, [r0, #0]
    b3a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b3a8:	f000 b8ea 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b3ac:	6868      	ldr	r0, [r5, #4]
    b3ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b3b2:	2100      	movs	r1, #0
    b3b4:	f7fd bb74 	b.w	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    b3b8:	20000104 	.word	0x20000104
    b3bc:	4804      	ldr	r0, [pc, #16]	; (b3d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18b8>)
    b3be:	b510      	push	{r4, lr}
    b3c0:	6840      	ldr	r0, [r0, #4]
    b3c2:	8800      	ldrh	r0, [r0, #0]
    b3c4:	f7fa f8a6 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    b3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b3cc:	f003 b828 	b.w	e420 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    b3d0:	20000104 	.word	0x20000104
    b3d4:	4a19      	ldr	r2, [pc, #100]	; (b43c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1924>)
    b3d6:	2901      	cmp	r1, #1
    b3d8:	6852      	ldr	r2, [r2, #4]
    b3da:	d010      	beq.n	b3fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e6>
    b3dc:	2100      	movs	r1, #0
    b3de:	b1c8      	cbz	r0, b414 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fc>
    b3e0:	2801      	cmp	r0, #1
    b3e2:	d022      	beq.n	b42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1912>
    b3e4:	2803      	cmp	r0, #3
    b3e6:	d109      	bne.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b3e8:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    b3ec:	2813      	cmp	r0, #19
    b3ee:	d005      	beq.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b3f0:	2816      	cmp	r0, #22
    b3f2:	d003      	beq.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b3f4:	2818      	cmp	r0, #24
    b3f6:	d001      	beq.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b3f8:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    b3fc:	4770      	bx	lr
    b3fe:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    b402:	2801      	cmp	r0, #1
    b404:	d0fa      	beq.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b406:	bf00      	nop
    b408:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    b40c:	7801      	ldrb	r1, [r0, #0]
    b40e:	1e49      	subs	r1, r1, #1
    b410:	7001      	strb	r1, [r0, #0]
    b412:	4770      	bx	lr
    b414:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    b418:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    b41c:	1ac0      	subs	r0, r0, r3
    b41e:	b200      	sxth	r0, r0
    b420:	2800      	cmp	r0, #0
    b422:	dbf6      	blt.n	b412 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fa>
    b424:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    b428:	4770      	bx	lr
    b42a:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    b42e:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    b432:	1a40      	subs	r0, r0, r1
    b434:	b200      	sxth	r0, r0
    b436:	2800      	cmp	r0, #0
    b438:	dae6      	bge.n	b408 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18f0>
    b43a:	4770      	bx	lr
    b43c:	20000104 	.word	0x20000104

0000b440 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    b440:	b510      	push	{r4, lr}
    b442:	6941      	ldr	r1, [r0, #20]
    b444:	b119      	cbz	r1, b44e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    b446:	6842      	ldr	r2, [r0, #4]
    b448:	684b      	ldr	r3, [r1, #4]
    b44a:	429a      	cmp	r2, r3
    b44c:	d203      	bcs.n	b456 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    b44e:	21c1      	movs	r1, #193	; 0xc1
    b450:	2037      	movs	r0, #55	; 0x37
    b452:	f7f9 fc61 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b456:	6902      	ldr	r2, [r0, #16]
    b458:	610a      	str	r2, [r1, #16]
    b45a:	68c3      	ldr	r3, [r0, #12]
    b45c:	60cb      	str	r3, [r1, #12]
    b45e:	b10a      	cbz	r2, b464 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    b460:	60d1      	str	r1, [r2, #12]
    b462:	e001      	b.n	b468 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    b464:	4a06      	ldr	r2, [pc, #24]	; (b480 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    b466:	6011      	str	r1, [r2, #0]
    b468:	68ca      	ldr	r2, [r1, #12]
    b46a:	b132      	cbz	r2, b47a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    b46c:	6111      	str	r1, [r2, #16]
    b46e:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    b472:	4410      	add	r0, r2
    b474:	684a      	ldr	r2, [r1, #4]
    b476:	1a80      	subs	r0, r0, r2
    b478:	e000      	b.n	b47c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    b47a:	2000      	movs	r0, #0
    b47c:	6088      	str	r0, [r1, #8]
    b47e:	bd10      	pop	{r4, pc}
    b480:	200001dc 	.word	0x200001dc

0000b484 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    b484:	b510      	push	{r4, lr}
    b486:	2200      	movs	r2, #0
    b488:	6101      	str	r1, [r0, #16]
    b48a:	b189      	cbz	r1, b4b0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    b48c:	68cb      	ldr	r3, [r1, #12]
    b48e:	60c8      	str	r0, [r1, #12]
    b490:	60c3      	str	r3, [r0, #12]
    b492:	b103      	cbz	r3, b496 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    b494:	6118      	str	r0, [r3, #16]
    b496:	6901      	ldr	r1, [r0, #16]
    b498:	6082      	str	r2, [r0, #8]
    b49a:	2900      	cmp	r1, #0
    b49c:	d00f      	beq.n	b4be <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    b49e:	688b      	ldr	r3, [r1, #8]
    b4a0:	b163      	cbz	r3, b4bc <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    b4a2:	6844      	ldr	r4, [r0, #4]
    b4a4:	42a3      	cmp	r3, r4
    b4a6:	d207      	bcs.n	b4b8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    b4a8:	212a      	movs	r1, #42	; 0x2a
    b4aa:	2037      	movs	r0, #55	; 0x37
    b4ac:	f7f9 fc34 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4b0:	4903      	ldr	r1, [pc, #12]	; (b4c0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    b4b2:	60c2      	str	r2, [r0, #12]
    b4b4:	6008      	str	r0, [r1, #0]
    b4b6:	e7ee      	b.n	b496 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    b4b8:	1b1b      	subs	r3, r3, r4
    b4ba:	6083      	str	r3, [r0, #8]
    b4bc:	608a      	str	r2, [r1, #8]
    b4be:	bd10      	pop	{r4, pc}
    b4c0:	200001dc 	.word	0x200001dc

0000b4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    b4c4:	6901      	ldr	r1, [r0, #16]
    b4c6:	b149      	cbz	r1, b4dc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    b4c8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    b4cc:	441a      	add	r2, r3
    b4ce:	688b      	ldr	r3, [r1, #8]
    b4d0:	441a      	add	r2, r3
    b4d2:	608a      	str	r2, [r1, #8]
    b4d4:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    b4d8:	60d1      	str	r1, [r2, #12]
    b4da:	e002      	b.n	b4e2 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    b4dc:	4a06      	ldr	r2, [pc, #24]	; (b4f8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    b4de:	68c1      	ldr	r1, [r0, #12]
    b4e0:	6011      	str	r1, [r2, #0]
    b4e2:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    b4e6:	b109      	cbz	r1, b4ec <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    b4e8:	6108      	str	r0, [r1, #16]
    b4ea:	4770      	bx	lr
    b4ec:	2800      	cmp	r0, #0
    b4ee:	d0fc      	beq.n	b4ea <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    b4f0:	2100      	movs	r1, #0
    b4f2:	6081      	str	r1, [r0, #8]
    b4f4:	4770      	bx	lr
    b4f6:	0000      	.short	0x0000
    b4f8:	200001dc 	.word	0x200001dc

0000b4fc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    b4fc:	b510      	push	{r4, lr}
    b4fe:	4604      	mov	r4, r0
    b500:	490a      	ldr	r1, [pc, #40]	; (b52c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    b502:	2000      	movs	r0, #0
    b504:	4602      	mov	r2, r0
    b506:	6809      	ldr	r1, [r1, #0]
    b508:	1e43      	subs	r3, r0, #1
    b50a:	e008      	b.n	b51e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    b50c:	688a      	ldr	r2, [r1, #8]
    b50e:	42a2      	cmp	r2, r4
    b510:	d303      	bcc.n	b51a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    b512:	429a      	cmp	r2, r3
    b514:	d201      	bcs.n	b51a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    b516:	4613      	mov	r3, r2
    b518:	4608      	mov	r0, r1
    b51a:	460a      	mov	r2, r1
    b51c:	68c9      	ldr	r1, [r1, #12]
    b51e:	2900      	cmp	r1, #0
    b520:	d1f4      	bne.n	b50c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    b522:	2800      	cmp	r0, #0
    b524:	d100      	bne.n	b528 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    b526:	4610      	mov	r0, r2
    b528:	bd10      	pop	{r4, pc}
    b52a:	0000      	.short	0x0000
    b52c:	200001dc 	.word	0x200001dc

0000b530 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    b530:	4801      	ldr	r0, [pc, #4]	; (b538 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    b532:	6800      	ldr	r0, [r0, #0]
    b534:	4770      	bx	lr
    b536:	0000      	.short	0x0000
    b538:	200001dc 	.word	0x200001dc

0000b53c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    b53c:	4804      	ldr	r0, [pc, #16]	; (b550 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    b53e:	6801      	ldr	r1, [r0, #0]
    b540:	2000      	movs	r0, #0
    b542:	e001      	b.n	b548 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    b544:	4608      	mov	r0, r1
    b546:	68c9      	ldr	r1, [r1, #12]
    b548:	2900      	cmp	r1, #0
    b54a:	d1fb      	bne.n	b544 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    b54c:	4770      	bx	lr
    b54e:	0000      	.short	0x0000
    b550:	200001dc 	.word	0x200001dc

0000b554 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    b554:	4801      	ldr	r0, [pc, #4]	; (b55c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    b556:	2100      	movs	r1, #0
    b558:	6001      	str	r1, [r0, #0]
    b55a:	4770      	bx	lr
    b55c:	200001dc 	.word	0x200001dc

0000b560 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    b560:	4903      	ldr	r1, [pc, #12]	; (b570 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    b562:	2000      	movs	r0, #0
    b564:	6809      	ldr	r1, [r1, #0]
    b566:	2900      	cmp	r1, #0
    b568:	d000      	beq.n	b56c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    b56a:	200c      	movs	r0, #12
    b56c:	4770      	bx	lr
    b56e:	0000      	.short	0x0000
    b570:	200001dc 	.word	0x200001dc

0000b574 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    b574:	4901      	ldr	r1, [pc, #4]	; (b57c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    b576:	7008      	strb	r0, [r1, #0]
    b578:	4770      	bx	lr
    b57a:	0000      	.short	0x0000
    b57c:	20000296 	.word	0x20000296

0000b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    b580:	4801      	ldr	r0, [pc, #4]	; (b588 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    b582:	7800      	ldrb	r0, [r0, #0]
    b584:	f7f9 b9bc 	b.w	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b588:	20000296 	.word	0x20000296

0000b58c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    b58c:	b500      	push	{lr}
    b58e:	7941      	ldrb	r1, [r0, #5]
    b590:	b095      	sub	sp, #84	; 0x54
    b592:	b141      	cbz	r1, b5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b594:	2901      	cmp	r1, #1
    b596:	d006      	beq.n	b5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b598:	2902      	cmp	r1, #2
    b59a:	d004      	beq.n	b5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b59c:	2903      	cmp	r1, #3
    b59e:	d002      	beq.n	b5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b5a0:	2012      	movs	r0, #18
    b5a2:	b015      	add	sp, #84	; 0x54
    b5a4:	bd00      	pop	{pc}
    b5a6:	7901      	ldrb	r1, [r0, #4]
    b5a8:	f88d 1000 	strb.w	r1, [sp]
    b5ac:	7b01      	ldrb	r1, [r0, #12]
    b5ae:	f88d 1001 	strb.w	r1, [sp, #1]
    b5b2:	7942      	ldrb	r2, [r0, #5]
    b5b4:	2100      	movs	r1, #0
    b5b6:	2301      	movs	r3, #1
    b5b8:	b3e2      	cbz	r2, b634 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
    b5ba:	2a02      	cmp	r2, #2
    b5bc:	d03b      	beq.n	b636 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    b5be:	f88d 3002 	strb.w	r3, [sp, #2]
    b5c2:	bf00      	nop
    b5c4:	f8d0 2006 	ldr.w	r2, [r0, #6]
    b5c8:	f8cd 2003 	str.w	r2, [sp, #3]
    b5cc:	8942      	ldrh	r2, [r0, #10]
    b5ce:	f8ad 2007 	strh.w	r2, [sp, #7]
    b5d2:	f88d 3009 	strb.w	r3, [sp, #9]
    b5d6:	f830 2b01 	ldrh.w	r2, [r0], #1
    b5da:	f240 2371 	movw	r3, #625	; 0x271
    b5de:	435a      	muls	r2, r3
    b5e0:	9203      	str	r2, [sp, #12]
    b5e2:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    b5e6:	435a      	muls	r2, r3
    b5e8:	9206      	str	r2, [sp, #24]
    b5ea:	8982      	ldrh	r2, [r0, #12]
    b5ec:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    b5f0:	89c2      	ldrh	r2, [r0, #14]
    b5f2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    b5f6:	8a02      	ldrh	r2, [r0, #16]
    b5f8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    b5fc:	8a42      	ldrh	r2, [r0, #18]
    b5fe:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    b602:	8a82      	ldrh	r2, [r0, #20]
    b604:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    b608:	8ac0      	ldrh	r0, [r0, #22]
    b60a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    b60e:	2007      	movs	r0, #7
    b610:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    b614:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    b618:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    b61c:	9806      	ldr	r0, [sp, #24]
    b61e:	f000 fbd7 	bl	bdd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    b622:	b158      	cbz	r0, b63c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    b624:	9803      	ldr	r0, [sp, #12]
    b626:	f000 fbc7 	bl	bdb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    b62a:	b138      	cbz	r0, b63c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    b62c:	4668      	mov	r0, sp
    b62e:	f000 f8cb 	bl	b7c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    b632:	e7b6      	b.n	b5a2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    b634:	e7ff      	b.n	b636 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    b636:	f88d 1002 	strb.w	r1, [sp, #2]
    b63a:	e7c3      	b.n	b5c4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    b63c:	2030      	movs	r0, #48	; 0x30
    b63e:	e7b0      	b.n	b5a2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000b640 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    b640:	b538      	push	{r3, r4, r5, lr}
    b642:	4c14      	ldr	r4, [pc, #80]	; (b694 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x54>)
    b644:	7860      	ldrb	r0, [r4, #1]
    b646:	b970      	cbnz	r0, b666 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    b648:	f7fd f9e6 	bl	8a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
    b64c:	2805      	cmp	r0, #5
    b64e:	d005      	beq.n	b65c <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
    b650:	f7fb ff36 	bl	74c0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    b654:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    b658:	39ff      	subs	r1, #255	; 0xff
    b65a:	d004      	beq.n	b666 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    b65c:	4668      	mov	r0, sp
    b65e:	f7fd f93b 	bl	88d8 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q>
    b662:	b110      	cbz	r0, b66a <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
    b664:	e014      	b.n	b690 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x50>
    b666:	200c      	movs	r0, #12
    b668:	bd38      	pop	{r3, r4, r5, pc}
    b66a:	9800      	ldr	r0, [sp, #0]
    b66c:	8800      	ldrh	r0, [r0, #0]
    b66e:	f003 f849 	bl	e704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    b672:	9800      	ldr	r0, [sp, #0]
    b674:	2100      	movs	r1, #0
    b676:	8800      	ldrh	r0, [r0, #0]
    b678:	f7f9 fdcc 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b67c:	b120      	cbz	r0, b688 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x48>
    b67e:	f640 7172 	movw	r1, #3954	; 0xf72
    b682:	2039      	movs	r0, #57	; 0x39
    b684:	f7f9 fb48 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b688:	2001      	movs	r0, #1
    b68a:	7060      	strb	r0, [r4, #1]
    b68c:	f7ff ff78 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b690:	2000      	movs	r0, #0
    b692:	bd38      	pop	{r3, r4, r5, pc}
    b694:	20001270 	.word	0x20001270

0000b698 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    b698:	4903      	ldr	r1, [pc, #12]	; (b6a8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    b69a:	888a      	ldrh	r2, [r1, #4]
    b69c:	8002      	strh	r2, [r0, #0]
    b69e:	7889      	ldrb	r1, [r1, #2]
    b6a0:	7081      	strb	r1, [r0, #2]
    b6a2:	2000      	movs	r0, #0
    b6a4:	4770      	bx	lr
    b6a6:	0000      	.short	0x0000
    b6a8:	20001270 	.word	0x20001270

0000b6ac <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    b6ac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b6ae:	460c      	mov	r4, r1
    b6b0:	4605      	mov	r5, r0
    b6b2:	8800      	ldrh	r0, [r0, #0]
    b6b4:	4669      	mov	r1, sp
    b6b6:	f003 f940 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b6ba:	0001      	movs	r1, r0
    b6bc:	f04f 0000 	mov.w	r0, #0
    b6c0:	d005      	beq.n	b6ce <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    b6c2:	f8c4 0002 	str.w	r0, [r4, #2]
    b6c6:	71a0      	strb	r0, [r4, #6]
    b6c8:	8020      	strh	r0, [r4, #0]
    b6ca:	2002      	movs	r0, #2
    b6cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b6ce:	9901      	ldr	r1, [sp, #4]
    b6d0:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    b6d4:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    b6d8:	f8d1 2016 	ldr.w	r2, [r1, #22]
    b6dc:	f8c4 2002 	str.w	r2, [r4, #2]
    b6e0:	7e8a      	ldrb	r2, [r1, #26]
    b6e2:	71a2      	strb	r2, [r4, #6]
    b6e4:	882a      	ldrh	r2, [r5, #0]
    b6e6:	8022      	strh	r2, [r4, #0]
    b6e8:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    b6ec:	f88d 2008 	strb.w	r2, [sp, #8]
    b6f0:	9a02      	ldr	r2, [sp, #8]
    b6f2:	9202      	str	r2, [sp, #8]
    b6f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    b6f8:	2a00      	cmp	r2, #0
    b6fa:	d1eb      	bne.n	b6d4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    b6fc:	2000      	movs	r0, #0
    b6fe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000b700 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    b700:	b51c      	push	{r2, r3, r4, lr}
    b702:	8800      	ldrh	r0, [r0, #0]
    b704:	4669      	mov	r1, sp
    b706:	f003 f918 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b70a:	2800      	cmp	r0, #0
    b70c:	d106      	bne.n	b71c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1c>
    b70e:	f89d 0000 	ldrb.w	r0, [sp]
    b712:	b120      	cbz	r0, b71e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1e>
    b714:	480b      	ldr	r0, [pc, #44]	; (b744 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x44>)
    b716:	7800      	ldrb	r0, [r0, #0]
    b718:	b190      	cbz	r0, b740 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x40>
    b71a:	2002      	movs	r0, #2
    b71c:	bd1c      	pop	{r2, r3, r4, pc}
    b71e:	9801      	ldr	r0, [sp, #4]
    b720:	f004 feb1 	bl	10486 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    b724:	2800      	cmp	r0, #0
    b726:	d0f8      	beq.n	b71a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1a>
    b728:	9801      	ldr	r0, [sp, #4]
    b72a:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    b72e:	b108      	cbz	r0, b734 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x34>
    b730:	203a      	movs	r0, #58	; 0x3a
    b732:	bd1c      	pop	{r2, r3, r4, pc}
    b734:	9901      	ldr	r1, [sp, #4]
    b736:	2001      	movs	r0, #1
    b738:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
    b73c:	2000      	movs	r0, #0
    b73e:	bd1c      	pop	{r2, r3, r4, pc}
    b740:	2011      	movs	r0, #17
    b742:	bd1c      	pop	{r2, r3, r4, pc}
    b744:	200001e0 	.word	0x200001e0

0000b748 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    b748:	b510      	push	{r4, lr}
    b74a:	4604      	mov	r4, r0
    b74c:	f004 fe92 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    b750:	b130      	cbz	r0, b760 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    b752:	4804      	ldr	r0, [pc, #16]	; (b764 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    b754:	8881      	ldrh	r1, [r0, #4]
    b756:	8021      	strh	r1, [r4, #0]
    b758:	88c0      	ldrh	r0, [r0, #6]
    b75a:	8060      	strh	r0, [r4, #2]
    b75c:	2000      	movs	r0, #0
    b75e:	bd10      	pop	{r4, pc}
    b760:	2001      	movs	r0, #1
    b762:	bd10      	pop	{r4, pc}
    b764:	200001ee 	.word	0x200001ee

0000b768 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    b768:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b76a:	4605      	mov	r5, r0
    b76c:	f000 fc2a 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b770:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b774:	b310      	cbz	r0, b7bc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    b776:	2400      	movs	r4, #0
    b778:	a802      	add	r0, sp, #8
    b77a:	f88d 4004 	strb.w	r4, [sp, #4]
    b77e:	f88d 4008 	strb.w	r4, [sp, #8]
    b782:	9000      	str	r0, [sp, #0]
    b784:	78aa      	ldrb	r2, [r5, #2]
    b786:	7869      	ldrb	r1, [r5, #1]
    b788:	7828      	ldrb	r0, [r5, #0]
    b78a:	ab01      	add	r3, sp, #4
    b78c:	f004 ff18 	bl	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    b790:	2800      	cmp	r0, #0
    b792:	d112      	bne.n	b7ba <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    b794:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b798:	f004 fc8f 	bl	100ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    b79c:	b180      	cbz	r0, b7c0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    b79e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b7a2:	f004 fc8a 	bl	100ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    b7a6:	b158      	cbz	r0, b7c0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    b7a8:	4806      	ldr	r0, [pc, #24]	; (b7c4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    b7aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
    b7ae:	7481      	strb	r1, [r0, #18]
    b7b0:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b7b4:	74c1      	strb	r1, [r0, #19]
    b7b6:	8284      	strh	r4, [r0, #20]
    b7b8:	2000      	movs	r0, #0
    b7ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b7bc:	2001      	movs	r0, #1
    b7be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b7c0:	2011      	movs	r0, #17
    b7c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b7c4:	20001270 	.word	0x20001270

0000b7c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7cc:	a1a2      	add	r1, pc, #648	; (adr r1, ba58 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x290>)
    b7ce:	4605      	mov	r5, r0
    b7d0:	e9d1 8700 	ldrd	r8, r7, [r1]
    b7d4:	7a40      	ldrb	r0, [r0, #9]
    b7d6:	b087      	sub	sp, #28
    b7d8:	0781      	lsls	r1, r0, #30
    b7da:	d502      	bpl.n	b7e2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
    b7dc:	f040 0001 	orr.w	r0, r0, #1
    b7e0:	7268      	strb	r0, [r5, #9]
    b7e2:	4628      	mov	r0, r5
    b7e4:	f004 fcc8 	bl	10178 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x156>
    b7e8:	2800      	cmp	r0, #0
    b7ea:	d10c      	bne.n	b806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b7ec:	f004 fe5f 	bl	104ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    b7f0:	b940      	cbnz	r0, b804 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    b7f2:	4e9b      	ldr	r6, [pc, #620]	; (ba60 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x298>)
    b7f4:	7870      	ldrb	r0, [r6, #1]
    b7f6:	b928      	cbnz	r0, b804 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    b7f8:	f7fb fe62 	bl	74c0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    b7fc:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    b800:	39ff      	subs	r1, #255	; 0xff
    b802:	d003      	beq.n	b80c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
    b804:	200c      	movs	r0, #12
    b806:	b007      	add	sp, #28
    b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b80c:	7828      	ldrb	r0, [r5, #0]
    b80e:	f04f 0b00 	mov.w	fp, #0
    b812:	f04f 0a01 	mov.w	sl, #1
    b816:	b9e8      	cbnz	r0, b854 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    b818:	78a8      	ldrb	r0, [r5, #2]
    b81a:	9000      	str	r0, [sp, #0]
    b81c:	f105 0903 	add.w	r9, r5, #3
    b820:	a902      	add	r1, sp, #8
    b822:	2000      	movs	r0, #0
    b824:	f002 ff14 	bl	e650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    b828:	b178      	cbz	r0, b84a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x82>
    b82a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    b82e:	e10e      	b.n	ba4e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x286>
    b830:	9c04      	ldr	r4, [sp, #16]
    b832:	9800      	ldr	r0, [sp, #0]
    b834:	f004 f87e 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    b838:	78a1      	ldrb	r1, [r4, #2]
    b83a:	4288      	cmp	r0, r1
    b83c:	d105      	bne.n	b84a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x82>
    b83e:	2206      	movs	r2, #6
    b840:	4649      	mov	r1, r9
    b842:	1ce0      	adds	r0, r4, #3
    b844:	f001 fe4c 	bl	d4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    b848:	b320      	cbz	r0, b894 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xcc>
    b84a:	a802      	add	r0, sp, #8
    b84c:	f7f9 fc94 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    b850:	2800      	cmp	r0, #0
    b852:	d0ed      	beq.n	b830 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x68>
    b854:	2103      	movs	r1, #3
    b856:	f105 0018 	add.w	r0, r5, #24
    b85a:	f000 fac5 	bl	bde8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x160>
    b85e:	2200      	movs	r2, #0
    b860:	4611      	mov	r1, r2
    b862:	a801      	add	r0, sp, #4
    b864:	f7f9 fcae 	bl	51c4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b868:	0004      	movs	r4, r0
    b86a:	d015      	beq.n	b898 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd0>
    b86c:	2100      	movs	r1, #0
    b86e:	f7fb f953 	bl	6b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    b872:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b876:	8020      	strh	r0, [r4, #0]
    b878:	487a      	ldr	r0, [pc, #488]	; (ba64 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>)
    b87a:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    b87e:	f004 fdf9 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    b882:	2800      	cmp	r0, #0
    b884:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    b888:	d008      	beq.n	b89c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd4>
    b88a:	88b1      	ldrh	r1, [r6, #4]
    b88c:	88f2      	ldrh	r2, [r6, #6]
    b88e:	84c1      	strh	r1, [r0, #38]	; 0x26
    b890:	8502      	strh	r2, [r0, #40]	; 0x28
    b892:	e006      	b.n	b8a2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xda>
    b894:	200b      	movs	r0, #11
    b896:	e7b6      	b.n	b806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b898:	2009      	movs	r0, #9
    b89a:	e7b4      	b.n	b806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b89c:	221b      	movs	r2, #27
    b89e:	84c2      	strh	r2, [r0, #38]	; 0x26
    b8a0:	8502      	strh	r2, [r0, #40]	; 0x28
    b8a2:	78f1      	ldrb	r1, [r6, #3]
    b8a4:	9100      	str	r1, [sp, #0]
    b8a6:	46b1      	mov	r9, r6
    b8a8:	78b3      	ldrb	r3, [r6, #2]
    b8aa:	88f2      	ldrh	r2, [r6, #6]
    b8ac:	88b1      	ldrh	r1, [r6, #4]
    b8ae:	8820      	ldrh	r0, [r4, #0]
    b8b0:	f7f9 fd6a 	bl	5388 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b8b4:	b110      	cbz	r0, b8bc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf4>
    b8b6:	f640 618b 	movw	r1, #3723	; 0xe8b
    b8ba:	e0c8      	b.n	ba4e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x286>
    b8bc:	8820      	ldrh	r0, [r4, #0]
    b8be:	f7fb fd53 	bl	7368 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    b8c2:	6120      	str	r0, [r4, #16]
    b8c4:	a068      	add	r0, pc, #416	; (adr r0, ba68 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    b8c6:	f104 0618 	add.w	r6, r4, #24
    b8ca:	6800      	ldr	r0, [r0, #0]
    b8cc:	9000      	str	r0, [sp, #0]
    b8ce:	2103      	movs	r1, #3
    b8d0:	4668      	mov	r0, sp
    b8d2:	f7f9 fabd 	bl	4e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    b8d6:	2000      	movs	r0, #0
    b8d8:	4669      	mov	r1, sp
    b8da:	5c0a      	ldrb	r2, [r1, r0]
    b8dc:	5432      	strb	r2, [r6, r0]
    b8de:	1c40      	adds	r0, r0, #1
    b8e0:	b2c0      	uxtb	r0, r0
    b8e2:	2803      	cmp	r0, #3
    b8e4:	d3f9      	bcc.n	b8da <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x112>
    b8e6:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    b8e8:	f003 f833 	bl	e952 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    b8ec:	60e0      	str	r0, [r4, #12]
    b8ee:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    b8f0:	82a0      	strh	r0, [r4, #20]
    b8f2:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    b8f4:	82e0      	strh	r0, [r4, #22]
    b8f6:	7a68      	ldrb	r0, [r5, #9]
    b8f8:	f004 fbbe 	bl	10078 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    b8fc:	f8d9 1008 	ldr.w	r1, [r9, #8]
    b900:	464e      	mov	r6, r9
    b902:	4620      	mov	r0, r4
    b904:	62e1      	str	r1, [r4, #44]	; 0x2c
    b906:	f003 fe37 	bl	f578 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI>
    b90a:	f8c4 808e 	str.w	r8, [r4, #142]	; 0x8e
    b90e:	46d1      	mov	r9, sl
    b910:	4650      	mov	r0, sl
    b912:	f884 7092 	strb.w	r7, [r4, #146]	; 0x92
    b916:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
    b91a:	4852      	ldr	r0, [pc, #328]	; (ba64 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>)
    b91c:	3808      	subs	r0, #8
    b91e:	6843      	ldr	r3, [r0, #4]
    b920:	b123      	cbz	r3, b92c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x164>
    b922:	2201      	movs	r2, #1
    b924:	f504 7199 	add.w	r1, r4, #306	; 0x132
    b928:	4620      	mov	r0, r4
    b92a:	4798      	blx	r3
    b92c:	8821      	ldrh	r1, [r4, #0]
    b92e:	f8ad 1008 	strh.w	r1, [sp, #8]
    b932:	7cb1      	ldrb	r1, [r6, #18]
    b934:	f88d 100a 	strb.w	r1, [sp, #10]
    b938:	7cf1      	ldrb	r1, [r6, #19]
    b93a:	f88d 100b 	strb.w	r1, [sp, #11]
    b93e:	8ab1      	ldrh	r1, [r6, #20]
    b940:	f8ad 100c 	strh.w	r1, [sp, #12]
    b944:	a905      	add	r1, sp, #20
    b946:	9100      	str	r1, [sp, #0]
    b948:	2000      	movs	r0, #0
    b94a:	ab04      	add	r3, sp, #16
    b94c:	aa02      	add	r2, sp, #8
    b94e:	4621      	mov	r1, r4
    b950:	f004 fd51 	bl	103f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d4>
    b954:	0006      	movs	r6, r0
    b956:	d10f      	bne.n	b978 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1b0>
    b958:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b95c:	f88d 0018 	strb.w	r0, [sp, #24]
    b960:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b964:	f88d 0019 	strb.w	r0, [sp, #25]
    b968:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b96c:	f8ad 001a 	strh.w	r0, [sp, #26]
    b970:	a906      	add	r1, sp, #24
    b972:	4620      	mov	r0, r4
    b974:	f003 f8aa 	bl	eacc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b978:	46d8      	mov	r8, fp
    b97a:	f88d b000 	strb.w	fp, [sp]
    b97e:	2101      	movs	r1, #1
    b980:	4668      	mov	r0, sp
    b982:	f7f9 fa65 	bl	4e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    b986:	f89d 0000 	ldrb.w	r0, [sp]
    b98a:	f000 0107 	and.w	r1, r0, #7
    b98e:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    b992:	4411      	add	r1, r2
    b994:	f3c0 1040 	ubfx	r0, r0, #5, #1
    b998:	4408      	add	r0, r1
    b99a:	f88d 0000 	strb.w	r0, [sp]
    b99e:	1d40      	adds	r0, r0, #5
    b9a0:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    b9a4:	2809      	cmp	r0, #9
    b9a6:	d202      	bcs.n	b9ae <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1e6>
    b9a8:	3008      	adds	r0, #8
    b9aa:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    b9ae:	2101      	movs	r1, #1
    b9b0:	4620      	mov	r0, r4
    b9b2:	f7fb f8b1 	bl	6b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    b9b6:	7868      	ldrb	r0, [r5, #1]
    b9b8:	f7fb fe56 	bl	7668 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    b9bc:	bbee      	cbnz	r6, ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    b9be:	78a9      	ldrb	r1, [r5, #2]
    b9c0:	7828      	ldrb	r0, [r5, #0]
    b9c2:	1cea      	adds	r2, r5, #3
    b9c4:	f7fb fdfa 	bl	75bc <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    b9c8:	b148      	cbz	r0, b9de <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x216>
    b9ca:	f7fb fd21 	bl	7410 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    b9ce:	78a9      	ldrb	r1, [r5, #2]
    b9d0:	7828      	ldrb	r0, [r5, #0]
    b9d2:	1cea      	adds	r2, r5, #3
    b9d4:	f7fb fe16 	bl	7604 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    b9d8:	0006      	movs	r6, r0
    b9da:	d002      	beq.n	b9e2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x21a>
    b9dc:	e02d      	b.n	ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    b9de:	2612      	movs	r6, #18
    b9e0:	e02b      	b.n	ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    b9e2:	78a8      	ldrb	r0, [r5, #2]
    b9e4:	f003 ffa6 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    b9e8:	4602      	mov	r2, r0
    b9ea:	1ceb      	adds	r3, r5, #3
    b9ec:	4621      	mov	r1, r4
    b9ee:	2003      	movs	r0, #3
    b9f0:	f7fb fd50 	bl	7494 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    b9f4:	0006      	movs	r6, r0
    b9f6:	d120      	bne.n	ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    b9f8:	464f      	mov	r7, r9
    b9fa:	4648      	mov	r0, r9
    b9fc:	f7fb fda8 	bl	7550 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    ba00:	0006      	movs	r6, r0
    ba02:	d11a      	bne.n	ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    ba04:	f88d 8008 	strb.w	r8, [sp, #8]
    ba08:	7a68      	ldrb	r0, [r5, #9]
    ba0a:	07c0      	lsls	r0, r0, #31
    ba0c:	d005      	beq.n	ba1a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x252>
    ba0e:	68e8      	ldr	r0, [r5, #12]
    ba10:	9003      	str	r0, [sp, #12]
    ba12:	69a8      	ldr	r0, [r5, #24]
    ba14:	9004      	str	r0, [sp, #16]
    ba16:	f88d 7008 	strb.w	r7, [sp, #8]
    ba1a:	a802      	add	r0, sp, #8
    ba1c:	f7fd f802 	bl	8a24 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>
    ba20:	4606      	mov	r6, r0
    ba22:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    ba26:	f7fb fe93 	bl	7750 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    ba2a:	b936      	cbnz	r6, ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    ba2c:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    ba30:	4620      	mov	r0, r4
    ba32:	f7fc ff0d 	bl	8850 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ>
    ba36:	0006      	movs	r6, r0
    ba38:	d00c      	beq.n	ba54 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    ba3a:	8820      	ldrh	r0, [r4, #0]
    ba3c:	f002 fe62 	bl	e704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ba40:	8820      	ldrh	r0, [r4, #0]
    ba42:	2100      	movs	r1, #0
    ba44:	f7f9 fbe6 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ba48:	b120      	cbz	r0, ba54 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    ba4a:	f640 7152 	movw	r1, #3922	; 0xf52
    ba4e:	2039      	movs	r0, #57	; 0x39
    ba50:	f7f9 f962 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba54:	4630      	mov	r0, r6
    ba56:	e6d6      	b.n	b806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    ba58:	ffffffff 	.word	0xffffffff
    ba5c:	0000001f 	.word	0x0000001f
    ba60:	20001270 	.word	0x20001270
    ba64:	200001e8 	.word	0x200001e8
    ba68:	00332211 	.word	0x00332211

0000ba6c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    ba6c:	7801      	ldrb	r1, [r0, #0]
    ba6e:	b179      	cbz	r1, ba90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ba70:	7841      	ldrb	r1, [r0, #1]
    ba72:	b169      	cbz	r1, ba90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ba74:	8841      	ldrh	r1, [r0, #2]
    ba76:	291b      	cmp	r1, #27
    ba78:	d30a      	bcc.n	ba90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ba7a:	8881      	ldrh	r1, [r0, #4]
    ba7c:	291b      	cmp	r1, #27
    ba7e:	d307      	bcc.n	ba90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ba80:	4904      	ldr	r1, [pc, #16]	; (ba94 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    ba82:	6802      	ldr	r2, [r0, #0]
    ba84:	f8c1 2002 	str.w	r2, [r1, #2]
    ba88:	8880      	ldrh	r0, [r0, #4]
    ba8a:	80c8      	strh	r0, [r1, #6]
    ba8c:	2000      	movs	r0, #0
    ba8e:	4770      	bx	lr
    ba90:	2012      	movs	r0, #18
    ba92:	4770      	bx	lr
    ba94:	20001270 	.word	0x20001270

0000ba98 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ba98:	6800      	ldr	r0, [r0, #0]
    ba9a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ba9e:	4288      	cmp	r0, r1
    baa0:	d303      	bcc.n	baaa <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    baa2:	4903      	ldr	r1, [pc, #12]	; (bab0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    baa4:	6088      	str	r0, [r1, #8]
    baa6:	2000      	movs	r0, #0
    baa8:	4770      	bx	lr
    baaa:	2012      	movs	r0, #18
    baac:	4770      	bx	lr
    baae:	0000      	.short	0x0000
    bab0:	20001270 	.word	0x20001270

0000bab4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    bab4:	b510      	push	{r4, lr}
    bab6:	b086      	sub	sp, #24
    bab8:	4604      	mov	r4, r0
    baba:	f004 fbd4 	bl	10266 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x244>
    babe:	2800      	cmp	r0, #0
    bac0:	d103      	bne.n	baca <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    bac2:	f004 fcf4 	bl	104ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    bac6:	b110      	cbz	r0, bace <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    bac8:	200c      	movs	r0, #12
    baca:	b006      	add	sp, #24
    bacc:	bd10      	pop	{r4, pc}
    bace:	2102      	movs	r1, #2
    bad0:	f104 0010 	add.w	r0, r4, #16
    bad4:	f000 f988 	bl	bde8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x160>
    bad8:	78a0      	ldrb	r0, [r4, #2]
    bada:	f88d 0008 	strb.w	r0, [sp, #8]
    bade:	78a0      	ldrb	r0, [r4, #2]
    bae0:	f88d 0000 	strb.w	r0, [sp]
    bae4:	7860      	ldrb	r0, [r4, #1]
    bae6:	f88d 0003 	strb.w	r0, [sp, #3]
    baea:	7820      	ldrb	r0, [r4, #0]
    baec:	f88d 0002 	strb.w	r0, [sp, #2]
    baf0:	7e20      	ldrb	r0, [r4, #24]
    baf2:	f88d 0004 	strb.w	r0, [sp, #4]
    baf6:	78a0      	ldrb	r0, [r4, #2]
    baf8:	07c0      	lsls	r0, r0, #31
    bafa:	d00b      	beq.n	bb14 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    bafc:	78e0      	ldrb	r0, [r4, #3]
    bafe:	2801      	cmp	r0, #1
    bb00:	d011      	beq.n	bb26 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    bb02:	b190      	cbz	r0, bb2a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    bb04:	f05f 0000 	movs.w	r0, #0
    bb08:	f88d 0001 	strb.w	r0, [sp, #1]
    bb0c:	68a0      	ldr	r0, [r4, #8]
    bb0e:	9003      	str	r0, [sp, #12]
    bb10:	6920      	ldr	r0, [r4, #16]
    bb12:	9004      	str	r0, [sp, #16]
    bb14:	a802      	add	r0, sp, #8
    bb16:	f7fc ff85 	bl	8a24 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>
    bb1a:	2800      	cmp	r0, #0
    bb1c:	d1d5      	bne.n	baca <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    bb1e:	4668      	mov	r0, sp
    bb20:	f7fb fe1e 	bl	7760 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    bb24:	e7d1      	b.n	baca <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    bb26:	2002      	movs	r0, #2
    bb28:	e7ee      	b.n	bb08 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    bb2a:	2001      	movs	r0, #1
    bb2c:	e7ec      	b.n	bb08 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000bb30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    bb30:	4a03      	ldr	r2, [pc, #12]	; (bb40 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    bb32:	e9d2 1200 	ldrd	r1, r2, [r2]
    bb36:	6001      	str	r1, [r0, #0]
    bb38:	6042      	str	r2, [r0, #4]
    bb3a:	2000      	movs	r0, #0
    bb3c:	4770      	bx	lr
    bb3e:	0000      	.short	0x0000
    bb40:	0000be74 	.word	0x0000be74

0000bb44 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    bb44:	b510      	push	{r4, lr}
    bb46:	2005      	movs	r0, #5
    bb48:	f000 fa32 	bl	bfb0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    bb4c:	f7fd fe14 	bl	9778 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    bb50:	4902      	ldr	r1, [pc, #8]	; (bb5c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    bb52:	4801      	ldr	r0, [pc, #4]	; (bb58 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    bb54:	6048      	str	r0, [r1, #4]
    bb56:	bd10      	pop	{r4, pc}
    bb58:	0000bcbd 	.word	0x0000bcbd
    bb5c:	200001e0 	.word	0x200001e0

0000bb60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    bb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb64:	b086      	sub	sp, #24
    bb66:	468a      	mov	sl, r1
    bb68:	4606      	mov	r6, r0
    bb6a:	8800      	ldrh	r0, [r0, #0]
    bb6c:	a901      	add	r1, sp, #4
    bb6e:	f002 fee4 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    bb72:	2800      	cmp	r0, #0
    bb74:	d139      	bne.n	bbea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    bb76:	9802      	ldr	r0, [sp, #8]
    bb78:	f04f 0801 	mov.w	r8, #1
    bb7c:	4601      	mov	r1, r0
    bb7e:	4689      	mov	r9, r1
    bb80:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    bb84:	f88d 1000 	strb.w	r1, [sp]
    bb88:	9900      	ldr	r1, [sp, #0]
    bb8a:	9100      	str	r1, [sp, #0]
    bb8c:	f89d 5000 	ldrb.w	r5, [sp]
    bb90:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bb94:	3078      	adds	r0, #120	; 0x78
    bb96:	2921      	cmp	r1, #33	; 0x21
    bb98:	d100      	bne.n	bb9c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    bb9a:	b13d      	cbz	r5, bbac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    bb9c:	2400      	movs	r4, #0
    bb9e:	304e      	adds	r0, #78	; 0x4e
    bba0:	2108      	movs	r1, #8
    bba2:	4607      	mov	r7, r0
    bba4:	f003 febc 	bl	f920 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    bba8:	b110      	cbz	r0, bbb0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    bbaa:	e007      	b.n	bbbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    bbac:	2401      	movs	r4, #1
    bbae:	e7f6      	b.n	bb9e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    bbb0:	210b      	movs	r1, #11
    bbb2:	4638      	mov	r0, r7
    bbb4:	f003 feb4 	bl	f920 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    bbb8:	b900      	cbnz	r0, bbbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    bbba:	b1ac      	cbz	r4, bbe8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    bbbc:	a804      	add	r0, sp, #16
    bbbe:	9000      	str	r0, [sp, #0]
    bbc0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    bbc4:	ab03      	add	r3, sp, #12
    bbc6:	4632      	mov	r2, r6
    bbc8:	4649      	mov	r1, r9
    bbca:	f004 fc14 	bl	103f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d4>
    bbce:	0007      	movs	r7, r0
    bbd0:	d10b      	bne.n	bbea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    bbd2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    bbd6:	9c02      	ldr	r4, [sp, #8]
    bbd8:	b150      	cbz	r0, bbf0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    bbda:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    bbde:	bf00      	nop
    bbe0:	f884 8001 	strb.w	r8, [r4, #1]
    bbe4:	b94d      	cbnz	r5, bbfa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    bbe6:	e006      	b.n	bbf6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    bbe8:	201a      	movs	r0, #26
    bbea:	b006      	add	sp, #24
    bbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bbf0:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    bbf4:	e7f4      	b.n	bbe0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    bbf6:	7820      	ldrb	r0, [r4, #0]
    bbf8:	b108      	cbz	r0, bbfe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    bbfa:	273a      	movs	r7, #58	; 0x3a
    bbfc:	e012      	b.n	bc24 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    bbfe:	f884 a000 	strb.w	sl, [r4]
    bc02:	f89d 000c 	ldrb.w	r0, [sp, #12]
    bc06:	70a0      	strb	r0, [r4, #2]
    bc08:	f89d 1010 	ldrb.w	r1, [sp, #16]
    bc0c:	70e1      	strb	r1, [r4, #3]
    bc0e:	f88d 0000 	strb.w	r0, [sp]
    bc12:	f88d 1001 	strb.w	r1, [sp, #1]
    bc16:	88b0      	ldrh	r0, [r6, #4]
    bc18:	f8ad 0002 	strh.w	r0, [sp, #2]
    bc1c:	4669      	mov	r1, sp
    bc1e:	4648      	mov	r0, r9
    bc20:	f002 ff54 	bl	eacc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    bc24:	2000      	movs	r0, #0
    bc26:	7060      	strb	r0, [r4, #1]
    bc28:	4638      	mov	r0, r7
    bc2a:	e7de      	b.n	bbea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

0000bc2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    bc2c:	b510      	push	{r4, lr}
    bc2e:	f002 fd7d 	bl	e72c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    bc32:	f7fa fd17 	bl	6664 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    bc36:	f000 f9d5 	bl	bfe4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    bc3a:	4811      	ldr	r0, [pc, #68]	; (bc80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    bc3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bc40:	4b10      	ldr	r3, [pc, #64]	; (bc84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    bc42:	81c1      	strh	r1, [r0, #14]
    bc44:	8201      	strh	r1, [r0, #16]
    bc46:	2100      	movs	r1, #0
    bc48:	75c1      	strb	r1, [r0, #23]
    bc4a:	8301      	strh	r1, [r0, #24]
    bc4c:	8001      	strh	r1, [r0, #0]
    bc4e:	221b      	movs	r2, #27
    bc50:	801a      	strh	r2, [r3, #0]
    bc52:	f44f 74a4 	mov.w	r4, #328	; 0x148
    bc56:	805c      	strh	r4, [r3, #2]
    bc58:	809a      	strh	r2, [r3, #4]
    bc5a:	80dc      	strh	r4, [r3, #6]
    bc5c:	7481      	strb	r1, [r0, #18]
    bc5e:	74c1      	strb	r1, [r0, #19]
    bc60:	2303      	movs	r3, #3
    bc62:	7083      	strb	r3, [r0, #2]
    bc64:	2302      	movs	r3, #2
    bc66:	70c3      	strb	r3, [r0, #3]
    bc68:	8082      	strh	r2, [r0, #4]
    bc6a:	80c2      	strh	r2, [r0, #6]
    bc6c:	f640 62a6 	movw	r2, #3750	; 0xea6
    bc70:	6082      	str	r2, [r0, #8]
    bc72:	4a04      	ldr	r2, [pc, #16]	; (bc84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    bc74:	1f92      	subs	r2, r2, #6
    bc76:	7011      	strb	r1, [r2, #0]
    bc78:	7581      	strb	r1, [r0, #22]
    bc7a:	7301      	strb	r1, [r0, #12]
    bc7c:	bd10      	pop	{r4, pc}
    bc7e:	0000      	.short	0x0000
    bc80:	20001270 	.word	0x20001270
    bc84:	200001ee 	.word	0x200001ee

0000bc88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    bc88:	b510      	push	{r4, lr}
    bc8a:	b158      	cbz	r0, bca4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    bc8c:	490a      	ldr	r1, [pc, #40]	; (bcb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    bc8e:	780a      	ldrb	r2, [r1, #0]
    bc90:	b16a      	cbz	r2, bcae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    bc92:	2200      	movs	r2, #0
    bc94:	7042      	strb	r2, [r0, #1]
    bc96:	2303      	movs	r3, #3
    bc98:	7003      	strb	r3, [r0, #0]
    bc9a:	2301      	movs	r3, #1
    bc9c:	7103      	strb	r3, [r0, #4]
    bc9e:	700a      	strb	r2, [r1, #0]
    bca0:	4618      	mov	r0, r3
    bca2:	bd10      	pop	{r4, pc}
    bca4:	f641 1146 	movw	r1, #6470	; 0x1946
    bca8:	2039      	movs	r0, #57	; 0x39
    bcaa:	f7f9 f835 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bcb2:	f7fb b881 	b.w	6db8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    bcb6:	0000      	.short	0x0000
    bcb8:	20001270 	.word	0x20001270
    bcbc:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcc0:	4692      	mov	sl, r2
    bcc2:	460f      	mov	r7, r1
    bcc4:	4681      	mov	r9, r0
    bcc6:	f004 fbd5 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    bcca:	2800      	cmp	r0, #0
    bccc:	d063      	beq.n	bd96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    bcce:	4933      	ldr	r1, [pc, #204]	; (bd9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    bcd0:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    bcd4:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    bcd8:	8808      	ldrh	r0, [r1, #0]
    bcda:	4290      	cmp	r0, r2
    bcdc:	d300      	bcc.n	bce0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    bcde:	4610      	mov	r0, r2
    bce0:	4680      	mov	r8, r0
    bce2:	8888      	ldrh	r0, [r1, #4]
    bce4:	42b0      	cmp	r0, r6
    bce6:	d200      	bcs.n	bcea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    bce8:	4606      	mov	r6, r0
    bcea:	884c      	ldrh	r4, [r1, #2]
    bcec:	f640 0048 	movw	r0, #2120	; 0x848
    bcf0:	4284      	cmp	r4, r0
    bcf2:	d300      	bcc.n	bcf6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    bcf4:	4604      	mov	r4, r0
    bcf6:	88cd      	ldrh	r5, [r1, #6]
    bcf8:	4285      	cmp	r5, r0
    bcfa:	d300      	bcc.n	bcfe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    bcfc:	4605      	mov	r5, r0
    bcfe:	4284      	cmp	r4, r0
    bd00:	d300      	bcc.n	bd04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    bd02:	4604      	mov	r4, r0
    bd04:	f44f 71a4 	mov.w	r1, #328	; 0x148
    bd08:	2e1b      	cmp	r6, #27
    bd0a:	d001      	beq.n	bd10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    bd0c:	428d      	cmp	r5, r1
    bd0e:	d104      	bne.n	bd1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    bd10:	f1b8 0f1b 	cmp.w	r8, #27
    bd14:	d03f      	beq.n	bd96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    bd16:	428c      	cmp	r4, r1
    bd18:	d03d      	beq.n	bd96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    bd1a:	466a      	mov	r2, sp
    bd1c:	4651      	mov	r1, sl
    bd1e:	4648      	mov	r0, r9
    bd20:	f004 fb2c 	bl	1037c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    bd24:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    bd28:	4641      	mov	r1, r8
    bd2a:	4540      	cmp	r0, r8
    bd2c:	d900      	bls.n	bd30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    bd2e:	4608      	mov	r0, r1
    bd30:	80f8      	strh	r0, [r7, #6]
    bd32:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    bd36:	42a1      	cmp	r1, r4
    bd38:	d800      	bhi.n	bd3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    bd3a:	460c      	mov	r4, r1
    bd3c:	813c      	strh	r4, [r7, #8]
    bd3e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    bd42:	42b1      	cmp	r1, r6
    bd44:	d800      	bhi.n	bd48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    bd46:	460e      	mov	r6, r1
    bd48:	807e      	strh	r6, [r7, #2]
    bd4a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    bd4e:	42a9      	cmp	r1, r5
    bd50:	d900      	bls.n	bd54 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    bd52:	4629      	mov	r1, r5
    bd54:	80b9      	strh	r1, [r7, #4]
    bd56:	2201      	movs	r2, #1
    bd58:	703a      	strb	r2, [r7, #0]
    bd5a:	381b      	subs	r0, #27
    bd5c:	28e0      	cmp	r0, #224	; 0xe0
    bd5e:	d902      	bls.n	bd66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    bd60:	f640 4172 	movw	r1, #3186	; 0xc72
    bd64:	e014      	b.n	bd90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    bd66:	3e1b      	subs	r6, #27
    bd68:	2ee0      	cmp	r6, #224	; 0xe0
    bd6a:	d902      	bls.n	bd72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    bd6c:	f640 4174 	movw	r1, #3188	; 0xc74
    bd70:	e00e      	b.n	bd90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    bd72:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    bd76:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    bd7a:	4284      	cmp	r4, r0
    bd7c:	d902      	bls.n	bd84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    bd7e:	f640 4176 	movw	r1, #3190	; 0xc76
    bd82:	e005      	b.n	bd90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    bd84:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    bd88:	4281      	cmp	r1, r0
    bd8a:	d904      	bls.n	bd96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    bd8c:	f640 4178 	movw	r1, #3192	; 0xc78
    bd90:	2039      	movs	r0, #57	; 0x39
    bd92:	f7f8 ffc1 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd96:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd9a:	0000      	.short	0x0000
    bd9c:	200001ee 	.word	0x200001ee
    bda0:	4904      	ldr	r1, [pc, #16]	; (bdb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    bda2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    bda6:	4288      	cmp	r0, r1
    bda8:	d301      	bcc.n	bdae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    bdaa:	2000      	movs	r0, #0
    bdac:	4770      	bx	lr
    bdae:	2001      	movs	r0, #1
    bdb0:	4770      	bx	lr
    bdb2:	0000      	.short	0x0000
    bdb4:	0270f3cc 	.word	0x0270f3cc
    bdb8:	4904      	ldr	r1, [pc, #16]	; (bdcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>)
    bdba:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    bdbe:	4288      	cmp	r0, r1
    bdc0:	d301      	bcc.n	bdc6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    bdc2:	2000      	movs	r0, #0
    bdc4:	4770      	bx	lr
    bdc6:	2001      	movs	r0, #1
    bdc8:	4770      	bx	lr
    bdca:	0000      	.short	0x0000
    bdcc:	009c363d 	.word	0x009c363d
    bdd0:	4904      	ldr	r1, [pc, #16]	; (bde4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>)
    bdd2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    bdd6:	4288      	cmp	r0, r1
    bdd8:	d301      	bcc.n	bdde <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    bdda:	2000      	movs	r0, #0
    bddc:	4770      	bx	lr
    bdde:	2001      	movs	r0, #1
    bde0:	4770      	bx	lr
    bde2:	0000      	.short	0x0000
    bde4:	009c363d 	.word	0x009c363d
    bde8:	b530      	push	{r4, r5, lr}
    bdea:	2200      	movs	r2, #0
    bdec:	4d07      	ldr	r5, [pc, #28]	; (be0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    bdee:	e009      	b.n	be04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    bdf0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    bdf4:	462b      	mov	r3, r5
    bdf6:	429c      	cmp	r4, r3
    bdf8:	d800      	bhi.n	bdfc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x174>
    bdfa:	4623      	mov	r3, r4
    bdfc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    be00:	1c52      	adds	r2, r2, #1
    be02:	b2d2      	uxtb	r2, r2
    be04:	428a      	cmp	r2, r1
    be06:	d3f3      	bcc.n	bdf0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x168>
    be08:	bd30      	pop	{r4, r5, pc}
    be0a:	0000      	.short	0x0000
    be0c:	00f42400 	.word	0x00f42400
    be10:	4a09      	ldr	r2, [pc, #36]	; (be38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>)
    be12:	4290      	cmp	r0, r2
    be14:	d80b      	bhi.n	be2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a6>
    be16:	2901      	cmp	r1, #1
    be18:	d002      	beq.n	be20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    be1a:	2904      	cmp	r1, #4
    be1c:	d003      	beq.n	be26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    be1e:	e008      	b.n	be32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1aa>
    be20:	f240 7153 	movw	r1, #1875	; 0x753
    be24:	e001      	b.n	be2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a2>
    be26:	f640 11c4 	movw	r1, #2500	; 0x9c4
    be2a:	4288      	cmp	r0, r1
    be2c:	d201      	bcs.n	be32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1aa>
    be2e:	2000      	movs	r0, #0
    be30:	4770      	bx	lr
    be32:	2001      	movs	r0, #1
    be34:	4770      	bx	lr
    be36:	0000      	.short	0x0000
    be38:	0270fd8f 	.word	0x0270fd8f
    be3c:	b510      	push	{r4, lr}
    be3e:	4604      	mov	r4, r0
    be40:	88c1      	ldrh	r1, [r0, #6]
    be42:	8880      	ldrh	r0, [r0, #4]
    be44:	f004 f94e 	bl	100e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    be48:	2800      	cmp	r0, #0
    be4a:	d10f      	bne.n	be6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e4>
    be4c:	8861      	ldrh	r1, [r4, #2]
    be4e:	8820      	ldrh	r0, [r4, #0]
    be50:	f004 f948 	bl	100e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    be54:	2800      	cmp	r0, #0
    be56:	d109      	bne.n	be6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e4>
    be58:	4805      	ldr	r0, [pc, #20]	; (be70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e8>)
    be5a:	88a1      	ldrh	r1, [r4, #4]
    be5c:	8081      	strh	r1, [r0, #4]
    be5e:	8821      	ldrh	r1, [r4, #0]
    be60:	8001      	strh	r1, [r0, #0]
    be62:	88e1      	ldrh	r1, [r4, #6]
    be64:	80c1      	strh	r1, [r0, #6]
    be66:	8861      	ldrh	r1, [r4, #2]
    be68:	8041      	strh	r1, [r0, #2]
    be6a:	2000      	movs	r0, #0
    be6c:	bd10      	pop	{r4, pc}
    be6e:	0000      	.short	0x0000
    be70:	200001ee 	.word	0x200001ee
    be74:	0b12b00b 	.word	0x0b12b00b
    be78:	12b00059 	.word	0x12b00059
    be7c:	05060708 	.word	0x05060708
    be80:	00020304 	.word	0x00020304
    be84:	f0f4f8fc 	.word	0xf0f4f8fc
    be88:	0304d8ec 	.word	0x0304d8ec
    be8c:	f4f8fc00 	.word	0xf4f8fc00
    be90:	00d8ecf0 	.word	0x00d8ecf0

0000be94 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    be94:	b510      	push	{r4, lr}
    be96:	460c      	mov	r4, r1
    be98:	f7ff fb6c 	bl	b574 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    be9c:	4804      	ldr	r0, [pc, #16]	; (beb0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    be9e:	6004      	str	r4, [r0, #0]
    bea0:	6840      	ldr	r0, [r0, #4]
    bea2:	f004 fbbc 	bl	1061e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    bea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    beaa:	f004 b8b0 	b.w	1000e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    beae:	0000      	.short	0x0000
    beb0:	200001f8 	.word	0x200001f8

0000beb4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    beb4:	b510      	push	{r4, lr}
    beb6:	4c07      	ldr	r4, [pc, #28]	; (bed4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    beb8:	68a0      	ldr	r0, [r4, #8]
    beba:	f004 fbb0 	bl	1061e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    bebe:	68e0      	ldr	r0, [r4, #12]
    bec0:	f004 fbad 	bl	1061e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    bec4:	f002 fc32 	bl	e72c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    bec8:	f7fa fbcc 	bl	6664 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    becc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bed0:	f7ff beac 	b.w	bc2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    bed4:	200001f8 	.word	0x200001f8

0000bed8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    bed8:	b500      	push	{lr}
    beda:	4905      	ldr	r1, [pc, #20]	; (bef0 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    bedc:	4805      	ldr	r0, [pc, #20]	; (bef4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    bede:	f004 fb91 	bl	10604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bee2:	4804      	ldr	r0, [pc, #16]	; (bef4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    bee4:	4904      	ldr	r1, [pc, #16]	; (bef8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    bee6:	1d00      	adds	r0, r0, #4
    bee8:	f85d eb04 	ldr.w	lr, [sp], #4
    beec:	f004 bb8a 	b.w	10604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bef0:	20000238 	.word	0x20000238
    bef4:	200001fc 	.word	0x200001fc
    bef8:	20000240 	.word	0x20000240

0000befc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    befc:	b500      	push	{lr}
    befe:	4908      	ldr	r1, [pc, #32]	; (bf20 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    bf00:	4808      	ldr	r0, [pc, #32]	; (bf24 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    bf02:	f004 fb7f 	bl	10604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bf06:	4807      	ldr	r0, [pc, #28]	; (bf24 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    bf08:	4907      	ldr	r1, [pc, #28]	; (bf28 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    bf0a:	1d00      	adds	r0, r0, #4
    bf0c:	f004 fb7a 	bl	10604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bf10:	4804      	ldr	r0, [pc, #16]	; (bf24 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    bf12:	4906      	ldr	r1, [pc, #24]	; (bf2c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    bf14:	3008      	adds	r0, #8
    bf16:	f85d eb04 	ldr.w	lr, [sp], #4
    bf1a:	f004 bb73 	b.w	10604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bf1e:	0000      	.short	0x0000
    bf20:	20000228 	.word	0x20000228
    bf24:	200001fc 	.word	0x200001fc
    bf28:	20000230 	.word	0x20000230
    bf2c:	20000220 	.word	0x20000220
    bf30:	b510      	push	{r4, lr}
    bf32:	f002 fbe9 	bl	e708 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    bf36:	4809      	ldr	r0, [pc, #36]	; (bf5c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    bf38:	f7f9 fda0 	bl	5a7c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    bf3c:	2000      	movs	r0, #0
    bf3e:	f7f9 f8b3 	bl	50a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    bf42:	4908      	ldr	r1, [pc, #32]	; (bf64 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x68>)
    bf44:	4806      	ldr	r0, [pc, #24]	; (bf60 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>)
    bf46:	6008      	str	r0, [r1, #0]
    bf48:	f7fd fd62 	bl	9a10 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    bf4c:	4907      	ldr	r1, [pc, #28]	; (bf6c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x70>)
    bf4e:	4806      	ldr	r0, [pc, #24]	; (bf68 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x6c>)
    bf50:	6008      	str	r0, [r1, #0]
    bf52:	4908      	ldr	r1, [pc, #32]	; (bf74 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x78>)
    bf54:	4806      	ldr	r0, [pc, #24]	; (bf70 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x74>)
    bf56:	6008      	str	r0, [r1, #0]
    bf58:	bd10      	pop	{r4, pc}
    bf5a:	0000      	.short	0x0000
    bf5c:	200015b5 	.word	0x200015b5
    bf60:	00005a29 	.word	0x00005a29
    bf64:	2000021c 	.word	0x2000021c
    bf68:	000097a9 	.word	0x000097a9
    bf6c:	20000210 	.word	0x20000210
    bf70:	00006e5d 	.word	0x00006e5d
    bf74:	2000020c 	.word	0x2000020c
    bf78:	b510      	push	{r4, lr}
    bf7a:	f7fb fb6d 	bl	7658 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    bf7e:	f7ff fae9 	bl	b554 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    bf82:	f7fc fc47 	bl	8814 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ>
    bf86:	4805      	ldr	r0, [pc, #20]	; (bf9c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa0>)
    bf88:	f7fb fb02 	bl	7590 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    bf8c:	4905      	ldr	r1, [pc, #20]	; (bfa4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa8>)
    bf8e:	4804      	ldr	r0, [pc, #16]	; (bfa0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa4>)
    bf90:	6008      	str	r0, [r1, #0]
    bf92:	4906      	ldr	r1, [pc, #24]	; (bfac <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xb0>)
    bf94:	4804      	ldr	r0, [pc, #16]	; (bfa8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xac>)
    bf96:	6008      	str	r0, [r1, #0]
    bf98:	bd10      	pop	{r4, pc}
    bf9a:	0000      	.short	0x0000
    bf9c:	200015b5 	.word	0x200015b5
    bfa0:	000074e5 	.word	0x000074e5
    bfa4:	20000214 	.word	0x20000214
    bfa8:	00006f99 	.word	0x00006f99
    bfac:	20000218 	.word	0x20000218

0000bfb0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    bfb0:	2101      	movs	r1, #1
    bfb2:	4081      	lsls	r1, r0
    bfb4:	4802      	ldr	r0, [pc, #8]	; (bfc0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    bfb6:	6802      	ldr	r2, [r0, #0]
    bfb8:	4311      	orrs	r1, r2
    bfba:	6001      	str	r1, [r0, #0]
    bfbc:	4770      	bx	lr
    bfbe:	0000      	.short	0x0000
    bfc0:	20000248 	.word	0x20000248

0000bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    bfc4:	4801      	ldr	r0, [pc, #4]	; (bfcc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    bfc6:	6800      	ldr	r0, [r0, #0]
    bfc8:	4770      	bx	lr
    bfca:	0000      	.short	0x0000
    bfcc:	20000248 	.word	0x20000248

0000bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    bfd0:	4803      	ldr	r0, [pc, #12]	; (bfe0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    bfd2:	8800      	ldrh	r0, [r0, #0]
    bfd4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    bfd8:	0040      	lsls	r0, r0, #1
    bfda:	1c40      	adds	r0, r0, #1
    bfdc:	4770      	bx	lr
    bfde:	0000      	.short	0x0000
    bfe0:	20000248 	.word	0x20000248

0000bfe4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    bfe4:	b510      	push	{r4, lr}
    bfe6:	f7f8 faf5 	bl	45d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    bfea:	2200      	movs	r2, #0
    bfec:	4b08      	ldr	r3, [pc, #32]	; (c010 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    bfee:	4611      	mov	r1, r2
    bff0:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    bff4:	4284      	cmp	r4, r0
    bff6:	d303      	bcc.n	c000 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    bff8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    bffc:	7882      	ldrb	r2, [r0, #2]
    bffe:	e003      	b.n	c008 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    c000:	1c49      	adds	r1, r1, #1
    c002:	b2c9      	uxtb	r1, r1
    c004:	290c      	cmp	r1, #12
    c006:	d3f3      	bcc.n	bff0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    c008:	4802      	ldr	r0, [pc, #8]	; (c014 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    c00a:	7002      	strb	r2, [r0, #0]
    c00c:	bd10      	pop	{r4, pc}
    c00e:	0000      	.short	0x0000
    c010:	0001068a 	.word	0x0001068a
    c014:	20000297 	.word	0x20000297

0000c018 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    c018:	4801      	ldr	r0, [pc, #4]	; (c020 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    c01a:	7800      	ldrb	r0, [r0, #0]
    c01c:	4770      	bx	lr
    c01e:	0000      	.short	0x0000
    c020:	20000297 	.word	0x20000297

0000c024 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    c024:	b570      	push	{r4, r5, r6, lr}
    c026:	4605      	mov	r5, r0
    c028:	4616      	mov	r6, r2
    c02a:	460c      	mov	r4, r1
    c02c:	2002      	movs	r0, #2
    c02e:	f000 f9f9 	bl	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c032:	4906      	ldr	r1, [pc, #24]	; (c04c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    c034:	2001      	movs	r0, #1
    c036:	1ef6      	subs	r6, r6, #3
    c038:	7008      	strb	r0, [r1, #0]
    c03a:	4805      	ldr	r0, [pc, #20]	; (c050 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    c03c:	6006      	str	r6, [r0, #0]
    c03e:	4804      	ldr	r0, [pc, #16]	; (c050 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    c040:	3808      	subs	r0, #8
    c042:	6005      	str	r5, [r0, #0]
    c044:	1f00      	subs	r0, r0, #4
    c046:	6004      	str	r4, [r0, #0]
    c048:	bd70      	pop	{r4, r5, r6, pc}
    c04a:	0000      	.short	0x0000
    c04c:	20000298 	.word	0x20000298
    c050:	4000f510 	.word	0x4000f510

0000c054 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    c054:	b510      	push	{r4, lr}
    c056:	4c0c      	ldr	r4, [pc, #48]	; (c088 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    c058:	7820      	ldrb	r0, [r4, #0]
    c05a:	b180      	cbz	r0, c07e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    c05c:	490b      	ldr	r1, [pc, #44]	; (c08c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    c05e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c062:	6008      	str	r0, [r1, #0]
    c064:	f000 f86a 	bl	c13c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    c068:	2100      	movs	r1, #0
    c06a:	b120      	cbz	r0, c076 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    c06c:	2001      	movs	r0, #1
    c06e:	7060      	strb	r0, [r4, #1]
    c070:	4807      	ldr	r0, [pc, #28]	; (c090 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    c072:	6800      	ldr	r0, [r0, #0]
    c074:	e001      	b.n	c07a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    c076:	7061      	strb	r1, [r4, #1]
    c078:	2010      	movs	r0, #16
    c07a:	70a0      	strb	r0, [r4, #2]
    c07c:	7021      	strb	r1, [r4, #0]
    c07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c082:	2000      	movs	r0, #0
    c084:	f000 b9ce 	b.w	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c088:	20000298 	.word	0x20000298
    c08c:	4001f508 	.word	0x4001f508
    c090:	4000f400 	.word	0x4000f400

0000c094 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    c094:	b510      	push	{r4, lr}
    c096:	2002      	movs	r0, #2
    c098:	f000 f9c4 	bl	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c09c:	4904      	ldr	r1, [pc, #16]	; (c0b0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    c09e:	2001      	movs	r0, #1
    c0a0:	7008      	strb	r0, [r1, #0]
    c0a2:	f000 f859 	bl	c158 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    c0a6:	4903      	ldr	r1, [pc, #12]	; (c0b4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    c0a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c0ac:	6008      	str	r0, [r1, #0]
    c0ae:	bd10      	pop	{r4, pc}
    c0b0:	20000298 	.word	0x20000298
    c0b4:	4001f504 	.word	0x4001f504

0000c0b8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    c0b8:	4803      	ldr	r0, [pc, #12]	; (c0c8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    c0ba:	2100      	movs	r1, #0
    c0bc:	7001      	strb	r1, [r0, #0]
    c0be:	7041      	strb	r1, [r0, #1]
    c0c0:	2110      	movs	r1, #16
    c0c2:	7081      	strb	r1, [r0, #2]
    c0c4:	4770      	bx	lr
    c0c6:	0000      	.short	0x0000
    c0c8:	20000298 	.word	0x20000298

0000c0cc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    c0cc:	4807      	ldr	r0, [pc, #28]	; (c0ec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    c0ce:	b510      	push	{r4, lr}
    c0d0:	7801      	ldrb	r1, [r0, #0]
    c0d2:	b141      	cbz	r1, c0e6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    c0d4:	f000 f832 	bl	c13c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    c0d8:	b118      	cbz	r0, c0e2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    c0da:	4805      	ldr	r0, [pc, #20]	; (c0f0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    c0dc:	6800      	ldr	r0, [r0, #0]
    c0de:	b2c0      	uxtb	r0, r0
    c0e0:	bd10      	pop	{r4, pc}
    c0e2:	2010      	movs	r0, #16
    c0e4:	bd10      	pop	{r4, pc}
    c0e6:	7880      	ldrb	r0, [r0, #2]
    c0e8:	bd10      	pop	{r4, pc}
    c0ea:	0000      	.short	0x0000
    c0ec:	20000298 	.word	0x20000298
    c0f0:	4000f400 	.word	0x4000f400

0000c0f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    c0f4:	4808      	ldr	r0, [pc, #32]	; (c118 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    c0f6:	b510      	push	{r4, lr}
    c0f8:	7801      	ldrb	r1, [r0, #0]
    c0fa:	b159      	cbz	r1, c114 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    c0fc:	4807      	ldr	r0, [pc, #28]	; (c11c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    c0fe:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c102:	b128      	cbz	r0, c110 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    c104:	f000 f80c 	bl	c120 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    c108:	2800      	cmp	r0, #0
    c10a:	d000      	beq.n	c10e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    c10c:	2001      	movs	r0, #1
    c10e:	bd10      	pop	{r4, pc}
    c110:	2002      	movs	r0, #2
    c112:	bd10      	pop	{r4, pc}
    c114:	7840      	ldrb	r0, [r0, #1]
    c116:	bd10      	pop	{r4, pc}
    c118:	20000298 	.word	0x20000298
    c11c:	4000f000 	.word	0x4000f000
    c120:	4805      	ldr	r0, [pc, #20]	; (c138 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    c122:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    c126:	b111      	cbz	r1, c12e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    c128:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    c12c:	b108      	cbz	r0, c132 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    c12e:	2000      	movs	r0, #0
    c130:	4770      	bx	lr
    c132:	2001      	movs	r0, #1
    c134:	4770      	bx	lr
    c136:	0000      	.short	0x0000
    c138:	4000f000 	.word	0x4000f000
    c13c:	4805      	ldr	r0, [pc, #20]	; (c154 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    c13e:	b510      	push	{r4, lr}
    c140:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c144:	b120      	cbz	r0, c150 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    c146:	f7ff ffeb 	bl	c120 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    c14a:	b108      	cbz	r0, c150 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    c14c:	2001      	movs	r0, #1
    c14e:	bd10      	pop	{r4, pc}
    c150:	2000      	movs	r0, #0
    c152:	bd10      	pop	{r4, pc}
    c154:	4000f000 	.word	0x4000f000
    c158:	4804      	ldr	r0, [pc, #16]	; (c16c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    c15a:	2100      	movs	r1, #0
    c15c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c160:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c164:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c168:	4770      	bx	lr
    c16a:	0000      	.short	0x0000
    c16c:	4000f000 	.word	0x4000f000

0000c170 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    c170:	4a08      	ldr	r2, [pc, #32]	; (c194 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    c172:	b510      	push	{r4, lr}
    c174:	e9c2 0102 	strd	r0, r1, [r2, #8]
    c178:	4907      	ldr	r1, [pc, #28]	; (c198 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    c17a:	4610      	mov	r0, r2
    c17c:	f7f8 fc6c 	bl	4a58 <mpsl_fem_lna_configuration_set>
    c180:	2800      	cmp	r0, #0
    c182:	d005      	beq.n	c190 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    c184:	1c40      	adds	r0, r0, #1
    c186:	d003      	beq.n	c190 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    c188:	217d      	movs	r1, #125	; 0x7d
    c18a:	2040      	movs	r0, #64	; 0x40
    c18c:	f7f8 fdc4 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c190:	bd10      	pop	{r4, pc}
    c192:	0000      	.short	0x0000
    c194:	2000024c 	.word	0x2000024c
    c198:	0000c1c8 	.word	0x0000c1c8

0000c19c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    c19c:	4a08      	ldr	r2, [pc, #32]	; (c1c0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    c19e:	b510      	push	{r4, lr}
    c1a0:	e9c2 0102 	strd	r0, r1, [r2, #8]
    c1a4:	4907      	ldr	r1, [pc, #28]	; (c1c4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    c1a6:	4610      	mov	r0, r2
    c1a8:	f7f8 fc62 	bl	4a70 <mpsl_fem_pa_configuration_set>
    c1ac:	2800      	cmp	r0, #0
    c1ae:	d005      	beq.n	c1bc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    c1b0:	1c40      	adds	r0, r0, #1
    c1b2:	d003      	beq.n	c1bc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    c1b4:	2172      	movs	r1, #114	; 0x72
    c1b6:	2040      	movs	r0, #64	; 0x40
    c1b8:	f7f8 fdae 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1bc:	bd10      	pop	{r4, pc}
    c1be:	0000      	.short	0x0000
    c1c0:	2000024c 	.word	0x2000024c
    c1c4:	0000c1c8 	.word	0x0000c1c8
    c1c8:	00000001 	.word	0x00000001
    c1cc:	40001110 	.word	0x40001110
	...

0000c1e0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    c1e0:	4a07      	ldr	r2, [pc, #28]	; (c200 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    c1e2:	b510      	push	{r4, lr}
    c1e4:	7853      	ldrb	r3, [r2, #1]
    c1e6:	b133      	cbz	r3, c1f6 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    c1e8:	4b06      	ldr	r3, [pc, #24]	; (c204 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    c1ea:	6019      	str	r1, [r3, #0]
    c1ec:	1d19      	adds	r1, r3, #4
    c1ee:	6008      	str	r0, [r1, #0]
    c1f0:	2001      	movs	r0, #1
    c1f2:	7090      	strb	r0, [r2, #2]
    c1f4:	bd10      	pop	{r4, pc}
    c1f6:	21ba      	movs	r1, #186	; 0xba
    c1f8:	203c      	movs	r0, #60	; 0x3c
    c1fa:	f7f8 fd8d 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1fe:	0000      	.short	0x0000
    c200:	2000029b 	.word	0x2000029b
    c204:	4000f50c 	.word	0x4000f50c

0000c208 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    c208:	4809      	ldr	r0, [pc, #36]	; (c230 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    c20a:	b510      	push	{r4, lr}
    c20c:	7801      	ldrb	r1, [r0, #0]
    c20e:	b151      	cbz	r1, c226 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    c210:	7880      	ldrb	r0, [r0, #2]
    c212:	b140      	cbz	r0, c226 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    c214:	4907      	ldr	r1, [pc, #28]	; (c234 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    c216:	2000      	movs	r0, #0
    c218:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    c21c:	4906      	ldr	r1, [pc, #24]	; (c238 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    c21e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    c222:	6008      	str	r0, [r1, #0]
    c224:	bd10      	pop	{r4, pc}
    c226:	21e1      	movs	r1, #225	; 0xe1
    c228:	203c      	movs	r0, #60	; 0x3c
    c22a:	f7f8 fd75 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c22e:	0000      	.short	0x0000
    c230:	2000029b 	.word	0x2000029b
    c234:	4000f000 	.word	0x4000f000
    c238:	4001f504 	.word	0x4001f504

0000c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    c23c:	b570      	push	{r4, r5, r6, lr}
    c23e:	4c0b      	ldr	r4, [pc, #44]	; (c26c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    c240:	2500      	movs	r5, #0
    c242:	7820      	ldrb	r0, [r4, #0]
    c244:	b158      	cbz	r0, c25e <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    c246:	f000 f8e5 	bl	c414 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    c24a:	4809      	ldr	r0, [pc, #36]	; (c270 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    c24c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    c250:	b118      	cbz	r0, c25a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    c252:	4808      	ldr	r0, [pc, #32]	; (c274 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    c254:	6800      	ldr	r0, [r0, #0]
    c256:	70e0      	strb	r0, [r4, #3]
    c258:	e000      	b.n	c25c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    c25a:	70e5      	strb	r5, [r4, #3]
    c25c:	7025      	strb	r5, [r4, #0]
    c25e:	2000      	movs	r0, #0
    c260:	f000 f8e0 	bl	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c264:	7065      	strb	r5, [r4, #1]
    c266:	70a5      	strb	r5, [r4, #2]
    c268:	bd70      	pop	{r4, r5, r6, pc}
    c26a:	0000      	.short	0x0000
    c26c:	2000029b 	.word	0x2000029b
    c270:	4000f000 	.word	0x4000f000
    c274:	4000f400 	.word	0x4000f400

0000c278 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    c278:	480d      	ldr	r0, [pc, #52]	; (c2b0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    c27a:	b510      	push	{r4, lr}
    c27c:	7801      	ldrb	r1, [r0, #0]
    c27e:	b191      	cbz	r1, c2a6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    c280:	7880      	ldrb	r0, [r0, #2]
    c282:	b180      	cbz	r0, c2a6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    c284:	490b      	ldr	r1, [pc, #44]	; (c2b4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    c286:	2000      	movs	r0, #0
    c288:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    c28c:	4a0a      	ldr	r2, [pc, #40]	; (c2b8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    c28e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    c292:	6010      	str	r0, [r2, #0]
    c294:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    c298:	2a01      	cmp	r2, #1
    c29a:	d103      	bne.n	c2a4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    c29c:	604a      	str	r2, [r1, #4]
    c29e:	4906      	ldr	r1, [pc, #24]	; (c2b8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    c2a0:	1d09      	adds	r1, r1, #4
    c2a2:	6008      	str	r0, [r1, #0]
    c2a4:	bd10      	pop	{r4, pc}
    c2a6:	21d1      	movs	r1, #209	; 0xd1
    c2a8:	203c      	movs	r0, #60	; 0x3c
    c2aa:	f7f8 fd35 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2ae:	0000      	.short	0x0000
    c2b0:	2000029b 	.word	0x2000029b
    c2b4:	4000f000 	.word	0x4000f000
    c2b8:	4001f504 	.word	0x4001f504

0000c2bc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    c2bc:	4803      	ldr	r0, [pc, #12]	; (c2cc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    c2be:	2100      	movs	r1, #0
    c2c0:	7001      	strb	r1, [r0, #0]
    c2c2:	7041      	strb	r1, [r0, #1]
    c2c4:	7081      	strb	r1, [r0, #2]
    c2c6:	70c1      	strb	r1, [r0, #3]
    c2c8:	4770      	bx	lr
    c2ca:	0000      	.short	0x0000
    c2cc:	2000029b 	.word	0x2000029b

0000c2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    c2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2d4:	4605      	mov	r5, r0
    c2d6:	461c      	mov	r4, r3
    c2d8:	4690      	mov	r8, r2
    c2da:	460f      	mov	r7, r1
    c2dc:	2001      	movs	r0, #1
    c2de:	f000 f8a1 	bl	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c2e2:	4e12      	ldr	r6, [pc, #72]	; (c32c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    c2e4:	4812      	ldr	r0, [pc, #72]	; (c330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c2e6:	7134      	strb	r4, [r6, #4]
    c2e8:	6007      	str	r7, [r0, #0]
    c2ea:	4911      	ldr	r1, [pc, #68]	; (c330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c2ec:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    c2f0:	1f09      	subs	r1, r1, #4
    c2f2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    c2f6:	6008      	str	r0, [r1, #0]
    c2f8:	f001 f8b2 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c2fc:	b938      	cbnz	r0, c30e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    c2fe:	480c      	ldr	r0, [pc, #48]	; (c330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c300:	3010      	adds	r0, #16
    c302:	6801      	ldr	r1, [r0, #0]
    c304:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    c308:	ea41 0108 	orr.w	r1, r1, r8
    c30c:	6001      	str	r1, [r0, #0]
    c30e:	f000 f881 	bl	c414 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    c312:	b93d      	cbnz	r5, c324 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    c314:	4808      	ldr	r0, [pc, #32]	; (c338 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    c316:	4a07      	ldr	r2, [pc, #28]	; (c334 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    c318:	4906      	ldr	r1, [pc, #24]	; (c334 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    c31a:	3afc      	subs	r2, #252	; 0xfc
    c31c:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    c320:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    c324:	2001      	movs	r0, #1
    c326:	7070      	strb	r0, [r6, #1]
    c328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c32c:	2000029b 	.word	0x2000029b
    c330:	4000f508 	.word	0x4000f508
    c334:	4000f100 	.word	0x4000f100
    c338:	4001f088 	.word	0x4001f088

0000c33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    c33c:	4808      	ldr	r0, [pc, #32]	; (c360 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    c33e:	b510      	push	{r4, lr}
    c340:	7841      	ldrb	r1, [r0, #1]
    c342:	b149      	cbz	r1, c358 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    c344:	2101      	movs	r1, #1
    c346:	7001      	strb	r1, [r0, #0]
    c348:	4806      	ldr	r0, [pc, #24]	; (c364 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    c34a:	2200      	movs	r2, #0
    c34c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    c350:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    c354:	6001      	str	r1, [r0, #0]
    c356:	bd10      	pop	{r4, pc}
    c358:	21c5      	movs	r1, #197	; 0xc5
    c35a:	203c      	movs	r0, #60	; 0x3c
    c35c:	f7f8 fcdc 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c360:	2000029b 	.word	0x2000029b
    c364:	4000f000 	.word	0x4000f000

0000c368 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    c368:	4806      	ldr	r0, [pc, #24]	; (c384 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    c36a:	7801      	ldrb	r1, [r0, #0]
    c36c:	b141      	cbz	r1, c380 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    c36e:	4806      	ldr	r0, [pc, #24]	; (c388 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    c370:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    c374:	2800      	cmp	r0, #0
    c376:	d002      	beq.n	c37e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    c378:	4804      	ldr	r0, [pc, #16]	; (c38c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    c37a:	6800      	ldr	r0, [r0, #0]
    c37c:	b2c0      	uxtb	r0, r0
    c37e:	4770      	bx	lr
    c380:	78c0      	ldrb	r0, [r0, #3]
    c382:	4770      	bx	lr
    c384:	2000029b 	.word	0x2000029b
    c388:	4000f000 	.word	0x4000f000
    c38c:	4000f400 	.word	0x4000f400

0000c390 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    c390:	4901      	ldr	r1, [pc, #4]	; (c398 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    c392:	2001      	movs	r0, #1
    c394:	6088      	str	r0, [r1, #8]
    c396:	4770      	bx	lr
    c398:	4000f000 	.word	0x4000f000

0000c39c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    c39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3a0:	2800      	cmp	r0, #0
    c3a2:	d02e      	beq.n	c402 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    c3a4:	4818      	ldr	r0, [pc, #96]	; (c408 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    c3a6:	7800      	ldrb	r0, [r0, #0]
    c3a8:	b1b0      	cbz	r0, c3d8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    c3aa:	4d18      	ldr	r5, [pc, #96]	; (c40c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    c3ac:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    c3b0:	2800      	cmp	r0, #0
    c3b2:	d126      	bne.n	c402 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    c3b4:	2702      	movs	r7, #2
    c3b6:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    c3ba:	4c15      	ldr	r4, [pc, #84]	; (c410 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    c3bc:	6820      	ldr	r0, [r4, #0]
    c3be:	43c0      	mvns	r0, r0
    c3c0:	f340 1600 	sbfx	r6, r0, #4, #1
    c3c4:	6820      	ldr	r0, [r4, #0]
    c3c6:	f040 0010 	orr.w	r0, r0, #16
    c3ca:	6020      	str	r0, [r4, #0]
    c3cc:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    c3d0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    c3d4:	1c76      	adds	r6, r6, #1
    c3d6:	e009      	b.n	c3ec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    c3d8:	f240 1153 	movw	r1, #339	; 0x153
    c3dc:	203c      	movs	r0, #60	; 0x3c
    c3de:	f7f8 fc9b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c3e2:	bf00      	nop
    c3e4:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    c3e8:	f7f8 fae0 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c3ec:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    c3f0:	2800      	cmp	r0, #0
    c3f2:	d0f7      	beq.n	c3e4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    c3f4:	b91e      	cbnz	r6, c3fe <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    c3f6:	6820      	ldr	r0, [r4, #0]
    c3f8:	f020 0010 	bic.w	r0, r0, #16
    c3fc:	6020      	str	r0, [r4, #0]
    c3fe:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    c402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c406:	0000      	.short	0x0000
    c408:	2000029b 	.word	0x2000029b
    c40c:	4000f000 	.word	0x4000f000
    c410:	e000ed10 	.word	0xe000ed10
    c414:	4902      	ldr	r1, [pc, #8]	; (c420 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    c416:	4801      	ldr	r0, [pc, #4]	; (c41c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    c418:	6008      	str	r0, [r1, #0]
    c41a:	4770      	bx	lr
    c41c:	02020000 	.word	0x02020000
    c420:	4001f508 	.word	0x4001f508

0000c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    c424:	b510      	push	{r4, lr}
    c426:	4604      	mov	r4, r0
    c428:	f000 f822 	bl	c470 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    c42c:	2c00      	cmp	r4, #0
    c42e:	d017      	beq.n	c460 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    c430:	4a0c      	ldr	r2, [pc, #48]	; (c464 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    c432:	480c      	ldr	r0, [pc, #48]	; (c464 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    c434:	490c      	ldr	r1, [pc, #48]	; (c468 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    c436:	3214      	adds	r2, #20
    c438:	4b0c      	ldr	r3, [pc, #48]	; (c46c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    c43a:	2c01      	cmp	r4, #1
    c43c:	d005      	beq.n	c44a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    c43e:	2c02      	cmp	r4, #2
    c440:	d008      	beq.n	c454 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    c442:	2183      	movs	r1, #131	; 0x83
    c444:	203d      	movs	r0, #61	; 0x3d
    c446:	f7f8 fc67 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c44a:	2402      	movs	r4, #2
    c44c:	6004      	str	r4, [r0, #0]
    c44e:	6011      	str	r1, [r2, #0]
    c450:	0620      	lsls	r0, r4, #24
    c452:	e004      	b.n	c45e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    c454:	2403      	movs	r4, #3
    c456:	6004      	str	r4, [r0, #0]
    c458:	6011      	str	r1, [r2, #0]
    c45a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c45e:	6018      	str	r0, [r3, #0]
    c460:	bd10      	pop	{r4, pc}
    c462:	0000      	.short	0x0000
    c464:	4000f500 	.word	0x4000f500
    c468:	200016b7 	.word	0x200016b7
    c46c:	4001f504 	.word	0x4001f504
    c470:	4804      	ldr	r0, [pc, #16]	; (c484 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    c472:	2100      	movs	r1, #0
    c474:	6001      	str	r1, [r0, #0]
    c476:	6001      	str	r1, [r0, #0]
    c478:	4903      	ldr	r1, [pc, #12]	; (c488 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    c47a:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    c47e:	6008      	str	r0, [r1, #0]
    c480:	4770      	bx	lr
    c482:	0000      	.short	0x0000
    c484:	4000f500 	.word	0x4000f500
    c488:	4001f508 	.word	0x4001f508

0000c48c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    c48c:	4805      	ldr	r0, [pc, #20]	; (c4a4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    c48e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c492:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    c496:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c49a:	4903      	ldr	r1, [pc, #12]	; (c4a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    c49c:	2000      	movs	r0, #0
    c49e:	6008      	str	r0, [r1, #0]
    c4a0:	4770      	bx	lr
    c4a2:	0000      	.short	0x0000
    c4a4:	40001000 	.word	0x40001000
    c4a8:	40001560 	.word	0x40001560

0000c4ac <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    c4ac:	4904      	ldr	r1, [pc, #16]	; (c4c0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    c4ae:	6008      	str	r0, [r1, #0]
    c4b0:	4804      	ldr	r0, [pc, #16]	; (c4c4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    c4b2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c4b6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    c4ba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c4be:	4770      	bx	lr
    c4c0:	40001560 	.word	0x40001560
    c4c4:	40001000 	.word	0x40001000

0000c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    c4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4ca:	4c1e      	ldr	r4, [pc, #120]	; (c544 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    c4cc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    c4d0:	2710      	movs	r7, #16
    c4d2:	f3c0 1600 	ubfx	r6, r0, #4, #1
    c4d6:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    c4da:	2002      	movs	r0, #2
    c4dc:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c4e0:	4819      	ldr	r0, [pc, #100]	; (c548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    c4e2:	2500      	movs	r5, #0
    c4e4:	491a      	ldr	r1, [pc, #104]	; (c550 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    c4e6:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    c4ea:	4818      	ldr	r0, [pc, #96]	; (c54c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    c4ec:	6008      	str	r0, [r1, #0]
    c4ee:	4819      	ldr	r0, [pc, #100]	; (c554 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    c4f0:	6800      	ldr	r0, [r0, #0]
    c4f2:	b1b0      	cbz	r0, c522 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    c4f4:	20ff      	movs	r0, #255	; 0xff
    c4f6:	f88d 0000 	strb.w	r0, [sp]
    c4fa:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    c4fe:	2001      	movs	r0, #1
    c500:	6120      	str	r0, [r4, #16]
    c502:	e004      	b.n	c50e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    c504:	f89d 0000 	ldrb.w	r0, [sp]
    c508:	1e40      	subs	r0, r0, #1
    c50a:	f88d 0000 	strb.w	r0, [sp]
    c50e:	f89d 0000 	ldrb.w	r0, [sp]
    c512:	b118      	cbz	r0, c51c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    c514:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    c518:	2800      	cmp	r0, #0
    c51a:	d0f3      	beq.n	c504 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    c51c:	f89d 0000 	ldrb.w	r0, [sp]
    c520:	b150      	cbz	r0, c538 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    c522:	f000 fc6f 	bl	ce04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    c526:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    c52a:	f000 fde7 	bl	d0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c52e:	2e00      	cmp	r6, #0
    c530:	d001      	beq.n	c536 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    c532:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    c536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c538:	f240 71a3 	movw	r1, #1955	; 0x7a3
    c53c:	203e      	movs	r0, #62	; 0x3e
    c53e:	f7f8 fbeb 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c542:	0000      	.short	0x0000
    c544:	40001000 	.word	0x40001000
    c548:	20001374 	.word	0x20001374
    c54c:	0c0e0000 	.word	0x0c0e0000
    c550:	4001f508 	.word	0x4001f508
    c554:	40001550 	.word	0x40001550

0000c558 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    c558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c55c:	4c1f      	ldr	r4, [pc, #124]	; (c5dc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    c55e:	4607      	mov	r7, r0
    c560:	4688      	mov	r8, r1
    c562:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    c566:	07c1      	lsls	r1, r0, #31
    c568:	d018      	beq.n	c59c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    c56a:	4a1d      	ldr	r2, [pc, #116]	; (c5e0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    c56c:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    c570:	6011      	str	r1, [r2, #0]
    c572:	4d1c      	ldr	r5, [pc, #112]	; (c5e4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    c574:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    c578:	f041 0101 	orr.w	r1, r1, #1
    c57c:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    c580:	f040 0002 	orr.w	r0, r0, #2
    c584:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c588:	4640      	mov	r0, r8
    c58a:	f000 fe1b 	bl	d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c58e:	f000 fbe7 	bl	cd60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c592:	2601      	movs	r6, #1
    c594:	b13f      	cbz	r7, c5a6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    c596:	2f01      	cmp	r7, #1
    c598:	d00e      	beq.n	c5b8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    c59a:	e016      	b.n	c5ca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    c59c:	f240 612d 	movw	r1, #1581	; 0x62d
    c5a0:	203e      	movs	r0, #62	; 0x3e
    c5a2:	f7f8 fbb9 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5a6:	4640      	mov	r0, r8
    c5a8:	f000 fbfa 	bl	cda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    c5ac:	4640      	mov	r0, r8
    c5ae:	f000 fbbb 	bl	cd28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c5b2:	7266      	strb	r6, [r4, #9]
    c5b4:	602e      	str	r6, [r5, #0]
    c5b6:	e008      	b.n	c5ca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    c5b8:	f000 fc1a 	bl	cdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    c5bc:	f000 fd68 	bl	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c5c0:	2002      	movs	r0, #2
    c5c2:	7260      	strb	r0, [r4, #9]
    c5c4:	f000 fc90 	bl	cee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    c5c8:	606e      	str	r6, [r5, #4]
    c5ca:	4807      	ldr	r0, [pc, #28]	; (c5e8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    c5cc:	64c6      	str	r6, [r0, #76]	; 0x4c
    c5ce:	4807      	ldr	r0, [pc, #28]	; (c5ec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    c5d0:	6801      	ldr	r1, [r0, #0]
    c5d2:	4638      	mov	r0, r7
    c5d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c5d8:	f004 b90e 	b.w	107f8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    c5dc:	20001374 	.word	0x20001374
    c5e0:	4001f504 	.word	0x4001f504
    c5e4:	40001000 	.word	0x40001000
    c5e8:	40008000 	.word	0x40008000
    c5ec:	4000854c 	.word	0x4000854c

0000c5f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    c5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c5f4:	4d35      	ldr	r5, [pc, #212]	; (c6cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    c5f6:	4606      	mov	r6, r0
    c5f8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c5fc:	4689      	mov	r9, r1
    c5fe:	6028      	str	r0, [r5, #0]
    c600:	4c33      	ldr	r4, [pc, #204]	; (c6d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    c602:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    c606:	f040 0002 	orr.w	r0, r0, #2
    c60a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c60e:	4608      	mov	r0, r1
    c610:	f000 fdd8 	bl	d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c614:	f000 fba4 	bl	cd60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c618:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c6d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    c61c:	2700      	movs	r7, #0
    c61e:	b116      	cbz	r6, c626 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    c620:	2e01      	cmp	r6, #1
    c622:	d027      	beq.n	c674 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    c624:	e03f      	b.n	c6a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    c626:	4648      	mov	r0, r9
    c628:	f000 fbba 	bl	cda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    c62c:	79e0      	ldrb	r0, [r4, #7]
    c62e:	2801      	cmp	r0, #1
    c630:	d105      	bne.n	c63e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    c632:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    c636:	f041 0108 	orr.w	r1, r1, #8
    c63a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    c63e:	4648      	mov	r0, r9
    c640:	f000 fb72 	bl	cd28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c644:	2001      	movs	r0, #1
    c646:	7260      	strb	r0, [r4, #9]
    c648:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c64a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    c64e:	62a0      	str	r0, [r4, #40]	; 0x28
    c650:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c654:	6028      	str	r0, [r5, #0]
    c656:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c65a:	f1b9 0f02 	cmp.w	r9, #2
    c65e:	d007      	beq.n	c670 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    c660:	f640 0034 	movw	r0, #2100	; 0x834
    c664:	f649 72ec 	movw	r2, #40940	; 0x9fec
    c668:	4410      	add	r0, r2
    c66a:	fbb0 f7f1 	udiv	r7, r0, r1
    c66e:	e01a      	b.n	c6a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    c670:	4608      	mov	r0, r1
    c672:	e7f7      	b.n	c664 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    c674:	f000 fbbc 	bl	cdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    c678:	f000 fd0a 	bl	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c67c:	79e0      	ldrb	r0, [r4, #7]
    c67e:	2801      	cmp	r0, #1
    c680:	d105      	bne.n	c68e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    c682:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    c686:	f041 0104 	orr.w	r1, r1, #4
    c68a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    c68e:	2002      	movs	r0, #2
    c690:	7260      	strb	r0, [r4, #9]
    c692:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c694:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    c698:	62a0      	str	r0, [r4, #40]	; 0x28
    c69a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    c69e:	6028      	str	r0, [r5, #0]
    c6a0:	2729      	movs	r7, #41	; 0x29
    c6a2:	f000 fc21 	bl	cee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    c6a6:	f000 fc0b 	bl	cec0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    c6aa:	f000 fdb3 	bl	d214 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    c6ae:	6800      	ldr	r0, [r0, #0]
    c6b0:	2801      	cmp	r0, #1
    c6b2:	d006      	beq.n	c6c2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    c6b4:	2100      	movs	r1, #0
    c6b6:	4630      	mov	r0, r6
    c6b8:	f004 f89e 	bl	107f8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    c6bc:	4638      	mov	r0, r7
    c6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6c2:	f7ff ff01 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c6c6:	2000      	movs	r0, #0
    c6c8:	e7f9      	b.n	c6be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    c6ca:	0000      	.short	0x0000
    c6cc:	4001f504 	.word	0x4001f504
    c6d0:	20001374 	.word	0x20001374
    c6d4:	40001000 	.word	0x40001000

0000c6d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    c6d8:	b510      	push	{r4, lr}
    c6da:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    c6dc:	4901      	ldr	r1, [pc, #4]	; (c6e4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    c6de:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    c6e2:	bd10      	pop	{r4, pc}
    c6e4:	20001364 	.word	0x20001364

0000c6e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    c6e8:	b570      	push	{r4, r5, r6, lr}
    c6ea:	4c10      	ldr	r4, [pc, #64]	; (c72c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    c6ec:	4606      	mov	r6, r0
    c6ee:	2002      	movs	r0, #2
    c6f0:	7320      	strb	r0, [r4, #12]
    c6f2:	2596      	movs	r5, #150	; 0x96
    c6f4:	f000 f856 	bl	c7a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    c6f8:	4602      	mov	r2, r0
    c6fa:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c6fe:	f894 1020 	ldrb.w	r1, [r4, #32]
    c702:	2801      	cmp	r0, #1
    c704:	d00d      	beq.n	c722 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    c706:	4628      	mov	r0, r5
    c708:	f004 f88e 	bl	10828 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    c70c:	4908      	ldr	r1, [pc, #32]	; (c730 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    c70e:	6120      	str	r0, [r4, #16]
    c710:	2000      	movs	r0, #0
    c712:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    c716:	6921      	ldr	r1, [r4, #16]
    c718:	69e0      	ldr	r0, [r4, #28]
    c71a:	4408      	add	r0, r1
    c71c:	4905      	ldr	r1, [pc, #20]	; (c734 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    c71e:	6008      	str	r0, [r1, #0]
    c720:	bd70      	pop	{r4, r5, r6, pc}
    c722:	4633      	mov	r3, r6
    c724:	4628      	mov	r0, r5
    c726:	f004 f89b 	bl	10860 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    c72a:	e7ef      	b.n	c70c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    c72c:	20001374 	.word	0x20001374
    c730:	40008000 	.word	0x40008000
    c734:	40008544 	.word	0x40008544

0000c738 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    c738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c73c:	2238      	movs	r2, #56	; 0x38
    c73e:	2100      	movs	r1, #0
    c740:	4813      	ldr	r0, [pc, #76]	; (c790 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    c742:	f000 ff59 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c746:	f000 fcd9 	bl	d0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c74a:	f000 fe5e 	bl	d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c74e:	4d11      	ldr	r5, [pc, #68]	; (c794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c750:	4e10      	ldr	r6, [pc, #64]	; (c794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c752:	2400      	movs	r4, #0
    c754:	4f0f      	ldr	r7, [pc, #60]	; (c794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c756:	3508      	adds	r5, #8
    c758:	3610      	adds	r6, #16
    c75a:	b928      	cbnz	r0, c768 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c75c:	f000 fe6c 	bl	d438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c760:	b910      	cbnz	r0, c768 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c762:	f000 fe73 	bl	d44c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    c766:	b108      	cbz	r0, c76c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    c768:	2224      	movs	r2, #36	; 0x24
    c76a:	e006      	b.n	c77a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c76c:	f000 feae 	bl	d4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c770:	b910      	cbnz	r0, c778 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    c772:	f000 fea1 	bl	d4b8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    c776:	b140      	cbz	r0, c78a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    c778:	2240      	movs	r2, #64	; 0x40
    c77a:	21ff      	movs	r1, #255	; 0xff
    c77c:	4638      	mov	r0, r7
    c77e:	f000 ff3b 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c782:	602c      	str	r4, [r5, #0]
    c784:	6034      	str	r4, [r6, #0]
    c786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c78a:	2238      	movs	r2, #56	; 0x38
    c78c:	e7f5      	b.n	c77a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c78e:	0000      	.short	0x0000
    c790:	20001374 	.word	0x20001374
    c794:	40000e00 	.word	0x40000e00

0000c798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    c798:	4801      	ldr	r0, [pc, #4]	; (c7a0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    c79a:	69c0      	ldr	r0, [r0, #28]
    c79c:	4770      	bx	lr
    c79e:	0000      	.short	0x0000
    c7a0:	20001374 	.word	0x20001374

0000c7a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    c7a4:	4814      	ldr	r0, [pc, #80]	; (c7f8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    c7a6:	b510      	push	{r4, lr}
    c7a8:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    c7ac:	7a40      	ldrb	r0, [r0, #9]
    c7ae:	b141      	cbz	r1, c7c2 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    c7b0:	2902      	cmp	r1, #2
    c7b2:	d00b      	beq.n	c7cc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    c7b4:	2802      	cmp	r0, #2
    c7b6:	d009      	beq.n	c7cc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    c7b8:	2901      	cmp	r1, #1
    c7ba:	d00b      	beq.n	c7d4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    c7bc:	2801      	cmp	r0, #1
    c7be:	d009      	beq.n	c7d4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    c7c0:	e015      	b.n	c7ee <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    c7c2:	2800      	cmp	r0, #0
    c7c4:	d1f6      	bne.n	c7b4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    c7c6:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    c7ca:	e00d      	b.n	c7e8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    c7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c7d0:	f000 bc10 	b.w	cff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c7d4:	4809      	ldr	r0, [pc, #36]	; (c7fc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    c7d6:	6800      	ldr	r0, [r0, #0]
    c7d8:	f000 000f 	and.w	r0, r0, #15
    c7dc:	2803      	cmp	r0, #3
    c7de:	d006      	beq.n	c7ee <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    c7e0:	2804      	cmp	r0, #4
    c7e2:	d006      	beq.n	c7f2 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    c7e4:	f240 11e7 	movw	r1, #487	; 0x1e7
    c7e8:	203e      	movs	r0, #62	; 0x3e
    c7ea:	f7f8 fa95 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c7ee:	2001      	movs	r0, #1
    c7f0:	bd10      	pop	{r4, pc}
    c7f2:	2002      	movs	r0, #2
    c7f4:	bd10      	pop	{r4, pc}
    c7f6:	0000      	.short	0x0000
    c7f8:	20001374 	.word	0x20001374
    c7fc:	40001510 	.word	0x40001510

0000c800 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    c800:	b510      	push	{r4, lr}
    c802:	f000 fc61 	bl	d0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    c806:	f7ff fe5f 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c80a:	f003 ff8b 	bl	10724 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    c80e:	480f      	ldr	r0, [pc, #60]	; (c84c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    c810:	4a0f      	ldr	r2, [pc, #60]	; (c850 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    c812:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c814:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c818:	6011      	str	r1, [r2, #0]
    c81a:	2400      	movs	r4, #0
    c81c:	6284      	str	r4, [r0, #40]	; 0x28
    c81e:	7304      	strb	r4, [r0, #12]
    c820:	61c4      	str	r4, [r0, #28]
    c822:	6184      	str	r4, [r0, #24]
    c824:	f000 fc50 	bl	d0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    c828:	480a      	ldr	r0, [pc, #40]	; (c854 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    c82a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c82e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c832:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c836:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    c83a:	2001      	movs	r0, #1
    c83c:	f003 ffab 	bl	10796 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c844:	2001      	movs	r0, #1
    c846:	f003 bf99 	b.w	1077c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c84a:	0000      	.short	0x0000
    c84c:	20001374 	.word	0x20001374
    c850:	4001f508 	.word	0x4001f508
    c854:	40008000 	.word	0x40008000

0000c858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c85c:	2001      	movs	r0, #1
    c85e:	f003 ff9a 	bl	10796 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c862:	4838      	ldr	r0, [pc, #224]	; (c944 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c864:	2400      	movs	r4, #0
    c866:	6004      	str	r4, [r0, #0]
    c868:	2601      	movs	r6, #1
    c86a:	6006      	str	r6, [r0, #0]
    c86c:	f000 fe04 	bl	d478 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c870:	4d35      	ldr	r5, [pc, #212]	; (c948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c872:	b118      	cbz	r0, c87c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x24>
    c874:	6828      	ldr	r0, [r5, #0]
    c876:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    c87a:	6028      	str	r0, [r5, #0]
    c87c:	f000 fdf0 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c880:	b128      	cbz	r0, c88e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    c882:	6828      	ldr	r0, [r5, #0]
    c884:	4931      	ldr	r1, [pc, #196]	; (c94c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    c886:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    c88a:	4308      	orrs	r0, r1
    c88c:	6028      	str	r0, [r5, #0]
    c88e:	f000 fe03 	bl	d498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c892:	b138      	cbz	r0, c8a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    c894:	482c      	ldr	r0, [pc, #176]	; (c948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c896:	1d00      	adds	r0, r0, #4
    c898:	6801      	ldr	r1, [r0, #0]
    c89a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    c89e:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    c8a2:	6001      	str	r1, [r0, #0]
    c8a4:	4928      	ldr	r1, [pc, #160]	; (c948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c8a6:	482a      	ldr	r0, [pc, #168]	; (c950 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    c8a8:	313c      	adds	r1, #60	; 0x3c
    c8aa:	6008      	str	r0, [r1, #0]
    c8ac:	f7f8 f8ec 	bl	4a88 <mpsl_fem_device_config_254_apply_get>
    c8b0:	b140      	cbz	r0, c8c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    c8b2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8b6:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    c8ba:	1c41      	adds	r1, r0, #1
    c8bc:	d002      	beq.n	c8c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    c8be:	4922      	ldr	r1, [pc, #136]	; (c948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c8c0:	3110      	adds	r1, #16
    c8c2:	6008      	str	r0, [r1, #0]
    c8c4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    c8c8:	6e00      	ldr	r0, [r0, #96]	; 0x60
    c8ca:	1c41      	adds	r1, r0, #1
    c8cc:	d004      	beq.n	c8d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x80>
    c8ce:	4921      	ldr	r1, [pc, #132]	; (c954 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c8d0:	680a      	ldr	r2, [r1, #0]
    c8d2:	f360 4217 	bfi	r2, r0, #16, #8
    c8d6:	600a      	str	r2, [r1, #0]
    c8d8:	491e      	ldr	r1, [pc, #120]	; (c954 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c8da:	f240 605b 	movw	r0, #1627	; 0x65b
    c8de:	3954      	subs	r1, #84	; 0x54
    c8e0:	6008      	str	r0, [r1, #0]
    c8e2:	1f09      	subs	r1, r1, #4
    c8e4:	f240 1003 	movw	r0, #259	; 0x103
    c8e8:	6008      	str	r0, [r1, #0]
    c8ea:	1f08      	subs	r0, r1, #4
    c8ec:	6006      	str	r6, [r0, #0]
    c8ee:	2001      	movs	r0, #1
    c8f0:	f000 fc68 	bl	d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c8f4:	4917      	ldr	r1, [pc, #92]	; (c954 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c8f6:	f240 1001 	movw	r0, #257	; 0x101
    c8fa:	31c4      	adds	r1, #196	; 0xc4
    c8fc:	6008      	str	r0, [r1, #0]
    c8fe:	4e16      	ldr	r6, [pc, #88]	; (c958 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    c900:	2502      	movs	r5, #2
    c902:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    c906:	4916      	ldr	r1, [pc, #88]	; (c960 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    c908:	4814      	ldr	r0, [pc, #80]	; (c95c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    c90a:	6008      	str	r0, [r1, #0]
    c90c:	4815      	ldr	r0, [pc, #84]	; (c964 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    c90e:	4f16      	ldr	r7, [pc, #88]	; (c968 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    c910:	f506 7600 	add.w	r6, r6, #512	; 0x200
    c914:	8604      	strh	r4, [r0, #48]	; 0x30
    c916:	3010      	adds	r0, #16
    c918:	61c4      	str	r4, [r0, #28]
    c91a:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
    c91e:	703c      	strb	r4, [r7, #0]
    c920:	2001      	movs	r0, #1
    c922:	f003 ff2b 	bl	1077c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c926:	2010      	movs	r0, #16
    c928:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    c92c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    c930:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    c934:	6878      	ldr	r0, [r7, #4]
    c936:	2800      	cmp	r0, #0
    c938:	d002      	beq.n	c940 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>
    c93a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c93e:	4700      	bx	r0
    c940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c944:	40001ffc 	.word	0x40001ffc
    c948:	4000173c 	.word	0x4000173c
    c94c:	80000096 	.word	0x80000096
    c950:	8900002c 	.word	0x8900002c
    c954:	4000158c 	.word	0x4000158c
    c958:	40001000 	.word	0x40001000
    c95c:	0c0e0000 	.word	0x0c0e0000
    c960:	4001f508 	.word	0x4001f508
    c964:	20001364 	.word	0x20001364
    c968:	20000264 	.word	0x20000264

0000c96c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    c96c:	4901      	ldr	r1, [pc, #4]	; (c974 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    c96e:	7508      	strb	r0, [r1, #20]
    c970:	4770      	bx	lr
    c972:	0000      	.short	0x0000
    c974:	20001374 	.word	0x20001374

0000c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    c978:	4904      	ldr	r1, [pc, #16]	; (c98c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    c97a:	6008      	str	r0, [r1, #0]
    c97c:	4804      	ldr	r0, [pc, #16]	; (c990 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    c97e:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    c982:	f041 0101 	orr.w	r1, r1, #1
    c986:	7001      	strb	r1, [r0, #0]
    c988:	f000 ba62 	b.w	ce50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    c98c:	40001504 	.word	0x40001504
    c990:	20001374 	.word	0x20001374

0000c994 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    c994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c998:	4e35      	ldr	r6, [pc, #212]	; (ca70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    c99a:	4607      	mov	r7, r0
    c99c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c9a0:	468a      	mov	sl, r1
    c9a2:	4614      	mov	r4, r2
    c9a4:	6030      	str	r0, [r6, #0]
    c9a6:	4610      	mov	r0, r2
    c9a8:	f000 fc0c 	bl	d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c9ac:	f000 f9d8 	bl	cd60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c9b0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ca74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    c9b4:	4d30      	ldr	r5, [pc, #192]	; (ca78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    c9b6:	f04f 0801 	mov.w	r8, #1
    c9ba:	b127      	cbz	r7, c9c6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    c9bc:	2f01      	cmp	r7, #1
    c9be:	d01d      	beq.n	c9fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    c9c0:	f240 7122 	movw	r1, #1826	; 0x722
    c9c4:	e04a      	b.n	ca5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    c9c6:	4620      	mov	r0, r4
    c9c8:	f000 f9ea 	bl	cda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    c9cc:	4620      	mov	r0, r4
    c9ce:	f000 f9ab 	bl	cd28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c9d2:	2c02      	cmp	r4, #2
    c9d4:	d00f      	beq.n	c9f6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    c9d6:	f640 0034 	movw	r0, #2100	; 0x834
    c9da:	bf00      	nop
    c9dc:	f649 51f8 	movw	r1, #40440	; 0x9df8
    c9e0:	4401      	add	r1, r0
    c9e2:	4650      	mov	r0, sl
    c9e4:	f000 fb92 	bl	d10c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    c9e8:	4604      	mov	r4, r0
    c9ea:	4648      	mov	r0, r9
    c9ec:	f000 fb7a 	bl	d0e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    c9f0:	f885 8009 	strb.w	r8, [r5, #9]
    c9f4:	e014      	b.n	ca20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    c9f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c9fa:	e7ef      	b.n	c9dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    c9fc:	f000 f9f8 	bl	cdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    ca00:	f000 fb46 	bl	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    ca04:	f000 fa70 	bl	cee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    ca08:	f649 71ba 	movw	r1, #40890	; 0x9fba
    ca0c:	4650      	mov	r0, sl
    ca0e:	f000 fb7d 	bl	d10c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ca12:	4604      	mov	r4, r0
    ca14:	4817      	ldr	r0, [pc, #92]	; (ca74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    ca16:	1d00      	adds	r0, r0, #4
    ca18:	f000 fb64 	bl	d0e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    ca1c:	2002      	movs	r0, #2
    ca1e:	7268      	strb	r0, [r5, #9]
    ca20:	4816      	ldr	r0, [pc, #88]	; (ca7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ca22:	6004      	str	r4, [r0, #0]
    ca24:	4917      	ldr	r1, [pc, #92]	; (ca84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    ca26:	4816      	ldr	r0, [pc, #88]	; (ca80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    ca28:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ca2c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    ca2e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ca32:	62a8      	str	r0, [r5, #40]	; 0x28
    ca34:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ca38:	6030      	str	r0, [r6, #0]
    ca3a:	2110      	movs	r1, #16
    ca3c:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    ca40:	1200      	asrs	r0, r0, #8
    ca42:	6030      	str	r0, [r6, #0]
    ca44:	f000 fa3c 	bl	cec0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    ca48:	490f      	ldr	r1, [pc, #60]	; (ca88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ca4a:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    ca4e:	480b      	ldr	r0, [pc, #44]	; (ca7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ca50:	300c      	adds	r0, #12
    ca52:	6800      	ldr	r0, [r0, #0]
    ca54:	42a0      	cmp	r0, r4
    ca56:	d304      	bcc.n	ca62 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    ca58:	f240 7149 	movw	r1, #1865	; 0x749
    ca5c:	203e      	movs	r0, #62	; 0x3e
    ca5e:	f7f8 f95b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca62:	4621      	mov	r1, r4
    ca64:	4638      	mov	r0, r7
    ca66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca6a:	f003 bec5 	b.w	107f8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ca6e:	0000      	.short	0x0000
    ca70:	4001f504 	.word	0x4001f504
    ca74:	40001000 	.word	0x40001000
    ca78:	20001374 	.word	0x20001374
    ca7c:	40008540 	.word	0x40008540
    ca80:	40008140 	.word	0x40008140
    ca84:	4001f098 	.word	0x4001f098
    ca88:	40008000 	.word	0x40008000

0000ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    ca8c:	4b0d      	ldr	r3, [pc, #52]	; (cac4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    ca8e:	b510      	push	{r4, lr}
    ca90:	71d8      	strb	r0, [r3, #7]
    ca92:	729a      	strb	r2, [r3, #10]
    ca94:	b151      	cbz	r1, caac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    ca96:	2002      	movs	r0, #2
    ca98:	7218      	strb	r0, [r3, #8]
    ca9a:	2801      	cmp	r0, #1
    ca9c:	d008      	beq.n	cab0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    ca9e:	2802      	cmp	r0, #2
    caa0:	d00f      	beq.n	cac2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    caa2:	f640 112a 	movw	r1, #2346	; 0x92a
    caa6:	203e      	movs	r0, #62	; 0x3e
    caa8:	f7f8 f936 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    caac:	2001      	movs	r0, #1
    caae:	e7f3      	b.n	ca98 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    cab0:	7a58      	ldrb	r0, [r3, #9]
    cab2:	2802      	cmp	r0, #2
    cab4:	d105      	bne.n	cac2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    cab6:	f000 f99b 	bl	cdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    caba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cabe:	f000 bae7 	b.w	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    cac2:	bd10      	pop	{r4, pc}
    cac4:	20001374 	.word	0x20001374

0000cac8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    cac8:	4901      	ldr	r1, [pc, #4]	; (cad0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0x8>)
    caca:	2000      	movs	r0, #0
    cacc:	6008      	str	r0, [r1, #0]
    cace:	4770      	bx	lr
    cad0:	40008540 	.word	0x40008540

0000cad4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    cad4:	490a      	ldr	r1, [pc, #40]	; (cb00 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    cad6:	b508      	push	{r3, lr}
    cad8:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    cadc:	2a01      	cmp	r2, #1
    cade:	d001      	beq.n	cae4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    cae0:	2000      	movs	r0, #0
    cae2:	bd08      	pop	{r3, pc}
    cae4:	4a07      	ldr	r2, [pc, #28]	; (cb04 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    cae6:	6812      	ldr	r2, [r2, #0]
    cae8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    caec:	4252      	negs	r2, r2
    caee:	7002      	strb	r2, [r0, #0]
    caf0:	2000      	movs	r0, #0
    caf2:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    caf6:	4804      	ldr	r0, [pc, #16]	; (cb08 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    caf8:	6800      	ldr	r0, [r0, #0]
    cafa:	9000      	str	r0, [sp, #0]
    cafc:	2001      	movs	r0, #1
    cafe:	bd08      	pop	{r3, pc}
    cb00:	40001000 	.word	0x40001000
    cb04:	40001548 	.word	0x40001548
    cb08:	4000111c 	.word	0x4000111c

0000cb0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    cb0c:	4a03      	ldr	r2, [pc, #12]	; (cb1c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    cb0e:	0e01      	lsrs	r1, r0, #24
    cb10:	6011      	str	r1, [r2, #0]
    cb12:	4902      	ldr	r1, [pc, #8]	; (cb1c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    cb14:	0200      	lsls	r0, r0, #8
    cb16:	3908      	subs	r1, #8
    cb18:	6008      	str	r0, [r1, #0]
    cb1a:	4770      	bx	lr
    cb1c:	40001524 	.word	0x40001524

0000cb20 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    cb20:	6800      	ldr	r0, [r0, #0]
    cb22:	4902      	ldr	r1, [pc, #8]	; (cb2c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    cb24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cb28:	6008      	str	r0, [r1, #0]
    cb2a:	4770      	bx	lr
    cb2c:	4000153c 	.word	0x4000153c

0000cb30 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    cb30:	b510      	push	{r4, lr}
    cb32:	f000 fb23 	bl	d17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    cb36:	4806      	ldr	r0, [pc, #24]	; (cb50 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    cb38:	6800      	ldr	r0, [r0, #0]
    cb3a:	2803      	cmp	r0, #3
    cb3c:	d001      	beq.n	cb42 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    cb3e:	280b      	cmp	r0, #11
    cb40:	d104      	bne.n	cb4c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    cb42:	f240 218a 	movw	r1, #650	; 0x28a
    cb46:	203e      	movs	r0, #62	; 0x3e
    cb48:	f7f8 f8e6 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb4c:	bd10      	pop	{r4, pc}
    cb4e:	0000      	.short	0x0000
    cb50:	40001550 	.word	0x40001550

0000cb54 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    cb54:	4901      	ldr	r1, [pc, #4]	; (cb5c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    cb56:	7548      	strb	r0, [r1, #21]
    cb58:	4770      	bx	lr
    cb5a:	0000      	.short	0x0000
    cb5c:	20001374 	.word	0x20001374

0000cb60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    cb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb64:	4d51      	ldr	r5, [pc, #324]	; (ccac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    cb66:	2701      	movs	r7, #1
    cb68:	64ef      	str	r7, [r5, #76]	; 0x4c
    cb6a:	4851      	ldr	r0, [pc, #324]	; (ccb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    cb6c:	f8d0 9000 	ldr.w	r9, [r0]
    cb70:	4850      	ldr	r0, [pc, #320]	; (ccb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    cb72:	6800      	ldr	r0, [r0, #0]
    cb74:	4c50      	ldr	r4, [pc, #320]	; (ccb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    cb76:	e9c4 090c 	strd	r0, r9, [r4, #48]	; 0x30
    cb7a:	f000 f943 	bl	ce04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    cb7e:	494f      	ldr	r1, [pc, #316]	; (ccbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    cb80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    cb82:	6008      	str	r0, [r1, #0]
    cb84:	f8df a138 	ldr.w	sl, [pc, #312]	; ccc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    cb88:	2600      	movs	r6, #0
    cb8a:	62a6      	str	r6, [r4, #40]	; 0x28
    cb8c:	f8da 1200 	ldr.w	r1, [sl, #512]	; 0x200
    cb90:	f240 121d 	movw	r2, #285	; 0x11d
    cb94:	4391      	bics	r1, r2
    cb96:	f8ca 1200 	str.w	r1, [sl, #512]	; 0x200
    cb9a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    cb9e:	f8da 010c 	ldr.w	r0, [sl, #268]	; 0x10c
    cba2:	b900      	cbnz	r0, cba6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46>
    cba4:	64af      	str	r7, [r5, #72]	; 0x48
    cba6:	f000 f9b1 	bl	cf0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    cbaa:	4605      	mov	r5, r0
    cbac:	4840      	ldr	r0, [pc, #256]	; (ccb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    cbae:	1f00      	subs	r0, r0, #4
    cbb0:	6800      	ldr	r0, [r0, #0]
    cbb2:	61e0      	str	r0, [r4, #28]
    cbb4:	f7ff fdf6 	bl	c7a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    cbb8:	f884 0020 	strb.w	r0, [r4, #32]
    cbbc:	7a60      	ldrb	r0, [r4, #9]
    cbbe:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    cbc2:	61a6      	str	r6, [r4, #24]
    cbc4:	4e3f      	ldr	r6, [pc, #252]	; (ccc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    cbc6:	07a8      	lsls	r0, r5, #30
    cbc8:	d501      	bpl.n	cbce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6e>
    cbca:	6830      	ldr	r0, [r6, #0]
    cbcc:	61a0      	str	r0, [r4, #24]
    cbce:	0728      	lsls	r0, r5, #28
    cbd0:	d501      	bpl.n	cbd6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
    cbd2:	6830      	ldr	r0, [r6, #0]
    cbd4:	61a0      	str	r0, [r4, #24]
    cbd6:	f04f 0800 	mov.w	r8, #0
    cbda:	4649      	mov	r1, r9
    cbdc:	4628      	mov	r0, r5
    cbde:	f000 fa1d 	bl	d01c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    cbe2:	b918      	cbnz	r0, cbec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    cbe4:	f8ca 7010 	str.w	r7, [sl, #16]
    cbe8:	f04f 0801 	mov.w	r8, #1
    cbec:	4f32      	ldr	r7, [pc, #200]	; (ccb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    cbee:	07e8      	lsls	r0, r5, #31
    cbf0:	f1a7 0710 	sub.w	r7, r7, #16
    cbf4:	d002      	beq.n	cbfc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    cbf6:	6838      	ldr	r0, [r7, #0]
    cbf8:	4780      	blx	r0
    cbfa:	e031      	b.n	cc60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    cbfc:	07a8      	lsls	r0, r5, #30
    cbfe:	d526      	bpl.n	cc4e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xee>
    cc00:	0768      	lsls	r0, r5, #29
    cc02:	d41e      	bmi.n	cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc04:	f000 fc48 	bl	d498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cc08:	b9d8      	cbnz	r0, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc0a:	f000 fc35 	bl	d478 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    cc0e:	b9c0      	cbnz	r0, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc10:	482d      	ldr	r0, [pc, #180]	; (ccc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    cc12:	6800      	ldr	r0, [r0, #0]
    cc14:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    cc18:	f3c0 6300 	ubfx	r3, r0, #24, #1
    cc1c:	f000 020f 	and.w	r2, r0, #15
    cc20:	f3c0 1103 	ubfx	r1, r0, #4, #4
    cc24:	f3c0 2003 	ubfx	r0, r0, #8, #4
    cc28:	b15b      	cbz	r3, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc2a:	b10a      	cbz	r2, cc30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    cc2c:	b101      	cbz	r1, cc30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    cc2e:	b940      	cbnz	r0, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc30:	4825      	ldr	r0, [pc, #148]	; (ccc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    cc32:	1d00      	adds	r0, r0, #4
    cc34:	6800      	ldr	r0, [r0, #0]
    cc36:	b120      	cbz	r0, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc38:	f1bc 0f03 	cmp.w	ip, #3
    cc3c:	d201      	bcs.n	cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc3e:	f045 0504 	orr.w	r5, r5, #4
    cc42:	f345 0080 	sbfx	r0, r5, #2, #1
    cc46:	4641      	mov	r1, r8
    cc48:	1c40      	adds	r0, r0, #1
    cc4a:	687a      	ldr	r2, [r7, #4]
    cc4c:	e007      	b.n	cc5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfe>
    cc4e:	f015 0f28 	tst.w	r5, #40	; 0x28
    cc52:	d005      	beq.n	cc60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    cc54:	f345 1140 	sbfx	r1, r5, #5, #1
    cc58:	68ba      	ldr	r2, [r7, #8]
    cc5a:	4640      	mov	r0, r8
    cc5c:	1c49      	adds	r1, r1, #1
    cc5e:	4790      	blx	r2
    cc60:	06e8      	lsls	r0, r5, #27
    cc62:	d501      	bpl.n	cc68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    cc64:	68f8      	ldr	r0, [r7, #12]
    cc66:	4780      	blx	r0
    cc68:	7a60      	ldrb	r0, [r4, #9]
    cc6a:	2802      	cmp	r0, #2
    cc6c:	d11b      	bne.n	cca6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    cc6e:	7b20      	ldrb	r0, [r4, #12]
    cc70:	2800      	cmp	r0, #0
    cc72:	d018      	beq.n	cca6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    cc74:	2802      	cmp	r0, #2
    cc76:	d004      	beq.n	cc82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    cc78:	2801      	cmp	r0, #1
    cc7a:	d006      	beq.n	cc8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    cc7c:	f640 3103 	movw	r1, #2819	; 0xb03
    cc80:	e009      	b.n	cc96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x136>
    cc82:	6921      	ldr	r1, [r4, #16]
    cc84:	69e0      	ldr	r0, [r4, #28]
    cc86:	4408      	add	r0, r1
    cc88:	e008      	b.n	cc9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    cc8a:	69e1      	ldr	r1, [r4, #28]
    cc8c:	6920      	ldr	r0, [r4, #16]
    cc8e:	4288      	cmp	r0, r1
    cc90:	d804      	bhi.n	cc9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    cc92:	f640 3104 	movw	r1, #2820	; 0xb04
    cc96:	203e      	movs	r0, #62	; 0x3e
    cc98:	f7f8 f83e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc9c:	6030      	str	r0, [r6, #0]
    cc9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cca2:	f000 ba03 	b.w	d0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>
    cca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ccaa:	0000      	.short	0x0000
    ccac:	40008000 	.word	0x40008000
    ccb0:	4000854c 	.word	0x4000854c
    ccb4:	4000b504 	.word	0x4000b504
    ccb8:	20001374 	.word	0x20001374
    ccbc:	4001f508 	.word	0x4001f508
    ccc0:	40001000 	.word	0x40001000
    ccc4:	40008544 	.word	0x40008544
    ccc8:	40001450 	.word	0x40001450

0000cccc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    cccc:	b570      	push	{r4, r5, r6, lr}
    ccce:	4b11      	ldr	r3, [pc, #68]	; (cd14 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    ccd0:	888c      	ldrh	r4, [r1, #4]
    ccd2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ccd6:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    ccda:	780c      	ldrb	r4, [r1, #0]
    ccdc:	f8d1 1001 	ldr.w	r1, [r1, #1]
    cce0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    cce4:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    cce8:	4d0b      	ldr	r5, [pc, #44]	; (cd18 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    ccea:	6829      	ldr	r1, [r5, #0]
    ccec:	f100 0608 	add.w	r6, r0, #8
    ccf0:	2401      	movs	r4, #1
    ccf2:	fa04 f306 	lsl.w	r3, r4, r6
    ccf6:	b132      	cbz	r2, cd06 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    ccf8:	2a01      	cmp	r2, #1
    ccfa:	d006      	beq.n	cd0a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    ccfc:	f240 41c1 	movw	r1, #1217	; 0x4c1
    cd00:	203e      	movs	r0, #62	; 0x3e
    cd02:	f7f8 f809 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd06:	4399      	bics	r1, r3
    cd08:	e000      	b.n	cd0c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    cd0a:	4319      	orrs	r1, r3
    cd0c:	4084      	lsls	r4, r0
    cd0e:	430c      	orrs	r4, r1
    cd10:	602c      	str	r4, [r5, #0]
    cd12:	bd70      	pop	{r4, r5, r6, pc}
    cd14:	40001000 	.word	0x40001000
    cd18:	40001640 	.word	0x40001640

0000cd1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    cd1c:	4901      	ldr	r1, [pc, #4]	; (cd24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    cd1e:	2001      	movs	r0, #1
    cd20:	7008      	strb	r0, [r1, #0]
    cd22:	4770      	bx	lr
    cd24:	20000264 	.word	0x20000264
    cd28:	b510      	push	{r4, lr}
    cd2a:	4604      	mov	r4, r0
    cd2c:	f000 fbb4 	bl	d498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cd30:	2800      	cmp	r0, #0
    cd32:	d00e      	beq.n	cd52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    cd34:	4a09      	ldr	r2, [pc, #36]	; (cd5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    cd36:	6811      	ldr	r1, [r2, #0]
    cd38:	0650      	lsls	r0, r2, #25
    cd3a:	2c02      	cmp	r4, #2
    cd3c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    cd40:	d008      	beq.n	cd54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    cd42:	f3c0 2006 	ubfx	r0, r0, #8, #7
    cd46:	bf00      	nop
    cd48:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    cd4c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    cd50:	6010      	str	r0, [r2, #0]
    cd52:	bd10      	pop	{r4, pc}
    cd54:	f3c0 6006 	ubfx	r0, r0, #24, #7
    cd58:	e7f6      	b.n	cd48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    cd5a:	0000      	.short	0x0000
    cd5c:	40001588 	.word	0x40001588
    cd60:	480d      	ldr	r0, [pc, #52]	; (cd98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
    cd62:	7d40      	ldrb	r0, [r0, #21]
    cd64:	2825      	cmp	r0, #37	; 0x25
    cd66:	d007      	beq.n	cd78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x5c>
    cd68:	2826      	cmp	r0, #38	; 0x26
    cd6a:	d007      	beq.n	cd7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x60>
    cd6c:	2827      	cmp	r0, #39	; 0x27
    cd6e:	d007      	beq.n	cd80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x64>
    cd70:	280a      	cmp	r0, #10
    cd72:	d807      	bhi.n	cd84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    cd74:	2204      	movs	r2, #4
    cd76:	e006      	b.n	cd86 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6a>
    cd78:	2102      	movs	r1, #2
    cd7a:	e007      	b.n	cd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    cd7c:	211a      	movs	r1, #26
    cd7e:	e005      	b.n	cd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    cd80:	2150      	movs	r1, #80	; 0x50
    cd82:	e003      	b.n	cd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    cd84:	2206      	movs	r2, #6
    cd86:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    cd8a:	b2c9      	uxtb	r1, r1
    cd8c:	4a03      	ldr	r2, [pc, #12]	; (cd9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    cd8e:	6011      	str	r1, [r2, #0]
    cd90:	4902      	ldr	r1, [pc, #8]	; (cd9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    cd92:	314c      	adds	r1, #76	; 0x4c
    cd94:	6008      	str	r0, [r1, #0]
    cd96:	4770      	bx	lr
    cd98:	20001374 	.word	0x20001374
    cd9c:	40001508 	.word	0x40001508
    cda0:	4912      	ldr	r1, [pc, #72]	; (cdec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>)
    cda2:	b508      	push	{r3, lr}
    cda4:	f991 2014 	ldrsb.w	r2, [r1, #20]
    cda8:	7d49      	ldrb	r1, [r1, #21]
    cdaa:	2801      	cmp	r0, #1
    cdac:	d00a      	beq.n	cdc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa8>
    cdae:	2802      	cmp	r0, #2
    cdb0:	d00a      	beq.n	cdc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xac>
    cdb2:	2804      	cmp	r0, #4
    cdb4:	d00a      	beq.n	cdcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb0>
    cdb6:	2808      	cmp	r0, #8
    cdb8:	d00a      	beq.n	cdd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    cdba:	f240 31da 	movw	r1, #986	; 0x3da
    cdbe:	2006      	movs	r0, #6
    cdc0:	f7f7 ffaa 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cdc4:	2000      	movs	r0, #0
    cdc6:	e004      	b.n	cdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    cdc8:	2001      	movs	r0, #1
    cdca:	e002      	b.n	cdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    cdcc:	2003      	movs	r0, #3
    cdce:	e000      	b.n	cdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    cdd0:	2002      	movs	r0, #2
    cdd2:	466b      	mov	r3, sp
    cdd4:	f7f4 fb0e 	bl	13f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    cdd8:	b118      	cbz	r0, cde2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    cdda:	f240 41f3 	movw	r1, #1267	; 0x4f3
    cdde:	203e      	movs	r0, #62	; 0x3e
    cde0:	e7ee      	b.n	cdc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    cde2:	f99d 0000 	ldrsb.w	r0, [sp]
    cde6:	f000 f9e7 	bl	d1b8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    cdea:	bd08      	pop	{r3, pc}
    cdec:	20001374 	.word	0x20001374
    cdf0:	4803      	ldr	r0, [pc, #12]	; (ce00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe4>)
    cdf2:	7a01      	ldrb	r1, [r0, #8]
    cdf4:	2901      	cmp	r1, #1
    cdf6:	d102      	bne.n	cdfe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe2>
    cdf8:	7a80      	ldrb	r0, [r0, #10]
    cdfa:	f7ff bfd1 	b.w	cda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    cdfe:	4770      	bx	lr
    ce00:	20001374 	.word	0x20001374
    ce04:	4805      	ldr	r0, [pc, #20]	; (ce1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x100>)
    ce06:	7a40      	ldrb	r0, [r0, #9]
    ce08:	2801      	cmp	r0, #1
    ce0a:	d003      	beq.n	ce14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf8>
    ce0c:	2802      	cmp	r0, #2
    ce0e:	d103      	bne.n	ce18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xfc>
    ce10:	f003 bc70 	b.w	106f4 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    ce14:	f003 bc7a 	b.w	1070c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    ce18:	4770      	bx	lr
    ce1a:	0000      	.short	0x0000
    ce1c:	20001374 	.word	0x20001374
    ce20:	4809      	ldr	r0, [pc, #36]	; (ce48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12c>)
    ce22:	b508      	push	{r3, lr}
    ce24:	2100      	movs	r1, #0
    ce26:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    ce2a:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    ce2e:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    ce32:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    ce36:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    ce3a:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    ce3e:	4803      	ldr	r0, [pc, #12]	; (ce4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x130>)
    ce40:	6800      	ldr	r0, [r0, #0]
    ce42:	9000      	str	r0, [sp, #0]
    ce44:	bd08      	pop	{r3, pc}
    ce46:	0000      	.short	0x0000
    ce48:	40001000 	.word	0x40001000
    ce4c:	40001118 	.word	0x40001118
    ce50:	4816      	ldr	r0, [pc, #88]	; (ceac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>)
    ce52:	b510      	push	{r4, lr}
    ce54:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    ce58:	07c1      	lsls	r1, r0, #31
    ce5a:	d026      	beq.n	ceaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    ce5c:	0781      	lsls	r1, r0, #30
    ce5e:	d513      	bpl.n	ce88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    ce60:	4813      	ldr	r0, [pc, #76]	; (ceb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    ce62:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ce66:	f041 0101 	orr.w	r1, r1, #1
    ce6a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ce6e:	4811      	ldr	r0, [pc, #68]	; (ceb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x198>)
    ce70:	6800      	ldr	r0, [r0, #0]
    ce72:	280b      	cmp	r0, #11
    ce74:	d005      	beq.n	ce82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    ce76:	280a      	cmp	r0, #10
    ce78:	d003      	beq.n	ce82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    ce7a:	2803      	cmp	r0, #3
    ce7c:	d001      	beq.n	ce82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    ce7e:	2802      	cmp	r0, #2
    ce80:	d113      	bne.n	ceaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    ce82:	f240 5123 	movw	r1, #1315	; 0x523
    ce86:	e00d      	b.n	cea4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    ce88:	0740      	lsls	r0, r0, #29
    ce8a:	d50e      	bpl.n	ceaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    ce8c:	4808      	ldr	r0, [pc, #32]	; (ceb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    ce8e:	490a      	ldr	r1, [pc, #40]	; (ceb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x19c>)
    ce90:	3008      	adds	r0, #8
    ce92:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ce96:	4809      	ldr	r0, [pc, #36]	; (cebc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a0>)
    ce98:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    ce9c:	2801      	cmp	r0, #1
    ce9e:	d104      	bne.n	ceaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    cea0:	f240 512a 	movw	r1, #1322	; 0x52a
    cea4:	203e      	movs	r0, #62	; 0x3e
    cea6:	f7f7 ff37 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ceaa:	bd10      	pop	{r4, pc}
    ceac:	20001374 	.word	0x20001374
    ceb0:	40001000 	.word	0x40001000
    ceb4:	40001550 	.word	0x40001550
    ceb8:	4001f098 	.word	0x4001f098
    cebc:	40008000 	.word	0x40008000
    cec0:	4808      	ldr	r0, [pc, #32]	; (cee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c8>)
    cec2:	4601      	mov	r1, r0
    cec4:	79c2      	ldrb	r2, [r0, #7]
    cec6:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    ceca:	b112      	cbz	r2, ced2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b6>
    cecc:	2a01      	cmp	r2, #1
    cece:	d003      	beq.n	ced8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    ced0:	e006      	b.n	cee0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    ced2:	f041 0102 	orr.w	r1, r1, #2
    ced6:	e001      	b.n	cedc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    ced8:	f041 0104 	orr.w	r1, r1, #4
    cedc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    cee0:	f7ff bfb6 	b.w	ce50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    cee4:	20001374 	.word	0x20001374
    cee8:	b510      	push	{r4, lr}
    ceea:	f000 fad5 	bl	d498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ceee:	2800      	cmp	r0, #0
    cef0:	d108      	bne.n	cf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    cef2:	f000 fac1 	bl	d478 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    cef6:	2800      	cmp	r0, #0
    cef8:	d104      	bne.n	cf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    cefa:	4803      	ldr	r0, [pc, #12]	; (cf08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ec>)
    cefc:	6801      	ldr	r1, [r0, #0]
    cefe:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    cf02:	6001      	str	r1, [r0, #0]
    cf04:	bd10      	pop	{r4, pc}
    cf06:	0000      	.short	0x0000
    cf08:	40001568 	.word	0x40001568
    cf0c:	b538      	push	{r3, r4, r5, lr}
    cf0e:	4d32      	ldr	r5, [pc, #200]	; (cfd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2bc>)
    cf10:	2400      	movs	r4, #0
    cf12:	7b28      	ldrb	r0, [r5, #12]
    cf14:	b120      	cbz	r0, cf20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    cf16:	4831      	ldr	r0, [pc, #196]	; (cfdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c0>)
    cf18:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    cf1c:	2801      	cmp	r0, #1
    cf1e:	d007      	beq.n	cf30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x214>
    cf20:	2200      	movs	r2, #0
    cf22:	7a69      	ldrb	r1, [r5, #9]
    cf24:	482e      	ldr	r0, [pc, #184]	; (cfe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>)
    cf26:	2901      	cmp	r1, #1
    cf28:	d004      	beq.n	cf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x218>
    cf2a:	2902      	cmp	r1, #2
    cf2c:	d00a      	beq.n	cf44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x228>
    cf2e:	e019      	b.n	cf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    cf30:	2201      	movs	r2, #1
    cf32:	e7f6      	b.n	cf22 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x206>
    cf34:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    cf38:	2901      	cmp	r1, #1
    cf3a:	d001      	beq.n	cf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    cf3c:	2400      	movs	r4, #0
    cf3e:	e011      	b.n	cf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    cf40:	2408      	movs	r4, #8
    cf42:	e00f      	b.n	cf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    cf44:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    cf48:	2901      	cmp	r1, #1
    cf4a:	d006      	beq.n	cf5a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    cf4c:	2100      	movs	r1, #0
    cf4e:	4b25      	ldr	r3, [pc, #148]	; (cfe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    cf50:	681b      	ldr	r3, [r3, #0]
    cf52:	2b01      	cmp	r3, #1
    cf54:	d003      	beq.n	cf5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x242>
    cf56:	2404      	movs	r4, #4
    cf58:	e002      	b.n	cf60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    cf5a:	2102      	movs	r1, #2
    cf5c:	e7f7      	b.n	cf4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x232>
    cf5e:	2400      	movs	r4, #0
    cf60:	430c      	orrs	r4, r1
    cf62:	4314      	orrs	r4, r2
    cf64:	f014 0f0b 	tst.w	r4, #11
    cf68:	d105      	bne.n	cf76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x25a>
    cf6a:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    cf6e:	2901      	cmp	r1, #1
    cf70:	d029      	beq.n	cfc6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2aa>
    cf72:	2100      	movs	r1, #0
    cf74:	430c      	orrs	r4, r1
    cf76:	491c      	ldr	r1, [pc, #112]	; (cfe8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>)
    cf78:	7809      	ldrb	r1, [r1, #0]
    cf7a:	b1d1      	cbz	r1, cfb2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x296>
    cf7c:	491b      	ldr	r1, [pc, #108]	; (cfec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>)
    cf7e:	6809      	ldr	r1, [r1, #0]
    cf80:	f011 0fff 	tst.w	r1, #255	; 0xff
    cf84:	d003      	beq.n	cf8e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x272>
    cf86:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    cf8a:	2a01      	cmp	r2, #1
    cf8c:	d000      	beq.n	cf90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>
    cf8e:	2200      	movs	r2, #0
    cf90:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
    cf94:	f011 0fff 	tst.w	r1, #255	; 0xff
    cf98:	d003      	beq.n	cfa2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x286>
    cf9a:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    cf9e:	2801      	cmp	r0, #1
    cfa0:	d000      	beq.n	cfa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x288>
    cfa2:	2000      	movs	r0, #0
    cfa4:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    cfa8:	480e      	ldr	r0, [pc, #56]	; (cfe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    cfaa:	3010      	adds	r0, #16
    cfac:	6800      	ldr	r0, [r0, #0]
    cfae:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    cfb2:	f7ff ff35 	bl	ce20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>
    cfb6:	06e0      	lsls	r0, r4, #27
    cfb8:	d509      	bpl.n	cfce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    cfba:	0720      	lsls	r0, r4, #28
    cfbc:	d407      	bmi.n	cfce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    cfbe:	7a68      	ldrb	r0, [r5, #9]
    cfc0:	2801      	cmp	r0, #1
    cfc2:	d002      	beq.n	cfca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ae>
    cfc4:	e003      	b.n	cfce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    cfc6:	2110      	movs	r1, #16
    cfc8:	e7d4      	b.n	cf74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x258>
    cfca:	f044 0420 	orr.w	r4, r4, #32
    cfce:	4808      	ldr	r0, [pc, #32]	; (cff0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d4>)
    cfd0:	6800      	ldr	r0, [r0, #0]
    cfd2:	9000      	str	r0, [sp, #0]
    cfd4:	4620      	mov	r0, r4
    cfd6:	bd38      	pop	{r3, r4, r5, pc}
    cfd8:	20001374 	.word	0x20001374
    cfdc:	40008000 	.word	0x40008000
    cfe0:	40001000 	.word	0x40001000
    cfe4:	40001400 	.word	0x40001400
    cfe8:	20000264 	.word	0x20000264
    cfec:	40001640 	.word	0x40001640
    cff0:	40008144 	.word	0x40008144
    cff4:	4808      	ldr	r0, [pc, #32]	; (d018 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    cff6:	b510      	push	{r4, lr}
    cff8:	6800      	ldr	r0, [r0, #0]
    cffa:	f000 000f 	and.w	r0, r0, #15
    cffe:	2803      	cmp	r0, #3
    d000:	d006      	beq.n	d010 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    d002:	2804      	cmp	r0, #4
    d004:	d006      	beq.n	d014 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f8>
    d006:	f240 2112 	movw	r1, #530	; 0x212
    d00a:	203e      	movs	r0, #62	; 0x3e
    d00c:	f7f7 fe84 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d010:	2001      	movs	r0, #1
    d012:	bd10      	pop	{r4, pc}
    d014:	2002      	movs	r0, #2
    d016:	bd10      	pop	{r4, pc}
    d018:	40001510 	.word	0x40001510
    d01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d020:	4c19      	ldr	r4, [pc, #100]	; (d088 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36c>)
    d022:	460d      	mov	r5, r1
    d024:	7a21      	ldrb	r1, [r4, #8]
    d026:	b129      	cbz	r1, d034 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>
    d028:	f010 0f11 	tst.w	r0, #17
    d02c:	d00b      	beq.n	d046 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32a>
    d02e:	f7ff fa4b 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    d032:	e027      	b.n	d084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    d034:	4915      	ldr	r1, [pc, #84]	; (d08c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x370>)
    d036:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    d03a:	6008      	str	r0, [r1, #0]
    d03c:	f000 f85e 	bl	d0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    d040:	2000      	movs	r0, #0
    d042:	7320      	strb	r0, [r4, #12]
    d044:	e01e      	b.n	d084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    d046:	2901      	cmp	r1, #1
    d048:	d001      	beq.n	d04e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x332>
    d04a:	2601      	movs	r6, #1
    d04c:	e000      	b.n	d050 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    d04e:	2600      	movs	r6, #0
    d050:	79e0      	ldrb	r0, [r4, #7]
    d052:	2801      	cmp	r0, #1
    d054:	d00e      	beq.n	d074 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    d056:	2700      	movs	r7, #0
    d058:	f000 f850 	bl	d0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    d05c:	2196      	movs	r1, #150	; 0x96
    d05e:	4630      	mov	r0, r6
    d060:	f000 f862 	bl	d128 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40c>
    d064:	4601      	mov	r1, r0
    d066:	b14f      	cbz	r7, d07c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x360>
    d068:	353b      	adds	r5, #59	; 0x3b
    d06a:	428d      	cmp	r5, r1
    d06c:	d904      	bls.n	d078 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    d06e:	2000      	movs	r0, #0
    d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d074:	2701      	movs	r7, #1
    d076:	e7ef      	b.n	d058 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>
    d078:	2001      	movs	r0, #1
    d07a:	71e0      	strb	r0, [r4, #7]
    d07c:	7aa2      	ldrb	r2, [r4, #10]
    d07e:	4630      	mov	r0, r6
    d080:	f7ff fc88 	bl	c994 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    d084:	2001      	movs	r0, #1
    d086:	e7f3      	b.n	d070 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    d088:	20001374 	.word	0x20001374
    d08c:	4001f508 	.word	0x4001f508
    d090:	4805      	ldr	r0, [pc, #20]	; (d0a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    d092:	2100      	movs	r1, #0
    d094:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    d098:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d09c:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    d0a0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d0a4:	4770      	bx	lr
    d0a6:	0000      	.short	0x0000
    d0a8:	40001000 	.word	0x40001000
    d0ac:	4804      	ldr	r0, [pc, #16]	; (d0c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    d0ae:	6a81      	ldr	r1, [r0, #40]	; 0x28
    d0b0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    d0b4:	6281      	str	r1, [r0, #40]	; 0x28
    d0b6:	4903      	ldr	r1, [pc, #12]	; (d0c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>)
    d0b8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    d0bc:	6008      	str	r0, [r1, #0]
    d0be:	4770      	bx	lr
    d0c0:	20001374 	.word	0x20001374
    d0c4:	4001f504 	.word	0x4001f504
    d0c8:	4905      	ldr	r1, [pc, #20]	; (d0e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    d0ca:	2000      	movs	r0, #0
    d0cc:	6008      	str	r0, [r1, #0]
    d0ce:	1f09      	subs	r1, r1, #4
    d0d0:	6008      	str	r0, [r1, #0]
    d0d2:	1f09      	subs	r1, r1, #4
    d0d4:	6008      	str	r0, [r1, #0]
    d0d6:	4902      	ldr	r1, [pc, #8]	; (d0e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    d0d8:	1d09      	adds	r1, r1, #4
    d0da:	6008      	str	r0, [r1, #0]
    d0dc:	4770      	bx	lr
    d0de:	0000      	.short	0x0000
    d0e0:	40008548 	.word	0x40008548
    d0e4:	4903      	ldr	r1, [pc, #12]	; (d0f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d8>)
    d0e6:	79c9      	ldrb	r1, [r1, #7]
    d0e8:	2900      	cmp	r1, #0
    d0ea:	d102      	bne.n	d0f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d6>
    d0ec:	4902      	ldr	r1, [pc, #8]	; (d0f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    d0ee:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    d0f2:	4770      	bx	lr
    d0f4:	20001374 	.word	0x20001374
    d0f8:	4001f098 	.word	0x4001f098
    d0fc:	4802      	ldr	r0, [pc, #8]	; (d108 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    d0fe:	2100      	movs	r1, #0
    d100:	71c1      	strb	r1, [r0, #7]
    d102:	7201      	strb	r1, [r0, #8]
    d104:	7241      	strb	r1, [r0, #9]
    d106:	4770      	bx	lr
    d108:	20001374 	.word	0x20001374
    d10c:	4a05      	ldr	r2, [pc, #20]	; (d124 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>)
    d10e:	79d2      	ldrb	r2, [r2, #7]
    d110:	2a01      	cmp	r2, #1
    d112:	d006      	beq.n	d122 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    d114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d118:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    d11c:	fbb1 f1f2 	udiv	r1, r1, r2
    d120:	1a40      	subs	r0, r0, r1
    d122:	4770      	bx	lr
    d124:	20001374 	.word	0x20001374
    d128:	b570      	push	{r4, r5, r6, lr}
    d12a:	4c13      	ldr	r4, [pc, #76]	; (d178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>)
    d12c:	4603      	mov	r3, r0
    d12e:	460d      	mov	r5, r1
    d130:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    d134:	2000      	movs	r0, #0
    d136:	b15a      	cbz	r2, d150 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    d138:	4621      	mov	r1, r4
    d13a:	f891 1020 	ldrb.w	r1, [r1, #32]
    d13e:	b163      	cbz	r3, d15a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x43e>
    d140:	2b01      	cmp	r3, #1
    d142:	d111      	bne.n	d168 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>
    d144:	2a01      	cmp	r2, #1
    d146:	4628      	mov	r0, r5
    d148:	d012      	beq.n	d170 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    d14a:	f003 fbad 	bl	108a8 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    d14e:	e009      	b.n	d164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    d150:	f240 7166 	movw	r1, #1894	; 0x766
    d154:	203e      	movs	r0, #62	; 0x3e
    d156:	f7f7 fddf 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d15a:	2a01      	cmp	r2, #1
    d15c:	4628      	mov	r0, r5
    d15e:	d004      	beq.n	d16a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44e>
    d160:	f003 fbb0 	bl	108c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    d164:	69e1      	ldr	r1, [r4, #28]
    d166:	4408      	add	r0, r1
    d168:	bd70      	pop	{r4, r5, r6, pc}
    d16a:	f003 fbc5 	bl	108f8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    d16e:	e7f9      	b.n	d164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    d170:	f003 fbb3 	bl	108da <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    d174:	e7f6      	b.n	d164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    d176:	0000      	.short	0x0000
    d178:	20001374 	.word	0x20001374
    d17c:	b510      	push	{r4, lr}
    d17e:	2200      	movs	r2, #0
    d180:	2901      	cmp	r1, #1
    d182:	d008      	beq.n	d196 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47a>
    d184:	2902      	cmp	r1, #2
    d186:	d004      	beq.n	d192 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    d188:	f240 2169 	movw	r1, #617	; 0x269
    d18c:	203e      	movs	r0, #62	; 0x3e
    d18e:	f7f7 fdc3 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d192:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    d196:	4905      	ldr	r1, [pc, #20]	; (d1ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x490>)
    d198:	430a      	orrs	r2, r1
    d19a:	4905      	ldr	r1, [pc, #20]	; (d1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    d19c:	600a      	str	r2, [r1, #0]
    d19e:	4905      	ldr	r1, [pc, #20]	; (d1b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x498>)
    d1a0:	4308      	orrs	r0, r1
    d1a2:	4903      	ldr	r1, [pc, #12]	; (d1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    d1a4:	1d09      	adds	r1, r1, #4
    d1a6:	6008      	str	r0, [r1, #0]
    d1a8:	bd10      	pop	{r4, pc}
    d1aa:	0000      	.short	0x0000
    d1ac:	00100108 	.word	0x00100108
    d1b0:	40001514 	.word	0x40001514
    d1b4:	02030000 	.word	0x02030000

0000d1b8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    d1b8:	4901      	ldr	r1, [pc, #4]	; (d1c0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    d1ba:	b2c0      	uxtb	r0, r0
    d1bc:	6008      	str	r0, [r1, #0]
    d1be:	4770      	bx	lr
    d1c0:	4000150c 	.word	0x4000150c

0000d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    d1c4:	b510      	push	{r4, lr}
    d1c6:	4907      	ldr	r1, [pc, #28]	; (d1e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    d1c8:	2801      	cmp	r0, #1
    d1ca:	d005      	beq.n	d1d8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    d1cc:	2802      	cmp	r0, #2
    d1ce:	d005      	beq.n	d1dc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    d1d0:	218b      	movs	r1, #139	; 0x8b
    d1d2:	203f      	movs	r0, #63	; 0x3f
    d1d4:	f7f7 fda0 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1d8:	2003      	movs	r0, #3
    d1da:	e000      	b.n	d1de <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    d1dc:	2004      	movs	r0, #4
    d1de:	6008      	str	r0, [r1, #0]
    d1e0:	bd10      	pop	{r4, pc}
    d1e2:	0000      	.short	0x0000
    d1e4:	40001510 	.word	0x40001510

0000d1e8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    d1e8:	4770      	bx	lr
    d1ea:	2100      	movs	r1, #0
    d1ec:	7081      	strb	r1, [r0, #2]
    d1ee:	7001      	strb	r1, [r0, #0]
    d1f0:	7041      	strb	r1, [r0, #1]
    d1f2:	4770      	bx	lr

0000d1f4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    d1f4:	b570      	push	{r4, r5, r6, lr}
    d1f6:	f7f4 f917 	bl	1428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d1fa:	4605      	mov	r5, r0
    d1fc:	2400      	movs	r4, #0
    d1fe:	e006      	b.n	d20e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    d200:	4620      	mov	r0, r4
    d202:	f7f4 f917 	bl	1434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d206:	f7ff fff0 	bl	d1ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    d20a:	1c64      	adds	r4, r4, #1
    d20c:	b2e4      	uxtb	r4, r4
    d20e:	42ac      	cmp	r4, r5
    d210:	d3f6      	bcc.n	d200 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    d212:	bd70      	pop	{r4, r5, r6, pc}

0000d214 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    d214:	2000      	movs	r0, #0
    d216:	f7f6 beff 	b.w	4018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000d21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    d21a:	b510      	push	{r4, lr}
    d21c:	f7f6 fbe8 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    d220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d224:	f000 b800 	b.w	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    d228:	0a41      	lsrs	r1, r0, #9
    d22a:	f643 5209 	movw	r2, #15625	; 0x3d09
    d22e:	4351      	muls	r1, r2
    d230:	f3c0 0008 	ubfx	r0, r0, #0, #9
    d234:	fb10 f002 	smulbb	r0, r0, r2
    d238:	f500 7080 	add.w	r0, r0, #256	; 0x100
    d23c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    d240:	4770      	bx	lr

0000d242 <MPSL_IRQ_RADIO_Handler>:
    d242:	f7f5 ba05 	b.w	2650 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    d246:	2800      	cmp	r0, #0
    d248:	db09      	blt.n	d25e <MPSL_IRQ_RADIO_Handler+0x1c>
    d24a:	f000 021f 	and.w	r2, r0, #31
    d24e:	2101      	movs	r1, #1
    d250:	4091      	lsls	r1, r2
    d252:	0940      	lsrs	r0, r0, #5
    d254:	0080      	lsls	r0, r0, #2
    d256:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d25a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d25e:	4770      	bx	lr
    d260:	2800      	cmp	r0, #0
    d262:	db0d      	blt.n	d280 <MPSL_IRQ_RADIO_Handler+0x3e>
    d264:	f000 021f 	and.w	r2, r0, #31
    d268:	2101      	movs	r1, #1
    d26a:	4091      	lsls	r1, r2
    d26c:	0940      	lsrs	r0, r0, #5
    d26e:	0080      	lsls	r0, r0, #2
    d270:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d274:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d278:	f3bf 8f4f 	dsb	sy
    d27c:	f3bf 8f6f 	isb	sy
    d280:	4770      	bx	lr

0000d282 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    d282:	b570      	push	{r4, r5, r6, lr}
    d284:	4602      	mov	r2, r0
    d286:	2000      	movs	r0, #0
    d288:	2900      	cmp	r1, #0
    d28a:	d01d      	beq.n	d2c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    d28c:	fba2 0101 	umull	r0, r1, r2, r1
    d290:	0a40      	lsrs	r0, r0, #9
    d292:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    d296:	0a49      	lsrs	r1, r1, #9
    d298:	1c40      	adds	r0, r0, #1
    d29a:	f141 0100 	adc.w	r1, r1, #0
    d29e:	f240 72a1 	movw	r2, #1953	; 0x7a1
    d2a2:	1883      	adds	r3, r0, r2
    d2a4:	f141 0100 	adc.w	r1, r1, #0
    d2a8:	1c5b      	adds	r3, r3, #1
    d2aa:	f141 0400 	adc.w	r4, r1, #0
    d2ae:	2100      	movs	r1, #0
    d2b0:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    d2b4:	41a1      	sbcs	r1, r4
    d2b6:	d203      	bcs.n	d2c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    d2b8:	2171      	movs	r1, #113	; 0x71
    d2ba:	206d      	movs	r0, #109	; 0x6d
    d2bc:	f7f7 fa50 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d2c0:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    d2c4:	fbb0 f0f2 	udiv	r0, r0, r2
    d2c8:	bd70      	pop	{r4, r5, r6, pc}
    d2ca:	5840      	ldr	r0, [r0, r1]
    d2cc:	2800      	cmp	r0, #0
    d2ce:	d000      	beq.n	d2d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    d2d0:	2001      	movs	r0, #1
    d2d2:	4770      	bx	lr
    d2d4:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    d2d8:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    d2dc:	f002 0201 	and.w	r2, r2, #1
    d2e0:	03c0      	lsls	r0, r0, #15
    d2e2:	d503      	bpl.n	d2ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d2e4:	428a      	cmp	r2, r1
    d2e6:	d101      	bne.n	d2ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d2e8:	2001      	movs	r0, #1
    d2ea:	4770      	bx	lr
    d2ec:	2000      	movs	r0, #0
    d2ee:	4770      	bx	lr

0000d2f0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    d2f0:	b510      	push	{r4, lr}
    d2f2:	2101      	movs	r1, #1
    d2f4:	0788      	lsls	r0, r1, #30
    d2f6:	f7f7 f9f1 	bl	46dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d2fa:	2800      	cmp	r0, #0
    d2fc:	d000      	beq.n	d300 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    d2fe:	2001      	movs	r0, #1
    d300:	bd10      	pop	{r4, pc}

0000d302 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    d302:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d306:	2101      	movs	r1, #1
    d308:	6001      	str	r1, [r0, #0]
    d30a:	4770      	bx	lr

0000d30c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    d30c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d310:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    d314:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    d318:	f002 0203 	and.w	r2, r2, #3
    d31c:	03c9      	lsls	r1, r1, #15
    d31e:	d503      	bpl.n	d328 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d320:	4282      	cmp	r2, r0
    d322:	d101      	bne.n	d328 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d324:	2001      	movs	r0, #1
    d326:	4770      	bx	lr
    d328:	2000      	movs	r0, #0
    d32a:	4770      	bx	lr

0000d32c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    d32c:	b510      	push	{r4, lr}
    d32e:	2100      	movs	r1, #0
    d330:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d334:	f7f7 f9d2 	bl	46dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d338:	2800      	cmp	r0, #0
    d33a:	d000      	beq.n	d33e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    d33c:	2001      	movs	r0, #1
    d33e:	bd10      	pop	{r4, pc}
    d340:	2800      	cmp	r0, #0
    d342:	db09      	blt.n	d358 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    d344:	f000 021f 	and.w	r2, r0, #31
    d348:	2101      	movs	r1, #1
    d34a:	4091      	lsls	r1, r2
    d34c:	0940      	lsrs	r0, r0, #5
    d34e:	0080      	lsls	r0, r0, #2
    d350:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d354:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d358:	4770      	bx	lr
    d35a:	2800      	cmp	r0, #0
    d35c:	db0d      	blt.n	d37a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    d35e:	f000 021f 	and.w	r2, r0, #31
    d362:	2101      	movs	r1, #1
    d364:	4091      	lsls	r1, r2
    d366:	0940      	lsrs	r0, r0, #5
    d368:	0080      	lsls	r0, r0, #2
    d36a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d36e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d372:	f3bf 8f4f 	dsb	sy
    d376:	f3bf 8f6f 	isb	sy
    d37a:	4770      	bx	lr
    d37c:	00021000 	.word	0x00021000
    d380:	000000fa 	.word	0x000000fa
    d384:	71a053fe 	.word	0x71a053fe
    d388:	1095eb1b 	.word	0x1095eb1b
    d38c:	c946cf33 	.word	0xc946cf33
    d390:	5ebe9563 	.word	0x5ebe9563
    d394:	736e3829 	.word	0x736e3829
    d398:	2800      	cmp	r0, #0
    d39a:	db09      	blt.n	d3b0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    d39c:	f000 021f 	and.w	r2, r0, #31
    d3a0:	2101      	movs	r1, #1
    d3a2:	4091      	lsls	r1, r2
    d3a4:	0940      	lsrs	r0, r0, #5
    d3a6:	0080      	lsls	r0, r0, #2
    d3a8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d3ac:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d3b0:	4770      	bx	lr

0000d3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    d3b2:	f3ef 8110 	mrs	r1, PRIMASK
    d3b6:	b672      	cpsid	i
    d3b8:	7802      	ldrb	r2, [r0, #0]
    d3ba:	2a01      	cmp	r2, #1
    d3bc:	d001      	beq.n	d3c2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    d3be:	2201      	movs	r2, #1
    d3c0:	e000      	b.n	d3c4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    d3c2:	2200      	movs	r2, #0
    d3c4:	2301      	movs	r3, #1
    d3c6:	7003      	strb	r3, [r0, #0]
    d3c8:	b901      	cbnz	r1, d3cc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    d3ca:	b662      	cpsie	i
    d3cc:	b10a      	cbz	r2, d3d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    d3ce:	2000      	movs	r0, #0
    d3d0:	4770      	bx	lr
    d3d2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d3d6:	4770      	bx	lr

0000d3d8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    d3d8:	2100      	movs	r1, #0
    d3da:	7001      	strb	r1, [r0, #0]
    d3dc:	4608      	mov	r0, r1
    d3de:	4770      	bx	lr

0000d3e0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    d3e0:	f3ef 8110 	mrs	r1, PRIMASK
    d3e4:	b672      	cpsid	i
    d3e6:	2200      	movs	r2, #0
    d3e8:	7002      	strb	r2, [r0, #0]
    d3ea:	b901      	cbnz	r1, d3ee <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    d3ec:	b662      	cpsie	i
    d3ee:	2000      	movs	r0, #0
    d3f0:	4770      	bx	lr

0000d3f2 <mpsl_low_priority_process>:
    d3f2:	f7f7 baa1 	b.w	4938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000d3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    d3f6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d3fa:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d3fe:	280f      	cmp	r0, #15
    d400:	d001      	beq.n	d406 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    d402:	2000      	movs	r0, #0
    d404:	4770      	bx	lr
    d406:	2001      	movs	r0, #1
    d408:	4770      	bx	lr

0000d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    d40a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d40e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d412:	280a      	cmp	r0, #10
    d414:	d001      	beq.n	d41a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    d416:	2000      	movs	r0, #0
    d418:	4770      	bx	lr
    d41a:	2001      	movs	r0, #1
    d41c:	4770      	bx	lr

0000d41e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    d41e:	b500      	push	{lr}
    d420:	f7ff fff3 	bl	d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d424:	b120      	cbz	r0, d430 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    d426:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d42a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d42e:	b108      	cbz	r0, d434 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    d430:	2000      	movs	r0, #0
    d432:	bd00      	pop	{pc}
    d434:	2001      	movs	r0, #1
    d436:	bd00      	pop	{pc}

0000d438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    d438:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d43c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d440:	280e      	cmp	r0, #14
    d442:	d001      	beq.n	d448 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    d444:	2000      	movs	r0, #0
    d446:	4770      	bx	lr
    d448:	2001      	movs	r0, #1
    d44a:	4770      	bx	lr

0000d44c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    d44c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d450:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d454:	2810      	cmp	r0, #16
    d456:	d001      	beq.n	d45c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    d458:	2000      	movs	r0, #0
    d45a:	4770      	bx	lr
    d45c:	2001      	movs	r0, #1
    d45e:	4770      	bx	lr

0000d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    d460:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d464:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d468:	2806      	cmp	r0, #6
    d46a:	d003      	beq.n	d474 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d46c:	1c40      	adds	r0, r0, #1
    d46e:	d001      	beq.n	d474 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d470:	2000      	movs	r0, #0
    d472:	4770      	bx	lr
    d474:	2001      	movs	r0, #1
    d476:	4770      	bx	lr

0000d478 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    d478:	b500      	push	{lr}
    d47a:	f7ff fff1 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d47e:	b148      	cbz	r0, d494 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d480:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d484:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d488:	2806      	cmp	r0, #6
    d48a:	d303      	bcc.n	d494 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d48c:	1c40      	adds	r0, r0, #1
    d48e:	d001      	beq.n	d494 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d490:	2001      	movs	r0, #1
    d492:	bd00      	pop	{pc}
    d494:	2000      	movs	r0, #0
    d496:	bd00      	pop	{pc}

0000d498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    d498:	b500      	push	{lr}
    d49a:	f7ff ffe1 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d49e:	b138      	cbz	r0, d4b0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    d4a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4a4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d4a8:	2806      	cmp	r0, #6
    d4aa:	d303      	bcc.n	d4b4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d4ac:	1c40      	adds	r0, r0, #1
    d4ae:	d001      	beq.n	d4b4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d4b0:	2000      	movs	r0, #0
    d4b2:	bd00      	pop	{pc}
    d4b4:	2001      	movs	r0, #1
    d4b6:	bd00      	pop	{pc}

0000d4b8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    d4b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4bc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d4c0:	280d      	cmp	r0, #13
    d4c2:	d001      	beq.n	d4c8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    d4c4:	2000      	movs	r0, #0
    d4c6:	4770      	bx	lr
    d4c8:	2001      	movs	r0, #1
    d4ca:	4770      	bx	lr

0000d4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    d4cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4d0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d4d4:	2808      	cmp	r0, #8
    d4d6:	d001      	beq.n	d4dc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    d4d8:	2000      	movs	r0, #0
    d4da:	4770      	bx	lr
    d4dc:	2001      	movs	r0, #1
    d4de:	4770      	bx	lr

0000d4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    d4e0:	2a00      	cmp	r2, #0
    d4e2:	bf04      	itt	eq
    d4e4:	2000      	moveq	r0, #0
    d4e6:	4770      	bxeq	lr
    d4e8:	1e52      	subs	r2, r2, #1
    d4ea:	d007      	beq.n	d4fc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    d4ec:	7803      	ldrb	r3, [r0, #0]
    d4ee:	f891 c000 	ldrb.w	ip, [r1]
    d4f2:	4563      	cmp	r3, ip
    d4f4:	bf04      	itt	eq
    d4f6:	1c40      	addeq	r0, r0, #1
    d4f8:	1c49      	addeq	r1, r1, #1
    d4fa:	d0f5      	beq.n	d4e8 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    d4fc:	7800      	ldrb	r0, [r0, #0]
    d4fe:	7809      	ldrb	r1, [r1, #0]
    d500:	1a40      	subs	r0, r0, r1
    d502:	4770      	bx	lr

0000d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    d504:	b4f0      	push	{r4, r5, r6, r7}
    d506:	ea80 0c01 	eor.w	ip, r0, r1
    d50a:	4603      	mov	r3, r0
    d50c:	f01c 0f03 	tst.w	ip, #3
    d510:	d13c      	bne.n	d58c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d512:	f013 0f03 	tst.w	r3, #3
    d516:	d00b      	beq.n	d530 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    d518:	2a00      	cmp	r2, #0
    d51a:	bf04      	itt	eq
    d51c:	bcf0      	popeq	{r4, r5, r6, r7}
    d51e:	4770      	bxeq	lr
    d520:	f811 cb01 	ldrb.w	ip, [r1], #1
    d524:	f803 cb01 	strb.w	ip, [r3], #1
    d528:	1e52      	subs	r2, r2, #1
    d52a:	f013 0f03 	tst.w	r3, #3
    d52e:	d1f3      	bne.n	d518 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    d530:	2a03      	cmp	r2, #3
    d532:	d94f      	bls.n	d5d4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d534:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d538:	d24c      	bcs.n	d5d4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d53a:	f1c2 0c00 	rsb	ip, r2, #0
    d53e:	ea4f 74ec 	mov.w	r4, ip, asr #31
    d542:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    d546:	ea4f 0cac 	mov.w	ip, ip, asr #2
    d54a:	f1cc 0c00 	rsb	ip, ip, #0
    d54e:	f1bc 0f00 	cmp.w	ip, #0
    d552:	dd1b      	ble.n	d58c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d554:	1f0d      	subs	r5, r1, #4
    d556:	1f1c      	subs	r4, r3, #4
    d558:	f01c 0f01 	tst.w	ip, #1
    d55c:	d003      	beq.n	d566 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    d55e:	f855 6f04 	ldr.w	r6, [r5, #4]!
    d562:	f844 6f04 	str.w	r6, [r4, #4]!
    d566:	ea5f 066c 	movs.w	r6, ip, asr #1
    d56a:	d007      	beq.n	d57c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    d56c:	686f      	ldr	r7, [r5, #4]
    d56e:	6067      	str	r7, [r4, #4]
    d570:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d574:	f844 7f08 	str.w	r7, [r4, #8]!
    d578:	1e76      	subs	r6, r6, #1
    d57a:	d1f7      	bne.n	d56c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d57c:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d580:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d584:	f1cc 0c00 	rsb	ip, ip, #0
    d588:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d58c:	2a00      	cmp	r2, #0
    d58e:	bf04      	itt	eq
    d590:	bcf0      	popeq	{r4, r5, r6, r7}
    d592:	4770      	bxeq	lr
    d594:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d598:	d226      	bcs.n	d5e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d59a:	2a00      	cmp	r2, #0
    d59c:	bfdc      	itt	le
    d59e:	bcf0      	pople	{r4, r5, r6, r7}
    d5a0:	4770      	bxle	lr
    d5a2:	1e49      	subs	r1, r1, #1
    d5a4:	1e5b      	subs	r3, r3, #1
    d5a6:	f012 0f01 	tst.w	r2, #1
    d5aa:	d003      	beq.n	d5b4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d5ac:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d5b0:	f803 cf01 	strb.w	ip, [r3, #1]!
    d5b4:	1052      	asrs	r2, r2, #1
    d5b6:	bf04      	itt	eq
    d5b8:	bcf0      	popeq	{r4, r5, r6, r7}
    d5ba:	4770      	bxeq	lr
    d5bc:	f891 c001 	ldrb.w	ip, [r1, #1]
    d5c0:	f883 c001 	strb.w	ip, [r3, #1]
    d5c4:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d5c8:	f803 cf02 	strb.w	ip, [r3, #2]!
    d5cc:	1e52      	subs	r2, r2, #1
    d5ce:	d1f5      	bne.n	d5bc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d5d0:	bcf0      	pop	{r4, r5, r6, r7}
    d5d2:	4770      	bx	lr
    d5d4:	2a04      	cmp	r2, #4
    d5d6:	d3d9      	bcc.n	d58c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d5d8:	f851 cb04 	ldr.w	ip, [r1], #4
    d5dc:	1f12      	subs	r2, r2, #4
    d5de:	f843 cb04 	str.w	ip, [r3], #4
    d5e2:	2a04      	cmp	r2, #4
    d5e4:	d2f8      	bcs.n	d5d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d5e6:	e7d1      	b.n	d58c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d5e8:	f811 cb01 	ldrb.w	ip, [r1], #1
    d5ec:	f803 cb01 	strb.w	ip, [r3], #1
    d5f0:	1e52      	subs	r2, r2, #1
    d5f2:	d1f9      	bne.n	d5e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d5f4:	bcf0      	pop	{r4, r5, r6, r7}
    d5f6:	4770      	bx	lr

0000d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d5f8:	b470      	push	{r4, r5, r6}
    d5fa:	4603      	mov	r3, r0
    d5fc:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d600:	f010 0f03 	tst.w	r0, #3
    d604:	d009      	beq.n	d61a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d606:	2a00      	cmp	r2, #0
    d608:	bf04      	itt	eq
    d60a:	bc70      	popeq	{r4, r5, r6}
    d60c:	4770      	bxeq	lr
    d60e:	f803 cb01 	strb.w	ip, [r3], #1
    d612:	1e52      	subs	r2, r2, #1
    d614:	f013 0f03 	tst.w	r3, #3
    d618:	d1f5      	bne.n	d606 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d61a:	b2c9      	uxtb	r1, r1
    d61c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d620:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d624:	2a03      	cmp	r2, #3
    d626:	d939      	bls.n	d69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d628:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d62c:	d236      	bcs.n	d69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d62e:	4251      	negs	r1, r2
    d630:	17cc      	asrs	r4, r1, #31
    d632:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d636:	1089      	asrs	r1, r1, #2
    d638:	424e      	negs	r6, r1
    d63a:	2e00      	cmp	r6, #0
    d63c:	dd11      	ble.n	d662 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d63e:	1f19      	subs	r1, r3, #4
    d640:	f016 0f01 	tst.w	r6, #1
    d644:	bf18      	it	ne
    d646:	f841 5f04 	strne.w	r5, [r1, #4]!
    d64a:	1074      	asrs	r4, r6, #1
    d64c:	d004      	beq.n	d658 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d64e:	604d      	str	r5, [r1, #4]
    d650:	f841 5f08 	str.w	r5, [r1, #8]!
    d654:	1e64      	subs	r4, r4, #1
    d656:	d1fa      	bne.n	d64e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d658:	4271      	negs	r1, r6
    d65a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d65e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d662:	2a00      	cmp	r2, #0
    d664:	bf04      	itt	eq
    d666:	bc70      	popeq	{r4, r5, r6}
    d668:	4770      	bxeq	lr
    d66a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d66e:	d21d      	bcs.n	d6ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d670:	2a00      	cmp	r2, #0
    d672:	bfdc      	itt	le
    d674:	bc70      	pople	{r4, r5, r6}
    d676:	4770      	bxle	lr
    d678:	1e59      	subs	r1, r3, #1
    d67a:	f012 0f01 	tst.w	r2, #1
    d67e:	bf18      	it	ne
    d680:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d684:	1052      	asrs	r2, r2, #1
    d686:	bf04      	itt	eq
    d688:	bc70      	popeq	{r4, r5, r6}
    d68a:	4770      	bxeq	lr
    d68c:	f881 c001 	strb.w	ip, [r1, #1]
    d690:	f801 cf02 	strb.w	ip, [r1, #2]!
    d694:	1e52      	subs	r2, r2, #1
    d696:	d1f9      	bne.n	d68c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d698:	bc70      	pop	{r4, r5, r6}
    d69a:	4770      	bx	lr
    d69c:	2a04      	cmp	r2, #4
    d69e:	d3e0      	bcc.n	d662 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d6a0:	1f12      	subs	r2, r2, #4
    d6a2:	f843 5b04 	str.w	r5, [r3], #4
    d6a6:	2a04      	cmp	r2, #4
    d6a8:	d2fa      	bcs.n	d6a0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d6aa:	e7da      	b.n	d662 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d6ac:	f803 cb01 	strb.w	ip, [r3], #1
    d6b0:	1e52      	subs	r2, r2, #1
    d6b2:	d1fb      	bne.n	d6ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d6b4:	bc70      	pop	{r4, r5, r6}
    d6b6:	4770      	bx	lr
    d6b8:	f04f 30ff 	mov.w	r0, #4294967295
    d6bc:	4770      	bx	lr
    d6be:	2000      	movs	r0, #0
    d6c0:	4770      	bx	lr
    d6c2:	2000      	movs	r0, #0
    d6c4:	4770      	bx	lr
    d6c6:	f04f 30ff 	mov.w	r0, #4294967295
    d6ca:	4770      	bx	lr
    d6cc:	4770      	bx	lr
    d6ce:	4770      	bx	lr
    d6d0:	2000      	movs	r0, #0
    d6d2:	4770      	bx	lr
    d6d4:	f04f 30ff 	mov.w	r0, #4294967295
    d6d8:	4770      	bx	lr
    d6da:	f04f 30ff 	mov.w	r0, #4294967295
    d6de:	4770      	bx	lr
    d6e0:	2100      	movs	r1, #0
    d6e2:	7001      	strb	r1, [r0, #0]
    d6e4:	4770      	bx	lr
    d6e6:	f04f 30ff 	mov.w	r0, #4294967295
    d6ea:	4770      	bx	lr
    d6ec:	f04f 30ff 	mov.w	r0, #4294967295
    d6f0:	4770      	bx	lr
    d6f2:	2000      	movs	r0, #0
    d6f4:	4770      	bx	lr
    d6f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d6fa:	4606      	mov	r6, r0
    d6fc:	460c      	mov	r4, r1
    d6fe:	7808      	ldrb	r0, [r1, #0]
    d700:	7849      	ldrb	r1, [r1, #1]
    d702:	2700      	movs	r7, #0
    d704:	4408      	add	r0, r1
    d706:	4691      	mov	r9, r2
    d708:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    d70c:	463d      	mov	r5, r7
    d70e:	e00e      	b.n	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    d710:	7a23      	ldrb	r3, [r4, #8]
    d712:	2b02      	cmp	r3, #2
    d714:	d200      	bcs.n	d718 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    d716:	2302      	movs	r3, #2
    d718:	79e2      	ldrb	r2, [r4, #7]
    d71a:	2a03      	cmp	r2, #3
    d71c:	d200      	bcs.n	d720 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    d71e:	2203      	movs	r2, #3
    d720:	79a1      	ldrb	r1, [r4, #6]
    d722:	7960      	ldrb	r0, [r4, #5]
    d724:	f000 ffaf 	bl	e686 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    d728:	1c6d      	adds	r5, r5, #1
    d72a:	4407      	add	r7, r0
    d72c:	b2ed      	uxtb	r5, r5
    d72e:	4545      	cmp	r5, r8
    d730:	d3ee      	bcc.n	d710 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    d732:	6830      	ldr	r0, [r6, #0]
    d734:	1cc0      	adds	r0, r0, #3
    d736:	f020 0003 	bic.w	r0, r0, #3
    d73a:	6030      	str	r0, [r6, #0]
    d73c:	f1b9 0f00 	cmp.w	r9, #0
    d740:	d000      	beq.n	d744 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    d742:	2000      	movs	r0, #0
    d744:	463a      	mov	r2, r7
    d746:	4641      	mov	r1, r8
    d748:	f7f7 fe9c 	bl	5484 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    d74c:	6831      	ldr	r1, [r6, #0]
    d74e:	4408      	add	r0, r1
    d750:	6030      	str	r0, [r6, #0]
    d752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d756 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    d756:	2000      	movs	r0, #0
    d758:	4770      	bx	lr

0000d75a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    d75a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    d75c:	4604      	mov	r4, r0
    d75e:	1d01      	adds	r1, r0, #4
    d760:	4668      	mov	r0, sp
    d762:	f7f9 fc57 	bl	7014 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    d766:	2800      	cmp	r0, #0
    d768:	d004      	beq.n	d774 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    d76a:	4669      	mov	r1, sp
    d76c:	4620      	mov	r0, r4
    d76e:	f000 f848 	bl	d802 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    d772:	2001      	movs	r0, #1
    d774:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000d776 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    d776:	b50e      	push	{r1, r2, r3, lr}
    d778:	4601      	mov	r1, r0
    d77a:	4668      	mov	r0, sp
    d77c:	f000 f827 	bl	d7ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    d780:	4668      	mov	r0, sp
    d782:	f7f9 fc71 	bl	7068 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d786:	bd0e      	pop	{r1, r2, r3, pc}

0000d788 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d788:	b510      	push	{r4, lr}
    d78a:	4604      	mov	r4, r0
    d78c:	4620      	mov	r0, r4
    d78e:	f7f7 fbb9 	bl	4f04 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d792:	2800      	cmp	r0, #0
    d794:	d006      	beq.n	d7a4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d796:	78a1      	ldrb	r1, [r4, #2]
    d798:	7820      	ldrb	r0, [r4, #0]
    d79a:	f000 f804 	bl	d7a6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    d79e:	2800      	cmp	r0, #0
    d7a0:	d0f4      	beq.n	d78c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d7a2:	2001      	movs	r0, #1
    d7a4:	bd10      	pop	{r4, pc}
    d7a6:	b570      	push	{r4, r5, r6, lr}
    d7a8:	460c      	mov	r4, r1
    d7aa:	4605      	mov	r5, r0
    d7ac:	f7f7 fc06 	bl	4fbc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d7b0:	2800      	cmp	r0, #0
    d7b2:	d002      	beq.n	d7ba <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    d7b4:	2d3e      	cmp	r5, #62	; 0x3e
    d7b6:	d001      	beq.n	d7bc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    d7b8:	2001      	movs	r0, #1
    d7ba:	bd70      	pop	{r4, r5, r6, pc}
    d7bc:	2c12      	cmp	r4, #18
    d7be:	d004      	beq.n	d7ca <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    d7c0:	4620      	mov	r0, r4
    d7c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d7c6:	f7f7 bc15 	b.w	4ff4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d7ca:	2000      	movs	r0, #0
    d7cc:	bd70      	pop	{r4, r5, r6, pc}

0000d7ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d7ce:	880a      	ldrh	r2, [r1, #0]
    d7d0:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d7d4:	8002      	strh	r2, [r0, #0]
    d7d6:	884a      	ldrh	r2, [r1, #2]
    d7d8:	8042      	strh	r2, [r0, #2]
    d7da:	784a      	ldrb	r2, [r1, #1]
    d7dc:	0993      	lsrs	r3, r2, #6
    d7de:	2200      	movs	r2, #0
    d7e0:	7142      	strb	r2, [r0, #5]
    d7e2:	784b      	ldrb	r3, [r1, #1]
    d7e4:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d7e8:	b11b      	cbz	r3, d7f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d7ea:	2b01      	cmp	r3, #1
    d7ec:	d005      	beq.n	d7fa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d7ee:	2b02      	cmp	r3, #2
    d7f0:	d005      	beq.n	d7fe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d7f2:	7102      	strb	r2, [r0, #4]
    d7f4:	1d09      	adds	r1, r1, #4
    d7f6:	6081      	str	r1, [r0, #8]
    d7f8:	4770      	bx	lr
    d7fa:	2201      	movs	r2, #1
    d7fc:	e7f9      	b.n	d7f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d7fe:	2202      	movs	r2, #2
    d800:	e7f7      	b.n	d7f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d802 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d802:	b510      	push	{r4, lr}
    d804:	460c      	mov	r4, r1
    d806:	7809      	ldrb	r1, [r1, #0]
    d808:	7001      	strb	r1, [r0, #0]
    d80a:	7841      	ldrb	r1, [r0, #1]
    d80c:	f021 010f 	bic.w	r1, r1, #15
    d810:	7041      	strb	r1, [r0, #1]
    d812:	8822      	ldrh	r2, [r4, #0]
    d814:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d818:	4311      	orrs	r1, r2
    d81a:	7041      	strb	r1, [r0, #1]
    d81c:	78a2      	ldrb	r2, [r4, #2]
    d81e:	7082      	strb	r2, [r0, #2]
    d820:	8862      	ldrh	r2, [r4, #2]
    d822:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    d826:	0a12      	lsrs	r2, r2, #8
    d828:	70c2      	strb	r2, [r0, #3]
    d82a:	7041      	strb	r1, [r0, #1]
    d82c:	7922      	ldrb	r2, [r4, #4]
    d82e:	f002 0203 	and.w	r2, r2, #3
    d832:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    d836:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    d83a:	7041      	strb	r1, [r0, #1]
    d83c:	7962      	ldrb	r2, [r4, #5]
    d83e:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    d842:	7041      	strb	r1, [r0, #1]
    d844:	68a1      	ldr	r1, [r4, #8]
    d846:	1d02      	adds	r2, r0, #4
    d848:	4291      	cmp	r1, r2
    d84a:	d006      	beq.n	d85a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    d84c:	8862      	ldrh	r2, [r4, #2]
    d84e:	2afb      	cmp	r2, #251	; 0xfb
    d850:	d300      	bcc.n	d854 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    d852:	22fb      	movs	r2, #251	; 0xfb
    d854:	1d00      	adds	r0, r0, #4
    d856:	f7ff fe55 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d85a:	78a0      	ldrb	r0, [r4, #2]
    d85c:	1d00      	adds	r0, r0, #4
    d85e:	b2c0      	uxtb	r0, r0
    d860:	bd10      	pop	{r4, pc}

0000d862 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d862:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d866:	4604      	mov	r4, r0
    d868:	f891 c000 	ldrb.w	ip, [r1]
    d86c:	2000      	movs	r0, #0
    d86e:	270c      	movs	r7, #12
    d870:	223e      	movs	r2, #62	; 0x3e
    d872:	2612      	movs	r6, #18
    d874:	25ff      	movs	r5, #255	; 0xff
    d876:	f04f 0b14 	mov.w	fp, #20
    d87a:	f04f 0e13 	mov.w	lr, #19
    d87e:	f04f 0a05 	mov.w	sl, #5
    d882:	f104 030d 	add.w	r3, r4, #13
    d886:	f04f 0911 	mov.w	r9, #17
    d88a:	f1bc 0f20 	cmp.w	ip, #32
    d88e:	d272      	bcs.n	d976 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    d890:	e8df f00c 	tbb	[pc, ip]
    d894:	29271071 	.word	0x29271071
    d898:	a46dfc2e 	.word	0xa46dfc2e
    d89c:	fbdac0ae 	.word	0xfbdac0ae
    d8a0:	f7f8f9fa 	.word	0xf7f8f9fa
    d8a4:	507171f6 	.word	0x507171f6
    d8a8:	f3f4f572 	.word	0xf3f4f572
    d8ac:	eff0f1f2 	.word	0xeff0f1f2
    d8b0:	ec71edee 	.word	0xec71edee
    d8b4:	7027      	strb	r7, [r4, #0]
    d8b6:	7908      	ldrb	r0, [r1, #4]
    d8b8:	70a0      	strb	r0, [r4, #2]
    d8ba:	7948      	ldrb	r0, [r1, #5]
    d8bc:	70e0      	strb	r0, [r4, #3]
    d8be:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d8c2:	0a00      	lsrs	r0, r0, #8
    d8c4:	7120      	strb	r0, [r4, #4]
    d8c6:	79c8      	ldrb	r0, [r1, #7]
    d8c8:	7160      	strb	r0, [r4, #5]
    d8ca:	7a08      	ldrb	r0, [r1, #8]
    d8cc:	71a0      	strb	r0, [r4, #6]
    d8ce:	8908      	ldrh	r0, [r1, #8]
    d8d0:	0a00      	lsrs	r0, r0, #8
    d8d2:	71e0      	strb	r0, [r4, #7]
    d8d4:	7a88      	ldrb	r0, [r1, #10]
    d8d6:	7220      	strb	r0, [r4, #8]
    d8d8:	8948      	ldrh	r0, [r1, #10]
    d8da:	0a00      	lsrs	r0, r0, #8
    d8dc:	7260      	strb	r0, [r4, #9]
    d8de:	2008      	movs	r0, #8
    d8e0:	e154      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d8e2:	2010      	movs	r0, #16
    d8e4:	e000      	b.n	d8e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    d8e6:	201a      	movs	r0, #26
    d8e8:	7020      	strb	r0, [r4, #0]
    d8ea:	7908      	ldrb	r0, [r1, #4]
    d8ec:	70a0      	strb	r0, [r4, #2]
    d8ee:	e154      	b.n	db9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    d8f0:	7022      	strb	r2, [r4, #0]
    d8f2:	2002      	movs	r0, #2
    d8f4:	70a0      	strb	r0, [r4, #2]
    d8f6:	7908      	ldrb	r0, [r1, #4]
    d8f8:	70e0      	strb	r0, [r4, #3]
    d8fa:	7b88      	ldrb	r0, [r1, #14]
    d8fc:	7120      	strb	r0, [r4, #4]
    d8fe:	7948      	ldrb	r0, [r1, #5]
    d900:	7160      	strb	r0, [r4, #5]
    d902:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d906:	f8c4 0006 	str.w	r0, [r4, #6]
    d90a:	8948      	ldrh	r0, [r1, #10]
    d90c:	8160      	strh	r0, [r4, #10]
    d90e:	7b08      	ldrb	r0, [r1, #12]
    d910:	7320      	strb	r0, [r4, #12]
    d912:	7b0e      	ldrb	r6, [r1, #12]
    d914:	1d0d      	adds	r5, r1, #4
    d916:	2e1f      	cmp	r6, #31
    d918:	d300      	bcc.n	d91c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    d91a:	261f      	movs	r6, #31
    d91c:	4618      	mov	r0, r3
    d91e:	4632      	mov	r2, r6
    d920:	f105 010b 	add.w	r1, r5, #11
    d924:	f7ff fdee 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d928:	360d      	adds	r6, #13
    d92a:	7a69      	ldrb	r1, [r5, #9]
    d92c:	55a1      	strb	r1, [r4, r6]
    d92e:	1e76      	subs	r6, r6, #1
    d930:	b2f0      	uxtb	r0, r6
    d932:	e129      	b.n	db88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    d934:	7022      	strb	r2, [r4, #0]
    d936:	200b      	movs	r0, #11
    d938:	70a0      	strb	r0, [r4, #2]
    d93a:	7908      	ldrb	r0, [r1, #4]
    d93c:	70e0      	strb	r0, [r4, #3]
    d93e:	7948      	ldrb	r0, [r1, #5]
    d940:	7120      	strb	r0, [r4, #4]
    d942:	7988      	ldrb	r0, [r1, #6]
    d944:	7160      	strb	r0, [r4, #5]
    d946:	f8d1 0007 	ldr.w	r0, [r1, #7]
    d94a:	f8c4 0006 	str.w	r0, [r4, #6]
    d94e:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    d952:	8160      	strh	r0, [r4, #10]
    d954:	7b48      	ldrb	r0, [r1, #13]
    d956:	7320      	strb	r0, [r4, #12]
    d958:	f8d1 000e 	ldr.w	r0, [r1, #14]
    d95c:	f8c4 000d 	str.w	r0, [r4, #13]
    d960:	8a48      	ldrh	r0, [r1, #18]
    d962:	f8a4 0011 	strh.w	r0, [r4, #17]
    d966:	7d08      	ldrb	r0, [r1, #20]
    d968:	74e0      	strb	r0, [r4, #19]
    d96a:	4630      	mov	r0, r6
    d96c:	e10e      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d96e:	4620      	mov	r0, r4
    d970:	f000 f98d 	bl	dc8e <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    d974:	e108      	b.n	db88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    d976:	e10b      	b.n	db90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    d978:	7022      	strb	r2, [r4, #0]
    d97a:	200a      	movs	r0, #10
    d97c:	70a0      	strb	r0, [r4, #2]
    d97e:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    d982:	70e0      	strb	r0, [r4, #3]
    d984:	7888      	ldrb	r0, [r1, #2]
    d986:	7120      	strb	r0, [r4, #4]
    d988:	8848      	ldrh	r0, [r1, #2]
    d98a:	0a00      	lsrs	r0, r0, #8
    d98c:	7160      	strb	r0, [r4, #5]
    d98e:	7908      	ldrb	r0, [r1, #4]
    d990:	71a0      	strb	r0, [r4, #6]
    d992:	7948      	ldrb	r0, [r1, #5]
    d994:	71e0      	strb	r0, [r4, #7]
    d996:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d99a:	60a0      	str	r0, [r4, #8]
    d99c:	8948      	ldrh	r0, [r1, #10]
    d99e:	81a0      	strh	r0, [r4, #12]
    d9a0:	68c8      	ldr	r0, [r1, #12]
    d9a2:	f8c4 000e 	str.w	r0, [r4, #14]
    d9a6:	8a08      	ldrh	r0, [r1, #16]
    d9a8:	8260      	strh	r0, [r4, #18]
    d9aa:	f8d1 0012 	ldr.w	r0, [r1, #18]
    d9ae:	6160      	str	r0, [r4, #20]
    d9b0:	8ac8      	ldrh	r0, [r1, #22]
    d9b2:	8320      	strh	r0, [r4, #24]
    d9b4:	7e08      	ldrb	r0, [r1, #24]
    d9b6:	76a0      	strb	r0, [r4, #26]
    d9b8:	8b08      	ldrh	r0, [r1, #24]
    d9ba:	0a00      	lsrs	r0, r0, #8
    d9bc:	76e0      	strb	r0, [r4, #27]
    d9be:	7e88      	ldrb	r0, [r1, #26]
    d9c0:	7720      	strb	r0, [r4, #28]
    d9c2:	8b48      	ldrh	r0, [r1, #26]
    d9c4:	0a00      	lsrs	r0, r0, #8
    d9c6:	7760      	strb	r0, [r4, #29]
    d9c8:	7f08      	ldrb	r0, [r1, #28]
    d9ca:	77a0      	strb	r0, [r4, #30]
    d9cc:	8b88      	ldrh	r0, [r1, #28]
    d9ce:	0a00      	lsrs	r0, r0, #8
    d9d0:	77e0      	strb	r0, [r4, #31]
    d9d2:	7f88      	ldrb	r0, [r1, #30]
    d9d4:	f884 0020 	strb.w	r0, [r4, #32]
    d9d8:	201f      	movs	r0, #31
    d9da:	e0d7      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d9dc:	7022      	strb	r2, [r4, #0]
    d9de:	f884 b002 	strb.w	fp, [r4, #2]
    d9e2:	7908      	ldrb	r0, [r1, #4]
    d9e4:	70e0      	strb	r0, [r4, #3]
    d9e6:	8888      	ldrh	r0, [r1, #4]
    d9e8:	0a00      	lsrs	r0, r0, #8
    d9ea:	7120      	strb	r0, [r4, #4]
    d9ec:	7988      	ldrb	r0, [r1, #6]
    d9ee:	e0ed      	b.n	dbcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d9f0:	7022      	strb	r2, [r4, #0]
    d9f2:	2004      	movs	r0, #4
    d9f4:	70a0      	strb	r0, [r4, #2]
    d9f6:	7908      	ldrb	r0, [r1, #4]
    d9f8:	70e0      	strb	r0, [r4, #3]
    d9fa:	7988      	ldrb	r0, [r1, #6]
    d9fc:	7120      	strb	r0, [r4, #4]
    d9fe:	88c8      	ldrh	r0, [r1, #6]
    da00:	0a00      	lsrs	r0, r0, #8
    da02:	7160      	strb	r0, [r4, #5]
    da04:	6888      	ldr	r0, [r1, #8]
    da06:	f8c4 0006 	str.w	r0, [r4, #6]
    da0a:	68c8      	ldr	r0, [r1, #12]
    da0c:	f8c4 000a 	str.w	r0, [r4, #10]
    da10:	200c      	movs	r0, #12
    da12:	e0bb      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    da14:	7022      	strb	r2, [r4, #0]
    da16:	2003      	movs	r0, #3
    da18:	70a0      	strb	r0, [r4, #2]
    da1a:	7908      	ldrb	r0, [r1, #4]
    da1c:	70e0      	strb	r0, [r4, #3]
    da1e:	7988      	ldrb	r0, [r1, #6]
    da20:	7120      	strb	r0, [r4, #4]
    da22:	88c8      	ldrh	r0, [r1, #6]
    da24:	0a00      	lsrs	r0, r0, #8
    da26:	7160      	strb	r0, [r4, #5]
    da28:	7a08      	ldrb	r0, [r1, #8]
    da2a:	71a0      	strb	r0, [r4, #6]
    da2c:	8908      	ldrh	r0, [r1, #8]
    da2e:	0a00      	lsrs	r0, r0, #8
    da30:	71e0      	strb	r0, [r4, #7]
    da32:	7a88      	ldrb	r0, [r1, #10]
    da34:	7220      	strb	r0, [r4, #8]
    da36:	8948      	ldrh	r0, [r1, #10]
    da38:	0a00      	lsrs	r0, r0, #8
    da3a:	7260      	strb	r0, [r4, #9]
    da3c:	7b08      	ldrb	r0, [r1, #12]
    da3e:	72a0      	strb	r0, [r4, #10]
    da40:	8988      	ldrh	r0, [r1, #12]
    da42:	0a00      	lsrs	r0, r0, #8
    da44:	72e0      	strb	r0, [r4, #11]
    da46:	e120      	b.n	dc8a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    da48:	7022      	strb	r2, [r4, #0]
    da4a:	f884 a002 	strb.w	sl, [r4, #2]
    da4e:	7908      	ldrb	r0, [r1, #4]
    da50:	70e0      	strb	r0, [r4, #3]
    da52:	8888      	ldrh	r0, [r1, #4]
    da54:	0a00      	lsrs	r0, r0, #8
    da56:	7120      	strb	r0, [r4, #4]
    da58:	f8d1 0006 	ldr.w	r0, [r1, #6]
    da5c:	f8c4 0005 	str.w	r0, [r4, #5]
    da60:	f8d1 000a 	ldr.w	r0, [r1, #10]
    da64:	f8c4 0009 	str.w	r0, [r4, #9]
    da68:	89c8      	ldrh	r0, [r1, #14]
    da6a:	e010      	b.n	da8e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    da6c:	e0fa      	b.n	dc64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    da6e:	e0ce      	b.n	dc0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    da70:	e0af      	b.n	dbd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    da72:	e0da      	b.n	dc2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    da74:	e0e8      	b.n	dc48 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    da76:	e0a1      	b.n	dbbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    da78:	e08c      	b.n	db94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    da7a:	e090      	b.n	db9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    da7c:	e033      	b.n	dae6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    da7e:	e02f      	b.n	dae0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    da80:	e043      	b.n	db0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    da82:	e03d      	b.n	db00 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    da84:	e021      	b.n	daca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    da86:	e015      	b.n	dab4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    da88:	e008      	b.n	da9c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    da8a:	e004      	b.n	da96 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    da8c:	e046      	b.n	db1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    da8e:	f8a4 000d 	strh.w	r0, [r4, #13]
    da92:	200d      	movs	r0, #13
    da94:	e07a      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    da96:	f884 9000 	strb.w	r9, [r4]
    da9a:	e038      	b.n	db0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    da9c:	f884 a000 	strb.w	sl, [r4]
    daa0:	7908      	ldrb	r0, [r1, #4]
    daa2:	70a0      	strb	r0, [r4, #2]
    daa4:	7948      	ldrb	r0, [r1, #5]
    daa6:	70e0      	strb	r0, [r4, #3]
    daa8:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    daac:	0a00      	lsrs	r0, r0, #8
    daae:	7120      	strb	r0, [r4, #4]
    dab0:	79c8      	ldrb	r0, [r1, #7]
    dab2:	e08b      	b.n	dbcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    dab4:	2008      	movs	r0, #8
    dab6:	7020      	strb	r0, [r4, #0]
    dab8:	7908      	ldrb	r0, [r1, #4]
    daba:	70a0      	strb	r0, [r4, #2]
    dabc:	7988      	ldrb	r0, [r1, #6]
    dabe:	70e0      	strb	r0, [r4, #3]
    dac0:	88c8      	ldrh	r0, [r1, #6]
    dac2:	0a00      	lsrs	r0, r0, #8
    dac4:	7120      	strb	r0, [r4, #4]
    dac6:	7a08      	ldrb	r0, [r1, #8]
    dac8:	e080      	b.n	dbcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    daca:	2030      	movs	r0, #48	; 0x30
    dacc:	7020      	strb	r0, [r4, #0]
    dace:	7908      	ldrb	r0, [r1, #4]
    dad0:	70a0      	strb	r0, [r4, #2]
    dad2:	7988      	ldrb	r0, [r1, #6]
    dad4:	70e0      	strb	r0, [r4, #3]
    dad6:	88c8      	ldrh	r0, [r1, #6]
    dad8:	0a00      	lsrs	r0, r0, #8
    dada:	7120      	strb	r0, [r4, #4]
    dadc:	2003      	movs	r0, #3
    dade:	e055      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dae0:	7022      	strb	r2, [r4, #0]
    dae2:	2007      	movs	r0, #7
    dae4:	e077      	b.n	dbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    dae6:	7022      	strb	r2, [r4, #0]
    dae8:	70a7      	strb	r7, [r4, #2]
    daea:	7908      	ldrb	r0, [r1, #4]
    daec:	70e0      	strb	r0, [r4, #3]
    daee:	7988      	ldrb	r0, [r1, #6]
    daf0:	7120      	strb	r0, [r4, #4]
    daf2:	88c8      	ldrh	r0, [r1, #6]
    daf4:	0a00      	lsrs	r0, r0, #8
    daf6:	7160      	strb	r0, [r4, #5]
    daf8:	7a08      	ldrb	r0, [r1, #8]
    dafa:	71a0      	strb	r0, [r4, #6]
    dafc:	7a48      	ldrb	r0, [r1, #9]
    dafe:	e05a      	b.n	dbb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    db00:	4620      	mov	r0, r4
    db02:	1d09      	adds	r1, r1, #4
    db04:	f7f7 fa2c 	bl	4f60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    db08:	e03e      	b.n	db88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    db0a:	2057      	movs	r0, #87	; 0x57
    db0c:	7020      	strb	r0, [r4, #0]
    db0e:	7908      	ldrb	r0, [r1, #4]
    db10:	70a0      	strb	r0, [r4, #2]
    db12:	8888      	ldrh	r0, [r1, #4]
    db14:	0a00      	lsrs	r0, r0, #8
    db16:	70e0      	strb	r0, [r4, #3]
    db18:	2002      	movs	r0, #2
    db1a:	e037      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    db1c:	7022      	strb	r2, [r4, #0]
    db1e:	220d      	movs	r2, #13
    db20:	70a2      	strb	r2, [r4, #2]
    db22:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    db26:	70e2      	strb	r2, [r4, #3]
    db28:	894a      	ldrh	r2, [r1, #10]
    db2a:	80a2      	strh	r2, [r4, #4]
    db2c:	784a      	ldrb	r2, [r1, #1]
    db2e:	71a2      	strb	r2, [r4, #6]
    db30:	f8d1 2002 	ldr.w	r2, [r1, #2]
    db34:	f8c4 2007 	str.w	r2, [r4, #7]
    db38:	88ca      	ldrh	r2, [r1, #6]
    db3a:	f8a4 200b 	strh.w	r2, [r4, #11]
    db3e:	7b0a      	ldrb	r2, [r1, #12]
    db40:	4620      	mov	r0, r4
    db42:	7362      	strb	r2, [r4, #13]
    db44:	7b4a      	ldrb	r2, [r1, #13]
    db46:	7382      	strb	r2, [r0, #14]
    db48:	7b8a      	ldrb	r2, [r1, #14]
    db4a:	73c2      	strb	r2, [r0, #15]
    db4c:	7e8a      	ldrb	r2, [r1, #26]
    db4e:	7402      	strb	r2, [r0, #16]
    db50:	7a4a      	ldrb	r2, [r1, #9]
    db52:	7442      	strb	r2, [r0, #17]
    db54:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    db58:	f8ad 2000 	strh.w	r2, [sp]
    db5c:	8242      	strh	r2, [r0, #18]
    db5e:	7cca      	ldrb	r2, [r1, #19]
    db60:	7502      	strb	r2, [r0, #20]
    db62:	694a      	ldr	r2, [r1, #20]
    db64:	f8c0 2015 	str.w	r2, [r0, #21]
    db68:	8b0a      	ldrh	r2, [r1, #24]
    db6a:	f8a0 2019 	strh.w	r2, [r0, #25]
    db6e:	7a0a      	ldrb	r2, [r1, #8]
    db70:	76c2      	strb	r2, [r0, #27]
    db72:	7a0d      	ldrb	r5, [r1, #8]
    db74:	2de5      	cmp	r5, #229	; 0xe5
    db76:	d300      	bcc.n	db7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    db78:	25e5      	movs	r5, #229	; 0xe5
    db7a:	462a      	mov	r2, r5
    db7c:	301c      	adds	r0, #28
    db7e:	311c      	adds	r1, #28
    db80:	f7ff fcc0 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db84:	351a      	adds	r5, #26
    db86:	b2e8      	uxtb	r0, r5
    db88:	2800      	cmp	r0, #0
    db8a:	d001      	beq.n	db90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    db8c:	7060      	strb	r0, [r4, #1]
    db8e:	1c80      	adds	r0, r0, #2
    db90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db94:	7022      	strb	r2, [r4, #0]
    db96:	f884 9002 	strb.w	r9, [r4, #2]
    db9a:	2001      	movs	r0, #1
    db9c:	e7f6      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    db9e:	7022      	strb	r2, [r4, #0]
    dba0:	70a6      	strb	r6, [r4, #2]
    dba2:	7908      	ldrb	r0, [r1, #4]
    dba4:	70e0      	strb	r0, [r4, #3]
    dba6:	7948      	ldrb	r0, [r1, #5]
    dba8:	7120      	strb	r0, [r4, #4]
    dbaa:	7988      	ldrb	r0, [r1, #6]
    dbac:	7160      	strb	r0, [r4, #5]
    dbae:	88c8      	ldrh	r0, [r1, #6]
    dbb0:	0a00      	lsrs	r0, r0, #8
    dbb2:	71a0      	strb	r0, [r4, #6]
    dbb4:	7a08      	ldrb	r0, [r1, #8]
    dbb6:	71e0      	strb	r0, [r4, #7]
    dbb8:	2006      	movs	r0, #6
    dbba:	e7e7      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dbbc:	7025      	strb	r5, [r4, #0]
    dbbe:	20a1      	movs	r0, #161	; 0xa1
    dbc0:	70a0      	strb	r0, [r4, #2]
    dbc2:	7908      	ldrb	r0, [r1, #4]
    dbc4:	70e0      	strb	r0, [r4, #3]
    dbc6:	7948      	ldrb	r0, [r1, #5]
    dbc8:	7120      	strb	r0, [r4, #4]
    dbca:	2000      	movs	r0, #0
    dbcc:	7160      	strb	r0, [r4, #5]
    dbce:	2004      	movs	r0, #4
    dbd0:	e7dc      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dbd2:	7025      	strb	r5, [r4, #0]
    dbd4:	20a2      	movs	r0, #162	; 0xa2
    dbd6:	70a0      	strb	r0, [r4, #2]
    dbd8:	7908      	ldrb	r0, [r1, #4]
    dbda:	70e0      	strb	r0, [r4, #3]
    dbdc:	8888      	ldrh	r0, [r1, #4]
    dbde:	0a00      	lsrs	r0, r0, #8
    dbe0:	7120      	strb	r0, [r4, #4]
    dbe2:	7988      	ldrb	r0, [r1, #6]
    dbe4:	7160      	strb	r0, [r4, #5]
    dbe6:	88c8      	ldrh	r0, [r1, #6]
    dbe8:	0a00      	lsrs	r0, r0, #8
    dbea:	71a0      	strb	r0, [r4, #6]
    dbec:	7a08      	ldrb	r0, [r1, #8]
    dbee:	71e0      	strb	r0, [r4, #7]
    dbf0:	8908      	ldrh	r0, [r1, #8]
    dbf2:	0a00      	lsrs	r0, r0, #8
    dbf4:	7220      	strb	r0, [r4, #8]
    dbf6:	7a88      	ldrb	r0, [r1, #10]
    dbf8:	7260      	strb	r0, [r4, #9]
    dbfa:	8948      	ldrh	r0, [r1, #10]
    dbfc:	0a00      	lsrs	r0, r0, #8
    dbfe:	72a0      	strb	r0, [r4, #10]
    dc00:	7b08      	ldrb	r0, [r1, #12]
    dc02:	72e0      	strb	r0, [r4, #11]
    dc04:	8988      	ldrh	r0, [r1, #12]
    dc06:	0a00      	lsrs	r0, r0, #8
    dc08:	7320      	strb	r0, [r4, #12]
    dc0a:	200b      	movs	r0, #11
    dc0c:	e7be      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dc0e:	7025      	strb	r5, [r4, #0]
    dc10:	20a3      	movs	r0, #163	; 0xa3
    dc12:	70a0      	strb	r0, [r4, #2]
    dc14:	7908      	ldrb	r0, [r1, #4]
    dc16:	70e0      	strb	r0, [r4, #3]
    dc18:	8888      	ldrh	r0, [r1, #4]
    dc1a:	0a00      	lsrs	r0, r0, #8
    dc1c:	7120      	strb	r0, [r4, #4]
    dc1e:	7988      	ldrb	r0, [r1, #6]
    dc20:	7160      	strb	r0, [r4, #5]
    dc22:	79c8      	ldrb	r0, [r1, #7]
    dc24:	71a0      	strb	r0, [r4, #6]
    dc26:	2005      	movs	r0, #5
    dc28:	e7b0      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dc2a:	7022      	strb	r2, [r4, #0]
    dc2c:	f884 e002 	strb.w	lr, [r4, #2]
    dc30:	7908      	ldrb	r0, [r1, #4]
    dc32:	70e0      	strb	r0, [r4, #3]
    dc34:	7948      	ldrb	r0, [r1, #5]
    dc36:	7120      	strb	r0, [r4, #4]
    dc38:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dc3c:	f8c4 0005 	str.w	r0, [r4, #5]
    dc40:	8948      	ldrh	r0, [r1, #10]
    dc42:	f8a4 0009 	strh.w	r0, [r4, #9]
    dc46:	e020      	b.n	dc8a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    dc48:	7025      	strb	r5, [r4, #0]
    dc4a:	20a4      	movs	r0, #164	; 0xa4
    dc4c:	70a0      	strb	r0, [r4, #2]
    dc4e:	7908      	ldrb	r0, [r1, #4]
    dc50:	70e0      	strb	r0, [r4, #3]
    dc52:	8888      	ldrh	r0, [r1, #4]
    dc54:	0a00      	lsrs	r0, r0, #8
    dc56:	7120      	strb	r0, [r4, #4]
    dc58:	7988      	ldrb	r0, [r1, #6]
    dc5a:	7160      	strb	r0, [r4, #5]
    dc5c:	79c8      	ldrb	r0, [r1, #7]
    dc5e:	71a0      	strb	r0, [r4, #6]
    dc60:	2007      	movs	r0, #7
    dc62:	e793      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dc64:	7025      	strb	r5, [r4, #0]
    dc66:	2080      	movs	r0, #128	; 0x80
    dc68:	70a0      	strb	r0, [r4, #2]
    dc6a:	888a      	ldrh	r2, [r1, #4]
    dc6c:	f8a4 2003 	strh.w	r2, [r4, #3]
    dc70:	88ca      	ldrh	r2, [r1, #6]
    dc72:	f8a4 2005 	strh.w	r2, [r4, #5]
    dc76:	7a0a      	ldrb	r2, [r1, #8]
    dc78:	71e2      	strb	r2, [r4, #7]
    dc7a:	7a4a      	ldrb	r2, [r1, #9]
    dc7c:	8122      	strh	r2, [r4, #8]
    dc7e:	7a8a      	ldrb	r2, [r1, #10]
    dc80:	72a2      	strb	r2, [r4, #10]
    dc82:	7ac9      	ldrb	r1, [r1, #11]
    dc84:	f001 0101 	and.w	r1, r1, #1
    dc88:	72e1      	strb	r1, [r4, #11]
    dc8a:	200a      	movs	r0, #10
    dc8c:	e77e      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000dc8e <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    dc8e:	223e      	movs	r2, #62	; 0x3e
    dc90:	7002      	strb	r2, [r0, #0]
    dc92:	2201      	movs	r2, #1
    dc94:	7082      	strb	r2, [r0, #2]
    dc96:	790a      	ldrb	r2, [r1, #4]
    dc98:	70c2      	strb	r2, [r0, #3]
    dc9a:	798a      	ldrb	r2, [r1, #6]
    dc9c:	7102      	strb	r2, [r0, #4]
    dc9e:	88ca      	ldrh	r2, [r1, #6]
    dca0:	0a12      	lsrs	r2, r2, #8
    dca2:	7142      	strb	r2, [r0, #5]
    dca4:	7a0a      	ldrb	r2, [r1, #8]
    dca6:	7182      	strb	r2, [r0, #6]
    dca8:	7a4a      	ldrb	r2, [r1, #9]
    dcaa:	71c2      	strb	r2, [r0, #7]
    dcac:	f8d1 200a 	ldr.w	r2, [r1, #10]
    dcb0:	6082      	str	r2, [r0, #8]
    dcb2:	89ca      	ldrh	r2, [r1, #14]
    dcb4:	8182      	strh	r2, [r0, #12]
    dcb6:	7c0a      	ldrb	r2, [r1, #16]
    dcb8:	7382      	strb	r2, [r0, #14]
    dcba:	8a0a      	ldrh	r2, [r1, #16]
    dcbc:	0a12      	lsrs	r2, r2, #8
    dcbe:	73c2      	strb	r2, [r0, #15]
    dcc0:	7c8a      	ldrb	r2, [r1, #18]
    dcc2:	7402      	strb	r2, [r0, #16]
    dcc4:	8a4a      	ldrh	r2, [r1, #18]
    dcc6:	0a12      	lsrs	r2, r2, #8
    dcc8:	7442      	strb	r2, [r0, #17]
    dcca:	7d0a      	ldrb	r2, [r1, #20]
    dccc:	7482      	strb	r2, [r0, #18]
    dcce:	8a8a      	ldrh	r2, [r1, #20]
    dcd0:	0a12      	lsrs	r2, r2, #8
    dcd2:	74c2      	strb	r2, [r0, #19]
    dcd4:	7d89      	ldrb	r1, [r1, #22]
    dcd6:	7501      	strb	r1, [r0, #20]
    dcd8:	2013      	movs	r0, #19
    dcda:	4770      	bx	lr

0000dcdc <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    dcdc:	223e      	movs	r2, #62	; 0x3e
    dcde:	7002      	strb	r2, [r0, #0]
    dce0:	2201      	movs	r2, #1
    dce2:	7082      	strb	r2, [r0, #2]
    dce4:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    dce8:	70c2      	strb	r2, [r0, #3]
    dcea:	788a      	ldrb	r2, [r1, #2]
    dcec:	7102      	strb	r2, [r0, #4]
    dcee:	884a      	ldrh	r2, [r1, #2]
    dcf0:	0a12      	lsrs	r2, r2, #8
    dcf2:	7142      	strb	r2, [r0, #5]
    dcf4:	790a      	ldrb	r2, [r1, #4]
    dcf6:	7182      	strb	r2, [r0, #6]
    dcf8:	794a      	ldrb	r2, [r1, #5]
    dcfa:	71c2      	strb	r2, [r0, #7]
    dcfc:	f8d1 2006 	ldr.w	r2, [r1, #6]
    dd00:	6082      	str	r2, [r0, #8]
    dd02:	894a      	ldrh	r2, [r1, #10]
    dd04:	8182      	strh	r2, [r0, #12]
    dd06:	7e0a      	ldrb	r2, [r1, #24]
    dd08:	7382      	strb	r2, [r0, #14]
    dd0a:	8b0a      	ldrh	r2, [r1, #24]
    dd0c:	0a12      	lsrs	r2, r2, #8
    dd0e:	73c2      	strb	r2, [r0, #15]
    dd10:	7e8a      	ldrb	r2, [r1, #26]
    dd12:	7402      	strb	r2, [r0, #16]
    dd14:	8b4a      	ldrh	r2, [r1, #26]
    dd16:	0a12      	lsrs	r2, r2, #8
    dd18:	7442      	strb	r2, [r0, #17]
    dd1a:	7f0a      	ldrb	r2, [r1, #28]
    dd1c:	7482      	strb	r2, [r0, #18]
    dd1e:	8b8a      	ldrh	r2, [r1, #28]
    dd20:	0a12      	lsrs	r2, r2, #8
    dd22:	74c2      	strb	r2, [r0, #19]
    dd24:	7f89      	ldrb	r1, [r1, #30]
    dd26:	7501      	strb	r1, [r0, #20]
    dd28:	2113      	movs	r1, #19
    dd2a:	7041      	strb	r1, [r0, #1]
    dd2c:	4608      	mov	r0, r1
    dd2e:	4770      	bx	lr

0000dd30 <sdc_hci_data_get>:
    dd30:	b510      	push	{r4, lr}
    dd32:	b120      	cbz	r0, dd3e <sdc_hci_data_get+0xe>
    dd34:	f7ff fd11 	bl	d75a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    dd38:	b120      	cbz	r0, dd44 <sdc_hci_data_get+0x14>
    dd3a:	2000      	movs	r0, #0
    dd3c:	bd10      	pop	{r4, pc}
    dd3e:	f06f 0015 	mvn.w	r0, #21
    dd42:	bd10      	pop	{r4, pc}
    dd44:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dd48:	bd10      	pop	{r4, pc}

0000dd4a <sdc_hci_data_put>:
    dd4a:	b510      	push	{r4, lr}
    dd4c:	f06f 0415 	mvn.w	r4, #21
    dd50:	b120      	cbz	r0, dd5c <sdc_hci_data_put+0x12>
    dd52:	f7ff fd10 	bl	d776 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    dd56:	b108      	cbz	r0, dd5c <sdc_hci_data_put+0x12>
    dd58:	2000      	movs	r0, #0
    dd5a:	bd10      	pop	{r4, pc}
    dd5c:	4620      	mov	r0, r4
    dd5e:	bd10      	pop	{r4, pc}

0000dd60 <sdc_hci_evt_get>:
    dd60:	b510      	push	{r4, lr}
    dd62:	b120      	cbz	r0, dd6e <sdc_hci_evt_get+0xe>
    dd64:	f7ff fd10 	bl	d788 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    dd68:	b120      	cbz	r0, dd74 <sdc_hci_evt_get+0x14>
    dd6a:	2000      	movs	r0, #0
    dd6c:	bd10      	pop	{r4, pc}
    dd6e:	f06f 0015 	mvn.w	r0, #21
    dd72:	bd10      	pop	{r4, pc}
    dd74:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dd78:	bd10      	pop	{r4, pc}

0000dd7a <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    dd7a:	f002 b8cb 	b.w	ff14 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000dd7e <sdc_hci_cmd_cb_read_transmit_power_level>:
    dd7e:	f002 b90a 	b.w	ff96 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000dd82 <sdc_hci_cmd_cb_set_event_mask>:
    dd82:	b510      	push	{r4, lr}
    dd84:	f7f7 f94a 	bl	501c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    dd88:	2000      	movs	r0, #0
    dd8a:	bd10      	pop	{r4, pc}

0000dd8c <sdc_hci_cmd_cb_set_event_mask_page_2>:
    dd8c:	b510      	push	{r4, lr}
    dd8e:	f7f7 f953 	bl	5038 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    dd92:	2000      	movs	r0, #0
    dd94:	bd10      	pop	{r4, pc}

0000dd96 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    dd96:	f002 b91a 	b.w	ffce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000dd9a <sdc_hci_cmd_vs_conn_event_extend>:
    dd9a:	b508      	push	{r3, lr}
    dd9c:	7800      	ldrb	r0, [r0, #0]
    dd9e:	f88d 0000 	strb.w	r0, [sp]
    dda2:	4668      	mov	r0, sp
    dda4:	f002 f888 	bl	feb8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    dda8:	bd08      	pop	{r3, pc}

0000ddaa <sdc_hci_cmd_vs_conn_update>:
    ddaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ddac:	2100      	movs	r1, #0
    ddae:	9100      	str	r1, [sp, #0]
    ddb0:	9101      	str	r1, [sp, #4]
    ddb2:	9102      	str	r1, [sp, #8]
    ddb4:	9103      	str	r1, [sp, #12]
    ddb6:	f8d0 1002 	ldr.w	r1, [r0, #2]
    ddba:	f641 524c 	movw	r2, #7500	; 0x1d4c
    ddbe:	4291      	cmp	r1, r2
    ddc0:	d304      	bcc.n	ddcc <sdc_hci_cmd_vs_conn_update+0x22>
    ddc2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ddc6:	fbb1 f1f2 	udiv	r1, r1, r2
    ddca:	e005      	b.n	ddd8 <sdc_hci_cmd_vs_conn_update+0x2e>
    ddcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ddd0:	fbb1 f1f2 	udiv	r1, r1, r2
    ddd4:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    ddd8:	8802      	ldrh	r2, [r0, #0]
    ddda:	b289      	uxth	r1, r1
    dddc:	f8ad 2000 	strh.w	r2, [sp]
    dde0:	f8ad 1002 	strh.w	r1, [sp, #2]
    dde4:	f8ad 1004 	strh.w	r1, [sp, #4]
    dde8:	88c1      	ldrh	r1, [r0, #6]
    ddea:	f8ad 1006 	strh.w	r1, [sp, #6]
    ddee:	8900      	ldrh	r0, [r0, #8]
    ddf0:	f8ad 0008 	strh.w	r0, [sp, #8]
    ddf4:	4668      	mov	r0, sp
    ddf6:	f001 fe3e 	bl	fa76 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    ddfa:	b004      	add	sp, #16
    ddfc:	bd10      	pop	{r4, pc}

0000ddfe <sdc_hci_cmd_vs_event_length_set>:
    ddfe:	f7fd be4b 	b.w	ba98 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000de02 <sdc_hci_cmd_vs_llpm_mode_set>:
    de02:	2001      	movs	r0, #1
    de04:	4770      	bx	lr

0000de06 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    de06:	7800      	ldrb	r0, [r0, #0]
    de08:	b100      	cbz	r0, de0c <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    de0a:	2001      	movs	r0, #1
    de0c:	f002 b82c 	b.w	fe68 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000de10 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    de10:	b570      	push	{r4, r5, r6, lr}
    de12:	4605      	mov	r5, r0
    de14:	2210      	movs	r2, #16
    de16:	2100      	movs	r1, #0
    de18:	f7ff fbee 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    de1c:	2210      	movs	r2, #16
    de1e:	2100      	movs	r1, #0
    de20:	f105 0010 	add.w	r0, r5, #16
    de24:	f7ff fbe8 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    de28:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    de2c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    de30:	1c40      	adds	r0, r0, #1
    de32:	d10b      	bne.n	de4c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    de34:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    de38:	1c40      	adds	r0, r0, #1
    de3a:	d107      	bne.n	de4c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    de3c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    de40:	1c40      	adds	r0, r0, #1
    de42:	d103      	bne.n	de4c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    de44:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    de48:	1c40      	adds	r0, r0, #1
    de4a:	d00b      	beq.n	de64 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    de4c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    de50:	6128      	str	r0, [r5, #16]
    de52:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    de56:	6168      	str	r0, [r5, #20]
    de58:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    de5c:	61a8      	str	r0, [r5, #24]
    de5e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    de62:	61e8      	str	r0, [r5, #28]
    de64:	2000      	movs	r0, #0
    de66:	f7f7 fdc9 	bl	59fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    de6a:	b918      	cbnz	r0, de74 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    de6c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    de70:	07c0      	lsls	r0, r0, #31
    de72:	d118      	bne.n	dea6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    de74:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    de78:	1c40      	adds	r0, r0, #1
    de7a:	d10b      	bne.n	de94 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    de7c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    de80:	1c40      	adds	r0, r0, #1
    de82:	d107      	bne.n	de94 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    de84:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    de88:	1c40      	adds	r0, r0, #1
    de8a:	d103      	bne.n	de94 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    de8c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    de90:	1c40      	adds	r0, r0, #1
    de92:	d008      	beq.n	dea6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    de94:	f854 0f90 	ldr.w	r0, [r4, #144]!
    de98:	6028      	str	r0, [r5, #0]
    de9a:	6860      	ldr	r0, [r4, #4]
    de9c:	6068      	str	r0, [r5, #4]
    de9e:	68a0      	ldr	r0, [r4, #8]
    dea0:	60a8      	str	r0, [r5, #8]
    dea2:	68e0      	ldr	r0, [r4, #12]
    dea4:	60e8      	str	r0, [r5, #12]
    dea6:	2000      	movs	r0, #0
    dea8:	bd70      	pop	{r4, r5, r6, pc}

0000deaa <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    deaa:	b570      	push	{r4, r5, r6, lr}
    deac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    deb0:	4604      	mov	r4, r0
    deb2:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    deb6:	1c40      	adds	r0, r0, #1
    deb8:	d105      	bne.n	dec6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    deba:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    debe:	43c0      	mvns	r0, r0
    dec0:	0400      	lsls	r0, r0, #16
    dec2:	0c00      	lsrs	r0, r0, #16
    dec4:	d03a      	beq.n	df3c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    dec6:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    deca:	07c0      	lsls	r0, r0, #31
    decc:	d036      	beq.n	df3c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    dece:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    ded2:	f8c4 0001 	str.w	r0, [r4, #1]
    ded6:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    deda:	f8a4 0005 	strh.w	r0, [r4, #5]
    dede:	79a0      	ldrb	r0, [r4, #6]
    dee0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    dee4:	71a0      	strb	r0, [r4, #6]
    dee6:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    deea:	1c40      	adds	r0, r0, #1
    deec:	d00f      	beq.n	df0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    deee:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    def2:	1c40      	adds	r0, r0, #1
    def4:	d00b      	beq.n	df0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    def6:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    defa:	1c40      	adds	r0, r0, #1
    defc:	d007      	beq.n	df0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    defe:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    df02:	1c40      	adds	r0, r0, #1
    df04:	d003      	beq.n	df0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    df06:	2000      	movs	r0, #0
    df08:	f7f7 fd78 	bl	59fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    df0c:	b140      	cbz	r0, df20 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    df0e:	2210      	movs	r2, #16
    df10:	2100      	movs	r1, #0
    df12:	1de0      	adds	r0, r4, #7
    df14:	f7ff fb70 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    df18:	2001      	movs	r0, #1
    df1a:	7020      	strb	r0, [r4, #0]
    df1c:	2000      	movs	r0, #0
    df1e:	bd70      	pop	{r4, r5, r6, pc}
    df20:	f855 0f90 	ldr.w	r0, [r5, #144]!
    df24:	f8c4 0007 	str.w	r0, [r4, #7]
    df28:	6868      	ldr	r0, [r5, #4]
    df2a:	f8c4 000b 	str.w	r0, [r4, #11]
    df2e:	68a8      	ldr	r0, [r5, #8]
    df30:	f8c4 000f 	str.w	r0, [r4, #15]
    df34:	68e8      	ldr	r0, [r5, #12]
    df36:	f8c4 0013 	str.w	r0, [r4, #19]
    df3a:	e7ed      	b.n	df18 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    df3c:	2000      	movs	r0, #0
    df3e:	e7ec      	b.n	df1a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000df40 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    df40:	f001 bfac 	b.w	fe9c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000df44 <sdc_hci_cmd_ip_read_bd_addr>:
    df44:	f001 bff7 	b.w	ff36 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000df48 <sdc_hci_cmd_ip_read_local_version_information>:
    df48:	f7fd bdf2 	b.w	bb30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000df4c <sdc_hci_cmd_le_add_device_to_resolving_list>:
    df4c:	f001 bd4a 	b.w	f9e4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000df50 <sdc_hci_cmd_le_add_device_to_white_list>:
    df50:	f001 bd63 	b.w	fa1a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000df54 <sdc_hci_cmd_le_clear_resolving_list>:
    df54:	f001 bd78 	b.w	fa48 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000df58 <sdc_hci_cmd_le_clear_white_list>:
    df58:	f001 bd83 	b.w	fa62 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000df5c <sdc_hci_cmd_le_conn_update>:
    df5c:	f001 bd8b 	b.w	fa76 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000df60 <sdc_hci_cmd_le_create_conn>:
    df60:	f7fd bb14 	b.w	b58c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000df64 <sdc_hci_cmd_le_create_conn_cancel>:
    df64:	f7fd bb6c 	b.w	b640 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000df68 <sdc_hci_cmd_le_enable_encryption>:
    df68:	f001 bf35 	b.w	fdd6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000df6c <sdc_hci_cmd_le_encrypt>:
    df6c:	f001 bdc5 	b.w	fafa <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000df70 <sdc_hci_cmd_le_rand>:
    df70:	f001 bdcc 	b.w	fb0c <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000df74 <sdc_hci_cmd_le_read_buffer_size>:
    df74:	f7fd bb90 	b.w	b698 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000df78 <sdc_hci_cmd_le_read_channel_map>:
    df78:	f7fd bb98 	b.w	b6ac <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000df7c <sdc_hci_cmd_le_read_max_data_length>:
    df7c:	f001 bdcc 	b.w	fb18 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000df80 <sdc_hci_cmd_le_read_phy>:
    df80:	f001 bdda 	b.w	fb38 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000df84 <sdc_hci_cmd_le_read_remote_features>:
    df84:	f7fd bbbc 	b.w	b700 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000df88 <sdc_hci_cmd_le_read_resolving_list_size>:
    df88:	f001 be01 	b.w	fb8e <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000df8c <sdc_hci_cmd_le_read_suggested_default_data_length>:
    df8c:	f7fd bbdc 	b.w	b748 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000df90 <sdc_hci_cmd_le_read_transmit_power>:
    df90:	f001 be01 	b.w	fb96 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000df94 <sdc_hci_cmd_le_read_white_list_size>:
    df94:	f001 be08 	b.w	fba8 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000df98 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    df98:	f001 be0a 	b.w	fbb0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000df9c <sdc_hci_cmd_le_remove_device_from_white_list>:
    df9c:	f001 be21 	b.w	fbe2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000dfa0 <sdc_hci_cmd_le_set_address_resolution_enable>:
    dfa0:	f001 be34 	b.w	fc0c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000dfa4 <sdc_hci_cmd_le_set_data_length>:
    dfa4:	f001 be40 	b.w	fc28 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000dfa8 <sdc_hci_cmd_le_set_default_phy>:
    dfa8:	f7fd bbde 	b.w	b768 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000dfac <sdc_hci_cmd_le_set_event_mask>:
    dfac:	b510      	push	{r4, lr}
    dfae:	f7f7 f82f 	bl	5010 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    dfb2:	2000      	movs	r0, #0
    dfb4:	bd10      	pop	{r4, pc}

0000dfb6 <sdc_hci_cmd_le_set_host_channel_classification>:
    dfb6:	f001 be5e 	b.w	fc76 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000dfba <sdc_hci_cmd_le_set_phy>:
    dfba:	f001 be7c 	b.w	fcb6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000dfbe <sdc_hci_cmd_le_set_privacy_mode>:
    dfbe:	f001 be9a 	b.w	fcf6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000dfc2 <sdc_hci_cmd_le_set_random_address>:
    dfc2:	f001 beae 	b.w	fd22 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000dfc6 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    dfc6:	f001 beba 	b.w	fd3e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000dfca <sdc_hci_cmd_le_set_scan_enable>:
    dfca:	f001 bec1 	b.w	fd50 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000dfce <sdc_hci_cmd_le_set_scan_params>:
    dfce:	f001 bed5 	b.w	fd7c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000dfd2 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    dfd2:	f001 bf32 	b.w	fe3a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000dfd6 <sdc_hci_cmd_lc_disconnect>:
    dfd6:	f001 bcb4 	b.w	f942 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000dfda <sdc_hci_cmd_lc_read_remote_version_information>:
    dfda:	f001 bfb8 	b.w	ff4e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    dfde:	b570      	push	{r4, r5, r6, lr}
    dfe0:	880b      	ldrh	r3, [r1, #0]
    dfe2:	7f04      	ldrb	r4, [r0, #28]
    dfe4:	f100 0524 	add.w	r5, r0, #36	; 0x24
    dfe8:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    dfec:	8802      	ldrh	r2, [r0, #0]
    dfee:	4435      	add	r5, r6
    dff0:	1da4      	adds	r4, r4, #6
    dff2:	882d      	ldrh	r5, [r5, #0]
    dff4:	4422      	add	r2, r4
    dff6:	b292      	uxth	r2, r2
    dff8:	4425      	add	r5, r4
    dffa:	1e54      	subs	r4, r2, #1
    dffc:	442c      	add	r4, r5
    dffe:	fb94 f4f2 	sdiv	r4, r4, r2
    e002:	fb02 6204 	mla	r2, r2, r4, r6
    e006:	8840      	ldrh	r0, [r0, #2]
    e008:	b292      	uxth	r2, r2
    e00a:	4290      	cmp	r0, r2
    e00c:	d903      	bls.n	e016 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    e00e:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    e012:	4310      	orrs	r0, r2
    e014:	e002      	b.n	e01c <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    e016:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    e01a:	4398      	bics	r0, r3
    e01c:	8008      	strh	r0, [r1, #0]
    e01e:	bd70      	pop	{r4, r5, r6, pc}
    e020:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    e024:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e028:	429a      	cmp	r2, r3
    e02a:	d107      	bne.n	e03c <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    e02c:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    e030:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    e034:	4288      	cmp	r0, r1
    e036:	d001      	beq.n	e03c <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    e038:	2001      	movs	r0, #1
    e03a:	4770      	bx	lr
    e03c:	2000      	movs	r0, #0
    e03e:	4770      	bx	lr

0000e040 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    e040:	b570      	push	{r4, r5, r6, lr}
    e042:	7f00      	ldrb	r0, [r0, #28]
    e044:	461c      	mov	r4, r3
    e046:	1d80      	adds	r0, r0, #6
    e048:	4408      	add	r0, r1
    e04a:	4613      	mov	r3, r2
    e04c:	8809      	ldrh	r1, [r1, #0]
    e04e:	9a04      	ldr	r2, [sp, #16]
    e050:	1cc9      	adds	r1, r1, #3
    e052:	b289      	uxth	r1, r1
    e054:	1915      	adds	r5, r2, r4
    e056:	1ec0      	subs	r0, r0, #3
    e058:	428d      	cmp	r5, r1
    e05a:	d805      	bhi.n	e068 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    e05c:	1881      	adds	r1, r0, r2
    e05e:	4622      	mov	r2, r4
    e060:	4618      	mov	r0, r3
    e062:	f7ff fa4f 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e066:	e000      	b.n	e06a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    e068:	2400      	movs	r4, #0
    e06a:	4620      	mov	r0, r4
    e06c:	bd70      	pop	{r4, r5, r6, pc}

0000e06e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    e06e:	b570      	push	{r4, r5, r6, lr}
    e070:	7f00      	ldrb	r0, [r0, #28]
    e072:	461c      	mov	r4, r3
    e074:	1d80      	adds	r0, r0, #6
    e076:	4408      	add	r0, r1
    e078:	4613      	mov	r3, r2
    e07a:	8809      	ldrh	r1, [r1, #0]
    e07c:	9a04      	ldr	r2, [sp, #16]
    e07e:	1cc9      	adds	r1, r1, #3
    e080:	b289      	uxth	r1, r1
    e082:	1915      	adds	r5, r2, r4
    e084:	1ec0      	subs	r0, r0, #3
    e086:	428d      	cmp	r5, r1
    e088:	d805      	bhi.n	e096 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    e08a:	4410      	add	r0, r2
    e08c:	4622      	mov	r2, r4
    e08e:	4619      	mov	r1, r3
    e090:	f7ff fa38 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e094:	e000      	b.n	e098 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    e096:	2400      	movs	r4, #0
    e098:	4620      	mov	r0, r4
    e09a:	bd70      	pop	{r4, r5, r6, pc}

0000e09c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    e09c:	8881      	ldrh	r1, [r0, #4]
    e09e:	88c0      	ldrh	r0, [r0, #6]
    e0a0:	4288      	cmp	r0, r1
    e0a2:	d101      	bne.n	e0a8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    e0a4:	2001      	movs	r0, #1
    e0a6:	4770      	bx	lr
    e0a8:	2000      	movs	r0, #0
    e0aa:	4770      	bx	lr

0000e0ac <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    e0ac:	8881      	ldrh	r1, [r0, #4]
    e0ae:	8900      	ldrh	r0, [r0, #8]
    e0b0:	4288      	cmp	r0, r1
    e0b2:	d101      	bne.n	e0b8 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    e0b4:	2001      	movs	r0, #1
    e0b6:	4770      	bx	lr
    e0b8:	2000      	movs	r0, #0
    e0ba:	4770      	bx	lr

0000e0bc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    e0bc:	b570      	push	{r4, r5, r6, lr}
    e0be:	4604      	mov	r4, r0
    e0c0:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e0c4:	8880      	ldrh	r0, [r0, #4]
    e0c6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e0ca:	4401      	add	r1, r0
    e0cc:	8a20      	ldrh	r0, [r4, #16]
    e0ce:	2800      	cmp	r0, #0
    e0d0:	d01a      	beq.n	e108 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    e0d2:	89a2      	ldrh	r2, [r4, #12]
    e0d4:	2500      	movs	r5, #0
    e0d6:	4410      	add	r0, r2
    e0d8:	b280      	uxth	r0, r0
    e0da:	81a0      	strh	r0, [r4, #12]
    e0dc:	880a      	ldrh	r2, [r1, #0]
    e0de:	4290      	cmp	r0, r2
    e0e0:	d905      	bls.n	e0ee <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    e0e2:	f240 1163 	movw	r1, #355	; 0x163
    e0e6:	f04f 0014 	mov.w	r0, #20
    e0ea:	f7f6 fe15 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0ee:	d109      	bne.n	e104 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    e0f0:	69a0      	ldr	r0, [r4, #24]
    e0f2:	b108      	cbz	r0, e0f8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    e0f4:	7f40      	ldrb	r0, [r0, #29]
    e0f6:	7088      	strb	r0, [r1, #2]
    e0f8:	f104 0104 	add.w	r1, r4, #4
    e0fc:	4620      	mov	r0, r4
    e0fe:	f7ff ff6e 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e102:	81a5      	strh	r5, [r4, #12]
    e104:	8225      	strh	r5, [r4, #16]
    e106:	2001      	movs	r0, #1
    e108:	bd70      	pop	{r4, r5, r6, pc}

0000e10a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    e10a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e10c:	4604      	mov	r4, r0
    e10e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    e112:	88c0      	ldrh	r0, [r0, #6]
    e114:	460e      	mov	r6, r1
    e116:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    e11a:	8a60      	ldrh	r0, [r4, #18]
    e11c:	19d9      	adds	r1, r3, r7
    e11e:	b108      	cbz	r0, e124 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    e120:	42b0      	cmp	r0, r6
    e122:	d201      	bcs.n	e128 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    e124:	2000      	movs	r0, #0
    e126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e128:	89e0      	ldrh	r0, [r4, #14]
    e12a:	2500      	movs	r5, #0
    e12c:	b140      	cbz	r0, e140 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    e12e:	f8b1 c000 	ldrh.w	ip, [r1]
    e132:	4560      	cmp	r0, ip
    e134:	d008      	beq.n	e148 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    e136:	f240 214b 	movw	r1, #587	; 0x24b
    e13a:	2014      	movs	r0, #20
    e13c:	f7f6 fdec 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e140:	7f60      	ldrb	r0, [r4, #29]
    e142:	7088      	strb	r0, [r1, #2]
    e144:	800d      	strh	r5, [r1, #0]
    e146:	e00e      	b.n	e166 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    e148:	f894 c01c 	ldrb.w	ip, [r4, #28]
    e14c:	4418      	add	r0, r3
    e14e:	f10c 0c06 	add.w	ip, ip, #6
    e152:	44bc      	add	ip, r7
    e154:	4460      	add	r0, ip
    e156:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    e15a:	f820 cc03 	strh.w	ip, [r0, #-3]
    e15e:	f894 c020 	ldrb.w	ip, [r4, #32]
    e162:	f800 cc01 	strb.w	ip, [r0, #-1]
    e166:	89e0      	ldrh	r0, [r4, #14]
    e168:	4430      	add	r0, r6
    e16a:	81e0      	strh	r0, [r4, #14]
    e16c:	8808      	ldrh	r0, [r1, #0]
    e16e:	4430      	add	r0, r6
    e170:	8008      	strh	r0, [r1, #0]
    e172:	b19a      	cbz	r2, e19c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    e174:	1da1      	adds	r1, r4, #6
    e176:	4620      	mov	r0, r4
    e178:	f7ff ff31 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e17c:	81e5      	strh	r5, [r4, #14]
    e17e:	7f60      	ldrb	r0, [r4, #29]
    e180:	1c40      	adds	r0, r0, #1
    e182:	7760      	strb	r0, [r4, #29]
    e184:	7da0      	ldrb	r0, [r4, #22]
    e186:	f88d 0000 	strb.w	r0, [sp]
    e18a:	9800      	ldr	r0, [sp, #0]
    e18c:	9000      	str	r0, [sp, #0]
    e18e:	f89d 0000 	ldrb.w	r0, [sp]
    e192:	b178      	cbz	r0, e1b4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e194:	88e0      	ldrh	r0, [r4, #6]
    e196:	82a0      	strh	r0, [r4, #20]
    e198:	75a5      	strb	r5, [r4, #22]
    e19a:	e00b      	b.n	e1b4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e19c:	7f20      	ldrb	r0, [r4, #28]
    e19e:	89e1      	ldrh	r1, [r4, #14]
    e1a0:	1d80      	adds	r0, r0, #6
    e1a2:	4438      	add	r0, r7
    e1a4:	4419      	add	r1, r3
    e1a6:	4408      	add	r0, r1
    e1a8:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    e1ac:	83e1      	strh	r1, [r4, #30]
    e1ae:	7880      	ldrb	r0, [r0, #2]
    e1b0:	f884 0020 	strb.w	r0, [r4, #32]
    e1b4:	8265      	strh	r5, [r4, #18]
    e1b6:	2001      	movs	r0, #1
    e1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e1ba <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    e1ba:	1cc0      	adds	r0, r0, #3
    e1bc:	4770      	bx	lr

0000e1be <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    e1be:	b510      	push	{r4, lr}
    e1c0:	88c2      	ldrh	r2, [r0, #6]
    e1c2:	8943      	ldrh	r3, [r0, #10]
    e1c4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    e1c8:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    e1cc:	1a61      	subs	r1, r4, r1
    e1ce:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    e1d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    e1d6:	429a      	cmp	r2, r3
    e1d8:	d101      	bne.n	e1de <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    e1da:	8842      	ldrh	r2, [r0, #2]
    e1dc:	4411      	add	r1, r2
    e1de:	7f02      	ldrb	r2, [r0, #28]
    e1e0:	8800      	ldrh	r0, [r0, #0]
    e1e2:	4410      	add	r0, r2
    e1e4:	1d80      	adds	r0, r0, #6
    e1e6:	b280      	uxth	r0, r0
    e1e8:	fb91 f0f0 	sdiv	r0, r1, r0
    e1ec:	b280      	uxth	r0, r0
    e1ee:	bd10      	pop	{r4, pc}

0000e1f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    e1f0:	b510      	push	{r4, lr}
    e1f2:	4604      	mov	r4, r0
    e1f4:	88c0      	ldrh	r0, [r0, #6]
    e1f6:	88a1      	ldrh	r1, [r4, #4]
    e1f8:	4281      	cmp	r1, r0
    e1fa:	d007      	beq.n	e20c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e1fc:	89a0      	ldrh	r0, [r4, #12]
    e1fe:	b928      	cbnz	r0, e20c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e200:	8a20      	ldrh	r0, [r4, #16]
    e202:	b918      	cbnz	r0, e20c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e204:	88a0      	ldrh	r0, [r4, #4]
    e206:	8aa1      	ldrh	r1, [r4, #20]
    e208:	4288      	cmp	r0, r1
    e20a:	d101      	bne.n	e210 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    e20c:	2000      	movs	r0, #0
    e20e:	bd10      	pop	{r4, pc}
    e210:	1d21      	adds	r1, r4, #4
    e212:	4620      	mov	r0, r4
    e214:	f7ff fee3 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e218:	2000      	movs	r0, #0
    e21a:	8220      	strh	r0, [r4, #16]
    e21c:	2001      	movs	r0, #1
    e21e:	bd10      	pop	{r4, pc}

0000e220 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    e220:	b510      	push	{r4, lr}
    e222:	4604      	mov	r4, r0
    e224:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e228:	88c0      	ldrh	r0, [r0, #6]
    e22a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e22e:	4402      	add	r2, r0
    e230:	8820      	ldrh	r0, [r4, #0]
    e232:	2845      	cmp	r0, #69	; 0x45
    e234:	d200      	bcs.n	e238 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    e236:	2045      	movs	r0, #69	; 0x45
    e238:	4288      	cmp	r0, r1
    e23a:	d204      	bcs.n	e246 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    e23c:	f240 1119 	movw	r1, #281	; 0x119
    e240:	2014      	movs	r0, #20
    e242:	f7f6 fd69 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e246:	7de0      	ldrb	r0, [r4, #23]
    e248:	2800      	cmp	r0, #0
    e24a:	d003      	beq.n	e254 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    e24c:	8810      	ldrh	r0, [r2, #0]
    e24e:	4288      	cmp	r0, r1
    e250:	d201      	bcs.n	e256 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    e252:	2000      	movs	r0, #0
    e254:	bd10      	pop	{r4, pc}
    e256:	8011      	strh	r1, [r2, #0]
    e258:	1da1      	adds	r1, r4, #6
    e25a:	4620      	mov	r0, r4
    e25c:	f7ff febf 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e260:	2000      	movs	r0, #0
    e262:	75e0      	strb	r0, [r4, #23]
    e264:	2001      	movs	r0, #1
    e266:	bd10      	pop	{r4, pc}

0000e268 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    e268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e26c:	8941      	ldrh	r1, [r0, #10]
    e26e:	8886      	ldrh	r6, [r0, #4]
    e270:	4604      	mov	r4, r0
    e272:	2500      	movs	r5, #0
    e274:	f100 070a 	add.w	r7, r0, #10
    e278:	e006      	b.n	e288 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    e27a:	4639      	mov	r1, r7
    e27c:	4620      	mov	r0, r4
    e27e:	f7ff feae 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e282:	1c6d      	adds	r5, r5, #1
    e284:	8961      	ldrh	r1, [r4, #10]
    e286:	b2ad      	uxth	r5, r5
    e288:	42b1      	cmp	r1, r6
    e28a:	d1f6      	bne.n	e27a <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    e28c:	4628      	mov	r0, r5
    e28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e292 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    e292:	b530      	push	{r4, r5, lr}
    e294:	88c4      	ldrh	r4, [r0, #6]
    e296:	8881      	ldrh	r1, [r0, #4]
    e298:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e29c:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e2a0:	4413      	add	r3, r2
    e2a2:	8882      	ldrh	r2, [r0, #4]
    e2a4:	8a85      	ldrh	r5, [r0, #20]
    e2a6:	42aa      	cmp	r2, r5
    e2a8:	d012      	beq.n	e2d0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e2aa:	42a1      	cmp	r1, r4
    e2ac:	d010      	beq.n	e2d0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e2ae:	8981      	ldrh	r1, [r0, #12]
    e2b0:	b971      	cbnz	r1, e2d0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e2b2:	6982      	ldr	r2, [r0, #24]
    e2b4:	b172      	cbz	r2, e2d4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e2b6:	4610      	mov	r0, r2
    e2b8:	f7ff fef8 	bl	e0ac <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    e2bc:	b950      	cbnz	r0, e2d4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e2be:	8910      	ldrh	r0, [r2, #8]
    e2c0:	3224      	adds	r2, #36	; 0x24
    e2c2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e2c6:	4410      	add	r0, r2
    e2c8:	7899      	ldrb	r1, [r3, #2]
    e2ca:	7880      	ldrb	r0, [r0, #2]
    e2cc:	4288      	cmp	r0, r1
    e2ce:	d101      	bne.n	e2d4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e2d0:	2000      	movs	r0, #0
    e2d2:	bd30      	pop	{r4, r5, pc}
    e2d4:	4618      	mov	r0, r3
    e2d6:	bd30      	pop	{r4, r5, pc}

0000e2d8 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    e2d8:	8803      	ldrh	r3, [r0, #0]
    e2da:	2b45      	cmp	r3, #69	; 0x45
    e2dc:	d200      	bcs.n	e2e0 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    e2de:	2345      	movs	r3, #69	; 0x45
    e2e0:	8013      	strh	r3, [r2, #0]
    e2e2:	88c2      	ldrh	r2, [r0, #6]
    e2e4:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    e2e8:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e2ec:	441a      	add	r2, r3
    e2ee:	600a      	str	r2, [r1, #0]
    e2f0:	89c0      	ldrh	r0, [r0, #14]
    e2f2:	4770      	bx	lr

0000e2f4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    e2f4:	7f00      	ldrb	r0, [r0, #28]
    e2f6:	1d80      	adds	r0, r0, #6
    e2f8:	4408      	add	r0, r1
    e2fa:	1ec0      	subs	r0, r0, #3
    e2fc:	6010      	str	r0, [r2, #0]
    e2fe:	8808      	ldrh	r0, [r1, #0]
    e300:	4770      	bx	lr

0000e302 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    e302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e306:	460e      	mov	r6, r1
    e308:	88c1      	ldrh	r1, [r0, #6]
    e30a:	8902      	ldrh	r2, [r0, #8]
    e30c:	4604      	mov	r4, r0
    e30e:	f100 0824 	add.w	r8, r0, #36	; 0x24
    e312:	8800      	ldrh	r0, [r0, #0]
    e314:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    e318:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    e31c:	2845      	cmp	r0, #69	; 0x45
    e31e:	d200      	bcs.n	e322 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    e320:	2045      	movs	r0, #69	; 0x45
    e322:	42b0      	cmp	r0, r6
    e324:	d203      	bcs.n	e32e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    e326:	21db      	movs	r1, #219	; 0xdb
    e328:	2014      	movs	r0, #20
    e32a:	f7f6 fcf5 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e32e:	4610      	mov	r0, r2
    e330:	f7ff fe76 	bl	e020 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e334:	b110      	cbz	r0, e33c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    e336:	2000      	movs	r0, #0
    e338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e33c:	42af      	cmp	r7, r5
    e33e:	d908      	bls.n	e352 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e340:	7f21      	ldrb	r1, [r4, #28]
    e342:	1b78      	subs	r0, r7, r5
    e344:	1a40      	subs	r0, r0, r1
    e346:	1f80      	subs	r0, r0, #6
    e348:	4286      	cmp	r6, r0
    e34a:	dd02      	ble.n	e352 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e34c:	2000      	movs	r0, #0
    e34e:	75e0      	strb	r0, [r4, #23]
    e350:	e7f1      	b.n	e336 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    e352:	eb08 0005 	add.w	r0, r8, r5
    e356:	2101      	movs	r1, #1
    e358:	8006      	strh	r6, [r0, #0]
    e35a:	75e1      	strb	r1, [r4, #23]
    e35c:	e7ec      	b.n	e338 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000e35e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    e35e:	b538      	push	{r3, r4, r5, lr}
    e360:	88c4      	ldrh	r4, [r0, #6]
    e362:	8881      	ldrh	r1, [r0, #4]
    e364:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e368:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e36c:	441a      	add	r2, r3
    e36e:	42a1      	cmp	r1, r4
    e370:	d010      	beq.n	e394 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e372:	8983      	ldrh	r3, [r0, #12]
    e374:	8a05      	ldrh	r5, [r0, #16]
    e376:	8812      	ldrh	r2, [r2, #0]
    e378:	442b      	add	r3, r5
    e37a:	4293      	cmp	r3, r2
    e37c:	d308      	bcc.n	e390 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    e37e:	f8ad 1000 	strh.w	r1, [sp]
    e382:	4669      	mov	r1, sp
    e384:	f7ff fe2b 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e388:	f8bd 0000 	ldrh.w	r0, [sp]
    e38c:	42a0      	cmp	r0, r4
    e38e:	d001      	beq.n	e394 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e390:	2001      	movs	r0, #1
    e392:	bd38      	pop	{r3, r4, r5, pc}
    e394:	2000      	movs	r0, #0
    e396:	bd38      	pop	{r3, r4, r5, pc}

0000e398 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    e398:	b570      	push	{r4, r5, r6, lr}
    e39a:	88c6      	ldrh	r6, [r0, #6]
    e39c:	8885      	ldrh	r5, [r0, #4]
    e39e:	4603      	mov	r3, r0
    e3a0:	f100 0424 	add.w	r4, r0, #36	; 0x24
    e3a4:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    e3a8:	4420      	add	r0, r4
    e3aa:	42b5      	cmp	r5, r6
    e3ac:	d102      	bne.n	e3b4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    e3ae:	2000      	movs	r0, #0
    e3b0:	8218      	strh	r0, [r3, #16]
    e3b2:	bd70      	pop	{r4, r5, r6, pc}
    e3b4:	8804      	ldrh	r4, [r0, #0]
    e3b6:	899d      	ldrh	r5, [r3, #12]
    e3b8:	7f1e      	ldrb	r6, [r3, #28]
    e3ba:	1b64      	subs	r4, r4, r5
    e3bc:	4435      	add	r5, r6
    e3be:	4428      	add	r0, r5
    e3c0:	880d      	ldrh	r5, [r1, #0]
    e3c2:	b2a4      	uxth	r4, r4
    e3c4:	1cc0      	adds	r0, r0, #3
    e3c6:	42a5      	cmp	r5, r4
    e3c8:	d900      	bls.n	e3cc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    e3ca:	800c      	strh	r4, [r1, #0]
    e3cc:	899c      	ldrh	r4, [r3, #12]
    e3ce:	b124      	cbz	r4, e3da <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    e3d0:	2400      	movs	r4, #0
    e3d2:	7014      	strb	r4, [r2, #0]
    e3d4:	8809      	ldrh	r1, [r1, #0]
    e3d6:	8219      	strh	r1, [r3, #16]
    e3d8:	bd70      	pop	{r4, r5, r6, pc}
    e3da:	2401      	movs	r4, #1
    e3dc:	e7f9      	b.n	e3d2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000e3de <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    e3de:	b508      	push	{r3, lr}
    e3e0:	8a81      	ldrh	r1, [r0, #20]
    e3e2:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e3e6:	3aff      	subs	r2, #255	; 0xff
    e3e8:	d008      	beq.n	e3fc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    e3ea:	7d82      	ldrb	r2, [r0, #22]
    e3ec:	f88d 2000 	strb.w	r2, [sp]
    e3f0:	9a00      	ldr	r2, [sp, #0]
    e3f2:	9200      	str	r2, [sp, #0]
    e3f4:	f89d 2000 	ldrb.w	r2, [sp]
    e3f8:	b952      	cbnz	r2, e410 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e3fa:	e004      	b.n	e406 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    e3fc:	f44f 7162 	mov.w	r1, #904	; 0x388
    e400:	2014      	movs	r0, #20
    e402:	f7f6 fc89 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e406:	8880      	ldrh	r0, [r0, #4]
    e408:	4281      	cmp	r1, r0
    e40a:	d101      	bne.n	e410 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e40c:	2000      	movs	r0, #0
    e40e:	bd08      	pop	{r3, pc}
    e410:	2001      	movs	r0, #1
    e412:	bd08      	pop	{r3, pc}

0000e414 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    e414:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e418:	8281      	strh	r1, [r0, #20]
    e41a:	2100      	movs	r1, #0
    e41c:	7581      	strb	r1, [r0, #22]
    e41e:	4770      	bx	lr

0000e420 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    e420:	b510      	push	{r4, lr}
    e422:	8a81      	ldrh	r1, [r0, #20]
    e424:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e428:	3aff      	subs	r2, #255	; 0xff
    e42a:	d004      	beq.n	e436 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    e42c:	f44f 7159 	mov.w	r1, #868	; 0x364
    e430:	2014      	movs	r0, #20
    e432:	f7f6 fc71 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e436:	88c1      	ldrh	r1, [r0, #6]
    e438:	8281      	strh	r1, [r0, #20]
    e43a:	89c1      	ldrh	r1, [r0, #14]
    e43c:	b109      	cbz	r1, e442 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    e43e:	2101      	movs	r1, #1
    e440:	e000      	b.n	e444 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    e442:	2100      	movs	r1, #0
    e444:	7581      	strb	r1, [r0, #22]
    e446:	bd10      	pop	{r4, pc}

0000e448 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    e448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e44c:	461d      	mov	r5, r3
    e44e:	4616      	mov	r6, r2
    e450:	9f06      	ldr	r7, [sp, #24]
    e452:	460b      	mov	r3, r1
    e454:	4604      	mov	r4, r0
    e456:	463a      	mov	r2, r7
    e458:	4629      	mov	r1, r5
    e45a:	4630      	mov	r0, r6
    e45c:	f000 f84f 	bl	e4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e460:	4283      	cmp	r3, r0
    e462:	d201      	bcs.n	e468 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    e464:	21a8      	movs	r1, #168	; 0xa8
    e466:	e018      	b.n	e49a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e468:	1ce0      	adds	r0, r4, #3
    e46a:	f020 0103 	bic.w	r1, r0, #3
    e46e:	4620      	mov	r0, r4
    e470:	42a1      	cmp	r1, r4
    e472:	d001      	beq.n	e478 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    e474:	21a9      	movs	r1, #169	; 0xa9
    e476:	e010      	b.n	e49a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e478:	2224      	movs	r2, #36	; 0x24
    e47a:	2100      	movs	r1, #0
    e47c:	f7ff f8bc 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e480:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e484:	82a0      	strh	r0, [r4, #20]
    e486:	19a8      	adds	r0, r5, r6
    e488:	1d80      	adds	r0, r0, #6
    e48a:	4378      	muls	r0, r7
    e48c:	b280      	uxth	r0, r0
    e48e:	7725      	strb	r5, [r4, #28]
    e490:	8060      	strh	r0, [r4, #2]
    e492:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    e496:	d903      	bls.n	e4a0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    e498:	21af      	movs	r1, #175	; 0xaf
    e49a:	2014      	movs	r0, #20
    e49c:	f7f6 fc3c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4a0:	8026      	strh	r6, [r4, #0]
    e4a2:	2000      	movs	r0, #0
    e4a4:	7760      	strb	r0, [r4, #29]
    e4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e4aa <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    e4aa:	6181      	str	r1, [r0, #24]
    e4ac:	6188      	str	r0, [r1, #24]
    e4ae:	4770      	bx	lr

0000e4b0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    e4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4b4:	460b      	mov	r3, r1
    e4b6:	4604      	mov	r4, r0
    e4b8:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e4bc:	8905      	ldrh	r5, [r0, #8]
    e4be:	8946      	ldrh	r6, [r0, #10]
    e4c0:	8880      	ldrh	r0, [r0, #4]
    e4c2:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    e4c6:	4439      	add	r1, r7
    e4c8:	460f      	mov	r7, r1
    e4ca:	4285      	cmp	r5, r0
    e4cc:	d102      	bne.n	e4d4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    e4ce:	2000      	movs	r0, #0
    e4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4d4:	b10a      	cbz	r2, e4da <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    e4d6:	1cc8      	adds	r0, r1, #3
    e4d8:	6010      	str	r0, [r2, #0]
    e4da:	b123      	cbz	r3, e4e6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    e4dc:	7f22      	ldrb	r2, [r4, #28]
    e4de:	1cf9      	adds	r1, r7, #3
    e4e0:	4618      	mov	r0, r3
    e4e2:	f7ff f80f 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e4e6:	883f      	ldrh	r7, [r7, #0]
    e4e8:	f104 0108 	add.w	r1, r4, #8
    e4ec:	4620      	mov	r0, r4
    e4ee:	f7ff fd76 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e4f2:	42b5      	cmp	r5, r6
    e4f4:	d101      	bne.n	e4fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    e4f6:	8920      	ldrh	r0, [r4, #8]
    e4f8:	8160      	strh	r0, [r4, #10]
    e4fa:	4638      	mov	r0, r7
    e4fc:	e7e8      	b.n	e4d0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000e4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    e4fe:	4401      	add	r1, r0
    e500:	1d89      	adds	r1, r1, #6
    e502:	4351      	muls	r1, r2
    e504:	b28a      	uxth	r2, r1
    e506:	2100      	movs	r1, #0
    e508:	2845      	cmp	r0, #69	; 0x45
    e50a:	d201      	bcs.n	e510 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    e50c:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    e510:	3224      	adds	r2, #36	; 0x24
    e512:	1850      	adds	r0, r2, r1
    e514:	b280      	uxth	r0, r0
    e516:	4770      	bx	lr

0000e518 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    e518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e51c:	4688      	mov	r8, r1
    e51e:	88c1      	ldrh	r1, [r0, #6]
    e520:	4604      	mov	r4, r0
    e522:	8900      	ldrh	r0, [r0, #8]
    e524:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    e528:	f104 0524 	add.w	r5, r4, #36	; 0x24
    e52c:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    e530:	eb05 0906 	add.w	r9, r5, r6
    e534:	f7ff fd74 	bl	e020 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e538:	2200      	movs	r2, #0
    e53a:	b998      	cbnz	r0, e564 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    e53c:	8820      	ldrh	r0, [r4, #0]
    e53e:	2845      	cmp	r0, #69	; 0x45
    e540:	d200      	bcs.n	e544 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    e542:	2045      	movs	r0, #69	; 0x45
    e544:	42b7      	cmp	r7, r6
    e546:	d906      	bls.n	e556 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e548:	7f23      	ldrb	r3, [r4, #28]
    e54a:	1bb9      	subs	r1, r7, r6
    e54c:	1ac9      	subs	r1, r1, r3
    e54e:	1f89      	subs	r1, r1, #6
    e550:	4281      	cmp	r1, r0
    e552:	da00      	bge.n	e556 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e554:	4608      	mov	r0, r1
    e556:	89e1      	ldrh	r1, [r4, #14]
    e558:	b111      	cbz	r1, e560 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    e55a:	f8b9 3000 	ldrh.w	r3, [r9]
    e55e:	1ac0      	subs	r0, r0, r3
    e560:	4540      	cmp	r0, r8
    e562:	da03      	bge.n	e56c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    e564:	8262      	strh	r2, [r4, #18]
    e566:	2000      	movs	r0, #0
    e568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e56c:	7f20      	ldrb	r0, [r4, #28]
    e56e:	4429      	add	r1, r5
    e570:	1d80      	adds	r0, r0, #6
    e572:	4430      	add	r0, r6
    e574:	4408      	add	r0, r1
    e576:	f8a4 8012 	strh.w	r8, [r4, #18]
    e57a:	1ec0      	subs	r0, r0, #3
    e57c:	e7f4      	b.n	e568 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000e57e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    e57e:	2100      	movs	r1, #0
    e580:	81c1      	strh	r1, [r0, #14]
    e582:	8241      	strh	r1, [r0, #18]
    e584:	7581      	strb	r1, [r0, #22]
    e586:	4770      	bx	lr

0000e588 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    e588:	b570      	push	{r4, r5, r6, lr}
    e58a:	2300      	movs	r3, #0
    e58c:	2908      	cmp	r1, #8
    e58e:	d204      	bcs.n	e59a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    e590:	f240 11cb 	movw	r1, #459	; 0x1cb
    e594:	2015      	movs	r0, #21
    e596:	f7f6 fbbf 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e59a:	6802      	ldr	r2, [r0, #0]
    e59c:	b90a      	cbnz	r2, e5a2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    e59e:	e01e      	b.n	e5de <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    e5a0:	4610      	mov	r0, r2
    e5a2:	6802      	ldr	r2, [r0, #0]
    e5a4:	8893      	ldrh	r3, [r2, #4]
    e5a6:	428b      	cmp	r3, r1
    e5a8:	d002      	beq.n	e5b0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    e5aa:	6813      	ldr	r3, [r2, #0]
    e5ac:	2b00      	cmp	r3, #0
    e5ae:	d1f7      	bne.n	e5a0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    e5b0:	8894      	ldrh	r4, [r2, #4]
    e5b2:	4613      	mov	r3, r2
    e5b4:	428c      	cmp	r4, r1
    e5b6:	d101      	bne.n	e5bc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    e5b8:	6811      	ldr	r1, [r2, #0]
    e5ba:	e00d      	b.n	e5d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    e5bc:	f101 0508 	add.w	r5, r1, #8
    e5c0:	b2ae      	uxth	r6, r5
    e5c2:	2500      	movs	r5, #0
    e5c4:	42b4      	cmp	r4, r6
    e5c6:	d309      	bcc.n	e5dc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    e5c8:	1a64      	subs	r4, r4, r1
    e5ca:	4411      	add	r1, r2
    e5cc:	600d      	str	r5, [r1, #0]
    e5ce:	808c      	strh	r4, [r1, #4]
    e5d0:	6802      	ldr	r2, [r0, #0]
    e5d2:	6812      	ldr	r2, [r2, #0]
    e5d4:	6002      	str	r2, [r0, #0]
    e5d6:	600a      	str	r2, [r1, #0]
    e5d8:	6001      	str	r1, [r0, #0]
    e5da:	e000      	b.n	e5de <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    e5dc:	2300      	movs	r3, #0
    e5de:	4618      	mov	r0, r3
    e5e0:	bd70      	pop	{r4, r5, r6, pc}

0000e5e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    e5e2:	b510      	push	{r4, lr}
    e5e4:	000c      	movs	r4, r1
    e5e6:	d006      	beq.n	e5f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    e5e8:	2c08      	cmp	r4, #8
    e5ea:	d209      	bcs.n	e600 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    e5ec:	f240 1195 	movw	r1, #405	; 0x195
    e5f0:	2015      	movs	r0, #21
    e5f2:	f7f6 fb91 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5f6:	b108      	cbz	r0, e5fc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    e5f8:	2100      	movs	r1, #0
    e5fa:	6001      	str	r1, [r0, #0]
    e5fc:	2000      	movs	r0, #0
    e5fe:	bd10      	pop	{r4, pc}
    e600:	b118      	cbz	r0, e60a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    e602:	b2a1      	uxth	r1, r4
    e604:	6800      	ldr	r0, [r0, #0]
    e606:	f000 f814 	bl	e632 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    e60a:	1d20      	adds	r0, r4, #4
    e60c:	bd10      	pop	{r4, pc}

0000e60e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    e60e:	2100      	movs	r1, #0
    e610:	6802      	ldr	r2, [r0, #0]
    e612:	e003      	b.n	e61c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    e614:	8893      	ldrh	r3, [r2, #4]
    e616:	6812      	ldr	r2, [r2, #0]
    e618:	4419      	add	r1, r3
    e61a:	b289      	uxth	r1, r1
    e61c:	2a00      	cmp	r2, #0
    e61e:	d1f9      	bne.n	e614 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    e620:	f000 b807 	b.w	e632 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000e624 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    e624:	2300      	movs	r3, #0
    e626:	600b      	str	r3, [r1, #0]
    e628:	808a      	strh	r2, [r1, #4]
    e62a:	6802      	ldr	r2, [r0, #0]
    e62c:	600a      	str	r2, [r1, #0]
    e62e:	6001      	str	r1, [r0, #0]
    e630:	4770      	bx	lr
    e632:	2300      	movs	r3, #0
    e634:	6043      	str	r3, [r0, #4]
    e636:	1d02      	adds	r2, r0, #4
    e638:	8101      	strh	r1, [r0, #8]
    e63a:	6002      	str	r2, [r0, #0]
    e63c:	4770      	bx	lr

0000e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    e63e:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    e642:	3aff      	subs	r2, #255	; 0xff
    e644:	d000      	beq.n	e648 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    e646:	b109      	cbz	r1, e64c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    e648:	2000      	movs	r0, #0
    e64a:	4770      	bx	lr
    e64c:	f7f6 be44 	b.w	52d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0000e650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    e650:	b570      	push	{r4, r5, r6, lr}
    e652:	4605      	mov	r5, r0
    e654:	460c      	mov	r4, r1
    e656:	4608      	mov	r0, r1
    e658:	f000 f84f 	bl	e6fa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e65c:	b108      	cbz	r0, e662 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e65e:	2010      	movs	r0, #16
    e660:	bd70      	pop	{r4, r5, r6, pc}
    e662:	b10d      	cbz	r5, e668 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    e664:	2007      	movs	r0, #7
    e666:	bd70      	pop	{r4, r5, r6, pc}
    e668:	7025      	strb	r5, [r4, #0]
    e66a:	2000      	movs	r0, #0
    e66c:	8060      	strh	r0, [r4, #2]
    e66e:	bd70      	pop	{r4, r5, r6, pc}
    e670:	b510      	push	{r4, lr}
    e672:	4604      	mov	r4, r0
    e674:	f7f6 fe7c 	bl	5370 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    e678:	42a0      	cmp	r0, r4
    e67a:	d901      	bls.n	e680 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    e67c:	2001      	movs	r0, #1
    e67e:	bd10      	pop	{r4, pc}
    e680:	2000      	movs	r0, #0
    e682:	bd10      	pop	{r4, pc}
    e684:	4770      	bx	lr

0000e686 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e686:	b570      	push	{r4, r5, r6, lr}
    e688:	460e      	mov	r6, r1
    e68a:	461d      	mov	r5, r3
    e68c:	4611      	mov	r1, r2
    e68e:	f000 f811 	bl	e6b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    e692:	4604      	mov	r4, r0
    e694:	4629      	mov	r1, r5
    e696:	4630      	mov	r0, r6
    e698:	f000 f803 	bl	e6a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    e69c:	4420      	add	r0, r4
    e69e:	1d00      	adds	r0, r0, #4
    e6a0:	bd70      	pop	{r4, r5, r6, pc}
    e6a2:	b510      	push	{r4, lr}
    e6a4:	460a      	mov	r2, r1
    e6a6:	2101      	movs	r1, #1
    e6a8:	f7ff ff29 	bl	e4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e6ac:	1cc0      	adds	r0, r0, #3
    e6ae:	f020 0003 	bic.w	r0, r0, #3
    e6b2:	bd10      	pop	{r4, pc}
    e6b4:	b510      	push	{r4, lr}
    e6b6:	460a      	mov	r2, r1
    e6b8:	2101      	movs	r1, #1
    e6ba:	f7ff ff20 	bl	e4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e6be:	1cc0      	adds	r0, r0, #3
    e6c0:	f020 0003 	bic.w	r0, r0, #3
    e6c4:	bd10      	pop	{r4, pc}
    e6c6:	2800      	cmp	r0, #0
    e6c8:	db09      	blt.n	e6de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    e6ca:	f000 021f 	and.w	r2, r0, #31
    e6ce:	2101      	movs	r1, #1
    e6d0:	4091      	lsls	r1, r2
    e6d2:	0940      	lsrs	r0, r0, #5
    e6d4:	0080      	lsls	r0, r0, #2
    e6d6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e6da:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e6de:	4770      	bx	lr

0000e6e0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    e6e0:	f7f7 b80c 	b.w	56fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000e6e4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    e6e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    e6e8:	2000      	movs	r0, #0
    e6ea:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    e6ee:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e6f2:	2001      	movs	r0, #1
    e6f4:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    e6f8:	4770      	bx	lr

0000e6fa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    e6fa:	b108      	cbz	r0, e700 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    e6fc:	2000      	movs	r0, #0
    e6fe:	4770      	bx	lr
    e700:	2001      	movs	r0, #1
    e702:	4770      	bx	lr

0000e704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    e704:	f7f7 b940 	b.w	5988 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000e708 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    e708:	f7f7 b92e 	b.w	5968 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000e70c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    e70c:	b510      	push	{r4, lr}
    e70e:	2900      	cmp	r1, #0
    e710:	4604      	mov	r4, r0
    e712:	f04f 0106 	mov.w	r1, #6
    e716:	d002      	beq.n	e71e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    e718:	f7f6 fb8c 	bl	4e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e71c:	e001      	b.n	e722 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    e71e:	f7f6 fba5 	bl	4e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e722:	7960      	ldrb	r0, [r4, #5]
    e724:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e728:	7160      	strb	r0, [r4, #5]
    e72a:	bd10      	pop	{r4, pc}

0000e72c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    e72c:	4770      	bx	lr

0000e72e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    e72e:	b530      	push	{r4, r5, lr}
    e730:	460c      	mov	r4, r1
    e732:	4605      	mov	r5, r0
    e734:	b08d      	sub	sp, #52	; 0x34
    e736:	f04f 0103 	mov.w	r1, #3
    e73a:	f104 0003 	add.w	r0, r4, #3
    e73e:	b112      	cbz	r2, e746 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    e740:	f7f6 fb78 	bl	4e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e744:	e001      	b.n	e74a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    e746:	f7f6 fb91 	bl	4e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e74a:	7960      	ldrb	r0, [r4, #5]
    e74c:	220d      	movs	r2, #13
    e74e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e752:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e756:	7160      	strb	r0, [r4, #5]
    e758:	2100      	movs	r1, #0
    e75a:	a804      	add	r0, sp, #16
    e75c:	f7fe ff4c 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e760:	78e0      	ldrb	r0, [r4, #3]
    e762:	f88d 001f 	strb.w	r0, [sp, #31]
    e766:	7920      	ldrb	r0, [r4, #4]
    e768:	f88d 001e 	strb.w	r0, [sp, #30]
    e76c:	7960      	ldrb	r0, [r4, #5]
    e76e:	f88d 001d 	strb.w	r0, [sp, #29]
    e772:	2210      	movs	r2, #16
    e774:	4629      	mov	r1, r5
    e776:	4668      	mov	r0, sp
    e778:	f7fe fec4 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e77c:	4668      	mov	r0, sp
    e77e:	f7ff ffaf 	bl	e6e0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e782:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e786:	7020      	strb	r0, [r4, #0]
    e788:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e78c:	7060      	strb	r0, [r4, #1]
    e78e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e792:	70a0      	strb	r0, [r4, #2]
    e794:	b00d      	add	sp, #52	; 0x34
    e796:	bd30      	pop	{r4, r5, pc}

0000e798 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    e798:	b530      	push	{r4, r5, lr}
    e79a:	b08d      	sub	sp, #52	; 0x34
    e79c:	460c      	mov	r4, r1
    e79e:	4605      	mov	r5, r0
    e7a0:	220d      	movs	r2, #13
    e7a2:	2100      	movs	r1, #0
    e7a4:	a804      	add	r0, sp, #16
    e7a6:	f7fe ff27 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e7aa:	78e0      	ldrb	r0, [r4, #3]
    e7ac:	f88d 001f 	strb.w	r0, [sp, #31]
    e7b0:	7920      	ldrb	r0, [r4, #4]
    e7b2:	f88d 001e 	strb.w	r0, [sp, #30]
    e7b6:	7960      	ldrb	r0, [r4, #5]
    e7b8:	f88d 001d 	strb.w	r0, [sp, #29]
    e7bc:	2210      	movs	r2, #16
    e7be:	4629      	mov	r1, r5
    e7c0:	4668      	mov	r0, sp
    e7c2:	f7fe fe9f 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e7c6:	4668      	mov	r0, sp
    e7c8:	f7ff ff8a 	bl	e6e0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e7cc:	7820      	ldrb	r0, [r4, #0]
    e7ce:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    e7d2:	4288      	cmp	r0, r1
    e7d4:	d10c      	bne.n	e7f0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e7d6:	7860      	ldrb	r0, [r4, #1]
    e7d8:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    e7dc:	4288      	cmp	r0, r1
    e7de:	d107      	bne.n	e7f0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e7e0:	78a0      	ldrb	r0, [r4, #2]
    e7e2:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    e7e6:	4288      	cmp	r0, r1
    e7e8:	d102      	bne.n	e7f0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e7ea:	2001      	movs	r0, #1
    e7ec:	b00d      	add	sp, #52	; 0x34
    e7ee:	bd30      	pop	{r4, r5, pc}
    e7f0:	2000      	movs	r0, #0
    e7f2:	e7fb      	b.n	e7ec <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000e7f4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    e7f4:	f7f7 bc96 	b.w	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    e7f8:	b510      	push	{r4, lr}
    e7fa:	2801      	cmp	r0, #1
    e7fc:	d008      	beq.n	e810 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    e7fe:	2802      	cmp	r0, #2
    e800:	d004      	beq.n	e80c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    e802:	f240 319a 	movw	r1, #922	; 0x39a
    e806:	2006      	movs	r0, #6
    e808:	f7f6 fa86 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e80c:	2001      	movs	r0, #1
    e80e:	bd10      	pop	{r4, pc}
    e810:	2000      	movs	r0, #0
    e812:	bd10      	pop	{r4, pc}
    e814:	2900      	cmp	r1, #0
    e816:	d004      	beq.n	e822 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    e818:	2801      	cmp	r0, #1
    e81a:	d003      	beq.n	e824 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e81c:	2901      	cmp	r1, #1
    e81e:	d001      	beq.n	e824 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e820:	2002      	movs	r0, #2
    e822:	4770      	bx	lr
    e824:	2001      	movs	r0, #1
    e826:	4770      	bx	lr
    e828:	f7ff bdb6 	b.w	e398 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000e82c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    e82c:	2101      	movs	r1, #1
    e82e:	f7f8 b88d 	b.w	694c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000e832 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    e832:	b510      	push	{r4, lr}
    e834:	f001 ff4c 	bl	106d0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    e838:	b118      	cbz	r0, e842 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    e83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e83e:	f7fd bc45 	b.w	c0cc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    e842:	20ff      	movs	r0, #255	; 0xff
    e844:	bd10      	pop	{r4, pc}

0000e846 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    e846:	b510      	push	{r4, lr}
    e848:	f7f8 f8c8 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e84c:	2810      	cmp	r0, #16
    e84e:	d003      	beq.n	e858 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    e850:	f7f8 f894 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e854:	2810      	cmp	r0, #16
    e856:	d100      	bne.n	e85a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    e858:	2008      	movs	r0, #8
    e85a:	bd10      	pop	{r4, pc}

0000e85c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    e85c:	b510      	push	{r4, lr}
    e85e:	f7f8 f8bd 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e862:	2810      	cmp	r0, #16
    e864:	d007      	beq.n	e876 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e866:	f7f8 f889 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e86a:	2810      	cmp	r0, #16
    e86c:	d003      	beq.n	e876 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e86e:	f7f8 f8fd 	bl	6a6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    e872:	2001      	movs	r0, #1
    e874:	bd10      	pop	{r4, pc}
    e876:	2000      	movs	r0, #0
    e878:	bd10      	pop	{r4, pc}

0000e87a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    e87a:	b510      	push	{r4, lr}
    e87c:	f7f8 f8ae 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e880:	2810      	cmp	r0, #16
    e882:	d003      	beq.n	e88c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    e884:	f7f8 f93a 	bl	6afc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    e888:	2001      	movs	r0, #1
    e88a:	bd10      	pop	{r4, pc}
    e88c:	2000      	movs	r0, #0
    e88e:	bd10      	pop	{r4, pc}

0000e890 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    e890:	b570      	push	{r4, r5, r6, lr}
    e892:	460e      	mov	r6, r1
    e894:	b08c      	sub	sp, #48	; 0x30
    e896:	4614      	mov	r4, r2
    e898:	4601      	mov	r1, r0
    e89a:	461d      	mov	r5, r3
    e89c:	2210      	movs	r2, #16
    e89e:	4668      	mov	r0, sp
    e8a0:	f000 f9a0 	bl	ebe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e8a4:	2210      	movs	r2, #16
    e8a6:	4631      	mov	r1, r6
    e8a8:	a804      	add	r0, sp, #16
    e8aa:	f000 f99b 	bl	ebe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e8ae:	4668      	mov	r0, sp
    e8b0:	f7ff ff16 	bl	e6e0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e8b4:	a908      	add	r1, sp, #32
    e8b6:	f04f 0210 	mov.w	r2, #16
    e8ba:	4628      	mov	r0, r5
    e8bc:	b11c      	cbz	r4, e8c6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    e8be:	f000 f991 	bl	ebe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e8c2:	b00c      	add	sp, #48	; 0x30
    e8c4:	bd70      	pop	{r4, r5, r6, pc}
    e8c6:	f7fe fe1d 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e8ca:	e7fa      	b.n	e8c2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    e8cc:	0781      	lsls	r1, r0, #30
    e8ce:	d501      	bpl.n	e8d4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    e8d0:	2002      	movs	r0, #2
    e8d2:	4770      	bx	lr
    e8d4:	07c0      	lsls	r0, r0, #31
    e8d6:	d0fc      	beq.n	e8d2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    e8d8:	2001      	movs	r0, #1
    e8da:	4770      	bx	lr

0000e8dc <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    e8dc:	b530      	push	{r4, r5, lr}
    e8de:	7901      	ldrb	r1, [r0, #4]
    e8e0:	0949      	lsrs	r1, r1, #5
    e8e2:	d128      	bne.n	e936 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x5a>
    e8e4:	2200      	movs	r2, #0
    e8e6:	4611      	mov	r1, r2
    e8e8:	5c44      	ldrb	r4, [r0, r1]
    e8ea:	1c49      	adds	r1, r1, #1
    e8ec:	f004 0301 	and.w	r3, r4, #1
    e8f0:	0864      	lsrs	r4, r4, #1
    e8f2:	f004 0501 	and.w	r5, r4, #1
    e8f6:	442b      	add	r3, r5
    e8f8:	0864      	lsrs	r4, r4, #1
    e8fa:	f004 0501 	and.w	r5, r4, #1
    e8fe:	441d      	add	r5, r3
    e900:	0863      	lsrs	r3, r4, #1
    e902:	f003 0401 	and.w	r4, r3, #1
    e906:	442c      	add	r4, r5
    e908:	085b      	lsrs	r3, r3, #1
    e90a:	f003 0501 	and.w	r5, r3, #1
    e90e:	442c      	add	r4, r5
    e910:	085b      	lsrs	r3, r3, #1
    e912:	f003 0501 	and.w	r5, r3, #1
    e916:	085b      	lsrs	r3, r3, #1
    e918:	442c      	add	r4, r5
    e91a:	f003 0501 	and.w	r5, r3, #1
    e91e:	442c      	add	r4, r5
    e920:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    e924:	441a      	add	r2, r3
    e926:	b2c9      	uxtb	r1, r1
    e928:	b2d2      	uxtb	r2, r2
    e92a:	2905      	cmp	r1, #5
    e92c:	d3dc      	bcc.n	e8e8 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xc>
    e92e:	2a01      	cmp	r2, #1
    e930:	d901      	bls.n	e936 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x5a>
    e932:	2001      	movs	r0, #1
    e934:	bd30      	pop	{r4, r5, pc}
    e936:	2000      	movs	r0, #0
    e938:	bd30      	pop	{r4, r5, pc}

0000e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e93a:	b510      	push	{r4, lr}
    e93c:	460c      	mov	r4, r1
    e93e:	2100      	movs	r1, #0
    e940:	f7ff fe7d 	bl	e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e944:	6060      	str	r0, [r4, #4]
    e946:	b110      	cbz	r0, e94e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    e948:	2000      	movs	r0, #0
    e94a:	7020      	strb	r0, [r4, #0]
    e94c:	bd10      	pop	{r4, pc}
    e94e:	2002      	movs	r0, #2
    e950:	bd10      	pop	{r4, pc}

0000e952 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e952:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e956:	4348      	muls	r0, r1
    e958:	4770      	bx	lr

0000e95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e95a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e95e:	fbb0 f0f1 	udiv	r0, r0, r1
    e962:	b280      	uxth	r0, r0
    e964:	4770      	bx	lr

0000e966 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    e966:	b570      	push	{r4, r5, r6, lr}
    e968:	4604      	mov	r4, r0
    e96a:	4290      	cmp	r0, r2
    e96c:	d20b      	bcs.n	e986 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    e96e:	1b10      	subs	r0, r2, r4
    e970:	2864      	cmp	r0, #100	; 0x64
    e972:	d200      	bcs.n	e976 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    e974:	2064      	movs	r0, #100	; 0x64
    e976:	1825      	adds	r5, r4, r0
    e978:	428d      	cmp	r5, r1
    e97a:	d803      	bhi.n	e984 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    e97c:	2104      	movs	r1, #4
    e97e:	f7f3 fce1 	bl	2344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e982:	b108      	cbz	r0, e988 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    e984:	4620      	mov	r0, r4
    e986:	bd70      	pop	{r4, r5, r6, pc}
    e988:	4628      	mov	r0, r5
    e98a:	bd70      	pop	{r4, r5, r6, pc}

0000e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    e98c:	b510      	push	{r4, lr}
    e98e:	f1a2 030f 	sub.w	r3, r2, #15
    e992:	290c      	cmp	r1, #12
    e994:	d24f      	bcs.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e996:	e8df f001 	tbb	[pc, r1]
    e99a:	0806      	.short	0x0806
    e99c:	1815120d 	.word	0x1815120d
    e9a0:	4c322f27 	.word	0x4c322f27
    e9a4:	3d35      	.short	0x3d35
    e9a6:	b3a2      	cbz	r2, ea12 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    e9a8:	e045      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9aa:	2a07      	cmp	r2, #7
    e9ac:	d045      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9ae:	2a08      	cmp	r2, #8
    e9b0:	d043      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9b2:	e040      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9b4:	2a0c      	cmp	r2, #12
    e9b6:	d040      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9b8:	2a0b      	cmp	r2, #11
    e9ba:	d03e      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9bc:	e03b      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9be:	2a0d      	cmp	r2, #13
    e9c0:	d03b      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9c2:	e038      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9c4:	2b0c      	cmp	r3, #12
    e9c6:	d938      	bls.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9c8:	e035      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9ca:	2a12      	cmp	r2, #18
    e9cc:	d035      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9ce:	2a11      	cmp	r2, #17
    e9d0:	d033      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9d2:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    e9d6:	b120      	cbz	r0, e9e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    e9d8:	2a12      	cmp	r2, #18
    e9da:	d32c      	bcc.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9dc:	2a1a      	cmp	r2, #26
    e9de:	d92c      	bls.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9e0:	e029      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9e2:	2a16      	cmp	r2, #22
    e9e4:	d2fa      	bcs.n	e9dc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    e9e6:	e026      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9e8:	2b03      	cmp	r3, #3
    e9ea:	d926      	bls.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9ec:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    e9f0:	b308      	cbz	r0, ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9f2:	2a1b      	cmp	r2, #27
    e9f4:	d921      	bls.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9f6:	e01e      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9f8:	2a04      	cmp	r2, #4
    e9fa:	d01e      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9fc:	e01b      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9fe:	2a01      	cmp	r2, #1
    ea00:	d01b      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea02:	e018      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea04:	2a1c      	cmp	r2, #28
    ea06:	d018      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea08:	2a1d      	cmp	r2, #29
    ea0a:	d016      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea0c:	2a1e      	cmp	r2, #30
    ea0e:	d014      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea10:	e011      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea12:	e012      	b.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea14:	2a1f      	cmp	r2, #31
    ea16:	d010      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea18:	2a20      	cmp	r2, #32
    ea1a:	d00e      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea1c:	2a21      	cmp	r2, #33	; 0x21
    ea1e:	d00c      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea20:	2a22      	cmp	r2, #34	; 0x22
    ea22:	d00a      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea24:	2a23      	cmp	r2, #35	; 0x23
    ea26:	d008      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea28:	2a24      	cmp	r2, #36	; 0x24
    ea2a:	d006      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea2c:	2a26      	cmp	r2, #38	; 0x26
    ea2e:	d004      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea30:	e001      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea32:	2a05      	cmp	r2, #5
    ea34:	d001      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea36:	2000      	movs	r0, #0
    ea38:	bd10      	pop	{r4, pc}
    ea3a:	2001      	movs	r0, #1
    ea3c:	bd10      	pop	{r4, pc}

0000ea3e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ea3e:	280c      	cmp	r0, #12
    ea40:	d013      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea42:	280b      	cmp	r0, #11
    ea44:	d011      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea46:	280d      	cmp	r0, #13
    ea48:	d00f      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea4a:	281f      	cmp	r0, #31
    ea4c:	d00d      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea4e:	2820      	cmp	r0, #32
    ea50:	d00b      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea52:	2821      	cmp	r0, #33	; 0x21
    ea54:	d009      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea56:	2822      	cmp	r0, #34	; 0x22
    ea58:	d007      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea5a:	2823      	cmp	r0, #35	; 0x23
    ea5c:	d005      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea5e:	2824      	cmp	r0, #36	; 0x24
    ea60:	d003      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea62:	2826      	cmp	r0, #38	; 0x26
    ea64:	d001      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea66:	2000      	movs	r0, #0
    ea68:	4770      	bx	lr
    ea6a:	2001      	movs	r0, #1
    ea6c:	4770      	bx	lr

0000ea6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ea6e:	f011 0f0c 	tst.w	r1, #12
    ea72:	d016      	beq.n	eaa2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ea74:	074a      	lsls	r2, r1, #29
    ea76:	f44f 7116 	mov.w	r1, #600	; 0x258
    ea7a:	2a00      	cmp	r2, #0
    ea7c:	da02      	bge.n	ea84 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    ea7e:	f04f 0210 	mov.w	r2, #16
    ea82:	e001      	b.n	ea88 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    ea84:	f04f 0240 	mov.w	r2, #64	; 0x40
    ea88:	da01      	bge.n	ea8e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    ea8a:	f04f 0196 	mov.w	r1, #150	; 0x96
    ea8e:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    ea92:	eba0 0301 	sub.w	r3, r0, r1
    ea96:	4288      	cmp	r0, r1
    ea98:	d910      	bls.n	eabc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ea9a:	fb93 f0f2 	sdiv	r0, r3, r2
    ea9e:	b280      	uxth	r0, r0
    eaa0:	4770      	bx	lr
    eaa2:	2902      	cmp	r1, #2
    eaa4:	d002      	beq.n	eaac <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    eaa6:	2870      	cmp	r0, #112	; 0x70
    eaa8:	d80a      	bhi.n	eac0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    eaaa:	e007      	b.n	eabc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    eaac:	283c      	cmp	r0, #60	; 0x3c
    eaae:	d905      	bls.n	eabc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    eab0:	383c      	subs	r0, #60	; 0x3c
    eab2:	17c1      	asrs	r1, r0, #31
    eab4:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    eab8:	1080      	asrs	r0, r0, #2
    eaba:	e7f0      	b.n	ea9e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    eabc:	2000      	movs	r0, #0
    eabe:	e7ee      	b.n	ea9e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    eac0:	3870      	subs	r0, #112	; 0x70
    eac2:	17c1      	asrs	r1, r0, #31
    eac4:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    eac8:	10c0      	asrs	r0, r0, #3
    eaca:	e7e8      	b.n	ea9e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000eacc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    eacc:	6809      	ldr	r1, [r1, #0]
    eace:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    ead2:	4770      	bx	lr

0000ead4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    ead4:	2801      	cmp	r0, #1
    ead6:	d002      	beq.n	eade <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    ead8:	2802      	cmp	r0, #2
    eada:	d000      	beq.n	eade <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    eadc:	2000      	movs	r0, #0
    eade:	4770      	bx	lr

0000eae0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    eae0:	b510      	push	{r4, lr}
    eae2:	f640 12c4 	movw	r2, #2500	; 0x9c4
    eae6:	2901      	cmp	r1, #1
    eae8:	d006      	beq.n	eaf8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    eaea:	2902      	cmp	r1, #2
    eaec:	d005      	beq.n	eafa <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    eaee:	f240 31c6 	movw	r1, #966	; 0x3c6
    eaf2:	2029      	movs	r0, #41	; 0x29
    eaf4:	f7f6 f910 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eaf8:	b108      	cbz	r0, eafe <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    eafa:	4610      	mov	r0, r2
    eafc:	bd10      	pop	{r4, pc}
    eafe:	f240 40e2 	movw	r0, #1250	; 0x4e2
    eb02:	bd10      	pop	{r4, pc}

0000eb04 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    eb04:	b530      	push	{r4, r5, lr}
    eb06:	242a      	movs	r4, #42	; 0x2a
    eb08:	2523      	movs	r5, #35	; 0x23
    eb0a:	2a16      	cmp	r2, #22
    eb0c:	d105      	bne.n	eb1a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
    eb0e:	280c      	cmp	r0, #12
    eb10:	d007      	beq.n	eb22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    eb12:	280d      	cmp	r0, #13
    eb14:	d005      	beq.n	eb22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    eb16:	281f      	cmp	r0, #31
    eb18:	d005      	beq.n	eb26 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    eb1a:	b171      	cbz	r1, eb3a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    eb1c:	2a16      	cmp	r2, #22
    eb1e:	d10c      	bne.n	eb3a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    eb20:	e004      	b.n	eb2c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
    eb22:	701c      	strb	r4, [r3, #0]
    eb24:	e000      	b.n	eb28 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
    eb26:	701d      	strb	r5, [r3, #0]
    eb28:	2001      	movs	r0, #1
    eb2a:	bd30      	pop	{r4, r5, pc}
    eb2c:	7808      	ldrb	r0, [r1, #0]
    eb2e:	2801      	cmp	r0, #1
    eb30:	d0f7      	beq.n	eb22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    eb32:	2800      	cmp	r0, #0
    eb34:	d0f5      	beq.n	eb22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    eb36:	2816      	cmp	r0, #22
    eb38:	d0f5      	beq.n	eb26 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    eb3a:	2000      	movs	r0, #0
    eb3c:	bd30      	pop	{r4, r5, pc}

0000eb3e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    eb3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb40:	b2cf      	uxtb	r7, r1
    eb42:	4606      	mov	r6, r0
    eb44:	f3c1 2407 	ubfx	r4, r1, #8, #8
    eb48:	4621      	mov	r1, r4
    eb4a:	4638      	mov	r0, r7
    eb4c:	f000 f8ca 	bl	ece4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    eb50:	b2f5      	uxtb	r5, r6
    eb52:	f3c6 2607 	ubfx	r6, r6, #8, #8
    eb56:	b920      	cbnz	r0, eb62 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    eb58:	4631      	mov	r1, r6
    eb5a:	4628      	mov	r0, r5
    eb5c:	f000 f8c2 	bl	ece4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    eb60:	b140      	cbz	r0, eb74 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    eb62:	4027      	ands	r7, r4
    eb64:	4035      	ands	r5, r6
    eb66:	403d      	ands	r5, r7
    eb68:	4644      	mov	r4, r8
    eb6a:	f365 0407 	bfi	r4, r5, #0, #8
    eb6e:	f365 240f 	bfi	r4, r5, #8, #8
    eb72:	e006      	b.n	eb82 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    eb74:	4025      	ands	r5, r4
    eb76:	4644      	mov	r4, r8
    eb78:	f365 0407 	bfi	r4, r5, #0, #8
    eb7c:	403e      	ands	r6, r7
    eb7e:	f366 240f 	bfi	r4, r6, #8, #8
    eb82:	b2e0      	uxtb	r0, r4
    eb84:	f7ff fea2 	bl	e8cc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    eb88:	f88d 0000 	strb.w	r0, [sp]
    eb8c:	f3c4 2007 	ubfx	r0, r4, #8, #8
    eb90:	f7ff fe9c 	bl	e8cc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    eb94:	f88d 0001 	strb.w	r0, [sp, #1]
    eb98:	f8bd 0000 	ldrh.w	r0, [sp]
    eb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000eb9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    eb9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eba2:	460c      	mov	r4, r1
    eba4:	4605      	mov	r5, r0
    eba6:	68c6      	ldr	r6, [r0, #12]
    eba8:	f7f4 f826 	bl	2bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    ebac:	b198      	cbz	r0, ebd6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    ebae:	b1bc      	cbz	r4, ebe0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    ebb0:	4630      	mov	r0, r6
    ebb2:	68e9      	ldr	r1, [r5, #12]
    ebb4:	f7f3 fd14 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ebb8:	2800      	cmp	r0, #0
    ebba:	dd11      	ble.n	ebe0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    ebbc:	4420      	add	r0, r4
    ebbe:	1e40      	subs	r0, r0, #1
    ebc0:	fbb0 f7f4 	udiv	r7, r0, r4
    ebc4:	fb07 f104 	mul.w	r1, r7, r4
    ebc8:	4630      	mov	r0, r6
    ebca:	f7f3 fcd7 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ebce:	60e8      	str	r0, [r5, #12]
    ebd0:	4638      	mov	r0, r7
    ebd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebd6:	f240 214b 	movw	r1, #587	; 0x24b
    ebda:	2029      	movs	r0, #41	; 0x29
    ebdc:	f7f6 f89c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebe0:	2000      	movs	r0, #0
    ebe2:	e7f6      	b.n	ebd2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000ebe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    ebe4:	b530      	push	{r4, r5, lr}
    ebe6:	4613      	mov	r3, r2
    ebe8:	e006      	b.n	ebf8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    ebea:	18cc      	adds	r4, r1, r3
    ebec:	1ad5      	subs	r5, r2, r3
    ebee:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    ebf2:	1e5b      	subs	r3, r3, #1
    ebf4:	5544      	strb	r4, [r0, r5]
    ebf6:	b2db      	uxtb	r3, r3
    ebf8:	2b00      	cmp	r3, #0
    ebfa:	d1f6      	bne.n	ebea <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    ebfc:	bd30      	pop	{r4, r5, pc}

0000ebfe <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    ebfe:	b538      	push	{r3, r4, r5, lr}
    ec00:	4605      	mov	r5, r0
    ec02:	460c      	mov	r4, r1
    ec04:	4668      	mov	r0, sp
    ec06:	f7fd ff65 	bl	cad4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    ec0a:	b310      	cbz	r0, ec52 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    ec0c:	f99d 0000 	ldrsb.w	r0, [sp]
    ec10:	7260      	strb	r0, [r4, #9]
    ec12:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    ec16:	72a1      	strb	r1, [r4, #10]
    ec18:	f994 100b 	ldrsb.w	r1, [r4, #11]
    ec1c:	2200      	movs	r2, #0
    ec1e:	1a41      	subs	r1, r0, r1
    ec20:	d500      	bpl.n	ec24 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    ec22:	4249      	negs	r1, r1
    ec24:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    ec28:	428b      	cmp	r3, r1
    ec2a:	dc10      	bgt.n	ec4e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ec2c:	2bff      	cmp	r3, #255	; 0xff
    ec2e:	d00e      	beq.n	ec4e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ec30:	7b21      	ldrb	r1, [r4, #12]
    ec32:	1c49      	adds	r1, r1, #1
    ec34:	b2c9      	uxtb	r1, r1
    ec36:	7321      	strb	r1, [r4, #12]
    ec38:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    ec3c:	4299      	cmp	r1, r3
    ec3e:	d802      	bhi.n	ec46 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    ec40:	7ae1      	ldrb	r1, [r4, #11]
    ec42:	297f      	cmp	r1, #127	; 0x7f
    ec44:	d103      	bne.n	ec4e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ec46:	72e0      	strb	r0, [r4, #11]
    ec48:	2000      	movs	r0, #0
    ec4a:	7320      	strb	r0, [r4, #12]
    ec4c:	2201      	movs	r2, #1
    ec4e:	4610      	mov	r0, r2
    ec50:	bd38      	pop	{r3, r4, r5, pc}
    ec52:	207f      	movs	r0, #127	; 0x7f
    ec54:	7260      	strb	r0, [r4, #9]
    ec56:	2000      	movs	r0, #0
    ec58:	bd38      	pop	{r3, r4, r5, pc}

0000ec5a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    ec5a:	2300      	movs	r3, #0
    ec5c:	6283      	str	r3, [r0, #40]	; 0x28
    ec5e:	8602      	strh	r2, [r0, #48]	; 0x30
    ec60:	f240 2371 	movw	r3, #625	; 0x271
    ec64:	435a      	muls	r2, r3
    ec66:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    ec6a:	1e52      	subs	r2, r2, #1
    ec6c:	fbb2 f1f1 	udiv	r1, r2, r1
    ec70:	62c1      	str	r1, [r0, #44]	; 0x2c
    ec72:	4770      	bx	lr

0000ec74 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    ec74:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ec78:	4348      	muls	r0, r1
    ec7a:	4770      	bx	lr

0000ec7c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    ec7c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ec80:	fbb0 f0f1 	udiv	r0, r0, r1
    ec84:	b280      	uxth	r0, r0
    ec86:	4770      	bx	lr

0000ec88 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    ec88:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ec8c:	fb10 f001 	smulbb	r0, r0, r1
    ec90:	4770      	bx	lr

0000ec92 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    ec92:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ec96:	fbb0 f0f1 	udiv	r0, r0, r1
    ec9a:	b2c0      	uxtb	r0, r0
    ec9c:	4770      	bx	lr

0000ec9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    ec9e:	b510      	push	{r4, lr}
    eca0:	2300      	movs	r3, #0
    eca2:	461a      	mov	r2, r3
    eca4:	e003      	b.n	ecae <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    eca6:	5c84      	ldrb	r4, [r0, r2]
    eca8:	4323      	orrs	r3, r4
    ecaa:	1c52      	adds	r2, r2, #1
    ecac:	b2d2      	uxtb	r2, r2
    ecae:	428a      	cmp	r2, r1
    ecb0:	d3f9      	bcc.n	eca6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    ecb2:	b10b      	cbz	r3, ecb8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    ecb4:	2000      	movs	r0, #0
    ecb6:	bd10      	pop	{r4, pc}
    ecb8:	2001      	movs	r0, #1
    ecba:	bd10      	pop	{r4, pc}
    ecbc:	b510      	push	{r4, lr}
    ecbe:	4604      	mov	r4, r0
    ecc0:	f7fd f980 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ecc4:	f644 112b 	movw	r1, #18731	; 0x492b
    ecc8:	4008      	ands	r0, r1
    ecca:	2101      	movs	r1, #1
    eccc:	7561      	strb	r1, [r4, #21]
    ecce:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    ecd2:	0a00      	lsrs	r0, r0, #8
    ecd4:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    ecd8:	20fe      	movs	r0, #254	; 0xfe
    ecda:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    ecde:	207f      	movs	r0, #127	; 0x7f
    ece0:	7260      	strb	r0, [r4, #9]
    ece2:	bd10      	pop	{r4, pc}
    ece4:	2801      	cmp	r0, #1
    ece6:	d002      	beq.n	ecee <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    ece8:	2802      	cmp	r0, #2
    ecea:	d003      	beq.n	ecf4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    ecec:	e004      	b.n	ecf8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    ecee:	2901      	cmp	r1, #1
    ecf0:	d004      	beq.n	ecfc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    ecf2:	e001      	b.n	ecf8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    ecf4:	2902      	cmp	r1, #2
    ecf6:	d001      	beq.n	ecfc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    ecf8:	2000      	movs	r0, #0
    ecfa:	4770      	bx	lr
    ecfc:	2001      	movs	r0, #1
    ecfe:	4770      	bx	lr

0000ed00 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    ed00:	b510      	push	{r4, lr}
    ed02:	4604      	mov	r4, r0
    ed04:	f890 0020 	ldrb.w	r0, [r0, #32]
    ed08:	b108      	cbz	r0, ed0e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    ed0a:	2825      	cmp	r0, #37	; 0x25
    ed0c:	d901      	bls.n	ed12 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    ed0e:	2012      	movs	r0, #18
    ed10:	bd10      	pop	{r4, pc}
    ed12:	b12a      	cbz	r2, ed20 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    ed14:	7d60      	ldrb	r0, [r4, #21]
    ed16:	b128      	cbz	r0, ed24 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    ed18:	2801      	cmp	r0, #1
    ed1a:	d009      	beq.n	ed30 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    ed1c:	201f      	movs	r0, #31
    ed1e:	bd10      	pop	{r4, pc}
    ed20:	2000      	movs	r0, #0
    ed22:	bd10      	pop	{r4, pc}
    ed24:	4620      	mov	r0, r4
    ed26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed2a:	4611      	mov	r1, r2
    ed2c:	f7f7 bfdc 	b.w	6ce8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    ed30:	88a2      	ldrh	r2, [r4, #4]
    ed32:	6909      	ldr	r1, [r1, #16]
    ed34:	f104 0015 	add.w	r0, r4, #21
    ed38:	f7f7 ff82 	bl	6c40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    ed3c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ed40:	e7ee      	b.n	ed20 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000ed42 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    ed42:	b530      	push	{r4, r5, lr}
    ed44:	1c42      	adds	r2, r0, #1
    ed46:	428a      	cmp	r2, r1
    ed48:	d004      	beq.n	ed54 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    ed4a:	680a      	ldr	r2, [r1, #0]
    ed4c:	f8c0 2001 	str.w	r2, [r0, #1]
    ed50:	7909      	ldrb	r1, [r1, #4]
    ed52:	7141      	strb	r1, [r0, #5]
    ed54:	7941      	ldrb	r1, [r0, #5]
    ed56:	f001 011f 	and.w	r1, r1, #31
    ed5a:	7141      	strb	r1, [r0, #5]
    ed5c:	2100      	movs	r1, #0
    ed5e:	72c1      	strb	r1, [r0, #11]
    ed60:	1843      	adds	r3, r0, r1
    ed62:	1c49      	adds	r1, r1, #1
    ed64:	785c      	ldrb	r4, [r3, #1]
    ed66:	b2c9      	uxtb	r1, r1
    ed68:	f004 0201 	and.w	r2, r4, #1
    ed6c:	0864      	lsrs	r4, r4, #1
    ed6e:	f004 0501 	and.w	r5, r4, #1
    ed72:	4415      	add	r5, r2
    ed74:	0862      	lsrs	r2, r4, #1
    ed76:	f002 0401 	and.w	r4, r2, #1
    ed7a:	442c      	add	r4, r5
    ed7c:	0852      	lsrs	r2, r2, #1
    ed7e:	f002 0501 	and.w	r5, r2, #1
    ed82:	442c      	add	r4, r5
    ed84:	0852      	lsrs	r2, r2, #1
    ed86:	f002 0501 	and.w	r5, r2, #1
    ed8a:	442c      	add	r4, r5
    ed8c:	0852      	lsrs	r2, r2, #1
    ed8e:	f002 0501 	and.w	r5, r2, #1
    ed92:	442c      	add	r4, r5
    ed94:	0852      	lsrs	r2, r2, #1
    ed96:	f002 0501 	and.w	r5, r2, #1
    ed9a:	442c      	add	r4, r5
    ed9c:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    eda0:	719a      	strb	r2, [r3, #6]
    eda2:	7ac3      	ldrb	r3, [r0, #11]
    eda4:	2905      	cmp	r1, #5
    eda6:	441a      	add	r2, r3
    eda8:	72c2      	strb	r2, [r0, #11]
    edaa:	d3d9      	bcc.n	ed60 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    edac:	bd30      	pop	{r4, r5, pc}

0000edae <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
    edae:	68c0      	ldr	r0, [r0, #12]
    edb0:	6008      	str	r0, [r1, #0]
    edb2:	4770      	bx	lr

0000edb4 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
    edb4:	6842      	ldr	r2, [r0, #4]
    edb6:	600a      	str	r2, [r1, #0]
    edb8:	6880      	ldr	r0, [r0, #8]
    edba:	6048      	str	r0, [r1, #4]
    edbc:	4770      	bx	lr

0000edbe <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    edbe:	6842      	ldr	r2, [r0, #4]
    edc0:	600a      	str	r2, [r1, #0]
    edc2:	6880      	ldr	r0, [r0, #8]
    edc4:	6048      	str	r0, [r1, #4]
    edc6:	4770      	bx	lr

0000edc8 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    edc8:	7800      	ldrb	r0, [r0, #0]
    edca:	f000 0003 	and.w	r0, r0, #3
    edce:	4770      	bx	lr

0000edd0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    edd0:	8880      	ldrh	r0, [r0, #4]
    edd2:	4770      	bx	lr

0000edd4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    edd4:	88c0      	ldrh	r0, [r0, #6]
    edd6:	4770      	bx	lr

0000edd8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    edd8:	8900      	ldrh	r0, [r0, #8]
    edda:	4770      	bx	lr

0000eddc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    eddc:	8940      	ldrh	r0, [r0, #10]
    edde:	4770      	bx	lr

0000ede0 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    ede0:	7900      	ldrb	r0, [r0, #4]
    ede2:	4770      	bx	lr

0000ede4 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    ede4:	7900      	ldrb	r0, [r0, #4]
    ede6:	4770      	bx	lr

0000ede8 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    ede8:	8901      	ldrh	r1, [r0, #8]
    edea:	291b      	cmp	r1, #27
    edec:	d30c      	bcc.n	ee08 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    edee:	8941      	ldrh	r1, [r0, #10]
    edf0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    edf4:	4291      	cmp	r1, r2
    edf6:	d307      	bcc.n	ee08 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    edf8:	8881      	ldrh	r1, [r0, #4]
    edfa:	291b      	cmp	r1, #27
    edfc:	d304      	bcc.n	ee08 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    edfe:	88c0      	ldrh	r0, [r0, #6]
    ee00:	4290      	cmp	r0, r2
    ee02:	d301      	bcc.n	ee08 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ee04:	2001      	movs	r0, #1
    ee06:	4770      	bx	lr
    ee08:	2000      	movs	r0, #0
    ee0a:	4770      	bx	lr

0000ee0c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    ee0c:	b510      	push	{r4, lr}
    ee0e:	29fb      	cmp	r1, #251	; 0xfb
    ee10:	d904      	bls.n	ee1c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    ee12:	f44f 61af 	mov.w	r1, #1400	; 0x578
    ee16:	202a      	movs	r0, #42	; 0x2a
    ee18:	f7f5 ff7e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee1c:	7041      	strb	r1, [r0, #1]
    ee1e:	bd10      	pop	{r4, pc}

0000ee20 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    ee20:	7901      	ldrb	r1, [r0, #4]
    ee22:	0749      	lsls	r1, r1, #29
    ee24:	d004      	beq.n	ee30 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    ee26:	7940      	ldrb	r0, [r0, #5]
    ee28:	0740      	lsls	r0, r0, #29
    ee2a:	d001      	beq.n	ee30 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    ee2c:	2001      	movs	r0, #1
    ee2e:	4770      	bx	lr
    ee30:	2000      	movs	r0, #0
    ee32:	4770      	bx	lr

0000ee34 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    ee34:	7901      	ldrb	r1, [r0, #4]
    ee36:	0749      	lsls	r1, r1, #29
    ee38:	d004      	beq.n	ee44 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    ee3a:	7940      	ldrb	r0, [r0, #5]
    ee3c:	0740      	lsls	r0, r0, #29
    ee3e:	d001      	beq.n	ee44 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    ee40:	2001      	movs	r0, #1
    ee42:	4770      	bx	lr
    ee44:	2000      	movs	r0, #0
    ee46:	4770      	bx	lr

0000ee48 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    ee48:	7900      	ldrb	r0, [r0, #4]
    ee4a:	4770      	bx	lr

0000ee4c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    ee4c:	7940      	ldrb	r0, [r0, #5]
    ee4e:	4770      	bx	lr

0000ee50 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    ee50:	7101      	strb	r1, [r0, #4]
    ee52:	4770      	bx	lr

0000ee54 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    ee54:	7141      	strb	r1, [r0, #5]
    ee56:	4770      	bx	lr

0000ee58 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    ee58:	680a      	ldr	r2, [r1, #0]
    ee5a:	6042      	str	r2, [r0, #4]
    ee5c:	7909      	ldrb	r1, [r1, #4]
    ee5e:	7201      	strb	r1, [r0, #8]
    ee60:	4770      	bx	lr

0000ee62 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    ee62:	72c1      	strb	r1, [r0, #11]
    ee64:	0a09      	lsrs	r1, r1, #8
    ee66:	7301      	strb	r1, [r0, #12]
    ee68:	4770      	bx	lr

0000ee6a <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    ee6a:	8809      	ldrh	r1, [r1, #0]
    ee6c:	8181      	strh	r1, [r0, #12]
    ee6e:	4770      	bx	lr

0000ee70 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    ee70:	6809      	ldr	r1, [r1, #0]
    ee72:	f8c0 1016 	str.w	r1, [r0, #22]
    ee76:	4770      	bx	lr

0000ee78 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    ee78:	680a      	ldr	r2, [r1, #0]
    ee7a:	6042      	str	r2, [r0, #4]
    ee7c:	6849      	ldr	r1, [r1, #4]
    ee7e:	6081      	str	r1, [r0, #8]
    ee80:	4770      	bx	lr

0000ee82 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    ee82:	680a      	ldr	r2, [r1, #0]
    ee84:	f840 2f0e 	str.w	r2, [r0, #14]!
    ee88:	6849      	ldr	r1, [r1, #4]
    ee8a:	6041      	str	r1, [r0, #4]
    ee8c:	4770      	bx	lr

0000ee8e <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    ee8e:	680a      	ldr	r2, [r1, #0]
    ee90:	6042      	str	r2, [r0, #4]
    ee92:	6849      	ldr	r1, [r1, #4]
    ee94:	6081      	str	r1, [r0, #8]
    ee96:	4770      	bx	lr

0000ee98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    ee98:	7802      	ldrb	r2, [r0, #0]
    ee9a:	f001 0103 	and.w	r1, r1, #3
    ee9e:	f022 0203 	bic.w	r2, r2, #3
    eea2:	430a      	orrs	r2, r1
    eea4:	7002      	strb	r2, [r0, #0]
    eea6:	4770      	bx	lr

0000eea8 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    eea8:	7101      	strb	r1, [r0, #4]
    eeaa:	4770      	bx	lr

0000eeac <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    eeac:	7101      	strb	r1, [r0, #4]
    eeae:	0a09      	lsrs	r1, r1, #8
    eeb0:	7141      	strb	r1, [r0, #5]
    eeb2:	4770      	bx	lr

0000eeb4 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    eeb4:	7181      	strb	r1, [r0, #6]
    eeb6:	0a09      	lsrs	r1, r1, #8
    eeb8:	71c1      	strb	r1, [r0, #7]
    eeba:	4770      	bx	lr

0000eebc <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    eebc:	7201      	strb	r1, [r0, #8]
    eebe:	0a09      	lsrs	r1, r1, #8
    eec0:	7241      	strb	r1, [r0, #9]
    eec2:	4770      	bx	lr

0000eec4 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    eec4:	7281      	strb	r1, [r0, #10]
    eec6:	0a09      	lsrs	r1, r1, #8
    eec8:	72c1      	strb	r1, [r0, #11]
    eeca:	4770      	bx	lr

0000eecc <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    eecc:	7181      	strb	r1, [r0, #6]
    eece:	0a09      	lsrs	r1, r1, #8
    eed0:	71c1      	strb	r1, [r0, #7]
    eed2:	4770      	bx	lr

0000eed4 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    eed4:	7141      	strb	r1, [r0, #5]
    eed6:	4770      	bx	lr

0000eed8 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    eed8:	7841      	ldrb	r1, [r0, #1]
    eeda:	7800      	ldrb	r0, [r0, #0]
    eedc:	f010 000f 	ands.w	r0, r0, #15
    eee0:	d005      	beq.n	eeee <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    eee2:	2801      	cmp	r0, #1
    eee4:	d007      	beq.n	eef6 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    eee6:	2802      	cmp	r0, #2
    eee8:	d001      	beq.n	eeee <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    eeea:	2806      	cmp	r0, #6
    eeec:	d105      	bne.n	eefa <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    eeee:	1f89      	subs	r1, r1, #6
    eef0:	291f      	cmp	r1, #31
    eef2:	d904      	bls.n	eefe <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    eef4:	e001      	b.n	eefa <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    eef6:	290c      	cmp	r1, #12
    eef8:	d001      	beq.n	eefe <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    eefa:	2000      	movs	r0, #0
    eefc:	4770      	bx	lr
    eefe:	2001      	movs	r0, #1
    ef00:	4770      	bx	lr

0000ef02 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    ef02:	7800      	ldrb	r0, [r0, #0]
    ef04:	09c0      	lsrs	r0, r0, #7
    ef06:	4770      	bx	lr

0000ef08 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    ef08:	f850 2f03 	ldr.w	r2, [r0, #3]!
    ef0c:	600a      	str	r2, [r1, #0]
    ef0e:	8880      	ldrh	r0, [r0, #4]
    ef10:	8088      	strh	r0, [r1, #4]
    ef12:	4770      	bx	lr

0000ef14 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    ef14:	7800      	ldrb	r0, [r0, #0]
    ef16:	f3c0 1080 	ubfx	r0, r0, #6, #1
    ef1a:	4770      	bx	lr

0000ef1c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    ef1c:	7801      	ldrb	r1, [r0, #0]
    ef1e:	f001 010f 	and.w	r1, r1, #15
    ef22:	2904      	cmp	r1, #4
    ef24:	d105      	bne.n	ef32 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    ef26:	7840      	ldrb	r0, [r0, #1]
    ef28:	1f80      	subs	r0, r0, #6
    ef2a:	281f      	cmp	r0, #31
    ef2c:	d801      	bhi.n	ef32 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    ef2e:	2001      	movs	r0, #1
    ef30:	4770      	bx	lr
    ef32:	2000      	movs	r0, #0
    ef34:	4770      	bx	lr

0000ef36 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    ef36:	b510      	push	{r4, lr}
    ef38:	7802      	ldrb	r2, [r0, #0]
    ef3a:	f001 030f 	and.w	r3, r1, #15
    ef3e:	f022 020f 	bic.w	r2, r2, #15
    ef42:	431a      	orrs	r2, r3
    ef44:	7002      	strb	r2, [r0, #0]
    ef46:	2907      	cmp	r1, #7
    ef48:	d20c      	bcs.n	ef64 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    ef4a:	e8df f001 	tbb	[pc, r1]
    ef4e:	0604      	.short	0x0604
    ef50:	08040604 	.word	0x08040604
    ef54:	0004      	.short	0x0004
    ef56:	2106      	movs	r1, #6
    ef58:	e002      	b.n	ef60 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    ef5a:	210c      	movs	r1, #12
    ef5c:	e000      	b.n	ef60 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    ef5e:	2122      	movs	r1, #34	; 0x22
    ef60:	7041      	strb	r1, [r0, #1]
    ef62:	bd10      	pop	{r4, pc}
    ef64:	216e      	movs	r1, #110	; 0x6e
    ef66:	202a      	movs	r0, #42	; 0x2a
    ef68:	f7f5 fed6 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ef6c <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    ef6c:	680a      	ldr	r2, [r1, #0]
    ef6e:	f840 2f09 	str.w	r2, [r0, #9]!
    ef72:	8889      	ldrh	r1, [r1, #4]
    ef74:	8081      	strh	r1, [r0, #4]
    ef76:	4770      	bx	lr

0000ef78 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    ef78:	7802      	ldrb	r2, [r0, #0]
    ef7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    ef7e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    ef82:	7002      	strb	r2, [r0, #0]
    ef84:	4770      	bx	lr

0000ef86 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    ef86:	680a      	ldr	r2, [r1, #0]
    ef88:	f840 2f03 	str.w	r2, [r0, #3]!
    ef8c:	8889      	ldrh	r1, [r1, #4]
    ef8e:	8081      	strh	r1, [r0, #4]
    ef90:	4770      	bx	lr

0000ef92 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    ef92:	7802      	ldrb	r2, [r0, #0]
    ef94:	2340      	movs	r3, #64	; 0x40
    ef96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    ef9a:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    ef9e:	430a      	orrs	r2, r1
    efa0:	7002      	strb	r2, [r0, #0]
    efa2:	4770      	bx	lr

0000efa4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    efa4:	2101      	movs	r1, #1
    efa6:	f000 b847 	b.w	f038 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    efaa:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    efae:	460e      	mov	r6, r1
    efb0:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    efb4:	4617      	mov	r7, r2
    efb6:	39ff      	subs	r1, #255	; 0xff
    efb8:	d014      	beq.n	efe4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x40>
    efba:	8030      	strh	r0, [r6, #0]
    efbc:	2100      	movs	r1, #0
    efbe:	7171      	strb	r1, [r6, #5]
    efc0:	f7f6 faa8 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    efc4:	4604      	mov	r4, r0
    efc6:	f7ff f964 	bl	e292 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    efca:	0005      	movs	r5, r0
    efcc:	d00a      	beq.n	efe4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x40>
    efce:	4620      	mov	r0, r4
    efd0:	4629      	mov	r1, r5
    efd2:	aa01      	add	r2, sp, #4
    efd4:	f7ff f98e 	bl	e2f4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    efd8:	8070      	strh	r0, [r6, #2]
    efda:	b130      	cbz	r0, efea <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x46>
    efdc:	28fb      	cmp	r0, #251	; 0xfb
    efde:	d906      	bls.n	efee <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x4a>
    efe0:	21c9      	movs	r1, #201	; 0xc9
    efe2:	e026      	b.n	f032 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    efe4:	2000      	movs	r0, #0
    efe6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    efea:	21c8      	movs	r1, #200	; 0xc8
    efec:	e021      	b.n	f032 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    efee:	9801      	ldr	r0, [sp, #4]
    eff0:	f7ff feea 	bl	edc8 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    eff4:	2801      	cmp	r0, #1
    eff6:	d003      	beq.n	f000 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x5c>
    eff8:	2802      	cmp	r0, #2
    effa:	d001      	beq.n	f000 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x5c>
    effc:	21d8      	movs	r1, #216	; 0xd8
    effe:	e018      	b.n	f032 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    f000:	7130      	strb	r0, [r6, #4]
    f002:	4629      	mov	r1, r5
    f004:	8873      	ldrh	r3, [r6, #2]
    f006:	2503      	movs	r5, #3
    f008:	4620      	mov	r0, r4
    f00a:	463a      	mov	r2, r7
    f00c:	9500      	str	r5, [sp, #0]
    f00e:	f7ff f817 	bl	e040 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    f012:	4620      	mov	r0, r4
    f014:	60b7      	str	r7, [r6, #8]
    f016:	f7ff f8eb 	bl	e1f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f01a:	b138      	cbz	r0, f02c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x88>
    f01c:	2100      	movs	r1, #0
    f01e:	4620      	mov	r0, r4
    f020:	460a      	mov	r2, r1
    f022:	f7ff fa45 	bl	e4b0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f026:	b118      	cbz	r0, f030 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8c>
    f028:	2001      	movs	r0, #1
    f02a:	e7dc      	b.n	efe6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x42>
    f02c:	21e8      	movs	r1, #232	; 0xe8
    f02e:	e000      	b.n	f032 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    f030:	21ed      	movs	r1, #237	; 0xed
    f032:	202b      	movs	r0, #43	; 0x2b
    f034:	f7f5 fe70 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f038:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f03c:	4604      	mov	r4, r0
    f03e:	460e      	mov	r6, r1
    f040:	2000      	movs	r0, #0
    f042:	f7f6 f84d 	bl	50e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f046:	4605      	mov	r5, r0
    f048:	2000      	movs	r0, #0
    f04a:	b906      	cbnz	r6, f04e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xaa>
    f04c:	2001      	movs	r0, #1
    f04e:	2600      	movs	r6, #0
    f050:	46b0      	mov	r8, r6
    f052:	182f      	adds	r7, r5, r0
    f054:	e017      	b.n	f086 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xe2>
    f056:	8820      	ldrh	r0, [r4, #0]
    f058:	1c40      	adds	r0, r0, #1
    f05a:	b280      	uxth	r0, r0
    f05c:	8020      	strh	r0, [r4, #0]
    f05e:	42b8      	cmp	r0, r7
    f060:	d302      	bcc.n	f068 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xc4>
    f062:	4640      	mov	r0, r8
    f064:	f8a4 8000 	strh.w	r8, [r4]
    f068:	b280      	uxth	r0, r0
    f06a:	42a8      	cmp	r0, r5
    f06c:	d304      	bcc.n	f078 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd4>
    f06e:	42b8      	cmp	r0, r7
    f070:	d202      	bcs.n	f078 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd4>
    f072:	2000      	movs	r0, #0
    f074:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f078:	4669      	mov	r1, sp
    f07a:	f7ff fc5e 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f07e:	2800      	cmp	r0, #0
    f080:	d0f8      	beq.n	f074 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd0>
    f082:	1c76      	adds	r6, r6, #1
    f084:	b2f6      	uxtb	r6, r6
    f086:	42b7      	cmp	r7, r6
    f088:	d8e5      	bhi.n	f056 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xb2>
    f08a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f08e:	8020      	strh	r0, [r4, #0]
    f090:	2012      	movs	r0, #18
    f092:	e7ef      	b.n	f074 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd0>

0000f094 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    f094:	b570      	push	{r4, r5, r6, lr}
    f096:	8050      	strh	r0, [r2, #2]
    f098:	890c      	ldrh	r4, [r1, #8]
    f09a:	8094      	strh	r4, [r2, #4]
    f09c:	898b      	ldrh	r3, [r1, #12]
    f09e:	80d3      	strh	r3, [r2, #6]
    f0a0:	8948      	ldrh	r0, [r1, #10]
    f0a2:	8110      	strh	r0, [r2, #8]
    f0a4:	89cd      	ldrh	r5, [r1, #14]
    f0a6:	8155      	strh	r5, [r2, #10]
    f0a8:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    f0aa:	42ae      	cmp	r6, r5
    f0ac:	d108      	bne.n	f0c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f0ae:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    f0b0:	4285      	cmp	r5, r0
    f0b2:	d105      	bne.n	f0c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f0b4:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    f0b6:	429d      	cmp	r5, r3
    f0b8:	d102      	bne.n	f0c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f0ba:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    f0bc:	42a3      	cmp	r3, r4
    f0be:	d001      	beq.n	f0c4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    f0c0:	2301      	movs	r3, #1
    f0c2:	e000      	b.n	f0c6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    f0c4:	2300      	movs	r3, #0
    f0c6:	7313      	strb	r3, [r2, #12]
    f0c8:	8548      	strh	r0, [r1, #42]	; 0x2a
    f0ca:	8950      	ldrh	r0, [r2, #10]
    f0cc:	85c8      	strh	r0, [r1, #46]	; 0x2e
    f0ce:	8890      	ldrh	r0, [r2, #4]
    f0d0:	8588      	strh	r0, [r1, #44]	; 0x2c
    f0d2:	88d0      	ldrh	r0, [r2, #6]
    f0d4:	8608      	strh	r0, [r1, #48]	; 0x30
    f0d6:	2001      	movs	r0, #1
    f0d8:	7010      	strb	r0, [r2, #0]
    f0da:	bd70      	pop	{r4, r5, r6, pc}

0000f0dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    f0dc:	b510      	push	{r4, lr}
    f0de:	888c      	ldrh	r4, [r1, #4]
    f0e0:	890a      	ldrh	r2, [r1, #8]
    f0e2:	884b      	ldrh	r3, [r1, #2]
    f0e4:	88c9      	ldrh	r1, [r1, #6]
    f0e6:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    f0ea:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    f0ee:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    f0f2:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    f0f6:	bd10      	pop	{r4, pc}

0000f0f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    f0f8:	b570      	push	{r4, r5, r6, lr}
    f0fa:	4615      	mov	r5, r2
    f0fc:	460c      	mov	r4, r1
    f0fe:	f000 f8c7 	bl	f290 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    f102:	3096      	adds	r0, #150	; 0x96
    f104:	4428      	add	r0, r5
    f106:	42a0      	cmp	r0, r4
    f108:	d801      	bhi.n	f10e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    f10a:	1a20      	subs	r0, r4, r0
    f10c:	bd70      	pop	{r4, r5, r6, pc}
    f10e:	2000      	movs	r0, #0
    f110:	bd70      	pop	{r4, r5, r6, pc}

0000f112 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    f112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f116:	4604      	mov	r4, r0
    f118:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    f11a:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    f11c:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    f120:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    f124:	4285      	cmp	r5, r0
    f126:	d300      	bcc.n	f12a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    f128:	4605      	mov	r5, r0
    f12a:	4620      	mov	r0, r4
    f12c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    f130:	f000 f89e 	bl	f270 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f134:	4601      	mov	r1, r0
    f136:	86e5      	strh	r5, [r4, #54]	; 0x36
    f138:	8761      	strh	r1, [r4, #58]	; 0x3a
    f13a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    f13c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f140:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    f142:	4680      	mov	r8, r0
    f144:	42aa      	cmp	r2, r5
    f146:	d200      	bcs.n	f14a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    f148:	462a      	mov	r2, r5
    f14a:	428b      	cmp	r3, r1
    f14c:	d200      	bcs.n	f150 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    f14e:	460b      	mov	r3, r1
    f150:	8202      	strh	r2, [r0, #16]
    f152:	f8a8 3012 	strh.w	r3, [r8, #18]
    f156:	42bd      	cmp	r5, r7
    f158:	d101      	bne.n	f15e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    f15a:	42b1      	cmp	r1, r6
    f15c:	d001      	beq.n	f162 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    f15e:	2001      	movs	r0, #1
    f160:	e000      	b.n	f164 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    f162:	2000      	movs	r0, #0
    f164:	4681      	mov	r9, r0
    f166:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    f16a:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    f16e:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    f170:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    f172:	4285      	cmp	r5, r0
    f174:	d300      	bcc.n	f178 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    f176:	4605      	mov	r5, r0
    f178:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    f17c:	4620      	mov	r0, r4
    f17e:	f000 f87f 	bl	f280 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    f182:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    f186:	2902      	cmp	r1, #2
    f188:	d108      	bne.n	f19c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    f18a:	42af      	cmp	r7, r5
    f18c:	d200      	bcs.n	f190 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    f18e:	463d      	mov	r5, r7
    f190:	4286      	cmp	r6, r0
    f192:	d200      	bcs.n	f196 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    f194:	4630      	mov	r0, r6
    f196:	2100      	movs	r1, #0
    f198:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    f19c:	f8a8 5008 	strh.w	r5, [r8, #8]
    f1a0:	f8a8 000c 	strh.w	r0, [r8, #12]
    f1a4:	42bd      	cmp	r5, r7
    f1a6:	d101      	bne.n	f1ac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    f1a8:	42b0      	cmp	r0, r6
    f1aa:	d001      	beq.n	f1b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    f1ac:	2001      	movs	r0, #1
    f1ae:	e000      	b.n	f1b2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    f1b0:	2000      	movs	r0, #0
    f1b2:	ea40 0009 	orr.w	r0, r0, r9
    f1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    f1ba:	6840      	ldr	r0, [r0, #4]
    f1bc:	4770      	bx	lr

0000f1be <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    f1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1c2:	4616      	mov	r6, r2
    f1c4:	460f      	mov	r7, r1
    f1c6:	4604      	mov	r4, r0
    f1c8:	f000 f862 	bl	f290 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    f1cc:	4605      	mov	r5, r0
    f1ce:	463a      	mov	r2, r7
    f1d0:	68e1      	ldr	r1, [r4, #12]
    f1d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f1d4:	f000 f847 	bl	f266 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    f1d8:	19a9      	adds	r1, r5, r6
    f1da:	4281      	cmp	r1, r0
    f1dc:	d300      	bcc.n	f1e0 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    f1de:	4608      	mov	r0, r1
    f1e0:	6320      	str	r0, [r4, #48]	; 0x30
    f1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f1e6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    f1e6:	221b      	movs	r2, #27
    f1e8:	8402      	strh	r2, [r0, #32]
    f1ea:	8382      	strh	r2, [r0, #28]
    f1ec:	82c2      	strh	r2, [r0, #22]
    f1ee:	8282      	strh	r2, [r0, #20]
    f1f0:	8142      	strh	r2, [r0, #10]
    f1f2:	8202      	strh	r2, [r0, #16]
    f1f4:	8102      	strh	r2, [r0, #8]
    f1f6:	8542      	strh	r2, [r0, #42]	; 0x2a
    f1f8:	8582      	strh	r2, [r0, #44]	; 0x2c
    f1fa:	8482      	strh	r2, [r0, #36]	; 0x24
    f1fc:	2900      	cmp	r1, #0
    f1fe:	d10a      	bne.n	f216 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    f200:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f204:	8441      	strh	r1, [r0, #34]	; 0x22
    f206:	83c1      	strh	r1, [r0, #30]
    f208:	8341      	strh	r1, [r0, #26]
    f20a:	8301      	strh	r1, [r0, #24]
    f20c:	81c1      	strh	r1, [r0, #14]
    f20e:	8241      	strh	r1, [r0, #18]
    f210:	8181      	strh	r1, [r0, #12]
    f212:	85c1      	strh	r1, [r0, #46]	; 0x2e
    f214:	8601      	strh	r1, [r0, #48]	; 0x30
    f216:	4770      	bx	lr

0000f218 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    f218:	6800      	ldr	r0, [r0, #0]
    f21a:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    f21e:	4290      	cmp	r0, r2
    f220:	d903      	bls.n	f22a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    f222:	1a40      	subs	r0, r0, r1
    f224:	389c      	subs	r0, #156	; 0x9c
    f226:	0840      	lsrs	r0, r0, #1
    f228:	4770      	bx	lr
    f22a:	2000      	movs	r0, #0
    f22c:	4770      	bx	lr

0000f22e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    f22e:	b510      	push	{r4, lr}
    f230:	9c02      	ldr	r4, [sp, #8]
    f232:	8281      	strh	r1, [r0, #20]
    f234:	82c2      	strh	r2, [r0, #22]
    f236:	8303      	strh	r3, [r0, #24]
    f238:	8344      	strh	r4, [r0, #26]
    f23a:	bd10      	pop	{r4, pc}

0000f23c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    f23c:	8050      	strh	r0, [r2, #2]
    f23e:	8a88      	ldrh	r0, [r1, #20]
    f240:	8090      	strh	r0, [r2, #4]
    f242:	8ac8      	ldrh	r0, [r1, #22]
    f244:	80d0      	strh	r0, [r2, #6]
    f246:	8b08      	ldrh	r0, [r1, #24]
    f248:	8110      	strh	r0, [r2, #8]
    f24a:	8b48      	ldrh	r0, [r1, #26]
    f24c:	8150      	strh	r0, [r2, #10]
    f24e:	2001      	movs	r0, #1
    f250:	7010      	strb	r0, [r2, #0]
    f252:	4770      	bx	lr
    f254:	2902      	cmp	r1, #2
    f256:	d003      	beq.n	f260 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    f258:	00c0      	lsls	r0, r0, #3
    f25a:	3070      	adds	r0, #112	; 0x70
    f25c:	b280      	uxth	r0, r0
    f25e:	4770      	bx	lr
    f260:	0080      	lsls	r0, r0, #2
    f262:	303c      	adds	r0, #60	; 0x3c
    f264:	e7fa      	b.n	f25c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    f266:	4288      	cmp	r0, r1
    f268:	d300      	bcc.n	f26c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    f26a:	4608      	mov	r0, r1
    f26c:	1a80      	subs	r0, r0, r2
    f26e:	4770      	bx	lr
    f270:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    f274:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    f278:	4281      	cmp	r1, r0
    f27a:	d200      	bcs.n	f27e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    f27c:	4608      	mov	r0, r1
    f27e:	4770      	bx	lr
    f280:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    f284:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    f288:	4281      	cmp	r1, r0
    f28a:	d200      	bcs.n	f28e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    f28c:	4608      	mov	r0, r1
    f28e:	4770      	bx	lr
    f290:	2196      	movs	r1, #150	; 0x96
    f292:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    f296:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    f29a:	f000 b800 	b.w	f29e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    f29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2a2:	460d      	mov	r5, r1
    f2a4:	4606      	mov	r6, r0
    f2a6:	4698      	mov	r8, r3
    f2a8:	4617      	mov	r7, r2
    f2aa:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    f2ac:	4611      	mov	r1, r2
    f2ae:	f7ff ffd1 	bl	f254 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    f2b2:	4604      	mov	r4, r0
    f2b4:	4639      	mov	r1, r7
    f2b6:	4630      	mov	r0, r6
    f2b8:	f7ff ffe2 	bl	f280 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    f2bc:	42a0      	cmp	r0, r4
    f2be:	d200      	bcs.n	f2c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    f2c0:	4604      	mov	r4, r0
    f2c2:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    f2c4:	4641      	mov	r1, r8
    f2c6:	f7ff ffc5 	bl	f254 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    f2ca:	4607      	mov	r7, r0
    f2cc:	4641      	mov	r1, r8
    f2ce:	4630      	mov	r0, r6
    f2d0:	f7ff ffce 	bl	f270 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f2d4:	42b8      	cmp	r0, r7
    f2d6:	d300      	bcc.n	f2da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    f2d8:	4638      	mov	r0, r7
    f2da:	4420      	add	r0, r4
    f2dc:	4428      	add	r0, r5
    f2de:	1d80      	adds	r0, r0, #6
    f2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2e4:	2801      	cmp	r0, #1
    f2e6:	d102      	bne.n	f2ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    f2e8:	7948      	ldrb	r0, [r1, #5]
    f2ea:	0980      	lsrs	r0, r0, #6
    f2ec:	d001      	beq.n	f2f2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    f2ee:	2000      	movs	r0, #0
    f2f0:	4770      	bx	lr
    f2f2:	2001      	movs	r0, #1
    f2f4:	4770      	bx	lr
    f2f6:	2801      	cmp	r0, #1
    f2f8:	d106      	bne.n	f308 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    f2fa:	7948      	ldrb	r0, [r1, #5]
    f2fc:	2101      	movs	r1, #1
    f2fe:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f302:	d101      	bne.n	f308 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    f304:	2001      	movs	r0, #1
    f306:	4770      	bx	lr
    f308:	2000      	movs	r0, #0
    f30a:	4770      	bx	lr
    f30c:	b118      	cbz	r0, f316 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xda>
    f30e:	2802      	cmp	r0, #2
    f310:	d001      	beq.n	f316 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xda>
    f312:	2001      	movs	r0, #1
    f314:	4770      	bx	lr
    f316:	2000      	movs	r0, #0
    f318:	4770      	bx	lr
    f31a:	2802      	cmp	r0, #2
    f31c:	d003      	beq.n	f326 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xea>
    f31e:	2803      	cmp	r0, #3
    f320:	d001      	beq.n	f326 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xea>
    f322:	2000      	movs	r0, #0
    f324:	4770      	bx	lr
    f326:	2001      	movs	r0, #1
    f328:	4770      	bx	lr

0000f32a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    f32a:	f7f9 b87d 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    f32e:	b510      	push	{r4, lr}
    f330:	f7f8 fec8 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    f334:	f7f8 fa88 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    f338:	f7fd f8c6 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f33c:	2005      	movs	r0, #5
    f33e:	bd10      	pop	{r4, pc}
    f340:	b510      	push	{r4, lr}
    f342:	f7f8 febf 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    f346:	f7fd f8bf 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f34a:	2005      	movs	r0, #5
    f34c:	bd10      	pop	{r4, pc}
    f34e:	b530      	push	{r4, r5, lr}
    f350:	b089      	sub	sp, #36	; 0x24
    f352:	4605      	mov	r5, r0
    f354:	f7f8 feb6 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    f358:	7828      	ldrb	r0, [r5, #0]
    f35a:	4669      	mov	r1, sp
    f35c:	f000 040f 	and.w	r4, r0, #15
    f360:	4622      	mov	r2, r4
    f362:	4628      	mov	r0, r5
    f364:	f7f9 fa1e 	bl	87a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    f368:	2200      	movs	r2, #0
    f36a:	4621      	mov	r1, r4
    f36c:	4668      	mov	r0, sp
    f36e:	f7f8 faeb 	bl	7948 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    f372:	4602      	mov	r2, r0
    f374:	4621      	mov	r1, r4
    f376:	4668      	mov	r0, sp
    f378:	f7f8 fe22 	bl	7fc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7b4>
    f37c:	4604      	mov	r4, r0
    f37e:	f7f8 fa63 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    f382:	b009      	add	sp, #36	; 0x24
    f384:	4620      	mov	r0, r4
    f386:	bd30      	pop	{r4, r5, pc}
    f388:	f240 21c5 	movw	r1, #709	; 0x2c5
    f38c:	2032      	movs	r0, #50	; 0x32
    f38e:	f7f5 fcc3 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f392:	b510      	push	{r4, lr}
    f394:	f7f8 fe96 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    f398:	f7fd f896 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3a0:	f7f9 b85a 	b.w	8458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    f3a4:	f7f9 b840 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    f3a8:	f7ff b8b6 	b.w	e518 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000f3ac <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    f3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3ae:	b08b      	sub	sp, #44	; 0x2c
    f3b0:	4607      	mov	r7, r0
    f3b2:	f7f6 f8e3 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f3b6:	4604      	mov	r4, r0
    f3b8:	f7fe ff6b 	bl	e292 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f3bc:	0005      	movs	r5, r0
    f3be:	d00c      	beq.n	f3da <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    f3c0:	4620      	mov	r0, r4
    f3c2:	4629      	mov	r1, r5
    f3c4:	466a      	mov	r2, sp
    f3c6:	f7fe ff95 	bl	e2f4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f3ca:	4606      	mov	r6, r0
    f3cc:	f7f6 f8d0 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f3d0:	42b0      	cmp	r0, r6
    f3d2:	d005      	beq.n	f3e0 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    f3d4:	f44f 7197 	mov.w	r1, #302	; 0x12e
    f3d8:	e033      	b.n	f442 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    f3da:	2000      	movs	r0, #0
    f3dc:	b00b      	add	sp, #44	; 0x2c
    f3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3e0:	a901      	add	r1, sp, #4
    f3e2:	9800      	ldr	r0, [sp, #0]
    f3e4:	f000 f8b4 	bl	f550 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    f3e8:	1d3e      	adds	r6, r7, #4
    f3ea:	4628      	mov	r0, r5
    f3ec:	f7fe fee5 	bl	e1ba <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f3f0:	4605      	mov	r5, r0
    f3f2:	4601      	mov	r1, r0
    f3f4:	221c      	movs	r2, #28
    f3f6:	4630      	mov	r0, r6
    f3f8:	f7fe f884 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f3fc:	7aa8      	ldrb	r0, [r5, #10]
    f3fe:	f04f 0500 	mov.w	r5, #0
    f402:	06c1      	lsls	r1, r0, #27
    f404:	d50d      	bpl.n	f422 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    f406:	0740      	lsls	r0, r0, #29
    f408:	d40a      	bmi.n	f420 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    f40a:	f89d 2014 	ldrb.w	r2, [sp, #20]
    f40e:	f106 001c 	add.w	r0, r6, #28
    f412:	9904      	ldr	r1, [sp, #16]
    f414:	f7fe f876 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f418:	f89d 0014 	ldrb.w	r0, [sp, #20]
    f41c:	7230      	strb	r0, [r6, #8]
    f41e:	e000      	b.n	f422 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    f420:	7235      	strb	r5, [r6, #8]
    f422:	707d      	strb	r5, [r7, #1]
    f424:	2005      	movs	r0, #5
    f426:	7038      	strb	r0, [r7, #0]
    f428:	4620      	mov	r0, r4
    f42a:	f7fe fee1 	bl	e1f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f42e:	b130      	cbz	r0, f43e <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    f430:	2100      	movs	r1, #0
    f432:	4620      	mov	r0, r4
    f434:	460a      	mov	r2, r1
    f436:	f7ff f83b 	bl	e4b0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f43a:	2001      	movs	r0, #1
    f43c:	e7ce      	b.n	f3dc <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    f43e:	f240 1171 	movw	r1, #369	; 0x171
    f442:	2033      	movs	r0, #51	; 0x33
    f444:	f7f5 fc68 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f448 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    f448:	b510      	push	{r4, lr}
    f44a:	f7f6 f897 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f44e:	f000 f874 	bl	f53a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    f452:	4604      	mov	r4, r0
    f454:	221c      	movs	r2, #28
    f456:	2100      	movs	r1, #0
    f458:	f7fe f8ce 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f45c:	207f      	movs	r0, #127	; 0x7f
    f45e:	76a0      	strb	r0, [r4, #26]
    f460:	21ff      	movs	r1, #255	; 0xff
    f462:	73a1      	strb	r1, [r4, #14]
    f464:	7061      	strb	r1, [r4, #1]
    f466:	74e1      	strb	r1, [r4, #19]
    f468:	7aa0      	ldrb	r0, [r4, #10]
    f46a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    f46e:	3020      	adds	r0, #32
    f470:	72a0      	strb	r0, [r4, #10]
    f472:	bd10      	pop	{r4, pc}

0000f474 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    f474:	f7ff bfe8 	b.w	f448 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000f478 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    f478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f47c:	461e      	mov	r6, r3
    f47e:	4617      	mov	r7, r2
    f480:	4689      	mov	r9, r1
    f482:	4682      	mov	sl, r0
    f484:	f8dd 8020 	ldr.w	r8, [sp, #32]
    f488:	f7f6 f878 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f48c:	4604      	mov	r4, r0
    f48e:	f7fe fe96 	bl	e1be <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    f492:	2801      	cmp	r0, #1
    f494:	d034      	beq.n	f500 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    f496:	4620      	mov	r0, r4
    f498:	f000 f84f 	bl	f53a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    f49c:	4604      	mov	r4, r0
    f49e:	221c      	movs	r2, #28
    f4a0:	2100      	movs	r1, #0
    f4a2:	f7fe f8a9 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f4a6:	2501      	movs	r5, #1
    f4a8:	7025      	strb	r5, [r4, #0]
    f4aa:	1c63      	adds	r3, r4, #1
    f4ac:	1ca2      	adds	r2, r4, #2
    f4ae:	4649      	mov	r1, r9
    f4b0:	4650      	mov	r0, sl
    f4b2:	f000 f827 	bl	f504 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    f4b6:	f884 8009 	strb.w	r8, [r4, #9]
    f4ba:	7aa0      	ldrb	r0, [r4, #10]
    f4bc:	21ff      	movs	r1, #255	; 0xff
    f4be:	f367 0000 	bfi	r0, r7, #0, #1
    f4c2:	f040 001a 	orr.w	r0, r0, #26
    f4c6:	72a0      	strb	r0, [r4, #10]
    f4c8:	7325      	strb	r5, [r4, #12]
    f4ca:	2000      	movs	r0, #0
    f4cc:	7360      	strb	r0, [r4, #13]
    f4ce:	73a1      	strb	r1, [r4, #14]
    f4d0:	74e1      	strb	r1, [r4, #19]
    f4d2:	207f      	movs	r0, #127	; 0x7f
    f4d4:	76a0      	strb	r0, [r4, #26]
    f4d6:	76e6      	strb	r6, [r4, #27]
    f4d8:	f7f6 f84a 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f4dc:	4604      	mov	r4, r0
    f4de:	f7f6 f84d 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f4e2:	2201      	movs	r2, #1
    f4e4:	4621      	mov	r1, r4
    f4e6:	f000 f831 	bl	f54c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    f4ea:	b120      	cbz	r0, f4f6 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    f4ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f4f0:	2005      	movs	r0, #5
    f4f2:	f7f9 bb3f 	b.w	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    f4f6:	f240 21c7 	movw	r1, #711	; 0x2c7
    f4fa:	2033      	movs	r0, #51	; 0x33
    f4fc:	f7f5 fc0c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f504:	b510      	push	{r4, lr}
    f506:	461c      	mov	r4, r3
    f508:	460b      	mov	r3, r1
    f50a:	29ff      	cmp	r1, #255	; 0xff
    f50c:	d00d      	beq.n	f52a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    f50e:	4621      	mov	r1, r4
    f510:	4618      	mov	r0, r3
    f512:	f7f7 f8cd 	bl	66b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    f516:	b120      	cbz	r0, f522 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    f518:	7820      	ldrb	r0, [r4, #0]
    f51a:	f040 0002 	orr.w	r0, r0, #2
    f51e:	7020      	strb	r0, [r4, #0]
    f520:	bd10      	pop	{r4, pc}
    f522:	2150      	movs	r1, #80	; 0x50
    f524:	2033      	movs	r0, #51	; 0x33
    f526:	f7f5 fbf7 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f52a:	7c41      	ldrb	r1, [r0, #17]
    f52c:	7021      	strb	r1, [r4, #0]
    f52e:	6840      	ldr	r0, [r0, #4]
    f530:	6801      	ldr	r1, [r0, #0]
    f532:	6011      	str	r1, [r2, #0]
    f534:	8880      	ldrh	r0, [r0, #4]
    f536:	8090      	strh	r0, [r2, #4]
    f538:	bd10      	pop	{r4, pc}
    f53a:	b51c      	push	{r2, r3, r4, lr}
    f53c:	4669      	mov	r1, sp
    f53e:	aa01      	add	r2, sp, #4
    f540:	f7fe feca 	bl	e2d8 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    f544:	9800      	ldr	r0, [sp, #0]
    f546:	f7fe fe38 	bl	e1ba <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f54a:	bd1c      	pop	{r2, r3, r4, pc}
    f54c:	f7fe bddd 	b.w	e10a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000f550 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    f550:	7802      	ldrb	r2, [r0, #0]
    f552:	f002 020f 	and.w	r2, r2, #15
    f556:	f7f9 b925 	b.w	87a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    f55a:	2800      	cmp	r0, #0
    f55c:	db04      	blt.n	f568 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    f55e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f562:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    f566:	e005      	b.n	f574 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    f568:	f000 000f 	and.w	r0, r0, #15
    f56c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f570:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    f574:	0940      	lsrs	r0, r0, #5
    f576:	4770      	bx	lr

0000f578 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI>:
    f578:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    f57c:	4770      	bx	lr
    f57e:	6940      	ldr	r0, [r0, #20]
    f580:	2800      	cmp	r0, #0
    f582:	d000      	beq.n	f586 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xe>
    f584:	2001      	movs	r0, #1
    f586:	4770      	bx	lr
    f588:	b510      	push	{r4, lr}
    f58a:	2808      	cmp	r0, #8
    f58c:	d00a      	beq.n	f5a4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x2c>
    f58e:	2804      	cmp	r0, #4
    f590:	d00a      	beq.n	f5a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x30>
    f592:	2802      	cmp	r0, #2
    f594:	d00a      	beq.n	f5ac <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x34>
    f596:	2108      	movs	r1, #8
    f598:	2801      	cmp	r0, #1
    f59a:	d009      	beq.n	f5b0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x38>
    f59c:	21d9      	movs	r1, #217	; 0xd9
    f59e:	2005      	movs	r0, #5
    f5a0:	f7f5 fbba 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5a4:	2140      	movs	r1, #64	; 0x40
    f5a6:	e7f7      	b.n	f598 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    f5a8:	2110      	movs	r1, #16
    f5aa:	e7f5      	b.n	f598 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    f5ac:	2104      	movs	r1, #4
    f5ae:	e7f3      	b.n	f598 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    f5b0:	222a      	movs	r2, #42	; 0x2a
    f5b2:	2028      	movs	r0, #40	; 0x28
    f5b4:	fb11 0002 	smlabb	r0, r1, r2, r0
    f5b8:	b280      	uxth	r0, r0
    f5ba:	bd10      	pop	{r4, pc}
    f5bc:	2000      	movs	r0, #0
    f5be:	4770      	bx	lr
    f5c0:	b570      	push	{r4, r5, r6, lr}
    f5c2:	4604      	mov	r4, r0
    f5c4:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    f5c8:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    f5cc:	f000 f80c 	bl	f5e8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x70>
    f5d0:	4605      	mov	r5, r0
    f5d2:	f000 f857 	bl	f684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    f5d6:	4601      	mov	r1, r0
    f5d8:	462a      	mov	r2, r5
    f5da:	4620      	mov	r0, r4
    f5dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f5e0:	f7ff bded 	b.w	f1be <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f5e4:	f7f3 b93a 	b.w	285c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f5e8:	b510      	push	{r4, lr}
    f5ea:	4604      	mov	r4, r0
    f5ec:	4608      	mov	r0, r1
    f5ee:	f001 f8f1 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f5f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f5f6:	2c02      	cmp	r4, #2
    f5f8:	d00a      	beq.n	f610 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x98>
    f5fa:	f640 0234 	movw	r2, #2100	; 0x834
    f5fe:	4410      	add	r0, r2
    f600:	f24a 5295 	movw	r2, #42389	; 0xa595
    f604:	4410      	add	r0, r2
    f606:	fbb0 f0f1 	udiv	r0, r0, r1
    f60a:	f500 709b 	add.w	r0, r0, #310	; 0x136
    f60e:	bd10      	pop	{r4, pc}
    f610:	460a      	mov	r2, r1
    f612:	e7f4      	b.n	f5fe <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x86>
    f614:	b510      	push	{r4, lr}
    f616:	4604      	mov	r4, r0
    f618:	2000      	movs	r0, #0
    f61a:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    f61e:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    f622:	f7f3 fd67 	bl	30f4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f626:	b140      	cbz	r0, f63a <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xc2>
    f628:	2020      	movs	r0, #32
    f62a:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    f62e:	f504 7084 	add.w	r0, r4, #264	; 0x108
    f632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f636:	f7fb bf45 	b.w	b4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    f63a:	f240 5139 	movw	r1, #1337	; 0x539
    f63e:	2035      	movs	r0, #53	; 0x35
    f640:	f7f5 fb6a 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f646:	4613      	mov	r3, r2
    f648:	460a      	mov	r2, r1
    f64a:	4604      	mov	r4, r0
    f64c:	4601      	mov	r1, r0
    f64e:	4668      	mov	r0, sp
    f650:	f7f9 fd52 	bl	90f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x584>
    f654:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    f658:	4669      	mov	r1, sp
    f65a:	f7ff ffc3 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    f65e:	2800      	cmp	r0, #0
    f660:	d104      	bne.n	f66c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf4>
    f662:	f640 2139 	movw	r1, #2617	; 0xa39
    f666:	2035      	movs	r0, #53	; 0x35
    f668:	f7f5 fb56 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f66c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    f66e:	b510      	push	{r4, lr}
    f670:	245b      	movs	r4, #91	; 0x5b
    f672:	f001 f86d 	bl	10750 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    f676:	b910      	cbnz	r0, f67e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x106>
    f678:	f001 f860 	bl	1073c <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    f67c:	b100      	cbz	r0, f680 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x108>
    f67e:	2462      	movs	r4, #98	; 0x62
    f680:	4620      	mov	r0, r4
    f682:	bd10      	pop	{r4, pc}
    f684:	b510      	push	{r4, lr}
    f686:	f7ff fff2 	bl	f66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    f68a:	3065      	adds	r0, #101	; 0x65
    f68c:	b280      	uxth	r0, r0
    f68e:	bd10      	pop	{r4, pc}
    f690:	b510      	push	{r4, lr}
    f692:	f7ff ffec 	bl	f66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    f696:	30fb      	adds	r0, #251	; 0xfb
    f698:	b280      	uxth	r0, r0
    f69a:	bd10      	pop	{r4, pc}
    f69c:	b1d0      	cbz	r0, f6d4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x15c>
    f69e:	2908      	cmp	r1, #8
    f6a0:	d011      	beq.n	f6c6 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x14e>
    f6a2:	2904      	cmp	r1, #4
    f6a4:	d00b      	beq.n	f6be <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x146>
    f6a6:	2000      	movs	r0, #0
    f6a8:	2902      	cmp	r1, #2
    f6aa:	d010      	beq.n	f6ce <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x156>
    f6ac:	2108      	movs	r1, #8
    f6ae:	3028      	adds	r0, #40	; 0x28
    f6b0:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    f6b4:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    f6b8:	4408      	add	r0, r1
    f6ba:	3098      	adds	r0, #152	; 0x98
    f6bc:	4770      	bx	lr
    f6be:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    f6c2:	2110      	movs	r1, #16
    f6c4:	e7f4      	b.n	f6b0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    f6c6:	f44f 70c8 	mov.w	r0, #400	; 0x190
    f6ca:	2140      	movs	r1, #64	; 0x40
    f6cc:	e7f0      	b.n	f6b0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    f6ce:	2104      	movs	r1, #4
    f6d0:	3018      	adds	r0, #24
    f6d2:	e7ed      	b.n	f6b0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    f6d4:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    f6d8:	4770      	bx	lr
    f6da:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f6de:	f001 0307 	and.w	r3, r1, #7
    f6e2:	7802      	ldrb	r2, [r0, #0]
    f6e4:	2101      	movs	r1, #1
    f6e6:	4099      	lsls	r1, r3
    f6e8:	438a      	bics	r2, r1
    f6ea:	7002      	strb	r2, [r0, #0]
    f6ec:	4770      	bx	lr

0000f6ee <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    f6ee:	f7f5 be9d 	b.w	542c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f6f2 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    f6f2:	2000      	movs	r0, #0
    f6f4:	4770      	bx	lr

0000f6f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    f6f6:	b538      	push	{r3, r4, r5, lr}
    f6f8:	460d      	mov	r5, r1
    f6fa:	4604      	mov	r4, r0
    f6fc:	e050      	b.n	f7a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    f6fe:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    f702:	1c40      	adds	r0, r0, #1
    f704:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    f708:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    f70c:	1c40      	adds	r0, r0, #1
    f70e:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    f712:	4620      	mov	r0, r4
    f714:	f000 f8e1 	bl	f8da <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    f718:	b198      	cbz	r0, f742 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    f71a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    f71e:	1c40      	adds	r0, r0, #1
    f720:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    f724:	4620      	mov	r0, r4
    f726:	f000 f86e 	bl	f806 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    f72a:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    f72e:	4288      	cmp	r0, r1
    f730:	d307      	bcc.n	f742 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    f732:	2000      	movs	r0, #0
    f734:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    f738:	2001      	movs	r0, #1
    f73a:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    f73e:	f7fb ff1f 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f742:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    f746:	b120      	cbz	r0, f752 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    f748:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    f74c:	1c40      	adds	r0, r0, #1
    f74e:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    f752:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    f756:	b120      	cbz	r0, f762 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    f758:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    f75c:	1c40      	adds	r0, r0, #1
    f75e:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    f762:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    f766:	f88d 0000 	strb.w	r0, [sp]
    f76a:	9800      	ldr	r0, [sp, #0]
    f76c:	9000      	str	r0, [sp, #0]
    f76e:	f89d 0000 	ldrb.w	r0, [sp]
    f772:	b940      	cbnz	r0, f786 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    f774:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    f778:	2300      	movs	r3, #0
    f77a:	2101      	movs	r1, #1
    f77c:	f104 0078 	add.w	r0, r4, #120	; 0x78
    f780:	f7ff f904 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f784:	b120      	cbz	r0, f790 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    f786:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    f78a:	1c40      	adds	r0, r0, #1
    f78c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    f790:	4620      	mov	r0, r4
    f792:	f000 f847 	bl	f824 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    f796:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    f79a:	1c40      	adds	r0, r0, #1
    f79c:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    f7a0:	1e6d      	subs	r5, r5, #1
    f7a2:	b2ad      	uxth	r5, r5
    f7a4:	d2ab      	bcs.n	f6fe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    f7a6:	bd38      	pop	{r3, r4, r5, pc}

0000f7a8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    f7a8:	b510      	push	{r4, lr}
    f7aa:	f7fa fdf7 	bl	a39c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    f7ae:	b128      	cbz	r0, f7bc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    f7b0:	2000      	movs	r0, #0
    f7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7b6:	4601      	mov	r1, r0
    f7b8:	f7fa bd9c 	b.w	a2f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    f7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7c0:	f7f6 bad4 	b.w	5d6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    f7c4:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f7c8:	28fe      	cmp	r0, #254	; 0xfe
    f7ca:	d001      	beq.n	f7d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    f7cc:	2001      	movs	r0, #1
    f7ce:	4770      	bx	lr
    f7d0:	2000      	movs	r0, #0
    f7d2:	4770      	bx	lr
    f7d4:	b510      	push	{r4, lr}
    f7d6:	2801      	cmp	r0, #1
    f7d8:	d006      	beq.n	f7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f7da:	2802      	cmp	r0, #2
    f7dc:	d004      	beq.n	f7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f7de:	f240 2163 	movw	r1, #611	; 0x263
    f7e2:	2006      	movs	r0, #6
    f7e4:	f7f5 fa98 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7e8:	bd10      	pop	{r4, pc}
    f7ea:	2801      	cmp	r0, #1
    f7ec:	d002      	beq.n	f7f4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    f7ee:	2802      	cmp	r0, #2
    f7f0:	d105      	bne.n	f7fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f7f2:	e002      	b.n	f7fa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    f7f4:	2901      	cmp	r1, #1
    f7f6:	d004      	beq.n	f802 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f7f8:	e001      	b.n	f7fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f7fa:	2902      	cmp	r1, #2
    f7fc:	d001      	beq.n	f802 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f7fe:	2000      	movs	r0, #0
    f800:	4770      	bx	lr
    f802:	2001      	movs	r0, #1
    f804:	4770      	bx	lr
    f806:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    f80a:	428a      	cmp	r2, r1
    f80c:	d301      	bcc.n	f812 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    f80e:	1a51      	subs	r1, r2, r1
    f810:	e000      	b.n	f814 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    f812:	2100      	movs	r1, #0
    f814:	8a82      	ldrh	r2, [r0, #20]
    f816:	1d52      	adds	r2, r2, #5
    f818:	428a      	cmp	r2, r1
    f81a:	d302      	bcc.n	f822 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    f81c:	2101      	movs	r1, #1
    f81e:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    f822:	4770      	bx	lr
    f824:	b570      	push	{r4, r5, r6, lr}
    f826:	4604      	mov	r4, r0
    f828:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    f82c:	2500      	movs	r5, #0
    f82e:	2601      	movs	r6, #1
    f830:	280c      	cmp	r0, #12
    f832:	d02c      	beq.n	f88e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    f834:	280d      	cmp	r0, #13
    f836:	d129      	bne.n	f88c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    f838:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    f83c:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    f840:	1c40      	adds	r0, r0, #1
    f842:	4288      	cmp	r0, r1
    f844:	d122      	bne.n	f88c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    f846:	8820      	ldrh	r0, [r4, #0]
    f848:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    f84c:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    f850:	f7ff f883 	bl	e95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    f854:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    f858:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    f85c:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    f860:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    f864:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    f868:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    f86c:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    f870:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    f874:	2102      	movs	r1, #2
    f876:	4620      	mov	r0, r4
    f878:	f7f7 f94e 	bl	6b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    f87c:	f7fb fe80 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f880:	2103      	movs	r1, #3
    f882:	4620      	mov	r0, r4
    f884:	f7f9 f90c 	bl	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    f888:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    f88c:	bd70      	pop	{r4, r5, r6, pc}
    f88e:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    f892:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    f896:	1c40      	adds	r0, r0, #1
    f898:	4288      	cmp	r0, r1
    f89a:	d1f7      	bne.n	f88c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    f89c:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    f8a0:	f8d0 1001 	ldr.w	r1, [r0, #1]
    f8a4:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    f8a8:	7940      	ldrb	r0, [r0, #5]
    f8aa:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    f8ae:	2103      	movs	r1, #3
    f8b0:	4620      	mov	r0, r4
    f8b2:	f7f7 f931 	bl	6b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    f8b6:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    f8ba:	7800      	ldrb	r0, [r0, #0]
    f8bc:	b140      	cbz	r0, f8d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    f8be:	2101      	movs	r1, #1
    f8c0:	20fe      	movs	r0, #254	; 0xfe
    f8c2:	f7fb fd87 	bl	b3d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    f8c6:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    f8ca:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    f8ce:	bd70      	pop	{r4, r5, r6, pc}
    f8d0:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    f8d4:	2036      	movs	r0, #54	; 0x36
    f8d6:	f7f5 fa1f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8da:	b510      	push	{r4, lr}
    f8dc:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    f8e0:	b941      	cbnz	r1, f8f4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    f8e2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    f8e6:	2300      	movs	r3, #0
    f8e8:	2106      	movs	r1, #6
    f8ea:	3078      	adds	r0, #120	; 0x78
    f8ec:	f7ff f84e 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f8f0:	2800      	cmp	r0, #0
    f8f2:	d000      	beq.n	f8f6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    f8f4:	2001      	movs	r0, #1
    f8f6:	bd10      	pop	{r4, pc}

0000f8f8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f8f8:	b510      	push	{r4, lr}
    f8fa:	460c      	mov	r4, r1
    f8fc:	4601      	mov	r1, r0
    f8fe:	4610      	mov	r0, r2
    f900:	f7f2 fe6e 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    f904:	2800      	cmp	r0, #0
    f906:	da06      	bge.n	f916 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    f908:	1a21      	subs	r1, r4, r0
    f90a:	1e49      	subs	r1, r1, #1
    f90c:	fbb1 f1f4 	udiv	r1, r1, r4
    f910:	fb01 0004 	mla	r0, r1, r4, r0
    f914:	bd10      	pop	{r4, pc}
    f916:	fb90 f1f4 	sdiv	r1, r0, r4
    f91a:	fb01 0014 	mls	r0, r1, r4, r0
    f91e:	bd10      	pop	{r4, pc}
    f920:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f924:	f001 0107 	and.w	r1, r1, #7
    f928:	7800      	ldrb	r0, [r0, #0]
    f92a:	2201      	movs	r2, #1
    f92c:	408a      	lsls	r2, r1
    f92e:	4010      	ands	r0, r2
    f930:	40c8      	lsrs	r0, r1
    f932:	4770      	bx	lr
    f934:	b118      	cbz	r0, f93e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f936:	2802      	cmp	r0, #2
    f938:	d001      	beq.n	f93e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f93a:	2001      	movs	r0, #1
    f93c:	4770      	bx	lr
    f93e:	2000      	movs	r0, #0
    f940:	4770      	bx	lr

0000f942 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f942:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f944:	7881      	ldrb	r1, [r0, #2]
    f946:	4604      	mov	r4, r0
    f948:	291a      	cmp	r1, #26
    f94a:	d025      	beq.n	f998 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f94c:	dc0e      	bgt.n	f96c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    f94e:	2916      	cmp	r1, #22
    f950:	d22d      	bcs.n	f9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f952:	e8df f001 	tbb	[pc, r1]
    f956:	2c2c      	.short	0x2c2c
    f958:	212c2c2c 	.word	0x212c2c2c
    f95c:	2c2c2c2c 	.word	0x2c2c2c2c
    f960:	2c2c2c2c 	.word	0x2c2c2c2c
    f964:	2c2c2c2c 	.word	0x2c2c2c2c
    f968:	2121212c 	.word	0x2121212c
    f96c:	292a      	cmp	r1, #42	; 0x2a
    f96e:	d01e      	beq.n	f9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f970:	dc0b      	bgt.n	f98a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    f972:	f1a1 011e 	sub.w	r1, r1, #30
    f976:	290c      	cmp	r1, #12
    f978:	d219      	bcs.n	f9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f97a:	e8df f001 	tbb	[pc, r1]
    f97e:	1818      	.short	0x1818
    f980:	18181818 	.word	0x18181818
    f984:	18181818 	.word	0x18181818
    f988:	0d18      	.short	0x0d18
    f98a:	393a      	subs	r1, #58	; 0x3a
    f98c:	2904      	cmp	r1, #4
    f98e:	d20e      	bcs.n	f9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f990:	e8df f001 	tbb	[pc, r1]
    f994:	020d020d 	.word	0x020d020d
    f998:	8820      	ldrh	r0, [r4, #0]
    f99a:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f99e:	d206      	bcs.n	f9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f9a0:	2701      	movs	r7, #1
    f9a2:	4669      	mov	r1, sp
    f9a4:	f7fe ffc9 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9a8:	b118      	cbz	r0, f9b2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    f9aa:	2002      	movs	r0, #2
    f9ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f9ae:	2012      	movs	r0, #18
    f9b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f9b2:	9d01      	ldr	r5, [sp, #4]
    f9b4:	4668      	mov	r0, sp
    f9b6:	462e      	mov	r6, r5
    f9b8:	f505 759e 	add.w	r5, r5, #316	; 0x13c
    f9bc:	f206 163d 	addw	r6, r6, #317	; 0x13d
    f9c0:	f000 fd5e 	bl	10480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    f9c4:	b138      	cbz	r0, f9d6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    f9c6:	7828      	ldrb	r0, [r5, #0]
    f9c8:	f88d 0008 	strb.w	r0, [sp, #8]
    f9cc:	9802      	ldr	r0, [sp, #8]
    f9ce:	9002      	str	r0, [sp, #8]
    f9d0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f9d4:	b108      	cbz	r0, f9da <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    f9d6:	200c      	movs	r0, #12
    f9d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f9da:	702f      	strb	r7, [r5, #0]
    f9dc:	78a0      	ldrb	r0, [r4, #2]
    f9de:	7030      	strb	r0, [r6, #0]
    f9e0:	2000      	movs	r0, #0
    f9e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f9e4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    f9e4:	b510      	push	{r4, lr}
    f9e6:	4604      	mov	r4, r0
    f9e8:	7800      	ldrb	r0, [r0, #0]
    f9ea:	b118      	cbz	r0, f9f4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f9ec:	2801      	cmp	r0, #1
    f9ee:	d001      	beq.n	f9f4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f9f0:	2012      	movs	r0, #18
    f9f2:	bd10      	pop	{r4, pc}
    f9f4:	f000 fcf8 	bl	103e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    f9f8:	b120      	cbz	r0, fa04 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f9fa:	f7f6 fe53 	bl	66a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f9fe:	b108      	cbz	r0, fa04 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    fa00:	200c      	movs	r0, #12
    fa02:	bd10      	pop	{r4, pc}
    fa04:	7820      	ldrb	r0, [r4, #0]
    fa06:	f7ff ff95 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fa0a:	1de2      	adds	r2, r4, #7
    fa0c:	f104 0317 	add.w	r3, r4, #23
    fa10:	1c61      	adds	r1, r4, #1
    fa12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa16:	f7f6 be77 	b.w	6708 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000fa1a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fa1a:	b510      	push	{r4, lr}
    fa1c:	4604      	mov	r4, r0
    fa1e:	f000 fde6 	bl	105ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    fa22:	b108      	cbz	r0, fa28 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fa24:	200c      	movs	r0, #12
    fa26:	bd10      	pop	{r4, pc}
    fa28:	7820      	ldrb	r0, [r4, #0]
    fa2a:	b118      	cbz	r0, fa34 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fa2c:	2801      	cmp	r0, #1
    fa2e:	d001      	beq.n	fa34 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fa30:	2012      	movs	r0, #18
    fa32:	bd10      	pop	{r4, pc}
    fa34:	f7ff ff7e 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fa38:	1c61      	adds	r1, r4, #1
    fa3a:	f7f6 ff09 	bl	6850 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fa3e:	b108      	cbz	r0, fa44 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fa40:	2000      	movs	r0, #0
    fa42:	bd10      	pop	{r4, pc}
    fa44:	2007      	movs	r0, #7
    fa46:	bd10      	pop	{r4, pc}

0000fa48 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    fa48:	b510      	push	{r4, lr}
    fa4a:	f000 fccd 	bl	103e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    fa4e:	b120      	cbz	r0, fa5a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fa50:	f7f6 fe28 	bl	66a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fa54:	b108      	cbz	r0, fa5a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fa56:	200c      	movs	r0, #12
    fa58:	bd10      	pop	{r4, pc}
    fa5a:	f7f6 fe9b 	bl	6794 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    fa5e:	2000      	movs	r0, #0
    fa60:	bd10      	pop	{r4, pc}

0000fa62 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fa62:	b510      	push	{r4, lr}
    fa64:	f000 fdc3 	bl	105ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    fa68:	b108      	cbz	r0, fa6e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fa6a:	200c      	movs	r0, #12
    fa6c:	bd10      	pop	{r4, pc}
    fa6e:	f7f6 ff17 	bl	68a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    fa72:	2000      	movs	r0, #0
    fa74:	bd10      	pop	{r4, pc}

0000fa76 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    fa76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa78:	4605      	mov	r5, r0
    fa7a:	f000 fad2 	bl	10022 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    fa7e:	2800      	cmp	r0, #0
    fa80:	d112      	bne.n	faa8 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    fa82:	8828      	ldrh	r0, [r5, #0]
    fa84:	2100      	movs	r1, #0
    fa86:	f7fe fdda 	bl	e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fa8a:	0004      	movs	r4, r0
    fa8c:	d00d      	beq.n	faaa <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fa8e:	f000 fcfa 	bl	10486 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    fa92:	b150      	cbz	r0, faaa <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fa94:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    fa98:	f88d 0000 	strb.w	r0, [sp]
    fa9c:	9800      	ldr	r0, [sp, #0]
    fa9e:	9000      	str	r0, [sp, #0]
    faa0:	f89d 0000 	ldrb.w	r0, [sp]
    faa4:	b118      	cbz	r0, faae <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    faa6:	203a      	movs	r0, #58	; 0x3a
    faa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    faaa:	2002      	movs	r0, #2
    faac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    faae:	88a8      	ldrh	r0, [r5, #4]
    fab0:	f7fe ff4f 	bl	e952 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    fab4:	4606      	mov	r6, r0
    fab6:	4601      	mov	r1, r0
    fab8:	2008      	movs	r0, #8
    faba:	f7ff f8e5 	bl	ec88 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fabe:	4601      	mov	r1, r0
    fac0:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    fac4:	4281      	cmp	r1, r0
    fac6:	d301      	bcc.n	facc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    fac8:	42b0      	cmp	r0, r6
    faca:	d301      	bcc.n	fad0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    facc:	2012      	movs	r0, #18
    face:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fad0:	4631      	mov	r1, r6
    fad2:	2005      	movs	r0, #5
    fad4:	f7ff f8d8 	bl	ec88 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fad8:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    fadc:	2000      	movs	r0, #0
    fade:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    fae2:	88e8      	ldrh	r0, [r5, #6]
    fae4:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    fae8:	8928      	ldrh	r0, [r5, #8]
    faea:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    faee:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    faf2:	2001      	movs	r0, #1
    faf4:	7020      	strb	r0, [r4, #0]
    faf6:	2000      	movs	r0, #0
    faf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fafa <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fafa:	b510      	push	{r4, lr}
    fafc:	460b      	mov	r3, r1
    fafe:	2201      	movs	r2, #1
    fb00:	f100 0110 	add.w	r1, r0, #16
    fb04:	f7fe fec4 	bl	e890 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fb08:	2000      	movs	r0, #0
    fb0a:	bd10      	pop	{r4, pc}

0000fb0c <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fb0c:	b510      	push	{r4, lr}
    fb0e:	2108      	movs	r1, #8
    fb10:	f7f5 f9ac 	bl	4e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fb14:	2000      	movs	r0, #0
    fb16:	bd10      	pop	{r4, pc}

0000fb18 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fb18:	b510      	push	{r4, lr}
    fb1a:	4604      	mov	r4, r0
    fb1c:	f000 fcaa 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fb20:	b140      	cbz	r0, fb34 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    fb22:	20fb      	movs	r0, #251	; 0xfb
    fb24:	8020      	strh	r0, [r4, #0]
    fb26:	f640 0148 	movw	r1, #2120	; 0x848
    fb2a:	8061      	strh	r1, [r4, #2]
    fb2c:	80a0      	strh	r0, [r4, #4]
    fb2e:	80e1      	strh	r1, [r4, #6]
    fb30:	2000      	movs	r0, #0
    fb32:	bd10      	pop	{r4, pc}
    fb34:	2001      	movs	r0, #1
    fb36:	bd10      	pop	{r4, pc}

0000fb38 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    fb38:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    fb3a:	460d      	mov	r5, r1
    fb3c:	4606      	mov	r6, r0
    fb3e:	f7fc fa41 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fb42:	f3c0 2000 	ubfx	r0, r0, #8, #1
    fb46:	b300      	cbz	r0, fb8a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    fb48:	8830      	ldrh	r0, [r6, #0]
    fb4a:	4669      	mov	r1, sp
    fb4c:	f7fe fef5 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb50:	2800      	cmp	r0, #0
    fb52:	d119      	bne.n	fb88 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    fb54:	9c01      	ldr	r4, [sp, #4]
    fb56:	2700      	movs	r7, #0
    fb58:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    fb5c:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    fb60:	f000 fa94 	bl	1008c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    fb64:	70a8      	strb	r0, [r5, #2]
    fb66:	7860      	ldrb	r0, [r4, #1]
    fb68:	f000 fa90 	bl	1008c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    fb6c:	70e8      	strb	r0, [r5, #3]
    fb6e:	78a0      	ldrb	r0, [r4, #2]
    fb70:	f88d 0008 	strb.w	r0, [sp, #8]
    fb74:	9802      	ldr	r0, [sp, #8]
    fb76:	9002      	str	r0, [sp, #8]
    fb78:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fb7c:	3c6a      	subs	r4, #106	; 0x6a
    fb7e:	2800      	cmp	r0, #0
    fb80:	d1ea      	bne.n	fb58 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    fb82:	8830      	ldrh	r0, [r6, #0]
    fb84:	8028      	strh	r0, [r5, #0]
    fb86:	2000      	movs	r0, #0
    fb88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fb8a:	2001      	movs	r0, #1
    fb8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fb8e <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    fb8e:	2108      	movs	r1, #8
    fb90:	7001      	strb	r1, [r0, #0]
    fb92:	2000      	movs	r0, #0
    fb94:	4770      	bx	lr

0000fb96 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fb96:	b510      	push	{r4, lr}
    fb98:	4604      	mov	r4, r0
    fb9a:	20d8      	movs	r0, #216	; 0xd8
    fb9c:	7020      	strb	r0, [r4, #0]
    fb9e:	f000 fc4a 	bl	10436 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x414>
    fba2:	7060      	strb	r0, [r4, #1]
    fba4:	2000      	movs	r0, #0
    fba6:	bd10      	pop	{r4, pc}

0000fba8 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fba8:	2108      	movs	r1, #8
    fbaa:	7001      	strb	r1, [r0, #0]
    fbac:	2000      	movs	r0, #0
    fbae:	4770      	bx	lr

0000fbb0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    fbb0:	b510      	push	{r4, lr}
    fbb2:	4604      	mov	r4, r0
    fbb4:	7800      	ldrb	r0, [r0, #0]
    fbb6:	b108      	cbz	r0, fbbc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    fbb8:	2801      	cmp	r0, #1
    fbba:	d110      	bne.n	fbde <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fbbc:	f000 fc14 	bl	103e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    fbc0:	b120      	cbz	r0, fbcc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fbc2:	f7f6 fd6f 	bl	66a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fbc6:	b108      	cbz	r0, fbcc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fbc8:	200c      	movs	r0, #12
    fbca:	bd10      	pop	{r4, pc}
    fbcc:	7820      	ldrb	r0, [r4, #0]
    fbce:	f7ff feb1 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fbd2:	1c61      	adds	r1, r4, #1
    fbd4:	f7fe fe42 	bl	e85c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    fbd8:	b108      	cbz	r0, fbde <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fbda:	2000      	movs	r0, #0
    fbdc:	bd10      	pop	{r4, pc}
    fbde:	2012      	movs	r0, #18
    fbe0:	bd10      	pop	{r4, pc}

0000fbe2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fbe2:	b510      	push	{r4, lr}
    fbe4:	4604      	mov	r4, r0
    fbe6:	f000 fd02 	bl	105ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    fbea:	b108      	cbz	r0, fbf0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fbec:	200c      	movs	r0, #12
    fbee:	bd10      	pop	{r4, pc}
    fbf0:	7820      	ldrb	r0, [r4, #0]
    fbf2:	b108      	cbz	r0, fbf8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fbf4:	2801      	cmp	r0, #1
    fbf6:	d107      	bne.n	fc08 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fbf8:	f7ff fe9c 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fbfc:	1c61      	adds	r1, r4, #1
    fbfe:	f7fe fe3c 	bl	e87a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fc02:	b108      	cbz	r0, fc08 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fc04:	2000      	movs	r0, #0
    fc06:	bd10      	pop	{r4, pc}
    fc08:	2012      	movs	r0, #18
    fc0a:	bd10      	pop	{r4, pc}

0000fc0c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    fc0c:	b510      	push	{r4, lr}
    fc0e:	4604      	mov	r4, r0
    fc10:	f000 fbea 	bl	103e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    fc14:	b108      	cbz	r0, fc1a <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    fc16:	200c      	movs	r0, #12
    fc18:	bd10      	pop	{r4, pc}
    fc1a:	7820      	ldrb	r0, [r4, #0]
    fc1c:	f000 0001 	and.w	r0, r0, #1
    fc20:	f7f6 fd3a 	bl	6698 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    fc24:	2000      	movs	r0, #0
    fc26:	bd10      	pop	{r4, pc}

0000fc28 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fc28:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fc2a:	460d      	mov	r5, r1
    fc2c:	4604      	mov	r4, r0
    fc2e:	f000 fc21 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fc32:	b130      	cbz	r0, fc42 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fc34:	88a2      	ldrh	r2, [r4, #4]
    fc36:	f244 2090 	movw	r0, #17040	; 0x4290
    fc3a:	4282      	cmp	r2, r0
    fc3c:	d903      	bls.n	fc46 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    fc3e:	2012      	movs	r0, #18
    fc40:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc42:	2001      	movs	r0, #1
    fc44:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc46:	f640 0048 	movw	r0, #2120	; 0x848
    fc4a:	4282      	cmp	r2, r0
    fc4c:	d300      	bcc.n	fc50 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    fc4e:	4602      	mov	r2, r0
    fc50:	8820      	ldrh	r0, [r4, #0]
    fc52:	f8ad 0000 	strh.w	r0, [sp]
    fc56:	8860      	ldrh	r0, [r4, #2]
    fc58:	f8ad 0002 	strh.w	r0, [sp, #2]
    fc5c:	f8ad 2004 	strh.w	r2, [sp, #4]
    fc60:	8860      	ldrh	r0, [r4, #2]
    fc62:	f8ad 0006 	strh.w	r0, [sp, #6]
    fc66:	f8ad 2008 	strh.w	r2, [sp, #8]
    fc6a:	8820      	ldrh	r0, [r4, #0]
    fc6c:	8028      	strh	r0, [r5, #0]
    fc6e:	4668      	mov	r0, sp
    fc70:	f000 fc28 	bl	104c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    fc74:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fc76 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    fc76:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fc78:	4604      	mov	r4, r0
    fc7a:	f7fe fe2f 	bl	e8dc <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    fc7e:	b160      	cbz	r0, fc9a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
    fc80:	4620      	mov	r0, r4
    fc82:	f7f6 ffcf 	bl	6c24 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    fc86:	4669      	mov	r1, sp
    fc88:	2000      	movs	r0, #0
    fc8a:	f7fe fce1 	bl	e650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fc8e:	b150      	cbz	r0, fca6 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
    fc90:	f640 71f7 	movw	r1, #4087	; 0xff7
    fc94:	2039      	movs	r0, #57	; 0x39
    fc96:	f7f5 f83f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc9a:	2012      	movs	r0, #18
    fc9c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc9e:	9802      	ldr	r0, [sp, #8]
    fca0:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
    fca4:	e000      	b.n	fca8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
    fca6:	2401      	movs	r4, #1
    fca8:	4668      	mov	r0, sp
    fcaa:	f7f5 fa65 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fcae:	2800      	cmp	r0, #0
    fcb0:	d0f5      	beq.n	fc9e <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    fcb2:	2000      	movs	r0, #0
    fcb4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fcb6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fcb6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fcb8:	4604      	mov	r4, r0
    fcba:	f7fc f983 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fcbe:	f3c0 2000 	ubfx	r0, r0, #8, #1
    fcc2:	b1b0      	cbz	r0, fcf2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    fcc4:	f10d 0007 	add.w	r0, sp, #7
    fcc8:	9000      	str	r0, [sp, #0]
    fcca:	7922      	ldrb	r2, [r4, #4]
    fccc:	78e1      	ldrb	r1, [r4, #3]
    fcce:	78a0      	ldrb	r0, [r4, #2]
    fcd0:	f10d 0306 	add.w	r3, sp, #6
    fcd4:	f000 fc74 	bl	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    fcd8:	2800      	cmp	r0, #0
    fcda:	d109      	bne.n	fcf0 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    fcdc:	8820      	ldrh	r0, [r4, #0]
    fcde:	f8ad 0004 	strh.w	r0, [sp, #4]
    fce2:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fce6:	f8ad 0008 	strh.w	r0, [sp, #8]
    fcea:	a801      	add	r0, sp, #4
    fcec:	f000 f8f8 	bl	fee0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fcf0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fcf2:	2001      	movs	r0, #1
    fcf4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fcf6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    fcf6:	b510      	push	{r4, lr}
    fcf8:	4604      	mov	r4, r0
    fcfa:	f000 fb75 	bl	103e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    fcfe:	b120      	cbz	r0, fd0a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fd00:	f7f6 fcd0 	bl	66a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fd04:	b108      	cbz	r0, fd0a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fd06:	200c      	movs	r0, #12
    fd08:	bd10      	pop	{r4, pc}
    fd0a:	7820      	ldrb	r0, [r4, #0]
    fd0c:	f7ff fe12 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fd10:	79e2      	ldrb	r2, [r4, #7]
    fd12:	1c61      	adds	r1, r4, #1
    fd14:	f7f6 fc60 	bl	65d8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    fd18:	b108      	cbz	r0, fd1e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    fd1a:	2000      	movs	r0, #0
    fd1c:	bd10      	pop	{r4, pc}
    fd1e:	2002      	movs	r0, #2
    fd20:	bd10      	pop	{r4, pc}

0000fd22 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fd22:	b510      	push	{r4, lr}
    fd24:	4604      	mov	r4, r0
    fd26:	2001      	movs	r0, #1
    fd28:	f000 f9bb 	bl	100a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    fd2c:	b128      	cbz	r0, fd3a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fd2e:	4621      	mov	r1, r4
    fd30:	2001      	movs	r0, #1
    fd32:	f7f5 fe4f 	bl	59d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fd36:	2000      	movs	r0, #0
    fd38:	bd10      	pop	{r4, pc}
    fd3a:	200c      	movs	r0, #12
    fd3c:	bd10      	pop	{r4, pc}

0000fd3e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    fd3e:	b510      	push	{r4, lr}
    fd40:	8800      	ldrh	r0, [r0, #0]
    fd42:	f7f6 fd3d 	bl	67c0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    fd46:	b108      	cbz	r0, fd4c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    fd48:	2000      	movs	r0, #0
    fd4a:	bd10      	pop	{r4, pc}
    fd4c:	2030      	movs	r0, #48	; 0x30
    fd4e:	bd10      	pop	{r4, pc}

0000fd50 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    fd50:	b51c      	push	{r2, r3, r4, lr}
    fd52:	7801      	ldrb	r1, [r0, #0]
    fd54:	f88d 1000 	strb.w	r1, [sp]
    fd58:	7840      	ldrb	r0, [r0, #1]
    fd5a:	f88d 0001 	strb.w	r0, [sp, #1]
    fd5e:	2000      	movs	r0, #0
    fd60:	f8ad 0002 	strh.w	r0, [sp, #2]
    fd64:	f8ad 0004 	strh.w	r0, [sp, #4]
    fd68:	4601      	mov	r1, r0
    fd6a:	4668      	mov	r0, sp
    fd6c:	f000 f9e4 	bl	10138 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x116>
    fd70:	2800      	cmp	r0, #0
    fd72:	d102      	bne.n	fd7a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    fd74:	4668      	mov	r0, sp
    fd76:	f000 f9c3 	bl	10100 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xde>
    fd7a:	bd1c      	pop	{r2, r3, r4, pc}

0000fd7c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    fd7c:	b500      	push	{lr}
    fd7e:	b087      	sub	sp, #28
    fd80:	7941      	ldrb	r1, [r0, #5]
    fd82:	f88d 1000 	strb.w	r1, [sp]
    fd86:	7981      	ldrb	r1, [r0, #6]
    fd88:	f88d 1001 	strb.w	r1, [sp, #1]
    fd8c:	2101      	movs	r1, #1
    fd8e:	f88d 1002 	strb.w	r1, [sp, #2]
    fd92:	7801      	ldrb	r1, [r0, #0]
    fd94:	f88d 1003 	strb.w	r1, [sp, #3]
    fd98:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    fd9c:	f240 2271 	movw	r2, #625	; 0x271
    fda0:	4351      	muls	r1, r2
    fda2:	9102      	str	r1, [sp, #8]
    fda4:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    fda8:	4350      	muls	r0, r2
    fdaa:	9004      	str	r0, [sp, #16]
    fdac:	2007      	movs	r0, #7
    fdae:	f88d 0018 	strb.w	r0, [sp, #24]
    fdb2:	2000      	movs	r0, #0
    fdb4:	f88d 0019 	strb.w	r0, [sp, #25]
    fdb8:	9804      	ldr	r0, [sp, #16]
    fdba:	f7fc f809 	bl	bdd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    fdbe:	b140      	cbz	r0, fdd2 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fdc0:	9802      	ldr	r0, [sp, #8]
    fdc2:	f7fb fff9 	bl	bdb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    fdc6:	b120      	cbz	r0, fdd2 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fdc8:	4668      	mov	r0, sp
    fdca:	f7fb fe73 	bl	bab4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    fdce:	b007      	add	sp, #28
    fdd0:	bd00      	pop	{pc}
    fdd2:	2030      	movs	r0, #48	; 0x30
    fdd4:	e7fb      	b.n	fdce <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000fdd6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    fdd6:	b570      	push	{r4, r5, r6, lr}
    fdd8:	4605      	mov	r5, r0
    fdda:	8800      	ldrh	r0, [r0, #0]
    fddc:	2100      	movs	r1, #0
    fdde:	f7fe fc2e 	bl	e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fde2:	0004      	movs	r4, r0
    fde4:	d007      	beq.n	fdf6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    fde6:	f000 fb4e 	bl	10486 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    fdea:	b120      	cbz	r0, fdf6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    fdec:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    fdf0:	b118      	cbz	r0, fdfa <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    fdf2:	203a      	movs	r0, #58	; 0x3a
    fdf4:	bd70      	pop	{r4, r5, r6, pc}
    fdf6:	2002      	movs	r0, #2
    fdf8:	bd70      	pop	{r4, r5, r6, pc}
    fdfa:	2100      	movs	r1, #0
    fdfc:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    fe00:	f7ff fd8e 	bl	f920 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    fe04:	2801      	cmp	r0, #1
    fe06:	d001      	beq.n	fe0c <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    fe08:	201a      	movs	r0, #26
    fe0a:	bd70      	pop	{r4, r5, r6, pc}
    fe0c:	f8d5 1002 	ldr.w	r1, [r5, #2]
    fe10:	f8c4 115b 	str.w	r1, [r4, #347]	; 0x15b
    fe14:	f8d5 1006 	ldr.w	r1, [r5, #6]
    fe18:	f8c4 115f 	str.w	r1, [r4, #351]	; 0x15f
    fe1c:	8969      	ldrh	r1, [r5, #10]
    fe1e:	f8a4 1163 	strh.w	r1, [r4, #355]	; 0x163
    fe22:	2210      	movs	r2, #16
    fe24:	f105 010c 	add.w	r1, r5, #12
    fe28:	f204 1065 	addw	r0, r4, #357	; 0x165
    fe2c:	f7fd fb6a 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fe30:	2001      	movs	r0, #1
    fe32:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    fe36:	2000      	movs	r0, #0
    fe38:	bd70      	pop	{r4, r5, r6, pc}

0000fe3a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    fe3a:	b51c      	push	{r2, r3, r4, lr}
    fe3c:	4604      	mov	r4, r0
    fe3e:	f000 fb19 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fe42:	b178      	cbz	r0, fe64 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    fe44:	8820      	ldrh	r0, [r4, #0]
    fe46:	f8ad 0000 	strh.w	r0, [sp]
    fe4a:	8860      	ldrh	r0, [r4, #2]
    fe4c:	f8ad 0002 	strh.w	r0, [sp, #2]
    fe50:	8820      	ldrh	r0, [r4, #0]
    fe52:	f8ad 0004 	strh.w	r0, [sp, #4]
    fe56:	8860      	ldrh	r0, [r4, #2]
    fe58:	f8ad 0006 	strh.w	r0, [sp, #6]
    fe5c:	4668      	mov	r0, sp
    fe5e:	f7fb ffed 	bl	be3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>
    fe62:	bd1c      	pop	{r2, r3, r4, pc}
    fe64:	2001      	movs	r0, #1
    fe66:	bd1c      	pop	{r2, r3, r4, pc}

0000fe68 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fe68:	b510      	push	{r4, lr}
    fe6a:	f7f5 fdd7 	bl	5a1c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fe6e:	2000      	movs	r0, #0
    fe70:	bd10      	pop	{r4, pc}

0000fe72 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fe72:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fe74:	460c      	mov	r4, r1
    fe76:	4605      	mov	r5, r0
    fe78:	f000 fafc 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fe7c:	b160      	cbz	r0, fe98 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    fe7e:	4669      	mov	r1, sp
    fe80:	4628      	mov	r0, r5
    fe82:	f7fe fd5a 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fe86:	2800      	cmp	r0, #0
    fe88:	d105      	bne.n	fe96 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    fe8a:	2101      	movs	r1, #1
    fe8c:	4622      	mov	r2, r4
    fe8e:	9801      	ldr	r0, [sp, #4]
    fe90:	f000 fa74 	bl	1037c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    fe94:	2000      	movs	r0, #0
    fe96:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fe98:	2001      	movs	r0, #1
    fe9a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fe9c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fe9c:	b510      	push	{r4, lr}
    fe9e:	4604      	mov	r4, r0
    fea0:	2000      	movs	r0, #0
    fea2:	f000 f8fe 	bl	100a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    fea6:	b128      	cbz	r0, feb4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    fea8:	4621      	mov	r1, r4
    feaa:	2000      	movs	r0, #0
    feac:	f7f5 fd92 	bl	59d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    feb0:	2000      	movs	r0, #0
    feb2:	bd10      	pop	{r4, pc}
    feb4:	200c      	movs	r0, #12
    feb6:	bd10      	pop	{r4, pc}

0000feb8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    feb8:	b510      	push	{r4, lr}
    feba:	7800      	ldrb	r0, [r0, #0]
    febc:	f000 0001 	and.w	r0, r0, #1
    fec0:	f7f8 fd12 	bl	88e8 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>
    fec4:	2000      	movs	r0, #0
    fec6:	bd10      	pop	{r4, pc}

0000fec8 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fec8:	b510      	push	{r4, lr}
    feca:	4604      	mov	r4, r0
    fecc:	f000 fad2 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fed0:	b120      	cbz	r0, fedc <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    fed2:	4620      	mov	r0, r4
    fed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fed8:	f000 baf4 	b.w	104c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    fedc:	2001      	movs	r0, #1
    fede:	bd10      	pop	{r4, pc}

0000fee0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fee0:	b510      	push	{r4, lr}
    fee2:	4604      	mov	r4, r0
    fee4:	8880      	ldrh	r0, [r0, #4]
    fee6:	b128      	cbz	r0, fef4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fee8:	2801      	cmp	r0, #1
    feea:	d003      	beq.n	fef4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    feec:	2802      	cmp	r0, #2
    feee:	d001      	beq.n	fef4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fef0:	2012      	movs	r0, #18
    fef2:	bd10      	pop	{r4, pc}
    fef4:	78e0      	ldrb	r0, [r4, #3]
    fef6:	f000 f8e0 	bl	100ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    fefa:	b148      	cbz	r0, ff10 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fefc:	78a0      	ldrb	r0, [r4, #2]
    fefe:	f000 f8dc 	bl	100ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    ff02:	b128      	cbz	r0, ff10 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ff04:	4620      	mov	r0, r4
    ff06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff0a:	2101      	movs	r1, #1
    ff0c:	f7fb be28 	b.w	bb60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    ff10:	2011      	movs	r0, #17
    ff12:	bd10      	pop	{r4, pc}

0000ff14 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    ff14:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ff16:	460c      	mov	r4, r1
    ff18:	4605      	mov	r5, r0
    ff1a:	8800      	ldrh	r0, [r0, #0]
    ff1c:	4669      	mov	r1, sp
    ff1e:	f7fe fd0c 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff22:	2800      	cmp	r0, #0
    ff24:	d106      	bne.n	ff34 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    ff26:	9801      	ldr	r0, [sp, #4]
    ff28:	8829      	ldrh	r1, [r5, #0]
    ff2a:	8021      	strh	r1, [r4, #0]
    ff2c:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
    ff30:	8060      	strh	r0, [r4, #2]
    ff32:	2000      	movs	r0, #0
    ff34:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ff36 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    ff36:	b510      	push	{r4, lr}
    ff38:	4604      	mov	r4, r0
    ff3a:	4601      	mov	r1, r0
    ff3c:	2000      	movs	r0, #0
    ff3e:	f7f5 fd31 	bl	59a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ff42:	b910      	cbnz	r0, ff4a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    ff44:	2000      	movs	r0, #0
    ff46:	6020      	str	r0, [r4, #0]
    ff48:	80a0      	strh	r0, [r4, #4]
    ff4a:	2000      	movs	r0, #0
    ff4c:	bd10      	pop	{r4, pc}

0000ff4e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    ff4e:	b51c      	push	{r2, r3, r4, lr}
    ff50:	8800      	ldrh	r0, [r0, #0]
    ff52:	4669      	mov	r1, sp
    ff54:	f7fe fcf1 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff58:	b968      	cbnz	r0, ff76 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ff5a:	4668      	mov	r0, sp
    ff5c:	f000 fa90 	bl	10480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    ff60:	b148      	cbz	r0, ff76 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ff62:	9801      	ldr	r0, [sp, #4]
    ff64:	2201      	movs	r2, #1
    ff66:	4601      	mov	r1, r0
    ff68:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
    ff6c:	3078      	adds	r0, #120	; 0x78
    ff6e:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    ff72:	b92b      	cbnz	r3, ff80 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    ff74:	e001      	b.n	ff7a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    ff76:	2002      	movs	r0, #2
    ff78:	bd1c      	pop	{r2, r3, r4, pc}
    ff7a:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
    ff7e:	b10b      	cbz	r3, ff84 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x36>
    ff80:	203a      	movs	r0, #58	; 0x3a
    ff82:	bd1c      	pop	{r2, r3, r4, pc}
    ff84:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    ff88:	079b      	lsls	r3, r3, #30
    ff8a:	d100      	bne.n	ff8e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x40>
    ff8c:	700a      	strb	r2, [r1, #0]
    ff8e:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
    ff92:	2000      	movs	r0, #0
    ff94:	bd1c      	pop	{r2, r3, r4, pc}

0000ff96 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    ff96:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ff98:	460c      	mov	r4, r1
    ff9a:	4605      	mov	r5, r0
    ff9c:	8800      	ldrh	r0, [r0, #0]
    ff9e:	4669      	mov	r1, sp
    ffa0:	f7fe fccb 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ffa4:	b108      	cbz	r0, ffaa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    ffa6:	2002      	movs	r0, #2
    ffa8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ffaa:	78a8      	ldrb	r0, [r5, #2]
    ffac:	b130      	cbz	r0, ffbc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    ffae:	f000 fa42 	bl	10436 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x414>
    ffb2:	70a0      	strb	r0, [r4, #2]
    ffb4:	8828      	ldrh	r0, [r5, #0]
    ffb6:	8020      	strh	r0, [r4, #0]
    ffb8:	2000      	movs	r0, #0
    ffba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ffbc:	9801      	ldr	r0, [sp, #4]
    ffbe:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    ffc2:	e7f6      	b.n	ffb2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000ffc4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    ffc4:	b510      	push	{r4, lr}
    ffc6:	f7fb ff75 	bl	beb4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    ffca:	2000      	movs	r0, #0
    ffcc:	bd10      	pop	{r4, pc}

0000ffce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    ffce:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ffd2:	4604      	mov	r4, r0
    ffd4:	8840      	ldrh	r0, [r0, #2]
    ffd6:	460d      	mov	r5, r1
    ffd8:	b1b8      	cbz	r0, 1000a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    ffda:	8820      	ldrh	r0, [r4, #0]
    ffdc:	4669      	mov	r1, sp
    ffde:	f7fe fcac 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ffe2:	2800      	cmp	r0, #0
    ffe4:	d10f      	bne.n	10006 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    ffe6:	8820      	ldrh	r0, [r4, #0]
    ffe8:	8028      	strh	r0, [r5, #0]
    ffea:	9e01      	ldr	r6, [sp, #4]
    ffec:	f106 050c 	add.w	r5, r6, #12
    fff0:	3678      	adds	r6, #120	; 0x78
    fff2:	682f      	ldr	r7, [r5, #0]
    fff4:	8862      	ldrh	r2, [r4, #2]
    fff6:	4639      	mov	r1, r7
    fff8:	4630      	mov	r0, r6
    fffa:	f7fe fe2e 	bl	ec5a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fffe:	6828      	ldr	r0, [r5, #0]
   10000:	42b8      	cmp	r0, r7
   10002:	d1f6      	bne.n	fff2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10004:	2000      	movs	r0, #0
   10006:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1000a:	2012      	movs	r0, #18
   1000c:	e7fb      	b.n	10006 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0001000e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   1000e:	f7fb be0d 	b.w	bc2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010012 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10012:	b510      	push	{r4, lr}
   10014:	2008      	movs	r0, #8
   10016:	f7fb ffcb 	bl	bfb0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   1001a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1001e:	f7f9 bd63 	b.w	9ae8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

00010022 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   10022:	b510      	push	{r4, lr}
   10024:	4604      	mov	r4, r0
   10026:	2000      	movs	r0, #0
   10028:	8822      	ldrh	r2, [r4, #0]
   1002a:	b086      	sub	sp, #24
   1002c:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   10030:	39ff      	subs	r1, #255	; 0xff
   10032:	d008      	beq.n	10046 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   10034:	a903      	add	r1, sp, #12
   10036:	4610      	mov	r0, r2
   10038:	f7fe fc7f 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1003c:	b110      	cbz	r0, 10044 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   1003e:	2002      	movs	r0, #2
   10040:	b006      	add	sp, #24
   10042:	bd10      	pop	{r4, pc}
   10044:	9804      	ldr	r0, [sp, #16]
   10046:	8921      	ldrh	r1, [r4, #8]
   10048:	89a3      	ldrh	r3, [r4, #12]
   1004a:	8962      	ldrh	r2, [r4, #10]
   1004c:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   10050:	88e3      	ldrh	r3, [r4, #6]
   10052:	88a2      	ldrh	r2, [r4, #4]
   10054:	8861      	ldrh	r1, [r4, #2]
   10056:	f000 f966 	bl	10326 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
   1005a:	b108      	cbz	r0, 10060 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   1005c:	2000      	movs	r0, #0
   1005e:	e7ef      	b.n	10040 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   10060:	2030      	movs	r0, #48	; 0x30
   10062:	e7ed      	b.n	10040 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   10064:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10068:	4288      	cmp	r0, r1
   1006a:	d303      	bcc.n	10074 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
   1006c:	f640 0148 	movw	r1, #2120	; 0x848
   10070:	4288      	cmp	r0, r1
   10072:	d300      	bcc.n	10076 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
   10074:	4608      	mov	r0, r1
   10076:	4770      	bx	lr
   10078:	07c1      	lsls	r1, r0, #31
   1007a:	d001      	beq.n	10080 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
   1007c:	2001      	movs	r0, #1
   1007e:	4770      	bx	lr
   10080:	0780      	lsls	r0, r0, #30
   10082:	d501      	bpl.n	10088 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
   10084:	2002      	movs	r0, #2
   10086:	4770      	bx	lr
   10088:	2000      	movs	r0, #0
   1008a:	4770      	bx	lr
   1008c:	b510      	push	{r4, lr}
   1008e:	2801      	cmp	r0, #1
   10090:	d006      	beq.n	100a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   10092:	2802      	cmp	r0, #2
   10094:	d004      	beq.n	100a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   10096:	f240 2163 	movw	r1, #611	; 0x263
   1009a:	2006      	movs	r0, #6
   1009c:	f7f4 fe3c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100a0:	bd10      	pop	{r4, pc}
   100a2:	b510      	push	{r4, lr}
   100a4:	f000 fa03 	bl	104ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   100a8:	b128      	cbz	r0, 100b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
   100aa:	f7f7 fba7 	bl	77fc <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   100ae:	2801      	cmp	r0, #1
   100b0:	d001      	beq.n	100b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
   100b2:	2000      	movs	r0, #0
   100b4:	bd10      	pop	{r4, pc}
   100b6:	2001      	movs	r0, #1
   100b8:	bd10      	pop	{r4, pc}
   100ba:	b510      	push	{r4, lr}
   100bc:	0004      	movs	r4, r0
   100be:	d005      	beq.n	100cc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
   100c0:	f7fb ff86 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   100c4:	4384      	bics	r4, r0
   100c6:	d001      	beq.n	100cc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
   100c8:	2000      	movs	r0, #0
   100ca:	bd10      	pop	{r4, pc}
   100cc:	2001      	movs	r0, #1
   100ce:	bd10      	pop	{r4, pc}
   100d0:	28fb      	cmp	r0, #251	; 0xfb
   100d2:	d803      	bhi.n	100dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xba>
   100d4:	f640 0048 	movw	r0, #2120	; 0x848
   100d8:	4281      	cmp	r1, r0
   100da:	d901      	bls.n	100e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
   100dc:	2011      	movs	r0, #17
   100de:	4770      	bx	lr
   100e0:	2000      	movs	r0, #0
   100e2:	4770      	bx	lr
   100e4:	381b      	subs	r0, #27
   100e6:	28e1      	cmp	r0, #225	; 0xe1
   100e8:	d206      	bcs.n	100f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
   100ea:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   100ee:	d303      	bcc.n	100f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
   100f0:	f244 2090 	movw	r0, #17040	; 0x4290
   100f4:	4281      	cmp	r1, r0
   100f6:	d901      	bls.n	100fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xda>
   100f8:	2012      	movs	r0, #18
   100fa:	4770      	bx	lr
   100fc:	2000      	movs	r0, #0
   100fe:	4770      	bx	lr
   10100:	b510      	push	{r4, lr}
   10102:	4604      	mov	r4, r0
   10104:	7800      	ldrb	r0, [r0, #0]
   10106:	2801      	cmp	r0, #1
   10108:	d009      	beq.n	1011e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfc>
   1010a:	f7f8 fc85 	bl	8a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
   1010e:	2805      	cmp	r0, #5
   10110:	d003      	beq.n	1011a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf8>
   10112:	f7f8 fc4b 	bl	89ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
   10116:	2800      	cmp	r0, #0
   10118:	d000      	beq.n	1011c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
   1011a:	200c      	movs	r0, #12
   1011c:	bd10      	pop	{r4, pc}
   1011e:	f7f7 fafb 	bl	7718 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
   10122:	b138      	cbz	r0, 10134 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x112>
   10124:	f7f7 f974 	bl	7410 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   10128:	88a1      	ldrh	r1, [r4, #4]
   1012a:	8860      	ldrh	r0, [r4, #2]
   1012c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10130:	f7f8 bc00 	b.w	8934 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA>
   10134:	2012      	movs	r0, #18
   10136:	bd10      	pop	{r4, pc}
   10138:	7802      	ldrb	r2, [r0, #0]
   1013a:	2a01      	cmp	r2, #1
   1013c:	d001      	beq.n	10142 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
   1013e:	b1ba      	cbz	r2, 10170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   10140:	e018      	b.n	10174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   10142:	7842      	ldrb	r2, [r0, #1]
   10144:	b13a      	cbz	r2, 10156 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   10146:	2a01      	cmp	r2, #1
   10148:	d005      	beq.n	10156 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   1014a:	2a02      	cmp	r2, #2
   1014c:	d112      	bne.n	10174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   1014e:	b189      	cbz	r1, 10174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   10150:	8881      	ldrh	r1, [r0, #4]
   10152:	b179      	cbz	r1, 10174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   10154:	e000      	b.n	10158 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
   10156:	b159      	cbz	r1, 10170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   10158:	8841      	ldrh	r1, [r0, #2]
   1015a:	b149      	cbz	r1, 10170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   1015c:	8880      	ldrh	r0, [r0, #4]
   1015e:	b138      	cbz	r0, 10170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   10160:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   10164:	0049      	lsls	r1, r1, #1
   10166:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1016a:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
   1016e:	d201      	bcs.n	10174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   10170:	2000      	movs	r0, #0
   10172:	4770      	bx	lr
   10174:	2012      	movs	r0, #18
   10176:	4770      	bx	lr
   10178:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   1017c:	7a45      	ldrb	r5, [r0, #9]
   1017e:	4604      	mov	r4, r0
   10180:	0768      	lsls	r0, r5, #29
   10182:	d06c      	beq.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10184:	08e8      	lsrs	r0, r5, #3
   10186:	d16a      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10188:	2d02      	cmp	r5, #2
   1018a:	d068      	beq.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1018c:	f7fb ff20 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10190:	ea25 0000 	bic.w	r0, r5, r0
   10194:	0740      	lsls	r0, r0, #29
   10196:	d102      	bne.n	1019e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17c>
   10198:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   1019c:	b110      	cbz	r0, 101a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x182>
   1019e:	2011      	movs	r0, #17
   101a0:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   101a4:	2d01      	cmp	r5, #1
   101a6:	d15a      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   101a8:	27ff      	movs	r7, #255	; 0xff
   101aa:	2101      	movs	r1, #1
   101ac:	69a0      	ldr	r0, [r4, #24]
   101ae:	f7fb fe2f 	bl	be10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
   101b2:	b3e8      	cbz	r0, 10230 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
   101b4:	46a8      	mov	r8, r5
   101b6:	2600      	movs	r6, #0
   101b8:	4635      	mov	r5, r6
   101ba:	42bd      	cmp	r5, r7
   101bc:	d02f      	beq.n	1021e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
   101be:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   101c2:	6988      	ldr	r0, [r1, #24]
   101c4:	68c9      	ldr	r1, [r1, #12]
   101c6:	4288      	cmp	r0, r1
   101c8:	d849      	bhi.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   101ca:	4406      	add	r6, r0
   101cc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
   101d0:	4681      	mov	r9, r0
   101d2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   101d4:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   101d8:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   101da:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   101de:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   101e0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   101e2:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   101e4:	2000      	movs	r0, #0
   101e6:	f000 f89e 	bl	10326 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
   101ea:	b308      	cbz	r0, 10230 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
   101ec:	b1bd      	cbz	r5, 1021e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
   101ee:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
   101f2:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
   101f6:	4281      	cmp	r1, r0
   101f8:	d131      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   101fa:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
   101fe:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
   10202:	4281      	cmp	r1, r0
   10204:	d12b      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10206:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
   1020a:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
   1020e:	4281      	cmp	r1, r0
   10210:	d125      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10212:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
   10216:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
   1021a:	4281      	cmp	r1, r0
   1021c:	d11f      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1021e:	1c6d      	adds	r5, r5, #1
   10220:	b2ed      	uxtb	r5, r5
   10222:	4545      	cmp	r5, r8
   10224:	d3c9      	bcc.n	101ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x198>
   10226:	68e0      	ldr	r0, [r4, #12]
   10228:	42b0      	cmp	r0, r6
   1022a:	d318      	bcc.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1022c:	7820      	ldrb	r0, [r4, #0]
   1022e:	e000      	b.n	10232 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   10230:	e003      	b.n	1023a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
   10232:	b120      	cbz	r0, 1023e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21c>
   10234:	2801      	cmp	r0, #1
   10236:	d112      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10238:	e004      	b.n	10244 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   1023a:	2030      	movs	r0, #48	; 0x30
   1023c:	e7b0      	b.n	101a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   1023e:	78a0      	ldrb	r0, [r4, #2]
   10240:	2800      	cmp	r0, #0
   10242:	d1f7      	bne.n	10234 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x212>
   10244:	7860      	ldrb	r0, [r4, #1]
   10246:	b128      	cbz	r0, 10254 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   10248:	2801      	cmp	r0, #1
   1024a:	d003      	beq.n	10254 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   1024c:	2802      	cmp	r0, #2
   1024e:	d001      	beq.n	10254 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   10250:	2803      	cmp	r0, #3
   10252:	d104      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10254:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   10258:	b108      	cbz	r0, 1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1025a:	2807      	cmp	r0, #7
   1025c:	d901      	bls.n	10262 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
   1025e:	2012      	movs	r0, #18
   10260:	e79e      	b.n	101a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   10262:	2000      	movs	r0, #0
   10264:	e79c      	b.n	101a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   10266:	b570      	push	{r4, r5, r6, lr}
   10268:	4604      	mov	r4, r0
   1026a:	7800      	ldrb	r0, [r0, #0]
   1026c:	2500      	movs	r5, #0
   1026e:	2801      	cmp	r0, #1
   10270:	d004      	beq.n	1027c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   10272:	b118      	cbz	r0, 1027c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   10274:	2802      	cmp	r0, #2
   10276:	d001      	beq.n	1027c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   10278:	2803      	cmp	r0, #3
   1027a:	d139      	bne.n	102f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   1027c:	7860      	ldrb	r0, [r4, #1]
   1027e:	b128      	cbz	r0, 1028c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   10280:	2801      	cmp	r0, #1
   10282:	d003      	beq.n	1028c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   10284:	2802      	cmp	r0, #2
   10286:	d001      	beq.n	1028c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   10288:	2803      	cmp	r0, #3
   1028a:	d131      	bne.n	102f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   1028c:	7e60      	ldrb	r0, [r4, #25]
   1028e:	b948      	cbnz	r0, 102a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
   10290:	78a0      	ldrb	r0, [r4, #2]
   10292:	2801      	cmp	r0, #1
   10294:	d12c      	bne.n	102f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   10296:	f7fb fe9b 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1029a:	4601      	mov	r1, r0
   1029c:	78a0      	ldrb	r0, [r4, #2]
   1029e:	ea30 0101 	bics.w	r1, r0, r1
   102a2:	d001      	beq.n	102a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
   102a4:	2011      	movs	r0, #17
   102a6:	bd70      	pop	{r4, r5, r6, pc}
   102a8:	07c0      	lsls	r0, r0, #31
   102aa:	d006      	beq.n	102ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
   102ac:	78e0      	ldrb	r0, [r4, #3]
   102ae:	2301      	movs	r3, #1
   102b0:	6922      	ldr	r2, [r4, #16]
   102b2:	68a1      	ldr	r1, [r4, #8]
   102b4:	f000 f820 	bl	102f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   102b8:	4605      	mov	r5, r0
   102ba:	78a0      	ldrb	r0, [r4, #2]
   102bc:	0780      	lsls	r0, r0, #30
   102be:	d506      	bpl.n	102ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
   102c0:	78e0      	ldrb	r0, [r4, #3]
   102c2:	2302      	movs	r3, #2
   102c4:	6922      	ldr	r2, [r4, #16]
   102c6:	68a1      	ldr	r1, [r4, #8]
   102c8:	f000 f816 	bl	102f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   102cc:	4305      	orrs	r5, r0
   102ce:	78a0      	ldrb	r0, [r4, #2]
   102d0:	0740      	lsls	r0, r0, #29
   102d2:	d506      	bpl.n	102e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c0>
   102d4:	78e0      	ldrb	r0, [r4, #3]
   102d6:	2304      	movs	r3, #4
   102d8:	6922      	ldr	r2, [r4, #16]
   102da:	68a1      	ldr	r1, [r4, #8]
   102dc:	f000 f80c 	bl	102f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   102e0:	4305      	orrs	r5, r0
   102e2:	b10d      	cbz	r5, 102e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
   102e4:	4628      	mov	r0, r5
   102e6:	bd70      	pop	{r4, r5, r6, pc}
   102e8:	7e20      	ldrb	r0, [r4, #24]
   102ea:	b108      	cbz	r0, 102f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   102ec:	2807      	cmp	r0, #7
   102ee:	d901      	bls.n	102f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
   102f0:	2012      	movs	r0, #18
   102f2:	bd70      	pop	{r4, r5, r6, pc}
   102f4:	2000      	movs	r0, #0
   102f6:	bd70      	pop	{r4, r5, r6, pc}
   102f8:	b570      	push	{r4, r5, r6, lr}
   102fa:	4614      	mov	r4, r2
   102fc:	460d      	mov	r5, r1
   102fe:	b108      	cbz	r0, 10304 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e2>
   10300:	2801      	cmp	r0, #1
   10302:	d10a      	bne.n	1031a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f8>
   10304:	4619      	mov	r1, r3
   10306:	4610      	mov	r0, r2
   10308:	f7fb fd82 	bl	be10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
   1030c:	b138      	cbz	r0, 1031e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
   1030e:	4628      	mov	r0, r5
   10310:	f7fb fd46 	bl	bda0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
   10314:	b118      	cbz	r0, 1031e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
   10316:	42ac      	cmp	r4, r5
   10318:	d903      	bls.n	10322 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
   1031a:	2012      	movs	r0, #18
   1031c:	bd70      	pop	{r4, r5, r6, pc}
   1031e:	2030      	movs	r0, #48	; 0x30
   10320:	bd70      	pop	{r4, r5, r6, pc}
   10322:	2000      	movs	r0, #0
   10324:	bd70      	pop	{r4, r5, r6, pc}
   10326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1032a:	461d      	mov	r5, r3
   1032c:	4610      	mov	r0, r2
   1032e:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
   10332:	1f8b      	subs	r3, r1, #6
   10334:	f640 427a 	movw	r2, #3194	; 0xc7a
   10338:	9e08      	ldr	r6, [sp, #32]
   1033a:	4293      	cmp	r3, r2
   1033c:	d81c      	bhi.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1033e:	1f83      	subs	r3, r0, #6
   10340:	4293      	cmp	r3, r2
   10342:	d819      	bhi.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   10344:	4281      	cmp	r1, r0
   10346:	d817      	bhi.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   10348:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   1034c:	d214      	bcs.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1034e:	f1a4 010a 	sub.w	r1, r4, #10
   10352:	1f12      	subs	r2, r2, #4
   10354:	4291      	cmp	r1, r2
   10356:	d80f      	bhi.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   10358:	f7fe fafb 	bl	e952 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   1035c:	1c6d      	adds	r5, r5, #1
   1035e:	4368      	muls	r0, r5
   10360:	f240 2171 	movw	r1, #625	; 0x271
   10364:	0040      	lsls	r0, r0, #1
   10366:	434c      	muls	r4, r1
   10368:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
   1036c:	d204      	bcs.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1036e:	42b7      	cmp	r7, r6
   10370:	d802      	bhi.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   10372:	2001      	movs	r0, #1
   10374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10378:	2000      	movs	r0, #0
   1037a:	e7fb      	b.n	10374 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x352>
   1037c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10380:	4606      	mov	r6, r0
   10382:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   10386:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   1038a:	4615      	mov	r5, r2
   1038c:	302c      	adds	r0, #44	; 0x2c
   1038e:	f7f8 fab1 	bl	88f4 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>
   10392:	4680      	mov	r8, r0
   10394:	2102      	movs	r1, #2
   10396:	f7fe fb6a 	bl	ea6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1039a:	4287      	cmp	r7, r0
   1039c:	d200      	bcs.n	103a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
   1039e:	4638      	mov	r0, r7
   103a0:	4607      	mov	r7, r0
   103a2:	2102      	movs	r1, #2
   103a4:	4640      	mov	r0, r8
   103a6:	f7fe fb62 	bl	ea6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   103aa:	4284      	cmp	r4, r0
   103ac:	d200      	bcs.n	103b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
   103ae:	4620      	mov	r0, r4
   103b0:	8831      	ldrh	r1, [r6, #0]
   103b2:	8029      	strh	r1, [r5, #0]
   103b4:	2f1b      	cmp	r7, #27
   103b6:	d913      	bls.n	103e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
   103b8:	2ffb      	cmp	r7, #251	; 0xfb
   103ba:	d300      	bcc.n	103be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
   103bc:	27fb      	movs	r7, #251	; 0xfb
   103be:	806f      	strh	r7, [r5, #2]
   103c0:	281b      	cmp	r0, #27
   103c2:	d90f      	bls.n	103e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
   103c4:	28fb      	cmp	r0, #251	; 0xfb
   103c6:	d300      	bcc.n	103ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   103c8:	20fb      	movs	r0, #251	; 0xfb
   103ca:	80e8      	strh	r0, [r5, #6]
   103cc:	4640      	mov	r0, r8
   103ce:	f7ff fe49 	bl	10064 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   103d2:	80a8      	strh	r0, [r5, #4]
   103d4:	4640      	mov	r0, r8
   103d6:	f7ff fe45 	bl	10064 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   103da:	8128      	strh	r0, [r5, #8]
   103dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   103e0:	271b      	movs	r7, #27
   103e2:	e7ec      	b.n	103be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
   103e4:	201b      	movs	r0, #27
   103e6:	e7f0      	b.n	103ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   103e8:	b510      	push	{r4, lr}
   103ea:	f000 f860 	bl	104ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   103ee:	2800      	cmp	r0, #0
   103f0:	d000      	beq.n	103f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d2>
   103f2:	2001      	movs	r0, #1
   103f4:	bd10      	pop	{r4, pc}
   103f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103fa:	7890      	ldrb	r0, [r2, #2]
   103fc:	9e06      	ldr	r6, [sp, #24]
   103fe:	461d      	mov	r5, r3
   10400:	4614      	mov	r4, r2
   10402:	b908      	cbnz	r0, 10408 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e6>
   10404:	f7fb fde4 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10408:	78e4      	ldrb	r4, [r4, #3]
   1040a:	4607      	mov	r7, r0
   1040c:	b914      	cbnz	r4, 10414 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3f2>
   1040e:	f7fb fddf 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10412:	4604      	mov	r4, r0
   10414:	b16f      	cbz	r7, 10432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
   10416:	b164      	cbz	r4, 10432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
   10418:	4638      	mov	r0, r7
   1041a:	f7ff fe2d 	bl	10078 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   1041e:	4620      	mov	r0, r4
   10420:	f7ff fe2a 	bl	10078 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   10424:	b12f      	cbz	r7, 10432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
   10426:	b124      	cbz	r4, 10432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
   10428:	702f      	strb	r7, [r5, #0]
   1042a:	7034      	strb	r4, [r6, #0]
   1042c:	2000      	movs	r0, #0
   1042e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10432:	2009      	movs	r0, #9
   10434:	e7fb      	b.n	1042e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x40c>
   10436:	b510      	push	{r4, lr}
   10438:	f7fd f808 	bl	d44c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   1043c:	b928      	cbnz	r0, 1044a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x428>
   1043e:	f7fd f83b 	bl	d4b8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   10442:	b910      	cbnz	r0, 1044a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x428>
   10444:	f7fd f842 	bl	d4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   10448:	b108      	cbz	r0, 1044e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42c>
   1044a:	2008      	movs	r0, #8
   1044c:	bd10      	pop	{r4, pc}
   1044e:	f7fc ffd2 	bl	d3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   10452:	b940      	cbnz	r0, 10466 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   10454:	f7fc ffd9 	bl	d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10458:	b928      	cbnz	r0, 10466 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   1045a:	f7fc ffed 	bl	d438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1045e:	b910      	cbnz	r0, 10466 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   10460:	f7fc fffe 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10464:	b108      	cbz	r0, 1046a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x448>
   10466:	2004      	movs	r0, #4
   10468:	bd10      	pop	{r4, pc}
   1046a:	f44f 61b1 	mov.w	r1, #1416	; 0x588
   1046e:	2039      	movs	r0, #57	; 0x39
   10470:	f7f4 fc52 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10474:	b510      	push	{r4, lr}
   10476:	f7fb fda5 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1047a:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1047e:	bd10      	pop	{r4, pc}
   10480:	6840      	ldr	r0, [r0, #4]
   10482:	f000 b800 	b.w	10486 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
   10486:	b508      	push	{r3, lr}
   10488:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   1048c:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
   10490:	f88d 0000 	strb.w	r0, [sp]
   10494:	9800      	ldr	r0, [sp, #0]
   10496:	9000      	str	r0, [sp, #0]
   10498:	f89d 0000 	ldrb.w	r0, [sp]
   1049c:	1e40      	subs	r0, r0, #1
   1049e:	4208      	tst	r0, r1
   104a0:	d003      	beq.n	104aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
   104a2:	2904      	cmp	r1, #4
   104a4:	d001      	beq.n	104aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
   104a6:	2001      	movs	r0, #1
   104a8:	bd08      	pop	{r3, pc}
   104aa:	2000      	movs	r0, #0
   104ac:	bd08      	pop	{r3, pc}
   104ae:	b510      	push	{r4, lr}
   104b0:	f7f8 fab2 	bl	8a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
   104b4:	2804      	cmp	r0, #4
   104b6:	d003      	beq.n	104c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
   104b8:	2805      	cmp	r0, #5
   104ba:	d001      	beq.n	104c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
   104bc:	2000      	movs	r0, #0
   104be:	bd10      	pop	{r4, pc}
   104c0:	2001      	movs	r0, #1
   104c2:	bd10      	pop	{r4, pc}
   104c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   104c6:	b089      	sub	sp, #36	; 0x24
   104c8:	4604      	mov	r4, r0
   104ca:	8800      	ldrh	r0, [r0, #0]
   104cc:	a906      	add	r1, sp, #24
   104ce:	f7fe fa34 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   104d2:	2800      	cmp	r0, #0
   104d4:	d143      	bne.n	1055e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   104d6:	9807      	ldr	r0, [sp, #28]
   104d8:	2601      	movs	r6, #1
   104da:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
   104de:	f88d 1008 	strb.w	r1, [sp, #8]
   104e2:	9902      	ldr	r1, [sp, #8]
   104e4:	9102      	str	r1, [sp, #8]
   104e6:	f89d 1008 	ldrb.w	r1, [sp, #8]
   104ea:	f88d 100c 	strb.w	r1, [sp, #12]
   104ee:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   104f2:	3078      	adds	r0, #120	; 0x78
   104f4:	291d      	cmp	r1, #29
   104f6:	d102      	bne.n	104fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
   104f8:	f89d 100c 	ldrb.w	r1, [sp, #12]
   104fc:	b141      	cbz	r1, 10510 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ee>
   104fe:	2100      	movs	r1, #0
   10500:	f88d 1004 	strb.w	r1, [sp, #4]
   10504:	2105      	movs	r1, #5
   10506:	304e      	adds	r0, #78	; 0x4e
   10508:	f7ff fa0a 	bl	f920 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
   1050c:	b110      	cbz	r0, 10514 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f2>
   1050e:	e004      	b.n	1051a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f8>
   10510:	2101      	movs	r1, #1
   10512:	e7f5      	b.n	10500 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   10514:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10518:	b300      	cbz	r0, 1055c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53a>
   1051a:	8921      	ldrh	r1, [r4, #8]
   1051c:	88e0      	ldrh	r0, [r4, #6]
   1051e:	f7ff fde1 	bl	100e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   10522:	2800      	cmp	r0, #0
   10524:	d11b      	bne.n	1055e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   10526:	88a1      	ldrh	r1, [r4, #4]
   10528:	8860      	ldrh	r0, [r4, #2]
   1052a:	f7ff fddb 	bl	100e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   1052e:	2800      	cmp	r0, #0
   10530:	d115      	bne.n	1055e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   10532:	8921      	ldrh	r1, [r4, #8]
   10534:	88e0      	ldrh	r0, [r4, #6]
   10536:	f7ff fdcb 	bl	100d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
   1053a:	2800      	cmp	r0, #0
   1053c:	d10f      	bne.n	1055e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   1053e:	88a1      	ldrh	r1, [r4, #4]
   10540:	8860      	ldrh	r0, [r4, #2]
   10542:	f7ff fdc5 	bl	100d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
   10546:	0007      	movs	r7, r0
   10548:	d109      	bne.n	1055e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   1054a:	9807      	ldr	r0, [sp, #28]
   1054c:	f500 7599 	add.w	r5, r0, #306	; 0x132
   10550:	706e      	strb	r6, [r5, #1]
   10552:	f89d 100c 	ldrb.w	r1, [sp, #12]
   10556:	b121      	cbz	r1, 10562 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x540>
   10558:	273a      	movs	r7, #58	; 0x3a
   1055a:	e02d      	b.n	105b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
   1055c:	201a      	movs	r0, #26
   1055e:	b009      	add	sp, #36	; 0x24
   10560:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10562:	4631      	mov	r1, r6
   10564:	aa03      	add	r2, sp, #12
   10566:	f7ff ff09 	bl	1037c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
   1056a:	8861      	ldrh	r1, [r4, #2]
   1056c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   10570:	4281      	cmp	r1, r0
   10572:	d200      	bcs.n	10576 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x554>
   10574:	4608      	mov	r0, r1
   10576:	80e8      	strh	r0, [r5, #6]
   10578:	88a1      	ldrh	r1, [r4, #4]
   1057a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1057e:	4281      	cmp	r1, r0
   10580:	d200      	bcs.n	10584 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
   10582:	4608      	mov	r0, r1
   10584:	8128      	strh	r0, [r5, #8]
   10586:	88e2      	ldrh	r2, [r4, #6]
   10588:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1058c:	428a      	cmp	r2, r1
   1058e:	d200      	bcs.n	10592 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
   10590:	4611      	mov	r1, r2
   10592:	8069      	strh	r1, [r5, #2]
   10594:	8922      	ldrh	r2, [r4, #8]
   10596:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1059a:	428a      	cmp	r2, r1
   1059c:	d200      	bcs.n	105a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x57e>
   1059e:	4611      	mov	r1, r2
   105a0:	f640 0248 	movw	r2, #2120	; 0x848
   105a4:	80a9      	strh	r1, [r5, #4]
   105a6:	4291      	cmp	r1, r2
   105a8:	d300      	bcc.n	105ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x58a>
   105aa:	4611      	mov	r1, r2
   105ac:	80a9      	strh	r1, [r5, #4]
   105ae:	4290      	cmp	r0, r2
   105b0:	d200      	bcs.n	105b4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
   105b2:	4602      	mov	r2, r0
   105b4:	812a      	strh	r2, [r5, #8]
   105b6:	702e      	strb	r6, [r5, #0]
   105b8:	2000      	movs	r0, #0
   105ba:	7068      	strb	r0, [r5, #1]
   105bc:	4638      	mov	r0, r7
   105be:	e7ce      	b.n	1055e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   105c0:	b530      	push	{r4, r5, lr}
   105c2:	f340 0400 	sbfx	r4, r0, #0, #1
   105c6:	f340 0040 	sbfx	r0, r0, #1, #1
   105ca:	1c40      	adds	r0, r0, #1
   105cc:	9d03      	ldr	r5, [sp, #12]
   105ce:	1c64      	adds	r4, r4, #1
   105d0:	d000      	beq.n	105d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b2>
   105d2:	b119      	cbz	r1, 105dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
   105d4:	b100      	cbz	r0, 105d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b6>
   105d6:	b10a      	cbz	r2, 105dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
   105d8:	b91c      	cbnz	r4, 105e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c0>
   105da:	e001      	b.n	105e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5be>
   105dc:	2011      	movs	r0, #17
   105de:	bd30      	pop	{r4, r5, pc}
   105e0:	2100      	movs	r1, #0
   105e2:	7019      	strb	r1, [r3, #0]
   105e4:	b900      	cbnz	r0, 105e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c6>
   105e6:	2200      	movs	r2, #0
   105e8:	702a      	strb	r2, [r5, #0]
   105ea:	2000      	movs	r0, #0
   105ec:	bd30      	pop	{r4, r5, pc}
   105ee:	b510      	push	{r4, lr}
   105f0:	f7ff ff5d 	bl	104ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   105f4:	b120      	cbz	r0, 10600 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
   105f6:	f7f7 f909 	bl	780c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   105fa:	b108      	cbz	r0, 10600 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
   105fc:	2001      	movs	r0, #1
   105fe:	bd10      	pop	{r4, pc}
   10600:	2000      	movs	r0, #0
   10602:	bd10      	pop	{r4, pc}

00010604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   10604:	6802      	ldr	r2, [r0, #0]
   10606:	b912      	cbnz	r2, 1060e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   10608:	6001      	str	r1, [r0, #0]
   1060a:	4770      	bx	lr
   1060c:	4602      	mov	r2, r0
   1060e:	6850      	ldr	r0, [r2, #4]
   10610:	b108      	cbz	r0, 10616 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   10612:	428a      	cmp	r2, r1
   10614:	d1fa      	bne.n	1060c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   10616:	428a      	cmp	r2, r1
   10618:	d0f7      	beq.n	1060a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   1061a:	6051      	str	r1, [r2, #4]
   1061c:	4770      	bx	lr
   1061e:	b510      	push	{r4, lr}
   10620:	4604      	mov	r4, r0
   10622:	e002      	b.n	1062a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
   10624:	6820      	ldr	r0, [r4, #0]
   10626:	4780      	blx	r0
   10628:	6864      	ldr	r4, [r4, #4]
   1062a:	2c00      	cmp	r4, #0
   1062c:	d1fa      	bne.n	10624 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
   1062e:	bd10      	pop	{r4, pc}
   10630:	b510      	push	{r4, lr}
   10632:	2000      	movs	r0, #0
   10634:	f7f4 fd38 	bl	50a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10638:	f7f4 ff58 	bl	54ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1063c:	f7f5 f994 	bl	5968 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10640:	f7f5 fb86 	bl	5d50 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10644:	2800      	cmp	r0, #0
   10646:	d003      	beq.n	10650 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
   10648:	21d0      	movs	r1, #208	; 0xd0
   1064a:	2001      	movs	r0, #1
   1064c:	f7f4 fb64 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10650:	bd10      	pop	{r4, pc}
   10652:	b510      	push	{r4, lr}
   10654:	f000 f80a 	bl	1066c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
   10658:	f7ff f84b 	bl	f6f2 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   1065c:	2800      	cmp	r0, #0
   1065e:	d004      	beq.n	1066a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
   10660:	f240 1155 	movw	r1, #341	; 0x155
   10664:	2001      	movs	r0, #1
   10666:	f7f4 fb57 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1066a:	bd10      	pop	{r4, pc}
   1066c:	b510      	push	{r4, lr}
   1066e:	f7f8 f955 	bl	891c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>
   10672:	b120      	cbz	r0, 1067e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7a>
   10674:	f240 113b 	movw	r1, #315	; 0x13b
   10678:	2001      	movs	r0, #1
   1067a:	f7f4 fb4d 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1067e:	f7f7 f815 	bl	76ac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   10682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10686:	f7fa bf6b 	b.w	b560 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   1068a:	0001      	.short	0x0001
   1068c:	0002000b 	.word	0x0002000b
   10690:	0005000a 	.word	0x0005000a
   10694:	000a0009 	.word	0x000a0009
   10698:	00140008 	.word	0x00140008
   1069c:	001e0007 	.word	0x001e0007
   106a0:	00320006 	.word	0x00320006
   106a4:	004b0005 	.word	0x004b0005
   106a8:	00640004 	.word	0x00640004
   106ac:	00960003 	.word	0x00960003
   106b0:	00fa0002 	.word	0x00fa0002
   106b4:	01f40001 	.word	0x01f40001
	...

000106ba <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   106ba:	b510      	push	{r4, lr}
   106bc:	f7fc f83c 	bl	c738 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   106c0:	f000 f850 	bl	10764 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   106c4:	f7fb fcf8 	bl	c0b8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   106c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   106cc:	f7fb bdf6 	b.w	c2bc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000106d0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   106d0:	b510      	push	{r4, lr}
   106d2:	24c8      	movs	r4, #200	; 0xc8
   106d4:	1e64      	subs	r4, r4, #1
   106d6:	b2e4      	uxtb	r4, r4
   106d8:	f7fb fd0c 	bl	c0f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   106dc:	2802      	cmp	r0, #2
   106de:	d003      	beq.n	106e8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   106e0:	2801      	cmp	r0, #1
   106e2:	d000      	beq.n	106e6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   106e4:	2000      	movs	r0, #0
   106e6:	bd10      	pop	{r4, pc}
   106e8:	2c00      	cmp	r4, #0
   106ea:	d1f3      	bne.n	106d4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   106ec:	2193      	movs	r1, #147	; 0x93
   106ee:	203b      	movs	r0, #59	; 0x3b
   106f0:	f7f4 fb12 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000106f4 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   106f4:	b510      	push	{r4, lr}
   106f6:	f7f4 f9a9 	bl	4a4c <mpsl_fem_lna_configuration_clear>
   106fa:	2800      	cmp	r0, #0
   106fc:	d005      	beq.n	1070a <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   106fe:	1c40      	adds	r0, r0, #1
   10700:	d003      	beq.n	1070a <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   10702:	2150      	movs	r1, #80	; 0x50
   10704:	2040      	movs	r0, #64	; 0x40
   10706:	f7f4 fb07 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1070a:	bd10      	pop	{r4, pc}

0001070c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   1070c:	b510      	push	{r4, lr}
   1070e:	f7f4 f9a9 	bl	4a64 <mpsl_fem_pa_configuration_clear>
   10712:	2800      	cmp	r0, #0
   10714:	d005      	beq.n	10722 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   10716:	1c40      	adds	r0, r0, #1
   10718:	d003      	beq.n	10722 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   1071a:	2149      	movs	r1, #73	; 0x49
   1071c:	2040      	movs	r0, #64	; 0x40
   1071e:	f7f4 fafb 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10722:	bd10      	pop	{r4, pc}

00010724 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   10724:	b510      	push	{r4, lr}
   10726:	f7f4 f98b 	bl	4a40 <mpsl_fem_disable>
   1072a:	2800      	cmp	r0, #0
   1072c:	d005      	beq.n	1073a <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   1072e:	1c40      	adds	r0, r0, #1
   10730:	d003      	beq.n	1073a <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   10732:	2157      	movs	r1, #87	; 0x57
   10734:	2040      	movs	r0, #64	; 0x40
   10736:	f7f4 faef 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1073a:	bd10      	pop	{r4, pc}

0001073c <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   1073c:	b510      	push	{r4, lr}
   1073e:	2100      	movs	r1, #0
   10740:	4608      	mov	r0, r1
   10742:	f7f4 f989 	bl	4a58 <mpsl_fem_lna_configuration_set>
   10746:	b108      	cbz	r0, 1074c <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
   10748:	2000      	movs	r0, #0
   1074a:	bd10      	pop	{r4, pc}
   1074c:	2001      	movs	r0, #1
   1074e:	bd10      	pop	{r4, pc}

00010750 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   10750:	b508      	push	{r3, lr}
   10752:	4668      	mov	r0, sp
   10754:	f7f4 f992 	bl	4a7c <mpsl_fem_pa_is_configured>
   10758:	f89d 0000 	ldrb.w	r0, [sp]
   1075c:	2800      	cmp	r0, #0
   1075e:	d000      	beq.n	10762 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
   10760:	2001      	movs	r0, #1
   10762:	bd08      	pop	{r3, pc}

00010764 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10764:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10768:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1076c:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10770:	f3bf 8f4f 	dsb	sy
   10774:	f3bf 8f6f 	isb	sy
   10778:	f7fb be7a 	b.w	c470 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   1077c:	2800      	cmp	r0, #0
   1077e:	db09      	blt.n	10794 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10780:	f000 021f 	and.w	r2, r0, #31
   10784:	2101      	movs	r1, #1
   10786:	4091      	lsls	r1, r2
   10788:	0940      	lsrs	r0, r0, #5
   1078a:	0080      	lsls	r0, r0, #2
   1078c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10790:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10794:	4770      	bx	lr
   10796:	2800      	cmp	r0, #0
   10798:	db0d      	blt.n	107b6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   1079a:	f000 021f 	and.w	r2, r0, #31
   1079e:	2101      	movs	r1, #1
   107a0:	4091      	lsls	r1, r2
   107a2:	0940      	lsrs	r0, r0, #5
   107a4:	0080      	lsls	r0, r0, #2
   107a6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   107aa:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   107ae:	f3bf 8f4f 	dsb	sy
   107b2:	f3bf 8f6f 	isb	sy
   107b6:	4770      	bx	lr

000107b8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   107b8:	b510      	push	{r4, lr}
   107ba:	2801      	cmp	r0, #1
   107bc:	d006      	beq.n	107cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
   107be:	2802      	cmp	r0, #2
   107c0:	d006      	beq.n	107d0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
   107c2:	f640 3164 	movw	r1, #2916	; 0xb64
   107c6:	203e      	movs	r0, #62	; 0x3e
   107c8:	f7f4 faa6 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107cc:	2028      	movs	r0, #40	; 0x28
   107ce:	bd10      	pop	{r4, pc}
   107d0:	2018      	movs	r0, #24
   107d2:	bd10      	pop	{r4, pc}

000107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   107d4:	b510      	push	{r4, lr}
   107d6:	2801      	cmp	r0, #1
   107d8:	d006      	beq.n	107e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
   107da:	2802      	cmp	r0, #2
   107dc:	d007      	beq.n	107ee <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
   107de:	f640 3178 	movw	r1, #2936	; 0xb78
   107e2:	203e      	movs	r0, #62	; 0x3e
   107e4:	f7f4 fa98 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107e8:	f641 6014 	movw	r0, #7700	; 0x1e14
   107ec:	bd10      	pop	{r4, pc}
   107ee:	f241 1030 	movw	r0, #4400	; 0x1130
   107f2:	bd10      	pop	{r4, pc}

000107f4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
   107f4:	f7fc bcc2 	b.w	d17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
   107f8:	b510      	push	{r4, lr}
   107fa:	460a      	mov	r2, r1
   107fc:	b130      	cbz	r0, 1080c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
   107fe:	2801      	cmp	r0, #1
   10800:	d00b      	beq.n	1081a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
   10802:	f240 6127 	movw	r1, #1575	; 0x627
   10806:	203e      	movs	r0, #62	; 0x3e
   10808:	f7f4 fa86 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1080c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10810:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10814:	4610      	mov	r0, r2
   10816:	f7fb bcc1 	b.w	c19c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
   1081a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1081e:	f102 0129 	add.w	r1, r2, #41	; 0x29
   10822:	4610      	mov	r0, r2
   10824:	f7fb bca4 	b.w	c170 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

00010828 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   10828:	b570      	push	{r4, r5, r6, lr}
   1082a:	4605      	mov	r5, r0
   1082c:	4614      	mov	r4, r2
   1082e:	4608      	mov	r0, r1
   10830:	f7ff ffd0 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10834:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   10838:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   1083c:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   10840:	4620      	mov	r0, r4
   10842:	f7ff ffc7 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10846:	4428      	add	r0, r5
   10848:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1084c:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   10850:	fbb0 f5f1 	udiv	r5, r0, r1
   10854:	4620      	mov	r0, r4
   10856:	f7ff ffaf 	bl	107b8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1085a:	4428      	add	r0, r5
   1085c:	1d40      	adds	r0, r0, #5
   1085e:	bd70      	pop	{r4, r5, r6, pc}

00010860 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   10860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10864:	4607      	mov	r7, r0
   10866:	461d      	mov	r5, r3
   10868:	460e      	mov	r6, r1
   1086a:	4614      	mov	r4, r2
   1086c:	4610      	mov	r0, r2
   1086e:	f7ff ffb1 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10872:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   10876:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   1087a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1087e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   10882:	2e02      	cmp	r6, #2
   10884:	d00e      	beq.n	108a4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   10886:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1088a:	4411      	add	r1, r2
   1088c:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   10890:	fbb1 f6f0 	udiv	r6, r1, r0
   10894:	4620      	mov	r0, r4
   10896:	f7ff ff8f 	bl	107b8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1089a:	4430      	add	r0, r6
   1089c:	4428      	add	r0, r5
   1089e:	1d40      	adds	r0, r0, #5
   108a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   108a4:	4602      	mov	r2, r0
   108a6:	e7f0      	b.n	1088a <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

000108a8 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   108a8:	b510      	push	{r4, lr}
   108aa:	4604      	mov	r4, r0
   108ac:	4608      	mov	r0, r1
   108ae:	f7ff ff91 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   108b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   108b6:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   108ba:	fbb0 f0f1 	udiv	r0, r0, r1
   108be:	1a20      	subs	r0, r4, r0
   108c0:	1e80      	subs	r0, r0, #2
   108c2:	bd10      	pop	{r4, pc}

000108c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   108c4:	b510      	push	{r4, lr}
   108c6:	4604      	mov	r4, r0
   108c8:	4608      	mov	r0, r1
   108ca:	f7ff ff83 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   108ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   108d2:	fbb0 f0f1 	udiv	r0, r0, r1
   108d6:	1a20      	subs	r0, r4, r0
   108d8:	bd10      	pop	{r4, pc}

000108da <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   108da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   108de:	2902      	cmp	r1, #2
   108e0:	d008      	beq.n	108f4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   108e2:	f240 51dc 	movw	r1, #1500	; 0x5dc
   108e6:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   108ea:	fbb1 f1f2 	udiv	r1, r1, r2
   108ee:	4408      	add	r0, r1
   108f0:	1e80      	subs	r0, r0, #2
   108f2:	4770      	bx	lr
   108f4:	4611      	mov	r1, r2
   108f6:	e7f6      	b.n	108e6 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

000108f8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   108f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   108fc:	2902      	cmp	r1, #2
   108fe:	d007      	beq.n	10910 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   10900:	f240 51dc 	movw	r1, #1500	; 0x5dc
   10904:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   10908:	fbb1 f1f2 	udiv	r1, r1, r2
   1090c:	4408      	add	r0, r1
   1090e:	4770      	bx	lr
   10910:	4611      	mov	r1, r2
   10912:	e7f7      	b.n	10904 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   10914:	1702080c 	.word	0x1702080c
   10918:	0201010d 	.word	0x0201010d
   1091c:	01010909 	.word	0x01010909
   10920:	18090206 	.word	0x18090206
   10924:	01010318 	.word	0x01010318
   10928:	03030909 	.word	0x03030909
   1092c:	05          	.byte	0x05
   1092d:	55          	.byte	0x55
   1092e:	5555      	.short	0x5555
   10930:	2625      	.short	0x2625
   10932:	27          	.byte	0x27
   10933:	01          	.byte	0x01
   10934:	0103      	.short	0x0103
   10936:	01          	.byte	0x01
   10937:	01          	.byte	0x01

00010938 <scan_connecting_error>:
	printk("Filters matched. Address: %s connectable: %s\n",
		addr, connectable ? "yes" : "no");
}

static void scan_connecting_error(struct bt_scan_device_info *device_info)
{
   10938:	b508      	push	{r3, lr}
	printk("Connecting failed\n");
   1093a:	4802      	ldr	r0, [pc, #8]	; (10944 <scan_connecting_error+0xc>)
   1093c:	f010 fbe0 	bl	21100 <printk>
}
   10940:	bd08      	pop	{r3, pc}
   10942:	bf00      	nop
   10944:	000283a8 	.word	0x000283a8

00010948 <mtu_exchange_cb>:
BT_SCAN_CB_INIT(scan_cb, scan_filter_match, scan_filter_no_match,
		scan_connecting_error, scan_connecting);

static void mtu_exchange_cb(struct bt_conn *conn, uint8_t err,
			    struct bt_gatt_exchange_params *params)
{
   10948:	b570      	push	{r4, r5, r6, lr}
   1094a:	4605      	mov	r5, r0
   1094c:	460e      	mov	r6, r1
	printk("MTU exchange %u %s (%u)\n", bt_conn_index(conn),
   1094e:	f005 fd0d 	bl	1636c <bt_conn_index>
   10952:	4604      	mov	r4, r0
   10954:	b956      	cbnz	r6, 1096c <mtu_exchange_cb+0x24>
   10956:	4e06      	ldr	r6, [pc, #24]	; (10970 <mtu_exchange_cb+0x28>)
	       err == 0U ? "successful" : "failed", bt_gatt_get_mtu(conn));
   10958:	4628      	mov	r0, r5
   1095a:	f014 feff 	bl	2575c <bt_gatt_get_mtu>
   1095e:	4603      	mov	r3, r0
	printk("MTU exchange %u %s (%u)\n", bt_conn_index(conn),
   10960:	4632      	mov	r2, r6
   10962:	4621      	mov	r1, r4
   10964:	4803      	ldr	r0, [pc, #12]	; (10974 <mtu_exchange_cb+0x2c>)
   10966:	f010 fbcb 	bl	21100 <printk>
}
   1096a:	bd70      	pop	{r4, r5, r6, pc}
	printk("MTU exchange %u %s (%u)\n", bt_conn_index(conn),
   1096c:	4e02      	ldr	r6, [pc, #8]	; (10978 <mtu_exchange_cb+0x30>)
   1096e:	e7f3      	b.n	10958 <mtu_exchange_cb+0x10>
   10970:	000283c4 	.word	0x000283c4
   10974:	000283d0 	.word	0x000283d0
   10978:	000283bc 	.word	0x000283bc

0001097c <mtu_exchange>:

static struct bt_gatt_exchange_params mtu_exchange_params[CONFIG_BT_MAX_CONN];

static int mtu_exchange(struct bt_conn *conn)
{
   1097c:	b538      	push	{r3, r4, r5, lr}
   1097e:	4605      	mov	r5, r0
	uint8_t conn_index;
	int err;

	conn_index = bt_conn_index(conn);
   10980:	f005 fcf4 	bl	1636c <bt_conn_index>
   10984:	4604      	mov	r4, r0

	printk("MTU (%u): %u\n", conn_index, bt_gatt_get_mtu(conn));
   10986:	4628      	mov	r0, r5
   10988:	f014 fee8 	bl	2575c <bt_gatt_get_mtu>
   1098c:	4602      	mov	r2, r0
   1098e:	4621      	mov	r1, r4
   10990:	480b      	ldr	r0, [pc, #44]	; (109c0 <mtu_exchange+0x44>)
   10992:	f010 fbb5 	bl	21100 <printk>

	mtu_exchange_params[conn_index].func = mtu_exchange_cb;
   10996:	490b      	ldr	r1, [pc, #44]	; (109c4 <mtu_exchange+0x48>)
   10998:	4b0b      	ldr	r3, [pc, #44]	; (109c8 <mtu_exchange+0x4c>)
   1099a:	f841 3024 	str.w	r3, [r1, r4, lsl #2]

	err = bt_gatt_exchange_mtu(conn, &mtu_exchange_params[conn_index]);
   1099e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   109a2:	4628      	mov	r0, r5
   109a4:	f007 fa10 	bl	17dc8 <bt_gatt_exchange_mtu>
	if (err) {
   109a8:	4604      	mov	r4, r0
   109aa:	b128      	cbz	r0, 109b8 <mtu_exchange+0x3c>
		printk("MTU exchange failed (err %d)", err);
   109ac:	4601      	mov	r1, r0
   109ae:	4807      	ldr	r0, [pc, #28]	; (109cc <mtu_exchange+0x50>)
   109b0:	f010 fba6 	bl	21100 <printk>
	} else {
		printk("Exchange pending...");
	}

	return err;
}
   109b4:	4620      	mov	r0, r4
   109b6:	bd38      	pop	{r3, r4, r5, pc}
		printk("Exchange pending...");
   109b8:	4805      	ldr	r0, [pc, #20]	; (109d0 <mtu_exchange+0x54>)
   109ba:	f010 fba1 	bl	21100 <printk>
	return err;
   109be:	e7f9      	b.n	109b4 <mtu_exchange+0x38>
   109c0:	000283ec 	.word	0x000283ec
   109c4:	200029cc 	.word	0x200029cc
   109c8:	00010949 	.word	0x00010949
   109cc:	000283fc 	.word	0x000283fc
   109d0:	0002841c 	.word	0x0002841c

000109d4 <scan_init>:
	.connected = connected,
	.disconnected = disconnected,
};

static void scan_init(void)
{
   109d4:	b500      	push	{lr}
   109d6:	b087      	sub	sp, #28
	int err;

	struct bt_scan_init_param scan_init = {
   109d8:	2300      	movs	r3, #0
   109da:	9301      	str	r3, [sp, #4]
   109dc:	2301      	movs	r3, #1
   109de:	f88d 3008 	strb.w	r3, [sp, #8]
		.connect_if_match = 1,
		.scan_param = NULL,
		.conn_param = BT_LE_CONN_PARAM_DEFAULT
   109e2:	4a12      	ldr	r2, [pc, #72]	; (10a2c <scan_init+0x58>)
   109e4:	ab04      	add	r3, sp, #16
   109e6:	e892 0003 	ldmia.w	r2, {r0, r1}
   109ea:	e883 0003 	stmia.w	r3, {r0, r1}
	struct bt_scan_init_param scan_init = {
   109ee:	9303      	str	r3, [sp, #12]
	};

	bt_scan_init(&scan_init);
   109f0:	a801      	add	r0, sp, #4
   109f2:	f002 fc95 	bl	13320 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
   109f6:	480e      	ldr	r0, [pc, #56]	; (10a30 <scan_init+0x5c>)
   109f8:	f002 fb96 	bl	13128 <bt_scan_cb_register>

	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, ttpms_uuids);
   109fc:	490d      	ldr	r1, [pc, #52]	; (10a34 <scan_init+0x60>)
   109fe:	2003      	movs	r0, #3
   10a00:	f002 fba4 	bl	1314c <bt_scan_filter_add>
	if (err) {
   10a04:	b940      	cbnz	r0, 10a18 <scan_init+0x44>
		printk("Scanning filters cannot be set (err %d)\n", err);

		return;
	}

	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
   10a06:	2100      	movs	r1, #0
   10a08:	2004      	movs	r0, #4
   10a0a:	f002 fbe9 	bl	131e0 <bt_scan_filter_enable>
	if (err) {
   10a0e:	4601      	mov	r1, r0
   10a10:	b938      	cbnz	r0, 10a22 <scan_init+0x4e>
		printk("Filters cannot be turned on (err %d)\n", err);
	}
}
   10a12:	b007      	add	sp, #28
   10a14:	f85d fb04 	ldr.w	pc, [sp], #4
   10a18:	4601      	mov	r1, r0
		printk("Scanning filters cannot be set (err %d)\n", err);
   10a1a:	4807      	ldr	r0, [pc, #28]	; (10a38 <scan_init+0x64>)
   10a1c:	f010 fb70 	bl	21100 <printk>
		return;
   10a20:	e7f7      	b.n	10a12 <scan_init+0x3e>
		printk("Filters cannot be turned on (err %d)\n", err);
   10a22:	4806      	ldr	r0, [pc, #24]	; (10a3c <scan_init+0x68>)
   10a24:	f010 fb6c 	bl	21100 <printk>
   10a28:	e7f3      	b.n	10a12 <scan_init+0x3e>
   10a2a:	bf00      	nop
   10a2c:	00028310 	.word	0x00028310
   10a30:	20000408 	.word	0x20000408
   10a34:	20000410 	.word	0x20000410
   10a38:	00028430 	.word	0x00028430
   10a3c:	0002845c 	.word	0x0002845c

00010a40 <scan_connecting>:
{
   10a40:	b508      	push	{r3, lr}
	default_conn = bt_conn_ref(conn);
   10a42:	4608      	mov	r0, r1
   10a44:	f012 fea5 	bl	23792 <bt_conn_ref>
   10a48:	4b01      	ldr	r3, [pc, #4]	; (10a50 <scan_connecting+0x10>)
   10a4a:	6018      	str	r0, [r3, #0]
}
   10a4c:	bd08      	pop	{r3, pc}
   10a4e:	bf00      	nop
   10a50:	200029c8 	.word	0x200029c8

00010a54 <scan_filter_no_match>:
	if (device_info->recv_info->adv_type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
   10a54:	6803      	ldr	r3, [r0, #0]
   10a56:	79da      	ldrb	r2, [r3, #7]
   10a58:	2a01      	cmp	r2, #1
   10a5a:	d000      	beq.n	10a5e <scan_filter_no_match+0xa>
   10a5c:	4770      	bx	lr
{
   10a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a60:	b097      	sub	sp, #92	; 0x5c
   10a62:	4604      	mov	r4, r0
		bt_addr_le_to_str(device_info->recv_info->addr, addr,
   10a64:	681d      	ldr	r5, [r3, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   10a66:	782b      	ldrb	r3, [r5, #0]
   10a68:	2b03      	cmp	r3, #3
   10a6a:	d83e      	bhi.n	10aea <scan_filter_no_match+0x96>
   10a6c:	e8df f003 	tbb	[pc, r3]
   10a70:	38332e02 	.word	0x38332e02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10a74:	4924      	ldr	r1, [pc, #144]	; (10b08 <scan_filter_no_match+0xb4>)
   10a76:	a806      	add	r0, sp, #24
   10a78:	f011 ff6d 	bl	22956 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   10a7c:	79ab      	ldrb	r3, [r5, #6]
   10a7e:	796a      	ldrb	r2, [r5, #5]
   10a80:	7929      	ldrb	r1, [r5, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10a82:	78e8      	ldrb	r0, [r5, #3]
   10a84:	78ae      	ldrb	r6, [r5, #2]
   10a86:	786d      	ldrb	r5, [r5, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10a88:	af06      	add	r7, sp, #24
   10a8a:	9705      	str	r7, [sp, #20]
   10a8c:	9504      	str	r5, [sp, #16]
   10a8e:	9603      	str	r6, [sp, #12]
   10a90:	9002      	str	r0, [sp, #8]
   10a92:	9101      	str	r1, [sp, #4]
   10a94:	9200      	str	r2, [sp, #0]
   10a96:	4a1d      	ldr	r2, [pc, #116]	; (10b0c <scan_filter_no_match+0xb8>)
   10a98:	211e      	movs	r1, #30
   10a9a:	a809      	add	r0, sp, #36	; 0x24
   10a9c:	f010 fb3e 	bl	2111c <snprintk>
		printk("Direct advertising received from %s\n", addr);
   10aa0:	a909      	add	r1, sp, #36	; 0x24
   10aa2:	481b      	ldr	r0, [pc, #108]	; (10b10 <scan_filter_no_match+0xbc>)
   10aa4:	f010 fb2c 	bl	21100 <printk>
		bt_scan_stop();
   10aa8:	f011 fd53 	bl	22552 <bt_scan_stop>
		err = bt_conn_le_create(device_info->recv_info->addr,
   10aac:	6823      	ldr	r3, [r4, #0]
   10aae:	681e      	ldr	r6, [r3, #0]
					BT_CONN_LE_CREATE_CONN,
   10ab0:	ad12      	add	r5, sp, #72	; 0x48
   10ab2:	4b18      	ldr	r3, [pc, #96]	; (10b14 <scan_filter_no_match+0xc0>)
   10ab4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   10ab6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		err = bt_conn_le_create(device_info->recv_info->addr,
   10aba:	ab11      	add	r3, sp, #68	; 0x44
   10abc:	6862      	ldr	r2, [r4, #4]
   10abe:	4629      	mov	r1, r5
   10ac0:	4630      	mov	r0, r6
   10ac2:	f005 fd5b 	bl	1657c <bt_conn_le_create>
		if (!err) {
   10ac6:	b1b0      	cbz	r0, 10af6 <scan_filter_no_match+0xa2>
}
   10ac8:	b017      	add	sp, #92	; 0x5c
   10aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   10acc:	4912      	ldr	r1, [pc, #72]	; (10b18 <scan_filter_no_match+0xc4>)
   10ace:	a806      	add	r0, sp, #24
   10ad0:	f011 ff41 	bl	22956 <strcpy>
		break;
   10ad4:	e7d2      	b.n	10a7c <scan_filter_no_match+0x28>
		strcpy(type, "public-id");
   10ad6:	4911      	ldr	r1, [pc, #68]	; (10b1c <scan_filter_no_match+0xc8>)
   10ad8:	a806      	add	r0, sp, #24
   10ada:	f011 ff3c 	bl	22956 <strcpy>
		break;
   10ade:	e7cd      	b.n	10a7c <scan_filter_no_match+0x28>
		strcpy(type, "random-id");
   10ae0:	490f      	ldr	r1, [pc, #60]	; (10b20 <scan_filter_no_match+0xcc>)
   10ae2:	a806      	add	r0, sp, #24
   10ae4:	f011 ff37 	bl	22956 <strcpy>
		break;
   10ae8:	e7c8      	b.n	10a7c <scan_filter_no_match+0x28>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10aea:	4a0e      	ldr	r2, [pc, #56]	; (10b24 <scan_filter_no_match+0xd0>)
   10aec:	210a      	movs	r1, #10
   10aee:	a806      	add	r0, sp, #24
   10af0:	f010 fb14 	bl	2111c <snprintk>
		break;
   10af4:	e7c2      	b.n	10a7c <scan_filter_no_match+0x28>
			default_conn = bt_conn_ref(conn);
   10af6:	9811      	ldr	r0, [sp, #68]	; 0x44
   10af8:	f012 fe4b 	bl	23792 <bt_conn_ref>
   10afc:	4b0a      	ldr	r3, [pc, #40]	; (10b28 <scan_filter_no_match+0xd4>)
   10afe:	6018      	str	r0, [r3, #0]
			bt_conn_unref(conn);
   10b00:	9811      	ldr	r0, [sp, #68]	; 0x44
   10b02:	f012 fe6d 	bl	237e0 <bt_conn_unref>
}
   10b06:	e7df      	b.n	10ac8 <scan_filter_no_match+0x74>
   10b08:	00028484 	.word	0x00028484
   10b0c:	000284b4 	.word	0x000284b4
   10b10:	000284d8 	.word	0x000284d8
   10b14:	00028318 	.word	0x00028318
   10b18:	0002848c 	.word	0x0002848c
   10b1c:	00028494 	.word	0x00028494
   10b20:	000284a0 	.word	0x000284a0
   10b24:	000284ac 	.word	0x000284ac
   10b28:	200029c8 	.word	0x200029c8

00010b2c <scan_filter_match>:
{
   10b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b2e:	b093      	sub	sp, #76	; 0x4c
   10b30:	4615      	mov	r5, r2
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   10b32:	6803      	ldr	r3, [r0, #0]
   10b34:	681c      	ldr	r4, [r3, #0]
	switch (addr->type) {
   10b36:	7823      	ldrb	r3, [r4, #0]
   10b38:	2b03      	cmp	r3, #3
   10b3a:	d830      	bhi.n	10b9e <scan_filter_match+0x72>
   10b3c:	e8df f003 	tbb	[pc, r3]
   10b40:	2a252002 	.word	0x2a252002
		strcpy(type, "public");
   10b44:	491a      	ldr	r1, [pc, #104]	; (10bb0 <scan_filter_match+0x84>)
   10b46:	a807      	add	r0, sp, #28
   10b48:	f011 ff05 	bl	22956 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   10b4c:	79a3      	ldrb	r3, [r4, #6]
   10b4e:	7962      	ldrb	r2, [r4, #5]
   10b50:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10b52:	78e0      	ldrb	r0, [r4, #3]
   10b54:	78a6      	ldrb	r6, [r4, #2]
   10b56:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10b58:	af07      	add	r7, sp, #28
   10b5a:	9705      	str	r7, [sp, #20]
   10b5c:	9404      	str	r4, [sp, #16]
   10b5e:	9603      	str	r6, [sp, #12]
   10b60:	9002      	str	r0, [sp, #8]
   10b62:	9101      	str	r1, [sp, #4]
   10b64:	9200      	str	r2, [sp, #0]
   10b66:	4a13      	ldr	r2, [pc, #76]	; (10bb4 <scan_filter_match+0x88>)
   10b68:	211e      	movs	r1, #30
   10b6a:	a80a      	add	r0, sp, #40	; 0x28
   10b6c:	f010 fad6 	bl	2111c <snprintk>
	printk("Filters matched. Address: %s connectable: %s\n",
   10b70:	b1dd      	cbz	r5, 10baa <scan_filter_match+0x7e>
   10b72:	4a11      	ldr	r2, [pc, #68]	; (10bb8 <scan_filter_match+0x8c>)
   10b74:	a90a      	add	r1, sp, #40	; 0x28
   10b76:	4811      	ldr	r0, [pc, #68]	; (10bbc <scan_filter_match+0x90>)
   10b78:	f010 fac2 	bl	21100 <printk>
}
   10b7c:	b013      	add	sp, #76	; 0x4c
   10b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   10b80:	490f      	ldr	r1, [pc, #60]	; (10bc0 <scan_filter_match+0x94>)
   10b82:	a807      	add	r0, sp, #28
   10b84:	f011 fee7 	bl	22956 <strcpy>
		break;
   10b88:	e7e0      	b.n	10b4c <scan_filter_match+0x20>
		strcpy(type, "public-id");
   10b8a:	490e      	ldr	r1, [pc, #56]	; (10bc4 <scan_filter_match+0x98>)
   10b8c:	a807      	add	r0, sp, #28
   10b8e:	f011 fee2 	bl	22956 <strcpy>
		break;
   10b92:	e7db      	b.n	10b4c <scan_filter_match+0x20>
		strcpy(type, "random-id");
   10b94:	490c      	ldr	r1, [pc, #48]	; (10bc8 <scan_filter_match+0x9c>)
   10b96:	a807      	add	r0, sp, #28
   10b98:	f011 fedd 	bl	22956 <strcpy>
		break;
   10b9c:	e7d6      	b.n	10b4c <scan_filter_match+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10b9e:	4a0b      	ldr	r2, [pc, #44]	; (10bcc <scan_filter_match+0xa0>)
   10ba0:	210a      	movs	r1, #10
   10ba2:	a807      	add	r0, sp, #28
   10ba4:	f010 faba 	bl	2111c <snprintk>
		break;
   10ba8:	e7d0      	b.n	10b4c <scan_filter_match+0x20>
	printk("Filters matched. Address: %s connectable: %s\n",
   10baa:	4a09      	ldr	r2, [pc, #36]	; (10bd0 <scan_filter_match+0xa4>)
   10bac:	e7e2      	b.n	10b74 <scan_filter_match+0x48>
   10bae:	bf00      	nop
   10bb0:	00028484 	.word	0x00028484
   10bb4:	000284b4 	.word	0x000284b4
   10bb8:	00028504 	.word	0x00028504
   10bbc:	00028508 	.word	0x00028508
   10bc0:	0002848c 	.word	0x0002848c
   10bc4:	00028494 	.word	0x00028494
   10bc8:	000284a0 	.word	0x000284a0
   10bcc:	000284ac 	.word	0x000284ac
   10bd0:	00028500 	.word	0x00028500

00010bd4 <disconnected>:
{
   10bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bd6:	b093      	sub	sp, #76	; 0x4c
   10bd8:	4605      	mov	r5, r0
   10bda:	460e      	mov	r6, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10bdc:	f012 fe8b 	bl	238f6 <bt_conn_get_dst>
   10be0:	4604      	mov	r4, r0
	switch (addr->type) {
   10be2:	7803      	ldrb	r3, [r0, #0]
   10be4:	2b03      	cmp	r3, #3
   10be6:	d835      	bhi.n	10c54 <disconnected+0x80>
   10be8:	e8df f003 	tbb	[pc, r3]
   10bec:	2f2a2502 	.word	0x2f2a2502
		strcpy(type, "public");
   10bf0:	4923      	ldr	r1, [pc, #140]	; (10c80 <disconnected+0xac>)
   10bf2:	a807      	add	r0, sp, #28
   10bf4:	f011 feaf 	bl	22956 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   10bf8:	79a3      	ldrb	r3, [r4, #6]
   10bfa:	7962      	ldrb	r2, [r4, #5]
   10bfc:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10bfe:	78e0      	ldrb	r0, [r4, #3]
   10c00:	78a7      	ldrb	r7, [r4, #2]
   10c02:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10c04:	f10d 0c1c 	add.w	ip, sp, #28
   10c08:	f8cd c014 	str.w	ip, [sp, #20]
   10c0c:	9404      	str	r4, [sp, #16]
   10c0e:	9703      	str	r7, [sp, #12]
   10c10:	9002      	str	r0, [sp, #8]
   10c12:	9101      	str	r1, [sp, #4]
   10c14:	9200      	str	r2, [sp, #0]
   10c16:	4a1b      	ldr	r2, [pc, #108]	; (10c84 <disconnected+0xb0>)
   10c18:	211e      	movs	r1, #30
   10c1a:	a80a      	add	r0, sp, #40	; 0x28
   10c1c:	f010 fa7e 	bl	2111c <snprintk>
	printk("Disconnected: %s (reason %u)\n", addr, reason);
   10c20:	4632      	mov	r2, r6
   10c22:	a90a      	add	r1, sp, #40	; 0x28
   10c24:	4818      	ldr	r0, [pc, #96]	; (10c88 <disconnected+0xb4>)
   10c26:	f010 fa6b 	bl	21100 <printk>
	if (default_conn != conn) {
   10c2a:	4b18      	ldr	r3, [pc, #96]	; (10c8c <disconnected+0xb8>)
   10c2c:	6818      	ldr	r0, [r3, #0]
   10c2e:	42a8      	cmp	r0, r5
   10c30:	d016      	beq.n	10c60 <disconnected+0x8c>
}
   10c32:	b013      	add	sp, #76	; 0x4c
   10c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   10c36:	4916      	ldr	r1, [pc, #88]	; (10c90 <disconnected+0xbc>)
   10c38:	a807      	add	r0, sp, #28
   10c3a:	f011 fe8c 	bl	22956 <strcpy>
		break;
   10c3e:	e7db      	b.n	10bf8 <disconnected+0x24>
		strcpy(type, "public-id");
   10c40:	4914      	ldr	r1, [pc, #80]	; (10c94 <disconnected+0xc0>)
   10c42:	a807      	add	r0, sp, #28
   10c44:	f011 fe87 	bl	22956 <strcpy>
		break;
   10c48:	e7d6      	b.n	10bf8 <disconnected+0x24>
		strcpy(type, "random-id");
   10c4a:	4913      	ldr	r1, [pc, #76]	; (10c98 <disconnected+0xc4>)
   10c4c:	a807      	add	r0, sp, #28
   10c4e:	f011 fe82 	bl	22956 <strcpy>
		break;
   10c52:	e7d1      	b.n	10bf8 <disconnected+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10c54:	4a11      	ldr	r2, [pc, #68]	; (10c9c <disconnected+0xc8>)
   10c56:	210a      	movs	r1, #10
   10c58:	a807      	add	r0, sp, #28
   10c5a:	f010 fa5f 	bl	2111c <snprintk>
		break;
   10c5e:	e7cb      	b.n	10bf8 <disconnected+0x24>
	bt_conn_unref(default_conn);
   10c60:	f012 fdbe 	bl	237e0 <bt_conn_unref>
	default_conn = NULL;
   10c64:	4b09      	ldr	r3, [pc, #36]	; (10c8c <disconnected+0xb8>)
   10c66:	2200      	movs	r2, #0
   10c68:	601a      	str	r2, [r3, #0]
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   10c6a:	2001      	movs	r0, #1
   10c6c:	f002 fb8c 	bl	13388 <bt_scan_start>
	if (err) {
   10c70:	4601      	mov	r1, r0
   10c72:	2800      	cmp	r0, #0
   10c74:	d0dd      	beq.n	10c32 <disconnected+0x5e>
		printk("Scanning failed to start (err %d)\n", err);
   10c76:	480a      	ldr	r0, [pc, #40]	; (10ca0 <disconnected+0xcc>)
   10c78:	f010 fa42 	bl	21100 <printk>
   10c7c:	e7d9      	b.n	10c32 <disconnected+0x5e>
   10c7e:	bf00      	nop
   10c80:	00028484 	.word	0x00028484
   10c84:	000284b4 	.word	0x000284b4
   10c88:	00028538 	.word	0x00028538
   10c8c:	200029c8 	.word	0x200029c8
   10c90:	0002848c 	.word	0x0002848c
   10c94:	00028494 	.word	0x00028494
   10c98:	000284a0 	.word	0x000284a0
   10c9c:	000284ac 	.word	0x000284ac
   10ca0:	00028558 	.word	0x00028558

00010ca4 <connected>:
{
   10ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ca6:	b093      	sub	sp, #76	; 0x4c
   10ca8:	4606      	mov	r6, r0
   10caa:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10cac:	f012 fe23 	bl	238f6 <bt_conn_get_dst>
   10cb0:	4604      	mov	r4, r0
	switch (addr->type) {
   10cb2:	7803      	ldrb	r3, [r0, #0]
   10cb4:	2b03      	cmp	r3, #3
   10cb6:	d834      	bhi.n	10d22 <connected+0x7e>
   10cb8:	e8df f003 	tbb	[pc, r3]
   10cbc:	2e292402 	.word	0x2e292402
		strcpy(type, "public");
   10cc0:	4927      	ldr	r1, [pc, #156]	; (10d60 <connected+0xbc>)
   10cc2:	a807      	add	r0, sp, #28
   10cc4:	f011 fe47 	bl	22956 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   10cc8:	79a3      	ldrb	r3, [r4, #6]
   10cca:	7962      	ldrb	r2, [r4, #5]
   10ccc:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10cce:	78e0      	ldrb	r0, [r4, #3]
   10cd0:	78a7      	ldrb	r7, [r4, #2]
   10cd2:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10cd4:	f10d 0c1c 	add.w	ip, sp, #28
   10cd8:	f8cd c014 	str.w	ip, [sp, #20]
   10cdc:	9404      	str	r4, [sp, #16]
   10cde:	9703      	str	r7, [sp, #12]
   10ce0:	9002      	str	r0, [sp, #8]
   10ce2:	9101      	str	r1, [sp, #4]
   10ce4:	9200      	str	r2, [sp, #0]
   10ce6:	4a1f      	ldr	r2, [pc, #124]	; (10d64 <connected+0xc0>)
   10ce8:	211e      	movs	r1, #30
   10cea:	a80a      	add	r0, sp, #40	; 0x28
   10cec:	f010 fa16 	bl	2111c <snprintk>
	if (conn_err) {
   10cf0:	b9ed      	cbnz	r5, 10d2e <connected+0x8a>
	printk("Connected: %s\n", addr);
   10cf2:	a90a      	add	r1, sp, #40	; 0x28
   10cf4:	481c      	ldr	r0, [pc, #112]	; (10d68 <connected+0xc4>)
   10cf6:	f010 fa03 	bl	21100 <printk>
	mtu_exchange(conn);
   10cfa:	4630      	mov	r0, r6
   10cfc:	f7ff fe3e 	bl	1097c <mtu_exchange>
}
   10d00:	b013      	add	sp, #76	; 0x4c
   10d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   10d04:	4919      	ldr	r1, [pc, #100]	; (10d6c <connected+0xc8>)
   10d06:	a807      	add	r0, sp, #28
   10d08:	f011 fe25 	bl	22956 <strcpy>
		break;
   10d0c:	e7dc      	b.n	10cc8 <connected+0x24>
		strcpy(type, "public-id");
   10d0e:	4918      	ldr	r1, [pc, #96]	; (10d70 <connected+0xcc>)
   10d10:	a807      	add	r0, sp, #28
   10d12:	f011 fe20 	bl	22956 <strcpy>
		break;
   10d16:	e7d7      	b.n	10cc8 <connected+0x24>
		strcpy(type, "random-id");
   10d18:	4916      	ldr	r1, [pc, #88]	; (10d74 <connected+0xd0>)
   10d1a:	a807      	add	r0, sp, #28
   10d1c:	f011 fe1b 	bl	22956 <strcpy>
		break;
   10d20:	e7d2      	b.n	10cc8 <connected+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10d22:	4a15      	ldr	r2, [pc, #84]	; (10d78 <connected+0xd4>)
   10d24:	210a      	movs	r1, #10
   10d26:	a807      	add	r0, sp, #28
   10d28:	f010 f9f8 	bl	2111c <snprintk>
		break;
   10d2c:	e7cc      	b.n	10cc8 <connected+0x24>
		printk("Failed to connect to %s (%u)\n", addr, conn_err);
   10d2e:	462a      	mov	r2, r5
   10d30:	a90a      	add	r1, sp, #40	; 0x28
   10d32:	4812      	ldr	r0, [pc, #72]	; (10d7c <connected+0xd8>)
   10d34:	f010 f9e4 	bl	21100 <printk>
		if (conn == default_conn) {
   10d38:	4b11      	ldr	r3, [pc, #68]	; (10d80 <connected+0xdc>)
   10d3a:	6818      	ldr	r0, [r3, #0]
   10d3c:	42b0      	cmp	r0, r6
   10d3e:	d1df      	bne.n	10d00 <connected+0x5c>
			bt_conn_unref(default_conn);
   10d40:	f012 fd4e 	bl	237e0 <bt_conn_unref>
			default_conn = NULL;
   10d44:	4b0e      	ldr	r3, [pc, #56]	; (10d80 <connected+0xdc>)
   10d46:	2200      	movs	r2, #0
   10d48:	601a      	str	r2, [r3, #0]
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   10d4a:	2001      	movs	r0, #1
   10d4c:	f002 fb1c 	bl	13388 <bt_scan_start>
			if (err) {
   10d50:	4601      	mov	r1, r0
   10d52:	2800      	cmp	r0, #0
   10d54:	d0d4      	beq.n	10d00 <connected+0x5c>
				printk("Scanning failed to start (err %d)\n",
   10d56:	480b      	ldr	r0, [pc, #44]	; (10d84 <connected+0xe0>)
   10d58:	f010 f9d2 	bl	21100 <printk>
		return;
   10d5c:	e7d0      	b.n	10d00 <connected+0x5c>
   10d5e:	bf00      	nop
   10d60:	00028484 	.word	0x00028484
   10d64:	000284b4 	.word	0x000284b4
   10d68:	0002859c 	.word	0x0002859c
   10d6c:	0002848c 	.word	0x0002848c
   10d70:	00028494 	.word	0x00028494
   10d74:	000284a0 	.word	0x000284a0
   10d78:	000284ac 	.word	0x000284ac
   10d7c:	0002857c 	.word	0x0002857c
   10d80:	200029c8 	.word	0x200029c8
   10d84:	00028558 	.word	0x00028558

00010d88 <main>:

void main(void)
{
   10d88:	b500      	push	{lr}
   10d8a:	b083      	sub	sp, #12
	const struct device *dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	uint32_t dtr = 0;
   10d8c:	2000      	movs	r0, #0
   10d8e:	9001      	str	r0, [sp, #4]

	if (usb_enable(NULL)) {
   10d90:	f001 fa9a 	bl	122c8 <usb_enable>
   10d94:	b158      	cbz	r0, 10dae <main+0x26>
		printk("Scanning failed to start (err %d)\n", err);
		return;
	}

	printk("Scanning successfully started\n");
}
   10d96:	b003      	add	sp, #12
   10d98:	f85d fb04 	ldr.w	pc, [sp], #4
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
   10d9c:	aa01      	add	r2, sp, #4
   10d9e:	2104      	movs	r1, #4
   10da0:	4816      	ldr	r0, [pc, #88]	; (10dfc <main+0x74>)
   10da2:	4798      	blx	r3
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   10da4:	f640 40cd 	movw	r0, #3277	; 0xccd
   10da8:	2100      	movs	r1, #0
   10daa:	f00d f81d 	bl	1dde8 <z_impl_k_sleep>
	while (!dtr) {
   10dae:	9b01      	ldr	r3, [sp, #4]
   10db0:	b92b      	cbnz	r3, 10dbe <main+0x36>
	const struct uart_driver_api *api =
   10db2:	4b12      	ldr	r3, [pc, #72]	; (10dfc <main+0x74>)
   10db4:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_get == NULL) {
   10db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10db8:	2b00      	cmp	r3, #0
   10dba:	d1ef      	bne.n	10d9c <main+0x14>
   10dbc:	e7f2      	b.n	10da4 <main+0x1c>
	printk("Starting TTPMS Dongle\n");
   10dbe:	4810      	ldr	r0, [pc, #64]	; (10e00 <main+0x78>)
   10dc0:	f010 f99e 	bl	21100 <printk>
	err = bt_enable(NULL);
   10dc4:	2000      	movs	r0, #0
   10dc6:	f004 fc55 	bl	15674 <bt_enable>
	if (err) {
   10dca:	4601      	mov	r1, r0
   10dcc:	b968      	cbnz	r0, 10dea <main+0x62>
	printk("Bluetooth initialized\n");
   10dce:	480d      	ldr	r0, [pc, #52]	; (10e04 <main+0x7c>)
   10dd0:	f010 f996 	bl	21100 <printk>
	scan_init();
   10dd4:	f7ff fdfe 	bl	109d4 <scan_init>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   10dd8:	2001      	movs	r0, #1
   10dda:	f002 fad5 	bl	13388 <bt_scan_start>
	if (err) {
   10dde:	4601      	mov	r1, r0
   10de0:	b938      	cbnz	r0, 10df2 <main+0x6a>
	printk("Scanning successfully started\n");
   10de2:	4809      	ldr	r0, [pc, #36]	; (10e08 <main+0x80>)
   10de4:	f010 f98c 	bl	21100 <printk>
   10de8:	e7d5      	b.n	10d96 <main+0xe>
		printk("Bluetooth init failed (err %d)\n", err);
   10dea:	4808      	ldr	r0, [pc, #32]	; (10e0c <main+0x84>)
   10dec:	f010 f988 	bl	21100 <printk>
		return;
   10df0:	e7d1      	b.n	10d96 <main+0xe>
		printk("Scanning failed to start (err %d)\n", err);
   10df2:	4807      	ldr	r0, [pc, #28]	; (10e10 <main+0x88>)
   10df4:	f010 f984 	bl	21100 <printk>
		return;
   10df8:	e7cd      	b.n	10d96 <main+0xe>
   10dfa:	bf00      	nop
   10dfc:	00028014 	.word	0x00028014
   10e00:	000285ac 	.word	0x000285ac
   10e04:	000285e4 	.word	0x000285e4
   10e08:	000285fc 	.word	0x000285fc
   10e0c:	000285c4 	.word	0x000285c4
   10e10:	00028558 	.word	0x00028558

00010e14 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
   10e14:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
   10e16:	680b      	ldr	r3, [r1, #0]
   10e18:	3301      	adds	r3, #1
   10e1a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10e1c:	4b01      	ldr	r3, [pc, #4]	; (10e24 <char_out+0x10>)
   10e1e:	681b      	ldr	r3, [r3, #0]
   10e20:	4798      	blx	r3
}
   10e22:	bd08      	pop	{r3, pc}
   10e24:	20000454 	.word	0x20000454

00010e28 <__printk_hook_install>:
	_char_out = fn;
   10e28:	4b01      	ldr	r3, [pc, #4]	; (10e30 <__printk_hook_install+0x8>)
   10e2a:	6018      	str	r0, [r3, #0]
}
   10e2c:	4770      	bx	lr
   10e2e:	bf00      	nop
   10e30:	20000454 	.word	0x20000454

00010e34 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   10e34:	b500      	push	{lr}
   10e36:	b083      	sub	sp, #12
   10e38:	4602      	mov	r2, r0
   10e3a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   10e3c:	2100      	movs	r1, #0
   10e3e:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   10e40:	a901      	add	r1, sp, #4
   10e42:	4803      	ldr	r0, [pc, #12]	; (10e50 <vprintk+0x1c>)
   10e44:	f000 f8c8 	bl	10fd8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   10e48:	b003      	add	sp, #12
   10e4a:	f85d fb04 	ldr.w	pc, [sp], #4
   10e4e:	bf00      	nop
   10e50:	00010e15 	.word	0x00010e15

00010e54 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10e54:	b510      	push	{r4, lr}
   10e56:	b084      	sub	sp, #16
   10e58:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   10e5a:	9001      	str	r0, [sp, #4]
   10e5c:	9102      	str	r1, [sp, #8]
   10e5e:	2100      	movs	r1, #0
   10e60:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
   10e62:	a901      	add	r1, sp, #4
   10e64:	4805      	ldr	r0, [pc, #20]	; (10e7c <vsnprintk+0x28>)
   10e66:	f000 f8b7 	bl	10fd8 <cbvprintf>

	if (ctx.count < ctx.max) {
   10e6a:	9b03      	ldr	r3, [sp, #12]
   10e6c:	9a02      	ldr	r2, [sp, #8]
   10e6e:	4293      	cmp	r3, r2
   10e70:	da01      	bge.n	10e76 <vsnprintk+0x22>
		str[ctx.count] = '\0';
   10e72:	2200      	movs	r2, #0
   10e74:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   10e76:	9803      	ldr	r0, [sp, #12]
   10e78:	b004      	add	sp, #16
   10e7a:	bd10      	pop	{r4, pc}
   10e7c:	000210d1 	.word	0x000210d1

00010e80 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10e84:	b083      	sub	sp, #12
   10e86:	4604      	mov	r4, r0
   10e88:	4608      	mov	r0, r1
   10e8a:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10e8c:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10e8e:	f013 0f08 	tst.w	r3, #8
   10e92:	d105      	bne.n	10ea0 <process_event+0x20>
   10e94:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   10e98:	2300      	movs	r3, #0
   10e9a:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   10e9c:	9301      	str	r3, [sp, #4]
}
   10e9e:	e069      	b.n	10f74 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
   10ea0:	2901      	cmp	r1, #1
   10ea2:	d009      	beq.n	10eb8 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10ea4:	f043 0320 	orr.w	r3, r3, #32
   10ea8:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10eaa:	f385 8811 	msr	BASEPRI, r5
   10eae:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10eb2:	b003      	add	sp, #12
   10eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10eb8:	f043 0310 	orr.w	r3, r3, #16
   10ebc:	8323      	strh	r3, [r4, #24]
   10ebe:	e7f4      	b.n	10eaa <process_event+0x2a>
			evt = process_recheck(mgr);
   10ec0:	4620      	mov	r0, r4
   10ec2:	f010 f960 	bl	21186 <process_recheck>
   10ec6:	e057      	b.n	10f78 <process_event+0xf8>
			res = mgr->last_res;
   10ec8:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   10ecc:	464a      	mov	r2, r9
   10ece:	4669      	mov	r1, sp
   10ed0:	4620      	mov	r0, r4
   10ed2:	f010 f971 	bl	211b8 <process_complete>
		onoff_transition_fn transit = NULL;
   10ed6:	2700      	movs	r7, #0
   10ed8:	e05a      	b.n	10f90 <process_event+0x110>
			transit = mgr->transitions->start;
   10eda:	6923      	ldr	r3, [r4, #16]
   10edc:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
   10ede:	2106      	movs	r1, #6
   10ee0:	4620      	mov	r0, r4
   10ee2:	f010 f929 	bl	21138 <set_state>
		res = 0;
   10ee6:	f04f 0900 	mov.w	r9, #0
   10eea:	e051      	b.n	10f90 <process_event+0x110>
			transit = mgr->transitions->stop;
   10eec:	6923      	ldr	r3, [r4, #16]
   10eee:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   10ef0:	2104      	movs	r1, #4
   10ef2:	4620      	mov	r0, r4
   10ef4:	f010 f920 	bl	21138 <set_state>
		res = 0;
   10ef8:	f04f 0900 	mov.w	r9, #0
   10efc:	e048      	b.n	10f90 <process_event+0x110>
			transit = mgr->transitions->reset;
   10efe:	6923      	ldr	r3, [r4, #16]
   10f00:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   10f02:	2105      	movs	r1, #5
   10f04:	4620      	mov	r0, r4
   10f06:	f010 f917 	bl	21138 <set_state>
		res = 0;
   10f0a:	f04f 0900 	mov.w	r9, #0
   10f0e:	e03f      	b.n	10f90 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
   10f10:	2200      	movs	r2, #0
   10f12:	e046      	b.n	10fa2 <process_event+0x122>
   10f14:	2200      	movs	r2, #0
   10f16:	e044      	b.n	10fa2 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10f18:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   10f1c:	8323      	strh	r3, [r4, #24]
   10f1e:	f385 8811 	msr	BASEPRI, r5
   10f22:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10f26:	2900      	cmp	r1, #0
   10f28:	d144      	bne.n	10fb4 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10f2a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   10f2c:	b12b      	cbz	r3, 10f3a <process_event+0xba>
				notify_all(mgr, &clients, state, res);
   10f2e:	464b      	mov	r3, r9
   10f30:	4642      	mov	r2, r8
   10f32:	4669      	mov	r1, sp
   10f34:	4620      	mov	r0, r4
   10f36:	f010 f9b5 	bl	212a4 <notify_all>
			if (transit != NULL) {
   10f3a:	b117      	cbz	r7, 10f42 <process_event+0xc2>
				transit(mgr, transition_complete);
   10f3c:	4925      	ldr	r1, [pc, #148]	; (10fd4 <process_event+0x154>)
   10f3e:	4620      	mov	r0, r4
   10f40:	47b8      	blx	r7
	__asm__ volatile(
   10f42:	f04f 0340 	mov.w	r3, #64	; 0x40
   10f46:	f3ef 8511 	mrs	r5, BASEPRI
   10f4a:	f383 8812 	msr	BASEPRI_MAX, r3
   10f4e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10f52:	8b23      	ldrh	r3, [r4, #24]
   10f54:	f023 0308 	bic.w	r3, r3, #8
   10f58:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10f5a:	8b23      	ldrh	r3, [r4, #24]
   10f5c:	f013 0f10 	tst.w	r3, #16
   10f60:	d02e      	beq.n	10fc0 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10f62:	f023 0310 	bic.w	r3, r3, #16
   10f66:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   10f68:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   10f6a:	8b26      	ldrh	r6, [r4, #24]
   10f6c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   10f70:	2800      	cmp	r0, #0
   10f72:	d09a      	beq.n	10eaa <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   10f74:	2802      	cmp	r0, #2
   10f76:	d0a3      	beq.n	10ec0 <process_event+0x40>
		if (evt == EVT_NOP) {
   10f78:	2800      	cmp	r0, #0
   10f7a:	d096      	beq.n	10eaa <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   10f7c:	2801      	cmp	r0, #1
   10f7e:	d0a3      	beq.n	10ec8 <process_event+0x48>
		} else if (evt == EVT_START) {
   10f80:	2803      	cmp	r0, #3
   10f82:	d0aa      	beq.n	10eda <process_event+0x5a>
		} else if (evt == EVT_STOP) {
   10f84:	2804      	cmp	r0, #4
   10f86:	d0b1      	beq.n	10eec <process_event+0x6c>
		} else if (evt == EVT_RESET) {
   10f88:	2805      	cmp	r0, #5
   10f8a:	d0b8      	beq.n	10efe <process_event+0x7e>
		onoff_transition_fn transit = NULL;
   10f8c:	2700      	movs	r7, #0
		res = 0;
   10f8e:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10f90:	8b23      	ldrh	r3, [r4, #24]
   10f92:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10f96:	45b0      	cmp	r8, r6
   10f98:	d0ba      	beq.n	10f10 <process_event+0x90>
   10f9a:	68a2      	ldr	r2, [r4, #8]
   10f9c:	2a00      	cmp	r2, #0
   10f9e:	d0b9      	beq.n	10f14 <process_event+0x94>
   10fa0:	2201      	movs	r2, #1
		if (do_monitors
   10fa2:	4611      	mov	r1, r2
   10fa4:	2a00      	cmp	r2, #0
   10fa6:	d1b7      	bne.n	10f18 <process_event+0x98>
   10fa8:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   10faa:	2a00      	cmp	r2, #0
   10fac:	d1b4      	bne.n	10f18 <process_event+0x98>
		    || (transit != NULL)) {
   10fae:	2f00      	cmp	r7, #0
   10fb0:	d1b2      	bne.n	10f18 <process_event+0x98>
   10fb2:	e7d2      	b.n	10f5a <process_event+0xda>
				notify_monitors(mgr, state, res);
   10fb4:	464a      	mov	r2, r9
   10fb6:	4641      	mov	r1, r8
   10fb8:	4620      	mov	r0, r4
   10fba:	f010 f8c5 	bl	21148 <notify_monitors>
   10fbe:	e7b4      	b.n	10f2a <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10fc0:	f013 0f20 	tst.w	r3, #32
   10fc4:	d004      	beq.n	10fd0 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10fc6:	f023 0320 	bic.w	r3, r3, #32
   10fca:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   10fcc:	2002      	movs	r0, #2
   10fce:	e7cc      	b.n	10f6a <process_event+0xea>
		evt = EVT_NOP;
   10fd0:	2000      	movs	r0, #0
   10fd2:	e7ca      	b.n	10f6a <process_event+0xea>
   10fd4:	000212d3 	.word	0x000212d3

00010fd8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fdc:	b093      	sub	sp, #76	; 0x4c
   10fde:	4606      	mov	r6, r0
   10fe0:	460d      	mov	r5, r1
   10fe2:	4692      	mov	sl, r2
   10fe4:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10fe6:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10fe8:	f89a 0000 	ldrb.w	r0, [sl]
   10fec:	2800      	cmp	r0, #0
   10fee:	f000 84d6 	beq.w	1199e <cbvprintf+0x9c6>
		if (*fp != '%') {
   10ff2:	2825      	cmp	r0, #37	; 0x25
   10ff4:	d008      	beq.n	11008 <cbvprintf+0x30>
			OUTC(*fp++);
   10ff6:	f10a 0a01 	add.w	sl, sl, #1
   10ffa:	4629      	mov	r1, r5
   10ffc:	47b0      	blx	r6
   10ffe:	2800      	cmp	r0, #0
   11000:	f2c0 84ce 	blt.w	119a0 <cbvprintf+0x9c8>
   11004:	3401      	adds	r4, #1
			continue;
   11006:	e7ef      	b.n	10fe8 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   11008:	2300      	movs	r3, #0
   1100a:	9306      	str	r3, [sp, #24]
   1100c:	9307      	str	r3, [sp, #28]
   1100e:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
   11010:	9308      	str	r3, [sp, #32]
   11012:	9309      	str	r3, [sp, #36]	; 0x24
   11014:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
   11016:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
   1101a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1101e:	2b25      	cmp	r3, #37	; 0x25
   11020:	d001      	beq.n	11026 <cbvprintf+0x4e>
	bool loop = true;
   11022:	2701      	movs	r7, #1
   11024:	e02c      	b.n	11080 <cbvprintf+0xa8>
		conv->specifier = *sp++;
   11026:	f10a 0802 	add.w	r8, sl, #2
   1102a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
   1102e:	e1a8      	b.n	11382 <cbvprintf+0x3aa>
			conv->flag_dash = true;
   11030:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11034:	f043 0304 	orr.w	r3, r3, #4
   11038:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
   1103c:	b1ff      	cbz	r7, 1107e <cbvprintf+0xa6>
			++sp;
   1103e:	f108 0801 	add.w	r8, r8, #1
   11042:	e01c      	b.n	1107e <cbvprintf+0xa6>
			conv->flag_plus = true;
   11044:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11048:	f043 0308 	orr.w	r3, r3, #8
   1104c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   11050:	e7f4      	b.n	1103c <cbvprintf+0x64>
			conv->flag_space = true;
   11052:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11056:	f043 0310 	orr.w	r3, r3, #16
   1105a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   1105e:	e7ed      	b.n	1103c <cbvprintf+0x64>
			conv->flag_hash = true;
   11060:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11064:	f043 0320 	orr.w	r3, r3, #32
   11068:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   1106c:	e7e6      	b.n	1103c <cbvprintf+0x64>
			conv->flag_zero = true;
   1106e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11076:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   1107a:	e7df      	b.n	1103c <cbvprintf+0x64>
		switch (*sp) {
   1107c:	2700      	movs	r7, #0
	} while (loop);
   1107e:	b34f      	cbz	r7, 110d4 <cbvprintf+0xfc>
		switch (*sp) {
   11080:	f898 3000 	ldrb.w	r3, [r8]
   11084:	3b20      	subs	r3, #32
   11086:	2b10      	cmp	r3, #16
   11088:	d8f8      	bhi.n	1107c <cbvprintf+0xa4>
   1108a:	a201      	add	r2, pc, #4	; (adr r2, 11090 <cbvprintf+0xb8>)
   1108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11090:	00011053 	.word	0x00011053
   11094:	0001107d 	.word	0x0001107d
   11098:	0001107d 	.word	0x0001107d
   1109c:	00011061 	.word	0x00011061
   110a0:	0001107d 	.word	0x0001107d
   110a4:	0001107d 	.word	0x0001107d
   110a8:	0001107d 	.word	0x0001107d
   110ac:	0001107d 	.word	0x0001107d
   110b0:	0001107d 	.word	0x0001107d
   110b4:	0001107d 	.word	0x0001107d
   110b8:	0001107d 	.word	0x0001107d
   110bc:	00011045 	.word	0x00011045
   110c0:	0001107d 	.word	0x0001107d
   110c4:	00011031 	.word	0x00011031
   110c8:	0001107d 	.word	0x0001107d
   110cc:	0001107d 	.word	0x0001107d
   110d0:	0001106f 	.word	0x0001106f
	if (conv->flag_zero && conv->flag_dash) {
   110d4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   110d8:	f003 0344 	and.w	r3, r3, #68	; 0x44
   110dc:	2b44      	cmp	r3, #68	; 0x44
   110de:	d06d      	beq.n	111bc <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
   110e0:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
   110e4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   110e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   110ec:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
   110f0:	f898 3000 	ldrb.w	r3, [r8]
   110f4:	2b2a      	cmp	r3, #42	; 0x2a
   110f6:	d068      	beq.n	111ca <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
   110f8:	a805      	add	r0, sp, #20
   110fa:	f010 fd47 	bl	21b8c <extract_decimal>
	if (sp != wp) {
   110fe:	9b05      	ldr	r3, [sp, #20]
   11100:	4598      	cmp	r8, r3
   11102:	d012      	beq.n	1112a <cbvprintf+0x152>
		conv->width_present = true;
   11104:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1110c:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
   11110:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
   11112:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   11116:	2800      	cmp	r0, #0
   11118:	db60      	blt.n	111dc <cbvprintf+0x204>
   1111a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   1111c:	4313      	orrs	r3, r2
   1111e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   11122:	f363 0241 	bfi	r2, r3, #1, #1
   11126:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   1112a:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
   1112c:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   1112e:	781b      	ldrb	r3, [r3, #0]
   11130:	2b2e      	cmp	r3, #46	; 0x2e
   11132:	bf14      	ite	ne
   11134:	2300      	movne	r3, #0
   11136:	2301      	moveq	r3, #1
   11138:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   1113c:	f363 0241 	bfi	r2, r3, #1, #1
   11140:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
   11144:	2b00      	cmp	r3, #0
   11146:	d04b      	beq.n	111e0 <cbvprintf+0x208>
	++sp;
   11148:	9b05      	ldr	r3, [sp, #20]
   1114a:	1c5a      	adds	r2, r3, #1
   1114c:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   1114e:	785b      	ldrb	r3, [r3, #1]
   11150:	2b2a      	cmp	r3, #42	; 0x2a
   11152:	d048      	beq.n	111e6 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
   11154:	a805      	add	r0, sp, #20
   11156:	f010 fd19 	bl	21b8c <extract_decimal>
	conv->prec_value = prec;
   1115a:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
   1115c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11160:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   11164:	2800      	cmp	r0, #0
   11166:	db47      	blt.n	111f8 <cbvprintf+0x220>
   11168:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   1116a:	4313      	orrs	r3, r2
   1116c:	f89d 2020 	ldrb.w	r2, [sp, #32]
   11170:	f363 0241 	bfi	r2, r3, #1, #1
   11174:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   11178:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
   1117c:	f898 3000 	ldrb.w	r3, [r8]
   11180:	3b4c      	subs	r3, #76	; 0x4c
   11182:	2b2e      	cmp	r3, #46	; 0x2e
   11184:	f200 80dc 	bhi.w	11340 <cbvprintf+0x368>
   11188:	e8df f003 	tbb	[pc, r3]
   1118c:	dadadaca 	.word	0xdadadaca
   11190:	dadadada 	.word	0xdadadada
   11194:	dadadada 	.word	0xdadadada
   11198:	dadadada 	.word	0xdadadada
   1119c:	dadadada 	.word	0xdadadada
   111a0:	dadadada 	.word	0xdadadada
   111a4:	dadadada 	.word	0xdadadada
   111a8:	da6ada38 	.word	0xda6ada38
   111ac:	dadada51 	.word	0xdadada51
   111b0:	dadadada 	.word	0xdadadada
   111b4:	dadadac0 	.word	0xdadadac0
   111b8:	dada      	.short	0xdada
   111ba:	b6          	.byte	0xb6
   111bb:	00          	.byte	0x00
		conv->flag_zero = false;
   111bc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   111c0:	f36f 1386 	bfc	r3, #6, #1
   111c4:	f88d 3020 	strb.w	r3, [sp, #32]
   111c8:	e78a      	b.n	110e0 <cbvprintf+0x108>
		conv->width_star = true;
   111ca:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   111ce:	f043 0301 	orr.w	r3, r3, #1
   111d2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   111d6:	4643      	mov	r3, r8
   111d8:	3301      	adds	r3, #1
   111da:	e7a7      	b.n	1112c <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
   111dc:	2201      	movs	r2, #1
   111de:	e79d      	b.n	1111c <cbvprintf+0x144>
		return sp;
   111e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
   111e4:	e7ca      	b.n	1117c <cbvprintf+0x1a4>
		conv->prec_star = true;
   111e6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   111ea:	f043 0304 	orr.w	r3, r3, #4
   111ee:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   111f2:	f102 0801 	add.w	r8, r2, #1
   111f6:	e7c1      	b.n	1117c <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
   111f8:	2201      	movs	r2, #1
   111fa:	e7b6      	b.n	1116a <cbvprintf+0x192>
		if (*++sp == 'h') {
   111fc:	f108 0201 	add.w	r2, r8, #1
   11200:	f898 3001 	ldrb.w	r3, [r8, #1]
   11204:	2b68      	cmp	r3, #104	; 0x68
   11206:	d008      	beq.n	1121a <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
   11208:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1120c:	2102      	movs	r1, #2
   1120e:	f361 03c6 	bfi	r3, r1, #3, #4
   11212:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
   11216:	4690      	mov	r8, r2
   11218:	e02b      	b.n	11272 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
   1121a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1121e:	2201      	movs	r2, #1
   11220:	f362 03c6 	bfi	r3, r2, #3, #4
   11224:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   11228:	f108 0802 	add.w	r8, r8, #2
   1122c:	e021      	b.n	11272 <cbvprintf+0x29a>
		if (*++sp == 'l') {
   1122e:	f108 0201 	add.w	r2, r8, #1
   11232:	f898 3001 	ldrb.w	r3, [r8, #1]
   11236:	2b6c      	cmp	r3, #108	; 0x6c
   11238:	d008      	beq.n	1124c <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
   1123a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1123e:	2103      	movs	r1, #3
   11240:	f361 03c6 	bfi	r3, r1, #3, #4
   11244:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
   11248:	4690      	mov	r8, r2
   1124a:	e012      	b.n	11272 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
   1124c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11250:	2204      	movs	r2, #4
   11252:	f362 03c6 	bfi	r3, r2, #3, #4
   11256:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   1125a:	f108 0802 	add.w	r8, r8, #2
   1125e:	e008      	b.n	11272 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
   11260:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11264:	2205      	movs	r2, #5
   11266:	f362 03c6 	bfi	r3, r2, #3, #4
   1126a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1126e:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
   11272:	f818 3b01 	ldrb.w	r3, [r8], #1
   11276:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
   1127a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   1127e:	2a37      	cmp	r2, #55	; 0x37
   11280:	f200 8150 	bhi.w	11524 <cbvprintf+0x54c>
   11284:	e8df f012 	tbh	[pc, r2, lsl #1]
   11288:	014e0126 	.word	0x014e0126
   1128c:	014e014e 	.word	0x014e014e
   11290:	01260126 	.word	0x01260126
   11294:	014e0126 	.word	0x014e0126
   11298:	014e014e 	.word	0x014e014e
   1129c:	014e014e 	.word	0x014e014e
   112a0:	014e014e 	.word	0x014e014e
   112a4:	014e014e 	.word	0x014e014e
   112a8:	014e014e 	.word	0x014e014e
   112ac:	014e014e 	.word	0x014e014e
   112b0:	014e014e 	.word	0x014e014e
   112b4:	0113014e 	.word	0x0113014e
   112b8:	014e014e 	.word	0x014e014e
   112bc:	014e014e 	.word	0x014e014e
   112c0:	014e014e 	.word	0x014e014e
   112c4:	014e014e 	.word	0x014e014e
   112c8:	014e0126 	.word	0x014e0126
   112cc:	00630113 	.word	0x00630113
   112d0:	01260126 	.word	0x01260126
   112d4:	014e0126 	.word	0x014e0126
   112d8:	014e0063 	.word	0x014e0063
   112dc:	014e014e 	.word	0x014e014e
   112e0:	012f014e 	.word	0x012f014e
   112e4:	013f0113 	.word	0x013f0113
   112e8:	014e014e 	.word	0x014e014e
   112ec:	014e013f 	.word	0x014e013f
   112f0:	014e0113 	.word	0x014e0113
   112f4:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
   112f8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   112fc:	2206      	movs	r2, #6
   112fe:	f362 03c6 	bfi	r3, r2, #3, #4
   11302:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   11306:	f108 0801 	add.w	r8, r8, #1
		break;
   1130a:	e7b2      	b.n	11272 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
   1130c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11310:	2207      	movs	r2, #7
   11312:	f362 03c6 	bfi	r3, r2, #3, #4
   11316:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1131a:	f108 0801 	add.w	r8, r8, #1
		break;
   1131e:	e7a8      	b.n	11272 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
   11320:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11324:	2208      	movs	r2, #8
   11326:	f362 03c6 	bfi	r3, r2, #3, #4
   1132a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1132e:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
   11332:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11336:	f043 0302 	orr.w	r3, r3, #2
   1133a:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   1133e:	e798      	b.n	11272 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
   11340:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11344:	f36f 03c6 	bfc	r3, #3, #4
   11348:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
   1134c:	e791      	b.n	11272 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
   1134e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   11352:	2101      	movs	r1, #1
   11354:	f361 0202 	bfi	r2, r1, #0, #3
   11358:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   1135c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   11360:	f002 0278 	and.w	r2, r2, #120	; 0x78
   11364:	2a40      	cmp	r2, #64	; 0x40
   11366:	f000 80aa 	beq.w	114be <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
   1136a:	2b63      	cmp	r3, #99	; 0x63
   1136c:	f000 80ae 	beq.w	114cc <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
   11370:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11374:	f3c3 0240 	ubfx	r2, r3, #1, #1
   11378:	4317      	orrs	r7, r2
   1137a:	f367 0341 	bfi	r3, r7, #1, #1
   1137e:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   11382:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11386:	f013 0f01 	tst.w	r3, #1
   1138a:	f000 80da 	beq.w	11542 <cbvprintf+0x56a>
			width = va_arg(ap, int);
   1138e:	9b03      	ldr	r3, [sp, #12]
   11390:	1d1a      	adds	r2, r3, #4
   11392:	9203      	str	r2, [sp, #12]
   11394:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   11396:	2f00      	cmp	r7, #0
   11398:	f2c0 80cb 	blt.w	11532 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   1139c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   113a0:	f013 0f04 	tst.w	r3, #4
   113a4:	f000 80df 	beq.w	11566 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
   113a8:	9b03      	ldr	r3, [sp, #12]
   113aa:	1d1a      	adds	r2, r3, #4
   113ac:	9203      	str	r2, [sp, #12]
   113ae:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
   113b2:	f1bb 0f00 	cmp.w	fp, #0
   113b6:	f2c0 80cd 	blt.w	11554 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   113ba:	2300      	movs	r3, #0
   113bc:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
   113be:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   113c0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   113c4:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   113c8:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   113cc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   113d0:	2b01      	cmp	r3, #1
   113d2:	f000 80d1 	beq.w	11578 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   113d6:	2b02      	cmp	r3, #2
   113d8:	f000 8116 	beq.w	11608 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   113dc:	2b04      	cmp	r3, #4
   113de:	f000 8167 	beq.w	116b0 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   113e2:	2b03      	cmp	r3, #3
   113e4:	f000 817e 	beq.w	116e4 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   113e8:	f89d 9020 	ldrb.w	r9, [sp, #32]
   113ec:	f019 0303 	ands.w	r3, r9, #3
   113f0:	9302      	str	r3, [sp, #8]
   113f2:	f040 817d 	bne.w	116f0 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   113f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   113fa:	3b25      	subs	r3, #37	; 0x25
   113fc:	2b53      	cmp	r3, #83	; 0x53
   113fe:	f200 8233 	bhi.w	11868 <cbvprintf+0x890>
   11402:	e8df f013 	tbh	[pc, r3, lsl #1]
   11406:	0181      	.short	0x0181
   11408:	02310231 	.word	0x02310231
   1140c:	02310231 	.word	0x02310231
   11410:	02310231 	.word	0x02310231
   11414:	02310231 	.word	0x02310231
   11418:	02310231 	.word	0x02310231
   1141c:	02310231 	.word	0x02310231
   11420:	02310231 	.word	0x02310231
   11424:	02310231 	.word	0x02310231
   11428:	02310231 	.word	0x02310231
   1142c:	02310231 	.word	0x02310231
   11430:	02310231 	.word	0x02310231
   11434:	02310231 	.word	0x02310231
   11438:	02310231 	.word	0x02310231
   1143c:	02310231 	.word	0x02310231
   11440:	02310231 	.word	0x02310231
   11444:	02310231 	.word	0x02310231
   11448:	02310231 	.word	0x02310231
   1144c:	02310231 	.word	0x02310231
   11450:	02310231 	.word	0x02310231
   11454:	02310231 	.word	0x02310231
   11458:	02310231 	.word	0x02310231
   1145c:	02310231 	.word	0x02310231
   11460:	02310231 	.word	0x02310231
   11464:	02310231 	.word	0x02310231
   11468:	02310231 	.word	0x02310231
   1146c:	023101c7 	.word	0x023101c7
   11470:	02310231 	.word	0x02310231
   11474:	02310231 	.word	0x02310231
   11478:	02310231 	.word	0x02310231
   1147c:	02310231 	.word	0x02310231
   11480:	01a10231 	.word	0x01a10231
   11484:	023101ab 	.word	0x023101ab
   11488:	02310231 	.word	0x02310231
   1148c:	01ab0231 	.word	0x01ab0231
   11490:	02310231 	.word	0x02310231
   11494:	02310231 	.word	0x02310231
   11498:	01c70208 	.word	0x01c70208
   1149c:	023101ea 	.word	0x023101ea
   114a0:	018f0231 	.word	0x018f0231
   114a4:	01c70231 	.word	0x01c70231
   114a8:	02310231 	.word	0x02310231
   114ac:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
   114ae:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   114b2:	2102      	movs	r1, #2
   114b4:	f361 0202 	bfi	r2, r1, #0, #3
   114b8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   114bc:	e74e      	b.n	1135c <cbvprintf+0x384>
			conv->invalid = true;
   114be:	f89d 1020 	ldrb.w	r1, [sp, #32]
   114c2:	f041 0101 	orr.w	r1, r1, #1
   114c6:	f88d 1020 	strb.w	r1, [sp, #32]
   114ca:	e74e      	b.n	1136a <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
   114cc:	1e17      	subs	r7, r2, #0
   114ce:	bf18      	it	ne
   114d0:	2701      	movne	r7, #1
   114d2:	e74d      	b.n	11370 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
   114d4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   114d8:	2204      	movs	r2, #4
   114da:	f362 0302 	bfi	r3, r2, #0, #3
   114de:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
   114e2:	2701      	movs	r7, #1
			break;
   114e4:	e744      	b.n	11370 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   114e6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   114ea:	2203      	movs	r2, #3
   114ec:	f362 0302 	bfi	r3, r2, #0, #3
   114f0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   114f4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   114f8:	f003 0378 	and.w	r3, r3, #120	; 0x78
   114fc:	2b40      	cmp	r3, #64	; 0x40
   114fe:	f47f af37 	bne.w	11370 <cbvprintf+0x398>
			unsupported = true;
   11502:	2701      	movs	r7, #1
   11504:	e734      	b.n	11370 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   11506:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1150a:	2203      	movs	r2, #3
   1150c:	f362 0302 	bfi	r3, r2, #0, #3
   11510:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
   11514:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11518:	f013 0f78 	tst.w	r3, #120	; 0x78
   1151c:	f43f af28 	beq.w	11370 <cbvprintf+0x398>
			unsupported = true;
   11520:	2701      	movs	r7, #1
   11522:	e725      	b.n	11370 <cbvprintf+0x398>
		conv->invalid = true;
   11524:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11528:	f043 0301 	orr.w	r3, r3, #1
   1152c:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   11530:	e71e      	b.n	11370 <cbvprintf+0x398>
				conv->flag_dash = true;
   11532:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11536:	f043 0304 	orr.w	r3, r3, #4
   1153a:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   1153e:	427f      	negs	r7, r7
   11540:	e72c      	b.n	1139c <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   11542:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   11546:	2b00      	cmp	r3, #0
   11548:	db02      	blt.n	11550 <cbvprintf+0x578>
		int width = -1;
   1154a:	f04f 37ff 	mov.w	r7, #4294967295
   1154e:	e725      	b.n	1139c <cbvprintf+0x3c4>
			width = conv->width_value;
   11550:	9f09      	ldr	r7, [sp, #36]	; 0x24
   11552:	e723      	b.n	1139c <cbvprintf+0x3c4>
				conv->prec_present = false;
   11554:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11558:	f36f 0341 	bfc	r3, #1, #1
   1155c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   11560:	f04f 3bff 	mov.w	fp, #4294967295
   11564:	e729      	b.n	113ba <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
   11566:	f013 0f02 	tst.w	r3, #2
   1156a:	d002      	beq.n	11572 <cbvprintf+0x59a>
			precision = conv->prec_value;
   1156c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   11570:	e723      	b.n	113ba <cbvprintf+0x3e2>
		int precision = -1;
   11572:	f04f 3bff 	mov.w	fp, #4294967295
   11576:	e720      	b.n	113ba <cbvprintf+0x3e2>
			switch (length_mod) {
   11578:	1ecb      	subs	r3, r1, #3
   1157a:	2b04      	cmp	r3, #4
   1157c:	d804      	bhi.n	11588 <cbvprintf+0x5b0>
   1157e:	e8df f003 	tbb	[pc, r3]
   11582:	1d0b      	.short	0x1d0b
   11584:	3529      	.short	0x3529
   11586:	35          	.byte	0x35
   11587:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   11588:	9b03      	ldr	r3, [sp, #12]
   1158a:	1d1a      	adds	r2, r3, #4
   1158c:	9203      	str	r2, [sp, #12]
   1158e:	681a      	ldr	r2, [r3, #0]
   11590:	17d3      	asrs	r3, r2, #31
   11592:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   11596:	e006      	b.n	115a6 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
   11598:	9b03      	ldr	r3, [sp, #12]
   1159a:	1d1a      	adds	r2, r3, #4
   1159c:	9203      	str	r2, [sp, #12]
   1159e:	681a      	ldr	r2, [r3, #0]
   115a0:	17d3      	asrs	r3, r2, #31
   115a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   115a6:	2901      	cmp	r1, #1
   115a8:	d028      	beq.n	115fc <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
   115aa:	2902      	cmp	r1, #2
   115ac:	f47f af1c 	bne.w	113e8 <cbvprintf+0x410>
				value->sint = (short)value->sint;
   115b0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   115b4:	17d3      	asrs	r3, r2, #31
   115b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   115ba:	e715      	b.n	113e8 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
   115bc:	9b03      	ldr	r3, [sp, #12]
   115be:	3307      	adds	r3, #7
   115c0:	f023 0307 	bic.w	r3, r3, #7
   115c4:	f103 0208 	add.w	r2, r3, #8
   115c8:	9203      	str	r2, [sp, #12]
   115ca:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   115ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   115d2:	e7e8      	b.n	115a6 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
   115d4:	9b03      	ldr	r3, [sp, #12]
   115d6:	3307      	adds	r3, #7
   115d8:	f023 0307 	bic.w	r3, r3, #7
   115dc:	f103 0208 	add.w	r2, r3, #8
   115e0:	9203      	str	r2, [sp, #12]
   115e2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   115e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   115ea:	e7dc      	b.n	115a6 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   115ec:	9b03      	ldr	r3, [sp, #12]
   115ee:	1d1a      	adds	r2, r3, #4
   115f0:	9203      	str	r2, [sp, #12]
   115f2:	681a      	ldr	r2, [r3, #0]
   115f4:	17d3      	asrs	r3, r2, #31
				value->sint =
   115f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   115fa:	e7d4      	b.n	115a6 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
   115fc:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11600:	9306      	str	r3, [sp, #24]
   11602:	2300      	movs	r3, #0
   11604:	9307      	str	r3, [sp, #28]
   11606:	e6ef      	b.n	113e8 <cbvprintf+0x410>
			switch (length_mod) {
   11608:	1ecb      	subs	r3, r1, #3
   1160a:	2b04      	cmp	r3, #4
   1160c:	d804      	bhi.n	11618 <cbvprintf+0x640>
   1160e:	e8df f003 	tbb	[pc, r3]
   11612:	1f0b      	.short	0x1f0b
   11614:	4135      	.short	0x4135
   11616:	41          	.byte	0x41
   11617:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   11618:	9b03      	ldr	r3, [sp, #12]
   1161a:	1d1a      	adds	r2, r3, #4
   1161c:	9203      	str	r2, [sp, #12]
   1161e:	681b      	ldr	r3, [r3, #0]
   11620:	9306      	str	r3, [sp, #24]
   11622:	2300      	movs	r3, #0
   11624:	9307      	str	r3, [sp, #28]
				break;
   11626:	e01e      	b.n	11666 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
   11628:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   1162c:	2b63      	cmp	r3, #99	; 0x63
   1162e:	d007      	beq.n	11640 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
   11630:	9b03      	ldr	r3, [sp, #12]
   11632:	1d1a      	adds	r2, r3, #4
   11634:	9203      	str	r2, [sp, #12]
   11636:	681b      	ldr	r3, [r3, #0]
   11638:	9306      	str	r3, [sp, #24]
   1163a:	2300      	movs	r3, #0
   1163c:	9307      	str	r3, [sp, #28]
   1163e:	e012      	b.n	11666 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
   11640:	9b03      	ldr	r3, [sp, #12]
   11642:	1d1a      	adds	r2, r3, #4
   11644:	9203      	str	r2, [sp, #12]
   11646:	681b      	ldr	r3, [r3, #0]
   11648:	9306      	str	r3, [sp, #24]
   1164a:	2300      	movs	r3, #0
   1164c:	9307      	str	r3, [sp, #28]
   1164e:	e00a      	b.n	11666 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
   11650:	9b03      	ldr	r3, [sp, #12]
   11652:	3307      	adds	r3, #7
   11654:	f023 0307 	bic.w	r3, r3, #7
   11658:	f103 0208 	add.w	r2, r3, #8
   1165c:	9203      	str	r2, [sp, #12]
   1165e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   11662:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   11666:	2901      	cmp	r1, #1
   11668:	d01c      	beq.n	116a4 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   1166a:	2902      	cmp	r1, #2
   1166c:	f47f aebc 	bne.w	113e8 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
   11670:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11674:	9306      	str	r3, [sp, #24]
   11676:	2300      	movs	r3, #0
   11678:	9307      	str	r3, [sp, #28]
   1167a:	e6b5      	b.n	113e8 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
   1167c:	9b03      	ldr	r3, [sp, #12]
   1167e:	3307      	adds	r3, #7
   11680:	f023 0307 	bic.w	r3, r3, #7
   11684:	f103 0208 	add.w	r2, r3, #8
   11688:	9203      	str	r2, [sp, #12]
   1168a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1168e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   11692:	e7e8      	b.n	11666 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
   11694:	9b03      	ldr	r3, [sp, #12]
   11696:	1d1a      	adds	r2, r3, #4
   11698:	9203      	str	r2, [sp, #12]
   1169a:	681b      	ldr	r3, [r3, #0]
				value->uint =
   1169c:	9306      	str	r3, [sp, #24]
   1169e:	2300      	movs	r3, #0
   116a0:	9307      	str	r3, [sp, #28]
				break;
   116a2:	e7e0      	b.n	11666 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
   116a4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   116a8:	9306      	str	r3, [sp, #24]
   116aa:	2300      	movs	r3, #0
   116ac:	9307      	str	r3, [sp, #28]
   116ae:	e69b      	b.n	113e8 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
   116b0:	2908      	cmp	r1, #8
   116b2:	d00b      	beq.n	116cc <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
   116b4:	9b03      	ldr	r3, [sp, #12]
   116b6:	3307      	adds	r3, #7
   116b8:	f023 0307 	bic.w	r3, r3, #7
   116bc:	f103 0208 	add.w	r2, r3, #8
   116c0:	9203      	str	r2, [sp, #12]
   116c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   116c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   116ca:	e68d      	b.n	113e8 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
   116cc:	9b03      	ldr	r3, [sp, #12]
   116ce:	3307      	adds	r3, #7
   116d0:	f023 0307 	bic.w	r3, r3, #7
   116d4:	f103 0208 	add.w	r2, r3, #8
   116d8:	9203      	str	r2, [sp, #12]
   116da:	e9d3 2300 	ldrd	r2, r3, [r3]
   116de:	e9cd 2306 	strd	r2, r3, [sp, #24]
   116e2:	e681      	b.n	113e8 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
   116e4:	9b03      	ldr	r3, [sp, #12]
   116e6:	1d1a      	adds	r2, r3, #4
   116e8:	9203      	str	r2, [sp, #12]
   116ea:	681b      	ldr	r3, [r3, #0]
   116ec:	9306      	str	r3, [sp, #24]
   116ee:	e67b      	b.n	113e8 <cbvprintf+0x410>
			OUTS(sp, fp);
   116f0:	4643      	mov	r3, r8
   116f2:	4652      	mov	r2, sl
   116f4:	4629      	mov	r1, r5
   116f6:	4630      	mov	r0, r6
   116f8:	f010 fac5 	bl	21c86 <outs>
   116fc:	2800      	cmp	r0, #0
   116fe:	f2c0 814f 	blt.w	119a0 <cbvprintf+0x9c8>
   11702:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   11704:	46c2      	mov	sl, r8
			continue;
   11706:	e46f      	b.n	10fe8 <cbvprintf+0x10>
		case '%':
			OUTC('%');
   11708:	4629      	mov	r1, r5
   1170a:	2025      	movs	r0, #37	; 0x25
   1170c:	47b0      	blx	r6
   1170e:	2800      	cmp	r0, #0
   11710:	f2c0 8146 	blt.w	119a0 <cbvprintf+0x9c8>
   11714:	3401      	adds	r4, #1
		char sign = 0;
   11716:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   1171a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   1171e:	f04f 0a00 	mov.w	sl, #0
			break;
   11722:	e0a7      	b.n	11874 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
   11724:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
   11728:	f1bb 0f00 	cmp.w	fp, #0
   1172c:	db08      	blt.n	11740 <cbvprintf+0x768>
				len = strnlen(bps, precision);
   1172e:	4659      	mov	r1, fp
   11730:	4650      	mov	r0, sl
   11732:	f011 f93b 	bl	229ac <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   11736:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
   1173a:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
   1173e:	e099      	b.n	11874 <cbvprintf+0x89c>
				len = strlen(bps);
   11740:	4650      	mov	r0, sl
   11742:	f011 f92b 	bl	2299c <strlen>
   11746:	e7f6      	b.n	11736 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11748:	9b06      	ldr	r3, [sp, #24]
   1174a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
   1174e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
   11752:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
   11756:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
   1175a:	e08b      	b.n	11874 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   1175c:	f019 0f08 	tst.w	r9, #8
   11760:	d105      	bne.n	1176e <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
   11762:	f019 0910 	ands.w	r9, r9, #16
   11766:	d004      	beq.n	11772 <cbvprintf+0x79a>
				sign = ' ';
   11768:	f04f 0920 	mov.w	r9, #32
   1176c:	e001      	b.n	11772 <cbvprintf+0x79a>
				sign = '+';
   1176e:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   11772:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
   11776:	2a00      	cmp	r2, #0
   11778:	f173 0100 	sbcs.w	r1, r3, #0
   1177c:	db02      	blt.n	11784 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   1177e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11782:	e009      	b.n	11798 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
   11784:	4252      	negs	r2, r2
   11786:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1178a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
   1178e:	f04f 092d 	mov.w	r9, #45	; 0x2d
   11792:	e001      	b.n	11798 <cbvprintf+0x7c0>
		switch (conv->specifier) {
   11794:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   11798:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   1179c:	9300      	str	r3, [sp, #0]
   1179e:	ab0c      	add	r3, sp, #48	; 0x30
   117a0:	aa08      	add	r2, sp, #32
   117a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   117a6:	f010 fa04 	bl	21bb2 <encode_uint>
   117aa:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   117ac:	f1bb 0f00 	cmp.w	fp, #0
   117b0:	f2c0 8090 	blt.w	118d4 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
   117b4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   117b8:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   117bc:	f89d 2020 	ldrb.w	r2, [sp, #32]
   117c0:	f36f 1286 	bfc	r2, #6, #1
   117c4:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   117c8:	459b      	cmp	fp, r3
   117ca:	f240 8086 	bls.w	118da <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
   117ce:	ebab 0303 	sub.w	r3, fp, r3
   117d2:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
   117d4:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   117d8:	e04c      	b.n	11874 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   117da:	9806      	ldr	r0, [sp, #24]
   117dc:	b930      	cbnz	r0, 117ec <cbvprintf+0x814>
		char sign = 0;
   117de:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   117e2:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 119a8 <cbvprintf+0x9d0>
			bps = "(nil)";
   117e6:	f1ab 0a05 	sub.w	sl, fp, #5
   117ea:	e043      	b.n	11874 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   117ec:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   117f0:	9300      	str	r3, [sp, #0]
   117f2:	ab0c      	add	r3, sp, #48	; 0x30
   117f4:	aa08      	add	r2, sp, #32
   117f6:	2100      	movs	r1, #0
   117f8:	f010 f9db 	bl	21bb2 <encode_uint>
   117fc:	4682      	mov	sl, r0
				conv->altform_0c = true;
   117fe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11802:	f043 0310 	orr.w	r3, r3, #16
   11806:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   1180a:	2378      	movs	r3, #120	; 0x78
   1180c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
   11810:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
   11814:	e7ca      	b.n	117ac <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   11816:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
   11818:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1181c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   11820:	2b07      	cmp	r3, #7
   11822:	d806      	bhi.n	11832 <cbvprintf+0x85a>
   11824:	e8df f003 	tbb	[pc, r3]
   11828:	100e0c04 	.word	0x100e0c04
   1182c:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
   11830:	6014      	str	r4, [r2, #0]
		char sign = 0;
   11832:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   11836:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   1183a:	f04f 0a00 	mov.w	sl, #0
}
   1183e:	e019      	b.n	11874 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
   11840:	7014      	strb	r4, [r2, #0]
		break;
   11842:	e7f6      	b.n	11832 <cbvprintf+0x85a>
		*(short *)dp = (short)count;
   11844:	8014      	strh	r4, [r2, #0]
		break;
   11846:	e7f4      	b.n	11832 <cbvprintf+0x85a>
		*(long *)dp = (long)count;
   11848:	6014      	str	r4, [r2, #0]
		break;
   1184a:	e7f2      	b.n	11832 <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
   1184c:	4620      	mov	r0, r4
   1184e:	17e1      	asrs	r1, r4, #31
   11850:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   11854:	e7ed      	b.n	11832 <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
   11856:	4620      	mov	r0, r4
   11858:	17e1      	asrs	r1, r4, #31
   1185a:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   1185e:	e7e8      	b.n	11832 <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
   11860:	6014      	str	r4, [r2, #0]
		break;
   11862:	e7e6      	b.n	11832 <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11864:	6014      	str	r4, [r2, #0]
		break;
   11866:	e7e4      	b.n	11832 <cbvprintf+0x85a>
		switch (conv->specifier) {
   11868:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1186c:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   11870:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   11874:	f1ba 0f00 	cmp.w	sl, #0
   11878:	f000 808e 	beq.w	11998 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   1187c:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
   11880:	f1b9 0f00 	cmp.w	r9, #0
   11884:	d000      	beq.n	11888 <cbvprintf+0x8b0>
			nj_len += 1U;
   11886:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   11888:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   1188c:	f011 0f10 	tst.w	r1, #16
   11890:	d026      	beq.n	118e0 <cbvprintf+0x908>
			nj_len += 2U;
   11892:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   11894:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11896:	4413      	add	r3, r2
		if (conv->pad_fp) {
   11898:	f011 0f40 	tst.w	r1, #64	; 0x40
   1189c:	d001      	beq.n	118a2 <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
   1189e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   118a0:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   118a2:	2f00      	cmp	r7, #0
   118a4:	dd32      	ble.n	1190c <cbvprintf+0x934>
			width -= (int)nj_len;
   118a6:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   118a8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   118ac:	f013 0f04 	tst.w	r3, #4
   118b0:	d12c      	bne.n	1190c <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   118b2:	f013 0f40 	tst.w	r3, #64	; 0x40
   118b6:	d018      	beq.n	118ea <cbvprintf+0x912>
					if (sign != 0) {
   118b8:	f1b9 0f00 	cmp.w	r9, #0
   118bc:	d018      	beq.n	118f0 <cbvprintf+0x918>
						OUTC(sign);
   118be:	4629      	mov	r1, r5
   118c0:	4648      	mov	r0, r9
   118c2:	47b0      	blx	r6
   118c4:	2800      	cmp	r0, #0
   118c6:	db6b      	blt.n	119a0 <cbvprintf+0x9c8>
   118c8:	3401      	adds	r4, #1
						sign = 0;
   118ca:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
   118ce:	2330      	movs	r3, #48	; 0x30
   118d0:	9302      	str	r3, [sp, #8]
   118d2:	e00f      	b.n	118f4 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
   118d4:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   118d8:	e7cc      	b.n	11874 <cbvprintf+0x89c>
   118da:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   118de:	e7c9      	b.n	11874 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
   118e0:	f011 0f08 	tst.w	r1, #8
   118e4:	d0d6      	beq.n	11894 <cbvprintf+0x8bc>
			nj_len += 1U;
   118e6:	3201      	adds	r2, #1
   118e8:	e7d4      	b.n	11894 <cbvprintf+0x8bc>
				char pad = ' ';
   118ea:	2320      	movs	r3, #32
   118ec:	9302      	str	r3, [sp, #8]
   118ee:	e001      	b.n	118f4 <cbvprintf+0x91c>
					pad = '0';
   118f0:	2330      	movs	r3, #48	; 0x30
   118f2:	9302      	str	r3, [sp, #8]
   118f4:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   118f6:	1e5f      	subs	r7, r3, #1
   118f8:	2b00      	cmp	r3, #0
   118fa:	dd07      	ble.n	1190c <cbvprintf+0x934>
					OUTC(pad);
   118fc:	4629      	mov	r1, r5
   118fe:	9802      	ldr	r0, [sp, #8]
   11900:	47b0      	blx	r6
   11902:	2800      	cmp	r0, #0
   11904:	db4c      	blt.n	119a0 <cbvprintf+0x9c8>
   11906:	3401      	adds	r4, #1
				while (width-- > 0) {
   11908:	463b      	mov	r3, r7
   1190a:	e7f4      	b.n	118f6 <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   1190c:	f1b9 0f00 	cmp.w	r9, #0
   11910:	d005      	beq.n	1191e <cbvprintf+0x946>
			OUTC(sign);
   11912:	4629      	mov	r1, r5
   11914:	4648      	mov	r0, r9
   11916:	47b0      	blx	r6
   11918:	2800      	cmp	r0, #0
   1191a:	db41      	blt.n	119a0 <cbvprintf+0x9c8>
   1191c:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   1191e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11922:	f3c3 1200 	ubfx	r2, r3, #4, #1
   11926:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1192a:	4313      	orrs	r3, r2
   1192c:	d005      	beq.n	1193a <cbvprintf+0x962>
				OUTC('0');
   1192e:	4629      	mov	r1, r5
   11930:	2030      	movs	r0, #48	; 0x30
   11932:	47b0      	blx	r6
   11934:	2800      	cmp	r0, #0
   11936:	db33      	blt.n	119a0 <cbvprintf+0x9c8>
   11938:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   1193a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1193e:	f013 0f10 	tst.w	r3, #16
   11942:	d006      	beq.n	11952 <cbvprintf+0x97a>
				OUTC(conv->specifier);
   11944:	4629      	mov	r1, r5
   11946:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1194a:	47b0      	blx	r6
   1194c:	2800      	cmp	r0, #0
   1194e:	db27      	blt.n	119a0 <cbvprintf+0x9c8>
   11950:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   11952:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   11954:	f103 39ff 	add.w	r9, r3, #4294967295
   11958:	2b00      	cmp	r3, #0
   1195a:	dd07      	ble.n	1196c <cbvprintf+0x994>
				OUTC('0');
   1195c:	4629      	mov	r1, r5
   1195e:	2030      	movs	r0, #48	; 0x30
   11960:	47b0      	blx	r6
   11962:	2800      	cmp	r0, #0
   11964:	db1c      	blt.n	119a0 <cbvprintf+0x9c8>
   11966:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   11968:	464b      	mov	r3, r9
   1196a:	e7f3      	b.n	11954 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
   1196c:	465b      	mov	r3, fp
   1196e:	4652      	mov	r2, sl
   11970:	4629      	mov	r1, r5
   11972:	4630      	mov	r0, r6
   11974:	f010 f987 	bl	21c86 <outs>
   11978:	2800      	cmp	r0, #0
   1197a:	db11      	blt.n	119a0 <cbvprintf+0x9c8>
   1197c:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   1197e:	2f00      	cmp	r7, #0
   11980:	dd07      	ble.n	11992 <cbvprintf+0x9ba>
			OUTC(' ');
   11982:	4629      	mov	r1, r5
   11984:	2020      	movs	r0, #32
   11986:	47b0      	blx	r6
   11988:	2800      	cmp	r0, #0
   1198a:	db09      	blt.n	119a0 <cbvprintf+0x9c8>
   1198c:	3401      	adds	r4, #1
			--width;
   1198e:	3f01      	subs	r7, #1
   11990:	e7f5      	b.n	1197e <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
   11992:	46c2      	mov	sl, r8
   11994:	f7ff bb28 	b.w	10fe8 <cbvprintf+0x10>
   11998:	46c2      	mov	sl, r8
   1199a:	f7ff bb25 	b.w	10fe8 <cbvprintf+0x10>
		}
	}

	return count;
   1199e:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   119a0:	b013      	add	sp, #76	; 0x4c
   119a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119a6:	bf00      	nop
   119a8:	00028631 	.word	0x00028631

000119ac <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
   119ac:	b508      	push	{r3, lr}
   119ae:	4604      	mov	r4, r0
   119b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   119b4:	f3ef 8311 	mrs	r3, BASEPRI
   119b8:	f382 8812 	msr	BASEPRI_MAX, r2
   119bc:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   119c0:	f014 fef3 	bl	267aa <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   119c4:	4620      	mov	r0, r4
   119c6:	f002 fdad 	bl	14524 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   119ca:	4803      	ldr	r0, [pc, #12]	; (119d8 <sys_reboot+0x2c>)
   119cc:	f00f fb98 	bl	21100 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   119d0:	f002 f9d0 	bl	13d74 <arch_cpu_idle>
   119d4:	e7fc      	b.n	119d0 <sys_reboot+0x24>
   119d6:	bf00      	nop
   119d8:	00028634 	.word	0x00028634

000119dc <usb_set_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
}

static bool usb_set_alt_setting(uint8_t iface, uint8_t alt_setting)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   119dc:	2807      	cmp	r0, #7
   119de:	d901      	bls.n	119e4 <usb_set_alt_setting+0x8>
		usb_dev.alt_setting[iface] = alt_setting;
		return true;
	}

	return false;
   119e0:	2000      	movs	r0, #0
}
   119e2:	4770      	bx	lr
		usb_dev.alt_setting[iface] = alt_setting;
   119e4:	4b02      	ldr	r3, [pc, #8]	; (119f0 <usb_set_alt_setting+0x14>)
   119e6:	4418      	add	r0, r3
   119e8:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
		return true;
   119ec:	2001      	movs	r0, #1
   119ee:	4770      	bx	lr
   119f0:	200029dc 	.word	0x200029dc

000119f4 <usb_get_alt_setting>:

static uint8_t usb_get_alt_setting(uint8_t iface)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   119f4:	2807      	cmp	r0, #7
   119f6:	d901      	bls.n	119fc <usb_get_alt_setting+0x8>
		return usb_dev.alt_setting[iface];
	}

	return 0;
   119f8:	2000      	movs	r0, #0
}
   119fa:	4770      	bx	lr
		return usb_dev.alt_setting[iface];
   119fc:	4b02      	ldr	r3, [pc, #8]	; (11a08 <usb_get_alt_setting+0x14>)
   119fe:	4418      	add	r0, r3
   11a00:	f890 00bb 	ldrb.w	r0, [r0, #187]	; 0xbb
   11a04:	4770      	bx	lr
   11a06:	bf00      	nop
   11a08:	200029dc 	.word	0x200029dc

00011a0c <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
   11a0c:	b510      	push	{r4, lr}
	uint32_t type = setup->RequestType.type;
   11a0e:	7803      	ldrb	r3, [r0, #0]
   11a10:	f3c3 1341 	ubfx	r3, r3, #5, #2
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	handler = usb_dev.req_handlers[type];
   11a14:	330a      	adds	r3, #10
   11a16:	4c06      	ldr	r4, [pc, #24]	; (11a30 <usb_handle_request+0x24>)
   11a18:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
   11a1c:	b123      	cbz	r3, 11a28 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
   11a1e:	4798      	blx	r3
   11a20:	2800      	cmp	r0, #0
   11a22:	db03      	blt.n	11a2c <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
   11a24:	2001      	movs	r0, #1
}
   11a26:	bd10      	pop	{r4, pc}
		return false;
   11a28:	2000      	movs	r0, #0
   11a2a:	e7fc      	b.n	11a26 <usb_handle_request+0x1a>
		return false;
   11a2c:	2000      	movs	r0, #0
   11a2e:	e7fa      	b.n	11a26 <usb_handle_request+0x1a>
   11a30:	200029dc 	.word	0x200029dc

00011a34 <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
   11a34:	300a      	adds	r0, #10
   11a36:	4b02      	ldr	r3, [pc, #8]	; (11a40 <usb_register_request_handler+0xc>)
   11a38:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   11a3c:	4770      	bx	lr
   11a3e:	bf00      	nop
   11a40:	200029dc 	.word	0x200029dc

00011a44 <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
   11a44:	4b01      	ldr	r3, [pc, #4]	; (11a4c <usb_register_descriptors+0x8>)
   11a46:	6258      	str	r0, [r3, #36]	; 0x24
}
   11a48:	4770      	bx	lr
   11a4a:	bf00      	nop
   11a4c:	200029dc 	.word	0x200029dc

00011a50 <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
   11a50:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t *p = NULL;
	uint32_t cur_index = 0U;
	bool found = false;

	LOG_DBG("Get Descriptor request");
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   11a52:	8847      	ldrh	r7, [r0, #2]
   11a54:	0a3d      	lsrs	r5, r7, #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   11a56:	1f2b      	subs	r3, r5, #4
   11a58:	b2db      	uxtb	r3, r3
   11a5a:	2b01      	cmp	r3, #1
   11a5c:	d91e      	bls.n	11a9c <usb_get_descriptor+0x4c>
   11a5e:	b2ff      	uxtb	r7, r7
   11a60:	2d07      	cmp	r5, #7
   11a62:	d81e      	bhi.n	11aa2 <usb_get_descriptor+0x52>
	    (type > USB_DESC_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
   11a64:	4b10      	ldr	r3, [pc, #64]	; (11aa8 <usb_get_descriptor+0x58>)
   11a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cur_index = 0U;
   11a68:	2600      	movs	r6, #0

	while (p[DESC_bLength] != 0U) {
   11a6a:	e000      	b.n	11a6e <usb_get_descriptor+0x1e>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
   11a6c:	4403      	add	r3, r0
	while (p[DESC_bLength] != 0U) {
   11a6e:	7818      	ldrb	r0, [r3, #0]
   11a70:	b138      	cbz	r0, 11a82 <usb_get_descriptor+0x32>
		if (p[DESC_bDescriptorType] == type) {
   11a72:	785c      	ldrb	r4, [r3, #1]
   11a74:	42ac      	cmp	r4, r5
   11a76:	d1f9      	bne.n	11a6c <usb_get_descriptor+0x1c>
			if (cur_index == index) {
   11a78:	42b7      	cmp	r7, r6
   11a7a:	d001      	beq.n	11a80 <usb_get_descriptor+0x30>
			cur_index++;
   11a7c:	3601      	adds	r6, #1
   11a7e:	e7f5      	b.n	11a6c <usb_get_descriptor+0x1c>
				found = true;
   11a80:	2001      	movs	r0, #1
	}

	if (found) {
   11a82:	b160      	cbz	r0, 11a9e <usb_get_descriptor+0x4e>
		/* set data pointer */
		*data = p;
   11a84:	6013      	str	r3, [r2, #0]
		/* get length from structure */
		if (type == USB_DESC_CONFIGURATION) {
   11a86:	2d02      	cmp	r5, #2
   11a88:	d002      	beq.n	11a90 <usb_get_descriptor+0x40>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
   11a8a:	781b      	ldrb	r3, [r3, #0]
   11a8c:	600b      	str	r3, [r1, #0]
   11a8e:	e006      	b.n	11a9e <usb_get_descriptor+0x4e>
			*len = (p[CONF_DESC_wTotalLength]) |
   11a90:	789a      	ldrb	r2, [r3, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
   11a92:	78db      	ldrb	r3, [r3, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
   11a94:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   11a98:	600b      	str	r3, [r1, #0]
   11a9a:	e000      	b.n	11a9e <usb_get_descriptor+0x4e>
		return false;
   11a9c:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", setup->wValue);
	}
	return found;
}
   11a9e:	bcf0      	pop	{r4, r5, r6, r7}
   11aa0:	4770      	bx	lr
		return false;
   11aa2:	2000      	movs	r0, #0
   11aa4:	e7fb      	b.n	11a9e <usb_get_descriptor+0x4e>
   11aa6:	bf00      	nop
   11aa8:	200029dc 	.word	0x200029dc

00011aac <usb_get_interface>:
	return ret;
}

static bool usb_get_interface(struct usb_setup_packet *setup,
			      int32_t *len, uint8_t **data_buf)
{
   11aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11aae:	4684      	mov	ip, r0
   11ab0:	460e      	mov	r6, r1
	const uint8_t *p = usb_dev.descriptors;
   11ab2:	4b0c      	ldr	r3, [pc, #48]	; (11ae4 <usb_get_interface+0x38>)
   11ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t *data = *data_buf;
   11ab6:	6817      	ldr	r7, [r2, #0]
	uint8_t cur_iface;

	while (p[DESC_bLength] != 0U) {
   11ab8:	e000      	b.n	11abc <usb_get_interface+0x10>
				return true;
			}
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
   11aba:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
   11abc:	781a      	ldrb	r2, [r3, #0]
   11abe:	b172      	cbz	r2, 11ade <usb_get_interface+0x32>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   11ac0:	785c      	ldrb	r4, [r3, #1]
   11ac2:	2c04      	cmp	r4, #4
   11ac4:	d1f9      	bne.n	11aba <usb_get_interface+0xe>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   11ac6:	7898      	ldrb	r0, [r3, #2]
			if (cur_iface == setup->wIndex) {
   11ac8:	b285      	uxth	r5, r0
   11aca:	f8bc 4004 	ldrh.w	r4, [ip, #4]
   11ace:	42a5      	cmp	r5, r4
   11ad0:	d1f3      	bne.n	11aba <usb_get_interface+0xe>
				data[0] = usb_get_alt_setting(cur_iface);
   11ad2:	f7ff ff8f 	bl	119f4 <usb_get_alt_setting>
   11ad6:	7038      	strb	r0, [r7, #0]
				*len = 1;
   11ad8:	2001      	movs	r0, #1
   11ada:	6030      	str	r0, [r6, #0]
				return true;
   11adc:	e000      	b.n	11ae0 <usb_get_interface+0x34>
	}

	return false;
   11ade:	2000      	movs	r0, #0
}
   11ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ae2:	bf00      	nop
   11ae4:	200029dc 	.word	0x200029dc

00011ae8 <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
   11ae8:	4b03      	ldr	r3, [pc, #12]	; (11af8 <is_device_configured+0x10>)
   11aea:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
   11aee:	3800      	subs	r0, #0
   11af0:	bf18      	it	ne
   11af2:	2001      	movne	r0, #1
   11af4:	4770      	bx	lr
   11af6:	bf00      	nop
   11af8:	200029dc 	.word	0x200029dc

00011afc <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   11afc:	4b07      	ldr	r3, [pc, #28]	; (11b1c <is_interface_valid+0x20>)
   11afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
   11b00:	e000      	b.n	11b04 <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
   11b02:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
   11b04:	781a      	ldrb	r2, [r3, #0]
   11b06:	b13a      	cbz	r2, 11b18 <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   11b08:	7859      	ldrb	r1, [r3, #1]
   11b0a:	2902      	cmp	r1, #2
   11b0c:	d1f9      	bne.n	11b02 <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
   11b0e:	7919      	ldrb	r1, [r3, #4]
   11b10:	4281      	cmp	r1, r0
   11b12:	d9f6      	bls.n	11b02 <is_interface_valid+0x6>
				return true;
   11b14:	2001      	movs	r0, #1
	}

	return false;
}
   11b16:	4770      	bx	lr
	return false;
   11b18:	2000      	movs	r0, #0
   11b1a:	4770      	bx	lr
   11b1c:	200029dc 	.word	0x200029dc

00011b20 <is_ep_valid>:
 * either Control Endpoint or one used by the device.
 *
 * @return true if endpoint exists - valid
 */
static bool is_ep_valid(uint8_t ep)
{
   11b20:	b470      	push	{r4, r5, r6}
	size_t size = (__usb_data_end - __usb_data_start);
   11b22:	4b16      	ldr	r3, [pc, #88]	; (11b7c <is_ep_valid+0x5c>)
   11b24:	4a16      	ldr	r2, [pc, #88]	; (11b80 <is_ep_valid+0x60>)
   11b26:	1a9b      	subs	r3, r3, r2
   11b28:	109b      	asrs	r3, r3, #2
   11b2a:	4e16      	ldr	r6, [pc, #88]	; (11b84 <is_ep_valid+0x64>)
   11b2c:	fb06 f603 	mul.w	r6, r6, r3
	const struct usb_ep_cfg_data *ep_data;
	const struct usb_cfg_data *cfg;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
   11b30:	f030 0380 	bics.w	r3, r0, #128	; 0x80
   11b34:	d01d      	beq.n	11b72 <is_ep_valid+0x52>
		return true;
	}

	for (size_t i = 0; i < size; i++) {
   11b36:	2400      	movs	r4, #0
   11b38:	42b4      	cmp	r4, r6
   11b3a:	d218      	bcs.n	11b6e <is_ep_valid+0x4e>
		cfg = &__usb_data_start[i];
		ep_data = cfg->endpoint;
   11b3c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   11b40:	4b0f      	ldr	r3, [pc, #60]	; (11b80 <is_ep_valid+0x60>)
   11b42:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   11b46:	6a15      	ldr	r5, [r2, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
   11b48:	2300      	movs	r3, #0
   11b4a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   11b4e:	490c      	ldr	r1, [pc, #48]	; (11b80 <is_ep_valid+0x60>)
   11b50:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   11b54:	7f12      	ldrb	r2, [r2, #28]
   11b56:	429a      	cmp	r2, r3
   11b58:	d907      	bls.n	11b6a <is_ep_valid+0x4a>
			if (ep_data[n].ep_addr == ep) {
   11b5a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   11b5e:	7912      	ldrb	r2, [r2, #4]
   11b60:	4282      	cmp	r2, r0
   11b62:	d008      	beq.n	11b76 <is_ep_valid+0x56>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
   11b64:	3301      	adds	r3, #1
   11b66:	b2db      	uxtb	r3, r3
   11b68:	e7ef      	b.n	11b4a <is_ep_valid+0x2a>
	for (size_t i = 0; i < size; i++) {
   11b6a:	3401      	adds	r4, #1
   11b6c:	e7e4      	b.n	11b38 <is_ep_valid+0x18>
				return true;
			}
		}
	}

	return false;
   11b6e:	2000      	movs	r0, #0
   11b70:	e002      	b.n	11b78 <is_ep_valid+0x58>
		return true;
   11b72:	2001      	movs	r0, #1
   11b74:	e000      	b.n	11b78 <is_ep_valid+0x58>
				return true;
   11b76:	2001      	movs	r0, #1
}
   11b78:	bc70      	pop	{r4, r5, r6}
   11b7a:	4770      	bx	lr
   11b7c:	20000ab4 	.word	0x20000ab4
   11b80:	20000a90 	.word	0x20000a90
   11b84:	38e38e39 	.word	0x38e38e39

00011b88 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
   11b88:	4b01      	ldr	r3, [pc, #4]	; (11b90 <usb_register_custom_req_handler+0x8>)
   11b8a:	6198      	str	r0, [r3, #24]
}
   11b8c:	4770      	bx	lr
   11b8e:	bf00      	nop
   11b90:	200029dc 	.word	0x200029dc

00011b94 <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
   11b94:	4b01      	ldr	r3, [pc, #4]	; (11b9c <usb_register_status_callback+0x8>)
   11b96:	61d8      	str	r0, [r3, #28]
}
   11b98:	4770      	bx	lr
   11b9a:	bf00      	nop
   11b9c:	200029dc 	.word	0x200029dc

00011ba0 <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
   11ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ba4:	4606      	mov	r6, r0
	size_t size = (__usb_data_end - __usb_data_start);
   11ba6:	4b14      	ldr	r3, [pc, #80]	; (11bf8 <foreach_ep+0x58>)
   11ba8:	4a14      	ldr	r2, [pc, #80]	; (11bfc <foreach_ep+0x5c>)
   11baa:	eba3 0802 	sub.w	r8, r3, r2
   11bae:	ea4f 03a8 	mov.w	r3, r8, asr #2
   11bb2:	4a13      	ldr	r2, [pc, #76]	; (11c00 <foreach_ep+0x60>)
   11bb4:	fb02 f803 	mul.w	r8, r2, r3

	for (size_t i = 0; i < size; i++) {
   11bb8:	2500      	movs	r5, #0
   11bba:	4545      	cmp	r5, r8
   11bbc:	d218      	bcs.n	11bf0 <foreach_ep+0x50>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
		struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   11bbe:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   11bc2:	4a0e      	ldr	r2, [pc, #56]	; (11bfc <foreach_ep+0x5c>)
   11bc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11bc8:	6a1f      	ldr	r7, [r3, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
   11bca:	2400      	movs	r4, #0
   11bcc:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   11bd0:	4a0a      	ldr	r2, [pc, #40]	; (11bfc <foreach_ep+0x5c>)
   11bd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11bd6:	7f1b      	ldrb	r3, [r3, #28]
   11bd8:	42a3      	cmp	r3, r4
   11bda:	d907      	bls.n	11bec <foreach_ep+0x4c>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
   11bdc:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   11be0:	47b0      	blx	r6
			if (ret < 0) {
   11be2:	2800      	cmp	r0, #0
   11be4:	db05      	blt.n	11bf2 <foreach_ep+0x52>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
   11be6:	3401      	adds	r4, #1
   11be8:	b2e4      	uxtb	r4, r4
   11bea:	e7ef      	b.n	11bcc <foreach_ep+0x2c>
	for (size_t i = 0; i < size; i++) {
   11bec:	3501      	adds	r5, #1
   11bee:	e7e4      	b.n	11bba <foreach_ep+0x1a>
				return ret;
			}
		}
	}

	return 0;
   11bf0:	2000      	movs	r0, #0
}
   11bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11bf6:	bf00      	nop
   11bf8:	20000ab4 	.word	0x20000ab4
   11bfc:	20000a90 	.word	0x20000a90
   11c00:	38e38e39 	.word	0x38e38e39

00011c04 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
   11c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
   11c06:	4f13      	ldr	r7, [pc, #76]	; (11c54 <class_handler+0x50>)
   11c08:	4b13      	ldr	r3, [pc, #76]	; (11c58 <class_handler+0x54>)
   11c0a:	1aff      	subs	r7, r7, r3
   11c0c:	10bb      	asrs	r3, r7, #2
   11c0e:	4f13      	ldr	r7, [pc, #76]	; (11c5c <class_handler+0x58>)
   11c10:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
   11c14:	2300      	movs	r3, #0
   11c16:	e000      	b.n	11c1a <class_handler+0x16>
   11c18:	3301      	adds	r3, #1
   11c1a:	42bb      	cmp	r3, r7
   11c1c:	d216      	bcs.n	11c4c <class_handler+0x48>
		iface = &(__usb_data_start[i].interface);
		if_descr = __usb_data_start[i].interface_descriptor;
   11c1e:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
   11c22:	4d0d      	ldr	r5, [pc, #52]	; (11c58 <class_handler+0x54>)
   11c24:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   11c28:	6866      	ldr	r6, [r4, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   11c2a:	4c0d      	ldr	r4, [pc, #52]	; (11c60 <class_handler+0x5c>)
   11c2c:	6a64      	ldr	r4, [r4, #36]	; 0x24
   11c2e:	42a6      	cmp	r6, r4
   11c30:	d3f2      	bcc.n	11c18 <class_handler+0x14>
			continue;
		}

		if (iface->class_handler &&
   11c32:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
   11c36:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   11c3a:	6924      	ldr	r4, [r4, #16]
   11c3c:	2c00      	cmp	r4, #0
   11c3e:	d0eb      	beq.n	11c18 <class_handler+0x14>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   11c40:	78b6      	ldrb	r6, [r6, #2]
   11c42:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   11c44:	42ae      	cmp	r6, r5
   11c46:	d1e7      	bne.n	11c18 <class_handler+0x14>
			return iface->class_handler(pSetup, len, data);
   11c48:	47a0      	blx	r4
   11c4a:	e001      	b.n	11c50 <class_handler+0x4c>
		}
	}

	return -ENOTSUP;
   11c4c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   11c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11c52:	bf00      	nop
   11c54:	20000ab4 	.word	0x20000ab4
   11c58:	20000a90 	.word	0x20000a90
   11c5c:	38e38e39 	.word	0x38e38e39
   11c60:	200029dc 	.word	0x200029dc

00011c64 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   11c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11c68:	4607      	mov	r7, r0
   11c6a:	4688      	mov	r8, r1
   11c6c:	4691      	mov	r9, r2
	size_t size = (__usb_data_end - __usb_data_start);
   11c6e:	4e19      	ldr	r6, [pc, #100]	; (11cd4 <custom_handler+0x70>)
   11c70:	4b19      	ldr	r3, [pc, #100]	; (11cd8 <custom_handler+0x74>)
   11c72:	1af6      	subs	r6, r6, r3
   11c74:	10b3      	asrs	r3, r6, #2
   11c76:	4e19      	ldr	r6, [pc, #100]	; (11cdc <custom_handler+0x78>)
   11c78:	fb06 f603 	mul.w	r6, r6, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
   11c7c:	2400      	movs	r4, #0
   11c7e:	e005      	b.n	11c8c <custom_handler+0x28>
		if (iface->custom_handler == NULL) {
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
			return iface->custom_handler(pSetup, len, data);
   11c80:	464a      	mov	r2, r9
   11c82:	4641      	mov	r1, r8
   11c84:	4638      	mov	r0, r7
   11c86:	47a8      	blx	r5
   11c88:	e021      	b.n	11cce <custom_handler+0x6a>
	for (size_t i = 0; i < size; i++) {
   11c8a:	3401      	adds	r4, #1
   11c8c:	42a6      	cmp	r6, r4
   11c8e:	d91c      	bls.n	11cca <custom_handler+0x66>
		if_descr = __usb_data_start[i].interface_descriptor;
   11c90:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   11c94:	4d10      	ldr	r5, [pc, #64]	; (11cd8 <custom_handler+0x74>)
   11c96:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   11c9a:	685b      	ldr	r3, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   11c9c:	4a10      	ldr	r2, [pc, #64]	; (11ce0 <custom_handler+0x7c>)
   11c9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
   11ca0:	4293      	cmp	r3, r2
   11ca2:	d3f2      	bcc.n	11c8a <custom_handler+0x26>
		if (iface->custom_handler == NULL) {
   11ca4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   11ca8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   11cac:	6995      	ldr	r5, [r2, #24]
   11cae:	2d00      	cmp	r5, #0
   11cb0:	d0eb      	beq.n	11c8a <custom_handler+0x26>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   11cb2:	7899      	ldrb	r1, [r3, #2]
   11cb4:	793a      	ldrb	r2, [r7, #4]
   11cb6:	4291      	cmp	r1, r2
   11cb8:	d0e2      	beq.n	11c80 <custom_handler+0x1c>
			 * the first interface, but the request may be for
			 * subsequent ones, so forward each request to audio.
			 * The class does not actively engage in request
			 * handling and therefore we can ignore return value.
			 */
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   11cba:	795b      	ldrb	r3, [r3, #5]
   11cbc:	2b01      	cmp	r3, #1
   11cbe:	d1e4      	bne.n	11c8a <custom_handler+0x26>
				(void)iface->custom_handler(pSetup, len, data);
   11cc0:	464a      	mov	r2, r9
   11cc2:	4641      	mov	r1, r8
   11cc4:	4638      	mov	r0, r7
   11cc6:	47a8      	blx	r5
   11cc8:	e7df      	b.n	11c8a <custom_handler+0x26>
			}
		}
	}

	return -ENOTSUP;
   11cca:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   11cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11cd2:	bf00      	nop
   11cd4:	20000ab4 	.word	0x20000ab4
   11cd8:	20000a90 	.word	0x20000a90
   11cdc:	38e38e39 	.word	0x38e38e39
   11ce0:	200029dc 	.word	0x200029dc

00011ce4 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   11ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11ce8:	4681      	mov	r9, r0
   11cea:	4688      	mov	r8, r1
   11cec:	4617      	mov	r7, r2
	size_t size = (__usb_data_end - __usb_data_start);
   11cee:	4e10      	ldr	r6, [pc, #64]	; (11d30 <vendor_handler+0x4c>)
   11cf0:	4b10      	ldr	r3, [pc, #64]	; (11d34 <vendor_handler+0x50>)
   11cf2:	1af6      	subs	r6, r6, r3
   11cf4:	10b3      	asrs	r3, r6, #2
   11cf6:	4e10      	ldr	r6, [pc, #64]	; (11d38 <vendor_handler+0x54>)
   11cf8:	fb06 f603 	mul.w	r6, r6, r3
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	for (size_t i = 0; i < size; i++) {
   11cfc:	2400      	movs	r4, #0
   11cfe:	e000      	b.n	11d02 <vendor_handler+0x1e>
   11d00:	3401      	adds	r4, #1
   11d02:	42a6      	cmp	r6, r4
   11d04:	d90f      	bls.n	11d26 <vendor_handler+0x42>
		iface = &(__usb_data_start[i].interface);
		if (iface->vendor_handler) {
   11d06:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   11d0a:	4d0a      	ldr	r5, [pc, #40]	; (11d34 <vendor_handler+0x50>)
   11d0c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   11d10:	695b      	ldr	r3, [r3, #20]
   11d12:	2b00      	cmp	r3, #0
   11d14:	d0f4      	beq.n	11d00 <vendor_handler+0x1c>
			if (!iface->vendor_handler(pSetup, len, data)) {
   11d16:	463a      	mov	r2, r7
   11d18:	4641      	mov	r1, r8
   11d1a:	4648      	mov	r0, r9
   11d1c:	4798      	blx	r3
   11d1e:	4603      	mov	r3, r0
   11d20:	2800      	cmp	r0, #0
   11d22:	d1ed      	bne.n	11d00 <vendor_handler+0x1c>
   11d24:	e001      	b.n	11d2a <vendor_handler+0x46>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   11d26:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   11d2a:	4618      	mov	r0, r3
   11d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11d30:	20000ab4 	.word	0x20000ab4
   11d34:	20000a90 	.word	0x20000a90
   11d38:	38e38e39 	.word	0x38e38e39

00011d3c <usb_halt_endpoint_req>:
{
   11d3c:	b570      	push	{r4, r5, r6, lr}
   11d3e:	b082      	sub	sp, #8
   11d40:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   11d42:	7904      	ldrb	r4, [r0, #4]
   11d44:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!is_ep_valid(ep)) {
   11d48:	4620      	mov	r0, r4
   11d4a:	f7ff fee9 	bl	11b20 <is_ep_valid>
   11d4e:	4606      	mov	r6, r0
   11d50:	b130      	cbz	r0, 11d60 <usb_halt_endpoint_req+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   11d52:	f034 0380 	bics.w	r3, r4, #128	; 0x80
   11d56:	d006      	beq.n	11d66 <usb_halt_endpoint_req+0x2a>
   11d58:	f7ff fec6 	bl	11ae8 <is_device_configured>
   11d5c:	b918      	cbnz	r0, 11d66 <usb_halt_endpoint_req+0x2a>
	return false;
   11d5e:	4606      	mov	r6, r0
}
   11d60:	4630      	mov	r0, r6
   11d62:	b002      	add	sp, #8
   11d64:	bd70      	pop	{r4, r5, r6, pc}
		if (halt) {
   11d66:	b15d      	cbz	r5, 11d80 <usb_halt_endpoint_req+0x44>
			usb_dc_ep_set_stall(ep);
   11d68:	4620      	mov	r0, r4
   11d6a:	f006 fe85 	bl	18a78 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   11d6e:	4b0a      	ldr	r3, [pc, #40]	; (11d98 <usb_halt_endpoint_req+0x5c>)
   11d70:	69db      	ldr	r3, [r3, #28]
   11d72:	2b00      	cmp	r3, #0
   11d74:	d0f4      	beq.n	11d60 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   11d76:	f10d 0107 	add.w	r1, sp, #7
   11d7a:	2008      	movs	r0, #8
   11d7c:	4798      	blx	r3
   11d7e:	e7ef      	b.n	11d60 <usb_halt_endpoint_req+0x24>
			usb_dc_ep_clear_stall(ep);
   11d80:	4620      	mov	r0, r4
   11d82:	f006 fea9 	bl	18ad8 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   11d86:	4b04      	ldr	r3, [pc, #16]	; (11d98 <usb_halt_endpoint_req+0x5c>)
   11d88:	69db      	ldr	r3, [r3, #28]
   11d8a:	2b00      	cmp	r3, #0
   11d8c:	d0e8      	beq.n	11d60 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   11d8e:	f10d 0107 	add.w	r1, sp, #7
   11d92:	2009      	movs	r0, #9
   11d94:	4798      	blx	r3
		return true;
   11d96:	e7e3      	b.n	11d60 <usb_halt_endpoint_req+0x24>
   11d98:	200029dc 	.word	0x200029dc

00011d9c <set_endpoint>:
{
   11d9c:	b500      	push	{lr}
   11d9e:	b083      	sub	sp, #12
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   11da0:	7883      	ldrb	r3, [r0, #2]
   11da2:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   11da6:	8883      	ldrh	r3, [r0, #4]
   11da8:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   11dac:	78c3      	ldrb	r3, [r0, #3]
   11dae:	f003 0303 	and.w	r3, r3, #3
   11db2:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
   11db6:	4668      	mov	r0, sp
   11db8:	f006 fe36 	bl	18a28 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   11dbc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11dc0:	d000      	beq.n	11dc4 <set_endpoint+0x28>
	} else if (ret) {
   11dc2:	b970      	cbnz	r0, 11de2 <set_endpoint+0x46>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   11dc4:	f89d 0000 	ldrb.w	r0, [sp]
   11dc8:	f006 fed0 	bl	18b6c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   11dcc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11dd0:	d000      	beq.n	11dd4 <set_endpoint+0x38>
	} else if (ret) {
   11dd2:	b940      	cbnz	r0, 11de6 <set_endpoint+0x4a>
	usb_dev.configured = true;
   11dd4:	2001      	movs	r0, #1
   11dd6:	4b05      	ldr	r3, [pc, #20]	; (11dec <set_endpoint+0x50>)
   11dd8:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
}
   11ddc:	b003      	add	sp, #12
   11dde:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   11de2:	2000      	movs	r0, #0
   11de4:	e7fa      	b.n	11ddc <set_endpoint+0x40>
		return false;
   11de6:	2000      	movs	r0, #0
   11de8:	e7f8      	b.n	11ddc <set_endpoint+0x40>
   11dea:	bf00      	nop
   11dec:	200029dc 	.word	0x200029dc

00011df0 <usb_reset_alt_setting>:
{
   11df0:	b508      	push	{r3, lr}
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   11df2:	2208      	movs	r2, #8
   11df4:	2100      	movs	r1, #0
   11df6:	4802      	ldr	r0, [pc, #8]	; (11e00 <usb_reset_alt_setting+0x10>)
   11df8:	f010 fe3d 	bl	22a76 <memset>
}
   11dfc:	bd08      	pop	{r3, pc}
   11dfe:	bf00      	nop
   11e00:	20002a97 	.word	0x20002a97

00011e04 <usb_set_configuration>:
{
   11e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e08:	4605      	mov	r5, r0
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   11e0a:	4b23      	ldr	r3, [pc, #140]	; (11e98 <usb_set_configuration+0x94>)
   11e0c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (setup->wValue == 0U) {
   11e0e:	8843      	ldrh	r3, [r0, #2]
   11e10:	b11b      	cbz	r3, 11e1a <usb_set_configuration+0x16>
	bool found = false;
   11e12:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
   11e14:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   11e16:	46b0      	mov	r8, r6
   11e18:	e010      	b.n	11e3c <usb_set_configuration+0x38>
		usb_reset_alt_setting();
   11e1a:	f7ff ffe9 	bl	11df0 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   11e1e:	886a      	ldrh	r2, [r5, #2]
   11e20:	4b1d      	ldr	r3, [pc, #116]	; (11e98 <usb_set_configuration+0x94>)
   11e22:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
   11e26:	69db      	ldr	r3, [r3, #28]
   11e28:	b113      	cbz	r3, 11e30 <usb_set_configuration+0x2c>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   11e2a:	491c      	ldr	r1, [pc, #112]	; (11e9c <usb_set_configuration+0x98>)
   11e2c:	2003      	movs	r0, #3
   11e2e:	4798      	blx	r3
		return true;
   11e30:	2701      	movs	r7, #1
   11e32:	e020      	b.n	11e76 <usb_set_configuration+0x72>
			cur_alt_setting =
   11e34:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
   11e38:	7823      	ldrb	r3, [r4, #0]
   11e3a:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
   11e3c:	7823      	ldrb	r3, [r4, #0]
   11e3e:	b1cb      	cbz	r3, 11e74 <usb_set_configuration+0x70>
		switch (p[DESC_bDescriptorType]) {
   11e40:	7863      	ldrb	r3, [r4, #1]
   11e42:	2b04      	cmp	r3, #4
   11e44:	d0f6      	beq.n	11e34 <usb_set_configuration+0x30>
   11e46:	2b05      	cmp	r3, #5
   11e48:	d008      	beq.n	11e5c <usb_set_configuration+0x58>
   11e4a:	2b02      	cmp	r3, #2
   11e4c:	d1f4      	bne.n	11e38 <usb_set_configuration+0x34>
			cur_config = p[CONF_DESC_bConfigurationValue];
   11e4e:	7966      	ldrb	r6, [r4, #5]
			if (cur_config == setup->wValue) {
   11e50:	b2b2      	uxth	r2, r6
   11e52:	886b      	ldrh	r3, [r5, #2]
   11e54:	429a      	cmp	r2, r3
   11e56:	d1ef      	bne.n	11e38 <usb_set_configuration+0x34>
				found = true;
   11e58:	2701      	movs	r7, #1
   11e5a:	e7ed      	b.n	11e38 <usb_set_configuration+0x34>
			if ((cur_config != setup->wValue) ||
   11e5c:	b2b3      	uxth	r3, r6
   11e5e:	886a      	ldrh	r2, [r5, #2]
   11e60:	4293      	cmp	r3, r2
   11e62:	d1e9      	bne.n	11e38 <usb_set_configuration+0x34>
   11e64:	f1b8 0f00 	cmp.w	r8, #0
   11e68:	d1e6      	bne.n	11e38 <usb_set_configuration+0x34>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   11e6a:	4620      	mov	r0, r4
   11e6c:	f7ff ff96 	bl	11d9c <set_endpoint>
   11e70:	4607      	mov	r7, r0
			break;
   11e72:	e7e1      	b.n	11e38 <usb_set_configuration+0x34>
	if (found) {
   11e74:	b917      	cbnz	r7, 11e7c <usb_set_configuration+0x78>
}
   11e76:	4638      	mov	r0, r7
   11e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_reset_alt_setting();
   11e7c:	f7ff ffb8 	bl	11df0 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   11e80:	886a      	ldrh	r2, [r5, #2]
   11e82:	4b05      	ldr	r3, [pc, #20]	; (11e98 <usb_set_configuration+0x94>)
   11e84:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
   11e88:	69db      	ldr	r3, [r3, #28]
   11e8a:	2b00      	cmp	r3, #0
   11e8c:	d0f3      	beq.n	11e76 <usb_set_configuration+0x72>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   11e8e:	4903      	ldr	r1, [pc, #12]	; (11e9c <usb_set_configuration+0x98>)
   11e90:	2003      	movs	r0, #3
   11e92:	4798      	blx	r3
   11e94:	e7ef      	b.n	11e76 <usb_set_configuration+0x72>
   11e96:	bf00      	nop
   11e98:	200029dc 	.word	0x200029dc
   11e9c:	20002a96 	.word	0x20002a96

00011ea0 <usb_handle_std_device_req>:
{
   11ea0:	b510      	push	{r4, lr}
	uint8_t *data = *data_buf;
   11ea2:	6814      	ldr	r4, [r2, #0]
	if (usb_reqtype_is_to_host(setup)) {
   11ea4:	f990 3000 	ldrsb.w	r3, [r0]
   11ea8:	2b00      	cmp	r3, #0
   11eaa:	db06      	blt.n	11eba <usb_handle_std_device_req+0x1a>
		switch (setup->bRequest) {
   11eac:	7843      	ldrb	r3, [r0, #1]
   11eae:	2b05      	cmp	r3, #5
   11eb0:	d018      	beq.n	11ee4 <usb_handle_std_device_req+0x44>
   11eb2:	2b09      	cmp	r3, #9
   11eb4:	d01d      	beq.n	11ef2 <usb_handle_std_device_req+0x52>
   11eb6:	2000      	movs	r0, #0
}
   11eb8:	bd10      	pop	{r4, pc}
		switch (setup->bRequest) {
   11eba:	7843      	ldrb	r3, [r0, #1]
   11ebc:	2b06      	cmp	r3, #6
   11ebe:	d007      	beq.n	11ed0 <usb_handle_std_device_req+0x30>
   11ec0:	2b08      	cmp	r3, #8
   11ec2:	d008      	beq.n	11ed6 <usb_handle_std_device_req+0x36>
   11ec4:	b10b      	cbz	r3, 11eca <usb_handle_std_device_req+0x2a>
   11ec6:	2000      	movs	r0, #0
   11ec8:	e7f6      	b.n	11eb8 <usb_handle_std_device_req+0x18>
			return usb_get_status(setup, len, data_buf);
   11eca:	f00f ffe5 	bl	21e98 <usb_get_status>
   11ece:	e7f3      	b.n	11eb8 <usb_handle_std_device_req+0x18>
			return usb_get_descriptor(setup, len, data_buf);
   11ed0:	f7ff fdbe 	bl	11a50 <usb_get_descriptor>
   11ed4:	e7f0      	b.n	11eb8 <usb_handle_std_device_req+0x18>
			data[0] = usb_dev.configuration;
   11ed6:	4b08      	ldr	r3, [pc, #32]	; (11ef8 <usb_handle_std_device_req+0x58>)
   11ed8:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   11edc:	7023      	strb	r3, [r4, #0]
			*len = 1;
   11ede:	2001      	movs	r0, #1
   11ee0:	6008      	str	r0, [r1, #0]
			return true;
   11ee2:	e7e9      	b.n	11eb8 <usb_handle_std_device_req+0x18>
			return !usb_dc_set_address(setup->wValue);
   11ee4:	7880      	ldrb	r0, [r0, #2]
   11ee6:	f006 fd8d 	bl	18a04 <usb_dc_set_address>
   11eea:	fab0 f080 	clz	r0, r0
   11eee:	0940      	lsrs	r0, r0, #5
   11ef0:	e7e2      	b.n	11eb8 <usb_handle_std_device_req+0x18>
			return usb_set_configuration(setup);
   11ef2:	f7ff ff87 	bl	11e04 <usb_set_configuration>
   11ef6:	e7df      	b.n	11eb8 <usb_handle_std_device_req+0x18>
   11ef8:	200029dc 	.word	0x200029dc

00011efc <usb_set_interface>:
{
   11efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11f00:	4606      	mov	r6, r0
	const uint8_t *p = usb_dev.descriptors;
   11f02:	4b1b      	ldr	r3, [pc, #108]	; (11f70 <usb_set_interface+0x74>)
   11f04:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
   11f06:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   11f08:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   11f0a:	46a8      	mov	r8, r5
	const uint8_t *if_desc = NULL;
   11f0c:	46b9      	mov	r9, r7
   11f0e:	e008      	b.n	11f22 <usb_set_interface+0x26>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   11f10:	f894 8003 	ldrb.w	r8, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   11f14:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == setup->wIndex &&
   11f16:	b2ab      	uxth	r3, r5
   11f18:	88b0      	ldrh	r0, [r6, #4]
   11f1a:	4283      	cmp	r3, r0
   11f1c:	d013      	beq.n	11f46 <usb_set_interface+0x4a>
		p += p[DESC_bLength];
   11f1e:	7823      	ldrb	r3, [r4, #0]
   11f20:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
   11f22:	7823      	ldrb	r3, [r4, #0]
   11f24:	b1db      	cbz	r3, 11f5e <usb_set_interface+0x62>
		switch (p[DESC_bDescriptorType]) {
   11f26:	7863      	ldrb	r3, [r4, #1]
   11f28:	2b04      	cmp	r3, #4
   11f2a:	d0f1      	beq.n	11f10 <usb_set_interface+0x14>
   11f2c:	2b05      	cmp	r3, #5
   11f2e:	d1f6      	bne.n	11f1e <usb_set_interface+0x22>
			if (cur_iface == setup->wIndex) {
   11f30:	b2ab      	uxth	r3, r5
   11f32:	88b2      	ldrh	r2, [r6, #4]
   11f34:	4293      	cmp	r3, r2
   11f36:	d1f2      	bne.n	11f1e <usb_set_interface+0x22>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
   11f38:	78b2      	ldrb	r2, [r6, #2]
   11f3a:	4641      	mov	r1, r8
   11f3c:	4620      	mov	r0, r4
   11f3e:	f00f ffc7 	bl	21ed0 <usb_eps_reconfigure>
   11f42:	4607      	mov	r7, r0
   11f44:	e7eb      	b.n	11f1e <usb_set_interface+0x22>
			    cur_alt_setting == setup->wValue) {
   11f46:	fa1f f388 	uxth.w	r3, r8
   11f4a:	8871      	ldrh	r1, [r6, #2]
			if (cur_iface == setup->wIndex &&
   11f4c:	428b      	cmp	r3, r1
   11f4e:	d1e6      	bne.n	11f1e <usb_set_interface+0x22>
				ret = usb_set_alt_setting(setup->wIndex,
   11f50:	b2c9      	uxtb	r1, r1
   11f52:	b2c0      	uxtb	r0, r0
   11f54:	f7ff fd42 	bl	119dc <usb_set_alt_setting>
   11f58:	4607      	mov	r7, r0
				if_desc = (void *)p;
   11f5a:	46a1      	mov	r9, r4
   11f5c:	e7df      	b.n	11f1e <usb_set_interface+0x22>
	if (usb_dev.status_callback) {
   11f5e:	4b04      	ldr	r3, [pc, #16]	; (11f70 <usb_set_interface+0x74>)
   11f60:	69db      	ldr	r3, [r3, #28]
   11f62:	b113      	cbz	r3, 11f6a <usb_set_interface+0x6e>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   11f64:	4649      	mov	r1, r9
   11f66:	2007      	movs	r0, #7
   11f68:	4798      	blx	r3
}
   11f6a:	4638      	mov	r0, r7
   11f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11f70:	200029dc 	.word	0x200029dc

00011f74 <usb_handle_standard_request>:
{
   11f74:	b570      	push	{r4, r5, r6, lr}
   11f76:	4604      	mov	r4, r0
   11f78:	460d      	mov	r5, r1
   11f7a:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
   11f7c:	4b18      	ldr	r3, [pc, #96]	; (11fe0 <usb_handle_standard_request+0x6c>)
   11f7e:	699b      	ldr	r3, [r3, #24]
   11f80:	b10b      	cbz	r3, 11f86 <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   11f82:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   11f84:	b148      	cbz	r0, 11f9a <usb_handle_standard_request+0x26>
	switch (setup->RequestType.recipient) {
   11f86:	7823      	ldrb	r3, [r4, #0]
   11f88:	f003 031f 	and.w	r3, r3, #31
   11f8c:	2b01      	cmp	r3, #1
   11f8e:	d00d      	beq.n	11fac <usb_handle_standard_request+0x38>
   11f90:	2b02      	cmp	r3, #2
   11f92:	d013      	beq.n	11fbc <usb_handle_standard_request+0x48>
   11f94:	b113      	cbz	r3, 11f9c <usb_handle_standard_request+0x28>
   11f96:	f06f 0015 	mvn.w	r0, #21
}
   11f9a:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   11f9c:	4632      	mov	r2, r6
   11f9e:	4629      	mov	r1, r5
   11fa0:	4620      	mov	r0, r4
   11fa2:	f7ff ff7d 	bl	11ea0 <usb_handle_std_device_req>
   11fa6:	b188      	cbz	r0, 11fcc <usb_handle_standard_request+0x58>
	int rc = 0;
   11fa8:	2000      	movs	r0, #0
   11faa:	e7f6      	b.n	11f9a <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   11fac:	4632      	mov	r2, r6
   11fae:	4629      	mov	r1, r5
   11fb0:	4620      	mov	r0, r4
   11fb2:	f00f ff96 	bl	21ee2 <usb_handle_std_interface_req>
   11fb6:	b160      	cbz	r0, 11fd2 <usb_handle_standard_request+0x5e>
	int rc = 0;
   11fb8:	2000      	movs	r0, #0
   11fba:	e7ee      	b.n	11f9a <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   11fbc:	4632      	mov	r2, r6
   11fbe:	4629      	mov	r1, r5
   11fc0:	4620      	mov	r0, r4
   11fc2:	f00f ffdb 	bl	21f7c <usb_handle_std_endpoint_req>
   11fc6:	b138      	cbz	r0, 11fd8 <usb_handle_standard_request+0x64>
	int rc = 0;
   11fc8:	2000      	movs	r0, #0
   11fca:	e7e6      	b.n	11f9a <usb_handle_standard_request+0x26>
			rc = -EINVAL;
   11fcc:	f06f 0015 	mvn.w	r0, #21
   11fd0:	e7e3      	b.n	11f9a <usb_handle_standard_request+0x26>
			rc = -EINVAL;
   11fd2:	f06f 0015 	mvn.w	r0, #21
   11fd6:	e7e0      	b.n	11f9a <usb_handle_standard_request+0x26>
			rc = -EINVAL;
   11fd8:	f06f 0015 	mvn.w	r0, #21
   11fdc:	e7dd      	b.n	11f9a <usb_handle_standard_request+0x26>
   11fde:	bf00      	nop
   11fe0:	200029dc 	.word	0x200029dc

00011fe4 <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
   11fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
   11fe6:	4f15      	ldr	r7, [pc, #84]	; (1203c <composite_setup_ep_cb+0x58>)
   11fe8:	4b15      	ldr	r3, [pc, #84]	; (12040 <composite_setup_ep_cb+0x5c>)
   11fea:	1aff      	subs	r7, r7, r3
   11fec:	10bb      	asrs	r3, r7, #2
   11fee:	4f15      	ldr	r7, [pc, #84]	; (12044 <composite_setup_ep_cb+0x60>)
   11ff0:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_ep_cfg_data *ep_data;

	for (size_t i = 0; i < size; i++) {
   11ff4:	2500      	movs	r5, #0
   11ff6:	42af      	cmp	r7, r5
   11ff8:	d91b      	bls.n	12032 <composite_setup_ep_cb+0x4e>
		ep_data = __usb_data_start[i].endpoint;
   11ffa:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   11ffe:	4a10      	ldr	r2, [pc, #64]	; (12040 <composite_setup_ep_cb+0x5c>)
   12000:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12004:	6a1e      	ldr	r6, [r3, #32]
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
   12006:	2400      	movs	r4, #0
   12008:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1200c:	4a0c      	ldr	r2, [pc, #48]	; (12040 <composite_setup_ep_cb+0x5c>)
   1200e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12012:	7f1b      	ldrb	r3, [r3, #28]
   12014:	429c      	cmp	r4, r3
   12016:	d20a      	bcs.n	1202e <composite_setup_ep_cb+0x4a>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   12018:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
   1201c:	f856 1034 	ldr.w	r1, [r6, r4, lsl #3]
   12020:	7918      	ldrb	r0, [r3, #4]
   12022:	f006 ff63 	bl	18eec <usb_dc_ep_set_callback>
   12026:	b930      	cbnz	r0, 12036 <composite_setup_ep_cb+0x52>
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
   12028:	3401      	adds	r4, #1
   1202a:	b2e4      	uxtb	r4, r4
   1202c:	e7ec      	b.n	12008 <composite_setup_ep_cb+0x24>
	for (size_t i = 0; i < size; i++) {
   1202e:	3501      	adds	r5, #1
   12030:	e7e1      	b.n	11ff6 <composite_setup_ep_cb+0x12>
				return -1;
			}
		}
	}

	return 0;
   12032:	2000      	movs	r0, #0
   12034:	e001      	b.n	1203a <composite_setup_ep_cb+0x56>
				return -1;
   12036:	f04f 30ff 	mov.w	r0, #4294967295
}
   1203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1203c:	20000ab4 	.word	0x20000ab4
   12040:	20000a90 	.word	0x20000a90
   12044:	38e38e39 	.word	0x38e38e39

00012048 <forward_status_cb>:
{
   12048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1204a:	4606      	mov	r6, r0
   1204c:	460f      	mov	r7, r1
	size_t size = (__usb_data_end - __usb_data_start);
   1204e:	4d1c      	ldr	r5, [pc, #112]	; (120c0 <forward_status_cb+0x78>)
   12050:	4b1c      	ldr	r3, [pc, #112]	; (120c4 <forward_status_cb+0x7c>)
   12052:	1aed      	subs	r5, r5, r3
   12054:	10ab      	asrs	r3, r5, #2
   12056:	4d1c      	ldr	r5, [pc, #112]	; (120c8 <forward_status_cb+0x80>)
   12058:	fb05 f503 	mul.w	r5, r5, r3
	if (status == USB_DC_DISCONNECTED) {
   1205c:	2804      	cmp	r0, #4
   1205e:	d005      	beq.n	1206c <forward_status_cb+0x24>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
   12060:	1f33      	subs	r3, r6, #4
   12062:	b2db      	uxtb	r3, r3
   12064:	2b01      	cmp	r3, #1
   12066:	d904      	bls.n	12072 <forward_status_cb+0x2a>
{
   12068:	2400      	movs	r4, #0
   1206a:	e014      	b.n	12096 <forward_status_cb+0x4e>
		usb_reset_alt_setting();
   1206c:	f7ff fec0 	bl	11df0 <usb_reset_alt_setting>
   12070:	e7f6      	b.n	12060 <forward_status_cb+0x18>
		if (usb_dev.configured) {
   12072:	4b16      	ldr	r3, [pc, #88]	; (120cc <forward_status_cb+0x84>)
   12074:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   12078:	2b00      	cmp	r3, #0
   1207a:	d0f5      	beq.n	12068 <forward_status_cb+0x20>
			usb_cancel_transfers();
   1207c:	f000 fbfc 	bl	12878 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
   12080:	2e04      	cmp	r6, #4
   12082:	d1f1      	bne.n	12068 <forward_status_cb+0x20>
				foreach_ep(disable_interface_ep);
   12084:	4812      	ldr	r0, [pc, #72]	; (120d0 <forward_status_cb+0x88>)
   12086:	f7ff fd8b 	bl	11ba0 <foreach_ep>
				usb_dev.configured = false;
   1208a:	4b10      	ldr	r3, [pc, #64]	; (120cc <forward_status_cb+0x84>)
   1208c:	2200      	movs	r2, #0
   1208e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   12092:	e7e9      	b.n	12068 <forward_status_cb+0x20>
	for (size_t i = 0; i < size; i++) {
   12094:	3401      	adds	r4, #1
   12096:	42ac      	cmp	r4, r5
   12098:	d20b      	bcs.n	120b2 <forward_status_cb+0x6a>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
   1209a:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
   1209e:	4b09      	ldr	r3, [pc, #36]	; (120c4 <forward_status_cb+0x7c>)
   120a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		if (cfg->cb_usb_status) {
   120a4:	68c3      	ldr	r3, [r0, #12]
   120a6:	2b00      	cmp	r3, #0
   120a8:	d0f4      	beq.n	12094 <forward_status_cb+0x4c>
			cfg->cb_usb_status(cfg, status, param);
   120aa:	463a      	mov	r2, r7
   120ac:	4631      	mov	r1, r6
   120ae:	4798      	blx	r3
   120b0:	e7f0      	b.n	12094 <forward_status_cb+0x4c>
	if (usb_dev.user_status_callback) {
   120b2:	4b06      	ldr	r3, [pc, #24]	; (120cc <forward_status_cb+0x84>)
   120b4:	6a1b      	ldr	r3, [r3, #32]
   120b6:	b113      	cbz	r3, 120be <forward_status_cb+0x76>
		usb_dev.user_status_callback(status, param);
   120b8:	4639      	mov	r1, r7
   120ba:	4630      	mov	r0, r6
   120bc:	4798      	blx	r3
}
   120be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   120c0:	20000ab4 	.word	0x20000ab4
   120c4:	20000a90 	.word	0x20000a90
   120c8:	38e38e39 	.word	0x38e38e39
   120cc:	200029dc 	.word	0x200029dc
   120d0:	00021f3d 	.word	0x00021f3d

000120d4 <usb_data_to_host>:
{
   120d4:	b510      	push	{r4, lr}
   120d6:	b082      	sub	sp, #8
	if (usb_dev.zlp_flag == false) {
   120d8:	4b13      	ldr	r3, [pc, #76]	; (12128 <usb_data_to_host+0x54>)
   120da:	7d1b      	ldrb	r3, [r3, #20]
   120dc:	b9cb      	cbnz	r3, 12112 <usb_data_to_host+0x3e>
		uint32_t chunk = usb_dev.data_buf_residue;
   120de:	4c12      	ldr	r4, [pc, #72]	; (12128 <usb_data_to_host+0x54>)
   120e0:	68e2      	ldr	r2, [r4, #12]
   120e2:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   120e4:	ab01      	add	r3, sp, #4
   120e6:	68a1      	ldr	r1, [r4, #8]
   120e8:	2080      	movs	r0, #128	; 0x80
   120ea:	f00f ff6a 	bl	21fc2 <usb_write>
		usb_dev.data_buf += chunk;
   120ee:	9901      	ldr	r1, [sp, #4]
   120f0:	68a2      	ldr	r2, [r4, #8]
   120f2:	440a      	add	r2, r1
   120f4:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   120f6:	68e3      	ldr	r3, [r4, #12]
   120f8:	1a5b      	subs	r3, r3, r1
   120fa:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue &&
   120fc:	b98b      	cbnz	r3, 12122 <usb_data_to_host+0x4e>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   120fe:	88e2      	ldrh	r2, [r4, #6]
   12100:	6923      	ldr	r3, [r4, #16]
		if (!usb_dev.data_buf_residue &&
   12102:	429a      	cmp	r2, r3
   12104:	dd0d      	ble.n	12122 <usb_data_to_host+0x4e>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   12106:	f013 0f3f 	tst.w	r3, #63	; 0x3f
   1210a:	d10a      	bne.n	12122 <usb_data_to_host+0x4e>
				usb_dev.zlp_flag = true;
   1210c:	2201      	movs	r2, #1
   1210e:	7522      	strb	r2, [r4, #20]
   12110:	e007      	b.n	12122 <usb_data_to_host+0x4e>
		usb_dev.zlp_flag = false;
   12112:	2100      	movs	r1, #0
   12114:	4b04      	ldr	r3, [pc, #16]	; (12128 <usb_data_to_host+0x54>)
   12116:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   12118:	460b      	mov	r3, r1
   1211a:	460a      	mov	r2, r1
   1211c:	2080      	movs	r0, #128	; 0x80
   1211e:	f006 fd7d 	bl	18c1c <usb_dc_ep_write>
}
   12122:	b002      	add	sp, #8
   12124:	bd10      	pop	{r4, pc}
   12126:	bf00      	nop
   12128:	200029dc 	.word	0x200029dc

0001212c <usb_handle_control_transfer>:
{
   1212c:	b510      	push	{r4, lr}
   1212e:	b084      	sub	sp, #16
	uint32_t chunk = 0U;
   12130:	2300      	movs	r3, #0
   12132:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   12134:	4604      	mov	r4, r0
   12136:	b900      	cbnz	r0, 1213a <usb_handle_control_transfer+0xe>
   12138:	b331      	cbz	r1, 12188 <usb_handle_control_transfer+0x5c>
	} else if (ep == USB_CONTROL_EP_OUT) {
   1213a:	2c00      	cmp	r4, #0
   1213c:	f040 8084 	bne.w	12248 <usb_handle_control_transfer+0x11c>
		if (usb_dev.data_buf_residue <= 0) {
   12140:	4b48      	ldr	r3, [pc, #288]	; (12264 <usb_handle_control_transfer+0x138>)
   12142:	68da      	ldr	r2, [r3, #12]
   12144:	2a00      	cmp	r2, #0
   12146:	dd67      	ble.n	12218 <usb_handle_control_transfer+0xec>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   12148:	ab03      	add	r3, sp, #12
   1214a:	4946      	ldr	r1, [pc, #280]	; (12264 <usb_handle_control_transfer+0x138>)
   1214c:	6889      	ldr	r1, [r1, #8]
   1214e:	2000      	movs	r0, #0
   12150:	f013 ff46 	bl	25fe0 <usb_dc_ep_read>
   12154:	2800      	cmp	r0, #0
   12156:	db6c      	blt.n	12232 <usb_handle_control_transfer+0x106>
		usb_dev.data_buf += chunk;
   12158:	9803      	ldr	r0, [sp, #12]
   1215a:	4a42      	ldr	r2, [pc, #264]	; (12264 <usb_handle_control_transfer+0x138>)
   1215c:	6891      	ldr	r1, [r2, #8]
   1215e:	4401      	add	r1, r0
   12160:	6091      	str	r1, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
   12162:	68d3      	ldr	r3, [r2, #12]
   12164:	1a1b      	subs	r3, r3, r0
   12166:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
   12168:	2b00      	cmp	r3, #0
   1216a:	d16f      	bne.n	1224c <usb_handle_control_transfer+0x120>
			usb_dev.data_buf = usb_dev.req_data;
   1216c:	4610      	mov	r0, r2
   1216e:	f102 0338 	add.w	r3, r2, #56	; 0x38
   12172:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
   12176:	f100 0110 	add.w	r1, r0, #16
   1217a:	f7ff fc47 	bl	11a0c <usb_handle_request>
   1217e:	2800      	cmp	r0, #0
   12180:	d05e      	beq.n	12240 <usb_handle_control_transfer+0x114>
			usb_data_to_host();
   12182:	f7ff ffa7 	bl	120d4 <usb_data_to_host>
   12186:	e061      	b.n	1224c <usb_handle_control_transfer+0x120>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   12188:	2208      	movs	r2, #8
   1218a:	a901      	add	r1, sp, #4
   1218c:	f013 ff28 	bl	25fe0 <usb_dc_ep_read>
   12190:	2800      	cmp	r0, #0
   12192:	db2e      	blt.n	121f2 <usb_handle_control_transfer+0xc6>
		setup->bmRequestType = setup_raw.bmRequestType;
   12194:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12198:	4b32      	ldr	r3, [pc, #200]	; (12264 <usb_handle_control_transfer+0x138>)
   1219a:	7018      	strb	r0, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
   1219c:	f89d 2005 	ldrb.w	r2, [sp, #5]
   121a0:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
   121a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   121a6:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   121a8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   121ac:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   121ae:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   121b2:	80d9      	strh	r1, [r3, #6]
		usb_dev.data_buf = usb_dev.req_data;
   121b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
   121b8:	609a      	str	r2, [r3, #8]
		usb_dev.zlp_flag = false;
   121ba:	2200      	movs	r2, #0
   121bc:	751a      	strb	r2, [r3, #20]
		usb_dev.data_buf_len = 0;
   121be:	611a      	str	r2, [r3, #16]
		usb_dev.data_buf_residue = 0;
   121c0:	60da      	str	r2, [r3, #12]
		if (usb_reqtype_is_to_device(setup)) {
   121c2:	f010 0f80 	tst.w	r0, #128	; 0x80
   121c6:	d102      	bne.n	121ce <usb_handle_control_transfer+0xa2>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   121c8:	2980      	cmp	r1, #128	; 0x80
   121ca:	d816      	bhi.n	121fa <usb_handle_control_transfer+0xce>
			if (setup->wLength) {
   121cc:	b9e1      	cbnz	r1, 12208 <usb_handle_control_transfer+0xdc>
		if (!usb_handle_request(setup,
   121ce:	4825      	ldr	r0, [pc, #148]	; (12264 <usb_handle_control_transfer+0x138>)
   121d0:	f100 0208 	add.w	r2, r0, #8
   121d4:	f100 0110 	add.w	r1, r0, #16
   121d8:	f7ff fc18 	bl	11a0c <usb_handle_request>
   121dc:	b1c0      	cbz	r0, 12210 <usb_handle_control_transfer+0xe4>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   121de:	4b21      	ldr	r3, [pc, #132]	; (12264 <usb_handle_control_transfer+0x138>)
   121e0:	88da      	ldrh	r2, [r3, #6]
   121e2:	6919      	ldr	r1, [r3, #16]
   121e4:	428a      	cmp	r2, r1
   121e6:	bfa8      	it	ge
   121e8:	460a      	movge	r2, r1
   121ea:	60da      	str	r2, [r3, #12]
		usb_data_to_host();
   121ec:	f7ff ff72 	bl	120d4 <usb_data_to_host>
   121f0:	e02c      	b.n	1224c <usb_handle_control_transfer+0x120>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   121f2:	2080      	movs	r0, #128	; 0x80
   121f4:	f006 fc40 	bl	18a78 <usb_dc_ep_set_stall>
			return;
   121f8:	e028      	b.n	1224c <usb_handle_control_transfer+0x120>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   121fa:	2080      	movs	r0, #128	; 0x80
   121fc:	f006 fc3c 	bl	18a78 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   12200:	2000      	movs	r0, #0
   12202:	f006 fc39 	bl	18a78 <usb_dc_ep_set_stall>
				return;
   12206:	e021      	b.n	1224c <usb_handle_control_transfer+0x120>
				usb_dev.data_buf_len = setup->wLength;
   12208:	4b16      	ldr	r3, [pc, #88]	; (12264 <usb_handle_control_transfer+0x138>)
   1220a:	6119      	str	r1, [r3, #16]
				usb_dev.data_buf_residue = setup->wLength;
   1220c:	60d9      	str	r1, [r3, #12]
				return;
   1220e:	e01d      	b.n	1224c <usb_handle_control_transfer+0x120>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   12210:	2080      	movs	r0, #128	; 0x80
   12212:	f006 fc31 	bl	18a78 <usb_dc_ep_set_stall>
			return;
   12216:	e019      	b.n	1224c <usb_handle_control_transfer+0x120>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   12218:	ab03      	add	r3, sp, #12
   1221a:	2200      	movs	r2, #0
   1221c:	4911      	ldr	r1, [pc, #68]	; (12264 <usb_handle_control_transfer+0x138>)
   1221e:	6889      	ldr	r1, [r1, #8]
   12220:	4610      	mov	r0, r2
   12222:	f013 fedd 	bl	25fe0 <usb_dc_ep_read>
   12226:	2800      	cmp	r0, #0
   12228:	da10      	bge.n	1224c <usb_handle_control_transfer+0x120>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   1222a:	2080      	movs	r0, #128	; 0x80
   1222c:	f006 fc24 	bl	18a78 <usb_dc_ep_set_stall>
			return;
   12230:	e00c      	b.n	1224c <usb_handle_control_transfer+0x120>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   12232:	2080      	movs	r0, #128	; 0x80
   12234:	f006 fc20 	bl	18a78 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   12238:	2000      	movs	r0, #0
   1223a:	f006 fc1d 	bl	18a78 <usb_dc_ep_set_stall>
			return;
   1223e:	e005      	b.n	1224c <usb_handle_control_transfer+0x120>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   12240:	2080      	movs	r0, #128	; 0x80
   12242:	f006 fc19 	bl	18a78 <usb_dc_ep_set_stall>
				return;
   12246:	e001      	b.n	1224c <usb_handle_control_transfer+0x120>
	} else if (ep == USB_CONTROL_EP_IN) {
   12248:	2c80      	cmp	r4, #128	; 0x80
   1224a:	d001      	beq.n	12250 <usb_handle_control_transfer+0x124>
}
   1224c:	b004      	add	sp, #16
   1224e:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   12250:	4b04      	ldr	r3, [pc, #16]	; (12264 <usb_handle_control_transfer+0x138>)
   12252:	68db      	ldr	r3, [r3, #12]
   12254:	b91b      	cbnz	r3, 1225e <usb_handle_control_transfer+0x132>
   12256:	4b03      	ldr	r3, [pc, #12]	; (12264 <usb_handle_control_transfer+0x138>)
   12258:	7d1b      	ldrb	r3, [r3, #20]
   1225a:	2b00      	cmp	r3, #0
   1225c:	d0f6      	beq.n	1224c <usb_handle_control_transfer+0x120>
			usb_data_to_host();
   1225e:	f7ff ff39 	bl	120d4 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
   12262:	e7f3      	b.n	1224c <usb_handle_control_transfer+0x120>
   12264:	200029dc 	.word	0x200029dc

00012268 <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
   12268:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
   1226a:	f7ff fbeb 	bl	11a44 <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_STANDARD,
   1226e:	4908      	ldr	r1, [pc, #32]	; (12290 <usb_set_config+0x28>)
   12270:	2000      	movs	r0, #0
   12272:	f7ff fbdf 	bl	11a34 <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(USB_REQTYPE_TYPE_CLASS, class_handler);
   12276:	4907      	ldr	r1, [pc, #28]	; (12294 <usb_set_config+0x2c>)
   12278:	2001      	movs	r0, #1
   1227a:	f7ff fbdb 	bl	11a34 <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_VENDOR, vendor_handler);
   1227e:	4906      	ldr	r1, [pc, #24]	; (12298 <usb_set_config+0x30>)
   12280:	2002      	movs	r0, #2
   12282:	f7ff fbd7 	bl	11a34 <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
   12286:	4805      	ldr	r0, [pc, #20]	; (1229c <usb_set_config+0x34>)
   12288:	f7ff fc7e 	bl	11b88 <usb_register_custom_req_handler>

	return 0;
}
   1228c:	2000      	movs	r0, #0
   1228e:	bd08      	pop	{r3, pc}
   12290:	00011f75 	.word	0x00011f75
   12294:	00011c05 	.word	0x00011c05
   12298:	00011ce5 	.word	0x00011ce5
   1229c:	00011c65 	.word	0x00011c65

000122a0 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
   122a0:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   122a2:	4b08      	ldr	r3, [pc, #32]	; (122c4 <usb_device_init+0x24>)
   122a4:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   122a8:	b10b      	cbz	r3, 122ae <usb_device_init+0xe>
		return 0;
   122aa:	2000      	movs	r0, #0
	}

	usb_set_config(device_descriptor);

	return 0;
}
   122ac:	bd08      	pop	{r3, pc}
	device_descriptor = usb_get_device_descriptor();
   122ae:	f000 f95d 	bl	1256c <usb_get_device_descriptor>
	if (!device_descriptor) {
   122b2:	b118      	cbz	r0, 122bc <usb_device_init+0x1c>
	usb_set_config(device_descriptor);
   122b4:	f7ff ffd8 	bl	12268 <usb_set_config>
	return 0;
   122b8:	2000      	movs	r0, #0
   122ba:	e7f7      	b.n	122ac <usb_device_init+0xc>
		return -1;
   122bc:	f04f 30ff 	mov.w	r0, #4294967295
   122c0:	e7f4      	b.n	122ac <usb_device_init+0xc>
   122c2:	bf00      	nop
   122c4:	200029dc 	.word	0x200029dc

000122c8 <usb_enable>:
{
   122c8:	b530      	push	{r4, r5, lr}
   122ca:	b083      	sub	sp, #12
   122cc:	4605      	mov	r5, r0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   122ce:	f04f 32ff 	mov.w	r2, #4294967295
   122d2:	f04f 33ff 	mov.w	r3, #4294967295
   122d6:	482d      	ldr	r0, [pc, #180]	; (1238c <usb_enable+0xc4>)
   122d8:	f00a feca 	bl	1d070 <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
   122dc:	4b2c      	ldr	r3, [pc, #176]	; (12390 <usb_enable+0xc8>)
   122de:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   122e2:	2b00      	cmp	r3, #0
   122e4:	d14a      	bne.n	1237c <usb_enable+0xb4>
	ret = usb_vbus_set(true);
   122e6:	2001      	movs	r0, #1
   122e8:	f00f fdde 	bl	21ea8 <usb_vbus_set>
	if (ret < 0) {
   122ec:	1e04      	subs	r4, r0, #0
   122ee:	db46      	blt.n	1237e <usb_enable+0xb6>
	usb_dev.user_status_callback = status_cb;
   122f0:	4b27      	ldr	r3, [pc, #156]	; (12390 <usb_enable+0xc8>)
   122f2:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
   122f4:	4c27      	ldr	r4, [pc, #156]	; (12394 <usb_enable+0xcc>)
   122f6:	4620      	mov	r0, r4
   122f8:	f7ff fc4c 	bl	11b94 <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
   122fc:	4620      	mov	r0, r4
   122fe:	f006 fe09 	bl	18f14 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
   12302:	f006 fb37 	bl	18974 <usb_dc_attach>
	if (ret < 0) {
   12306:	1e04      	subs	r4, r0, #0
   12308:	db39      	blt.n	1237e <usb_enable+0xb6>
	ret = usb_transfer_init();
   1230a:	f000 fae7 	bl	128dc <usb_transfer_init>
	if (ret < 0) {
   1230e:	1e04      	subs	r4, r0, #0
   12310:	db35      	blt.n	1237e <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   12312:	2340      	movs	r3, #64	; 0x40
   12314:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   12318:	2300      	movs	r3, #0
   1231a:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   1231e:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   12322:	4668      	mov	r0, sp
   12324:	f006 fb80 	bl	18a28 <usb_dc_ep_configure>
	if (ret < 0) {
   12328:	1e04      	subs	r4, r0, #0
   1232a:	db28      	blt.n	1237e <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   1232c:	2380      	movs	r3, #128	; 0x80
   1232e:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   12332:	4668      	mov	r0, sp
   12334:	f006 fb78 	bl	18a28 <usb_dc_ep_configure>
	if (ret < 0) {
   12338:	1e04      	subs	r4, r0, #0
   1233a:	db20      	blt.n	1237e <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   1233c:	4916      	ldr	r1, [pc, #88]	; (12398 <usb_enable+0xd0>)
   1233e:	2000      	movs	r0, #0
   12340:	f006 fdd4 	bl	18eec <usb_dc_ep_set_callback>
	if (ret < 0) {
   12344:	1e04      	subs	r4, r0, #0
   12346:	db1a      	blt.n	1237e <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   12348:	4913      	ldr	r1, [pc, #76]	; (12398 <usb_enable+0xd0>)
   1234a:	2080      	movs	r0, #128	; 0x80
   1234c:	f006 fdce 	bl	18eec <usb_dc_ep_set_callback>
	if (ret < 0) {
   12350:	1e04      	subs	r4, r0, #0
   12352:	db14      	blt.n	1237e <usb_enable+0xb6>
	ret = composite_setup_ep_cb();
   12354:	f7ff fe46 	bl	11fe4 <composite_setup_ep_cb>
	if (ret < 0) {
   12358:	1e04      	subs	r4, r0, #0
   1235a:	db10      	blt.n	1237e <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   1235c:	2000      	movs	r0, #0
   1235e:	f006 fc05 	bl	18b6c <usb_dc_ep_enable>
	if (ret < 0) {
   12362:	1e04      	subs	r4, r0, #0
   12364:	db0b      	blt.n	1237e <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   12366:	2080      	movs	r0, #128	; 0x80
   12368:	f006 fc00 	bl	18b6c <usb_dc_ep_enable>
	if (ret < 0) {
   1236c:	1e04      	subs	r4, r0, #0
   1236e:	db06      	blt.n	1237e <usb_enable+0xb6>
	usb_dev.enabled = true;
   12370:	4b07      	ldr	r3, [pc, #28]	; (12390 <usb_enable+0xc8>)
   12372:	2201      	movs	r2, #1
   12374:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
   12378:	2400      	movs	r4, #0
   1237a:	e000      	b.n	1237e <usb_enable+0xb6>
		ret = 0;
   1237c:	2400      	movs	r4, #0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   1237e:	4803      	ldr	r0, [pc, #12]	; (1238c <usb_enable+0xc4>)
   12380:	f00a ff00 	bl	1d184 <z_impl_k_mutex_unlock>
}
   12384:	4620      	mov	r0, r4
   12386:	b003      	add	sp, #12
   12388:	bd30      	pop	{r4, r5, pc}
   1238a:	bf00      	nop
   1238c:	2000087c 	.word	0x2000087c
   12390:	200029dc 	.word	0x200029dc
   12394:	00012049 	.word	0x00012049
   12398:	0001212d 	.word	0x0001212d

0001239c <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
   1239c:	b410      	push	{r4}
	size_t length = (__usb_data_end - __usb_data_start);
   1239e:	4c0e      	ldr	r4, [pc, #56]	; (123d8 <usb_get_cfg_data+0x3c>)
   123a0:	4b0e      	ldr	r3, [pc, #56]	; (123dc <usb_get_cfg_data+0x40>)
   123a2:	1ae4      	subs	r4, r4, r3
   123a4:	10a3      	asrs	r3, r4, #2
   123a6:	4c0e      	ldr	r4, [pc, #56]	; (123e0 <usb_get_cfg_data+0x44>)
   123a8:	fb04 f403 	mul.w	r4, r4, r3

	for (size_t i = 0; i < length; i++) {
   123ac:	2300      	movs	r3, #0
   123ae:	42a3      	cmp	r3, r4
   123b0:	d20e      	bcs.n	123d0 <usb_get_cfg_data+0x34>
		if (__usb_data_start[i].interface_descriptor == iface) {
   123b2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   123b6:	4909      	ldr	r1, [pc, #36]	; (123dc <usb_get_cfg_data+0x40>)
   123b8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   123bc:	6852      	ldr	r2, [r2, #4]
   123be:	4282      	cmp	r2, r0
   123c0:	d001      	beq.n	123c6 <usb_get_cfg_data+0x2a>
	for (size_t i = 0; i < length; i++) {
   123c2:	3301      	adds	r3, #1
   123c4:	e7f3      	b.n	123ae <usb_get_cfg_data+0x12>
			return &__usb_data_start[i];
   123c6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   123ca:	eb01 0083 	add.w	r0, r1, r3, lsl #2
   123ce:	e000      	b.n	123d2 <usb_get_cfg_data+0x36>
		}
	}

	return NULL;
   123d0:	2000      	movs	r0, #0
}
   123d2:	bc10      	pop	{r4}
   123d4:	4770      	bx	lr
   123d6:	bf00      	nop
   123d8:	20000ab4 	.word	0x20000ab4
   123dc:	20000a90 	.word	0x20000a90
   123e0:	38e38e39 	.word	0x38e38e39

000123e4 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   123e4:	b530      	push	{r4, r5, lr}
   123e6:	b08b      	sub	sp, #44	; 0x2c
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   123e8:	ac01      	add	r4, sp, #4
   123ea:	4d1b      	ldr	r5, [pc, #108]	; (12458 <usb_update_sn_string_descriptor+0x74>)
   123ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   123ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   123f0:	682b      	ldr	r3, [r5, #0]
   123f2:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   123f4:	2210      	movs	r2, #16
   123f6:	2100      	movs	r1, #0
   123f8:	a806      	add	r0, sp, #24
   123fa:	f010 fb3c 	bl	22a76 <memset>
	memset(sn, 0, sizeof(sn));
   123fe:	2212      	movs	r2, #18
   12400:	2100      	movs	r1, #0
   12402:	4816      	ldr	r0, [pc, #88]	; (1245c <usb_update_sn_string_descriptor+0x78>)
   12404:	f010 fb37 	bl	22a76 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   12408:	2110      	movs	r1, #16
   1240a:	a806      	add	r0, sp, #24
   1240c:	f013 ff26 	bl	2625c <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   12410:	2800      	cmp	r0, #0
   12412:	dd1d      	ble.n	12450 <usb_update_sn_string_descriptor+0x6c>
		skip = MAX(0, hwlen - usblen);
   12414:	3808      	subs	r0, #8
   12416:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   1241a:	2200      	movs	r2, #0
   1241c:	e016      	b.n	1244c <usb_update_sn_string_descriptor+0x68>
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   1241e:	18a3      	adds	r3, r4, r2
   12420:	a90a      	add	r1, sp, #40	; 0x28
   12422:	440b      	add	r3, r1
   12424:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   12428:	0051      	lsls	r1, r2, #1
   1242a:	a80a      	add	r0, sp, #40	; 0x28
   1242c:	eb00 1013 	add.w	r0, r0, r3, lsr #4
   12430:	f810 5c24 	ldrb.w	r5, [r0, #-36]
   12434:	4809      	ldr	r0, [pc, #36]	; (1245c <usb_update_sn_string_descriptor+0x78>)
   12436:	f800 5012 	strb.w	r5, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   1243a:	f003 030f 	and.w	r3, r3, #15
   1243e:	3101      	adds	r1, #1
   12440:	ad0a      	add	r5, sp, #40	; 0x28
   12442:	442b      	add	r3, r5
   12444:	f813 3c24 	ldrb.w	r3, [r3, #-36]
   12448:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < usblen; i++) {
   1244a:	3201      	adds	r2, #1
   1244c:	2a07      	cmp	r2, #7
   1244e:	dde6      	ble.n	1241e <usb_update_sn_string_descriptor+0x3a>
		}
	}

	return sn;
}
   12450:	4802      	ldr	r0, [pc, #8]	; (1245c <usb_update_sn_string_descriptor+0x78>)
   12452:	b00b      	add	sp, #44	; 0x2c
   12454:	bd30      	pop	{r4, r5, pc}
   12456:	bf00      	nop
   12458:	00028660 	.word	0x00028660
   1245c:	20002aa0 	.word	0x20002aa0

00012460 <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
   12460:	b570      	push	{r4, r5, r6, lr}
   12462:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   12464:	f7ff ffbe 	bl	123e4 <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
   12468:	b120      	cbz	r0, 12474 <usb_fix_ascii_sn_string_descriptor+0x14>
   1246a:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
   1246c:	f010 fa96 	bl	2299c <strlen>
	if (!runtime_sn_len) {
   12470:	4606      	mov	r6, r0
   12472:	b900      	cbnz	r0, 12476 <usb_fix_ascii_sn_string_descriptor+0x16>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
   12474:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   12476:	4805      	ldr	r0, [pc, #20]	; (1248c <usb_fix_ascii_sn_string_descriptor+0x2c>)
   12478:	f010 fa90 	bl	2299c <strlen>
	if (runtime_sn_len != default_sn_len) {
   1247c:	4286      	cmp	r6, r0
   1247e:	d1f9      	bne.n	12474 <usb_fix_ascii_sn_string_descriptor+0x14>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   12480:	4632      	mov	r2, r6
   12482:	4629      	mov	r1, r5
   12484:	1ca0      	adds	r0, r4, #2
   12486:	f010 fad2 	bl	22a2e <memcpy>
   1248a:	e7f3      	b.n	12474 <usb_fix_ascii_sn_string_descriptor+0x14>
   1248c:	00028660 	.word	0x00028660

00012490 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
   12490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12494:	b082      	sub	sp, #8
   12496:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
   12498:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1249c:	9301      	str	r3, [sp, #4]
	uint8_t str_descr_idx = 0U;
   1249e:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
   124a0:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
   124a2:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
   124a4:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
   124a6:	e02c      	b.n	12502 <usb_fix_descriptor+0x72>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_DESC_INTERFACE:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
   124a8:	78e3      	ldrb	r3, [r4, #3]
   124aa:	bb43      	cbnz	r3, 124fe <usb_fix_descriptor+0x6e>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
   124ac:	78a3      	ldrb	r3, [r4, #2]
   124ae:	b953      	cbnz	r3, 124c6 <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
   124b0:	4620      	mov	r0, r4
   124b2:	f7ff ff73 	bl	1239c <usb_get_cfg_data>
				if (!cfg_data) {
   124b6:	4680      	mov	r8, r0
   124b8:	2800      	cmp	r0, #0
   124ba:	d04c      	beq.n	12556 <usb_fix_descriptor+0xc6>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
   124bc:	6883      	ldr	r3, [r0, #8]
   124be:	b113      	cbz	r3, 124c6 <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
   124c0:	4639      	mov	r1, r7
   124c2:	4620      	mov	r0, r4
   124c4:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
   124c6:	3701      	adds	r7, #1
   124c8:	b2ff      	uxtb	r7, r7
			break;
   124ca:	e018      	b.n	124fe <usb_fix_descriptor+0x6e>
		case USB_DESC_ENDPOINT:
			if (!cfg_data) {
   124cc:	f1b8 0f00 	cmp.w	r8, #0
   124d0:	d044      	beq.n	1255c <usb_fix_descriptor+0xcc>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
   124d2:	aa01      	add	r2, sp, #4
   124d4:	4641      	mov	r1, r8
   124d6:	4620      	mov	r0, r4
   124d8:	f00f fda6 	bl	22028 <usb_validate_ep_cfg_data>
   124dc:	b178      	cbz	r0, 124fe <usb_fix_descriptor+0x6e>
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
				return -1;
   124de:	f04f 30ff 	mov.w	r0, #4294967295
   124e2:	e032      	b.n	1254a <usb_fix_descriptor+0xba>
		case 0:
		case USB_DESC_STRING:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   124e4:	2d03      	cmp	r5, #3
   124e6:	d021      	beq.n	1252c <usb_fix_descriptor+0x9c>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
   124e8:	bb25      	cbnz	r5, 12534 <usb_fix_descriptor+0xa4>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
   124ea:	2e00      	cmp	r6, #0
   124ec:	d039      	beq.n	12562 <usb_fix_descriptor+0xd2>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   124ee:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   124f0:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
   124f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   124f6:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
   124f8:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
   124fa:	3501      	adds	r5, #1
   124fc:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   124fe:	7823      	ldrb	r3, [r4, #0]
   12500:	441c      	add	r4, r3
	while (head->bLength != 0U) {
   12502:	7823      	ldrb	r3, [r4, #0]
   12504:	b1e3      	cbz	r3, 12540 <usb_fix_descriptor+0xb0>
		switch (head->bDescriptorType) {
   12506:	7863      	ldrb	r3, [r4, #1]
   12508:	2b05      	cmp	r3, #5
   1250a:	d8f8      	bhi.n	124fe <usb_fix_descriptor+0x6e>
   1250c:	a201      	add	r2, pc, #4	; (adr r2, 12514 <usb_fix_descriptor+0x84>)
   1250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12512:	bf00      	nop
   12514:	000124e5 	.word	0x000124e5
   12518:	000124ff 	.word	0x000124ff
   1251c:	0001253d 	.word	0x0001253d
   12520:	000124e5 	.word	0x000124e5
   12524:	000124a9 	.word	0x000124a9
   12528:	000124cd 	.word	0x000124cd
				usb_fix_ascii_sn_string_descriptor(sn);
   1252c:	4620      	mov	r0, r4
   1252e:	f7ff ff97 	bl	12460 <usb_fix_ascii_sn_string_descriptor>
   12532:	e7d9      	b.n	124e8 <usb_fix_descriptor+0x58>
				ascii7_to_utf16le(head);
   12534:	4620      	mov	r0, r4
   12536:	f00f fd63 	bl	22000 <ascii7_to_utf16le>
   1253a:	e7de      	b.n	124fa <usb_fix_descriptor+0x6a>
			cfg_descr = (struct usb_cfg_descriptor *)head;
   1253c:	4626      	mov	r6, r4
   1253e:	e7de      	b.n	124fe <usb_fix_descriptor+0x6e>
	}

	if ((head + 1) != __usb_descriptor_end) {
   12540:	1ca0      	adds	r0, r4, #2
   12542:	4b09      	ldr	r3, [pc, #36]	; (12568 <usb_fix_descriptor+0xd8>)
   12544:	4298      	cmp	r0, r3
   12546:	d103      	bne.n	12550 <usb_fix_descriptor+0xc0>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
   12548:	2000      	movs	r0, #0
}
   1254a:	b002      	add	sp, #8
   1254c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
   12550:	f7ff ff9e 	bl	12490 <usb_fix_descriptor>
   12554:	e7f9      	b.n	1254a <usb_fix_descriptor+0xba>
					return -1;
   12556:	f04f 30ff 	mov.w	r0, #4294967295
   1255a:	e7f6      	b.n	1254a <usb_fix_descriptor+0xba>
				return -1;
   1255c:	f04f 30ff 	mov.w	r0, #4294967295
   12560:	e7f3      	b.n	1254a <usb_fix_descriptor+0xba>
					return -1;
   12562:	f04f 30ff 	mov.w	r0, #4294967295
   12566:	e7f0      	b.n	1254a <usb_fix_descriptor+0xba>
   12568:	20000a8d 	.word	0x20000a8d

0001256c <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
   1256c:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
   1256e:	4804      	ldr	r0, [pc, #16]	; (12580 <usb_get_device_descriptor+0x14>)
   12570:	f7ff ff8e 	bl	12490 <usb_fix_descriptor>
   12574:	b908      	cbnz	r0, 1257a <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   12576:	4802      	ldr	r0, [pc, #8]	; (12580 <usb_get_device_descriptor+0x14>)
}
   12578:	bd08      	pop	{r3, pc}
		return NULL;
   1257a:	2000      	movs	r0, #0
   1257c:	e7fc      	b.n	12578 <usb_get_device_descriptor+0xc>
   1257e:	bf00      	nop
   12580:	200009e0 	.word	0x200009e0

00012584 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   12584:	2300      	movs	r3, #0
   12586:	e000      	b.n	1258a <usb_ep_get_transfer+0x6>
   12588:	3301      	adds	r3, #1
   1258a:	2b03      	cmp	r3, #3
   1258c:	dc12      	bgt.n	125b4 <usb_ep_get_transfer+0x30>
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   1258e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   12592:	4909      	ldr	r1, [pc, #36]	; (125b8 <usb_ep_get_transfer+0x34>)
   12594:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
   12598:	4282      	cmp	r2, r0
   1259a:	d1f5      	bne.n	12588 <usb_ep_get_transfer+0x4>
   1259c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   125a0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   125a4:	6852      	ldr	r2, [r2, #4]
   125a6:	2a00      	cmp	r2, #0
   125a8:	d0ee      	beq.n	12588 <usb_ep_get_transfer+0x4>
			return &ut_data[i];
   125aa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   125ae:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   125b2:	4770      	bx	lr
		}
	}

	return NULL;
   125b4:	2000      	movs	r0, #0
}
   125b6:	4770      	bx	lr
   125b8:	20002ab4 	.word	0x20002ab4

000125bc <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   125bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   125c0:	b082      	sub	sp, #8
   125c2:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
   125c4:	f810 5c34 	ldrb.w	r5, [r0, #-52]

	if (trans->status != -EBUSY) {
   125c8:	f850 3c30 	ldr.w	r3, [r0, #-48]
   125cc:	f113 0f10 	cmn.w	r3, #16
   125d0:	d10c      	bne.n	125ec <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   125d2:	6903      	ldr	r3, [r0, #16]
   125d4:	f013 0f02 	tst.w	r3, #2
   125d8:	d04f      	beq.n	1267a <usb_transfer_work+0xbe>
		if (!trans->bsize) {
   125da:	f850 2c28 	ldr.w	r2, [r0, #-40]
   125de:	bb7a      	cbnz	r2, 12640 <usb_transfer_work+0x84>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   125e0:	f013 0f04 	tst.w	r3, #4
   125e4:	d025      	beq.n	12632 <usb_transfer_work+0x76>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
   125e6:	2300      	movs	r3, #0
   125e8:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   125ec:	f854 3c30 	ldr.w	r3, [r4, #-48]
   125f0:	f113 0f10 	cmn.w	r3, #16
   125f4:	d01a      	beq.n	1262c <usb_transfer_work+0x70>
   125f6:	f854 6c20 	ldr.w	r6, [r4, #-32]
   125fa:	b1be      	cbz	r6, 1262c <usb_transfer_work+0x70>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   125fc:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   12600:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   12604:	f014 ff56 	bl	274b4 <k_is_in_isr>
   12608:	2800      	cmp	r0, #0
   1260a:	d16a      	bne.n	126e2 <usb_transfer_work+0x126>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
   1260c:	2300      	movs	r3, #0
   1260e:	f844 3c20 	str.w	r3, [r4, #-32]
		k_sem_give(&trans->sem);
   12612:	f1a4 0018 	sub.w	r0, r4, #24
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   12616:	f00a fe35 	bl	1d284 <z_impl_k_sem_give>

		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
   1261a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1261e:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
   12622:	d003      	beq.n	1262c <usb_transfer_work+0x70>
			cb(ep, tsize, priv);
   12624:	4642      	mov	r2, r8
   12626:	4639      	mov	r1, r7
   12628:	4628      	mov	r0, r5
   1262a:	47b0      	blx	r6
		}
	}
}
   1262c:	b002      	add	sp, #8
   1262e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_write(ep, NULL, 0, NULL);
   12632:	2300      	movs	r3, #0
   12634:	461a      	mov	r2, r3
   12636:	4619      	mov	r1, r3
   12638:	4628      	mov	r0, r5
   1263a:	f00f fcc2 	bl	21fc2 <usb_write>
   1263e:	e7d2      	b.n	125e6 <usb_transfer_work+0x2a>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   12640:	ab01      	add	r3, sp, #4
   12642:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   12646:	4628      	mov	r0, r5
   12648:	f00f fcbb 	bl	21fc2 <usb_write>
		if (ret) {
   1264c:	b980      	cbnz	r0, 12670 <usb_transfer_work+0xb4>
		trans->buffer += bytes;
   1264e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   12652:	9a01      	ldr	r2, [sp, #4]
   12654:	4413      	add	r3, r2
   12656:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   1265a:	f854 3c28 	ldr.w	r3, [r4, #-40]
   1265e:	1a9b      	subs	r3, r3, r2
   12660:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   12664:	f854 3c24 	ldr.w	r3, [r4, #-36]
   12668:	4413      	add	r3, r2
   1266a:	f844 3c24 	str.w	r3, [r4, #-36]
   1266e:	e7bd      	b.n	125ec <usb_transfer_work+0x30>
			trans->status = -EINVAL;
   12670:	f06f 0315 	mvn.w	r3, #21
   12674:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
   12678:	e7b8      	b.n	125ec <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   1267a:	ab01      	add	r3, sp, #4
   1267c:	f850 2c28 	ldr.w	r2, [r0, #-40]
   12680:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   12684:	4628      	mov	r0, r5
   12686:	f006 fb4d 	bl	18d24 <usb_dc_ep_read_wait>
		if (ret) {
   1268a:	b9a0      	cbnz	r0, 126b6 <usb_transfer_work+0xfa>
		trans->buffer += bytes;
   1268c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   12690:	9e01      	ldr	r6, [sp, #4]
   12692:	4433      	add	r3, r6
   12694:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   12698:	f854 3c28 	ldr.w	r3, [r4, #-40]
   1269c:	1b9b      	subs	r3, r3, r6
   1269e:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   126a2:	f854 3c24 	ldr.w	r3, [r4, #-36]
   126a6:	4433      	add	r3, r6
   126a8:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   126ac:	b946      	cbnz	r6, 126c0 <usb_transfer_work+0x104>
			trans->status = 0;
   126ae:	2300      	movs	r3, #0
   126b0:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
   126b4:	e79a      	b.n	125ec <usb_transfer_work+0x30>
			trans->status = -EINVAL;
   126b6:	f06f 0315 	mvn.w	r3, #21
   126ba:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
   126be:	e795      	b.n	125ec <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   126c0:	4628      	mov	r0, r5
   126c2:	f006 fc2d 	bl	18f20 <usb_dc_ep_mps>
   126c6:	fbb6 f3f0 	udiv	r3, r6, r0
   126ca:	fb00 6013 	mls	r0, r0, r3, r6
   126ce:	2800      	cmp	r0, #0
   126d0:	d1ed      	bne.n	126ae <usb_transfer_work+0xf2>
   126d2:	f854 3c28 	ldr.w	r3, [r4, #-40]
   126d6:	2b00      	cmp	r3, #0
   126d8:	d0e9      	beq.n	126ae <usb_transfer_work+0xf2>
		usb_dc_ep_read_continue(ep);
   126da:	4628      	mov	r0, r5
   126dc:	f006 fb80 	bl	18de0 <usb_dc_ep_read_continue>
   126e0:	e784      	b.n	125ec <usb_transfer_work+0x30>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   126e2:	4621      	mov	r1, r4
   126e4:	4801      	ldr	r0, [pc, #4]	; (126ec <usb_transfer_work+0x130>)
   126e6:	f015 f8bb 	bl	27860 <k_work_submit_to_queue>
			return;
   126ea:	e79f      	b.n	1262c <usb_transfer_work+0x70>
   126ec:	200017c8 	.word	0x200017c8

000126f0 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
   126f0:	b570      	push	{r4, r5, r6, lr}
   126f2:	b082      	sub	sp, #8
   126f4:	4606      	mov	r6, r0
   126f6:	460c      	mov	r4, r1
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   126f8:	f7ff ff44 	bl	12584 <usb_ep_get_transfer>

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   126fc:	1e63      	subs	r3, r4, #1
   126fe:	b2db      	uxtb	r3, r3
   12700:	2b01      	cmp	r3, #1
   12702:	d80a      	bhi.n	1271a <usb_transfer_ep_callback+0x2a>
   12704:	4605      	mov	r5, r0
		return;
	}

	if (!trans) {
   12706:	b150      	cbz	r0, 1271e <usb_transfer_ep_callback+0x2e>
			LOG_ERR("RX data lost, no transfer");
		}
		return;
	}

	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   12708:	f014 fed4 	bl	274b4 <k_is_in_isr>
   1270c:	b108      	cbz	r0, 12712 <usb_transfer_ep_callback+0x22>
   1270e:	2c01      	cmp	r4, #1
   12710:	d112      	bne.n	12738 <usb_transfer_ep_callback+0x48>
		/* If we are not in IRQ context, no need to defer work */
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
   12712:	f105 0034 	add.w	r0, r5, #52	; 0x34
   12716:	f7ff ff51 	bl	125bc <usb_transfer_work>
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
   1271a:	b002      	add	sp, #8
   1271c:	bd70      	pop	{r4, r5, r6, pc}
		if (status == USB_DC_EP_DATA_OUT) {
   1271e:	2c01      	cmp	r4, #1
   12720:	d1fb      	bne.n	1271a <usb_transfer_ep_callback+0x2a>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
   12722:	ab01      	add	r3, sp, #4
   12724:	2201      	movs	r2, #1
   12726:	f10d 0103 	add.w	r1, sp, #3
   1272a:	4630      	mov	r0, r6
   1272c:	f006 fafa 	bl	18d24 <usb_dc_ep_read_wait>
			} while (bytes);
   12730:	9b01      	ldr	r3, [sp, #4]
   12732:	2b00      	cmp	r3, #0
   12734:	d1f5      	bne.n	12722 <usb_transfer_ep_callback+0x32>
   12736:	e7f0      	b.n	1271a <usb_transfer_ep_callback+0x2a>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   12738:	f105 0134 	add.w	r1, r5, #52	; 0x34
   1273c:	4801      	ldr	r0, [pc, #4]	; (12744 <usb_transfer_ep_callback+0x54>)
   1273e:	f015 f88f 	bl	27860 <k_work_submit_to_queue>
   12742:	e7ea      	b.n	1271a <usb_transfer_ep_callback+0x2a>
   12744:	200017c8 	.word	0x200017c8

00012748 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
   12748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1274c:	4605      	mov	r5, r0
   1274e:	4688      	mov	r8, r1
   12750:	4617      	mov	r7, r2
   12752:	461e      	mov	r6, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
   12754:	f00f fd12 	bl	2217c <usb_transfer_is_busy>
   12758:	2800      	cmp	r0, #0
   1275a:	d165      	bne.n	12828 <usb_transfer+0xe0>
   1275c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12760:	f3ef 8911 	mrs	r9, BASEPRI
   12764:	f383 8812 	msr	BASEPRI_MAX, r3
   12768:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
   1276c:	2400      	movs	r4, #0
   1276e:	2c03      	cmp	r4, #3
   12770:	dc14      	bgt.n	1279c <usb_transfer+0x54>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
   12772:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
   12776:	00c0      	lsls	r0, r0, #3
   12778:	f100 0318 	add.w	r3, r0, #24
   1277c:	482c      	ldr	r0, [pc, #176]	; (12830 <usb_transfer+0xe8>)
   1277e:	4418      	add	r0, r3
   12780:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
   12782:	2200      	movs	r2, #0
   12784:	2300      	movs	r3, #0
   12786:	f00a fda5 	bl	1d2d4 <z_impl_k_sem_take>
   1278a:	b108      	cbz	r0, 12790 <usb_transfer+0x48>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
   1278c:	3401      	adds	r4, #1
   1278e:	e7ee      	b.n	1276e <usb_transfer+0x26>
			trans = &ut_data[i];
   12790:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   12794:	4826      	ldr	r0, [pc, #152]	; (12830 <usb_transfer+0xe8>)
   12796:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
			break;
   1279a:	e000      	b.n	1279e <usb_transfer+0x56>
	struct usb_transfer_data *trans = NULL;
   1279c:	2400      	movs	r4, #0
		}
	}

	if (!trans) {
   1279e:	2c00      	cmp	r4, #0
   127a0:	d03f      	beq.n	12822 <usb_transfer+0xda>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
   127a2:	f8d4 a004 	ldr.w	sl, [r4, #4]
   127a6:	f11a 0f10 	cmn.w	sl, #16
   127aa:	d022      	beq.n	127f2 <usb_transfer+0xaa>
		ret = -EBUSY;
		goto done;
	}

	/* Configure new transfer */
	trans->ep = ep;
   127ac:	7025      	strb	r5, [r4, #0]
	trans->buffer = data;
   127ae:	f8c4 8008 	str.w	r8, [r4, #8]
	trans->bsize = dlen;
   127b2:	60e7      	str	r7, [r4, #12]
	trans->tsize = 0;
   127b4:	2300      	movs	r3, #0
   127b6:	6123      	str	r3, [r4, #16]
	trans->cb = cb;
   127b8:	9b08      	ldr	r3, [sp, #32]
   127ba:	6163      	str	r3, [r4, #20]
	trans->flags = flags;
   127bc:	6466      	str	r6, [r4, #68]	; 0x44
	trans->priv = cb_data;
   127be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   127c0:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
   127c2:	f06f 030f 	mvn.w	r3, #15
   127c6:	6063      	str	r3, [r4, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   127c8:	4628      	mov	r0, r5
   127ca:	f006 fba9 	bl	18f20 <usb_dc_ep_mps>
   127ce:	b9a8      	cbnz	r0, 127fc <usb_transfer+0xb4>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
	}

	if (flags & USB_TRANS_WRITE) {
   127d0:	f016 0f02 	tst.w	r6, #2
   127d4:	d020      	beq.n	12818 <usb_transfer+0xd0>
		/* start writing first chunk */
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   127d6:	f104 0134 	add.w	r1, r4, #52	; 0x34
   127da:	4816      	ldr	r0, [pc, #88]	; (12834 <usb_transfer+0xec>)
   127dc:	f015 f840 	bl	27860 <k_work_submit_to_queue>
	int i, key, ret = 0;
   127e0:	f04f 0a00 	mov.w	sl, #0
	__asm__ volatile(
   127e4:	f389 8811 	msr	BASEPRI, r9
   127e8:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
   127ec:	4650      	mov	r0, sl
   127ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		k_sem_give(&trans->sem);
   127f2:	f104 001c 	add.w	r0, r4, #28
	z_impl_k_sem_give(sem);
   127f6:	f00a fd45 	bl	1d284 <z_impl_k_sem_give>
		goto done;
   127fa:	e7f3      	b.n	127e4 <usb_transfer+0x9c>
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   127fc:	4628      	mov	r0, r5
   127fe:	f006 fb8f 	bl	18f20 <usb_dc_ep_mps>
   12802:	fbb7 f3f0 	udiv	r3, r7, r0
   12806:	fb00 7013 	mls	r0, r0, r3, r7
   1280a:	2800      	cmp	r0, #0
   1280c:	d0e0      	beq.n	127d0 <usb_transfer+0x88>
		trans->flags |= USB_TRANS_NO_ZLP;
   1280e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12810:	f043 0304 	orr.w	r3, r3, #4
   12814:	6463      	str	r3, [r4, #68]	; 0x44
   12816:	e7db      	b.n	127d0 <usb_transfer+0x88>
		ret = usb_dc_ep_read_continue(ep);
   12818:	4628      	mov	r0, r5
   1281a:	f006 fae1 	bl	18de0 <usb_dc_ep_read_continue>
   1281e:	4682      	mov	sl, r0
   12820:	e7e0      	b.n	127e4 <usb_transfer+0x9c>
		ret = -ENOMEM;
   12822:	f06f 0a0b 	mvn.w	sl, #11
   12826:	e7dd      	b.n	127e4 <usb_transfer+0x9c>
		return -EBUSY;
   12828:	f06f 0a0f 	mvn.w	sl, #15
   1282c:	e7de      	b.n	127ec <usb_transfer+0xa4>
   1282e:	bf00      	nop
   12830:	20002ab4 	.word	0x20002ab4
   12834:	200017c8 	.word	0x200017c8

00012838 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
   12838:	b510      	push	{r4, lr}
	__asm__ volatile(
   1283a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1283e:	f3ef 8411 	mrs	r4, BASEPRI
   12842:	f383 8812 	msr	BASEPRI_MAX, r3
   12846:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   1284a:	f7ff fe9b 	bl	12584 <usb_ep_get_transfer>
	if (!trans) {
   1284e:	b120      	cbz	r0, 1285a <usb_cancel_transfer+0x22>
   12850:	4601      	mov	r1, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
   12852:	6843      	ldr	r3, [r0, #4]
   12854:	f113 0f10 	cmn.w	r3, #16
   12858:	d004      	beq.n	12864 <usb_cancel_transfer+0x2c>
	__asm__ volatile(
   1285a:	f384 8811 	msr	BASEPRI, r4
   1285e:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
   12862:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
   12864:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   12868:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   1286a:	3134      	adds	r1, #52	; 0x34
   1286c:	4801      	ldr	r0, [pc, #4]	; (12874 <usb_cancel_transfer+0x3c>)
   1286e:	f014 fff7 	bl	27860 <k_work_submit_to_queue>
   12872:	e7f2      	b.n	1285a <usb_cancel_transfer+0x22>
   12874:	200017c8 	.word	0x200017c8

00012878 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   12878:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   1287a:	2400      	movs	r4, #0
   1287c:	e015      	b.n	128aa <usb_cancel_transfers+0x32>
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
   1287e:	4915      	ldr	r1, [pc, #84]	; (128d4 <usb_cancel_transfers+0x5c>)
   12880:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   12884:	00d3      	lsls	r3, r2, #3
   12886:	440b      	add	r3, r1
   12888:	f06f 028b 	mvn.w	r2, #139	; 0x8b
   1288c:	605a      	str	r2, [r3, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   1288e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   12892:	00d3      	lsls	r3, r2, #3
   12894:	3330      	adds	r3, #48	; 0x30
   12896:	4419      	add	r1, r3
   12898:	3104      	adds	r1, #4
   1289a:	480f      	ldr	r0, [pc, #60]	; (128d8 <usb_cancel_transfers+0x60>)
   1289c:	f014 ffe0 	bl	27860 <k_work_submit_to_queue>
   128a0:	f385 8811 	msr	BASEPRI, r5
   128a4:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   128a8:	3401      	adds	r4, #1
   128aa:	2c03      	cmp	r4, #3
   128ac:	dc11      	bgt.n	128d2 <usb_cancel_transfers+0x5a>
	__asm__ volatile(
   128ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   128b2:	f3ef 8511 	mrs	r5, BASEPRI
   128b6:	f383 8812 	msr	BASEPRI_MAX, r3
   128ba:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
   128be:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   128c2:	00da      	lsls	r2, r3, #3
   128c4:	4b03      	ldr	r3, [pc, #12]	; (128d4 <usb_cancel_transfers+0x5c>)
   128c6:	4413      	add	r3, r2
   128c8:	685b      	ldr	r3, [r3, #4]
   128ca:	f113 0f10 	cmn.w	r3, #16
   128ce:	d1e7      	bne.n	128a0 <usb_cancel_transfers+0x28>
   128d0:	e7d5      	b.n	1287e <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   128d2:	bd38      	pop	{r3, r4, r5, pc}
   128d4:	20002ab4 	.word	0x20002ab4
   128d8:	200017c8 	.word	0x200017c8

000128dc <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   128dc:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   128de:	2400      	movs	r4, #0
   128e0:	e014      	b.n	1290c <usb_transfer_init+0x30>
		k_work_init(&ut_data[i].work, usb_transfer_work);
   128e2:	4d0c      	ldr	r5, [pc, #48]	; (12914 <usb_transfer_init+0x38>)
   128e4:	00e6      	lsls	r6, r4, #3
   128e6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   128ea:	00d8      	lsls	r0, r3, #3
   128ec:	3030      	adds	r0, #48	; 0x30
   128ee:	4428      	add	r0, r5
   128f0:	4909      	ldr	r1, [pc, #36]	; (12918 <usb_transfer_init+0x3c>)
   128f2:	3004      	adds	r0, #4
   128f4:	f014 ffae 	bl	27854 <k_work_init>
		k_sem_init(&ut_data[i].sem, 1, 1);
   128f8:	1933      	adds	r3, r6, r4
   128fa:	00d8      	lsls	r0, r3, #3
   128fc:	3018      	adds	r0, #24
   128fe:	4428      	add	r0, r5
   12900:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   12902:	2201      	movs	r2, #1
   12904:	4611      	mov	r1, r2
   12906:	f014 ff1c 	bl	27742 <z_impl_k_sem_init>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   1290a:	3401      	adds	r4, #1
   1290c:	2c03      	cmp	r4, #3
   1290e:	dde8      	ble.n	128e2 <usb_transfer_init+0x6>
	}

	return 0;
}
   12910:	2000      	movs	r0, #0
   12912:	bd70      	pop	{r4, r5, r6, pc}
   12914:	20002ab4 	.word	0x20002ab4
   12918:	000125bd 	.word	0x000125bd

0001291c <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
   1291c:	b570      	push	{r4, r5, r6, lr}
   1291e:	4604      	mov	r4, r0
   12920:	460e      	mov	r6, r1
   12922:	4615      	mov	r5, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   12924:	7901      	ldrb	r1, [r0, #4]
   12926:	4816      	ldr	r0, [pc, #88]	; (12980 <cdc_acm_class_handle_req+0x64>)
   12928:	f00f fbf4 	bl	22114 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
   1292c:	b308      	cbz	r0, 12972 <cdc_acm_class_handle_req+0x56>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
   1292e:	f994 2000 	ldrsb.w	r2, [r4]
   12932:	2a00      	cmp	r2, #0
   12934:	db13      	blt.n	1295e <cdc_acm_class_handle_req+0x42>
		switch (setup->bRequest) {
   12936:	7862      	ldrb	r2, [r4, #1]
   12938:	2a20      	cmp	r2, #32
   1293a:	d004      	beq.n	12946 <cdc_acm_class_handle_req+0x2a>
   1293c:	2a22      	cmp	r2, #34	; 0x22
   1293e:	d009      	beq.n	12954 <cdc_acm_class_handle_req+0x38>
   12940:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12944:	e014      	b.n	12970 <cdc_acm_class_handle_req+0x54>
		case SET_LINE_CODING:
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
			memcpy(&dev_data->line_coding, *data,
   12946:	2207      	movs	r2, #7
   12948:	6829      	ldr	r1, [r5, #0]
   1294a:	380c      	subs	r0, #12
   1294c:	f010 f86f 	bl	22a2e <memcpy>
#if defined(CONFIG_CDC_ACM_DTE_RATE_CALLBACK_SUPPORT)
			if (rate != new_rate && dev_data->rate_cb != NULL) {
				dev_data->rate_cb(common->dev, new_rate);
			}
#endif
			return 0;
   12950:	2000      	movs	r0, #0
   12952:	e00d      	b.n	12970 <cdc_acm_class_handle_req+0x54>

		case SET_CONTROL_LINE_STATE:
			dev_data->line_state = (uint8_t)setup->wValue;
   12954:	78a2      	ldrb	r2, [r4, #2]
   12956:	f800 2c05 	strb.w	r2, [r0, #-5]
			LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
				dev_data->line_state);
			return 0;
   1295a:	2000      	movs	r0, #0
   1295c:	e008      	b.n	12970 <cdc_acm_class_handle_req+0x54>

		default:
			break;
		}
	} else {
		if (setup->bRequest == GET_LINE_CODING) {
   1295e:	7862      	ldrb	r2, [r4, #1]
   12960:	2a21      	cmp	r2, #33	; 0x21
   12962:	d109      	bne.n	12978 <cdc_acm_class_handle_req+0x5c>
			*data = (uint8_t *)(&dev_data->line_coding);
   12964:	f1a0 030c 	sub.w	r3, r0, #12
   12968:	602b      	str	r3, [r5, #0]
			*len = sizeof(dev_data->line_coding);
   1296a:	2307      	movs	r3, #7
   1296c:	6033      	str	r3, [r6, #0]
			LOG_DBG("CDC_GET_LINE_CODING %d %d %d %d",
				sys_le32_to_cpu(dev_data->line_coding.dwDTERate),
				dev_data->line_coding.bCharFormat,
				dev_data->line_coding.bParityType,
				dev_data->line_coding.bDataBits);
			return 0;
   1296e:	2000      	movs	r0, #0
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
}
   12970:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   12972:	f06f 0012 	mvn.w	r0, #18
   12976:	e7fb      	b.n	12970 <cdc_acm_class_handle_req+0x54>
	return -ENOTSUP;
   12978:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1297c:	e7f8      	b.n	12970 <cdc_acm_class_handle_req+0x54>
   1297e:	bf00      	nop
   12980:	20002bd4 	.word	0x20002bd4

00012984 <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
   12984:	b508      	push	{r3, lr}
   12986:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
   12988:	4803      	ldr	r0, [pc, #12]	; (12998 <cdc_acm_int_in+0x14>)
   1298a:	f00f fbd7 	bl	2213c <usb_get_dev_data_by_ep>
	if (common == NULL) {
   1298e:	b110      	cbz	r0, 12996 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
   12990:	2201      	movs	r2, #1
   12992:	f800 2c03 	strb.w	r2, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
   12996:	bd08      	pop	{r3, pc}
   12998:	20002bd4 	.word	0x20002bd4

0001299c <cdc_acm_irq_rx_enable>:
 * @param dev CDC ACM device struct.
 *
 * @return N/A
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
   1299c:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   1299e:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
   129a0:	2301      	movs	r3, #1
   129a2:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
   129a6:	680b      	ldr	r3, [r1, #0]
   129a8:	b113      	cbz	r3, 129b0 <cdc_acm_irq_rx_enable+0x14>
   129aa:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
   129ae:	b903      	cbnz	r3, 129b2 <cdc_acm_irq_rx_enable+0x16>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
	}
}
   129b0:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   129b2:	3108      	adds	r1, #8
   129b4:	4801      	ldr	r0, [pc, #4]	; (129bc <cdc_acm_irq_rx_enable+0x20>)
   129b6:	f014 ff53 	bl	27860 <k_work_submit_to_queue>
}
   129ba:	e7f9      	b.n	129b0 <cdc_acm_irq_rx_enable+0x14>
   129bc:	200017c8 	.word	0x200017c8

000129c0 <cdc_acm_irq_tx_enable>:
{
   129c0:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   129c2:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
   129c4:	2301      	movs	r3, #1
   129c6:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
   129ca:	680b      	ldr	r3, [r1, #0]
   129cc:	b113      	cbz	r3, 129d4 <cdc_acm_irq_tx_enable+0x14>
   129ce:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
   129d2:	b903      	cbnz	r3, 129d6 <cdc_acm_irq_tx_enable+0x16>
}
   129d4:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   129d6:	3108      	adds	r1, #8
   129d8:	4801      	ldr	r0, [pc, #4]	; (129e0 <cdc_acm_irq_tx_enable+0x20>)
   129da:	f014 ff41 	bl	27860 <k_work_submit_to_queue>
}
   129de:	e7f9      	b.n	129d4 <cdc_acm_irq_tx_enable+0x14>
   129e0:	200017c8 	.word	0x200017c8

000129e4 <cdc_acm_reset_port>:
{
   129e4:	b510      	push	{r4, lr}
   129e6:	4603      	mov	r3, r0
	dev_data->configured = false;
   129e8:	2400      	movs	r4, #0
   129ea:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
	dev_data->suspended = false;
   129ee:	f880 407f 	strb.w	r4, [r0, #127]	; 0x7f
	dev_data->rx_ready = false;
   129f2:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
	dev_data->tx_ready = false;
   129f6:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
   129fa:	4a0a      	ldr	r2, [pc, #40]	; (12a24 <cdc_acm_reset_port+0x40>)
   129fc:	e892 0003 	ldmia.w	r2, {r0, r1}
   12a00:	6758      	str	r0, [r3, #116]	; 0x74
   12a02:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
   12a06:	0c09      	lsrs	r1, r1, #16
   12a08:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
   12a0c:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
   12a10:	f883 407b 	strb.w	r4, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
   12a14:	2240      	movs	r2, #64	; 0x40
   12a16:	4621      	mov	r1, r4
   12a18:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   12a1c:	f010 f82b 	bl	22a76 <memset>
}
   12a20:	bd10      	pop	{r4, pc}
   12a22:	bf00      	nop
   12a24:	00028328 	.word	0x00028328

00012a28 <cdc_acm_fifo_fill>:
{
   12a28:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12a2a:	6904      	ldr	r4, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
   12a2c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   12a30:	b18b      	cbz	r3, 12a56 <cdc_acm_fifo_fill+0x2e>
   12a32:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
   12a36:	b10b      	cbz	r3, 12a3c <cdc_acm_fifo_fill+0x14>
		return 0;
   12a38:	2000      	movs	r0, #0
   12a3a:	e00d      	b.n	12a58 <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
   12a3c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   12a40:	6f20      	ldr	r0, [r4, #112]	; 0x70
   12a42:	f00f f99b 	bl	21d7c <ring_buf_put>
   12a46:	4605      	mov	r5, r0
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
   12a48:	f104 0118 	add.w	r1, r4, #24
   12a4c:	4803      	ldr	r0, [pc, #12]	; (12a5c <cdc_acm_fifo_fill+0x34>)
   12a4e:	f014 ff07 	bl	27860 <k_work_submit_to_queue>
	return wrote;
   12a52:	4628      	mov	r0, r5
   12a54:	e000      	b.n	12a58 <cdc_acm_fifo_fill+0x30>
		return 0;
   12a56:	2000      	movs	r0, #0
}
   12a58:	bd38      	pop	{r3, r4, r5, pc}
   12a5a:	bf00      	nop
   12a5c:	200017c8 	.word	0x200017c8

00012a60 <cdc_acm_read_cb>:
{
   12a60:	b530      	push	{r4, r5, lr}
   12a62:	b083      	sub	sp, #12
   12a64:	4605      	mov	r5, r0
   12a66:	4614      	mov	r4, r2
	if (size <= 0) {
   12a68:	1e0a      	subs	r2, r1, #0
   12a6a:	dd0c      	ble.n	12a86 <cdc_acm_read_cb+0x26>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   12a6c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   12a70:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   12a72:	f00f f983 	bl	21d7c <ring_buf_put>
	dev_data->rx_ready = true;
   12a76:	2301      	movs	r3, #1
   12a78:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
   12a7c:	6823      	ldr	r3, [r4, #0]
   12a7e:	b113      	cbz	r3, 12a86 <cdc_acm_read_cb+0x26>
   12a80:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   12a84:	b95b      	cbnz	r3, 12a9e <cdc_acm_read_cb+0x3e>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
   12a86:	9401      	str	r4, [sp, #4]
   12a88:	4b08      	ldr	r3, [pc, #32]	; (12aac <cdc_acm_read_cb+0x4c>)
   12a8a:	9300      	str	r3, [sp, #0]
   12a8c:	2301      	movs	r3, #1
   12a8e:	2240      	movs	r2, #64	; 0x40
   12a90:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   12a94:	4628      	mov	r0, r5
   12a96:	f7ff fe57 	bl	12748 <usb_transfer>
}
   12a9a:	b003      	add	sp, #12
   12a9c:	bd30      	pop	{r4, r5, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   12a9e:	f104 0108 	add.w	r1, r4, #8
   12aa2:	4803      	ldr	r0, [pc, #12]	; (12ab0 <cdc_acm_read_cb+0x50>)
   12aa4:	f014 fedc 	bl	27860 <k_work_submit_to_queue>
   12aa8:	e7ed      	b.n	12a86 <cdc_acm_read_cb+0x26>
   12aaa:	bf00      	nop
   12aac:	00012a61 	.word	0x00012a61
   12ab0:	200017c8 	.word	0x200017c8

00012ab4 <cdc_acm_do_cb>:
{
   12ab4:	b510      	push	{r4, lr}
   12ab6:	4604      	mov	r4, r0
	const struct device *dev = dev_data->common.dev;
   12ab8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	struct usb_cfg_data *cfg = (void *)dev->config;
   12abc:	685b      	ldr	r3, [r3, #4]
	switch (status) {
   12abe:	3901      	subs	r1, #1
   12ac0:	2905      	cmp	r1, #5
   12ac2:	d806      	bhi.n	12ad2 <cdc_acm_do_cb+0x1e>
   12ac4:	e8df f001 	tbb	[pc, r1]
   12ac8:	27060503 	.word	0x27060503
   12acc:	2e2a      	.short	0x2e2a
		cdc_acm_reset_port(dev_data);
   12ace:	f7ff ff89 	bl	129e4 <cdc_acm_reset_port>
}
   12ad2:	bd10      	pop	{r4, pc}
		if (!dev_data->configured) {
   12ad4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   12ad8:	b19a      	cbz	r2, 12b02 <cdc_acm_do_cb+0x4e>
		if (!dev_data->tx_ready) {
   12ada:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   12ade:	2b00      	cmp	r3, #0
   12ae0:	d1f7      	bne.n	12ad2 <cdc_acm_do_cb+0x1e>
			dev_data->tx_ready = true;
   12ae2:	2301      	movs	r3, #1
   12ae4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
   12ae8:	6823      	ldr	r3, [r4, #0]
   12aea:	2b00      	cmp	r3, #0
   12aec:	d0f1      	beq.n	12ad2 <cdc_acm_do_cb+0x1e>
   12aee:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   12af2:	2b00      	cmp	r3, #0
   12af4:	d0ed      	beq.n	12ad2 <cdc_acm_do_cb+0x1e>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   12af6:	f104 0108 	add.w	r1, r4, #8
   12afa:	4813      	ldr	r0, [pc, #76]	; (12b48 <cdc_acm_do_cb+0x94>)
   12afc:	f014 feb0 	bl	27860 <k_work_submit_to_queue>
   12b00:	e7e7      	b.n	12ad2 <cdc_acm_do_cb+0x1e>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
   12b02:	6a1b      	ldr	r3, [r3, #32]
   12b04:	4602      	mov	r2, r0
   12b06:	2100      	movs	r1, #0
   12b08:	7b18      	ldrb	r0, [r3, #12]
   12b0a:	f7ff ffa9 	bl	12a60 <cdc_acm_read_cb>
			dev_data->configured = true;
   12b0e:	2301      	movs	r3, #1
   12b10:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
   12b14:	e7e1      	b.n	12ada <cdc_acm_do_cb+0x26>
		cdc_acm_reset_port(dev_data);
   12b16:	f7ff ff65 	bl	129e4 <cdc_acm_reset_port>
		break;
   12b1a:	e7da      	b.n	12ad2 <cdc_acm_do_cb+0x1e>
		dev_data->suspended = true;
   12b1c:	2301      	movs	r3, #1
   12b1e:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
		break;
   12b22:	e7d6      	b.n	12ad2 <cdc_acm_do_cb+0x1e>
		if (dev_data->suspended) {
   12b24:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
   12b28:	2a00      	cmp	r2, #0
   12b2a:	d0d2      	beq.n	12ad2 <cdc_acm_do_cb+0x1e>
			dev_data->suspended = false;
   12b2c:	2200      	movs	r2, #0
   12b2e:	f880 207f 	strb.w	r2, [r0, #127]	; 0x7f
			if (dev_data->configured) {
   12b32:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
   12b36:	2a00      	cmp	r2, #0
   12b38:	d0cb      	beq.n	12ad2 <cdc_acm_do_cb+0x1e>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
   12b3a:	6a1b      	ldr	r3, [r3, #32]
   12b3c:	4602      	mov	r2, r0
   12b3e:	2100      	movs	r1, #0
   12b40:	7b18      	ldrb	r0, [r3, #12]
   12b42:	f7ff ff8d 	bl	12a60 <cdc_acm_read_cb>
}
   12b46:	e7c4      	b.n	12ad2 <cdc_acm_do_cb+0x1e>
   12b48:	200017c8 	.word	0x200017c8

00012b4c <cdc_acm_dev_status_cb>:
{
   12b4c:	b538      	push	{r3, r4, r5, lr}
   12b4e:	460c      	mov	r4, r1
   12b50:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
   12b52:	4601      	mov	r1, r0
   12b54:	4804      	ldr	r0, [pc, #16]	; (12b68 <cdc_acm_dev_status_cb+0x1c>)
   12b56:	f00f facb 	bl	220f0 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   12b5a:	b120      	cbz	r0, 12b66 <cdc_acm_dev_status_cb+0x1a>
	cdc_acm_do_cb(dev_data, status, param);
   12b5c:	462a      	mov	r2, r5
   12b5e:	4621      	mov	r1, r4
   12b60:	3880      	subs	r0, #128	; 0x80
   12b62:	f7ff ffa7 	bl	12ab4 <cdc_acm_do_cb>
}
   12b66:	bd38      	pop	{r3, r4, r5, pc}
   12b68:	20002bd4 	.word	0x20002bd4

00012b6c <cdc_acm_send_notification>:
 *
 * @return  N/A.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
   12b6c:	b530      	push	{r4, r5, lr}
   12b6e:	b085      	sub	sp, #20
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12b70:	6905      	ldr	r5, [r0, #16]
	struct usb_cfg_data * const cfg = (void *)dev->config;
   12b72:	6843      	ldr	r3, [r0, #4]
	struct cdc_acm_notification notification;
	uint32_t cnt = 0U;

	notification.bmRequestType = 0xA1;
   12b74:	22a1      	movs	r2, #161	; 0xa1
   12b76:	f88d 2004 	strb.w	r2, [sp, #4]
	notification.bNotificationType = 0x20;
   12b7a:	2220      	movs	r2, #32
   12b7c:	f88d 2005 	strb.w	r2, [sp, #5]
	notification.wValue = 0U;
   12b80:	2400      	movs	r4, #0
   12b82:	f8ad 4006 	strh.w	r4, [sp, #6]
	notification.wIndex = 0U;
   12b86:	f8ad 4008 	strh.w	r4, [sp, #8]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
   12b8a:	2202      	movs	r2, #2
   12b8c:	f8ad 200a 	strh.w	r2, [sp, #10]
	notification.data = sys_cpu_to_le16(serial_state);
   12b90:	f8ad 100c 	strh.w	r1, [sp, #12]

	dev_data->notification_sent = 0U;
   12b94:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
   12b98:	6a18      	ldr	r0, [r3, #32]
   12b9a:	4623      	mov	r3, r4
   12b9c:	220a      	movs	r2, #10
   12b9e:	a901      	add	r1, sp, #4
   12ba0:	7900      	ldrb	r0, [r0, #4]
   12ba2:	f00f fa0e 	bl	21fc2 <usb_write>
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
   12ba6:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
   12baa:	b94b      	cbnz	r3, 12bc0 <cdc_acm_send_notification+0x54>
	z_impl_k_busy_wait(usec_to_wait);
   12bac:	2001      	movs	r0, #1
   12bae:	f015 f8df 	bl	27d70 <z_impl_k_busy_wait>
		k_busy_wait(1);

		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
   12bb2:	3401      	adds	r4, #1
   12bb4:	4b04      	ldr	r3, [pc, #16]	; (12bc8 <cdc_acm_send_notification+0x5c>)
   12bb6:	429c      	cmp	r4, r3
   12bb8:	d9f5      	bls.n	12ba6 <cdc_acm_send_notification+0x3a>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
   12bba:	f06f 0004 	mvn.w	r0, #4
   12bbe:	e000      	b.n	12bc2 <cdc_acm_send_notification+0x56>
		}
	}

	return 0;
   12bc0:	2000      	movs	r0, #0
}
   12bc2:	b005      	add	sp, #20
   12bc4:	bd30      	pop	{r4, r5, pc}
   12bc6:	bf00      	nop
   12bc8:	000186a0 	.word	0x000186a0

00012bcc <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
   12bcc:	b510      	push	{r4, lr}
   12bce:	b082      	sub	sp, #8
   12bd0:	f88d 1007 	strb.w	r1, [sp, #7]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   12bd4:	6904      	ldr	r4, [r0, #16]

	if (!dev_data->configured || dev_data->suspended) {
   12bd6:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   12bda:	b113      	cbz	r3, 12be2 <cdc_acm_poll_out+0x16>
   12bdc:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
   12be0:	b10b      	cbz	r3, 12be6 <cdc_acm_poll_out+0x1a>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
   12be2:	b002      	add	sp, #8
   12be4:	bd10      	pop	{r4, pc}
	dev_data->tx_ready = false;
   12be6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   12bea:	2201      	movs	r2, #1
   12bec:	f10d 0107 	add.w	r1, sp, #7
   12bf0:	6f20      	ldr	r0, [r4, #112]	; 0x70
   12bf2:	f00f f8c3 	bl	21d7c <ring_buf_put>
   12bf6:	b970      	cbnz	r0, 12c16 <cdc_acm_poll_out+0x4a>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   12bf8:	2201      	movs	r2, #1
   12bfa:	2100      	movs	r1, #0
   12bfc:	6f20      	ldr	r0, [r4, #112]	; 0x70
   12bfe:	f00f f927 	bl	21e50 <ring_buf_get>
   12c02:	2800      	cmp	r0, #0
   12c04:	d0ed      	beq.n	12be2 <cdc_acm_poll_out+0x16>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   12c06:	2201      	movs	r2, #1
   12c08:	f10d 0107 	add.w	r1, sp, #7
   12c0c:	6f20      	ldr	r0, [r4, #112]	; 0x70
   12c0e:	f00f f8b5 	bl	21d7c <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   12c12:	2800      	cmp	r0, #0
   12c14:	d0e5      	beq.n	12be2 <cdc_acm_poll_out+0x16>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
   12c16:	f104 0118 	add.w	r1, r4, #24
   12c1a:	4802      	ldr	r0, [pc, #8]	; (12c24 <cdc_acm_poll_out+0x58>)
   12c1c:	f014 fe20 	bl	27860 <k_work_submit_to_queue>
   12c20:	e7df      	b.n	12be2 <cdc_acm_poll_out+0x16>
   12c22:	bf00      	nop
   12c24:	200017c8 	.word	0x200017c8

00012c28 <cdc_acm_write_cb>:
{
   12c28:	b510      	push	{r4, lr}
   12c2a:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
   12c2c:	2301      	movs	r3, #1
   12c2e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
   12c32:	6813      	ldr	r3, [r2, #0]
   12c34:	b113      	cbz	r3, 12c3c <cdc_acm_write_cb+0x14>
   12c36:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
   12c3a:	b923      	cbnz	r3, 12c46 <cdc_acm_write_cb+0x1e>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
   12c3c:	6f20      	ldr	r0, [r4, #112]	; 0x70
   12c3e:	f00f f84f 	bl	21ce0 <ring_buf_is_empty>
   12c42:	b130      	cbz	r0, 12c52 <cdc_acm_write_cb+0x2a>
}
   12c44:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   12c46:	f102 0108 	add.w	r1, r2, #8
   12c4a:	4805      	ldr	r0, [pc, #20]	; (12c60 <cdc_acm_write_cb+0x38>)
   12c4c:	f014 fe08 	bl	27860 <k_work_submit_to_queue>
   12c50:	e7f4      	b.n	12c3c <cdc_acm_write_cb+0x14>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
   12c52:	f104 0118 	add.w	r1, r4, #24
   12c56:	4802      	ldr	r0, [pc, #8]	; (12c60 <cdc_acm_write_cb+0x38>)
   12c58:	f014 fe02 	bl	27860 <k_work_submit_to_queue>
   12c5c:	e7f2      	b.n	12c44 <cdc_acm_write_cb+0x1c>
   12c5e:	bf00      	nop
   12c60:	200017c8 	.word	0x200017c8

00012c64 <cdc_acm_init>:
{
   12c64:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12c66:	6904      	ldr	r4, [r0, #16]
	dev_data->common.dev = dev;
   12c68:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
   12c6c:	f104 0384 	add.w	r3, r4, #132	; 0x84
	parent->next = child;
   12c70:	2200      	movs	r2, #0
   12c72:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   12c76:	4a0b      	ldr	r2, [pc, #44]	; (12ca4 <cdc_acm_init+0x40>)
   12c78:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   12c7a:	b172      	cbz	r2, 12c9a <cdc_acm_init+0x36>
	parent->next = child;
   12c7c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   12c7e:	4a09      	ldr	r2, [pc, #36]	; (12ca4 <cdc_acm_init+0x40>)
   12c80:	6053      	str	r3, [r2, #4]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
   12c82:	4909      	ldr	r1, [pc, #36]	; (12ca8 <cdc_acm_init+0x44>)
   12c84:	f104 0008 	add.w	r0, r4, #8
   12c88:	f014 fde4 	bl	27854 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
   12c8c:	4907      	ldr	r1, [pc, #28]	; (12cac <cdc_acm_init+0x48>)
   12c8e:	f104 0018 	add.w	r0, r4, #24
   12c92:	f014 fddf 	bl	27854 <k_work_init>
}
   12c96:	2000      	movs	r0, #0
   12c98:	bd10      	pop	{r4, pc}
   12c9a:	4a02      	ldr	r2, [pc, #8]	; (12ca4 <cdc_acm_init+0x40>)
   12c9c:	6053      	str	r3, [r2, #4]
	list->head = node;
   12c9e:	6013      	str	r3, [r2, #0]
}
   12ca0:	e7ef      	b.n	12c82 <cdc_acm_init+0x1e>
   12ca2:	bf00      	nop
   12ca4:	20002bd4 	.word	0x20002bd4
   12ca8:	000221ad 	.word	0x000221ad
   12cac:	00012cb1 	.word	0x00012cb1

00012cb0 <tx_work_handler>:
{
   12cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12cb2:	b085      	sub	sp, #20
   12cb4:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data =
   12cb6:	f1a0 0718 	sub.w	r7, r0, #24
	const struct device *dev = dev_data->common.dev;
   12cba:	6e83      	ldr	r3, [r0, #104]	; 0x68
	struct usb_cfg_data *cfg = (void *)dev->config;
   12cbc:	685b      	ldr	r3, [r3, #4]
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
   12cbe:	6a1b      	ldr	r3, [r3, #32]
   12cc0:	7d1d      	ldrb	r5, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
   12cc2:	4628      	mov	r0, r5
   12cc4:	f00f fa5a 	bl	2217c <usb_transfer_is_busy>
   12cc8:	b108      	cbz	r0, 12cce <tx_work_handler+0x1e>
}
   12cca:	b005      	add	sp, #20
   12ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
   12cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12cd2:	a903      	add	r1, sp, #12
   12cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12cd6:	f00f f871 	bl	21dbc <ring_buf_get_claim>
	if (!len) {
   12cda:	4606      	mov	r6, r0
   12cdc:	2800      	cmp	r0, #0
   12cde:	d0f4      	beq.n	12cca <tx_work_handler+0x1a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
   12ce0:	f010 0f3f 	tst.w	r0, #63	; 0x3f
   12ce4:	d100      	bne.n	12ce8 <tx_work_handler+0x38>
		len -= 1;
   12ce6:	1e46      	subs	r6, r0, #1
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
   12ce8:	9701      	str	r7, [sp, #4]
   12cea:	4b06      	ldr	r3, [pc, #24]	; (12d04 <tx_work_handler+0x54>)
   12cec:	9300      	str	r3, [sp, #0]
   12cee:	2302      	movs	r3, #2
   12cf0:	4632      	mov	r2, r6
   12cf2:	9903      	ldr	r1, [sp, #12]
   12cf4:	4628      	mov	r0, r5
   12cf6:	f7ff fd27 	bl	12748 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
   12cfa:	4631      	mov	r1, r6
   12cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12cfe:	f00f f889 	bl	21e14 <ring_buf_get_finish>
   12d02:	e7e2      	b.n	12cca <tx_work_handler+0x1a>
   12d04:	00012c29 	.word	0x00012c29

00012d08 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
   12d08:	b530      	push	{r4, r5, lr}
   12d0a:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
   12d0c:	4d08      	ldr	r5, [pc, #32]	; (12d30 <z_usb_work_q_init+0x28>)
   12d0e:	2400      	movs	r4, #0
   12d10:	9400      	str	r4, [sp, #0]
   12d12:	f04f 33ff 	mov.w	r3, #4294967295
   12d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12d1a:	4906      	ldr	r1, [pc, #24]	; (12d34 <z_usb_work_q_init+0x2c>)
   12d1c:	4628      	mov	r0, r5
   12d1e:	f00a fc83 	bl	1d628 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   12d22:	4905      	ldr	r1, [pc, #20]	; (12d38 <z_usb_work_q_init+0x30>)
   12d24:	4628      	mov	r0, r5
   12d26:	f00a f8bf 	bl	1cea8 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
   12d2a:	4620      	mov	r0, r4
   12d2c:	b003      	add	sp, #12
   12d2e:	bd30      	pop	{r4, r5, pc}
   12d30:	200017c8 	.word	0x200017c8
   12d34:	20006c60 	.word	0x20006c60
   12d38:	000286d4 	.word	0x000286d4

00012d3c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   12d3c:	4b1b      	ldr	r3, [pc, #108]	; (12dac <pm_system_resume+0x70>)
   12d3e:	681b      	ldr	r3, [r3, #0]
   12d40:	2b00      	cmp	r3, #0
   12d42:	d132      	bne.n	12daa <pm_system_resume+0x6e>
{
   12d44:	b530      	push	{r4, r5, lr}
   12d46:	b085      	sub	sp, #20
		post_ops_done = 1;
   12d48:	4b18      	ldr	r3, [pc, #96]	; (12dac <pm_system_resume+0x70>)
   12d4a:	2201      	movs	r2, #1
   12d4c:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   12d4e:	4b18      	ldr	r3, [pc, #96]	; (12db0 <pm_system_resume+0x74>)
   12d50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12d54:	ab04      	add	r3, sp, #16
   12d56:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   12d5a:	4b16      	ldr	r3, [pc, #88]	; (12db4 <pm_system_resume+0x78>)
   12d5c:	b163      	cbz	r3, 12d78 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
   12d5e:	f00f febd 	bl	22adc <pm_power_state_exit_post_ops>
   12d62:	f04f 0340 	mov.w	r3, #64	; 0x40
   12d66:	f3ef 8511 	mrs	r5, BASEPRI
   12d6a:	f383 8812 	msr	BASEPRI_MAX, r3
   12d6e:	f3bf 8f6f 	isb	sy
	return list->head;
   12d72:	4b11      	ldr	r3, [pc, #68]	; (12db8 <pm_system_resume+0x7c>)
   12d74:	681c      	ldr	r4, [r3, #0]
   12d76:	e00a      	b.n	12d8e <pm_system_resume+0x52>
	__asm__ volatile(
   12d78:	2300      	movs	r3, #0
   12d7a:	f383 8811 	msr	BASEPRI, r3
   12d7e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12d82:	e7ee      	b.n	12d62 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12d84:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   12d86:	b10c      	cbz	r4, 12d8c <pm_system_resume+0x50>
	return node->next;
   12d88:	6823      	ldr	r3, [r4, #0]
   12d8a:	b143      	cbz	r3, 12d9e <pm_system_resume+0x62>
{
   12d8c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12d8e:	b134      	cbz	r4, 12d9e <pm_system_resume+0x62>
			callback = notifier->state_exit;
   12d90:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
   12d92:	2b00      	cmp	r3, #0
   12d94:	d0f6      	beq.n	12d84 <pm_system_resume+0x48>
			callback(z_power_state.state);
   12d96:	4a06      	ldr	r2, [pc, #24]	; (12db0 <pm_system_resume+0x74>)
   12d98:	7810      	ldrb	r0, [r2, #0]
   12d9a:	4798      	blx	r3
   12d9c:	e7f2      	b.n	12d84 <pm_system_resume+0x48>
	__asm__ volatile(
   12d9e:	f385 8811 	msr	BASEPRI, r5
   12da2:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
   12da6:	b005      	add	sp, #20
   12da8:	bd30      	pop	{r4, r5, pc}
   12daa:	4770      	bx	lr
   12dac:	20000530 	.word	0x20000530
   12db0:	20002be4 	.word	0x20002be4
   12db4:	00022add 	.word	0x00022add
   12db8:	20002bdc 	.word	0x20002bdc

00012dbc <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   12dbc:	b570      	push	{r4, r5, r6, lr}
   12dbe:	b088      	sub	sp, #32
   12dc0:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   12dc2:	4c2a      	ldr	r4, [pc, #168]	; (12e6c <pm_system_suspend+0xb0>)
   12dc4:	466d      	mov	r5, sp
   12dc6:	4601      	mov	r1, r0
   12dc8:	4628      	mov	r0, r5
   12dca:	f00f fb1b 	bl	22404 <pm_policy_next_state>
   12dce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   12dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   12dd6:	7820      	ldrb	r0, [r4, #0]
   12dd8:	2800      	cmp	r0, #0
   12dda:	d045      	beq.n	12e68 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   12ddc:	4b24      	ldr	r3, [pc, #144]	; (12e70 <pm_system_suspend+0xb4>)
   12dde:	2200      	movs	r2, #0
   12de0:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   12de2:	f1b6 3fff 	cmp.w	r6, #4294967295
   12de6:	d10c      	bne.n	12e02 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12de8:	f00a fcea 	bl	1d7c0 <k_sched_lock>
	__asm__ volatile(
   12dec:	f04f 0340 	mov.w	r3, #64	; 0x40
   12df0:	f3ef 8511 	mrs	r5, BASEPRI
   12df4:	f383 8812 	msr	BASEPRI_MAX, r3
   12df8:	f3bf 8f6f 	isb	sy
	return list->head;
   12dfc:	4b1d      	ldr	r3, [pc, #116]	; (12e74 <pm_system_suspend+0xb8>)
   12dfe:	681c      	ldr	r4, [r3, #0]
   12e00:	e016      	b.n	12e30 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
   12e02:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   12e04:	0c59      	lsrs	r1, r3, #17
   12e06:	03d8      	lsls	r0, r3, #15
   12e08:	4c1b      	ldr	r4, [pc, #108]	; (12e78 <pm_system_suspend+0xbc>)
   12e0a:	4a1c      	ldr	r2, [pc, #112]	; (12e7c <pm_system_suspend+0xc0>)
   12e0c:	2300      	movs	r3, #0
   12e0e:	1900      	adds	r0, r0, r4
   12e10:	f04f 0400 	mov.w	r4, #0
   12e14:	eb44 0101 	adc.w	r1, r4, r1
   12e18:	f7ee f972 	bl	1100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   12e1c:	2101      	movs	r1, #1
   12e1e:	1a30      	subs	r0, r6, r0
   12e20:	f014 ff77 	bl	27d12 <z_set_timeout_expiry>
   12e24:	e7e0      	b.n	12de8 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12e26:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   12e28:	b10c      	cbz	r4, 12e2e <pm_system_suspend+0x72>
	return node->next;
   12e2a:	6823      	ldr	r3, [r4, #0]
   12e2c:	b143      	cbz	r3, 12e40 <pm_system_suspend+0x84>
{
   12e2e:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12e30:	b134      	cbz	r4, 12e40 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
   12e32:	6863      	ldr	r3, [r4, #4]
		if (callback) {
   12e34:	2b00      	cmp	r3, #0
   12e36:	d0f6      	beq.n	12e26 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
   12e38:	4a0c      	ldr	r2, [pc, #48]	; (12e6c <pm_system_suspend+0xb0>)
   12e3a:	7810      	ldrb	r0, [r2, #0]
   12e3c:	4798      	blx	r3
   12e3e:	e7f2      	b.n	12e26 <pm_system_suspend+0x6a>
	__asm__ volatile(
   12e40:	f385 8811 	msr	BASEPRI, r5
   12e44:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
   12e48:	4b08      	ldr	r3, [pc, #32]	; (12e6c <pm_system_suspend+0xb0>)
   12e4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12e4e:	ab08      	add	r3, sp, #32
   12e50:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   12e54:	4b0a      	ldr	r3, [pc, #40]	; (12e80 <pm_system_suspend+0xc4>)
   12e56:	b10b      	cbz	r3, 12e5c <pm_system_suspend+0xa0>
		pm_power_state_set(info);
   12e58:	f00f fe2d 	bl	22ab6 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   12e5c:	f7ff ff6e 	bl	12d3c <pm_system_resume>
	k_sched_unlock();
   12e60:	f00a feac 	bl	1dbbc <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   12e64:	4b01      	ldr	r3, [pc, #4]	; (12e6c <pm_system_suspend+0xb0>)
   12e66:	7818      	ldrb	r0, [r3, #0]
}
   12e68:	b008      	add	sp, #32
   12e6a:	bd70      	pop	{r4, r5, r6, pc}
   12e6c:	20002be4 	.word	0x20002be4
   12e70:	20000530 	.word	0x20000530
   12e74:	20002bdc 	.word	0x20002bdc
   12e78:	000f423f 	.word	0x000f423f
   12e7c:	000f4240 	.word	0x000f4240
   12e80:	00022ab7 	.word	0x00022ab7

00012e84 <notify_filter_matched>:
}

static void notify_filter_matched(struct bt_scan_device_info *device_info,
				  struct bt_scan_filter_match *filter_match,
				  bool connectable)
{
   12e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e86:	4605      	mov	r5, r0
   12e88:	460e      	mov	r6, r1
   12e8a:	4617      	mov	r7, r2
	return list->head;
   12e8c:	4b0b      	ldr	r3, [pc, #44]	; (12ebc <notify_filter_matched+0x38>)
   12e8e:	681c      	ldr	r4, [r3, #0]
	struct bt_scan_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12e90:	b134      	cbz	r4, 12ea0 <notify_filter_matched+0x1c>
   12e92:	3c04      	subs	r4, #4
   12e94:	e004      	b.n	12ea0 <notify_filter_matched+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12e96:	1d23      	adds	r3, r4, #4
   12e98:	d00c      	beq.n	12eb4 <notify_filter_matched+0x30>
	return node->next;
   12e9a:	6864      	ldr	r4, [r4, #4]
   12e9c:	b164      	cbz	r4, 12eb8 <notify_filter_matched+0x34>
   12e9e:	3c04      	subs	r4, #4
   12ea0:	b154      	cbz	r4, 12eb8 <notify_filter_matched+0x34>
		if (cb->cb_addr->filter_match) {
   12ea2:	6823      	ldr	r3, [r4, #0]
   12ea4:	681b      	ldr	r3, [r3, #0]
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d0f5      	beq.n	12e96 <notify_filter_matched+0x12>
			cb->cb_addr->filter_match(device_info, filter_match,
   12eaa:	463a      	mov	r2, r7
   12eac:	4631      	mov	r1, r6
   12eae:	4628      	mov	r0, r5
   12eb0:	4798      	blx	r3
   12eb2:	e7f0      	b.n	12e96 <notify_filter_matched+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12eb4:	461c      	mov	r4, r3
   12eb6:	e7f3      	b.n	12ea0 <notify_filter_matched+0x1c>
						  connectable);
		}
	}
}
   12eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12eba:	bf00      	nop
   12ebc:	20002c84 	.word	0x20002c84

00012ec0 <notify_filter_no_match>:

static void notify_filter_no_match(struct bt_scan_device_info *device_info,
				   bool connectable)
{
   12ec0:	b570      	push	{r4, r5, r6, lr}
   12ec2:	4605      	mov	r5, r0
   12ec4:	460e      	mov	r6, r1
	return list->head;
   12ec6:	4b0b      	ldr	r3, [pc, #44]	; (12ef4 <notify_filter_no_match+0x34>)
   12ec8:	681c      	ldr	r4, [r3, #0]
	struct bt_scan_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12eca:	b134      	cbz	r4, 12eda <notify_filter_no_match+0x1a>
   12ecc:	3c04      	subs	r4, #4
   12ece:	e004      	b.n	12eda <notify_filter_no_match+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12ed0:	1d23      	adds	r3, r4, #4
   12ed2:	d00b      	beq.n	12eec <notify_filter_no_match+0x2c>
	return node->next;
   12ed4:	6864      	ldr	r4, [r4, #4]
   12ed6:	b15c      	cbz	r4, 12ef0 <notify_filter_no_match+0x30>
   12ed8:	3c04      	subs	r4, #4
   12eda:	b14c      	cbz	r4, 12ef0 <notify_filter_no_match+0x30>
		if (cb->cb_addr->filter_no_match) {
   12edc:	6823      	ldr	r3, [r4, #0]
   12ede:	685b      	ldr	r3, [r3, #4]
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d0f5      	beq.n	12ed0 <notify_filter_no_match+0x10>
			cb->cb_addr->filter_no_match(device_info, connectable);
   12ee4:	4631      	mov	r1, r6
   12ee6:	4628      	mov	r0, r5
   12ee8:	4798      	blx	r3
   12eea:	e7f1      	b.n	12ed0 <notify_filter_no_match+0x10>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12eec:	461c      	mov	r4, r3
   12eee:	e7f4      	b.n	12eda <notify_filter_no_match+0x1a>
		}
	}
}
   12ef0:	bd70      	pop	{r4, r5, r6, pc}
   12ef2:	bf00      	nop
   12ef4:	20002c84 	.word	0x20002c84

00012ef8 <notify_connecting>:

static void notify_connecting(struct bt_scan_device_info *device_info,
			      struct bt_conn *conn)
{
   12ef8:	b570      	push	{r4, r5, r6, lr}
   12efa:	4605      	mov	r5, r0
   12efc:	460e      	mov	r6, r1
	return list->head;
   12efe:	4b0b      	ldr	r3, [pc, #44]	; (12f2c <notify_connecting+0x34>)
   12f00:	681c      	ldr	r4, [r3, #0]
	struct bt_scan_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12f02:	b134      	cbz	r4, 12f12 <notify_connecting+0x1a>
   12f04:	3c04      	subs	r4, #4
   12f06:	e004      	b.n	12f12 <notify_connecting+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12f08:	1d23      	adds	r3, r4, #4
   12f0a:	d00b      	beq.n	12f24 <notify_connecting+0x2c>
	return node->next;
   12f0c:	6864      	ldr	r4, [r4, #4]
   12f0e:	b15c      	cbz	r4, 12f28 <notify_connecting+0x30>
   12f10:	3c04      	subs	r4, #4
   12f12:	b14c      	cbz	r4, 12f28 <notify_connecting+0x30>
		if (cb->cb_addr->connecting) {
   12f14:	6823      	ldr	r3, [r4, #0]
   12f16:	68db      	ldr	r3, [r3, #12]
   12f18:	2b00      	cmp	r3, #0
   12f1a:	d0f5      	beq.n	12f08 <notify_connecting+0x10>
			cb->cb_addr->connecting(device_info, conn);
   12f1c:	4631      	mov	r1, r6
   12f1e:	4628      	mov	r0, r5
   12f20:	4798      	blx	r3
   12f22:	e7f1      	b.n	12f08 <notify_connecting+0x10>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12f24:	461c      	mov	r4, r3
   12f26:	e7f4      	b.n	12f12 <notify_connecting+0x1a>
		}
	}
}
   12f28:	bd70      	pop	{r4, r5, r6, pc}
   12f2a:	bf00      	nop
   12f2c:	20002c84 	.word	0x20002c84

00012f30 <notify_connecting_error>:

static void notify_connecting_error(struct bt_scan_device_info *device_info)
{
   12f30:	b538      	push	{r3, r4, r5, lr}
   12f32:	4605      	mov	r5, r0
	return list->head;
   12f34:	4b0a      	ldr	r3, [pc, #40]	; (12f60 <notify_connecting_error+0x30>)
   12f36:	681c      	ldr	r4, [r3, #0]
	struct bt_scan_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12f38:	b134      	cbz	r4, 12f48 <notify_connecting_error+0x18>
   12f3a:	3c04      	subs	r4, #4
   12f3c:	e004      	b.n	12f48 <notify_connecting_error+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12f3e:	1d23      	adds	r3, r4, #4
   12f40:	d00a      	beq.n	12f58 <notify_connecting_error+0x28>
	return node->next;
   12f42:	6864      	ldr	r4, [r4, #4]
   12f44:	b154      	cbz	r4, 12f5c <notify_connecting_error+0x2c>
   12f46:	3c04      	subs	r4, #4
   12f48:	b144      	cbz	r4, 12f5c <notify_connecting_error+0x2c>
		if (cb->cb_addr->connecting_error) {
   12f4a:	6823      	ldr	r3, [r4, #0]
   12f4c:	689b      	ldr	r3, [r3, #8]
   12f4e:	2b00      	cmp	r3, #0
   12f50:	d0f5      	beq.n	12f3e <notify_connecting_error+0xe>
			cb->cb_addr->connecting_error(device_info);
   12f52:	4628      	mov	r0, r5
   12f54:	4798      	blx	r3
   12f56:	e7f2      	b.n	12f3e <notify_connecting_error+0xe>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   12f58:	461c      	mov	r4, r3
   12f5a:	e7f5      	b.n	12f48 <notify_connecting_error+0x18>
		}
	}
}
   12f5c:	bd38      	pop	{r3, r4, r5, pc}
   12f5e:	bf00      	nop
   12f60:	20002c84 	.word	0x20002c84

00012f64 <is_uuid_filter_enabled>:
}

static bool is_uuid_filter_enabled(void)
{
	return CONFIG_BT_SCAN_UUID_CNT && bt_scan.scan_filters.uuid.enabled;
}
   12f64:	4b01      	ldr	r3, [pc, #4]	; (12f6c <is_uuid_filter_enabled+0x8>)
   12f66:	f893 0069 	ldrb.w	r0, [r3, #105]	; 0x69
   12f6a:	4770      	bx	lr
   12f6c:	20002bf0 	.word	0x20002bf0

00012f70 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   12f70:	b470      	push	{r4, r5, r6}
   12f72:	b087      	sub	sp, #28
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   12f74:	ac01      	add	r4, sp, #4
   12f76:	4d06      	ldr	r5, [pc, #24]	; (12f90 <scan_default_param_set+0x20>)
   12f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   12f7c:	4c05      	ldr	r4, [pc, #20]	; (12f94 <scan_default_param_set+0x24>)
   12f7e:	ae01      	add	r6, sp, #4
   12f80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12f84:	682b      	ldr	r3, [r5, #0]
   12f86:	6023      	str	r3, [r4, #0]
}
   12f88:	b007      	add	sp, #28
   12f8a:	bc70      	pop	{r4, r5, r6}
   12f8c:	4770      	bx	lr
   12f8e:	bf00      	nop
   12f90:	00028330 	.word	0x00028330
   12f94:	20002c68 	.word	0x20002c68

00012f98 <scan_default_conn_param_set>:
	.disconnected = disconnected
};
#endif /* CONFIG_BT_SCAN_CONN_ATTEMPTS_FILTER */

static void scan_default_conn_param_set(void)
{
   12f98:	b082      	sub	sp, #8
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;
   12f9a:	466b      	mov	r3, sp
   12f9c:	4a04      	ldr	r2, [pc, #16]	; (12fb0 <scan_default_conn_param_set+0x18>)
   12f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
   12fa2:	e883 0003 	stmia.w	r3, {r0, r1}

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
   12fa6:	4a03      	ldr	r2, [pc, #12]	; (12fb4 <scan_default_conn_param_set+0x1c>)
   12fa8:	e882 0003 	stmia.w	r2, {r0, r1}
}
   12fac:	b002      	add	sp, #8
   12fae:	4770      	bx	lr
   12fb0:	00028344 	.word	0x00028344
   12fb4:	20002c7c 	.word	0x20002c7c

00012fb8 <scan_uuid_filter_add>:
{
   12fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   12fba:	4b29      	ldr	r3, [pc, #164]	; (13060 <scan_uuid_filter_add+0xa8>)
   12fbc:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
   12fc0:	2d03      	cmp	r5, #3
   12fc2:	d84a      	bhi.n	1305a <scan_uuid_filter_add+0xa2>
   12fc4:	4606      	mov	r6, r0
	for (size_t i = 0; i < counter; i++) {
   12fc6:	2400      	movs	r4, #0
   12fc8:	42a5      	cmp	r5, r4
   12fca:	d90b      	bls.n	12fe4 <scan_uuid_filter_add+0x2c>
		if (bt_uuid_cmp(uuid_filter[i].uuid, uuid) == 0) {
   12fcc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   12fd0:	4631      	mov	r1, r6
   12fd2:	4a24      	ldr	r2, [pc, #144]	; (13064 <scan_uuid_filter_add+0xac>)
   12fd4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   12fd8:	f00f fd9e 	bl	22b18 <bt_uuid_cmp>
   12fdc:	4603      	mov	r3, r0
   12fde:	b1d8      	cbz	r0, 13018 <scan_uuid_filter_add+0x60>
	for (size_t i = 0; i < counter; i++) {
   12fe0:	3401      	adds	r4, #1
   12fe2:	e7f1      	b.n	12fc8 <scan_uuid_filter_add+0x10>
	switch (uuid->type) {
   12fe4:	7832      	ldrb	r2, [r6, #0]
   12fe6:	2a01      	cmp	r2, #1
   12fe8:	d018      	beq.n	1301c <scan_uuid_filter_add+0x64>
   12fea:	2a02      	cmp	r2, #2
   12fec:	d023      	beq.n	13036 <scan_uuid_filter_add+0x7e>
   12fee:	b112      	cbz	r2, 12ff6 <scan_uuid_filter_add+0x3e>
   12ff0:	f06f 0315 	mvn.w	r3, #21
   12ff4:	e010      	b.n	13018 <scan_uuid_filter_add+0x60>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
   12ff6:	4a1b      	ldr	r2, [pc, #108]	; (13064 <scan_uuid_filter_add+0xac>)
   12ff8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   12ffc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   13000:	1d0c      	adds	r4, r1, #4
   13002:	6830      	ldr	r0, [r6, #0]
   13004:	6048      	str	r0, [r1, #4]
		uuid_filter[counter].uuid =
   13006:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	bt_scan.scan_filters.uuid.cnt++;
   1300a:	4a15      	ldr	r2, [pc, #84]	; (13060 <scan_uuid_filter_add+0xa8>)
   1300c:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
   13010:	3301      	adds	r3, #1
   13012:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
	return 0;
   13016:	2300      	movs	r3, #0
}
   13018:	4618      	mov	r0, r3
   1301a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
   1301c:	4c11      	ldr	r4, [pc, #68]	; (13064 <scan_uuid_filter_add+0xac>)
   1301e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   13022:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   13026:	3204      	adds	r2, #4
   13028:	e896 0003 	ldmia.w	r6, {r0, r1}
   1302c:	e882 0003 	stmia.w	r2, {r0, r1}
		uuid_filter[counter].uuid =
   13030:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
		break;
   13034:	e7e9      	b.n	1300a <scan_uuid_filter_add+0x52>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
   13036:	f8df c02c 	ldr.w	ip, [pc, #44]	; 13064 <scan_uuid_filter_add+0xac>
   1303a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   1303e:	eb0c 07c4 	add.w	r7, ip, r4, lsl #3
   13042:	1d3d      	adds	r5, r7, #4
   13044:	6830      	ldr	r0, [r6, #0]
   13046:	6871      	ldr	r1, [r6, #4]
   13048:	68b2      	ldr	r2, [r6, #8]
   1304a:	68f3      	ldr	r3, [r6, #12]
   1304c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1304e:	7c33      	ldrb	r3, [r6, #16]
   13050:	702b      	strb	r3, [r5, #0]
				(struct bt_uuid *)&uuid_filter[counter].uuid_data.uuid_128;
   13052:	3704      	adds	r7, #4
		uuid_filter[counter].uuid =
   13054:	f84c 7034 	str.w	r7, [ip, r4, lsl #3]
		break;
   13058:	e7d7      	b.n	1300a <scan_uuid_filter_add+0x52>
		return -ENOMEM;
   1305a:	f06f 030b 	mvn.w	r3, #11
   1305e:	e7db      	b.n	13018 <scan_uuid_filter_add+0x60>
   13060:	20002bf0 	.word	0x20002bf0
   13064:	20002bf8 	.word	0x20002bf8

00013068 <adv_uuid_compare>:
{
   13068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1306c:	4607      	mov	r7, r0
   1306e:	4688      	mov	r8, r1
   13070:	4693      	mov	fp, r2
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
   13072:	4b1c      	ldr	r3, [pc, #112]	; (130e4 <adv_uuid_compare+0x7c>)
   13074:	f893 6070 	ldrb.w	r6, [r3, #112]	; 0x70
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   13078:	f893 9068 	ldrb.w	r9, [r3, #104]	; 0x68
	uint8_t data_len = data->data_len;
   1307c:	f890 a001 	ldrb.w	sl, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
   13080:	2400      	movs	r4, #0
	uint8_t uuid_match_cnt = 0;
   13082:	4625      	mov	r5, r4
	for (size_t i = 0; i < counter; i++) {
   13084:	e001      	b.n	1308a <adv_uuid_compare+0x22>
		} else if (all_filters_mode) {
   13086:	b9f6      	cbnz	r6, 130c6 <adv_uuid_compare+0x5e>
	for (size_t i = 0; i < counter; i++) {
   13088:	3401      	adds	r4, #1
   1308a:	45a1      	cmp	r9, r4
   1308c:	d91b      	bls.n	130c6 <adv_uuid_compare+0x5e>
		if (find_uuid(data->data, data_len, uuid_type,
   1308e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   13092:	4a14      	ldr	r2, [pc, #80]	; (130e4 <adv_uuid_compare+0x7c>)
   13094:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13098:	3308      	adds	r3, #8
   1309a:	4642      	mov	r2, r8
   1309c:	4651      	mov	r1, sl
   1309e:	6878      	ldr	r0, [r7, #4]
   130a0:	f00f f9dd 	bl	2245e <find_uuid>
   130a4:	2800      	cmp	r0, #0
   130a6:	d0ee      	beq.n	13086 <adv_uuid_compare+0x1e>
				uuid_filter->uuid[i].uuid;
   130a8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   130ac:	4a0d      	ldr	r2, [pc, #52]	; (130e4 <adv_uuid_compare+0x7c>)
   130ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   130b2:	689a      	ldr	r2, [r3, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   130b4:	f105 030c 	add.w	r3, r5, #12
   130b8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
   130bc:	609a      	str	r2, [r3, #8]
			uuid_match_cnt++;
   130be:	3501      	adds	r5, #1
   130c0:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
   130c2:	2e00      	cmp	r6, #0
   130c4:	d1e0      	bne.n	13088 <adv_uuid_compare+0x20>
	control->filter_status.uuid.count = uuid_match_cnt;
   130c6:	f88b 5048 	strb.w	r5, [fp, #72]	; 0x48
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
   130ca:	b10e      	cbz	r6, 130d0 <adv_uuid_compare+0x68>
   130cc:	454d      	cmp	r5, r9
   130ce:	d003      	beq.n	130d8 <adv_uuid_compare+0x70>
   130d0:	b926      	cbnz	r6, 130dc <adv_uuid_compare+0x74>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
   130d2:	b125      	cbz	r5, 130de <adv_uuid_compare+0x76>
		return true;
   130d4:	2601      	movs	r6, #1
   130d6:	e002      	b.n	130de <adv_uuid_compare+0x76>
   130d8:	2601      	movs	r6, #1
   130da:	e000      	b.n	130de <adv_uuid_compare+0x76>
	return false;
   130dc:	2600      	movs	r6, #0
}
   130de:	4630      	mov	r0, r6
   130e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130e4:	20002bf0 	.word	0x20002bf0

000130e8 <adv_addr_compare>:
{
   130e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   130ec:	4606      	mov	r6, r0
   130ee:	4688      	mov	r8, r1
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
   130f0:	4b0b      	ldr	r3, [pc, #44]	; (13120 <adv_addr_compare+0x38>)
   130f2:	791f      	ldrb	r7, [r3, #4]
	for (size_t i = 0; i < counter; i++) {
   130f4:	2400      	movs	r4, #0
   130f6:	42a7      	cmp	r7, r4
   130f8:	d90f      	bls.n	1311a <adv_addr_compare+0x32>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
   130fa:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
   130fe:	4b09      	ldr	r3, [pc, #36]	; (13124 <adv_addr_compare+0x3c>)
   13100:	441d      	add	r5, r3
	return memcmp(a, b, sizeof(*a));
   13102:	2207      	movs	r2, #7
   13104:	4629      	mov	r1, r5
   13106:	4630      	mov	r0, r6
   13108:	f00f fc64 	bl	229d4 <memcmp>
   1310c:	b108      	cbz	r0, 13112 <adv_addr_compare+0x2a>
	for (size_t i = 0; i < counter; i++) {
   1310e:	3401      	adds	r4, #1
   13110:	e7f1      	b.n	130f6 <adv_addr_compare+0xe>
			control->filter_status.addr.addr = &addr[i];
   13112:	f8c8 5030 	str.w	r5, [r8, #48]	; 0x30
			return true;
   13116:	2001      	movs	r0, #1
   13118:	e000      	b.n	1311c <adv_addr_compare+0x34>
	return false;
   1311a:	2000      	movs	r0, #0
}
   1311c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13120:	20002bf0 	.word	0x20002bf0
   13124:	20002bf4 	.word	0x20002bf4

00013128 <bt_scan_cb_register>:
	if (!cb) {
   13128:	b140      	cbz	r0, 1313c <bt_scan_cb_register+0x14>
	sys_slist_append(&callback_list, &cb->node);
   1312a:	1d02      	adds	r2, r0, #4
	parent->next = child;
   1312c:	2100      	movs	r1, #0
   1312e:	6041      	str	r1, [r0, #4]
	return list->tail;
   13130:	4b05      	ldr	r3, [pc, #20]	; (13148 <bt_scan_cb_register+0x20>)
   13132:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   13134:	b11b      	cbz	r3, 1313e <bt_scan_cb_register+0x16>
	parent->next = child;
   13136:	601a      	str	r2, [r3, #0]
	list->tail = node;
   13138:	4b03      	ldr	r3, [pc, #12]	; (13148 <bt_scan_cb_register+0x20>)
   1313a:	605a      	str	r2, [r3, #4]
}
   1313c:	4770      	bx	lr
   1313e:	4b02      	ldr	r3, [pc, #8]	; (13148 <bt_scan_cb_register+0x20>)
   13140:	605a      	str	r2, [r3, #4]
	list->head = node;
   13142:	601a      	str	r2, [r3, #0]
}
   13144:	4770      	bx	lr
   13146:	bf00      	nop
   13148:	20002c84 	.word	0x20002c84

0001314c <bt_scan_filter_add>:

int bt_scan_filter_add(enum bt_scan_filter_type type,
		       const void *data)
{
   1314c:	b538      	push	{r3, r4, r5, lr}
	struct bt_uuid *uuid;
	uint16_t appearance;
	struct bt_scan_manufacturer_data *manufacturer_data;
	int err = 0;

	if (!data) {
   1314e:	b3a1      	cbz	r1, 131ba <bt_scan_filter_add+0x6e>
   13150:	4604      	mov	r4, r0
   13152:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   13154:	f04f 32ff 	mov.w	r2, #4294967295
   13158:	f04f 33ff 	mov.w	r3, #4294967295
   1315c:	4818      	ldr	r0, [pc, #96]	; (131c0 <bt_scan_filter_add+0x74>)
   1315e:	f009 ff87 	bl	1d070 <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&scan_mutex, K_FOREVER);

	switch (type) {
   13162:	2c05      	cmp	r4, #5
   13164:	d826      	bhi.n	131b4 <bt_scan_filter_add+0x68>
   13166:	e8df f004 	tbb	[pc, r4]
   1316a:	0c03      	.short	0x0c03
   1316c:	201b1611 	.word	0x201b1611
	case BT_SCAN_FILTER_TYPE_NAME:
		name = (char *)data;
		err = scan_name_filter_add(name);
   13170:	4628      	mov	r0, r5
   13172:	f00f f953 	bl	2241c <scan_name_filter_add>
   13176:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13178:	4811      	ldr	r0, [pc, #68]	; (131c0 <bt_scan_filter_add+0x74>)
   1317a:	f00a f803 	bl	1d184 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&scan_mutex);

	return err;
}
   1317e:	4620      	mov	r0, r4
   13180:	bd38      	pop	{r3, r4, r5, pc}
		err = scan_short_name_filter_add(short_name);
   13182:	4628      	mov	r0, r5
   13184:	f00f f94d 	bl	22422 <scan_short_name_filter_add>
   13188:	4604      	mov	r4, r0
		break;
   1318a:	e7f5      	b.n	13178 <bt_scan_filter_add+0x2c>
		err = scan_addr_filter_add(addr);
   1318c:	4628      	mov	r0, r5
   1318e:	f00f f942 	bl	22416 <scan_addr_filter_add>
   13192:	4604      	mov	r4, r0
		break;
   13194:	e7f0      	b.n	13178 <bt_scan_filter_add+0x2c>
		err = scan_uuid_filter_add(uuid);
   13196:	4628      	mov	r0, r5
   13198:	f7ff ff0e 	bl	12fb8 <scan_uuid_filter_add>
   1319c:	4604      	mov	r4, r0
		break;
   1319e:	e7eb      	b.n	13178 <bt_scan_filter_add+0x2c>
		err = scan_appearance_filter_add(appearance);
   131a0:	8828      	ldrh	r0, [r5, #0]
   131a2:	f00f f941 	bl	22428 <scan_appearance_filter_add>
   131a6:	4604      	mov	r4, r0
		break;
   131a8:	e7e6      	b.n	13178 <bt_scan_filter_add+0x2c>
		err = scan_manufacturer_data_filter_add(manufacturer_data);
   131aa:	4628      	mov	r0, r5
   131ac:	f00f f93f 	bl	2242e <scan_manufacturer_data_filter_add>
   131b0:	4604      	mov	r4, r0
		break;
   131b2:	e7e1      	b.n	13178 <bt_scan_filter_add+0x2c>
	k_mutex_lock(&scan_mutex, K_FOREVER);
   131b4:	f06f 0415 	mvn.w	r4, #21
   131b8:	e7de      	b.n	13178 <bt_scan_filter_add+0x2c>
		return -EINVAL;
   131ba:	f06f 0415 	mvn.w	r4, #21
   131be:	e7de      	b.n	1317e <bt_scan_filter_add+0x32>
   131c0:	20000854 	.word	0x20000854

000131c4 <bt_scan_filter_disable>:
}

void bt_scan_filter_disable(void)
{
	/* Disable all filters. */
	bt_scan.scan_filters.name.enabled = false;
   131c4:	4b05      	ldr	r3, [pc, #20]	; (131dc <bt_scan_filter_disable+0x18>)
   131c6:	2200      	movs	r2, #0
   131c8:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
   131ca:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
   131cc:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
   131ce:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	bt_scan.scan_filters.appearance.enabled = false;
   131d2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   131d6:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
}
   131da:	4770      	bx	lr
   131dc:	20002bf0 	.word	0x20002bf0

000131e0 <bt_scan_filter_enable>:

int bt_scan_filter_enable(uint8_t mode, bool match_all)
{
   131e0:	b538      	push	{r3, r4, r5, lr}
   131e2:	4604      	mov	r4, r0
   131e4:	460d      	mov	r5, r1
	/* Check if the mode is correct. */
	if (!check_filter_mode(mode)) {
   131e6:	f00f f925 	bl	22434 <check_filter_mode>
   131ea:	b368      	cbz	r0, 13248 <bt_scan_filter_enable+0x68>
		return -EINVAL;
	}

	/* Disable filters. */
	bt_scan_filter_disable();
   131ec:	f7ff ffea 	bl	131c4 <bt_scan_filter_disable>

	struct bt_scan_filters *filters = &bt_scan.scan_filters;

	/* Turn on the filters of your choice. */
	if (mode & BT_SCAN_ADDR_FILTER) {
   131f0:	f014 0f02 	tst.w	r4, #2
   131f4:	d002      	beq.n	131fc <bt_scan_filter_enable+0x1c>
		filters->addr.enabled = true;
   131f6:	4b16      	ldr	r3, [pc, #88]	; (13250 <bt_scan_filter_enable+0x70>)
   131f8:	2201      	movs	r2, #1
   131fa:	715a      	strb	r2, [r3, #5]
	}

	if (mode & BT_SCAN_NAME_FILTER) {
   131fc:	f014 0f01 	tst.w	r4, #1
   13200:	d002      	beq.n	13208 <bt_scan_filter_enable+0x28>
		filters->name.enabled = true;
   13202:	4b13      	ldr	r3, [pc, #76]	; (13250 <bt_scan_filter_enable+0x70>)
   13204:	2201      	movs	r2, #1
   13206:	705a      	strb	r2, [r3, #1]
	}

	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   13208:	f014 0f10 	tst.w	r4, #16
   1320c:	d002      	beq.n	13214 <bt_scan_filter_enable+0x34>
		filters->short_name.enabled = true;
   1320e:	4b10      	ldr	r3, [pc, #64]	; (13250 <bt_scan_filter_enable+0x70>)
   13210:	2201      	movs	r2, #1
   13212:	70da      	strb	r2, [r3, #3]
	}

	if (mode & BT_SCAN_UUID_FILTER) {
   13214:	f014 0f04 	tst.w	r4, #4
   13218:	d003      	beq.n	13222 <bt_scan_filter_enable+0x42>
		filters->uuid.enabled = true;
   1321a:	4b0d      	ldr	r3, [pc, #52]	; (13250 <bt_scan_filter_enable+0x70>)
   1321c:	2201      	movs	r2, #1
   1321e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	}

	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   13222:	f014 0f08 	tst.w	r4, #8
   13226:	d003      	beq.n	13230 <bt_scan_filter_enable+0x50>
		filters->appearance.enabled = true;
   13228:	4b09      	ldr	r3, [pc, #36]	; (13250 <bt_scan_filter_enable+0x70>)
   1322a:	2201      	movs	r2, #1
   1322c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}

	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   13230:	f014 0f20 	tst.w	r4, #32
   13234:	d003      	beq.n	1323e <bt_scan_filter_enable+0x5e>
		filters->manufacturer_data.enabled = true;
   13236:	4b06      	ldr	r3, [pc, #24]	; (13250 <bt_scan_filter_enable+0x70>)
   13238:	2201      	movs	r2, #1
   1323a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	}

	/* Select the filter mode. */
	filters->all_mode = match_all;
   1323e:	4b04      	ldr	r3, [pc, #16]	; (13250 <bt_scan_filter_enable+0x70>)
   13240:	f883 5070 	strb.w	r5, [r3, #112]	; 0x70

	return 0;
   13244:	2000      	movs	r0, #0
}
   13246:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   13248:	f06f 0015 	mvn.w	r0, #21
   1324c:	e7fb      	b.n	13246 <bt_scan_filter_enable+0x66>
   1324e:	bf00      	nop
   13250:	20002bf0 	.word	0x20002bf0

00013254 <scan_connect_with_target>:
	if (!bt_scan.connect_if_match) {
   13254:	4b12      	ldr	r3, [pc, #72]	; (132a0 <scan_connect_with_target+0x4c>)
   13256:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1325a:	b903      	cbnz	r3, 1325e <scan_connect_with_target+0xa>
   1325c:	4770      	bx	lr
{
   1325e:	b570      	push	{r4, r5, r6, lr}
   13260:	b086      	sub	sp, #24
   13262:	4604      	mov	r4, r0
   13264:	460d      	mov	r5, r1
	bt_scan_stop();
   13266:	f00f f974 	bl	22552 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   1326a:	ae02      	add	r6, sp, #8
   1326c:	4b0d      	ldr	r3, [pc, #52]	; (132a4 <scan_connect_with_target+0x50>)
   1326e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13270:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   13274:	ab01      	add	r3, sp, #4
   13276:	4a0c      	ldr	r2, [pc, #48]	; (132a8 <scan_connect_with_target+0x54>)
   13278:	4631      	mov	r1, r6
   1327a:	4628      	mov	r0, r5
   1327c:	f003 f97e 	bl	1657c <bt_conn_le_create>
	if (err) {
   13280:	b128      	cbz	r0, 1328e <scan_connect_with_target+0x3a>
		notify_connecting_error(&control->device_info);
   13282:	f104 0008 	add.w	r0, r4, #8
   13286:	f7ff fe53 	bl	12f30 <notify_connecting_error>
}
   1328a:	b006      	add	sp, #24
   1328c:	bd70      	pop	{r4, r5, r6, pc}
		notify_connecting(&control->device_info, conn);
   1328e:	9901      	ldr	r1, [sp, #4]
   13290:	f104 0008 	add.w	r0, r4, #8
   13294:	f7ff fe30 	bl	12ef8 <notify_connecting>
		bt_conn_unref(conn);
   13298:	9801      	ldr	r0, [sp, #4]
   1329a:	f010 faa1 	bl	237e0 <bt_conn_unref>
   1329e:	e7f4      	b.n	1328a <scan_connect_with_target+0x36>
   132a0:	20002bf0 	.word	0x20002bf0
   132a4:	0002834c 	.word	0x0002834c
   132a8:	20002c7c 	.word	0x20002c7c

000132ac <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   132ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   132b0:	b098      	sub	sp, #96	; 0x60
   132b2:	4605      	mov	r5, r0
   132b4:	460c      	mov	r4, r1
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));
   132b6:	2260      	movs	r2, #96	; 0x60
   132b8:	2100      	movs	r1, #0
   132ba:	4668      	mov	r0, sp
   132bc:	f00f fbdb 	bl	22a76 <memset>

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   132c0:	4e15      	ldr	r6, [pc, #84]	; (13318 <scan_recv+0x6c>)
   132c2:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
   132c6:	f88d 3003 	strb.w	r3, [sp, #3]

	check_enabled_filters(&scan_control);
   132ca:	4668      	mov	r0, sp
   132cc:	f00f f8b7 	bl	2243e <check_enabled_filters>

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   132d0:	892b      	ldrh	r3, [r5, #8]
   132d2:	f003 0301 	and.w	r3, r3, #1
	scan_control.connectable =
   132d6:	f88d 3004 	strb.w	r3, [sp, #4]

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
   132da:	6829      	ldr	r1, [r5, #0]
   132dc:	4668      	mov	r0, sp
   132de:	f00f f923 	bl	22528 <check_addr>
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   132e2:	4620      	mov	r0, r4
   132e4:	f012 fdb8 	bl	25e58 <net_buf_simple_headroom>
   132e8:	b287      	uxth	r7, r0
	state->len = buf->len;
   132ea:	f8b4 8004 	ldrh.w	r8, [r4, #4]

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   132ee:	466a      	mov	r2, sp
   132f0:	490a      	ldr	r1, [pc, #40]	; (1331c <scan_recv+0x70>)
   132f2:	4620      	mov	r0, r4
   132f4:	f00f ff8f 	bl	23216 <bt_data_parse>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   132f8:	68a3      	ldr	r3, [r4, #8]
   132fa:	443b      	add	r3, r7
   132fc:	6023      	str	r3, [r4, #0]
	buf->len = state->len;
   132fe:	f8a4 8004 	strh.w	r8, [r4, #4]
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
   13302:	9502      	str	r5, [sp, #8]
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   13304:	368c      	adds	r6, #140	; 0x8c
   13306:	9603      	str	r6, [sp, #12]
	scan_control.device_info.adv_data = ad;
   13308:	9404      	str	r4, [sp, #16]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   1330a:	6829      	ldr	r1, [r5, #0]
   1330c:	4668      	mov	r0, sp
   1330e:	f00f f924 	bl	2255a <filter_state_check>
}
   13312:	b018      	add	sp, #96	; 0x60
   13314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13318:	20002bf0 	.word	0x20002bf0
   1331c:	000224e9 	.word	0x000224e9

00013320 <bt_scan_init>:
{
   13320:	b570      	push	{r4, r5, r6, lr}
   13322:	4605      	mov	r5, r0
	bt_le_scan_cb_register(&scan_cb);
   13324:	4815      	ldr	r0, [pc, #84]	; (1337c <bt_scan_init+0x5c>)
   13326:	f002 fe67 	bl	15ff8 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   1332a:	2274      	movs	r2, #116	; 0x74
   1332c:	2100      	movs	r1, #0
   1332e:	4814      	ldr	r0, [pc, #80]	; (13380 <bt_scan_init+0x60>)
   13330:	f00f fba1 	bl	22a76 <memset>
	if (init) {
   13334:	b1c5      	cbz	r5, 13368 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
   13336:	792a      	ldrb	r2, [r5, #4]
   13338:	4b11      	ldr	r3, [pc, #68]	; (13380 <bt_scan_init+0x60>)
   1333a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		if (init->scan_param) {
   1333e:	682c      	ldr	r4, [r5, #0]
   13340:	b164      	cbz	r4, 1335c <bt_scan_init+0x3c>
			bt_scan.scan_param = *init->scan_param;
   13342:	f103 0678 	add.w	r6, r3, #120	; 0x78
   13346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13348:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1334a:	6823      	ldr	r3, [r4, #0]
   1334c:	6033      	str	r3, [r6, #0]
		if (init->conn_param) {
   1334e:	68aa      	ldr	r2, [r5, #8]
   13350:	b13a      	cbz	r2, 13362 <bt_scan_init+0x42>
			bt_scan.conn_param = *init->conn_param;
   13352:	4b0c      	ldr	r3, [pc, #48]	; (13384 <bt_scan_init+0x64>)
   13354:	6810      	ldr	r0, [r2, #0]
   13356:	6851      	ldr	r1, [r2, #4]
   13358:	c303      	stmia	r3!, {r0, r1}
}
   1335a:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
   1335c:	f7ff fe08 	bl	12f70 <scan_default_param_set>
   13360:	e7f5      	b.n	1334e <bt_scan_init+0x2e>
			scan_default_conn_param_set();
   13362:	f7ff fe19 	bl	12f98 <scan_default_conn_param_set>
   13366:	e7f8      	b.n	1335a <bt_scan_init+0x3a>
		scan_default_param_set();
   13368:	f7ff fe02 	bl	12f70 <scan_default_param_set>
		scan_default_conn_param_set();
   1336c:	f7ff fe14 	bl	12f98 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
   13370:	4b03      	ldr	r3, [pc, #12]	; (13380 <bt_scan_init+0x60>)
   13372:	2200      	movs	r2, #0
   13374:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
}
   13378:	e7ef      	b.n	1335a <bt_scan_init+0x3a>
   1337a:	bf00      	nop
   1337c:	20000534 	.word	0x20000534
   13380:	20002bf0 	.word	0x20002bf0
   13384:	20002c7c 	.word	0x20002c7c

00013388 <bt_scan_start>:
static struct bt_le_scan_cb scan_cb = {
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
   13388:	b508      	push	{r3, lr}
	switch (scan_type) {
   1338a:	b150      	cbz	r0, 133a2 <bt_scan_start+0x1a>
   1338c:	2801      	cmp	r0, #1
   1338e:	d10d      	bne.n	133ac <bt_scan_start+0x24>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
   13390:	4b08      	ldr	r3, [pc, #32]	; (133b4 <bt_scan_start+0x2c>)
   13392:	2201      	movs	r2, #1
   13394:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   13398:	2100      	movs	r1, #0
   1339a:	4807      	ldr	r0, [pc, #28]	; (133b8 <bt_scan_start+0x30>)
   1339c:	f002 fd76 	bl	15e8c <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   133a0:	bd08      	pop	{r3, pc}
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   133a2:	4b04      	ldr	r3, [pc, #16]	; (133b4 <bt_scan_start+0x2c>)
   133a4:	2200      	movs	r2, #0
   133a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		break;
   133aa:	e7f5      	b.n	13398 <bt_scan_start+0x10>
	switch (scan_type) {
   133ac:	f06f 0015 	mvn.w	r0, #21
   133b0:	e7f6      	b.n	133a0 <bt_scan_start+0x18>
   133b2:	bf00      	nop
   133b4:	20002bf0 	.word	0x20002bf0
   133b8:	20002c68 	.word	0x20002c68

000133bc <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   133bc:	b4f0      	push	{r4, r5, r6, r7}
   133be:	b08c      	sub	sp, #48	; 0x30
   133c0:	4607      	mov	r7, r0
   133c2:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   133c4:	ac01      	add	r4, sp, #4
   133c6:	4d2a      	ldr	r5, [pc, #168]	; (13470 <tc_aes128_set_encrypt_key+0xb4>)
   133c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   133ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   133cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   133ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   133d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   133d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   133d8:	2f00      	cmp	r7, #0
   133da:	d045      	beq.n	13468 <tc_aes128_set_encrypt_key+0xac>
   133dc:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   133de:	2e00      	cmp	r6, #0
   133e0:	d044      	beq.n	1346c <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   133e2:	2300      	movs	r3, #0
   133e4:	e00f      	b.n	13406 <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   133e6:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   133ea:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   133ee:	784a      	ldrb	r2, [r1, #1]
   133f0:	0412      	lsls	r2, r2, #16
   133f2:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   133f6:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   133f8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   133fc:	78c9      	ldrb	r1, [r1, #3]
   133fe:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13400:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   13404:	3301      	adds	r3, #1
   13406:	2b03      	cmp	r3, #3
   13408:	d9ed      	bls.n	133e6 <tc_aes128_set_encrypt_key+0x2a>
   1340a:	e006      	b.n	1341a <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   1340c:	1f19      	subs	r1, r3, #4
   1340e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   13412:	404a      	eors	r2, r1
   13414:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   13418:	3301      	adds	r3, #1
   1341a:	2b2b      	cmp	r3, #43	; 0x2b
   1341c:	d820      	bhi.n	13460 <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   1341e:	1e5a      	subs	r2, r3, #1
   13420:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   13424:	f013 0f03 	tst.w	r3, #3
   13428:	d1f0      	bne.n	1340c <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   1342a:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1342e:	0e11      	lsrs	r1, r2, #24
   13430:	4c10      	ldr	r4, [pc, #64]	; (13474 <tc_aes128_set_encrypt_key+0xb8>)
   13432:	5c65      	ldrb	r5, [r4, r1]
   13434:	f3c2 4107 	ubfx	r1, r2, #16, #8
   13438:	5c61      	ldrb	r1, [r4, r1]
   1343a:	0409      	lsls	r1, r1, #16
   1343c:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   13440:	f3c2 2507 	ubfx	r5, r2, #8, #8
   13444:	5d65      	ldrb	r5, [r4, r5]
   13446:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   1344a:	b2d2      	uxtb	r2, r2
   1344c:	5ca2      	ldrb	r2, [r4, r2]
   1344e:	4311      	orrs	r1, r2
   13450:	f023 0203 	bic.w	r2, r3, #3
   13454:	ac0c      	add	r4, sp, #48	; 0x30
   13456:	4422      	add	r2, r4
   13458:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   1345c:	404a      	eors	r2, r1
   1345e:	e7d5      	b.n	1340c <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   13460:	2001      	movs	r0, #1
}
   13462:	b00c      	add	sp, #48	; 0x30
   13464:	bcf0      	pop	{r4, r5, r6, r7}
   13466:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   13468:	2000      	movs	r0, #0
   1346a:	e7fa      	b.n	13462 <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   1346c:	2000      	movs	r0, #0
   1346e:	e7f8      	b.n	13462 <tc_aes128_set_encrypt_key+0xa6>
   13470:	0002835c 	.word	0x0002835c
   13474:	000286e0 	.word	0x000286e0

00013478 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   13478:	2800      	cmp	r0, #0
   1347a:	f000 839a 	beq.w	13bb2 <tc_aes_encrypt+0x73a>
{
   1347e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13482:	b088      	sub	sp, #32
   13484:	4616      	mov	r6, r2
   13486:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   13488:	2900      	cmp	r1, #0
   1348a:	f000 8394 	beq.w	13bb6 <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1348e:	2a00      	cmp	r2, #0
   13490:	f000 8393 	beq.w	13bba <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   13494:	2310      	movs	r3, #16
   13496:	460a      	mov	r2, r1
   13498:	4619      	mov	r1, r3
   1349a:	eb0d 0003 	add.w	r0, sp, r3
   1349e:	f00f f88a 	bl	225b6 <_copy>
	add_round_key(state, s->words);
   134a2:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   134a4:	6833      	ldr	r3, [r6, #0]
   134a6:	f89d 2010 	ldrb.w	r2, [sp, #16]
   134aa:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   134ae:	f88d 2010 	strb.w	r2, [sp, #16]
   134b2:	f3c3 4207 	ubfx	r2, r3, #16, #8
   134b6:	f89d 1011 	ldrb.w	r1, [sp, #17]
   134ba:	404a      	eors	r2, r1
   134bc:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   134c0:	f3c3 2207 	ubfx	r2, r3, #8, #8
   134c4:	f89d 1012 	ldrb.w	r1, [sp, #18]
   134c8:	404a      	eors	r2, r1
   134ca:	f88d 2012 	strb.w	r2, [sp, #18]
   134ce:	b2db      	uxtb	r3, r3
   134d0:	f89d 2013 	ldrb.w	r2, [sp, #19]
   134d4:	4053      	eors	r3, r2
   134d6:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   134da:	6873      	ldr	r3, [r6, #4]
   134dc:	f89d 2014 	ldrb.w	r2, [sp, #20]
   134e0:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   134e4:	f88d 2014 	strb.w	r2, [sp, #20]
   134e8:	f3c3 4207 	ubfx	r2, r3, #16, #8
   134ec:	f89d 1015 	ldrb.w	r1, [sp, #21]
   134f0:	404a      	eors	r2, r1
   134f2:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   134f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
   134fa:	f89d 1016 	ldrb.w	r1, [sp, #22]
   134fe:	404a      	eors	r2, r1
   13500:	f88d 2016 	strb.w	r2, [sp, #22]
   13504:	b2db      	uxtb	r3, r3
   13506:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1350a:	4053      	eors	r3, r2
   1350c:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   13510:	68b3      	ldr	r3, [r6, #8]
   13512:	f89d 2018 	ldrb.w	r2, [sp, #24]
   13516:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1351a:	f88d 2018 	strb.w	r2, [sp, #24]
   1351e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13522:	f89d 1019 	ldrb.w	r1, [sp, #25]
   13526:	404a      	eors	r2, r1
   13528:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1352c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   13530:	f89d 101a 	ldrb.w	r1, [sp, #26]
   13534:	404a      	eors	r2, r1
   13536:	f88d 201a 	strb.w	r2, [sp, #26]
   1353a:	b2db      	uxtb	r3, r3
   1353c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   13540:	4053      	eors	r3, r2
   13542:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   13546:	68f3      	ldr	r3, [r6, #12]
   13548:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1354c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   13550:	f88d 201c 	strb.w	r2, [sp, #28]
   13554:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13558:	f89d 101d 	ldrb.w	r1, [sp, #29]
   1355c:	404a      	eors	r2, r1
   1355e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   13562:	f3c3 2207 	ubfx	r2, r3, #8, #8
   13566:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1356a:	404a      	eors	r2, r1
   1356c:	f88d 201e 	strb.w	r2, [sp, #30]
   13570:	b2db      	uxtb	r3, r3
   13572:	f89d 201f 	ldrb.w	r2, [sp, #31]
   13576:	4053      	eors	r3, r2
   13578:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   1357c:	2400      	movs	r4, #0
}
   1357e:	e239      	b.n	139f4 <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   13580:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13584:	f88d 3000 	strb.w	r3, [sp]
   13588:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1358c:	f88d 3001 	strb.w	r3, [sp, #1]
   13590:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13594:	f88d 3002 	strb.w	r3, [sp, #2]
   13598:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1359c:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   135a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   135a4:	f88d 3004 	strb.w	r3, [sp, #4]
   135a8:	f89d 3019 	ldrb.w	r3, [sp, #25]
   135ac:	f88d 3005 	strb.w	r3, [sp, #5]
   135b0:	f89d 301e 	ldrb.w	r3, [sp, #30]
   135b4:	f88d 3006 	strb.w	r3, [sp, #6]
   135b8:	f89d 3013 	ldrb.w	r3, [sp, #19]
   135bc:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   135c0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   135c4:	f88d 3008 	strb.w	r3, [sp, #8]
   135c8:	f89d 301d 	ldrb.w	r3, [sp, #29]
   135cc:	f88d 3009 	strb.w	r3, [sp, #9]
   135d0:	f89d 3012 	ldrb.w	r3, [sp, #18]
   135d4:	f88d 300a 	strb.w	r3, [sp, #10]
   135d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   135dc:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   135e0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   135e4:	f88d 300c 	strb.w	r3, [sp, #12]
   135e8:	f89d 3011 	ldrb.w	r3, [sp, #17]
   135ec:	f88d 300d 	strb.w	r3, [sp, #13]
   135f0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   135f4:	f88d 300e 	strb.w	r3, [sp, #14]
   135f8:	f89d 301b 	ldrb.w	r3, [sp, #27]
   135fc:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   13600:	2310      	movs	r3, #16
   13602:	466a      	mov	r2, sp
   13604:	4619      	mov	r1, r3
   13606:	eb0d 0003 	add.w	r0, sp, r3
   1360a:	f00e ffd4 	bl	225b6 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1360e:	f89d 0010 	ldrb.w	r0, [sp, #16]
   13612:	f00e ffe1 	bl	225d8 <_double_byte>
   13616:	4680      	mov	r8, r0
   13618:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1361c:	f00e ffdc 	bl	225d8 <_double_byte>
   13620:	4601      	mov	r1, r0
   13622:	f89d 0011 	ldrb.w	r0, [sp, #17]
   13626:	f89d 2012 	ldrb.w	r2, [sp, #18]
   1362a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1362e:	4041      	eors	r1, r0
   13630:	ea88 0801 	eor.w	r8, r8, r1
   13634:	ea82 0208 	eor.w	r2, r2, r8
   13638:	4053      	eors	r3, r2
   1363a:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1363e:	f89d 8010 	ldrb.w	r8, [sp, #16]
   13642:	f00e ffc9 	bl	225d8 <_double_byte>
   13646:	ea88 0800 	eor.w	r8, r8, r0
   1364a:	fa5f f888 	uxtb.w	r8, r8
   1364e:	f89d 0012 	ldrb.w	r0, [sp, #18]
   13652:	f00e ffc1 	bl	225d8 <_double_byte>
   13656:	4602      	mov	r2, r0
   13658:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1365c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   13660:	4042      	eors	r2, r0
   13662:	ea88 0802 	eor.w	r8, r8, r2
   13666:	ea83 0308 	eor.w	r3, r3, r8
   1366a:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1366e:	f89d 8010 	ldrb.w	r8, [sp, #16]
   13672:	f89d 3011 	ldrb.w	r3, [sp, #17]
   13676:	ea88 0803 	eor.w	r8, r8, r3
   1367a:	f00e ffad 	bl	225d8 <_double_byte>
   1367e:	ea88 0800 	eor.w	r8, r8, r0
   13682:	fa5f f888 	uxtb.w	r8, r8
   13686:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1368a:	f00e ffa5 	bl	225d8 <_double_byte>
   1368e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   13692:	4058      	eors	r0, r3
   13694:	ea88 0800 	eor.w	r8, r8, r0
   13698:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1369c:	f89d 0010 	ldrb.w	r0, [sp, #16]
   136a0:	f00e ff9a 	bl	225d8 <_double_byte>
   136a4:	f89d 2010 	ldrb.w	r2, [sp, #16]
   136a8:	f89d 3011 	ldrb.w	r3, [sp, #17]
   136ac:	f89d 8012 	ldrb.w	r8, [sp, #18]
   136b0:	4050      	eors	r0, r2
   136b2:	4043      	eors	r3, r0
   136b4:	ea88 0803 	eor.w	r8, r8, r3
   136b8:	fa5f f888 	uxtb.w	r8, r8
   136bc:	f89d 0013 	ldrb.w	r0, [sp, #19]
   136c0:	f00e ff8a 	bl	225d8 <_double_byte>
   136c4:	ea88 0800 	eor.w	r8, r8, r0
   136c8:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   136cc:	f89d 0014 	ldrb.w	r0, [sp, #20]
   136d0:	f00e ff82 	bl	225d8 <_double_byte>
   136d4:	4680      	mov	r8, r0
   136d6:	f89d 0015 	ldrb.w	r0, [sp, #21]
   136da:	f00e ff7d 	bl	225d8 <_double_byte>
   136de:	4601      	mov	r1, r0
   136e0:	f89d 0015 	ldrb.w	r0, [sp, #21]
   136e4:	f89d 2016 	ldrb.w	r2, [sp, #22]
   136e8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   136ec:	4041      	eors	r1, r0
   136ee:	ea88 0801 	eor.w	r8, r8, r1
   136f2:	ea82 0208 	eor.w	r2, r2, r8
   136f6:	4053      	eors	r3, r2
   136f8:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   136fc:	f89d 8014 	ldrb.w	r8, [sp, #20]
   13700:	f00e ff6a 	bl	225d8 <_double_byte>
   13704:	ea88 0800 	eor.w	r8, r8, r0
   13708:	fa5f f888 	uxtb.w	r8, r8
   1370c:	f89d 0016 	ldrb.w	r0, [sp, #22]
   13710:	f00e ff62 	bl	225d8 <_double_byte>
   13714:	4602      	mov	r2, r0
   13716:	f89d 0016 	ldrb.w	r0, [sp, #22]
   1371a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1371e:	4042      	eors	r2, r0
   13720:	ea88 0802 	eor.w	r8, r8, r2
   13724:	ea83 0308 	eor.w	r3, r3, r8
   13728:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1372c:	f89d 8014 	ldrb.w	r8, [sp, #20]
   13730:	f89d 3015 	ldrb.w	r3, [sp, #21]
   13734:	ea88 0803 	eor.w	r8, r8, r3
   13738:	f00e ff4e 	bl	225d8 <_double_byte>
   1373c:	ea88 0800 	eor.w	r8, r8, r0
   13740:	fa5f f888 	uxtb.w	r8, r8
   13744:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13748:	f00e ff46 	bl	225d8 <_double_byte>
   1374c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   13750:	4058      	eors	r0, r3
   13752:	ea88 0800 	eor.w	r8, r8, r0
   13756:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1375a:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1375e:	f00e ff3b 	bl	225d8 <_double_byte>
   13762:	f89d 2014 	ldrb.w	r2, [sp, #20]
   13766:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1376a:	f89d 8016 	ldrb.w	r8, [sp, #22]
   1376e:	4050      	eors	r0, r2
   13770:	4043      	eors	r3, r0
   13772:	ea88 0803 	eor.w	r8, r8, r3
   13776:	fa5f f888 	uxtb.w	r8, r8
   1377a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1377e:	f00e ff2b 	bl	225d8 <_double_byte>
   13782:	ea88 0800 	eor.w	r8, r8, r0
   13786:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1378a:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1378e:	f00e ff23 	bl	225d8 <_double_byte>
   13792:	4680      	mov	r8, r0
   13794:	f89d 0019 	ldrb.w	r0, [sp, #25]
   13798:	f00e ff1e 	bl	225d8 <_double_byte>
   1379c:	4601      	mov	r1, r0
   1379e:	f89d 0019 	ldrb.w	r0, [sp, #25]
   137a2:	f89d 201a 	ldrb.w	r2, [sp, #26]
   137a6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   137aa:	4041      	eors	r1, r0
   137ac:	ea88 0801 	eor.w	r8, r8, r1
   137b0:	ea82 0208 	eor.w	r2, r2, r8
   137b4:	4053      	eors	r3, r2
   137b6:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   137ba:	f89d 8018 	ldrb.w	r8, [sp, #24]
   137be:	f00e ff0b 	bl	225d8 <_double_byte>
   137c2:	ea88 0800 	eor.w	r8, r8, r0
   137c6:	fa5f f888 	uxtb.w	r8, r8
   137ca:	f89d 001a 	ldrb.w	r0, [sp, #26]
   137ce:	f00e ff03 	bl	225d8 <_double_byte>
   137d2:	4602      	mov	r2, r0
   137d4:	f89d 001a 	ldrb.w	r0, [sp, #26]
   137d8:	f89d 301b 	ldrb.w	r3, [sp, #27]
   137dc:	4042      	eors	r2, r0
   137de:	ea88 0802 	eor.w	r8, r8, r2
   137e2:	ea83 0308 	eor.w	r3, r3, r8
   137e6:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   137ea:	f89d 8018 	ldrb.w	r8, [sp, #24]
   137ee:	f89d 3019 	ldrb.w	r3, [sp, #25]
   137f2:	ea88 0803 	eor.w	r8, r8, r3
   137f6:	f00e feef 	bl	225d8 <_double_byte>
   137fa:	ea88 0800 	eor.w	r8, r8, r0
   137fe:	fa5f f888 	uxtb.w	r8, r8
   13802:	f89d 001b 	ldrb.w	r0, [sp, #27]
   13806:	f00e fee7 	bl	225d8 <_double_byte>
   1380a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1380e:	4058      	eors	r0, r3
   13810:	ea88 0800 	eor.w	r8, r8, r0
   13814:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   13818:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1381c:	f00e fedc 	bl	225d8 <_double_byte>
   13820:	f89d 2018 	ldrb.w	r2, [sp, #24]
   13824:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13828:	f89d 801a 	ldrb.w	r8, [sp, #26]
   1382c:	4050      	eors	r0, r2
   1382e:	4043      	eors	r3, r0
   13830:	ea88 0803 	eor.w	r8, r8, r3
   13834:	fa5f f888 	uxtb.w	r8, r8
   13838:	f89d 001b 	ldrb.w	r0, [sp, #27]
   1383c:	f00e fecc 	bl	225d8 <_double_byte>
   13840:	ea88 0800 	eor.w	r8, r8, r0
   13844:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   13848:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1384c:	f00e fec4 	bl	225d8 <_double_byte>
   13850:	4680      	mov	r8, r0
   13852:	f89d 001d 	ldrb.w	r0, [sp, #29]
   13856:	f00e febf 	bl	225d8 <_double_byte>
   1385a:	4601      	mov	r1, r0
   1385c:	f89d 001d 	ldrb.w	r0, [sp, #29]
   13860:	f89d 201e 	ldrb.w	r2, [sp, #30]
   13864:	f89d 301f 	ldrb.w	r3, [sp, #31]
   13868:	4041      	eors	r1, r0
   1386a:	ea88 0801 	eor.w	r8, r8, r1
   1386e:	ea82 0208 	eor.w	r2, r2, r8
   13872:	4053      	eors	r3, r2
   13874:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   13878:	f89d 801c 	ldrb.w	r8, [sp, #28]
   1387c:	f00e feac 	bl	225d8 <_double_byte>
   13880:	ea88 0800 	eor.w	r8, r8, r0
   13884:	fa5f f888 	uxtb.w	r8, r8
   13888:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1388c:	f00e fea4 	bl	225d8 <_double_byte>
   13890:	4602      	mov	r2, r0
   13892:	f89d 001e 	ldrb.w	r0, [sp, #30]
   13896:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1389a:	4042      	eors	r2, r0
   1389c:	ea88 0802 	eor.w	r8, r8, r2
   138a0:	ea83 0308 	eor.w	r3, r3, r8
   138a4:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   138a8:	f89d 801c 	ldrb.w	r8, [sp, #28]
   138ac:	f89d 301d 	ldrb.w	r3, [sp, #29]
   138b0:	ea88 0803 	eor.w	r8, r8, r3
   138b4:	f00e fe90 	bl	225d8 <_double_byte>
   138b8:	ea88 0800 	eor.w	r8, r8, r0
   138bc:	fa5f f888 	uxtb.w	r8, r8
   138c0:	f89d 001f 	ldrb.w	r0, [sp, #31]
   138c4:	f00e fe88 	bl	225d8 <_double_byte>
   138c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
   138cc:	4058      	eors	r0, r3
   138ce:	ea88 0800 	eor.w	r8, r8, r0
   138d2:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   138d6:	f89d 001c 	ldrb.w	r0, [sp, #28]
   138da:	f00e fe7d 	bl	225d8 <_double_byte>
   138de:	f89d 201c 	ldrb.w	r2, [sp, #28]
   138e2:	f89d 301d 	ldrb.w	r3, [sp, #29]
   138e6:	f89d 801e 	ldrb.w	r8, [sp, #30]
   138ea:	4050      	eors	r0, r2
   138ec:	4043      	eors	r3, r0
   138ee:	ea88 0803 	eor.w	r8, r8, r3
   138f2:	fa5f f888 	uxtb.w	r8, r8
   138f6:	f89d 001f 	ldrb.w	r0, [sp, #31]
   138fa:	f00e fe6d 	bl	225d8 <_double_byte>
   138fe:	ea88 0800 	eor.w	r8, r8, r0
   13902:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   13906:	2310      	movs	r3, #16
   13908:	466a      	mov	r2, sp
   1390a:	4619      	mov	r1, r3
   1390c:	eb0d 0003 	add.w	r0, sp, r3
   13910:	f00e fe51 	bl	225b6 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   13914:	3401      	adds	r4, #1
   13916:	0123      	lsls	r3, r4, #4
   13918:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1391c:	58eb      	ldr	r3, [r5, r3]
   1391e:	f89d 1010 	ldrb.w	r1, [sp, #16]
   13922:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   13926:	f88d 1010 	strb.w	r1, [sp, #16]
   1392a:	f3c3 4107 	ubfx	r1, r3, #16, #8
   1392e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   13932:	4041      	eors	r1, r0
   13934:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   13938:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1393c:	f89d 0012 	ldrb.w	r0, [sp, #18]
   13940:	4041      	eors	r1, r0
   13942:	f88d 1012 	strb.w	r1, [sp, #18]
   13946:	b2db      	uxtb	r3, r3
   13948:	f89d 1013 	ldrb.w	r1, [sp, #19]
   1394c:	404b      	eors	r3, r1
   1394e:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   13952:	6853      	ldr	r3, [r2, #4]
   13954:	f89d 1014 	ldrb.w	r1, [sp, #20]
   13958:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   1395c:	f88d 1014 	strb.w	r1, [sp, #20]
   13960:	f3c3 4107 	ubfx	r1, r3, #16, #8
   13964:	f89d 0015 	ldrb.w	r0, [sp, #21]
   13968:	4041      	eors	r1, r0
   1396a:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1396e:	f3c3 2107 	ubfx	r1, r3, #8, #8
   13972:	f89d 0016 	ldrb.w	r0, [sp, #22]
   13976:	4041      	eors	r1, r0
   13978:	f88d 1016 	strb.w	r1, [sp, #22]
   1397c:	b2db      	uxtb	r3, r3
   1397e:	f89d 1017 	ldrb.w	r1, [sp, #23]
   13982:	404b      	eors	r3, r1
   13984:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   13988:	6893      	ldr	r3, [r2, #8]
   1398a:	f89d 1018 	ldrb.w	r1, [sp, #24]
   1398e:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   13992:	f88d 1018 	strb.w	r1, [sp, #24]
   13996:	f3c3 4107 	ubfx	r1, r3, #16, #8
   1399a:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1399e:	4041      	eors	r1, r0
   139a0:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   139a4:	f3c3 2107 	ubfx	r1, r3, #8, #8
   139a8:	f89d 001a 	ldrb.w	r0, [sp, #26]
   139ac:	4041      	eors	r1, r0
   139ae:	f88d 101a 	strb.w	r1, [sp, #26]
   139b2:	b2db      	uxtb	r3, r3
   139b4:	f89d 101b 	ldrb.w	r1, [sp, #27]
   139b8:	404b      	eors	r3, r1
   139ba:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   139be:	68d3      	ldr	r3, [r2, #12]
   139c0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   139c4:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   139c8:	f88d 201c 	strb.w	r2, [sp, #28]
   139cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
   139d0:	f89d 101d 	ldrb.w	r1, [sp, #29]
   139d4:	404a      	eors	r2, r1
   139d6:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   139da:	f3c3 2207 	ubfx	r2, r3, #8, #8
   139de:	f89d 101e 	ldrb.w	r1, [sp, #30]
   139e2:	404a      	eors	r2, r1
   139e4:	f88d 201e 	strb.w	r2, [sp, #30]
   139e8:	b2db      	uxtb	r3, r3
   139ea:	f89d 201f 	ldrb.w	r2, [sp, #31]
   139ee:	4053      	eors	r3, r2
   139f0:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   139f4:	2c08      	cmp	r4, #8
   139f6:	d80a      	bhi.n	13a0e <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   139f8:	2300      	movs	r3, #0
   139fa:	2b0f      	cmp	r3, #15
   139fc:	f63f adc0 	bhi.w	13580 <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   13a00:	a904      	add	r1, sp, #16
   13a02:	5cc8      	ldrb	r0, [r1, r3]
   13a04:	4a6e      	ldr	r2, [pc, #440]	; (13bc0 <tc_aes_encrypt+0x748>)
   13a06:	5c10      	ldrb	r0, [r2, r0]
   13a08:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   13a0a:	3301      	adds	r3, #1
   13a0c:	e7f5      	b.n	139fa <tc_aes_encrypt+0x582>
   13a0e:	2300      	movs	r3, #0
   13a10:	e005      	b.n	13a1e <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   13a12:	aa04      	add	r2, sp, #16
   13a14:	5cd1      	ldrb	r1, [r2, r3]
   13a16:	486a      	ldr	r0, [pc, #424]	; (13bc0 <tc_aes_encrypt+0x748>)
   13a18:	5c41      	ldrb	r1, [r0, r1]
   13a1a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   13a1c:	3301      	adds	r3, #1
   13a1e:	2b0f      	cmp	r3, #15
   13a20:	d9f7      	bls.n	13a12 <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   13a22:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13a26:	f88d 3000 	strb.w	r3, [sp]
   13a2a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   13a2e:	f88d 3001 	strb.w	r3, [sp, #1]
   13a32:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13a36:	f88d 3002 	strb.w	r3, [sp, #2]
   13a3a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   13a3e:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   13a42:	f89d 3014 	ldrb.w	r3, [sp, #20]
   13a46:	f88d 3004 	strb.w	r3, [sp, #4]
   13a4a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13a4e:	f88d 3005 	strb.w	r3, [sp, #5]
   13a52:	f89d 301e 	ldrb.w	r3, [sp, #30]
   13a56:	f88d 3006 	strb.w	r3, [sp, #6]
   13a5a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   13a5e:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   13a62:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13a66:	f88d 3008 	strb.w	r3, [sp, #8]
   13a6a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   13a6e:	f88d 3009 	strb.w	r3, [sp, #9]
   13a72:	f89d 3012 	ldrb.w	r3, [sp, #18]
   13a76:	f88d 300a 	strb.w	r3, [sp, #10]
   13a7a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   13a7e:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   13a82:	f89d 301c 	ldrb.w	r3, [sp, #28]
   13a86:	f88d 300c 	strb.w	r3, [sp, #12]
   13a8a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   13a8e:	f88d 300d 	strb.w	r3, [sp, #13]
   13a92:	f89d 3016 	ldrb.w	r3, [sp, #22]
   13a96:	f88d 300e 	strb.w	r3, [sp, #14]
   13a9a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   13a9e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   13aa2:	2310      	movs	r3, #16
   13aa4:	466a      	mov	r2, sp
   13aa6:	4619      	mov	r1, r3
   13aa8:	eb0d 0003 	add.w	r0, sp, r3
   13aac:	f00e fd83 	bl	225b6 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   13ab0:	1c63      	adds	r3, r4, #1
   13ab2:	011a      	lsls	r2, r3, #4
   13ab4:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   13ab8:	58b2      	ldr	r2, [r6, r2]
   13aba:	f89d 1010 	ldrb.w	r1, [sp, #16]
   13abe:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   13ac2:	f88d 1010 	strb.w	r1, [sp, #16]
   13ac6:	f3c2 4107 	ubfx	r1, r2, #16, #8
   13aca:	f89d 0011 	ldrb.w	r0, [sp, #17]
   13ace:	4041      	eors	r1, r0
   13ad0:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   13ad4:	f3c2 2107 	ubfx	r1, r2, #8, #8
   13ad8:	f89d 0012 	ldrb.w	r0, [sp, #18]
   13adc:	4041      	eors	r1, r0
   13ade:	f88d 1012 	strb.w	r1, [sp, #18]
   13ae2:	b2d2      	uxtb	r2, r2
   13ae4:	f89d 1013 	ldrb.w	r1, [sp, #19]
   13ae8:	404a      	eors	r2, r1
   13aea:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   13aee:	685a      	ldr	r2, [r3, #4]
   13af0:	f89d 1014 	ldrb.w	r1, [sp, #20]
   13af4:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   13af8:	f88d 1014 	strb.w	r1, [sp, #20]
   13afc:	f3c2 4107 	ubfx	r1, r2, #16, #8
   13b00:	f89d 0015 	ldrb.w	r0, [sp, #21]
   13b04:	4041      	eors	r1, r0
   13b06:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   13b0a:	f3c2 2107 	ubfx	r1, r2, #8, #8
   13b0e:	f89d 0016 	ldrb.w	r0, [sp, #22]
   13b12:	4041      	eors	r1, r0
   13b14:	f88d 1016 	strb.w	r1, [sp, #22]
   13b18:	b2d2      	uxtb	r2, r2
   13b1a:	f89d 1017 	ldrb.w	r1, [sp, #23]
   13b1e:	404a      	eors	r2, r1
   13b20:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   13b24:	689a      	ldr	r2, [r3, #8]
   13b26:	f89d 1018 	ldrb.w	r1, [sp, #24]
   13b2a:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   13b2e:	f88d 1018 	strb.w	r1, [sp, #24]
   13b32:	f3c2 4107 	ubfx	r1, r2, #16, #8
   13b36:	f89d 0019 	ldrb.w	r0, [sp, #25]
   13b3a:	4041      	eors	r1, r0
   13b3c:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   13b40:	f3c2 2107 	ubfx	r1, r2, #8, #8
   13b44:	f89d 001a 	ldrb.w	r0, [sp, #26]
   13b48:	4041      	eors	r1, r0
   13b4a:	f88d 101a 	strb.w	r1, [sp, #26]
   13b4e:	b2d2      	uxtb	r2, r2
   13b50:	f89d 101b 	ldrb.w	r1, [sp, #27]
   13b54:	404a      	eors	r2, r1
   13b56:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   13b5a:	68db      	ldr	r3, [r3, #12]
   13b5c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   13b60:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   13b64:	f88d 201c 	strb.w	r2, [sp, #28]
   13b68:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13b6c:	f89d 101d 	ldrb.w	r1, [sp, #29]
   13b70:	404a      	eors	r2, r1
   13b72:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   13b76:	f3c3 2207 	ubfx	r2, r3, #8, #8
   13b7a:	f89d 101e 	ldrb.w	r1, [sp, #30]
   13b7e:	404a      	eors	r2, r1
   13b80:	f88d 201e 	strb.w	r2, [sp, #30]
   13b84:	b2db      	uxtb	r3, r3
   13b86:	f89d 201f 	ldrb.w	r2, [sp, #31]
   13b8a:	4053      	eors	r3, r2
   13b8c:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   13b90:	2310      	movs	r3, #16
   13b92:	eb0d 0203 	add.w	r2, sp, r3
   13b96:	4619      	mov	r1, r3
   13b98:	4638      	mov	r0, r7
   13b9a:	f00e fd0c 	bl	225b6 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   13b9e:	2210      	movs	r2, #16
   13ba0:	2100      	movs	r1, #0
   13ba2:	eb0d 0002 	add.w	r0, sp, r2
   13ba6:	f00e fd13 	bl	225d0 <_set>

	return TC_CRYPTO_SUCCESS;
   13baa:	2001      	movs	r0, #1
}
   13bac:	b008      	add	sp, #32
   13bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   13bb2:	2000      	movs	r0, #0
}
   13bb4:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   13bb6:	2000      	movs	r0, #0
   13bb8:	e7f8      	b.n	13bac <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   13bba:	2000      	movs	r0, #0
   13bbc:	e7f6      	b.n	13bac <tc_aes_encrypt+0x734>
   13bbe:	bf00      	nop
   13bc0:	000286e0 	.word	0x000286e0

00013bc4 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   13bc4:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   13bc6:	4802      	ldr	r0, [pc, #8]	; (13bd0 <nrf_cc3xx_platform_abort_init+0xc>)
   13bc8:	f00a fe5a 	bl	1e880 <nrf_cc3xx_platform_set_abort>
}
   13bcc:	bd08      	pop	{r3, pc}
   13bce:	bf00      	nop
   13bd0:	000287e0 	.word	0x000287e0

00013bd4 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   13bd4:	b1d0      	cbz	r0, 13c0c <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13bd6:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   13bd8:	6842      	ldr	r2, [r0, #4]
   13bda:	2a04      	cmp	r2, #4
   13bdc:	d005      	beq.n	13bea <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13bde:	b1d2      	cbz	r2, 13c16 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   13be0:	6800      	ldr	r0, [r0, #0]
   13be2:	f009 facf 	bl	1d184 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   13be6:	2000      	movs	r0, #0
    }
}
   13be8:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   13bea:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13bec:	2200      	movs	r2, #0
   13bee:	f3bf 8f5b 	dmb	ish
   13bf2:	e853 1f00 	ldrex	r1, [r3]
   13bf6:	2901      	cmp	r1, #1
   13bf8:	d103      	bne.n	13c02 <mutex_unlock_platform+0x2e>
   13bfa:	e843 2000 	strex	r0, r2, [r3]
   13bfe:	2800      	cmp	r0, #0
   13c00:	d1f7      	bne.n	13bf2 <mutex_unlock_platform+0x1e>
   13c02:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13c06:	d104      	bne.n	13c12 <mutex_unlock_platform+0x3e>
   13c08:	4610      	mov	r0, r2
   13c0a:	e7ed      	b.n	13be8 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13c0c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   13c10:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13c12:	4802      	ldr	r0, [pc, #8]	; (13c1c <mutex_unlock_platform+0x48>)
   13c14:	e7e8      	b.n	13be8 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13c16:	4802      	ldr	r0, [pc, #8]	; (13c20 <mutex_unlock_platform+0x4c>)
   13c18:	e7e6      	b.n	13be8 <mutex_unlock_platform+0x14>
   13c1a:	bf00      	nop
   13c1c:	ffff8fe9 	.word	0xffff8fe9
   13c20:	ffff8fea 	.word	0xffff8fea

00013c24 <mutex_lock_platform>:
    if(mutex == NULL) {
   13c24:	b320      	cbz	r0, 13c70 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13c26:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   13c28:	6842      	ldr	r2, [r0, #4]
   13c2a:	2a04      	cmp	r2, #4
   13c2c:	d002      	beq.n	13c34 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13c2e:	b992      	cbnz	r2, 13c56 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13c30:	4811      	ldr	r0, [pc, #68]	; (13c78 <mutex_lock_platform+0x54>)
   13c32:	e00f      	b.n	13c54 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   13c34:	6803      	ldr	r3, [r0, #0]
   13c36:	2201      	movs	r2, #1
   13c38:	f3bf 8f5b 	dmb	ish
   13c3c:	e853 1f00 	ldrex	r1, [r3]
   13c40:	2900      	cmp	r1, #0
   13c42:	d103      	bne.n	13c4c <mutex_lock_platform+0x28>
   13c44:	e843 2000 	strex	r0, r2, [r3]
   13c48:	2800      	cmp	r0, #0
   13c4a:	d1f7      	bne.n	13c3c <mutex_lock_platform+0x18>
   13c4c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13c50:	d10c      	bne.n	13c6c <mutex_lock_platform+0x48>
   13c52:	2000      	movs	r0, #0
}
   13c54:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
   13c56:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13c58:	f04f 32ff 	mov.w	r2, #4294967295
   13c5c:	f04f 33ff 	mov.w	r3, #4294967295
   13c60:	f009 fa06 	bl	1d070 <z_impl_k_mutex_lock>
        if (ret == 0) {
   13c64:	2800      	cmp	r0, #0
   13c66:	d0f5      	beq.n	13c54 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   13c68:	4804      	ldr	r0, [pc, #16]	; (13c7c <mutex_lock_platform+0x58>)
   13c6a:	e7f3      	b.n	13c54 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13c6c:	4803      	ldr	r0, [pc, #12]	; (13c7c <mutex_lock_platform+0x58>)
   13c6e:	e7f1      	b.n	13c54 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13c70:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   13c74:	4770      	bx	lr
   13c76:	bf00      	nop
   13c78:	ffff8fea 	.word	0xffff8fea
   13c7c:	ffff8fe9 	.word	0xffff8fe9

00013c80 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13c80:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   13c82:	4604      	mov	r4, r0
   13c84:	b188      	cbz	r0, 13caa <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   13c86:	6863      	ldr	r3, [r4, #4]
   13c88:	2b04      	cmp	r3, #4
   13c8a:	d00d      	beq.n	13ca8 <mutex_free_platform+0x28>
   13c8c:	2b08      	cmp	r3, #8
   13c8e:	d00b      	beq.n	13ca8 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13c90:	b153      	cbz	r3, 13ca8 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   13c92:	f013 0f02 	tst.w	r3, #2
   13c96:	d00d      	beq.n	13cb4 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   13c98:	4621      	mov	r1, r4
   13c9a:	4809      	ldr	r0, [pc, #36]	; (13cc0 <mutex_free_platform+0x40>)
   13c9c:	f013 fbcc 	bl	27438 <k_mem_slab_free>
        mutex->mutex = NULL;
   13ca0:	2300      	movs	r3, #0
   13ca2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   13ca4:	2300      	movs	r3, #0
   13ca6:	6063      	str	r3, [r4, #4]
}
   13ca8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   13caa:	4b06      	ldr	r3, [pc, #24]	; (13cc4 <mutex_free_platform+0x44>)
   13cac:	685b      	ldr	r3, [r3, #4]
   13cae:	4806      	ldr	r0, [pc, #24]	; (13cc8 <mutex_free_platform+0x48>)
   13cb0:	4798      	blx	r3
   13cb2:	e7e8      	b.n	13c86 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   13cb4:	2214      	movs	r2, #20
   13cb6:	2100      	movs	r1, #0
   13cb8:	6820      	ldr	r0, [r4, #0]
   13cba:	f00e fedc 	bl	22a76 <memset>
   13cbe:	e7f1      	b.n	13ca4 <mutex_free_platform+0x24>
   13cc0:	20002c8c 	.word	0x20002c8c
   13cc4:	20000700 	.word	0x20000700
   13cc8:	000287e8 	.word	0x000287e8

00013ccc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13ccc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   13cce:	4604      	mov	r4, r0
   13cd0:	b178      	cbz	r0, 13cf2 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   13cd2:	6863      	ldr	r3, [r4, #4]
   13cd4:	2b04      	cmp	r3, #4
   13cd6:	d00b      	beq.n	13cf0 <mutex_init_platform+0x24>
   13cd8:	2b08      	cmp	r3, #8
   13cda:	d009      	beq.n	13cf0 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   13cdc:	b90b      	cbnz	r3, 13ce2 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
   13cde:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   13ce0:	b163      	cbz	r3, 13cfc <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
   13ce2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   13ce4:	f013 fc45 	bl	27572 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   13ce8:	6863      	ldr	r3, [r4, #4]
   13cea:	f043 0301 	orr.w	r3, r3, #1
   13cee:	6063      	str	r3, [r4, #4]
}
   13cf0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   13cf2:	4b0f      	ldr	r3, [pc, #60]	; (13d30 <mutex_init_platform+0x64>)
   13cf4:	685b      	ldr	r3, [r3, #4]
   13cf6:	480f      	ldr	r0, [pc, #60]	; (13d34 <mutex_init_platform+0x68>)
   13cf8:	4798      	blx	r3
   13cfa:	e7ea      	b.n	13cd2 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   13cfc:	f04f 32ff 	mov.w	r2, #4294967295
   13d00:	f04f 33ff 	mov.w	r3, #4294967295
   13d04:	4621      	mov	r1, r4
   13d06:	480c      	ldr	r0, [pc, #48]	; (13d38 <mutex_init_platform+0x6c>)
   13d08:	f009 f878 	bl	1cdfc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   13d0c:	b908      	cbnz	r0, 13d12 <mutex_init_platform+0x46>
   13d0e:	6823      	ldr	r3, [r4, #0]
   13d10:	b91b      	cbnz	r3, 13d1a <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
   13d12:	4b07      	ldr	r3, [pc, #28]	; (13d30 <mutex_init_platform+0x64>)
   13d14:	685b      	ldr	r3, [r3, #4]
   13d16:	4809      	ldr	r0, [pc, #36]	; (13d3c <mutex_init_platform+0x70>)
   13d18:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   13d1a:	2214      	movs	r2, #20
   13d1c:	2100      	movs	r1, #0
   13d1e:	6820      	ldr	r0, [r4, #0]
   13d20:	f00e fea9 	bl	22a76 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   13d24:	6863      	ldr	r3, [r4, #4]
   13d26:	f043 0302 	orr.w	r3, r3, #2
   13d2a:	6063      	str	r3, [r4, #4]
   13d2c:	e7d9      	b.n	13ce2 <mutex_init_platform+0x16>
   13d2e:	bf00      	nop
   13d30:	20000700 	.word	0x20000700
   13d34:	000287e8 	.word	0x000287e8
   13d38:	20002c8c 	.word	0x20002c8c
   13d3c:	00028810 	.word	0x00028810

00013d40 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   13d40:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   13d42:	2340      	movs	r3, #64	; 0x40
   13d44:	2214      	movs	r2, #20
   13d46:	4904      	ldr	r1, [pc, #16]	; (13d58 <nrf_cc3xx_platform_mutex_init+0x18>)
   13d48:	4804      	ldr	r0, [pc, #16]	; (13d5c <nrf_cc3xx_platform_mutex_init+0x1c>)
   13d4a:	f013 fb67 	bl	2741c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   13d4e:	4904      	ldr	r1, [pc, #16]	; (13d60 <nrf_cc3xx_platform_mutex_init+0x20>)
   13d50:	4804      	ldr	r0, [pc, #16]	; (13d64 <nrf_cc3xx_platform_mutex_init+0x24>)
   13d52:	f00a fe4d 	bl	1e9f0 <nrf_cc3xx_platform_set_mutexes>
}
   13d56:	bd08      	pop	{r3, pc}
   13d58:	20002ca8 	.word	0x20002ca8
   13d5c:	20002c8c 	.word	0x20002c8c
   13d60:	00028850 	.word	0x00028850
   13d64:	00028840 	.word	0x00028840

00013d68 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13d68:	4901      	ldr	r1, [pc, #4]	; (13d70 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   13d6a:	2210      	movs	r2, #16
	str	r2, [r1]
   13d6c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13d6e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13d70:	e000ed10 	.word	0xe000ed10

00013d74 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13d74:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13d76:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13d78:	f380 8811 	msr	BASEPRI, r0
	isb
   13d7c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13d80:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13d84:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13d86:	b662      	cpsie	i
	isb
   13d88:	f3bf 8f6f 	isb	sy

	bx	lr
   13d8c:	4770      	bx	lr
   13d8e:	bf00      	nop

00013d90 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13d90:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13d92:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13d94:	f381 8811 	msr	BASEPRI, r1

	wfe
   13d98:	bf20      	wfe

	msr	BASEPRI, r0
   13d9a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13d9e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13da0:	4770      	bx	lr
   13da2:	bf00      	nop

00013da4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13da4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13da6:	2b00      	cmp	r3, #0
   13da8:	db08      	blt.n	13dbc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13daa:	f000 001f 	and.w	r0, r0, #31
   13dae:	095b      	lsrs	r3, r3, #5
   13db0:	2201      	movs	r2, #1
   13db2:	fa02 f000 	lsl.w	r0, r2, r0
   13db6:	4a02      	ldr	r2, [pc, #8]	; (13dc0 <arch_irq_enable+0x1c>)
   13db8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13dbc:	4770      	bx	lr
   13dbe:	bf00      	nop
   13dc0:	e000e100 	.word	0xe000e100

00013dc4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   13dc4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13dc6:	2b00      	cmp	r3, #0
   13dc8:	db0d      	blt.n	13de6 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13dca:	f000 001f 	and.w	r0, r0, #31
   13dce:	095b      	lsrs	r3, r3, #5
   13dd0:	2201      	movs	r2, #1
   13dd2:	fa02 f000 	lsl.w	r0, r2, r0
   13dd6:	3320      	adds	r3, #32
   13dd8:	4a03      	ldr	r2, [pc, #12]	; (13de8 <arch_irq_disable+0x24>)
   13dda:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13dde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13de2:	f3bf 8f6f 	isb	sy
}
   13de6:	4770      	bx	lr
   13de8:	e000e100 	.word	0xe000e100

00013dec <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13dec:	0942      	lsrs	r2, r0, #5
   13dee:	4b05      	ldr	r3, [pc, #20]	; (13e04 <arch_irq_is_enabled+0x18>)
   13df0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13df4:	f000 001f 	and.w	r0, r0, #31
   13df8:	2301      	movs	r3, #1
   13dfa:	fa03 f000 	lsl.w	r0, r3, r0
}
   13dfe:	4010      	ands	r0, r2
   13e00:	4770      	bx	lr
   13e02:	bf00      	nop
   13e04:	e000e100 	.word	0xe000e100

00013e08 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   13e08:	f012 0f01 	tst.w	r2, #1
   13e0c:	d10c      	bne.n	13e28 <z_arm_irq_priority_set+0x20>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   13e0e:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13e10:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13e12:	2b00      	cmp	r3, #0
   13e14:	db0a      	blt.n	13e2c <z_arm_irq_priority_set+0x24>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13e16:	0149      	lsls	r1, r1, #5
   13e18:	b2c9      	uxtb	r1, r1
   13e1a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13e1e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13e22:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   13e26:	4770      	bx	lr
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   13e28:	2100      	movs	r1, #0
   13e2a:	e7f1      	b.n	13e10 <z_arm_irq_priority_set+0x8>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13e2c:	f000 000f 	and.w	r0, r0, #15
   13e30:	0149      	lsls	r1, r1, #5
   13e32:	b2c9      	uxtb	r1, r1
   13e34:	4b01      	ldr	r3, [pc, #4]	; (13e3c <z_arm_irq_priority_set+0x34>)
   13e36:	5419      	strb	r1, [r3, r0]
}
   13e38:	4770      	bx	lr
   13e3a:	bf00      	nop
   13e3c:	e000ed14 	.word	0xe000ed14

00013e40 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13e40:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13e42:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13e44:	4b04      	ldr	r3, [pc, #16]	; (13e58 <_arch_isr_direct_pm+0x18>)
   13e46:	6998      	ldr	r0, [r3, #24]
   13e48:	b908      	cbnz	r0, 13e4e <_arch_isr_direct_pm+0xe>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13e4a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13e4c:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   13e4e:	2200      	movs	r2, #0
   13e50:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit(idle_val);
   13e52:	f013 fb66 	bl	27522 <z_pm_save_idle_exit>
   13e56:	e7f8      	b.n	13e4a <_arch_isr_direct_pm+0xa>
   13e58:	2000613c 	.word	0x2000613c

00013e5c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13e5c:	bf30      	wfi
    b z_SysNmiOnReset
   13e5e:	f7ff bffd 	b.w	13e5c <z_SysNmiOnReset>
   13e62:	bf00      	nop

00013e64 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13e64:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13e66:	4b0b      	ldr	r3, [pc, #44]	; (13e94 <z_arm_prep_c+0x30>)
   13e68:	4a0b      	ldr	r2, [pc, #44]	; (13e98 <z_arm_prep_c+0x34>)
   13e6a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13e6e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   13e70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13e74:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13e78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13e7c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13e84:	f008 ff46 	bl	1cd14 <z_bss_zero>
	z_data_copy();
   13e88:	f00a f82a 	bl	1dee0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13e8c:	f000 fa12 	bl	142b4 <z_arm_interrupt_init>
	z_cstart();
   13e90:	f008 ff4c 	bl	1cd2c <z_cstart>
   13e94:	e000ed00 	.word	0xe000ed00
   13e98:	00001000 	.word	0x00001000

00013e9c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13e9c:	4a0a      	ldr	r2, [pc, #40]	; (13ec8 <arch_swap+0x2c>)
   13e9e:	6893      	ldr	r3, [r2, #8]
   13ea0:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   13ea4:	4909      	ldr	r1, [pc, #36]	; (13ecc <arch_swap+0x30>)
   13ea6:	6809      	ldr	r1, [r1, #0]
   13ea8:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13eac:	4908      	ldr	r1, [pc, #32]	; (13ed0 <arch_swap+0x34>)
   13eae:	684b      	ldr	r3, [r1, #4]
   13eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13eb4:	604b      	str	r3, [r1, #4]
   13eb6:	2300      	movs	r3, #0
   13eb8:	f383 8811 	msr	BASEPRI, r3
   13ebc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13ec0:	6893      	ldr	r3, [r2, #8]
}
   13ec2:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   13ec6:	4770      	bx	lr
   13ec8:	2000613c 	.word	0x2000613c
   13ecc:	00028f34 	.word	0x00028f34
   13ed0:	e000ed00 	.word	0xe000ed00

00013ed4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13ed4:	4913      	ldr	r1, [pc, #76]	; (13f24 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13ed6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13ed8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13edc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13ede:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13ee2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13ee6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   13ee8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13eec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13ef0:	4f0d      	ldr	r7, [pc, #52]	; (13f28 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13ef2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13ef6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13ef8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13efa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13efc:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   13f00:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13f02:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13f06:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   13f0a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13f0c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   13f0e:	f000 fa73 	bl	143f8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   13f12:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13f16:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13f1a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13f1e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13f22:	4770      	bx	lr
    ldr r1, =_kernel
   13f24:	2000613c 	.word	0x2000613c
    ldr v4, =_SCS_ICSR
   13f28:	e000ed04 	.word	0xe000ed04

00013f2c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13f2c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13f30:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13f32:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   13f36:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13f3a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13f3c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13f40:	2902      	cmp	r1, #2
    beq _oops
   13f42:	d0ff      	beq.n	13f44 <_oops>

00013f44 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13f44:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   13f46:	f00e fc61 	bl	2280c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   13f4a:	bd01      	pop	{r0, pc}

00013f4c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   13f4c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   13f4e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   13f52:	490d      	ldr	r1, [pc, #52]	; (13f88 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   13f54:	f021 0101 	bic.w	r1, r1, #1
   13f58:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   13f5c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13f60:	9b01      	ldr	r3, [sp, #4]
   13f62:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   13f66:	9b02      	ldr	r3, [sp, #8]
   13f68:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13f6c:	9b03      	ldr	r3, [sp, #12]
   13f6e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13f76:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   13f7a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13f7c:	2300      	movs	r3, #0
   13f7e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13f82:	bc10      	pop	{r4}
   13f84:	4770      	bx	lr
   13f86:	bf00      	nop
   13f88:	0002149f 	.word	0x0002149f

00013f8c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13f8c:	4b16      	ldr	r3, [pc, #88]	; (13fe8 <z_check_thread_stack_fail+0x5c>)
   13f8e:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   13f90:	b1da      	cbz	r2, 13fca <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13f92:	f110 0f16 	cmn.w	r0, #22
   13f96:	d01a      	beq.n	13fce <z_check_thread_stack_fail+0x42>
{
   13f98:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13f9a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   13f9e:	f1a3 0420 	sub.w	r4, r3, #32
   13fa2:	4284      	cmp	r4, r0
   13fa4:	d805      	bhi.n	13fb2 <z_check_thread_stack_fail+0x26>
   13fa6:	4283      	cmp	r3, r0
   13fa8:	d908      	bls.n	13fbc <z_check_thread_stack_fail+0x30>
   13faa:	428b      	cmp	r3, r1
   13fac:	d808      	bhi.n	13fc0 <z_check_thread_stack_fail+0x34>
   13fae:	2100      	movs	r1, #0
   13fb0:	e000      	b.n	13fb4 <z_check_thread_stack_fail+0x28>
   13fb2:	2100      	movs	r1, #0
   13fb4:	b931      	cbnz	r1, 13fc4 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   13fb6:	2000      	movs	r0, #0
}
   13fb8:	bc10      	pop	{r4}
   13fba:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13fbc:	2100      	movs	r1, #0
   13fbe:	e7f9      	b.n	13fb4 <z_check_thread_stack_fail+0x28>
   13fc0:	2101      	movs	r1, #1
   13fc2:	e7f7      	b.n	13fb4 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   13fc4:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   13fc8:	e7f6      	b.n	13fb8 <z_check_thread_stack_fail+0x2c>
		return 0;
   13fca:	2000      	movs	r0, #0
   13fcc:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13fce:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   13fd2:	428b      	cmp	r3, r1
   13fd4:	bf94      	ite	ls
   13fd6:	2100      	movls	r1, #0
   13fd8:	2101      	movhi	r1, #1
   13fda:	b909      	cbnz	r1, 13fe0 <z_check_thread_stack_fail+0x54>
	return 0;
   13fdc:	2000      	movs	r0, #0
}
   13fde:	4770      	bx	lr
		return thread->stack_info.start;
   13fe0:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   13fe4:	4770      	bx	lr
   13fe6:	bf00      	nop
   13fe8:	2000613c 	.word	0x2000613c

00013fec <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13fec:	b508      	push	{r3, lr}
   13fee:	460d      	mov	r5, r1
   13ff0:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13ff2:	4b08      	ldr	r3, [pc, #32]	; (14014 <arch_switch_to_main_thread+0x28>)
   13ff4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   13ff6:	f000 f9ff 	bl	143f8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13ffa:	4620      	mov	r0, r4
   13ffc:	f385 8809 	msr	PSP, r5
   14000:	2100      	movs	r1, #0
   14002:	b663      	cpsie	if
   14004:	f381 8811 	msr	BASEPRI, r1
   14008:	f3bf 8f6f 	isb	sy
   1400c:	2200      	movs	r2, #0
   1400e:	2300      	movs	r3, #0
   14010:	f00d fa45 	bl	2149e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14014:	2000613c 	.word	0x2000613c

00014018 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14018:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1401a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1401c:	4a0b      	ldr	r2, [pc, #44]	; (1404c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1401e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   14020:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14022:	bf1e      	ittt	ne
	movne	r1, #0
   14024:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14026:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   14028:	f013 fa7b 	blne	27522 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1402c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1402e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14032:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14036:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1403a:	4905      	ldr	r1, [pc, #20]	; (14050 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1403c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1403e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14040:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14042:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14046:	4903      	ldr	r1, [pc, #12]	; (14054 <_isr_wrapper+0x3c>)
	bx r1
   14048:	4708      	bx	r1
   1404a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1404c:	2000613c 	.word	0x2000613c
	ldr r1, =_sw_isr_table
   14050:	000280d4 	.word	0x000280d4
	ldr r1, =z_arm_int_exit
   14054:	00014059 	.word	0x00014059

00014058 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14058:	4b04      	ldr	r3, [pc, #16]	; (1406c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1405a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1405c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1405e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14060:	d003      	beq.n	1406a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14062:	4903      	ldr	r1, [pc, #12]	; (14070 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14068:	600a      	str	r2, [r1, #0]

0001406a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1406a:	4770      	bx	lr
	ldr r3, =_kernel
   1406c:	2000613c 	.word	0x2000613c
	ldr r1, =_SCS_ICSR
   14070:	e000ed04 	.word	0xe000ed04

00014074 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   14074:	b510      	push	{r4, lr}
   14076:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14078:	4b12      	ldr	r3, [pc, #72]	; (140c4 <bus_fault+0x50>)
   1407a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1407c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14080:	f413 7f00 	tst.w	r3, #512	; 0x200
   14084:	d00b      	beq.n	1409e <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   14086:	4b0f      	ldr	r3, [pc, #60]	; (140c4 <bus_fault+0x50>)
   14088:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1408c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   14090:	d005      	beq.n	1409e <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   14092:	b121      	cbz	r1, 1409e <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14094:	4a0b      	ldr	r2, [pc, #44]	; (140c4 <bus_fault+0x50>)
   14096:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14098:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1409c:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1409e:	4b09      	ldr	r3, [pc, #36]	; (140c4 <bus_fault+0x50>)
   140a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   140a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   140a4:	f413 7f80 	tst.w	r3, #256	; 0x100
   140a8:	d101      	bne.n	140ae <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   140aa:	4b06      	ldr	r3, [pc, #24]	; (140c4 <bus_fault+0x50>)
   140ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   140ae:	4a05      	ldr	r2, [pc, #20]	; (140c4 <bus_fault+0x50>)
   140b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   140b2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   140b6:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   140b8:	2101      	movs	r1, #1
   140ba:	f00e fbb9 	bl	22830 <memory_fault_recoverable>
   140be:	7020      	strb	r0, [r4, #0]

	return reason;
}
   140c0:	2000      	movs	r0, #0
   140c2:	bd10      	pop	{r4, pc}
   140c4:	e000ed00 	.word	0xe000ed00

000140c8 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   140c8:	4b07      	ldr	r3, [pc, #28]	; (140e8 <usage_fault+0x20>)
   140ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   140cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   140ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   140d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   140d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   140d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   140d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   140d8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   140dc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   140e0:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   140e2:	2000      	movs	r0, #0
   140e4:	4770      	bx	lr
   140e6:	bf00      	nop
   140e8:	e000ed00 	.word	0xe000ed00

000140ec <mem_manage_fault>:
{
   140ec:	b570      	push	{r4, r5, r6, lr}
   140ee:	4605      	mov	r5, r0
   140f0:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   140f2:	4b20      	ldr	r3, [pc, #128]	; (14174 <mem_manage_fault+0x88>)
   140f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   140f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   140f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   140fa:	f013 0f02 	tst.w	r3, #2
   140fe:	d00c      	beq.n	1411a <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
   14100:	4b1c      	ldr	r3, [pc, #112]	; (14174 <mem_manage_fault+0x88>)
   14102:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14106:	f013 0f80 	tst.w	r3, #128	; 0x80
   1410a:	d025      	beq.n	14158 <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
   1410c:	b139      	cbz	r1, 1411e <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1410e:	4a19      	ldr	r2, [pc, #100]	; (14174 <mem_manage_fault+0x88>)
   14110:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14116:	6293      	str	r3, [r2, #40]	; 0x28
   14118:	e001      	b.n	1411e <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
   1411a:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1411e:	4b15      	ldr	r3, [pc, #84]	; (14174 <mem_manage_fault+0x88>)
   14120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14126:	f013 0f10 	tst.w	r3, #16
   1412a:	d104      	bne.n	14136 <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1412c:	4b11      	ldr	r3, [pc, #68]	; (14174 <mem_manage_fault+0x88>)
   1412e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14130:	f014 0402 	ands.w	r4, r4, #2
   14134:	d004      	beq.n	14140 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   14136:	4b0f      	ldr	r3, [pc, #60]	; (14174 <mem_manage_fault+0x88>)
   14138:	685c      	ldr	r4, [r3, #4]
   1413a:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   1413e:	d10e      	bne.n	1415e <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14140:	4a0c      	ldr	r2, [pc, #48]	; (14174 <mem_manage_fault+0x88>)
   14142:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14144:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   14148:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1414a:	2101      	movs	r1, #1
   1414c:	4628      	mov	r0, r5
   1414e:	f00e fb6f 	bl	22830 <memory_fault_recoverable>
   14152:	7030      	strb	r0, [r6, #0]
}
   14154:	4620      	mov	r0, r4
   14156:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
   14158:	f06f 0015 	mvn.w	r0, #21
   1415c:	e7df      	b.n	1411e <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   1415e:	4629      	mov	r1, r5
   14160:	f7ff ff14 	bl	13f8c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   14164:	4604      	mov	r4, r0
   14166:	2800      	cmp	r0, #0
   14168:	d0ea      	beq.n	14140 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1416a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1416e:	2402      	movs	r4, #2
   14170:	e7e6      	b.n	14140 <mem_manage_fault+0x54>
   14172:	bf00      	nop
   14174:	e000ed00 	.word	0xe000ed00

00014178 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   14178:	b510      	push	{r4, lr}
   1417a:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   1417c:	2300      	movs	r3, #0
   1417e:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14180:	4b1b      	ldr	r3, [pc, #108]	; (141f0 <hard_fault+0x78>)
   14182:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   14184:	f010 0002 	ands.w	r0, r0, #2
   14188:	d12d      	bne.n	141e6 <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1418c:	2b00      	cmp	r3, #0
   1418e:	db2b      	blt.n	141e8 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14190:	4b17      	ldr	r3, [pc, #92]	; (141f0 <hard_fault+0x78>)
   14192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14194:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
   14198:	d027      	beq.n	141ea <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1419a:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   1419c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   141a0:	f64d 7302 	movw	r3, #57090	; 0xdf02
   141a4:	429a      	cmp	r2, r3
   141a6:	d010      	beq.n	141ca <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
   141a8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   141ac:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   141b0:	781b      	ldrb	r3, [r3, #0]
   141b2:	b963      	cbnz	r3, 141ce <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
   141b4:	4b0f      	ldr	r3, [pc, #60]	; (141f4 <hard_fault+0x7c>)
   141b6:	781b      	ldrb	r3, [r3, #0]
   141b8:	b97b      	cbnz	r3, 141da <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
   141ba:	4b0f      	ldr	r3, [pc, #60]	; (141f8 <hard_fault+0x80>)
   141bc:	881b      	ldrh	r3, [r3, #0]
   141be:	b29b      	uxth	r3, r3
   141c0:	b193      	cbz	r3, 141e8 <hard_fault+0x70>
			reason = usage_fault(esf);
   141c2:	4620      	mov	r0, r4
   141c4:	f7ff ff80 	bl	140c8 <usage_fault>
   141c8:	e00e      	b.n	141e8 <hard_fault+0x70>
			reason = esf->basic.r0;
   141ca:	6820      	ldr	r0, [r4, #0]
   141cc:	e00c      	b.n	141e8 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
   141ce:	460a      	mov	r2, r1
   141d0:	2101      	movs	r1, #1
   141d2:	4620      	mov	r0, r4
   141d4:	f7ff ff8a 	bl	140ec <mem_manage_fault>
   141d8:	e006      	b.n	141e8 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
   141da:	460a      	mov	r2, r1
   141dc:	2101      	movs	r1, #1
   141de:	4620      	mov	r0, r4
   141e0:	f7ff ff48 	bl	14074 <bus_fault>
   141e4:	e000      	b.n	141e8 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   141e6:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   141e8:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   141ea:	4618      	mov	r0, r3
	return reason;
   141ec:	e7fc      	b.n	141e8 <hard_fault+0x70>
   141ee:	bf00      	nop
   141f0:	e000ed00 	.word	0xe000ed00
   141f4:	e000ed29 	.word	0xe000ed29
   141f8:	e000ed2a 	.word	0xe000ed2a

000141fc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   141fc:	b570      	push	{r4, r5, r6, lr}
   141fe:	b08a      	sub	sp, #40	; 0x28
   14200:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14202:	4b22      	ldr	r3, [pc, #136]	; (1428c <z_arm_fault+0x90>)
   14204:	6859      	ldr	r1, [r3, #4]
   14206:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1420a:	2300      	movs	r3, #0
   1420c:	f383 8811 	msr	BASEPRI, r3
   14210:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14214:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14218:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1421c:	d115      	bne.n	1424a <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1421e:	f002 030c 	and.w	r3, r2, #12
   14222:	2b08      	cmp	r3, #8
   14224:	d014      	beq.n	14250 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14226:	f012 0f08 	tst.w	r2, #8
   1422a:	d00b      	beq.n	14244 <z_arm_fault+0x48>
	*nested_exc = false;
   1422c:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   1422e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   14232:	4620      	mov	r0, r4
   14234:	f00e fb01 	bl	2283a <fault_handle>
   14238:	4605      	mov	r5, r0
	if (recoverable) {
   1423a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1423e:	b153      	cbz	r3, 14256 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   14240:	b00a      	add	sp, #40	; 0x28
   14242:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
   14244:	4604      	mov	r4, r0
			*nested_exc = true;
   14246:	2601      	movs	r6, #1
   14248:	e7f1      	b.n	1422e <z_arm_fault+0x32>
	*nested_exc = false;
   1424a:	2600      	movs	r6, #0
		return NULL;
   1424c:	4634      	mov	r4, r6
   1424e:	e7ee      	b.n	1422e <z_arm_fault+0x32>
	*nested_exc = false;
   14250:	2600      	movs	r6, #0
		return NULL;
   14252:	4634      	mov	r4, r6
   14254:	e7eb      	b.n	1422e <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14256:	2220      	movs	r2, #32
   14258:	4621      	mov	r1, r4
   1425a:	a801      	add	r0, sp, #4
   1425c:	f00e fbe7 	bl	22a2e <memcpy>
	if (nested_exc) {
   14260:	b14e      	cbz	r6, 14276 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14262:	9b08      	ldr	r3, [sp, #32]
   14264:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14268:	b95a      	cbnz	r2, 14282 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1426a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1426e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   14272:	9308      	str	r3, [sp, #32]
   14274:	e005      	b.n	14282 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14276:	9b08      	ldr	r3, [sp, #32]
   14278:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1427c:	f023 0301 	bic.w	r3, r3, #1
   14280:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   14282:	a901      	add	r1, sp, #4
   14284:	4628      	mov	r0, r5
   14286:	f00e fabd 	bl	22804 <z_arm_fatal_error>
   1428a:	e7d9      	b.n	14240 <z_arm_fault+0x44>
   1428c:	e000ed00 	.word	0xe000ed00

00014290 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   14290:	4a02      	ldr	r2, [pc, #8]	; (1429c <z_arm_fault_init+0xc>)
   14292:	6953      	ldr	r3, [r2, #20]
   14294:	f043 0310 	orr.w	r3, r3, #16
   14298:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1429a:	4770      	bx	lr
   1429c:	e000ed00 	.word	0xe000ed00

000142a0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   142a0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   142a4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   142a8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   142aa:	4672      	mov	r2, lr
	bl z_arm_fault
   142ac:	f7ff ffa6 	bl	141fc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   142b0:	bd01      	pop	{r0, pc}
   142b2:	bf00      	nop

000142b4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   142b4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   142b6:	e006      	b.n	142c6 <z_arm_interrupt_init+0x12>
   142b8:	f002 010f 	and.w	r1, r2, #15
   142bc:	4b09      	ldr	r3, [pc, #36]	; (142e4 <z_arm_interrupt_init+0x30>)
   142be:	440b      	add	r3, r1
   142c0:	2140      	movs	r1, #64	; 0x40
   142c2:	7619      	strb	r1, [r3, #24]
   142c4:	3201      	adds	r2, #1
   142c6:	2a2f      	cmp	r2, #47	; 0x2f
   142c8:	dc0a      	bgt.n	142e0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   142ca:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   142cc:	2b00      	cmp	r3, #0
   142ce:	dbf3      	blt.n	142b8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   142d0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   142d4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   142d8:	2140      	movs	r1, #64	; 0x40
   142da:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   142de:	e7f1      	b.n	142c4 <z_arm_interrupt_init+0x10>
	}
}
   142e0:	4770      	bx	lr
   142e2:	bf00      	nop
   142e4:	e000ecfc 	.word	0xe000ecfc

000142e8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   142e8:	2000      	movs	r0, #0
    msr CONTROL, r0
   142ea:	f380 8814 	msr	CONTROL, r0
    isb
   142ee:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   142f2:	f013 fe31 	bl	27f58 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   142f6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   142f8:	490d      	ldr	r1, [pc, #52]	; (14330 <__start+0x48>)
    str r0, [r1]
   142fa:	6008      	str	r0, [r1, #0]
    dsb
   142fc:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14300:	480c      	ldr	r0, [pc, #48]	; (14334 <__start+0x4c>)
    msr msp, r0
   14302:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   14306:	f000 f829 	bl	1435c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1430a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1430c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   14310:	4809      	ldr	r0, [pc, #36]	; (14338 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   14312:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   14316:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14318:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1431c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   14320:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   14322:	4308      	orrs	r0, r1
    msr CONTROL, r0
   14324:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14328:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1432c:	f7ff fd9a 	bl	13e64 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   14330:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14334:	20008f20 	.word	0x20008f20
    ldr r0, =z_interrupt_stacks
   14338:	200090a0 	.word	0x200090a0

0001433c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1433c:	4b06      	ldr	r3, [pc, #24]	; (14358 <z_arm_clear_arm_mpu_config+0x1c>)
   1433e:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   14340:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   14344:	2300      	movs	r3, #0
   14346:	4283      	cmp	r3, r0
   14348:	da05      	bge.n	14356 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   1434a:	4a03      	ldr	r2, [pc, #12]	; (14358 <z_arm_clear_arm_mpu_config+0x1c>)
   1434c:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   1434e:	2100      	movs	r1, #0
   14350:	6111      	str	r1, [r2, #16]
   14352:	3301      	adds	r3, #1
   14354:	e7f7      	b.n	14346 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   14356:	4770      	bx	lr
   14358:	e000ed90 	.word	0xe000ed90

0001435c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1435c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1435e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   14360:	2400      	movs	r4, #0
   14362:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   14366:	f7ff ffe9 	bl	1433c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1436a:	4623      	mov	r3, r4
   1436c:	e008      	b.n	14380 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   1436e:	f103 0120 	add.w	r1, r3, #32
   14372:	4a0e      	ldr	r2, [pc, #56]	; (143ac <z_arm_init_arch_hw_at_boot+0x50>)
   14374:	f04f 30ff 	mov.w	r0, #4294967295
   14378:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1437c:	3301      	adds	r3, #1
   1437e:	b2db      	uxtb	r3, r3
   14380:	2b07      	cmp	r3, #7
   14382:	d9f4      	bls.n	1436e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   14384:	2300      	movs	r3, #0
   14386:	e008      	b.n	1439a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   14388:	f103 0160 	add.w	r1, r3, #96	; 0x60
   1438c:	4a07      	ldr	r2, [pc, #28]	; (143ac <z_arm_init_arch_hw_at_boot+0x50>)
   1438e:	f04f 30ff 	mov.w	r0, #4294967295
   14392:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   14396:	3301      	adds	r3, #1
   14398:	b2db      	uxtb	r3, r3
   1439a:	2b07      	cmp	r3, #7
   1439c:	d9f4      	bls.n	14388 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1439e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   143a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   143a4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   143a8:	bd10      	pop	{r4, pc}
   143aa:	bf00      	nop
   143ac:	e000e100 	.word	0xe000e100

000143b0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   143b0:	b508      	push	{r3, lr}
	if (_current == thread) {
   143b2:	4b08      	ldr	r3, [pc, #32]	; (143d4 <z_impl_k_thread_abort+0x24>)
   143b4:	689b      	ldr	r3, [r3, #8]
   143b6:	4283      	cmp	r3, r0
   143b8:	d002      	beq.n	143c0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   143ba:	f009 fd57 	bl	1de6c <z_thread_abort>
}
   143be:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   143c0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   143c4:	2b00      	cmp	r3, #0
   143c6:	d0f8      	beq.n	143ba <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   143c8:	4a03      	ldr	r2, [pc, #12]	; (143d8 <z_impl_k_thread_abort+0x28>)
   143ca:	6853      	ldr	r3, [r2, #4]
   143cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   143d0:	6053      	str	r3, [r2, #4]
   143d2:	e7f2      	b.n	143ba <z_impl_k_thread_abort+0xa>
   143d4:	2000613c 	.word	0x2000613c
   143d8:	e000ed00 	.word	0xe000ed00

000143dc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   143dc:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   143de:	4b03      	ldr	r3, [pc, #12]	; (143ec <z_arm_configure_static_mpu_regions+0x10>)
   143e0:	4a03      	ldr	r2, [pc, #12]	; (143f0 <z_arm_configure_static_mpu_regions+0x14>)
   143e2:	2101      	movs	r1, #1
   143e4:	4803      	ldr	r0, [pc, #12]	; (143f4 <z_arm_configure_static_mpu_regions+0x18>)
   143e6:	f00e faae 	bl	22946 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   143ea:	bd08      	pop	{r3, pc}
   143ec:	20040000 	.word	0x20040000
   143f0:	20000000 	.word	0x20000000
   143f4:	00028864 	.word	0x00028864

000143f8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   143f8:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   143fa:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   143fe:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   14400:	4804      	ldr	r0, [pc, #16]	; (14414 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   14402:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   14404:	2320      	movs	r3, #32
   14406:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   14408:	4b03      	ldr	r3, [pc, #12]	; (14418 <z_arm_configure_dynamic_mpu_regions+0x20>)
   1440a:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   1440c:	2101      	movs	r1, #1
   1440e:	f00e fa9e 	bl	2294e <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   14412:	bd08      	pop	{r3, pc}
   14414:	200031a8 	.word	0x200031a8
   14418:	150b0000 	.word	0x150b0000

0001441c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   1441c:	4a06      	ldr	r2, [pc, #24]	; (14438 <region_init+0x1c>)
   1441e:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14420:	680b      	ldr	r3, [r1, #0]
   14422:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   14426:	4303      	orrs	r3, r0
   14428:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1442c:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1442e:	688b      	ldr	r3, [r1, #8]
   14430:	f043 0301 	orr.w	r3, r3, #1
   14434:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   14436:	4770      	bx	lr
   14438:	e000ed90 	.word	0xe000ed90

0001443c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   1443c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   1443e:	4c03      	ldr	r4, [pc, #12]	; (1444c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14440:	2301      	movs	r3, #1
   14442:	7822      	ldrb	r2, [r4, #0]
   14444:	f00e fa57 	bl	228f6 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14448:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   1444a:	bd10      	pop	{r4, pc}
   1444c:	20006a82 	.word	0x20006a82

00014450 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   14450:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   14452:	2300      	movs	r3, #0
   14454:	4a08      	ldr	r2, [pc, #32]	; (14478 <mpu_configure_dynamic_mpu_regions+0x28>)
   14456:	7812      	ldrb	r2, [r2, #0]
   14458:	f00e fa4d 	bl	228f6 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   1445c:	f110 0f16 	cmn.w	r0, #22
   14460:	d008      	beq.n	14474 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   14462:	4603      	mov	r3, r0
   14464:	2b07      	cmp	r3, #7
   14466:	dc05      	bgt.n	14474 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   14468:	4a04      	ldr	r2, [pc, #16]	; (1447c <mpu_configure_dynamic_mpu_regions+0x2c>)
   1446a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   1446c:	2100      	movs	r1, #0
   1446e:	6111      	str	r1, [r2, #16]
   14470:	3301      	adds	r3, #1
   14472:	e7f7      	b.n	14464 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   14474:	bd08      	pop	{r3, pc}
   14476:	bf00      	nop
   14478:	20006a82 	.word	0x20006a82
   1447c:	e000ed90 	.word	0xe000ed90

00014480 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14480:	4b03      	ldr	r3, [pc, #12]	; (14490 <arm_core_mpu_enable+0x10>)
   14482:	2205      	movs	r2, #5
   14484:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   14486:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1448a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1448e:	4770      	bx	lr
   14490:	e000ed90 	.word	0xe000ed90

00014494 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14494:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14498:	4b01      	ldr	r3, [pc, #4]	; (144a0 <arm_core_mpu_disable+0xc>)
   1449a:	2200      	movs	r2, #0
   1449c:	605a      	str	r2, [r3, #4]
}
   1449e:	4770      	bx	lr
   144a0:	e000ed90 	.word	0xe000ed90

000144a4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   144a4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   144a6:	4b0e      	ldr	r3, [pc, #56]	; (144e0 <z_arm_mpu_init+0x3c>)
   144a8:	681d      	ldr	r5, [r3, #0]
   144aa:	2d08      	cmp	r5, #8
   144ac:	d815      	bhi.n	144da <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   144ae:	f7ff fff1 	bl	14494 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   144b2:	2400      	movs	r4, #0
   144b4:	42a5      	cmp	r5, r4
   144b6:	d90a      	bls.n	144ce <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   144b8:	4b09      	ldr	r3, [pc, #36]	; (144e0 <z_arm_mpu_init+0x3c>)
   144ba:	6859      	ldr	r1, [r3, #4]
   144bc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   144c0:	0093      	lsls	r3, r2, #2
   144c2:	4419      	add	r1, r3
   144c4:	4620      	mov	r0, r4
   144c6:	f7ff ffa9 	bl	1441c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   144ca:	3401      	adds	r4, #1
   144cc:	e7f2      	b.n	144b4 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   144ce:	4b05      	ldr	r3, [pc, #20]	; (144e4 <z_arm_mpu_init+0x40>)
   144d0:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   144d2:	f7ff ffd5 	bl	14480 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   144d6:	2000      	movs	r0, #0
}
   144d8:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   144da:	f04f 30ff 	mov.w	r0, #4294967295
   144de:	e7fb      	b.n	144d8 <z_arm_mpu_init+0x34>
   144e0:	00028880 	.word	0x00028880
   144e4:	20006a82 	.word	0x20006a82

000144e8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   144e8:	4b01      	ldr	r3, [pc, #4]	; (144f0 <__stdout_hook_install+0x8>)
   144ea:	6018      	str	r0, [r3, #0]
}
   144ec:	4770      	bx	lr
   144ee:	bf00      	nop
   144f0:	20000560 	.word	0x20000560

000144f4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   144f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   144f8:	f3ef 8211 	mrs	r2, BASEPRI
   144fc:	f383 8812 	msr	BASEPRI_MAX, r3
   14500:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   14504:	2301      	movs	r3, #1
   14506:	4906      	ldr	r1, [pc, #24]	; (14520 <nordicsemi_nrf52_init+0x2c>)
   14508:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1450c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   14510:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   14514:	f382 8811 	msr	BASEPRI, r2
   14518:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1451c:	2000      	movs	r0, #0
   1451e:	4770      	bx	lr
   14520:	4001e000 	.word	0x4001e000

00014524 <sys_arch_reboot>:
    *p_gpregret = val;
   14524:	b2c0      	uxtb	r0, r0
   14526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1452a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   1452e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14532:	4905      	ldr	r1, [pc, #20]	; (14548 <sys_arch_reboot+0x24>)
   14534:	68ca      	ldr	r2, [r1, #12]
   14536:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1453a:	4b04      	ldr	r3, [pc, #16]	; (1454c <sys_arch_reboot+0x28>)
   1453c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1453e:	60cb      	str	r3, [r1, #12]
   14540:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14544:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14546:	e7fd      	b.n	14544 <sys_arch_reboot+0x20>
   14548:	e000ed00 	.word	0xe000ed00
   1454c:	05fa0004 	.word	0x05fa0004

00014550 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14550:	b130      	cbz	r0, 14560 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   14552:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14554:	0180      	lsls	r0, r0, #6
   14556:	4b03      	ldr	r3, [pc, #12]	; (14564 <arch_busy_wait+0x14>)
   14558:	f043 0301 	orr.w	r3, r3, #1
   1455c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   1455e:	bd08      	pop	{r3, pc}
   14560:	4770      	bx	lr
   14562:	bf00      	nop
   14564:	000283a0 	.word	0x000283a0

00014568 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
   14568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1456c:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
   14570:	f013 0f01 	tst.w	r3, #1
   14574:	d007      	beq.n	14586 <board_nrf52840dongle_nrf52840_init+0x1e>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
   14576:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1457a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   1457e:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
   14582:	2b07      	cmp	r3, #7
   14584:	d001      	beq.n	1458a <board_nrf52840dongle_nrf52840_init+0x22>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
   14586:	2000      	movs	r0, #0
   14588:	4770      	bx	lr
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   1458a:	4b14      	ldr	r3, [pc, #80]	; (145dc <board_nrf52840dongle_nrf52840_init+0x74>)
   1458c:	2201      	movs	r2, #1
   1458e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   14592:	4b12      	ldr	r3, [pc, #72]	; (145dc <board_nrf52840dongle_nrf52840_init+0x74>)
   14594:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   14598:	2b00      	cmp	r3, #0
   1459a:	d0fa      	beq.n	14592 <board_nrf52840dongle_nrf52840_init+0x2a>
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
   1459c:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   145a0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   145a4:	f023 0307 	bic.w	r3, r3, #7
   145a8:	f043 0304 	orr.w	r3, r3, #4
		NRF_UICR->REGOUT0 =
   145ac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   145b0:	4b0a      	ldr	r3, [pc, #40]	; (145dc <board_nrf52840dongle_nrf52840_init+0x74>)
   145b2:	2200      	movs	r2, #0
   145b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   145b8:	4b08      	ldr	r3, [pc, #32]	; (145dc <board_nrf52840dongle_nrf52840_init+0x74>)
   145ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   145be:	2b00      	cmp	r3, #0
   145c0:	d0fa      	beq.n	145b8 <board_nrf52840dongle_nrf52840_init+0x50>
   145c2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   145c6:	4906      	ldr	r1, [pc, #24]	; (145e0 <board_nrf52840dongle_nrf52840_init+0x78>)
   145c8:	68ca      	ldr	r2, [r1, #12]
   145ca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   145ce:	4b05      	ldr	r3, [pc, #20]	; (145e4 <board_nrf52840dongle_nrf52840_init+0x7c>)
   145d0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   145d2:	60cb      	str	r3, [r1, #12]
   145d4:	f3bf 8f4f 	dsb	sy
    __NOP();
   145d8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   145da:	e7fd      	b.n	145d8 <board_nrf52840dongle_nrf52840_init+0x70>
   145dc:	4001e000 	.word	0x4001e000
   145e0:	e000ed00 	.word	0xe000ed00
   145e4:	05fa0004 	.word	0x05fa0004

000145e8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   145e8:	b570      	push	{r4, r5, r6, lr}
   145ea:	4605      	mov	r5, r0
   145ec:	460c      	mov	r4, r1
	switch (src->type) {
   145ee:	7803      	ldrb	r3, [r0, #0]
   145f0:	2b01      	cmp	r3, #1
   145f2:	d010      	beq.n	14616 <uuid_to_uuid128+0x2e>
   145f4:	2b02      	cmp	r3, #2
   145f6:	d020      	beq.n	1463a <uuid_to_uuid128+0x52>
   145f8:	b103      	cbz	r3, 145fc <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   145fa:	bd70      	pop	{r4, r5, r6, pc}
		*dst = uuid128_base;
   145fc:	4e12      	ldr	r6, [pc, #72]	; (14648 <uuid_to_uuid128+0x60>)
   145fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14600:	6020      	str	r0, [r4, #0]
   14602:	6061      	str	r1, [r4, #4]
   14604:	60a2      	str	r2, [r4, #8]
   14606:	60e3      	str	r3, [r4, #12]
   14608:	7833      	ldrb	r3, [r6, #0]
   1460a:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   1460c:	886b      	ldrh	r3, [r5, #2]
	dst[0] = val;
   1460e:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   14610:	0a1b      	lsrs	r3, r3, #8
   14612:	73a3      	strb	r3, [r4, #14]
}
   14614:	e7f1      	b.n	145fa <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   14616:	4e0c      	ldr	r6, [pc, #48]	; (14648 <uuid_to_uuid128+0x60>)
   14618:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1461a:	6020      	str	r0, [r4, #0]
   1461c:	6061      	str	r1, [r4, #4]
   1461e:	60a2      	str	r2, [r4, #8]
   14620:	60e3      	str	r3, [r4, #12]
   14622:	7833      	ldrb	r3, [r6, #0]
   14624:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   14626:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
   14628:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   1462a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1462e:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   14630:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   14632:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
   14634:	0e1b      	lsrs	r3, r3, #24
   14636:	7423      	strb	r3, [r4, #16]
}
   14638:	e7df      	b.n	145fa <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   1463a:	2211      	movs	r2, #17
   1463c:	4601      	mov	r1, r0
   1463e:	4620      	mov	r0, r4
   14640:	f00e f9f5 	bl	22a2e <memcpy>
		return;
   14644:	e7d9      	b.n	145fa <uuid_to_uuid128+0x12>
   14646:	bf00      	nop
   14648:	000288a0 	.word	0x000288a0

0001464c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   1464c:	b538      	push	{r3, r4, r5, lr}
   1464e:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   14650:	4805      	ldr	r0, [pc, #20]	; (14668 <bt_buf_get_rx+0x1c>)
   14652:	f011 fb3c 	bl	25cce <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   14656:	4605      	mov	r5, r0
   14658:	b120      	cbz	r0, 14664 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   1465a:	2100      	movs	r1, #0
   1465c:	3008      	adds	r0, #8
   1465e:	f011 fb5e 	bl	25d1e <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14662:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   14664:	4628      	mov	r0, r5
   14666:	bd38      	pop	{r3, r4, r5, pc}
   14668:	20000990 	.word	0x20000990

0001466c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   1466c:	b510      	push	{r4, lr}
   1466e:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   14670:	4b0a      	ldr	r3, [pc, #40]	; (1469c <bt_buf_get_cmd_complete+0x30>)
   14672:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   14676:	b158      	cbz	r0, 14690 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   14678:	f011 fb88 	bl	25d8c <net_buf_ref>
   1467c:	4604      	mov	r4, r0
   1467e:	2301      	movs	r3, #1
   14680:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   14682:	2100      	movs	r1, #0
   14684:	8181      	strh	r1, [r0, #12]
   14686:	3008      	adds	r0, #8
   14688:	f011 fb49 	bl	25d1e <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1468c:	4620      	mov	r0, r4
   1468e:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14690:	460b      	mov	r3, r1
   14692:	2001      	movs	r0, #1
   14694:	f7ff ffda 	bl	1464c <bt_buf_get_rx>
   14698:	4604      	mov	r4, r0
   1469a:	e7f7      	b.n	1468c <bt_buf_get_cmd_complete+0x20>
   1469c:	200002a0 	.word	0x200002a0

000146a0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   146a0:	b510      	push	{r4, lr}
	switch (evt) {
   146a2:	280f      	cmp	r0, #15
   146a4:	d90d      	bls.n	146c2 <bt_buf_get_evt+0x22>
   146a6:	2813      	cmp	r0, #19
   146a8:	d10d      	bne.n	146c6 <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   146aa:	4814      	ldr	r0, [pc, #80]	; (146fc <bt_buf_get_evt+0x5c>)
   146ac:	f011 fb0f 	bl	25cce <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   146b0:	4604      	mov	r4, r0
   146b2:	b198      	cbz	r0, 146dc <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   146b4:	2100      	movs	r1, #0
   146b6:	3008      	adds	r0, #8
   146b8:	f011 fb31 	bl	25d1e <net_buf_simple_reserve>
   146bc:	2301      	movs	r3, #1
   146be:	7523      	strb	r3, [r4, #20]
}
   146c0:	e00c      	b.n	146dc <bt_buf_get_evt+0x3c>
	switch (evt) {
   146c2:	280e      	cmp	r0, #14
   146c4:	d205      	bcs.n	146d2 <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   146c6:	b959      	cbnz	r1, 146e0 <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   146c8:	2001      	movs	r0, #1
   146ca:	f7ff ffbf 	bl	1464c <bt_buf_get_rx>
   146ce:	4604      	mov	r4, r0
   146d0:	e004      	b.n	146dc <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   146d2:	4610      	mov	r0, r2
   146d4:	4619      	mov	r1, r3
   146d6:	f7ff ffc9 	bl	1466c <bt_buf_get_cmd_complete>
   146da:	4604      	mov	r4, r0
	}
}
   146dc:	4620      	mov	r0, r4
   146de:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   146e0:	4807      	ldr	r0, [pc, #28]	; (14700 <bt_buf_get_evt+0x60>)
   146e2:	f011 faf4 	bl	25cce <net_buf_alloc_fixed>
			if (buf) {
   146e6:	4604      	mov	r4, r0
   146e8:	2800      	cmp	r0, #0
   146ea:	d0f7      	beq.n	146dc <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   146ec:	2100      	movs	r1, #0
   146ee:	3008      	adds	r0, #8
   146f0:	f011 fb15 	bl	25d1e <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   146f4:	2301      	movs	r3, #1
   146f6:	7523      	strb	r3, [r4, #20]
			return buf;
   146f8:	e7f0      	b.n	146dc <bt_buf_get_evt+0x3c>
   146fa:	bf00      	nop
   146fc:	200009b8 	.word	0x200009b8
   14700:	20000918 	.word	0x20000918

00014704 <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   14704:	2300      	movs	r3, #0
   14706:	e000      	b.n	1470a <conn_handle_disconnected+0x6>
   14708:	3301      	adds	r3, #1
   1470a:	2b03      	cmp	r3, #3
   1470c:	dc0a      	bgt.n	14724 <conn_handle_disconnected+0x20>
		if (!disconnected_handles[i]) {
   1470e:	4a06      	ldr	r2, [pc, #24]	; (14728 <conn_handle_disconnected+0x24>)
   14710:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   14714:	2a00      	cmp	r2, #0
   14716:	d1f7      	bne.n	14708 <conn_handle_disconnected+0x4>
			/* Use invalid connection handle bits so that connection
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   14718:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   1471c:	4902      	ldr	r1, [pc, #8]	; (14728 <conn_handle_disconnected+0x24>)
   1471e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   14722:	e7f1      	b.n	14708 <conn_handle_disconnected+0x4>
		}
	}
}
   14724:	4770      	bx	lr
   14726:	bf00      	nop
   14728:	200031cc 	.word	0x200031cc

0001472c <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   1472c:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   14730:	2300      	movs	r3, #0
   14732:	2b03      	cmp	r3, #3
   14734:	dc0c      	bgt.n	14750 <conn_handle_is_disconnected+0x24>
		if (disconnected_handles[i] == handle) {
   14736:	4a07      	ldr	r2, [pc, #28]	; (14754 <conn_handle_is_disconnected+0x28>)
   14738:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   1473c:	4282      	cmp	r2, r0
   1473e:	d001      	beq.n	14744 <conn_handle_is_disconnected+0x18>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   14740:	3301      	adds	r3, #1
   14742:	e7f6      	b.n	14732 <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   14744:	4a03      	ldr	r2, [pc, #12]	; (14754 <conn_handle_is_disconnected+0x28>)
   14746:	2100      	movs	r1, #0
   14748:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   1474c:	2001      	movs	r0, #1
   1474e:	4770      	bx	lr
		}
	}

	return false;
   14750:	2000      	movs	r0, #0
}
   14752:	4770      	bx	lr
   14754:	200031cc 	.word	0x200031cc

00014758 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   14758:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   1475a:	7851      	ldrb	r1, [r2, #1]
   1475c:	4b08      	ldr	r3, [pc, #32]	; (14780 <read_local_ver_complete+0x28>)
   1475e:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   14762:	8851      	ldrh	r1, [r2, #2]
   14764:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   14768:	7911      	ldrb	r1, [r2, #4]
   1476a:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1476e:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   14772:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   14776:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   1477a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   1477e:	4770      	bx	lr
   14780:	200002a0 	.word	0x200002a0

00014784 <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   14784:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   14786:	7a19      	ldrb	r1, [r3, #8]
   14788:	79da      	ldrb	r2, [r3, #7]
   1478a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   1478e:	7998      	ldrb	r0, [r3, #6]
   14790:	795a      	ldrb	r2, [r3, #5]
   14792:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   14796:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   1479a:	7918      	ldrb	r0, [r3, #4]
   1479c:	78d9      	ldrb	r1, [r3, #3]
   1479e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   147a2:	7898      	ldrb	r0, [r3, #2]
   147a4:	785b      	ldrb	r3, [r3, #1]
   147a6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   147aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   147ae:	4903      	ldr	r1, [pc, #12]	; (147bc <le_read_supp_states_complete+0x38>)
   147b0:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
   147b4:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
   147b8:	4770      	bx	lr
   147ba:	bf00      	nop
   147bc:	200002a0 	.word	0x200002a0

000147c0 <hci_reset_complete>:
{
   147c0:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
   147c2:	6883      	ldr	r3, [r0, #8]
   147c4:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   147c6:	b9a3      	cbnz	r3, 147f2 <hci_reset_complete+0x32>
		bt_scan_reset();
   147c8:	f001 f9d8 	bl	15b7c <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   147cc:	f3bf 8f5b 	dmb	ish
   147d0:	4b08      	ldr	r3, [pc, #32]	; (147f4 <hci_reset_complete+0x34>)
   147d2:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   147d6:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   147da:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   147de:	f3bf 8f5b 	dmb	ish
   147e2:	e853 1f00 	ldrex	r1, [r3]
   147e6:	e843 2000 	strex	r0, r2, [r3]
   147ea:	2800      	cmp	r0, #0
   147ec:	d1f9      	bne.n	147e2 <hci_reset_complete+0x22>
   147ee:	f3bf 8f5b 	dmb	ish
}
   147f2:	bd08      	pop	{r3, pc}
   147f4:	200002a0 	.word	0x200002a0

000147f8 <read_local_features_complete>:
{
   147f8:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   147fa:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   147fc:	2208      	movs	r2, #8
   147fe:	3101      	adds	r1, #1
   14800:	4801      	ldr	r0, [pc, #4]	; (14808 <read_local_features_complete+0x10>)
   14802:	f00e f914 	bl	22a2e <memcpy>
}
   14806:	bd08      	pop	{r3, pc}
   14808:	20000310 	.word	0x20000310

0001480c <read_supported_commands_complete>:
{
   1480c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   1480e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   14810:	2240      	movs	r2, #64	; 0x40
   14812:	3101      	adds	r1, #1
   14814:	4801      	ldr	r0, [pc, #4]	; (1481c <read_supported_commands_complete+0x10>)
   14816:	f00e f90a 	bl	22a2e <memcpy>
}
   1481a:	bd08      	pop	{r3, pc}
   1481c:	20000318 	.word	0x20000318

00014820 <read_le_features_complete>:
{
   14820:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   14822:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   14824:	2208      	movs	r2, #8
   14826:	3101      	adds	r1, #1
   14828:	4801      	ldr	r0, [pc, #4]	; (14830 <read_le_features_complete+0x10>)
   1482a:	f00e f900 	bl	22a2e <memcpy>
}
   1482e:	bd08      	pop	{r3, pc}
   14830:	20000370 	.word	0x20000370

00014834 <le_read_buffer_size_complete>:
{
   14834:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   14836:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   14838:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   1483c:	b299      	uxth	r1, r3
   1483e:	4806      	ldr	r0, [pc, #24]	; (14858 <le_read_buffer_size_complete+0x24>)
   14840:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   14844:	b901      	cbnz	r1, 14848 <le_read_buffer_size_complete+0x14>
}
   14846:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   14848:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1484a:	460a      	mov	r2, r1
   1484c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   14850:	f012 ff77 	bl	27742 <z_impl_k_sem_init>
   14854:	e7f7      	b.n	14846 <le_read_buffer_size_complete+0x12>
   14856:	bf00      	nop
   14858:	200002a0 	.word	0x200002a0

0001485c <read_buffer_size_complete>:
{
   1485c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   1485e:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   14860:	4b08      	ldr	r3, [pc, #32]	; (14884 <read_buffer_size_complete+0x28>)
   14862:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   14866:	b103      	cbz	r3, 1486a <read_buffer_size_complete+0xe>
}
   14868:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1486a:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   1486e:	4805      	ldr	r0, [pc, #20]	; (14884 <read_buffer_size_complete+0x28>)
   14870:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   14874:	8891      	ldrh	r1, [r2, #4]
   14876:	460a      	mov	r2, r1
   14878:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1487c:	f012 ff61 	bl	27742 <z_impl_k_sem_init>
   14880:	e7f2      	b.n	14868 <read_buffer_size_complete+0xc>
   14882:	bf00      	nop
   14884:	200002a0 	.word	0x200002a0

00014888 <hci_cmd_done>:
{
   14888:	b570      	push	{r4, r5, r6, lr}
   1488a:	4606      	mov	r6, r0
   1488c:	460d      	mov	r5, r1
   1488e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14890:	7990      	ldrb	r0, [r2, #6]
   14892:	f003 fb57 	bl	17f44 <net_buf_pool_get>
   14896:	4b39      	ldr	r3, [pc, #228]	; (1497c <hci_cmd_done+0xf4>)
   14898:	4283      	cmp	r3, r0
   1489a:	d000      	beq.n	1489e <hci_cmd_done+0x16>
}
   1489c:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   1489e:	4620      	mov	r0, r4
   148a0:	f003 fb58 	bl	17f54 <net_buf_id>
   148a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   148a8:	4b35      	ldr	r3, [pc, #212]	; (14980 <hci_cmd_done+0xf8>)
   148aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   148ae:	8843      	ldrh	r3, [r0, #2]
   148b0:	42b3      	cmp	r3, r6
   148b2:	d1f3      	bne.n	1489c <hci_cmd_done+0x14>
	if (bt_dev.sent_cmd) {
   148b4:	4b33      	ldr	r3, [pc, #204]	; (14984 <hci_cmd_done+0xfc>)
   148b6:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   148ba:	b128      	cbz	r0, 148c8 <hci_cmd_done+0x40>
		net_buf_unref(bt_dev.sent_cmd);
   148bc:	f011 fa40 	bl	25d40 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   148c0:	4b30      	ldr	r3, [pc, #192]	; (14984 <hci_cmd_done+0xfc>)
   148c2:	2200      	movs	r2, #0
   148c4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   148c8:	4620      	mov	r0, r4
   148ca:	f003 fb43 	bl	17f54 <net_buf_id>
   148ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   148d2:	4b2b      	ldr	r3, [pc, #172]	; (14980 <hci_cmd_done+0xf8>)
   148d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   148d8:	6843      	ldr	r3, [r0, #4]
   148da:	b103      	cbz	r3, 148de <hci_cmd_done+0x56>
   148dc:	b1ed      	cbz	r5, 1491a <hci_cmd_done+0x92>
	if (cmd(buf)->sync) {
   148de:	4620      	mov	r0, r4
   148e0:	f003 fb38 	bl	17f54 <net_buf_id>
   148e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   148e8:	4b25      	ldr	r3, [pc, #148]	; (14980 <hci_cmd_done+0xf8>)
   148ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   148ee:	6883      	ldr	r3, [r0, #8]
   148f0:	2b00      	cmp	r3, #0
   148f2:	d0d3      	beq.n	1489c <hci_cmd_done+0x14>
		cmd(buf)->status = status;
   148f4:	4620      	mov	r0, r4
   148f6:	f003 fb2d 	bl	17f54 <net_buf_id>
   148fa:	4e21      	ldr	r6, [pc, #132]	; (14980 <hci_cmd_done+0xf8>)
   148fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14900:	f806 5020 	strb.w	r5, [r6, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   14904:	4620      	mov	r0, r4
   14906:	f003 fb25 	bl	17f54 <net_buf_id>
   1490a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1490e:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   14912:	68b0      	ldr	r0, [r6, #8]
	z_impl_k_sem_give(sem);
   14914:	f008 fcb6 	bl	1d284 <z_impl_k_sem_give>
}
   14918:	e7c0      	b.n	1489c <hci_cmd_done+0x14>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1491a:	4620      	mov	r0, r4
   1491c:	f003 fb1a 	bl	17f54 <net_buf_id>
   14920:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14924:	4b16      	ldr	r3, [pc, #88]	; (14980 <hci_cmd_done+0xf8>)
   14926:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1492a:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   1492c:	6819      	ldr	r1, [r3, #0]
   1492e:	685a      	ldr	r2, [r3, #4]
   14930:	7a18      	ldrb	r0, [r3, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14932:	f002 061f 	and.w	r6, r2, #31
   14936:	2301      	movs	r3, #1
   14938:	40b3      	lsls	r3, r6

	if (val) {
   1493a:	b170      	cbz	r0, 1495a <hci_cmd_done+0xd2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1493c:	0952      	lsrs	r2, r2, #5
   1493e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14942:	f3bf 8f5b 	dmb	ish
   14946:	e852 1f00 	ldrex	r1, [r2]
   1494a:	4319      	orrs	r1, r3
   1494c:	e842 1000 	strex	r0, r1, [r2]
   14950:	2800      	cmp	r0, #0
   14952:	d1f8      	bne.n	14946 <hci_cmd_done+0xbe>
   14954:	f3bf 8f5b 	dmb	ish
   14958:	e7c1      	b.n	148de <hci_cmd_done+0x56>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1495a:	0952      	lsrs	r2, r2, #5
   1495c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   14960:	43db      	mvns	r3, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14962:	f3bf 8f5b 	dmb	ish
   14966:	e852 1f00 	ldrex	r1, [r2]
   1496a:	4019      	ands	r1, r3
   1496c:	e842 1000 	strex	r0, r1, [r2]
   14970:	2800      	cmp	r0, #0
   14972:	d1f8      	bne.n	14966 <hci_cmd_done+0xde>
   14974:	f3bf 8f5b 	dmb	ish
	}
}
   14978:	e7b1      	b.n	148de <hci_cmd_done+0x56>
   1497a:	bf00      	nop
   1497c:	20000968 	.word	0x20000968
   14980:	200031b4 	.word	0x200031b4
   14984:	200002a0 	.word	0x200002a0

00014988 <hci_cmd_status>:
{
   14988:	b538      	push	{r3, r4, r5, lr}
   1498a:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1498c:	2104      	movs	r1, #4
   1498e:	3008      	adds	r0, #8
   14990:	f011 fa4a 	bl	25e28 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   14994:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   14996:	4622      	mov	r2, r4
   14998:	7801      	ldrb	r1, [r0, #0]
   1499a:	8840      	ldrh	r0, [r0, #2]
   1499c:	f7ff ff74 	bl	14888 <hci_cmd_done>
	if (ncmd) {
   149a0:	b905      	cbnz	r5, 149a4 <hci_cmd_status+0x1c>
}
   149a2:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   149a4:	4801      	ldr	r0, [pc, #4]	; (149ac <hci_cmd_status+0x24>)
   149a6:	f008 fc6d 	bl	1d284 <z_impl_k_sem_give>
   149aa:	e7fa      	b.n	149a2 <hci_cmd_status+0x1a>
   149ac:	200003b8 	.word	0x200003b8

000149b0 <hci_cmd_complete>:
{
   149b0:	b538      	push	{r3, r4, r5, lr}
   149b2:	4604      	mov	r4, r0
   149b4:	2103      	movs	r1, #3
   149b6:	3008      	adds	r0, #8
   149b8:	f011 fa36 	bl	25e28 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   149bc:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   149be:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   149c0:	4622      	mov	r2, r4
   149c2:	7819      	ldrb	r1, [r3, #0]
   149c4:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   149c8:	f7ff ff5e 	bl	14888 <hci_cmd_done>
	if (ncmd) {
   149cc:	b905      	cbnz	r5, 149d0 <hci_cmd_complete+0x20>
}
   149ce:	bd38      	pop	{r3, r4, r5, pc}
   149d0:	4801      	ldr	r0, [pc, #4]	; (149d8 <hci_cmd_complete+0x28>)
   149d2:	f008 fc57 	bl	1d284 <z_impl_k_sem_give>
   149d6:	e7fa      	b.n	149ce <hci_cmd_complete+0x1e>
   149d8:	200003b8 	.word	0x200003b8

000149dc <hci_event>:
{
   149dc:	b538      	push	{r3, r4, r5, lr}
   149de:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   149e0:	8983      	ldrh	r3, [r0, #12]
   149e2:	2b01      	cmp	r3, #1
   149e4:	d916      	bls.n	14a14 <hci_event+0x38>
   149e6:	2102      	movs	r1, #2
   149e8:	f104 0008 	add.w	r0, r4, #8
   149ec:	f011 fa1c 	bl	25e28 <net_buf_simple_pull_mem>
   149f0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   149f2:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   149f4:	3b05      	subs	r3, #5
   149f6:	2b15      	cmp	r3, #21
   149f8:	d81c      	bhi.n	14a34 <hci_event+0x58>
   149fa:	e8df f003 	tbb	[pc, r3]
   149fe:	1b19      	.short	0x1b19
   14a00:	1b1b1b1b 	.word	0x1b1b1b1b
   14a04:	351b1b1b 	.word	0x351b1b1b
   14a08:	1b1b1b35 	.word	0x1b1b1b35
   14a0c:	1b1b1b35 	.word	0x1b1b1b35
   14a10:	351b1b1b 	.word	0x351b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14a14:	f640 130d 	movw	r3, #2317	; 0x90d
   14a18:	4a1c      	ldr	r2, [pc, #112]	; (14a8c <hci_event+0xb0>)
   14a1a:	491d      	ldr	r1, [pc, #116]	; (14a90 <hci_event+0xb4>)
   14a1c:	481d      	ldr	r0, [pc, #116]	; (14a94 <hci_event+0xb8>)
   14a1e:	f00c fb6f 	bl	21100 <printk>
   14a22:	4040      	eors	r0, r0
   14a24:	f380 8811 	msr	BASEPRI, r0
   14a28:	f04f 0003 	mov.w	r0, #3
   14a2c:	df02      	svc	2
   14a2e:	e7da      	b.n	149e6 <hci_event+0xa>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14a30:	2303      	movs	r3, #3
   14a32:	e000      	b.n	14a36 <hci_event+0x5a>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   14a34:	2302      	movs	r3, #2
   14a36:	f013 0f02 	tst.w	r3, #2
   14a3a:	d017      	beq.n	14a6c <hci_event+0x90>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14a3c:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   14a3e:	2300      	movs	r3, #0
   14a40:	2b03      	cmp	r3, #3
   14a42:	d80d      	bhi.n	14a60 <hci_event+0x84>
		const struct event_handler *handler = &handlers[i];
   14a44:	4a14      	ldr	r2, [pc, #80]	; (14a98 <hci_event+0xbc>)
   14a46:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
   14a4a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   14a4e:	4282      	cmp	r2, r0
   14a50:	d11a      	bne.n	14a88 <hci_event+0xac>
		if (buf->len < handler->min_len) {
   14a52:	89a3      	ldrh	r3, [r4, #12]
   14a54:	784a      	ldrb	r2, [r1, #1]
   14a56:	429a      	cmp	r2, r3
   14a58:	d802      	bhi.n	14a60 <hci_event+0x84>
		handler->handler(buf);
   14a5a:	684b      	ldr	r3, [r1, #4]
   14a5c:	4620      	mov	r0, r4
   14a5e:	4798      	blx	r3
	net_buf_unref(buf);
   14a60:	4620      	mov	r0, r4
   14a62:	f011 f96d 	bl	25d40 <net_buf_unref>
}
   14a66:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   14a68:	2301      	movs	r3, #1
   14a6a:	e7e4      	b.n	14a36 <hci_event+0x5a>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14a6c:	f640 1311 	movw	r3, #2321	; 0x911
   14a70:	4a06      	ldr	r2, [pc, #24]	; (14a8c <hci_event+0xb0>)
   14a72:	490a      	ldr	r1, [pc, #40]	; (14a9c <hci_event+0xc0>)
   14a74:	4807      	ldr	r0, [pc, #28]	; (14a94 <hci_event+0xb8>)
   14a76:	f00c fb43 	bl	21100 <printk>
   14a7a:	4040      	eors	r0, r0
   14a7c:	f380 8811 	msr	BASEPRI, r0
   14a80:	f04f 0003 	mov.w	r0, #3
   14a84:	df02      	svc	2
   14a86:	e7d9      	b.n	14a3c <hci_event+0x60>
	for (i = 0; i < num_handlers; i++) {
   14a88:	3301      	adds	r3, #1
   14a8a:	e7d9      	b.n	14a40 <hci_event+0x64>
   14a8c:	000288e4 	.word	0x000288e4
   14a90:	00028918 	.word	0x00028918
   14a94:	00028934 	.word	0x00028934
   14a98:	00028a38 	.word	0x00028a38
   14a9c:	00028954 	.word	0x00028954

00014aa0 <hci_le_meta_event>:
{
   14aa0:	b510      	push	{r4, lr}
   14aa2:	4604      	mov	r4, r0
   14aa4:	2101      	movs	r1, #1
   14aa6:	3008      	adds	r0, #8
   14aa8:	f011 f9be 	bl	25e28 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14aac:	7800      	ldrb	r0, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   14aae:	2300      	movs	r3, #0
   14ab0:	2b07      	cmp	r3, #7
   14ab2:	d80d      	bhi.n	14ad0 <hci_le_meta_event+0x30>
		const struct event_handler *handler = &handlers[i];
   14ab4:	4a08      	ldr	r2, [pc, #32]	; (14ad8 <hci_le_meta_event+0x38>)
   14ab6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
   14aba:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   14abe:	4282      	cmp	r2, r0
   14ac0:	d107      	bne.n	14ad2 <hci_le_meta_event+0x32>
		if (buf->len < handler->min_len) {
   14ac2:	89a3      	ldrh	r3, [r4, #12]
   14ac4:	784a      	ldrb	r2, [r1, #1]
   14ac6:	429a      	cmp	r2, r3
   14ac8:	d802      	bhi.n	14ad0 <hci_le_meta_event+0x30>
		handler->handler(buf);
   14aca:	684b      	ldr	r3, [r1, #4]
   14acc:	4620      	mov	r0, r4
   14ace:	4798      	blx	r3
}
   14ad0:	bd10      	pop	{r4, pc}
	for (i = 0; i < num_handlers; i++) {
   14ad2:	3301      	adds	r3, #1
   14ad4:	e7ec      	b.n	14ab0 <hci_le_meta_event+0x10>
   14ad6:	bf00      	nop
   14ad8:	000289e8 	.word	0x000289e8

00014adc <hci_acl>:
{
   14adc:	b570      	push	{r4, r5, r6, lr}
   14ade:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14ae0:	8983      	ldrh	r3, [r0, #12]
   14ae2:	2b03      	cmp	r3, #3
   14ae4:	d913      	bls.n	14b0e <hci_acl+0x32>
   14ae6:	2104      	movs	r1, #4
   14ae8:	f104 0008 	add.w	r0, r4, #8
   14aec:	f011 f99c 	bl	25e28 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   14af0:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   14af2:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   14af4:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   14af6:	f3c0 000b 	ubfx	r0, r0, #0, #12
   14afa:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14afc:	22ff      	movs	r2, #255	; 0xff
   14afe:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   14b00:	89a2      	ldrh	r2, [r4, #12]
   14b02:	429a      	cmp	r2, r3
   14b04:	d011      	beq.n	14b2a <hci_acl+0x4e>
		net_buf_unref(buf);
   14b06:	4620      	mov	r0, r4
   14b08:	f011 f91a 	bl	25d40 <net_buf_unref>
}
   14b0c:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14b0e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
   14b12:	4a10      	ldr	r2, [pc, #64]	; (14b54 <hci_acl+0x78>)
   14b14:	4910      	ldr	r1, [pc, #64]	; (14b58 <hci_acl+0x7c>)
   14b16:	4811      	ldr	r0, [pc, #68]	; (14b5c <hci_acl+0x80>)
   14b18:	f00c faf2 	bl	21100 <printk>
   14b1c:	4040      	eors	r0, r0
   14b1e:	f380 8811 	msr	BASEPRI, r0
   14b22:	f04f 0003 	mov.w	r0, #3
   14b26:	df02      	svc	2
   14b28:	e7dd      	b.n	14ae6 <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   14b2a:	f001 fb65 	bl	161f8 <bt_conn_lookup_handle>
	if (!conn) {
   14b2e:	4605      	mov	r5, r0
   14b30:	b158      	cbz	r0, 14b4a <hci_acl+0x6e>
	acl(buf)->index = bt_conn_index(conn);
   14b32:	f001 fc1b 	bl	1636c <bt_conn_index>
   14b36:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   14b38:	4632      	mov	r2, r6
   14b3a:	4621      	mov	r1, r4
   14b3c:	4628      	mov	r0, r5
   14b3e:	f00e fdf3 	bl	23728 <bt_conn_recv>
	bt_conn_unref(conn);
   14b42:	4628      	mov	r0, r5
   14b44:	f00e fe4c 	bl	237e0 <bt_conn_unref>
   14b48:	e7e0      	b.n	14b0c <hci_acl+0x30>
		net_buf_unref(buf);
   14b4a:	4620      	mov	r0, r4
   14b4c:	f011 f8f8 	bl	25d40 <net_buf_unref>
		return;
   14b50:	e7dc      	b.n	14b0c <hci_acl+0x30>
   14b52:	bf00      	nop
   14b54:	000288e4 	.word	0x000288e4
   14b58:	00028918 	.word	0x00028918
   14b5c:	00028934 	.word	0x00028934

00014b60 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   14b60:	b508      	push	{r3, lr}
   14b62:	e003      	b.n	14b6c <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   14b64:	f7ff ff3a 	bl	149dc <hci_event>
	z_impl_k_yield();
   14b68:	f009 f8aa 	bl	1dcc0 <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14b6c:	f04f 32ff 	mov.w	r2, #4294967295
   14b70:	f04f 33ff 	mov.w	r3, #4294967295
   14b74:	4806      	ldr	r0, [pc, #24]	; (14b90 <hci_rx_thread+0x30>)
   14b76:	f011 f8b1 	bl	25cdc <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14b7a:	7d03      	ldrb	r3, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   14b7c:	2b01      	cmp	r3, #1
   14b7e:	d0f1      	beq.n	14b64 <hci_rx_thread+0x4>
   14b80:	2b03      	cmp	r3, #3
   14b82:	d102      	bne.n	14b8a <hci_rx_thread+0x2a>
			hci_acl(buf);
   14b84:	f7ff ffaa 	bl	14adc <hci_acl>
			break;
   14b88:	e7ee      	b.n	14b68 <hci_rx_thread+0x8>
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   14b8a:	f011 f8d9 	bl	25d40 <net_buf_unref>
			break;
   14b8e:	e7eb      	b.n	14b68 <hci_rx_thread+0x8>
   14b90:	200003d4 	.word	0x200003d4

00014b94 <bt_hci_cmd_state_set_init>:
{
   14b94:	b510      	push	{r4, lr}
   14b96:	460c      	mov	r4, r1
	state->target = target;
   14b98:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   14b9a:	604b      	str	r3, [r1, #4]
	state->val = val;
   14b9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14ba0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   14ba2:	f003 f9d7 	bl	17f54 <net_buf_id>
   14ba6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14baa:	4b02      	ldr	r3, [pc, #8]	; (14bb4 <bt_hci_cmd_state_set_init+0x20>)
   14bac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14bb0:	6044      	str	r4, [r0, #4]
}
   14bb2:	bd10      	pop	{r4, pc}
   14bb4:	200031b4 	.word	0x200031b4

00014bb8 <bt_hci_cmd_create>:
{
   14bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14bbc:	4682      	mov	sl, r0
   14bbe:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   14bc0:	f04f 32ff 	mov.w	r2, #4294967295
   14bc4:	f04f 33ff 	mov.w	r3, #4294967295
   14bc8:	4817      	ldr	r0, [pc, #92]	; (14c28 <bt_hci_cmd_create+0x70>)
   14bca:	f011 f880 	bl	25cce <net_buf_alloc_fixed>
   14bce:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   14bd0:	f100 0808 	add.w	r8, r0, #8
   14bd4:	2100      	movs	r1, #0
   14bd6:	4640      	mov	r0, r8
   14bd8:	f011 f8a1 	bl	25d1e <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14bdc:	2700      	movs	r7, #0
   14bde:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   14be0:	4620      	mov	r0, r4
   14be2:	f003 f9b7 	bl	17f54 <net_buf_id>
   14be6:	4d11      	ldr	r5, [pc, #68]	; (14c2c <bt_hci_cmd_create+0x74>)
   14be8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14bec:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   14bf0:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   14bf4:	4620      	mov	r0, r4
   14bf6:	f003 f9ad 	bl	17f54 <net_buf_id>
   14bfa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14bfe:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   14c02:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   14c04:	4620      	mov	r0, r4
   14c06:	f003 f9a5 	bl	17f54 <net_buf_id>
   14c0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14c0e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   14c12:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   14c14:	2103      	movs	r1, #3
   14c16:	4640      	mov	r0, r8
   14c18:	f011 f8dc 	bl	25dd4 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   14c1c:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   14c20:	7086      	strb	r6, [r0, #2]
}
   14c22:	4620      	mov	r0, r4
   14c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14c28:	20000968 	.word	0x20000968
   14c2c:	200031b4 	.word	0x200031b4

00014c30 <bt_hci_cmd_send_sync>:
{
   14c30:	b570      	push	{r4, r5, r6, lr}
   14c32:	b086      	sub	sp, #24
   14c34:	4615      	mov	r5, r2
	if (!buf) {
   14c36:	460c      	mov	r4, r1
   14c38:	b359      	cbz	r1, 14c92 <bt_hci_cmd_send_sync+0x62>
	return z_impl_k_sem_init(sem, initial_count, limit);
   14c3a:	2201      	movs	r2, #1
   14c3c:	2100      	movs	r1, #0
   14c3e:	4668      	mov	r0, sp
   14c40:	f012 fd7f 	bl	27742 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   14c44:	4620      	mov	r0, r4
   14c46:	f003 f985 	bl	17f54 <net_buf_id>
   14c4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14c4e:	4b26      	ldr	r3, [pc, #152]	; (14ce8 <bt_hci_cmd_send_sync+0xb8>)
   14c50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14c54:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   14c58:	4620      	mov	r0, r4
   14c5a:	f011 f897 	bl	25d8c <net_buf_ref>
   14c5e:	4601      	mov	r1, r0
   14c60:	4822      	ldr	r0, [pc, #136]	; (14cec <bt_hci_cmd_send_sync+0xbc>)
   14c62:	f011 f860 	bl	25d26 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   14c66:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   14c6a:	2300      	movs	r3, #0
   14c6c:	4668      	mov	r0, sp
   14c6e:	f008 fb31 	bl	1d2d4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14c72:	4606      	mov	r6, r0
   14c74:	b9a8      	cbnz	r0, 14ca2 <bt_hci_cmd_send_sync+0x72>
	status = cmd(buf)->status;
   14c76:	4620      	mov	r0, r4
   14c78:	f003 f96c 	bl	17f54 <net_buf_id>
   14c7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14c80:	4b19      	ldr	r3, [pc, #100]	; (14ce8 <bt_hci_cmd_send_sync+0xb8>)
   14c82:	f813 6020 	ldrb.w	r6, [r3, r0, lsl #2]
	if (status) {
   14c86:	b9f6      	cbnz	r6, 14cc6 <bt_hci_cmd_send_sync+0x96>
	if (rsp) {
   14c88:	b345      	cbz	r5, 14cdc <bt_hci_cmd_send_sync+0xac>
		*rsp = buf;
   14c8a:	602c      	str	r4, [r5, #0]
	return 0;
   14c8c:	2000      	movs	r0, #0
}
   14c8e:	b006      	add	sp, #24
   14c90:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   14c92:	f7ff ff91 	bl	14bb8 <bt_hci_cmd_create>
		if (!buf) {
   14c96:	4604      	mov	r4, r0
   14c98:	2800      	cmp	r0, #0
   14c9a:	d1ce      	bne.n	14c3a <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
   14c9c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14ca0:	e7f5      	b.n	14c8e <bt_hci_cmd_send_sync+0x5e>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14ca2:	f44f 7399 	mov.w	r3, #306	; 0x132
   14ca6:	4a12      	ldr	r2, [pc, #72]	; (14cf0 <bt_hci_cmd_send_sync+0xc0>)
   14ca8:	4912      	ldr	r1, [pc, #72]	; (14cf4 <bt_hci_cmd_send_sync+0xc4>)
   14caa:	4813      	ldr	r0, [pc, #76]	; (14cf8 <bt_hci_cmd_send_sync+0xc8>)
   14cac:	f00c fa28 	bl	21100 <printk>
   14cb0:	4631      	mov	r1, r6
   14cb2:	4812      	ldr	r0, [pc, #72]	; (14cfc <bt_hci_cmd_send_sync+0xcc>)
   14cb4:	f00c fa24 	bl	21100 <printk>
   14cb8:	4040      	eors	r0, r0
   14cba:	f380 8811 	msr	BASEPRI, r0
   14cbe:	f04f 0003 	mov.w	r0, #3
   14cc2:	df02      	svc	2
   14cc4:	e7d7      	b.n	14c76 <bt_hci_cmd_send_sync+0x46>
		net_buf_unref(buf);
   14cc6:	4620      	mov	r0, r4
   14cc8:	f011 f83a 	bl	25d40 <net_buf_unref>
		switch (status) {
   14ccc:	2e09      	cmp	r6, #9
   14cce:	d002      	beq.n	14cd6 <bt_hci_cmd_send_sync+0xa6>
			return -EIO;
   14cd0:	f06f 0004 	mvn.w	r0, #4
   14cd4:	e7db      	b.n	14c8e <bt_hci_cmd_send_sync+0x5e>
			return -ECONNREFUSED;
   14cd6:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   14cda:	e7d8      	b.n	14c8e <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
   14cdc:	4620      	mov	r0, r4
   14cde:	f011 f82f 	bl	25d40 <net_buf_unref>
	return 0;
   14ce2:	2000      	movs	r0, #0
   14ce4:	e7d3      	b.n	14c8e <bt_hci_cmd_send_sync+0x5e>
   14ce6:	bf00      	nop
   14ce8:	200031b4 	.word	0x200031b4
   14cec:	200003ec 	.word	0x200003ec
   14cf0:	000288e4 	.word	0x000288e4
   14cf4:	00028984 	.word	0x00028984
   14cf8:	00028934 	.word	0x00028934
   14cfc:	00028990 	.word	0x00028990

00014d00 <common_init>:
{
   14d00:	b510      	push	{r4, lr}
   14d02:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   14d04:	4b22      	ldr	r3, [pc, #136]	; (14d90 <common_init+0x90>)
   14d06:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   14d0a:	689b      	ldr	r3, [r3, #8]
   14d0c:	f013 0f01 	tst.w	r3, #1
   14d10:	d10d      	bne.n	14d2e <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   14d12:	aa01      	add	r2, sp, #4
   14d14:	2100      	movs	r1, #0
   14d16:	f640 4003 	movw	r0, #3075	; 0xc03
   14d1a:	f7ff ff89 	bl	14c30 <bt_hci_cmd_send_sync>
		if (err) {
   14d1e:	4604      	mov	r4, r0
   14d20:	b968      	cbnz	r0, 14d3e <common_init+0x3e>
		hci_reset_complete(rsp);
   14d22:	9801      	ldr	r0, [sp, #4]
   14d24:	f7ff fd4c 	bl	147c0 <hci_reset_complete>
		net_buf_unref(rsp);
   14d28:	9801      	ldr	r0, [sp, #4]
   14d2a:	f011 f809 	bl	25d40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   14d2e:	aa01      	add	r2, sp, #4
   14d30:	2100      	movs	r1, #0
   14d32:	f241 0003 	movw	r0, #4099	; 0x1003
   14d36:	f7ff ff7b 	bl	14c30 <bt_hci_cmd_send_sync>
	if (err) {
   14d3a:	4604      	mov	r4, r0
   14d3c:	b110      	cbz	r0, 14d44 <common_init+0x44>
}
   14d3e:	4620      	mov	r0, r4
   14d40:	b002      	add	sp, #8
   14d42:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   14d44:	9801      	ldr	r0, [sp, #4]
   14d46:	f7ff fd57 	bl	147f8 <read_local_features_complete>
	net_buf_unref(rsp);
   14d4a:	9801      	ldr	r0, [sp, #4]
   14d4c:	f010 fff8 	bl	25d40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   14d50:	aa01      	add	r2, sp, #4
   14d52:	2100      	movs	r1, #0
   14d54:	f241 0001 	movw	r0, #4097	; 0x1001
   14d58:	f7ff ff6a 	bl	14c30 <bt_hci_cmd_send_sync>
	if (err) {
   14d5c:	4604      	mov	r4, r0
   14d5e:	2800      	cmp	r0, #0
   14d60:	d1ed      	bne.n	14d3e <common_init+0x3e>
	read_local_ver_complete(rsp);
   14d62:	9801      	ldr	r0, [sp, #4]
   14d64:	f7ff fcf8 	bl	14758 <read_local_ver_complete>
	net_buf_unref(rsp);
   14d68:	9801      	ldr	r0, [sp, #4]
   14d6a:	f010 ffe9 	bl	25d40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   14d6e:	aa01      	add	r2, sp, #4
   14d70:	2100      	movs	r1, #0
   14d72:	f241 0002 	movw	r0, #4098	; 0x1002
   14d76:	f7ff ff5b 	bl	14c30 <bt_hci_cmd_send_sync>
	if (err) {
   14d7a:	4604      	mov	r4, r0
   14d7c:	2800      	cmp	r0, #0
   14d7e:	d1de      	bne.n	14d3e <common_init+0x3e>
	read_supported_commands_complete(rsp);
   14d80:	9801      	ldr	r0, [sp, #4]
   14d82:	f7ff fd43 	bl	1480c <read_supported_commands_complete>
	net_buf_unref(rsp);
   14d86:	9801      	ldr	r0, [sp, #4]
   14d88:	f010 ffda 	bl	25d40 <net_buf_unref>
	return 0;
   14d8c:	e7d7      	b.n	14d3e <common_init+0x3e>
   14d8e:	bf00      	nop
   14d90:	200002a0 	.word	0x200002a0

00014d94 <le_set_event_mask>:
{
   14d94:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   14d96:	2108      	movs	r1, #8
   14d98:	f242 0001 	movw	r0, #8193	; 0x2001
   14d9c:	f7ff ff0c 	bl	14bb8 <bt_hci_cmd_create>
	if (!buf) {
   14da0:	b398      	cbz	r0, 14e0a <le_set_event_mask+0x76>
   14da2:	4604      	mov	r4, r0
   14da4:	2108      	movs	r1, #8
   14da6:	4408      	add	r0, r1
   14da8:	f011 f814 	bl	25dd4 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   14dac:	4b18      	ldr	r3, [pc, #96]	; (14e10 <le_set_event_mask+0x7c>)
   14dae:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
   14db2:	f011 0f02 	tst.w	r1, #2
   14db6:	d125      	bne.n	14e04 <le_set_event_mask+0x70>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   14db8:	220f      	movs	r2, #15
   14dba:	2300      	movs	r3, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   14dbc:	f011 0f20 	tst.w	r1, #32
   14dc0:	d001      	beq.n	14dc6 <le_set_event_mask+0x32>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   14dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   14dc6:	4912      	ldr	r1, [pc, #72]	; (14e10 <le_set_event_mask+0x7c>)
   14dc8:	f891 10d1 	ldrb.w	r1, [r1, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   14dcc:	f011 0f09 	tst.w	r1, #9
   14dd0:	d001      	beq.n	14dd6 <le_set_event_mask+0x42>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   14dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	dst[0] = val;
   14dd6:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   14dd8:	f3c2 2107 	ubfx	r1, r2, #8, #8
   14ddc:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   14dde:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   14de0:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   14de2:	0e12      	lsrs	r2, r2, #24
   14de4:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   14de6:	b29a      	uxth	r2, r3
	dst[0] = val;
   14de8:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   14dea:	0a12      	lsrs	r2, r2, #8
   14dec:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   14dee:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   14df0:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14df2:	0a13      	lsrs	r3, r2, #8
   14df4:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   14df6:	2200      	movs	r2, #0
   14df8:	4621      	mov	r1, r4
   14dfa:	f242 0001 	movw	r0, #8193	; 0x2001
   14dfe:	f7ff ff17 	bl	14c30 <bt_hci_cmd_send_sync>
}
   14e02:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   14e04:	222f      	movs	r2, #47	; 0x2f
   14e06:	2300      	movs	r3, #0
   14e08:	e7d8      	b.n	14dbc <le_set_event_mask+0x28>
		return -ENOBUFS;
   14e0a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14e0e:	e7f8      	b.n	14e02 <le_set_event_mask+0x6e>
   14e10:	200002a0 	.word	0x200002a0

00014e14 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
   14e14:	4b49      	ldr	r3, [pc, #292]	; (14f3c <le_init+0x128>)
   14e16:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   14e1a:	f013 0f40 	tst.w	r3, #64	; 0x40
   14e1e:	f000 8086 	beq.w	14f2e <le_init+0x11a>
{
   14e22:	b510      	push	{r4, lr}
   14e24:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   14e26:	aa01      	add	r2, sp, #4
   14e28:	2100      	movs	r1, #0
   14e2a:	f242 0003 	movw	r0, #8195	; 0x2003
   14e2e:	f7ff feff 	bl	14c30 <bt_hci_cmd_send_sync>
	if (err) {
   14e32:	4603      	mov	r3, r0
   14e34:	b110      	cbz	r0, 14e3c <le_init+0x28>
}
   14e36:	4618      	mov	r0, r3
   14e38:	b002      	add	sp, #8
   14e3a:	bd10      	pop	{r4, pc}
	read_le_features_complete(rsp);
   14e3c:	9801      	ldr	r0, [sp, #4]
   14e3e:	f7ff fcef 	bl	14820 <read_le_features_complete>
	net_buf_unref(rsp);
   14e42:	9801      	ldr	r0, [sp, #4]
   14e44:	f010 ff7c 	bl	25d40 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   14e48:	aa01      	add	r2, sp, #4
   14e4a:	2100      	movs	r1, #0
   14e4c:	f242 0002 	movw	r0, #8194	; 0x2002
   14e50:	f7ff feee 	bl	14c30 <bt_hci_cmd_send_sync>
		if (err) {
   14e54:	4603      	mov	r3, r0
   14e56:	2800      	cmp	r0, #0
   14e58:	d1ed      	bne.n	14e36 <le_init+0x22>
		le_read_buffer_size_complete(rsp);
   14e5a:	9801      	ldr	r0, [sp, #4]
   14e5c:	f7ff fcea 	bl	14834 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   14e60:	9801      	ldr	r0, [sp, #4]
   14e62:	f010 ff6d 	bl	25d40 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14e66:	4b35      	ldr	r3, [pc, #212]	; (14f3c <le_init+0x128>)
   14e68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   14e6c:	f013 0f20 	tst.w	r3, #32
   14e70:	d032      	beq.n	14ed8 <le_init+0xc4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   14e72:	4b32      	ldr	r3, [pc, #200]	; (14f3c <le_init+0x128>)
   14e74:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   14e78:	f013 0f08 	tst.w	r3, #8
   14e7c:	d144      	bne.n	14f08 <le_init+0xf4>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   14e7e:	4b2f      	ldr	r3, [pc, #188]	; (14f3c <le_init+0x128>)
   14e80:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   14e84:	f013 0f20 	tst.w	r3, #32
   14e88:	d022      	beq.n	14ed0 <le_init+0xbc>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14e8a:	f10d 0102 	add.w	r1, sp, #2
   14e8e:	4668      	mov	r0, sp
   14e90:	f00d ffc1 	bl	22e16 <hci_le_read_max_data_len>
		if (err) {
   14e94:	4603      	mov	r3, r0
   14e96:	2800      	cmp	r0, #0
   14e98:	d1cd      	bne.n	14e36 <le_init+0x22>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14e9a:	2104      	movs	r1, #4
   14e9c:	f242 0024 	movw	r0, #8228	; 0x2024
   14ea0:	f7ff fe8a 	bl	14bb8 <bt_hci_cmd_create>
		if (!buf) {
   14ea4:	4604      	mov	r4, r0
   14ea6:	2800      	cmp	r0, #0
   14ea8:	d03e      	beq.n	14f28 <le_init+0x114>
   14eaa:	2104      	movs	r1, #4
   14eac:	3008      	adds	r0, #8
   14eae:	f010 ff91 	bl	25dd4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   14eb2:	f8bd 3000 	ldrh.w	r3, [sp]
   14eb6:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   14eb8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   14ebc:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14ebe:	2200      	movs	r2, #0
   14ec0:	4621      	mov	r1, r4
   14ec2:	f242 0024 	movw	r0, #8228	; 0x2024
   14ec6:	f7ff feb3 	bl	14c30 <bt_hci_cmd_send_sync>
		if (err) {
   14eca:	4603      	mov	r3, r0
   14ecc:	2800      	cmp	r0, #0
   14ece:	d1b2      	bne.n	14e36 <le_init+0x22>
	return  le_set_event_mask();
   14ed0:	f7ff ff60 	bl	14d94 <le_set_event_mask>
   14ed4:	4603      	mov	r3, r0
   14ed6:	e7ae      	b.n	14e36 <le_init+0x22>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   14ed8:	2102      	movs	r1, #2
   14eda:	f640 406d 	movw	r0, #3181	; 0xc6d
   14ede:	f7ff fe6b 	bl	14bb8 <bt_hci_cmd_create>
		if (!buf) {
   14ee2:	4604      	mov	r4, r0
   14ee4:	b338      	cbz	r0, 14f36 <le_init+0x122>
   14ee6:	2102      	movs	r1, #2
   14ee8:	3008      	adds	r0, #8
   14eea:	f010 ff73 	bl	25dd4 <net_buf_simple_add>
		cp_le->le = 0x01;
   14eee:	2301      	movs	r3, #1
   14ef0:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   14ef2:	2200      	movs	r2, #0
   14ef4:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   14ef6:	4621      	mov	r1, r4
   14ef8:	f640 406d 	movw	r0, #3181	; 0xc6d
   14efc:	f7ff fe98 	bl	14c30 <bt_hci_cmd_send_sync>
		if (err) {
   14f00:	4603      	mov	r3, r0
   14f02:	2800      	cmp	r0, #0
   14f04:	d0b5      	beq.n	14e72 <le_init+0x5e>
   14f06:	e796      	b.n	14e36 <le_init+0x22>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   14f08:	aa01      	add	r2, sp, #4
   14f0a:	2100      	movs	r1, #0
   14f0c:	f242 001c 	movw	r0, #8220	; 0x201c
   14f10:	f7ff fe8e 	bl	14c30 <bt_hci_cmd_send_sync>
		if (err) {
   14f14:	4603      	mov	r3, r0
   14f16:	2800      	cmp	r0, #0
   14f18:	d18d      	bne.n	14e36 <le_init+0x22>
		le_read_supp_states_complete(rsp);
   14f1a:	9801      	ldr	r0, [sp, #4]
   14f1c:	f7ff fc32 	bl	14784 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   14f20:	9801      	ldr	r0, [sp, #4]
   14f22:	f010 ff0d 	bl	25d40 <net_buf_unref>
   14f26:	e7aa      	b.n	14e7e <le_init+0x6a>
			return -ENOBUFS;
   14f28:	f06f 0368 	mvn.w	r3, #104	; 0x68
   14f2c:	e783      	b.n	14e36 <le_init+0x22>
		return -ENODEV;
   14f2e:	f06f 0312 	mvn.w	r3, #18
}
   14f32:	4618      	mov	r0, r3
   14f34:	4770      	bx	lr
			return -ENOBUFS;
   14f36:	f06f 0368 	mvn.w	r3, #104	; 0x68
   14f3a:	e77c      	b.n	14e36 <le_init+0x22>
   14f3c:	200002a0 	.word	0x200002a0

00014f40 <bt_br_init>:
{
   14f40:	b510      	push	{r4, lr}
   14f42:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   14f44:	4b0b      	ldr	r3, [pc, #44]	; (14f74 <bt_br_init+0x34>)
   14f46:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   14f4a:	b11b      	cbz	r3, 14f54 <bt_br_init+0x14>
		return 0;
   14f4c:	2400      	movs	r4, #0
}
   14f4e:	4620      	mov	r0, r4
   14f50:	b002      	add	sp, #8
   14f52:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   14f54:	aa01      	add	r2, sp, #4
   14f56:	2100      	movs	r1, #0
   14f58:	f241 0005 	movw	r0, #4101	; 0x1005
   14f5c:	f7ff fe68 	bl	14c30 <bt_hci_cmd_send_sync>
	if (err) {
   14f60:	4604      	mov	r4, r0
   14f62:	2800      	cmp	r0, #0
   14f64:	d1f3      	bne.n	14f4e <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   14f66:	9801      	ldr	r0, [sp, #4]
   14f68:	f7ff fc78 	bl	1485c <read_buffer_size_complete>
	net_buf_unref(rsp);
   14f6c:	9801      	ldr	r0, [sp, #4]
   14f6e:	f010 fee7 	bl	25d40 <net_buf_unref>
	return 0;
   14f72:	e7ec      	b.n	14f4e <bt_br_init+0xe>
   14f74:	200002a0 	.word	0x200002a0

00014f78 <hci_vs_init>:
{
   14f78:	b510      	push	{r4, lr}
   14f7a:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   14f7c:	aa01      	add	r2, sp, #4
   14f7e:	2100      	movs	r1, #0
   14f80:	f64f 4001 	movw	r0, #64513	; 0xfc01
   14f84:	f7ff fe54 	bl	14c30 <bt_hci_cmd_send_sync>
	if (err) {
   14f88:	b108      	cbz	r0, 14f8e <hci_vs_init+0x16>
}
   14f8a:	b002      	add	sp, #8
   14f8c:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
   14f8e:	9801      	ldr	r0, [sp, #4]
   14f90:	f010 fed6 	bl	25d40 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   14f94:	aa01      	add	r2, sp, #4
   14f96:	2100      	movs	r1, #0
   14f98:	f64f 4002 	movw	r0, #64514	; 0xfc02
   14f9c:	f7ff fe48 	bl	14c30 <bt_hci_cmd_send_sync>
	if (err) {
   14fa0:	2800      	cmp	r0, #0
   14fa2:	d1f2      	bne.n	14f8a <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
   14fa4:	9b01      	ldr	r3, [sp, #4]
   14fa6:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   14fa8:	4c11      	ldr	r4, [pc, #68]	; (14ff0 <hci_vs_init+0x78>)
   14faa:	2202      	movs	r2, #2
   14fac:	3101      	adds	r1, #1
   14fae:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   14fb2:	f00d fd3c 	bl	22a2e <memcpy>
	net_buf_unref(rsp);
   14fb6:	9801      	ldr	r0, [sp, #4]
   14fb8:	f010 fec2 	bl	25d40 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   14fbc:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   14fc0:	f013 0f04 	tst.w	r3, #4
   14fc4:	d0e1      	beq.n	14f8a <hci_vs_init+0x12>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   14fc6:	aa01      	add	r2, sp, #4
   14fc8:	2100      	movs	r1, #0
   14fca:	f64f 4003 	movw	r0, #64515	; 0xfc03
   14fce:	f7ff fe2f 	bl	14c30 <bt_hci_cmd_send_sync>
		if (err) {
   14fd2:	2800      	cmp	r0, #0
   14fd4:	d1d9      	bne.n	14f8a <hci_vs_init+0x12>
		rp.feat = (void *)rsp->data;
   14fd6:	9b01      	ldr	r3, [sp, #4]
   14fd8:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   14fda:	2201      	movs	r2, #1
   14fdc:	4411      	add	r1, r2
   14fde:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   14fe2:	f00d fd24 	bl	22a2e <memcpy>
		net_buf_unref(rsp);
   14fe6:	9801      	ldr	r0, [sp, #4]
   14fe8:	f010 feaa 	bl	25d40 <net_buf_unref>
   14fec:	e7cd      	b.n	14f8a <hci_vs_init+0x12>
   14fee:	bf00      	nop
   14ff0:	200002a0 	.word	0x200002a0

00014ff4 <hci_init>:
{
   14ff4:	b508      	push	{r3, lr}
	err = common_init();
   14ff6:	f7ff fe83 	bl	14d00 <common_init>
	if (err) {
   14ffa:	4603      	mov	r3, r0
   14ffc:	b108      	cbz	r0, 15002 <hci_init+0xe>
}
   14ffe:	4618      	mov	r0, r3
   15000:	bd08      	pop	{r3, pc}
	err = le_init();
   15002:	f7ff ff07 	bl	14e14 <le_init>
	if (err) {
   15006:	4603      	mov	r3, r0
   15008:	2800      	cmp	r0, #0
   1500a:	d1f8      	bne.n	14ffe <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1500c:	4b0a      	ldr	r3, [pc, #40]	; (15038 <hci_init+0x44>)
   1500e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   15012:	f013 0f20 	tst.w	r3, #32
   15016:	d104      	bne.n	15022 <hci_init+0x2e>
		err = bt_br_init();
   15018:	f7ff ff92 	bl	14f40 <bt_br_init>
		if (err) {
   1501c:	4603      	mov	r3, r0
   1501e:	2800      	cmp	r0, #0
   15020:	d1ed      	bne.n	14ffe <hci_init+0xa>
	err = set_event_mask();
   15022:	f00d ff12 	bl	22e4a <set_event_mask>
	if (err) {
   15026:	4603      	mov	r3, r0
   15028:	2800      	cmp	r0, #0
   1502a:	d1e8      	bne.n	14ffe <hci_init+0xa>
	hci_vs_init();
   1502c:	f7ff ffa4 	bl	14f78 <hci_vs_init>
	err = bt_id_init();
   15030:	f000 fd54 	bl	15adc <bt_id_init>
   15034:	4603      	mov	r3, r0
	if (err) {
   15036:	e7e2      	b.n	14ffe <hci_init+0xa>
   15038:	200002a0 	.word	0x200002a0

0001503c <bt_le_create_conn_legacy>:
{
   1503c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1503e:	b087      	sub	sp, #28
   15040:	4605      	mov	r5, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   15042:	f10d 010b 	add.w	r1, sp, #11
   15046:	2000      	movs	r0, #0
   15048:	f000 fd1e 	bl	15a88 <bt_id_set_create_conn_own_addr>
	if (err) {
   1504c:	b108      	cbz	r0, 15052 <bt_le_create_conn_legacy+0x16>
}
   1504e:	b007      	add	sp, #28
   15050:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   15052:	2119      	movs	r1, #25
   15054:	f242 000d 	movw	r0, #8205	; 0x200d
   15058:	f7ff fdae 	bl	14bb8 <bt_hci_cmd_create>
	if (!buf) {
   1505c:	4606      	mov	r6, r0
   1505e:	b3b8      	cbz	r0, 150d0 <bt_le_create_conn_legacy+0x94>
   15060:	2119      	movs	r1, #25
   15062:	3008      	adds	r0, #8
   15064:	f010 feb6 	bl	25dd4 <net_buf_simple_add>
   15068:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
   1506a:	2219      	movs	r2, #25
   1506c:	2100      	movs	r1, #0
   1506e:	f00d fd02 	bl	22a76 <memset>
	cp->own_addr_type = own_addr_type;
   15072:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15076:	7323      	strb	r3, [r4, #12]
	memcpy(dst, src, sizeof(*dst));
   15078:	2207      	movs	r2, #7
   1507a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1507e:	1d60      	adds	r0, r4, #5
   15080:	f00d fcd5 	bl	22a2e <memcpy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   15084:	2700      	movs	r7, #0
   15086:	7127      	strb	r7, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   15088:	4a13      	ldr	r2, [pc, #76]	; (150d8 <bt_le_create_conn_legacy+0x9c>)
   1508a:	8993      	ldrh	r3, [r2, #12]
   1508c:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   1508e:	89d3      	ldrh	r3, [r2, #14]
   15090:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   15092:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   15096:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   1509a:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   1509e:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   150a2:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   150a6:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   150aa:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
   150ae:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   150b2:	2301      	movs	r3, #1
   150b4:	9300      	str	r3, [sp, #0]
   150b6:	230b      	movs	r3, #11
   150b8:	32cc      	adds	r2, #204	; 0xcc
   150ba:	a903      	add	r1, sp, #12
   150bc:	4630      	mov	r0, r6
   150be:	f7ff fd69 	bl	14b94 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   150c2:	463a      	mov	r2, r7
   150c4:	4631      	mov	r1, r6
   150c6:	f242 000d 	movw	r0, #8205	; 0x200d
   150ca:	f7ff fdb1 	bl	14c30 <bt_hci_cmd_send_sync>
   150ce:	e7be      	b.n	1504e <bt_le_create_conn_legacy+0x12>
		return -ENOBUFS;
   150d0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   150d4:	e7bb      	b.n	1504e <bt_le_create_conn_legacy+0x12>
   150d6:	bf00      	nop
   150d8:	200002a0 	.word	0x200002a0

000150dc <bt_le_create_conn_cancel>:
{
   150dc:	b530      	push	{r4, r5, lr}
   150de:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   150e0:	2100      	movs	r1, #0
   150e2:	f242 000e 	movw	r0, #8206	; 0x200e
   150e6:	f7ff fd67 	bl	14bb8 <bt_hci_cmd_create>
   150ea:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   150ec:	2500      	movs	r5, #0
   150ee:	9500      	str	r5, [sp, #0]
   150f0:	230b      	movs	r3, #11
   150f2:	4a06      	ldr	r2, [pc, #24]	; (1510c <bt_le_create_conn_cancel+0x30>)
   150f4:	a903      	add	r1, sp, #12
   150f6:	f7ff fd4d 	bl	14b94 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   150fa:	462a      	mov	r2, r5
   150fc:	4621      	mov	r1, r4
   150fe:	f242 000e 	movw	r0, #8206	; 0x200e
   15102:	f7ff fd95 	bl	14c30 <bt_hci_cmd_send_sync>
}
   15106:	b007      	add	sp, #28
   15108:	bd30      	pop	{r4, r5, pc}
   1510a:	bf00      	nop
   1510c:	2000036c 	.word	0x2000036c

00015110 <bt_send>:
{
   15110:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   15112:	4b03      	ldr	r3, [pc, #12]	; (15120 <bt_send+0x10>)
   15114:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   15118:	691b      	ldr	r3, [r3, #16]
   1511a:	4798      	blx	r3
}
   1511c:	bd08      	pop	{r3, pc}
   1511e:	bf00      	nop
   15120:	200002a0 	.word	0x200002a0

00015124 <bt_hci_cmd_send>:
{
   15124:	b538      	push	{r3, r4, r5, lr}
   15126:	4604      	mov	r4, r0
	if (!buf) {
   15128:	460d      	mov	r5, r1
   1512a:	b151      	cbz	r1, 15142 <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1512c:	f640 4335 	movw	r3, #3125	; 0xc35
   15130:	429c      	cmp	r4, r3
   15132:	d00e      	beq.n	15152 <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   15134:	4629      	mov	r1, r5
   15136:	480c      	ldr	r0, [pc, #48]	; (15168 <bt_hci_cmd_send+0x44>)
   15138:	f010 fdf5 	bl	25d26 <net_buf_put>
	return 0;
   1513c:	2400      	movs	r4, #0
}
   1513e:	4620      	mov	r0, r4
   15140:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   15142:	f7ff fd39 	bl	14bb8 <bt_hci_cmd_create>
		if (!buf) {
   15146:	4605      	mov	r5, r0
   15148:	2800      	cmp	r0, #0
   1514a:	d1ef      	bne.n	1512c <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   1514c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15150:	e7f5      	b.n	1513e <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   15152:	4628      	mov	r0, r5
   15154:	f7ff ffdc 	bl	15110 <bt_send>
		if (err) {
   15158:	4604      	mov	r4, r0
   1515a:	2800      	cmp	r0, #0
   1515c:	d0ef      	beq.n	1513e <bt_hci_cmd_send+0x1a>
			net_buf_unref(buf);
   1515e:	4628      	mov	r0, r5
   15160:	f010 fdee 	bl	25d40 <net_buf_unref>
		return err;
   15164:	e7eb      	b.n	1513e <bt_hci_cmd_send+0x1a>
   15166:	bf00      	nop
   15168:	200003ec 	.word	0x200003ec

0001516c <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   1516c:	7a83      	ldrb	r3, [r0, #10]
   1516e:	2b07      	cmp	r3, #7
   15170:	d000      	beq.n	15174 <conn_auto_initiate+0x8>
   15172:	4770      	bx	lr
{
   15174:	b530      	push	{r4, r5, lr}
   15176:	b085      	sub	sp, #20
   15178:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1517a:	1d05      	adds	r5, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1517c:	f3bf 8f5b 	dmb	ish
   15180:	6843      	ldr	r3, [r0, #4]
   15182:	f3bf 8f5b 	dmb	ish
   15186:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1518a:	d10b      	bne.n	151a4 <conn_auto_initiate+0x38>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1518c:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1518e:	b12b      	cbz	r3, 1519c <conn_auto_initiate+0x30>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   15190:	4b25      	ldr	r3, [pc, #148]	; (15228 <conn_auto_initiate+0xbc>)
   15192:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   15196:	f013 0f08 	tst.w	r3, #8
   1519a:	d003      	beq.n	151a4 <conn_auto_initiate+0x38>
		err = hci_le_read_remote_features(conn);
   1519c:	4620      	mov	r0, r4
   1519e:	f00d fefe 	bl	22f9e <hci_le_read_remote_features>
		if (!err) {
   151a2:	b1d0      	cbz	r0, 151da <conn_auto_initiate+0x6e>
   151a4:	f3bf 8f5b 	dmb	ish
   151a8:	6863      	ldr	r3, [r4, #4]
   151aa:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   151ae:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   151b2:	d105      	bne.n	151c0 <conn_auto_initiate+0x54>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
   151b4:	4b1c      	ldr	r3, [pc, #112]	; (15228 <conn_auto_initiate+0xbc>)
   151b6:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   151ba:	f013 0f01 	tst.w	r3, #1
   151be:	d10e      	bne.n	151de <conn_auto_initiate+0x72>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   151c0:	4b19      	ldr	r3, [pc, #100]	; (15228 <conn_auto_initiate+0xbc>)
   151c2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   151c6:	f013 0f20 	tst.w	r3, #32
   151ca:	d006      	beq.n	151da <conn_auto_initiate+0x6e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   151cc:	4b16      	ldr	r3, [pc, #88]	; (15228 <conn_auto_initiate+0xbc>)
   151ce:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   151d2:	689b      	ldr	r3, [r3, #8]
   151d4:	f013 0f02 	tst.w	r3, #2
   151d8:	d117      	bne.n	1520a <conn_auto_initiate+0x9e>
}
   151da:	b005      	add	sp, #20
   151dc:	bd30      	pop	{r4, r5, pc}
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   151de:	2100      	movs	r1, #0
   151e0:	9100      	str	r1, [sp, #0]
   151e2:	2302      	movs	r3, #2
   151e4:	461a      	mov	r2, r3
   151e6:	4620      	mov	r0, r4
   151e8:	f00d feb5 	bl	22f56 <bt_le_set_phy>
		if (!err) {
   151ec:	2800      	cmp	r0, #0
   151ee:	d1e7      	bne.n	151c0 <conn_auto_initiate+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   151f0:	f3bf 8f5b 	dmb	ish
   151f4:	e855 3f00 	ldrex	r3, [r5]
   151f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   151fc:	e845 3200 	strex	r2, r3, [r5]
   15200:	2a00      	cmp	r2, #0
   15202:	d1f7      	bne.n	151f4 <conn_auto_initiate+0x88>
   15204:	f3bf 8f5b 	dmb	ish
			return;
   15208:	e7e7      	b.n	151da <conn_auto_initiate+0x6e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1520a:	f10d 010e 	add.w	r1, sp, #14
   1520e:	a803      	add	r0, sp, #12
   15210:	f00d fe01 	bl	22e16 <hci_le_read_max_data_len>
			if (!err) {
   15214:	2800      	cmp	r0, #0
   15216:	d1e0      	bne.n	151da <conn_auto_initiate+0x6e>
				err = bt_le_set_data_len(conn,
   15218:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1521c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   15220:	4620      	mov	r0, r4
   15222:	f00d fe7c 	bl	22f1e <bt_le_set_data_len>
		}
   15226:	e7d8      	b.n	151da <conn_auto_initiate+0x6e>
   15228:	200002a0 	.word	0x200002a0

0001522c <bt_hci_le_enh_conn_complete>:
{
   1522c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15230:	b084      	sub	sp, #16
   15232:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15234:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   15238:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   1523c:	4640      	mov	r0, r8
   1523e:	f7ff fa75 	bl	1472c <conn_handle_is_disconnected>
   15242:	4606      	mov	r6, r0
	if (evt->status) {
   15244:	7820      	ldrb	r0, [r4, #0]
   15246:	b150      	cbz	r0, 1525e <bt_hci_le_enh_conn_complete+0x32>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15248:	2802      	cmp	r0, #2
   1524a:	d002      	beq.n	15252 <bt_hci_le_enh_conn_complete+0x26>
}
   1524c:	b004      	add	sp, #16
   1524e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			le_conn_complete_cancel();
   15252:	f00d fcc0 	bl	22bd6 <le_conn_complete_cancel>
			bt_le_scan_update(false);
   15256:	2000      	movs	r0, #0
   15258:	f000 fcf0 	bl	15c3c <bt_le_scan_update>
			return;
   1525c:	e7f6      	b.n	1524c <bt_hci_le_enh_conn_complete+0x20>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1525e:	7923      	ldrb	r3, [r4, #4]
   15260:	3b02      	subs	r3, #2
   15262:	b2db      	uxtb	r3, r3
   15264:	2b01      	cmp	r3, #1
   15266:	d954      	bls.n	15312 <bt_hci_le_enh_conn_complete+0xe6>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   15268:	78e3      	ldrb	r3, [r4, #3]
   1526a:	2b01      	cmp	r3, #1
   1526c:	d066      	beq.n	1533c <bt_hci_le_enh_conn_complete+0x110>
				bt_lookup_id_addr(id, &evt->peer_addr));
   1526e:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   15270:	4629      	mov	r1, r5
   15272:	f00d fff9 	bl	23268 <bt_lookup_id_addr>
   15276:	4601      	mov	r1, r0
   15278:	2207      	movs	r2, #7
   1527a:	4668      	mov	r0, sp
   1527c:	f00d fbd7 	bl	22a2e <memcpy>
   15280:	2207      	movs	r2, #7
   15282:	4629      	mov	r1, r5
   15284:	a802      	add	r0, sp, #8
   15286:	f00d fbd2 	bl	22a2e <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   1528a:	4669      	mov	r1, sp
   1528c:	78e0      	ldrb	r0, [r4, #3]
   1528e:	f00d fc9a 	bl	22bc6 <find_pending_connect>
   15292:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_CENTRAL) {
   15294:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15296:	b963      	cbnz	r3, 152b2 <bt_hci_le_enh_conn_complete+0x86>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15298:	4b38      	ldr	r3, [pc, #224]	; (1537c <bt_hci_le_enh_conn_complete+0x150>)
   1529a:	f3bf 8f5b 	dmb	ish
   1529e:	e853 2f00 	ldrex	r2, [r3]
   152a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   152a6:	e843 2100 	strex	r1, r2, [r3]
   152aa:	2900      	cmp	r1, #0
   152ac:	d1f7      	bne.n	1529e <bt_hci_le_enh_conn_complete+0x72>
   152ae:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   152b2:	2d00      	cmp	r5, #0
   152b4:	d046      	beq.n	15344 <bt_hci_le_enh_conn_complete+0x118>
	conn->handle = handle;
   152b6:	4628      	mov	r0, r5
   152b8:	f820 7b88 	strh.w	r7, [r0], #136
   152bc:	2207      	movs	r2, #7
   152be:	4669      	mov	r1, sp
   152c0:	f00d fbb5 	bl	22a2e <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   152c4:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   152c8:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   152cc:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   152d0:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   152d4:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   152d8:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   152dc:	78e3      	ldrb	r3, [r4, #3]
   152de:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   152e0:	2200      	movs	r2, #0
   152e2:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   152e4:	b39b      	cbz	r3, 1534e <bt_hci_le_enh_conn_complete+0x122>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   152e6:	2107      	movs	r1, #7
   152e8:	4628      	mov	r0, r5
   152ea:	f000 ff8f 	bl	1620c <bt_conn_set_state>
	if (is_disconnected) {
   152ee:	2e00      	cmp	r6, #0
   152f0:	d13e      	bne.n	15370 <bt_hci_le_enh_conn_complete+0x144>
	bt_conn_connected(conn);
   152f2:	4628      	mov	r0, r5
   152f4:	f00e faad 	bl	23852 <bt_conn_connected>
	conn_auto_initiate(conn);
   152f8:	4628      	mov	r0, r5
   152fa:	f7ff ff37 	bl	1516c <conn_auto_initiate>
	bt_conn_unref(conn);
   152fe:	4628      	mov	r0, r5
   15300:	f00e fa6e 	bl	237e0 <bt_conn_unref>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   15304:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15306:	2b00      	cmp	r3, #0
   15308:	d1a0      	bne.n	1524c <bt_hci_le_enh_conn_complete+0x20>
		bt_le_scan_update(false);
   1530a:	2000      	movs	r0, #0
   1530c:	f000 fc96 	bl	15c3c <bt_le_scan_update>
   15310:	e79c      	b.n	1524c <bt_hci_le_enh_conn_complete+0x20>
   15312:	2207      	movs	r2, #7
   15314:	1d21      	adds	r1, r4, #4
   15316:	4668      	mov	r0, sp
   15318:	f00d fb89 	bl	22a2e <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1531c:	f89d 3000 	ldrb.w	r3, [sp]
   15320:	3b02      	subs	r3, #2
   15322:	f88d 3000 	strb.w	r3, [sp]
	memcpy(dst, src, sizeof(*dst));
   15326:	2206      	movs	r2, #6
   15328:	f104 0111 	add.w	r1, r4, #17
   1532c:	f10d 0009 	add.w	r0, sp, #9
   15330:	f00d fb7d 	bl	22a2e <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   15334:	2301      	movs	r3, #1
   15336:	f88d 3008 	strb.w	r3, [sp, #8]
   1533a:	e7a6      	b.n	1528a <bt_hci_le_enh_conn_complete+0x5e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1533c:	4b10      	ldr	r3, [pc, #64]	; (15380 <bt_hci_le_enh_conn_complete+0x154>)
   1533e:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   15342:	e794      	b.n	1526e <bt_hci_le_enh_conn_complete+0x42>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   15344:	211f      	movs	r1, #31
   15346:	4640      	mov	r0, r8
   15348:	f00d fda5 	bl	22e96 <bt_hci_disconnect>
		return;
   1534c:	e77e      	b.n	1524c <bt_hci_le_enh_conn_complete+0x20>
	memcpy(dst, src, sizeof(*dst));
   1534e:	2207      	movs	r2, #7
   15350:	a902      	add	r1, sp, #8
   15352:	f105 0096 	add.w	r0, r5, #150	; 0x96
   15356:	f00d fb6a 	bl	22a2e <memcpy>
					&bt_dev.id_addr[conn->id]);
   1535a:	7a29      	ldrb	r1, [r5, #8]
   1535c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   15360:	2207      	movs	r2, #7
   15362:	4b07      	ldr	r3, [pc, #28]	; (15380 <bt_hci_le_enh_conn_complete+0x154>)
   15364:	4419      	add	r1, r3
   15366:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   1536a:	f00d fb60 	bl	22a2e <memcpy>
}
   1536e:	e7ba      	b.n	152e6 <bt_hci_le_enh_conn_complete+0xba>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15370:	2101      	movs	r1, #1
   15372:	4628      	mov	r0, r5
   15374:	f000 ff4a 	bl	1620c <bt_conn_set_state>
   15378:	e7bb      	b.n	152f2 <bt_hci_le_enh_conn_complete+0xc6>
   1537a:	bf00      	nop
   1537c:	2000036c 	.word	0x2000036c
   15380:	200002a0 	.word	0x200002a0

00015384 <send_cmd>:
{
   15384:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   15386:	2200      	movs	r2, #0
   15388:	2300      	movs	r3, #0
   1538a:	4826      	ldr	r0, [pc, #152]	; (15424 <send_cmd+0xa0>)
   1538c:	f010 fca6 	bl	25cdc <net_buf_get>
	BT_ASSERT(buf);
   15390:	4604      	mov	r4, r0
   15392:	b1d8      	cbz	r0, 153cc <send_cmd+0x48>
   15394:	4d24      	ldr	r5, [pc, #144]	; (15428 <send_cmd+0xa4>)
   15396:	f04f 32ff 	mov.w	r2, #4294967295
   1539a:	f04f 33ff 	mov.w	r3, #4294967295
   1539e:	f505 708c 	add.w	r0, r5, #280	; 0x118
   153a2:	f007 ff97 	bl	1d2d4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   153a6:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   153aa:	b120      	cbz	r0, 153b6 <send_cmd+0x32>
		net_buf_unref(bt_dev.sent_cmd);
   153ac:	f010 fcc8 	bl	25d40 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   153b0:	2200      	movs	r2, #0
   153b2:	f8c5 2130 	str.w	r2, [r5, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   153b6:	4620      	mov	r0, r4
   153b8:	f010 fce8 	bl	25d8c <net_buf_ref>
   153bc:	4b1a      	ldr	r3, [pc, #104]	; (15428 <send_cmd+0xa4>)
   153be:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   153c2:	4620      	mov	r0, r4
   153c4:	f7ff fea4 	bl	15110 <bt_send>
	if (err) {
   153c8:	b970      	cbnz	r0, 153e8 <send_cmd+0x64>
}
   153ca:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   153cc:	f44f 6312 	mov.w	r3, #2336	; 0x920
   153d0:	4a16      	ldr	r2, [pc, #88]	; (1542c <send_cmd+0xa8>)
   153d2:	4917      	ldr	r1, [pc, #92]	; (15430 <send_cmd+0xac>)
   153d4:	4817      	ldr	r0, [pc, #92]	; (15434 <send_cmd+0xb0>)
   153d6:	f00b fe93 	bl	21100 <printk>
   153da:	4040      	eors	r0, r0
   153dc:	f380 8811 	msr	BASEPRI, r0
   153e0:	f04f 0003 	mov.w	r0, #3
   153e4:	df02      	svc	2
   153e6:	e7d5      	b.n	15394 <send_cmd+0x10>
	z_impl_k_sem_give(sem);
   153e8:	4d0f      	ldr	r5, [pc, #60]	; (15428 <send_cmd+0xa4>)
   153ea:	f505 708c 	add.w	r0, r5, #280	; 0x118
   153ee:	f007 ff49 	bl	1d284 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   153f2:	4620      	mov	r0, r4
   153f4:	f002 fdae 	bl	17f54 <net_buf_id>
   153f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   153fc:	4b0e      	ldr	r3, [pc, #56]	; (15438 <send_cmd+0xb4>)
   153fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15402:	4622      	mov	r2, r4
   15404:	211f      	movs	r1, #31
   15406:	8840      	ldrh	r0, [r0, #2]
   15408:	f7ff fa3e 	bl	14888 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   1540c:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   15410:	f010 fc96 	bl	25d40 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15414:	2300      	movs	r3, #0
   15416:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
		net_buf_unref(buf);
   1541a:	4620      	mov	r0, r4
   1541c:	f010 fc90 	bl	25d40 <net_buf_unref>
   15420:	e7d3      	b.n	153ca <send_cmd+0x46>
   15422:	bf00      	nop
   15424:	200003ec 	.word	0x200003ec
   15428:	200002a0 	.word	0x200002a0
   1542c:	000288e4 	.word	0x000288e4
   15430:	000289b0 	.word	0x000289b0
   15434:	00028934 	.word	0x00028934
   15438:	200031b4 	.word	0x200031b4

0001543c <hci_tx_thread>:
{
   1543c:	b538      	push	{r3, r4, r5, lr}
   1543e:	e005      	b.n	1544c <hci_tx_thread+0x10>
		process_events(events, ev_count);
   15440:	4621      	mov	r1, r4
   15442:	4813      	ldr	r0, [pc, #76]	; (15490 <hci_tx_thread+0x54>)
   15444:	f00d febd 	bl	231c2 <process_events>
	z_impl_k_yield();
   15448:	f008 fc3a 	bl	1dcc0 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   1544c:	4d10      	ldr	r5, [pc, #64]	; (15490 <hci_tx_thread+0x54>)
   1544e:	68eb      	ldr	r3, [r5, #12]
   15450:	f36f 3352 	bfc	r3, #13, #6
   15454:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15456:	f105 0014 	add.w	r0, r5, #20
   1545a:	f000 fea9 	bl	161b0 <bt_conn_prepare_events>
   1545e:	1c44      	adds	r4, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   15460:	f04f 32ff 	mov.w	r2, #4294967295
   15464:	f04f 33ff 	mov.w	r3, #4294967295
   15468:	4621      	mov	r1, r4
   1546a:	4628      	mov	r0, r5
   1546c:	f008 fec6 	bl	1e1fc <z_impl_k_poll>
		BT_ASSERT(err == 0);
   15470:	2800      	cmp	r0, #0
   15472:	d0e5      	beq.n	15440 <hci_tx_thread+0x4>
   15474:	f640 1389 	movw	r3, #2441	; 0x989
   15478:	4a06      	ldr	r2, [pc, #24]	; (15494 <hci_tx_thread+0x58>)
   1547a:	4907      	ldr	r1, [pc, #28]	; (15498 <hci_tx_thread+0x5c>)
   1547c:	4807      	ldr	r0, [pc, #28]	; (1549c <hci_tx_thread+0x60>)
   1547e:	f00b fe3f 	bl	21100 <printk>
   15482:	4040      	eors	r0, r0
   15484:	f380 8811 	msr	BASEPRI, r0
   15488:	f04f 0003 	mov.w	r0, #3
   1548c:	df02      	svc	2
   1548e:	e7d7      	b.n	15440 <hci_tx_thread+0x4>
   15490:	20000564 	.word	0x20000564
   15494:	000288e4 	.word	0x000288e4
   15498:	00028984 	.word	0x00028984
   1549c:	00028934 	.word	0x00028934

000154a0 <hci_event_prio>:
{
   154a0:	b570      	push	{r4, r5, r6, lr}
   154a2:	b082      	sub	sp, #8
   154a4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   154a6:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   154aa:	4628      	mov	r0, r5
   154ac:	f010 fcd4 	bl	25e58 <net_buf_simple_headroom>
   154b0:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   154b4:	89a3      	ldrh	r3, [r4, #12]
   154b6:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   154ba:	2b01      	cmp	r3, #1
   154bc:	d915      	bls.n	154ea <hci_event_prio+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   154be:	2102      	movs	r1, #2
   154c0:	4628      	mov	r0, r5
   154c2:	f010 fcb1 	bl	25e28 <net_buf_simple_pull_mem>
   154c6:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   154c8:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   154ca:	3b05      	subs	r3, #5
   154cc:	2b15      	cmp	r3, #21
   154ce:	d81c      	bhi.n	1550a <hci_event_prio+0x6a>
   154d0:	e8df f003 	tbb	[pc, r3]
   154d4:	1b1b1b19 	.word	0x1b1b1b19
   154d8:	1b1b1b1b 	.word	0x1b1b1b1b
   154dc:	1b3e3e1b 	.word	0x1b3e3e1b
   154e0:	1b3e1b1b 	.word	0x1b3e1b1b
   154e4:	1b1b1b1b 	.word	0x1b1b1b1b
   154e8:	3e1b      	.short	0x3e1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   154ea:	f640 5315 	movw	r3, #3349	; 0xd15
   154ee:	4a23      	ldr	r2, [pc, #140]	; (1557c <hci_event_prio+0xdc>)
   154f0:	4923      	ldr	r1, [pc, #140]	; (15580 <hci_event_prio+0xe0>)
   154f2:	4824      	ldr	r0, [pc, #144]	; (15584 <hci_event_prio+0xe4>)
   154f4:	f00b fe04 	bl	21100 <printk>
   154f8:	4040      	eors	r0, r0
   154fa:	f380 8811 	msr	BASEPRI, r0
   154fe:	f04f 0003 	mov.w	r0, #3
   15502:	df02      	svc	2
   15504:	e7db      	b.n	154be <hci_event_prio+0x1e>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15506:	2603      	movs	r6, #3
   15508:	e000      	b.n	1550c <hci_event_prio+0x6c>
		return BT_HCI_EVT_FLAG_RECV;
   1550a:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1550c:	f016 0f01 	tst.w	r6, #1
   15510:	d020      	beq.n	15554 <hci_event_prio+0xb4>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   15512:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   15514:	2300      	movs	r3, #0
   15516:	2b04      	cmp	r3, #4
   15518:	d80d      	bhi.n	15536 <hci_event_prio+0x96>
		const struct event_handler *handler = &handlers[i];
   1551a:	4a1b      	ldr	r2, [pc, #108]	; (15588 <hci_event_prio+0xe8>)
   1551c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
   15520:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   15524:	4290      	cmp	r0, r2
   15526:	d123      	bne.n	15570 <hci_event_prio+0xd0>
		if (buf->len < handler->min_len) {
   15528:	89a2      	ldrh	r2, [r4, #12]
   1552a:	784b      	ldrb	r3, [r1, #1]
   1552c:	429a      	cmp	r2, r3
   1552e:	d302      	bcc.n	15536 <hci_event_prio+0x96>
		handler->handler(buf);
   15530:	684b      	ldr	r3, [r1, #4]
   15532:	4620      	mov	r0, r4
   15534:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15536:	f016 0f02 	tst.w	r6, #2
   1553a:	d01b      	beq.n	15574 <hci_event_prio+0xd4>
	buf->data = buf->__buf + state->offset;
   1553c:	6923      	ldr	r3, [r4, #16]
   1553e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   15542:	4413      	add	r3, r2
   15544:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   15546:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1554a:	81a3      	strh	r3, [r4, #12]
}
   1554c:	b002      	add	sp, #8
   1554e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   15550:	2601      	movs	r6, #1
   15552:	e7db      	b.n	1550c <hci_event_prio+0x6c>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15554:	f640 5319 	movw	r3, #3353	; 0xd19
   15558:	4a08      	ldr	r2, [pc, #32]	; (1557c <hci_event_prio+0xdc>)
   1555a:	490c      	ldr	r1, [pc, #48]	; (1558c <hci_event_prio+0xec>)
   1555c:	4809      	ldr	r0, [pc, #36]	; (15584 <hci_event_prio+0xe4>)
   1555e:	f00b fdcf 	bl	21100 <printk>
   15562:	4040      	eors	r0, r0
   15564:	f380 8811 	msr	BASEPRI, r0
   15568:	f04f 0003 	mov.w	r0, #3
   1556c:	df02      	svc	2
   1556e:	e7d0      	b.n	15512 <hci_event_prio+0x72>
	for (i = 0; i < num_handlers; i++) {
   15570:	3301      	adds	r3, #1
   15572:	e7d0      	b.n	15516 <hci_event_prio+0x76>
		net_buf_unref(buf);
   15574:	4620      	mov	r0, r4
   15576:	f010 fbe3 	bl	25d40 <net_buf_unref>
}
   1557a:	e7e7      	b.n	1554c <hci_event_prio+0xac>
   1557c:	000288e4 	.word	0x000288e4
   15580:	00028918 	.word	0x00028918
   15584:	00028934 	.word	0x00028934
   15588:	00028a58 	.word	0x00028a58
   1558c:	000289b4 	.word	0x000289b4

00015590 <bt_recv>:
{
   15590:	b538      	push	{r3, r4, r5, lr}
   15592:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15594:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   15596:	2d01      	cmp	r5, #1
   15598:	d007      	beq.n	155aa <bt_recv+0x1a>
   1559a:	2d03      	cmp	r5, #3
   1559c:	d12c      	bne.n	155f8 <bt_recv+0x68>
		net_buf_put(&bt_dev.rx_queue, buf);
   1559e:	4601      	mov	r1, r0
   155a0:	4818      	ldr	r0, [pc, #96]	; (15604 <bt_recv+0x74>)
   155a2:	f010 fbc0 	bl	25d26 <net_buf_put>
		return 0;
   155a6:	2000      	movs	r0, #0
}
   155a8:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   155aa:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   155ac:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   155ae:	3b05      	subs	r3, #5
   155b0:	2b15      	cmp	r3, #21
   155b2:	d80e      	bhi.n	155d2 <bt_recv+0x42>
   155b4:	e8df f003 	tbb	[pc, r3]
   155b8:	0d0d0d0b 	.word	0x0d0d0d0b
   155bc:	0d0d0d0d 	.word	0x0d0d0d0d
   155c0:	0d0e0e0d 	.word	0x0d0e0e0d
   155c4:	0d0e0d0d 	.word	0x0d0e0d0d
   155c8:	0d0d0d0d 	.word	0x0d0d0d0d
   155cc:	0e0d      	.short	0x0e0d
   155ce:	2503      	movs	r5, #3
   155d0:	e000      	b.n	155d4 <bt_recv+0x44>
		return BT_HCI_EVT_FLAG_RECV;
   155d2:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   155d4:	f015 0f01 	tst.w	r5, #1
   155d8:	d104      	bne.n	155e4 <bt_recv+0x54>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   155da:	f015 0f02 	tst.w	r5, #2
   155de:	d105      	bne.n	155ec <bt_recv+0x5c>
		return 0;
   155e0:	2000      	movs	r0, #0
   155e2:	e7e1      	b.n	155a8 <bt_recv+0x18>
			hci_event_prio(buf);
   155e4:	4620      	mov	r0, r4
   155e6:	f7ff ff5b 	bl	154a0 <hci_event_prio>
   155ea:	e7f6      	b.n	155da <bt_recv+0x4a>
			net_buf_put(&bt_dev.rx_queue, buf);
   155ec:	4621      	mov	r1, r4
   155ee:	4805      	ldr	r0, [pc, #20]	; (15604 <bt_recv+0x74>)
   155f0:	f010 fb99 	bl	25d26 <net_buf_put>
		return 0;
   155f4:	2000      	movs	r0, #0
   155f6:	e7d7      	b.n	155a8 <bt_recv+0x18>
		net_buf_unref(buf);
   155f8:	f010 fba2 	bl	25d40 <net_buf_unref>
		return -EINVAL;
   155fc:	f06f 0015 	mvn.w	r0, #21
   15600:	e7d2      	b.n	155a8 <bt_recv+0x18>
   15602:	bf00      	nop
   15604:	200003d4 	.word	0x200003d4

00015608 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   15608:	4b0a      	ldr	r3, [pc, #40]	; (15634 <bt_hci_driver_register+0x2c>)
   1560a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   1560e:	b943      	cbnz	r3, 15622 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   15610:	68c3      	ldr	r3, [r0, #12]
   15612:	b14b      	cbz	r3, 15628 <bt_hci_driver_register+0x20>
   15614:	6903      	ldr	r3, [r0, #16]
   15616:	b153      	cbz	r3, 1562e <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   15618:	4b06      	ldr	r3, [pc, #24]	; (15634 <bt_hci_driver_register+0x2c>)
   1561a:	f8c3 0164 	str.w	r0, [r3, #356]	; 0x164
	return 0;
   1561e:	2000      	movs	r0, #0
   15620:	4770      	bx	lr
		return -EALREADY;
   15622:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15626:	4770      	bx	lr
		return -EINVAL;
   15628:	f06f 0015 	mvn.w	r0, #21
   1562c:	4770      	bx	lr
   1562e:	f06f 0015 	mvn.w	r0, #21
}
   15632:	4770      	bx	lr
   15634:	200002a0 	.word	0x200002a0

00015638 <bt_finalize_init>:
{
   15638:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1563a:	4b08      	ldr	r3, [pc, #32]	; (1565c <bt_finalize_init+0x24>)
   1563c:	f3bf 8f5b 	dmb	ish
   15640:	e853 2f00 	ldrex	r2, [r3]
   15644:	f042 0202 	orr.w	r2, r2, #2
   15648:	e843 2100 	strex	r1, r2, [r3]
   1564c:	2900      	cmp	r1, #0
   1564e:	d1f7      	bne.n	15640 <bt_finalize_init+0x8>
   15650:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   15654:	2000      	movs	r0, #0
   15656:	f000 faf1 	bl	15c3c <bt_le_scan_update>
}
   1565a:	bd08      	pop	{r3, pc}
   1565c:	2000036c 	.word	0x2000036c

00015660 <init_work>:
{
   15660:	b508      	push	{r3, lr}
	err = bt_init();
   15662:	f00d fdc7 	bl	231f4 <bt_init>
	if (ready_cb) {
   15666:	4b02      	ldr	r3, [pc, #8]	; (15670 <init_work+0x10>)
   15668:	681b      	ldr	r3, [r3, #0]
   1566a:	b103      	cbz	r3, 1566e <init_work+0xe>
		ready_cb(err);
   1566c:	4798      	blx	r3
}
   1566e:	bd08      	pop	{r3, pc}
   15670:	200031d4 	.word	0x200031d4

00015674 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   15674:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   15678:	b088      	sub	sp, #32
	int err;

	if (!bt_dev.drv) {
   1567a:	4b30      	ldr	r3, [pc, #192]	; (1573c <bt_enable+0xc8>)
   1567c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   15680:	2b00      	cmp	r3, #0
   15682:	d054      	beq.n	1572e <bt_enable+0xba>
   15684:	4605      	mov	r5, r0
   15686:	4b2e      	ldr	r3, [pc, #184]	; (15740 <bt_enable+0xcc>)
   15688:	f3bf 8f5b 	dmb	ish
   1568c:	e853 2f00 	ldrex	r2, [r3]
   15690:	f042 0101 	orr.w	r1, r2, #1
   15694:	e843 1000 	strex	r0, r1, [r3]
   15698:	2800      	cmp	r0, #0
   1569a:	d1f7      	bne.n	1568c <bt_enable+0x18>
   1569c:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   156a0:	f012 0f01 	tst.w	r2, #1
   156a4:	d146      	bne.n	15734 <bt_enable+0xc0>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   156a6:	4b27      	ldr	r3, [pc, #156]	; (15744 <bt_enable+0xd0>)
   156a8:	601d      	str	r5, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   156aa:	f04f 0800 	mov.w	r8, #0
   156ae:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   156b2:	4e25      	ldr	r6, [pc, #148]	; (15748 <bt_enable+0xd4>)
   156b4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   156b8:	2400      	movs	r4, #0
   156ba:	9404      	str	r4, [sp, #16]
   156bc:	f06f 0308 	mvn.w	r3, #8
   156c0:	9303      	str	r3, [sp, #12]
   156c2:	9402      	str	r4, [sp, #8]
   156c4:	9401      	str	r4, [sp, #4]
   156c6:	9400      	str	r4, [sp, #0]
   156c8:	4b20      	ldr	r3, [pc, #128]	; (1574c <bt_enable+0xd8>)
   156ca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   156ce:	4920      	ldr	r1, [pc, #128]	; (15750 <bt_enable+0xdc>)
   156d0:	4630      	mov	r0, r6
   156d2:	f011 ff04 	bl	274de <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   156d6:	491f      	ldr	r1, [pc, #124]	; (15754 <bt_enable+0xe0>)
   156d8:	4630      	mov	r0, r6
   156da:	f007 fbe5 	bl	1cea8 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   156de:	4e1e      	ldr	r6, [pc, #120]	; (15758 <bt_enable+0xe4>)
   156e0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   156e4:	9404      	str	r4, [sp, #16]
   156e6:	f06f 0307 	mvn.w	r3, #7
   156ea:	9303      	str	r3, [sp, #12]
   156ec:	9402      	str	r4, [sp, #8]
   156ee:	9401      	str	r4, [sp, #4]
   156f0:	9400      	str	r4, [sp, #0]
   156f2:	4b1a      	ldr	r3, [pc, #104]	; (1575c <bt_enable+0xe8>)
   156f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   156f8:	4919      	ldr	r1, [pc, #100]	; (15760 <bt_enable+0xec>)
   156fa:	4630      	mov	r0, r6
   156fc:	f011 feef 	bl	274de <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15700:	4918      	ldr	r1, [pc, #96]	; (15764 <bt_enable+0xf0>)
   15702:	4630      	mov	r0, r6
   15704:	f007 fbd0 	bl	1cea8 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   15708:	4b0c      	ldr	r3, [pc, #48]	; (1573c <bt_enable+0xc8>)
   1570a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   1570e:	68db      	ldr	r3, [r3, #12]
   15710:	4798      	blx	r3
	if (err) {
   15712:	4604      	mov	r4, r0
   15714:	b918      	cbnz	r0, 1571e <bt_enable+0xaa>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   15716:	b135      	cbz	r5, 15726 <bt_enable+0xb2>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   15718:	4813      	ldr	r0, [pc, #76]	; (15768 <bt_enable+0xf4>)
   1571a:	f007 ff7d 	bl	1d618 <k_work_submit>
	return 0;
}
   1571e:	4620      	mov	r0, r4
   15720:	b008      	add	sp, #32
   15722:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		return bt_init();
   15726:	f00d fd65 	bl	231f4 <bt_init>
   1572a:	4604      	mov	r4, r0
   1572c:	e7f7      	b.n	1571e <bt_enable+0xaa>
		return -ENODEV;
   1572e:	f06f 0412 	mvn.w	r4, #18
   15732:	e7f4      	b.n	1571e <bt_enable+0xaa>
		return -EALREADY;
   15734:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15738:	e7f1      	b.n	1571e <bt_enable+0xaa>
   1573a:	bf00      	nop
   1573c:	200002a0 	.word	0x200002a0
   15740:	2000036c 	.word	0x2000036c
   15744:	200031d4 	.word	0x200031d4
   15748:	20001958 	.word	0x20001958
   1574c:	0001543d 	.word	0x0001543d
   15750:	200074a0 	.word	0x200074a0
   15754:	000289d0 	.word	0x000289d0
   15758:	200018a0 	.word	0x200018a0
   1575c:	00014b61 	.word	0x00014b61
   15760:	20007080 	.word	0x20007080
   15764:	000289d8 	.word	0x000289d8
   15768:	2000035c 	.word	0x2000035c

0001576c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1576c:	4800      	ldr	r0, [pc, #0]	; (15770 <bt_get_name+0x4>)
   1576e:	4770      	bx	lr
   15770:	000289e0 	.word	0x000289e0

00015774 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   15774:	b570      	push	{r4, r5, r6, lr}
   15776:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   15778:	2400      	movs	r4, #0
   1577a:	4b0a      	ldr	r3, [pc, #40]	; (157a4 <id_find+0x30>)
   1577c:	79db      	ldrb	r3, [r3, #7]
   1577e:	42a3      	cmp	r3, r4
   15780:	d90c      	bls.n	1579c <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   15782:	4626      	mov	r6, r4
   15784:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   15788:	2207      	movs	r2, #7
   1578a:	4b06      	ldr	r3, [pc, #24]	; (157a4 <id_find+0x30>)
   1578c:	4419      	add	r1, r3
   1578e:	4628      	mov	r0, r5
   15790:	f00d f920 	bl	229d4 <memcmp>
   15794:	b120      	cbz	r0, 157a0 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   15796:	3401      	adds	r4, #1
   15798:	b2e4      	uxtb	r4, r4
   1579a:	e7ee      	b.n	1577a <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   1579c:	f06f 0601 	mvn.w	r6, #1
}
   157a0:	4630      	mov	r0, r6
   157a2:	bd70      	pop	{r4, r5, r6, pc}
   157a4:	200002a0 	.word	0x200002a0

000157a8 <set_random_address>:
{
   157a8:	b570      	push	{r4, r5, r6, lr}
   157aa:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   157ac:	2206      	movs	r2, #6
   157ae:	4914      	ldr	r1, [pc, #80]	; (15800 <set_random_address+0x58>)
   157b0:	f00d f910 	bl	229d4 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   157b4:	4605      	mov	r5, r0
   157b6:	b908      	cbnz	r0, 157bc <set_random_address+0x14>
}
   157b8:	4628      	mov	r0, r5
   157ba:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   157bc:	2106      	movs	r1, #6
   157be:	f242 0005 	movw	r0, #8197	; 0x2005
   157c2:	f7ff f9f9 	bl	14bb8 <bt_hci_cmd_create>
	if (!buf) {
   157c6:	4605      	mov	r5, r0
   157c8:	b1b8      	cbz	r0, 157fa <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   157ca:	2206      	movs	r2, #6
   157cc:	4621      	mov	r1, r4
   157ce:	3008      	adds	r0, #8
   157d0:	f010 fb06 	bl	25de0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   157d4:	2200      	movs	r2, #0
   157d6:	4629      	mov	r1, r5
   157d8:	f242 0005 	movw	r0, #8197	; 0x2005
   157dc:	f7ff fa28 	bl	14c30 <bt_hci_cmd_send_sync>
	if (err) {
   157e0:	4605      	mov	r5, r0
   157e2:	2800      	cmp	r0, #0
   157e4:	d1e8      	bne.n	157b8 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   157e6:	4e06      	ldr	r6, [pc, #24]	; (15800 <set_random_address+0x58>)
   157e8:	2206      	movs	r2, #6
   157ea:	4621      	mov	r1, r4
   157ec:	4630      	mov	r0, r6
   157ee:	f00d f91e 	bl	22a2e <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   157f2:	2301      	movs	r3, #1
   157f4:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   157f8:	e7de      	b.n	157b8 <set_random_address+0x10>
		return -ENOBUFS;
   157fa:	f06f 0568 	mvn.w	r5, #104	; 0x68
   157fe:	e7db      	b.n	157b8 <set_random_address+0x10>
   15800:	20000301 	.word	0x20000301

00015804 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   15804:	b530      	push	{r4, r5, lr}
   15806:	b085      	sub	sp, #20
   15808:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1580a:	460d      	mov	r5, r1
   1580c:	b149      	cbz	r1, 15822 <id_create+0x1e>
   1580e:	2300      	movs	r3, #0
   15810:	9302      	str	r3, [sp, #8]
   15812:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   15816:	2207      	movs	r2, #7
   15818:	a902      	add	r1, sp, #8
   1581a:	4628      	mov	r0, r5
   1581c:	f00d f8da 	bl	229d4 <memcmp>
   15820:	b9e0      	cbnz	r0, 1585c <id_create+0x58>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   15822:	4668      	mov	r0, sp
   15824:	f00d f9bf 	bl	22ba6 <bt_addr_le_create_static>
			if (err) {
   15828:	4603      	mov	r3, r0
   1582a:	b9a0      	cbnz	r0, 15856 <id_create+0x52>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   1582c:	4668      	mov	r0, sp
   1582e:	f7ff ffa1 	bl	15774 <id_find>
   15832:	2800      	cmp	r0, #0
   15834:	daf5      	bge.n	15822 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   15836:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1583a:	4b0d      	ldr	r3, [pc, #52]	; (15870 <id_create+0x6c>)
   1583c:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
   1583e:	2207      	movs	r2, #7
   15840:	4669      	mov	r1, sp
   15842:	4620      	mov	r0, r4
   15844:	f00d f8f3 	bl	22a2e <memcpy>

		if (addr) {
   15848:	b125      	cbz	r5, 15854 <id_create+0x50>
   1584a:	2207      	movs	r2, #7
   1584c:	4621      	mov	r1, r4
   1584e:	4628      	mov	r0, r5
   15850:	f00d f8ed 	bl	22a2e <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   15854:	2300      	movs	r3, #0
}
   15856:	4618      	mov	r0, r3
   15858:	b005      	add	sp, #20
   1585a:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1585c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15860:	2207      	movs	r2, #7
   15862:	4629      	mov	r1, r5
   15864:	4802      	ldr	r0, [pc, #8]	; (15870 <id_create+0x6c>)
   15866:	4420      	add	r0, r4
   15868:	f00d f8e1 	bl	22a2e <memcpy>
}
   1586c:	e7f2      	b.n	15854 <id_create+0x50>
   1586e:	bf00      	nop
   15870:	200002a0 	.word	0x200002a0

00015874 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   15874:	b570      	push	{r4, r5, r6, lr}
   15876:	b084      	sub	sp, #16
   15878:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1587a:	4605      	mov	r5, r0
   1587c:	b1c0      	cbz	r0, 158b0 <bt_id_create+0x3c>
   1587e:	2300      	movs	r3, #0
   15880:	9300      	str	r3, [sp, #0]
   15882:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   15886:	2207      	movs	r2, #7
   15888:	4669      	mov	r1, sp
   1588a:	f00d f8a3 	bl	229d4 <memcmp>
   1588e:	b178      	cbz	r0, 158b0 <bt_id_create+0x3c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   15890:	782b      	ldrb	r3, [r5, #0]
   15892:	2b01      	cmp	r3, #1
   15894:	d132      	bne.n	158fc <bt_id_create+0x88>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   15896:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   15898:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1589c:	2bc0      	cmp	r3, #192	; 0xc0
   1589e:	d002      	beq.n	158a6 <bt_id_create+0x32>
			BT_ERR("Only static random identity address supported");
			return -EINVAL;
   158a0:	f06f 0015 	mvn.w	r0, #21
   158a4:	e028      	b.n	158f8 <bt_id_create+0x84>
		}

		if (id_find(addr) >= 0) {
   158a6:	4628      	mov	r0, r5
   158a8:	f7ff ff64 	bl	15774 <id_find>
   158ac:	2800      	cmp	r0, #0
   158ae:	da28      	bge.n	15902 <bt_id_create+0x8e>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   158b0:	bb6c      	cbnz	r4, 1590e <bt_id_create+0x9a>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   158b2:	4b1a      	ldr	r3, [pc, #104]	; (1591c <bt_id_create+0xa8>)
   158b4:	79db      	ldrb	r3, [r3, #7]
   158b6:	2b01      	cmp	r3, #1
   158b8:	d02c      	beq.n	15914 <bt_id_create+0xa0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   158ba:	f3bf 8f5b 	dmb	ish
   158be:	4b18      	ldr	r3, [pc, #96]	; (15920 <bt_id_create+0xac>)
   158c0:	681b      	ldr	r3, [r3, #0]
   158c2:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   158c6:	f013 0f01 	tst.w	r3, #1
   158ca:	d10a      	bne.n	158e2 <bt_id_create+0x6e>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   158cc:	b1e5      	cbz	r5, 15908 <bt_id_create+0x94>
   158ce:	2300      	movs	r3, #0
   158d0:	9302      	str	r3, [sp, #8]
   158d2:	f8cd 300b 	str.w	r3, [sp, #11]
   158d6:	2207      	movs	r2, #7
   158d8:	a902      	add	r1, sp, #8
   158da:	4628      	mov	r0, r5
   158dc:	f00d f87a 	bl	229d4 <memcmp>
   158e0:	b190      	cbz	r0, 15908 <bt_id_create+0x94>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   158e2:	4b0e      	ldr	r3, [pc, #56]	; (1591c <bt_id_create+0xa8>)
   158e4:	79de      	ldrb	r6, [r3, #7]
   158e6:	1c72      	adds	r2, r6, #1
   158e8:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   158ea:	4622      	mov	r2, r4
   158ec:	4629      	mov	r1, r5
   158ee:	4630      	mov	r0, r6
   158f0:	f7ff ff88 	bl	15804 <id_create>
	if (err) {
   158f4:	b900      	cbnz	r0, 158f8 <bt_id_create+0x84>
		return err;
	}

	return new_id;
   158f6:	4630      	mov	r0, r6
}
   158f8:	b004      	add	sp, #16
   158fa:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   158fc:	f06f 0015 	mvn.w	r0, #21
   15900:	e7fa      	b.n	158f8 <bt_id_create+0x84>
			return -EALREADY;
   15902:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15906:	e7f7      	b.n	158f8 <bt_id_create+0x84>
			return -EINVAL;
   15908:	f06f 0015 	mvn.w	r0, #21
   1590c:	e7f4      	b.n	158f8 <bt_id_create+0x84>
		return -EINVAL;
   1590e:	f06f 0015 	mvn.w	r0, #21
   15912:	e7f1      	b.n	158f8 <bt_id_create+0x84>
		return -ENOMEM;
   15914:	f06f 000b 	mvn.w	r0, #11
   15918:	e7ee      	b.n	158f8 <bt_id_create+0x84>
   1591a:	bf00      	nop
   1591c:	200002a0 	.word	0x200002a0
   15920:	2000036c 	.word	0x2000036c

00015924 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   15924:	b530      	push	{r4, r5, lr}
   15926:	b087      	sub	sp, #28
   15928:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1592a:	aa01      	add	r2, sp, #4
   1592c:	2100      	movs	r1, #0
   1592e:	f241 0009 	movw	r0, #4105	; 0x1009
   15932:	f7ff f97d 	bl	14c30 <bt_hci_cmd_send_sync>
	if (err) {
   15936:	b110      	cbz	r0, 1593e <bt_id_read_public_addr+0x1a>
		BT_WARN("Failed to read public address");
		return 0U;
   15938:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1593a:	b007      	add	sp, #28
   1593c:	bd30      	pop	{r4, r5, pc}
	rp = (void *)rsp->data;
   1593e:	9b01      	ldr	r3, [sp, #4]
   15940:	689c      	ldr	r4, [r3, #8]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15942:	3401      	adds	r4, #1
   15944:	2300      	movs	r3, #0
   15946:	9302      	str	r3, [sp, #8]
   15948:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   1594c:	2206      	movs	r2, #6
   1594e:	a902      	add	r1, sp, #8
   15950:	4620      	mov	r0, r4
   15952:	f00d f83f 	bl	229d4 <memcmp>
   15956:	b158      	cbz	r0, 15970 <bt_id_read_public_addr+0x4c>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   15958:	4b0e      	ldr	r3, [pc, #56]	; (15994 <bt_id_read_public_addr+0x70>)
   1595a:	e893 0003 	ldmia.w	r3, {r0, r1}
   1595e:	9004      	str	r0, [sp, #16]
   15960:	f8ad 1014 	strh.w	r1, [sp, #20]
   15964:	2206      	movs	r2, #6
   15966:	a904      	add	r1, sp, #16
   15968:	4620      	mov	r0, r4
   1596a:	f00d f833 	bl	229d4 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1596e:	b920      	cbnz	r0, 1597a <bt_id_read_public_addr+0x56>
		net_buf_unref(rsp);
   15970:	9801      	ldr	r0, [sp, #4]
   15972:	f010 f9e5 	bl	25d40 <net_buf_unref>
		return 0U;
   15976:	2000      	movs	r0, #0
   15978:	e7df      	b.n	1593a <bt_id_read_public_addr+0x16>
	memcpy(dst, src, sizeof(*dst));
   1597a:	2206      	movs	r2, #6
   1597c:	4621      	mov	r1, r4
   1597e:	1c68      	adds	r0, r5, #1
   15980:	f00d f855 	bl	22a2e <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   15984:	2300      	movs	r3, #0
   15986:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   15988:	9801      	ldr	r0, [sp, #4]
   1598a:	f010 f9d9 	bl	25d40 <net_buf_unref>
	return 1U;
   1598e:	2001      	movs	r0, #1
   15990:	e7d3      	b.n	1593a <bt_id_read_public_addr+0x16>
   15992:	bf00      	nop
   15994:	00028388 	.word	0x00028388

00015998 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   15998:	b500      	push	{lr}
   1599a:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1599c:	4668      	mov	r0, sp
   1599e:	f7ff ffc1 	bl	15924 <bt_id_read_public_addr>
   159a2:	4b06      	ldr	r3, [pc, #24]	; (159bc <bt_setup_public_id_addr+0x24>)
   159a4:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   159a6:	b918      	cbnz	r0, 159b0 <bt_setup_public_id_addr+0x18>
		return 0;
   159a8:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   159aa:	b003      	add	sp, #12
   159ac:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   159b0:	2200      	movs	r2, #0
   159b2:	4669      	mov	r1, sp
   159b4:	4610      	mov	r0, r2
   159b6:	f7ff ff25 	bl	15804 <id_create>
   159ba:	e7f6      	b.n	159aa <bt_setup_public_id_addr+0x12>
   159bc:	200002a0 	.word	0x200002a0

000159c0 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   159c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159c4:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   159c6:	4b15      	ldr	r3, [pc, #84]	; (15a1c <bt_read_static_addr+0x5c>)
   159c8:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   159cc:	f015 0501 	ands.w	r5, r5, #1
   159d0:	d103      	bne.n	159da <bt_read_static_addr+0x1a>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   159d2:	4628      	mov	r0, r5
   159d4:	b002      	add	sp, #8
   159d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   159da:	4606      	mov	r6, r0
   159dc:	4688      	mov	r8, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   159de:	aa01      	add	r2, sp, #4
   159e0:	2100      	movs	r1, #0
   159e2:	f64f 4009 	movw	r0, #64521	; 0xfc09
   159e6:	f7ff f923 	bl	14c30 <bt_hci_cmd_send_sync>
	if (err) {
   159ea:	4604      	mov	r4, r0
   159ec:	b998      	cbnz	r0, 15a16 <bt_read_static_addr+0x56>
	rp = (void *)rsp->data;
   159ee:	9b01      	ldr	r3, [sp, #4]
   159f0:	689f      	ldr	r7, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   159f2:	787d      	ldrb	r5, [r7, #1]
   159f4:	4545      	cmp	r5, r8
   159f6:	bf28      	it	cs
   159f8:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   159fa:	e006      	b.n	15a0a <bt_read_static_addr+0x4a>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   159fc:	2216      	movs	r2, #22
   159fe:	1cb9      	adds	r1, r7, #2
   15a00:	fb02 6004 	mla	r0, r2, r4, r6
   15a04:	f00d f813 	bl	22a2e <memcpy>
	for (i = 0; i < cnt; i++) {
   15a08:	3401      	adds	r4, #1
   15a0a:	42a5      	cmp	r5, r4
   15a0c:	dcf6      	bgt.n	159fc <bt_read_static_addr+0x3c>
	net_buf_unref(rsp);
   15a0e:	9801      	ldr	r0, [sp, #4]
   15a10:	f010 f996 	bl	25d40 <net_buf_unref>
	return cnt;
   15a14:	e7dd      	b.n	159d2 <bt_read_static_addr+0x12>
		return 0;
   15a16:	2500      	movs	r5, #0
   15a18:	e7db      	b.n	159d2 <bt_read_static_addr+0x12>
   15a1a:	bf00      	nop
   15a1c:	200002a0 	.word	0x200002a0

00015a20 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   15a20:	b510      	push	{r4, lr}
   15a22:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   15a24:	4b17      	ldr	r3, [pc, #92]	; (15a84 <bt_setup_random_id_addr+0x64>)
   15a26:	79dc      	ldrb	r4, [r3, #7]
   15a28:	b934      	cbnz	r4, 15a38 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   15a2a:	2101      	movs	r1, #1
   15a2c:	a802      	add	r0, sp, #8
   15a2e:	f7ff ffc7 	bl	159c0 <bt_read_static_addr>
   15a32:	4b14      	ldr	r3, [pc, #80]	; (15a84 <bt_setup_random_id_addr+0x64>)
   15a34:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   15a36:	b938      	cbnz	r0, 15a48 <bt_setup_random_id_addr+0x28>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   15a38:	2100      	movs	r1, #0
   15a3a:	4608      	mov	r0, r1
   15a3c:	f7ff ff1a 	bl	15874 <bt_id_create>
   15a40:	4603      	mov	r3, r0
}
   15a42:	4618      	mov	r0, r3
   15a44:	b008      	add	sp, #32
   15a46:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   15a48:	4b0e      	ldr	r3, [pc, #56]	; (15a84 <bt_setup_random_id_addr+0x64>)
   15a4a:	79db      	ldrb	r3, [r3, #7]
   15a4c:	42a3      	cmp	r3, r4
   15a4e:	d916      	bls.n	15a7e <bt_setup_random_id_addr+0x5e>
   15a50:	2206      	movs	r2, #6
   15a52:	2116      	movs	r1, #22
   15a54:	ab02      	add	r3, sp, #8
   15a56:	fb01 3104 	mla	r1, r1, r4, r3
   15a5a:	f10d 0001 	add.w	r0, sp, #1
   15a5e:	f00c ffe6 	bl	22a2e <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   15a62:	2301      	movs	r3, #1
   15a64:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   15a68:	2200      	movs	r2, #0
   15a6a:	4669      	mov	r1, sp
   15a6c:	4620      	mov	r0, r4
   15a6e:	f7ff fec9 	bl	15804 <id_create>
				if (err) {
   15a72:	4603      	mov	r3, r0
   15a74:	2800      	cmp	r0, #0
   15a76:	d1e4      	bne.n	15a42 <bt_setup_random_id_addr+0x22>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   15a78:	3401      	adds	r4, #1
   15a7a:	b2e4      	uxtb	r4, r4
   15a7c:	e7e4      	b.n	15a48 <bt_setup_random_id_addr+0x28>
			return 0;
   15a7e:	2300      	movs	r3, #0
   15a80:	e7df      	b.n	15a42 <bt_setup_random_id_addr+0x22>
   15a82:	bf00      	nop
   15a84:	200002a0 	.word	0x200002a0

00015a88 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   15a88:	b510      	push	{r4, lr}
   15a8a:	460c      	mov	r4, r1

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   15a8c:	4b07      	ldr	r3, [pc, #28]	; (15aac <bt_id_set_create_conn_own_addr+0x24>)
   15a8e:	781b      	ldrb	r3, [r3, #0]
   15a90:	2b01      	cmp	r3, #1
   15a92:	d004      	beq.n	15a9e <bt_id_set_create_conn_own_addr+0x16>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   15a94:	4b05      	ldr	r3, [pc, #20]	; (15aac <bt_id_set_create_conn_own_addr+0x24>)
   15a96:	781b      	ldrb	r3, [r3, #0]
   15a98:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   15a9a:	2000      	movs	r0, #0
}
   15a9c:	bd10      	pop	{r4, pc}
			err = set_random_address(&addr->a);
   15a9e:	4804      	ldr	r0, [pc, #16]	; (15ab0 <bt_id_set_create_conn_own_addr+0x28>)
   15aa0:	f7ff fe82 	bl	157a8 <set_random_address>
			if (err) {
   15aa4:	2800      	cmp	r0, #0
   15aa6:	d0f5      	beq.n	15a94 <bt_id_set_create_conn_own_addr+0xc>
   15aa8:	e7f8      	b.n	15a9c <bt_id_set_create_conn_own_addr+0x14>
   15aaa:	bf00      	nop
   15aac:	200002a0 	.word	0x200002a0
   15ab0:	200002a1 	.word	0x200002a1

00015ab4 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   15ab4:	b510      	push	{r4, lr}
   15ab6:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   15ab8:	4b07      	ldr	r3, [pc, #28]	; (15ad8 <bt_id_set_scan_own_addr+0x24>)
   15aba:	781b      	ldrb	r3, [r3, #0]
   15abc:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   15abe:	f00d fbd1 	bl	23264 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   15ac2:	b108      	cbz	r0, 15ac8 <bt_id_set_scan_own_addr+0x14>
				return err;
			}
		}
	}

	return 0;
   15ac4:	2000      	movs	r0, #0
}
   15ac6:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   15ac8:	f00d fbd0 	bl	2326c <bt_id_set_private_addr>
			if (err) {
   15acc:	2800      	cmp	r0, #0
   15ace:	d1fa      	bne.n	15ac6 <bt_id_set_scan_own_addr+0x12>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   15ad0:	2301      	movs	r3, #1
   15ad2:	7023      	strb	r3, [r4, #0]
   15ad4:	e7f7      	b.n	15ac6 <bt_id_set_scan_own_addr+0x12>
   15ad6:	bf00      	nop
   15ad8:	200002a0 	.word	0x200002a0

00015adc <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   15adc:	b508      	push	{r3, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   15ade:	4b0a      	ldr	r3, [pc, #40]	; (15b08 <bt_id_init+0x2c>)
   15ae0:	79db      	ldrb	r3, [r3, #7]
   15ae2:	b123      	cbz	r3, 15aee <bt_id_init+0x12>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   15ae4:	4b08      	ldr	r3, [pc, #32]	; (15b08 <bt_id_init+0x2c>)
   15ae6:	79db      	ldrb	r3, [r3, #7]
   15ae8:	b133      	cbz	r3, 15af8 <bt_id_init+0x1c>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   15aea:	2000      	movs	r0, #0
}
   15aec:	bd08      	pop	{r3, pc}
		err = bt_setup_public_id_addr();
   15aee:	f7ff ff53 	bl	15998 <bt_setup_public_id_addr>
		if (err) {
   15af2:	2800      	cmp	r0, #0
   15af4:	d0f6      	beq.n	15ae4 <bt_id_init+0x8>
   15af6:	e7f9      	b.n	15aec <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
   15af8:	f7ff ff92 	bl	15a20 <bt_setup_random_id_addr>
		if (err) {
   15afc:	2800      	cmp	r0, #0
   15afe:	d1f5      	bne.n	15aec <bt_id_init+0x10>
		err = set_random_address(&bt_dev.id_addr[0].a);
   15b00:	4802      	ldr	r0, [pc, #8]	; (15b0c <bt_id_init+0x30>)
   15b02:	f7ff fe51 	bl	157a8 <set_random_address>
		if (err) {
   15b06:	e7f1      	b.n	15aec <bt_id_init+0x10>
   15b08:	200002a0 	.word	0x200002a0
   15b0c:	200002a1 	.word	0x200002a1

00015b10 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   15b10:	b530      	push	{r4, r5, lr}
   15b12:	b087      	sub	sp, #28
   15b14:	4604      	mov	r4, r0
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   15b16:	2102      	movs	r1, #2
   15b18:	f242 000c 	movw	r0, #8204	; 0x200c
   15b1c:	f7ff f84c 	bl	14bb8 <bt_hci_cmd_create>
	if (!buf) {
   15b20:	b330      	cbz	r0, 15b70 <bt_le_scan_set_enable_legacy+0x60>
   15b22:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   15b24:	2102      	movs	r1, #2
   15b26:	3008      	adds	r0, #8
   15b28:	f010 f954 	bl	25dd4 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   15b2c:	2c01      	cmp	r4, #1
   15b2e:	d015      	beq.n	15b5c <bt_le_scan_set_enable_legacy+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   15b30:	2300      	movs	r3, #0
   15b32:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
   15b34:	7004      	strb	r4, [r0, #0]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   15b36:	2c01      	cmp	r4, #1
   15b38:	bf14      	ite	ne
   15b3a:	2400      	movne	r4, #0
   15b3c:	2401      	moveq	r4, #1
   15b3e:	9400      	str	r4, [sp, #0]
   15b40:	2305      	movs	r3, #5
   15b42:	4a0d      	ldr	r2, [pc, #52]	; (15b78 <bt_le_scan_set_enable_legacy+0x68>)
   15b44:	a903      	add	r1, sp, #12
   15b46:	4628      	mov	r0, r5
   15b48:	f7ff f824 	bl	14b94 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   15b4c:	2200      	movs	r2, #0
   15b4e:	4629      	mov	r1, r5
   15b50:	f242 000c 	movw	r0, #8204	; 0x200c
   15b54:	f7ff f86c 	bl	14c30 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   15b58:	b007      	add	sp, #28
   15b5a:	bd30      	pop	{r4, r5, pc}
   15b5c:	f3bf 8f5b 	dmb	ish
   15b60:	4b05      	ldr	r3, [pc, #20]	; (15b78 <bt_le_scan_set_enable_legacy+0x68>)
   15b62:	681b      	ldr	r3, [r3, #0]
   15b64:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15b68:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   15b6c:	7043      	strb	r3, [r0, #1]
   15b6e:	e7e1      	b.n	15b34 <bt_le_scan_set_enable_legacy+0x24>
		return -ENOBUFS;
   15b70:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15b74:	e7f0      	b.n	15b58 <bt_le_scan_set_enable_legacy+0x48>
   15b76:	bf00      	nop
   15b78:	2000036c 	.word	0x2000036c

00015b7c <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   15b7c:	4b01      	ldr	r3, [pc, #4]	; (15b84 <bt_scan_reset+0x8>)
   15b7e:	2200      	movs	r2, #0
   15b80:	601a      	str	r2, [r3, #0]
}
   15b82:	4770      	bx	lr
   15b84:	200031e0 	.word	0x200031e0

00015b88 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   15b88:	b570      	push	{r4, r5, r6, lr}
   15b8a:	b082      	sub	sp, #8
   15b8c:	4604      	mov	r4, r0
   15b8e:	460e      	mov	r6, r1
   15b90:	4615      	mov	r5, r2
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   15b92:	2207      	movs	r2, #7
   15b94:	2100      	movs	r1, #0
   15b96:	4668      	mov	r0, sp
   15b98:	f00c ff6d 	bl	22a76 <memset>

	set_param.scan_type = scan_type;
   15b9c:	f88d 4000 	strb.w	r4, [sp]

	/* for the rest parameters apply default values according to
	 *  spec 4.2, vol2, part E, 7.8.10
	 */
	set_param.interval = sys_cpu_to_le16(interval);
   15ba0:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   15ba4:	f8ad 5003 	strh.w	r5, [sp, #3]

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   15ba8:	2300      	movs	r3, #0
   15baa:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
   15bae:	2c01      	cmp	r4, #1
   15bb0:	bf14      	ite	ne
   15bb2:	2400      	movne	r4, #0
   15bb4:	2401      	moveq	r4, #1
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   15bb6:	f10d 0105 	add.w	r1, sp, #5
   15bba:	4620      	mov	r0, r4
   15bbc:	f7ff ff7a 	bl	15ab4 <bt_id_set_scan_own_addr>
	if (err) {
   15bc0:	b108      	cbz	r0, 15bc6 <start_le_scan_legacy+0x3e>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   15bc2:	b002      	add	sp, #8
   15bc4:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   15bc6:	2107      	movs	r1, #7
   15bc8:	f242 000b 	movw	r0, #8203	; 0x200b
   15bcc:	f7fe fff4 	bl	14bb8 <bt_hci_cmd_create>
	if (!buf) {
   15bd0:	4605      	mov	r5, r0
   15bd2:	b370      	cbz	r0, 15c32 <start_le_scan_legacy+0xaa>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15bd4:	2207      	movs	r2, #7
   15bd6:	4669      	mov	r1, sp
   15bd8:	3008      	adds	r0, #8
   15bda:	f010 f901 	bl	25de0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   15bde:	2200      	movs	r2, #0
   15be0:	4629      	mov	r1, r5
   15be2:	f242 000b 	movw	r0, #8203	; 0x200b
   15be6:	f7ff f823 	bl	14c30 <bt_hci_cmd_send_sync>
	if (err) {
   15bea:	2800      	cmp	r0, #0
   15bec:	d1e9      	bne.n	15bc2 <start_le_scan_legacy+0x3a>
	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   15bee:	2001      	movs	r0, #1
   15bf0:	f00d fb86 	bl	23300 <bt_le_scan_set_enable>
	if (err) {
   15bf4:	2800      	cmp	r0, #0
   15bf6:	d1e4      	bne.n	15bc2 <start_le_scan_legacy+0x3a>
	if (val) {
   15bf8:	b16c      	cbz	r4, 15c16 <start_le_scan_legacy+0x8e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15bfa:	4b0f      	ldr	r3, [pc, #60]	; (15c38 <start_le_scan_legacy+0xb0>)
   15bfc:	f3bf 8f5b 	dmb	ish
   15c00:	e853 2f00 	ldrex	r2, [r3]
   15c04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   15c08:	e843 2100 	strex	r1, r2, [r3]
   15c0c:	2900      	cmp	r1, #0
   15c0e:	d1f7      	bne.n	15c00 <start_le_scan_legacy+0x78>
   15c10:	f3bf 8f5b 	dmb	ish
   15c14:	e7d5      	b.n	15bc2 <start_le_scan_legacy+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15c16:	4b08      	ldr	r3, [pc, #32]	; (15c38 <start_le_scan_legacy+0xb0>)
   15c18:	f3bf 8f5b 	dmb	ish
   15c1c:	e853 2f00 	ldrex	r2, [r3]
   15c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   15c24:	e843 2100 	strex	r1, r2, [r3]
   15c28:	2900      	cmp	r1, #0
   15c2a:	d1f7      	bne.n	15c1c <start_le_scan_legacy+0x94>
   15c2c:	f3bf 8f5b 	dmb	ish
}
   15c30:	e7c7      	b.n	15bc2 <start_le_scan_legacy+0x3a>
		return -ENOBUFS;
   15c32:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15c36:	e7c4      	b.n	15bc2 <start_le_scan_legacy+0x3a>
   15c38:	2000036c 	.word	0x2000036c

00015c3c <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   15c3c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15c3e:	f3bf 8f5b 	dmb	ish
   15c42:	4b21      	ldr	r3, [pc, #132]	; (15cc8 <bt_le_scan_update+0x8c>)
   15c44:	681b      	ldr	r3, [r3, #0]
   15c46:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15c4a:	f3c3 1480 	ubfx	r4, r3, #6, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   15c4e:	f013 0f40 	tst.w	r3, #64	; 0x40
   15c52:	d002      	beq.n	15c5a <bt_le_scan_update+0x1e>
		return 0;
   15c54:	2400      	movs	r4, #0
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   15c56:	4620      	mov	r0, r4
   15c58:	bd38      	pop	{r3, r4, r5, pc}
   15c5a:	4605      	mov	r5, r0
   15c5c:	f3bf 8f5b 	dmb	ish
   15c60:	4b19      	ldr	r3, [pc, #100]	; (15cc8 <bt_le_scan_update+0x8c>)
   15c62:	681b      	ldr	r3, [r3, #0]
   15c64:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   15c68:	f013 0f20 	tst.w	r3, #32
   15c6c:	d003      	beq.n	15c76 <bt_le_scan_update+0x3a>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   15c6e:	2000      	movs	r0, #0
   15c70:	f00d fb46 	bl	23300 <bt_le_scan_set_enable>
		if (err) {
   15c74:	bb28      	cbnz	r0, 15cc2 <bt_le_scan_update+0x86>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   15c76:	2206      	movs	r2, #6
   15c78:	2100      	movs	r1, #0
   15c7a:	4608      	mov	r0, r1
   15c7c:	f000 fc48 	bl	16510 <bt_conn_lookup_state_le>
		if (conn) {
   15c80:	b110      	cbz	r0, 15c88 <bt_le_scan_update+0x4c>
			bt_conn_unref(conn);
   15c82:	f00d fdad 	bl	237e0 <bt_conn_unref>
			return 0;
   15c86:	e7e6      	b.n	15c56 <bt_le_scan_update+0x1a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   15c88:	2202      	movs	r2, #2
   15c8a:	2100      	movs	r1, #0
   15c8c:	4608      	mov	r0, r1
   15c8e:	f000 fc3f 	bl	16510 <bt_conn_lookup_state_le>
		if (conn) {
   15c92:	4603      	mov	r3, r0
   15c94:	2800      	cmp	r0, #0
   15c96:	d0de      	beq.n	15c56 <bt_le_scan_update+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15c98:	4a0b      	ldr	r2, [pc, #44]	; (15cc8 <bt_le_scan_update+0x8c>)
   15c9a:	f3bf 8f5b 	dmb	ish
   15c9e:	e852 1f00 	ldrex	r1, [r2]
   15ca2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   15ca6:	e842 1000 	strex	r0, r1, [r2]
   15caa:	2800      	cmp	r0, #0
   15cac:	d1f7      	bne.n	15c9e <bt_le_scan_update+0x62>
   15cae:	f3bf 8f5b 	dmb	ish
			bt_conn_unref(conn);
   15cb2:	4618      	mov	r0, r3
   15cb4:	f00d fd94 	bl	237e0 <bt_conn_unref>
			return start_passive_scan(fast_scan);
   15cb8:	4628      	mov	r0, r5
   15cba:	f00d fb25 	bl	23308 <start_passive_scan>
   15cbe:	4604      	mov	r4, r0
   15cc0:	e7c9      	b.n	15c56 <bt_le_scan_update+0x1a>
			return err;
   15cc2:	4604      	mov	r4, r0
   15cc4:	e7c7      	b.n	15c56 <bt_le_scan_update+0x1a>
   15cc6:	bf00      	nop
   15cc8:	2000036c 	.word	0x2000036c

00015ccc <check_pending_conn>:

#if defined(CONFIG_BT_CENTRAL)
static void check_pending_conn(const bt_addr_le_t *id_addr,
			       const bt_addr_le_t *addr, uint8_t adv_props)
{
   15ccc:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15cce:	f3bf 8f5b 	dmb	ish
   15cd2:	4b20      	ldr	r3, [pc, #128]	; (15d54 <check_pending_conn+0x88>)
   15cd4:	681b      	ldr	r3, [r3, #0]
   15cd6:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   15cda:	f013 0f40 	tst.w	r3, #64	; 0x40
   15cde:	d103      	bne.n	15ce8 <check_pending_conn+0x1c>
   15ce0:	460c      	mov	r4, r1
		return;
	}

	/* Return if event is not connectable */
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   15ce2:	f012 0f01 	tst.w	r2, #1
   15ce6:	d100      	bne.n	15cea <check_pending_conn+0x1e>
failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
	bt_conn_unref(conn);
	bt_le_scan_update(false);
}
   15ce8:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   15cea:	2202      	movs	r2, #2
   15cec:	4601      	mov	r1, r0
   15cee:	2000      	movs	r0, #0
   15cf0:	f000 fc0e 	bl	16510 <bt_conn_lookup_state_le>
	if (!conn) {
   15cf4:	4605      	mov	r5, r0
   15cf6:	2800      	cmp	r0, #0
   15cf8:	d0f6      	beq.n	15ce8 <check_pending_conn+0x1c>
   15cfa:	f3bf 8f5b 	dmb	ish
   15cfe:	4b15      	ldr	r3, [pc, #84]	; (15d54 <check_pending_conn+0x88>)
   15d00:	681b      	ldr	r3, [r3, #0]
   15d02:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   15d06:	f013 0f20 	tst.w	r3, #32
   15d0a:	d003      	beq.n	15d14 <check_pending_conn+0x48>
	    bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE)) {
   15d0c:	2000      	movs	r0, #0
   15d0e:	f00d faf7 	bl	23300 <bt_le_scan_set_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   15d12:	b948      	cbnz	r0, 15d28 <check_pending_conn+0x5c>
	memcpy(dst, src, sizeof(*dst));
   15d14:	2207      	movs	r2, #7
   15d16:	4621      	mov	r1, r4
   15d18:	f105 0096 	add.w	r0, r5, #150	; 0x96
   15d1c:	f00c fe87 	bl	22a2e <memcpy>
	if (bt_le_create_conn(conn)) {
   15d20:	4628      	mov	r0, r5
   15d22:	f00d f8b4 	bl	22e8e <bt_le_create_conn>
   15d26:	b160      	cbz	r0, 15d42 <check_pending_conn+0x76>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   15d28:	231f      	movs	r3, #31
   15d2a:	726b      	strb	r3, [r5, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15d2c:	2100      	movs	r1, #0
   15d2e:	4628      	mov	r0, r5
   15d30:	f000 fa6c 	bl	1620c <bt_conn_set_state>
	bt_conn_unref(conn);
   15d34:	4628      	mov	r0, r5
   15d36:	f00d fd53 	bl	237e0 <bt_conn_unref>
	bt_le_scan_update(false);
   15d3a:	2000      	movs	r0, #0
   15d3c:	f7ff ff7e 	bl	15c3c <bt_le_scan_update>
   15d40:	e7d2      	b.n	15ce8 <check_pending_conn+0x1c>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   15d42:	2106      	movs	r1, #6
   15d44:	4628      	mov	r0, r5
   15d46:	f000 fa61 	bl	1620c <bt_conn_set_state>
	bt_conn_unref(conn);
   15d4a:	4628      	mov	r0, r5
   15d4c:	f00d fd48 	bl	237e0 <bt_conn_unref>
	return;
   15d50:	e7ca      	b.n	15ce8 <check_pending_conn+0x1c>
   15d52:	bf00      	nop
   15d54:	2000036c 	.word	0x2000036c

00015d58 <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf *buf, uint8_t len)
{
   15d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d5c:	b087      	sub	sp, #28
   15d5e:	9001      	str	r0, [sp, #4]
   15d60:	4689      	mov	r9, r1
   15d62:	4616      	mov	r6, r2
   15d64:	469b      	mov	fp, r3
   15d66:	f3bf 8f5b 	dmb	ish
   15d6a:	4b45      	ldr	r3, [pc, #276]	; (15e80 <le_adv_recv+0x128>)
   15d6c:	681b      	ldr	r3, [r3, #0]
   15d6e:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	BT_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr),
	       info->adv_type, len, info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   15d72:	f013 0f40 	tst.w	r3, #64	; 0x40
   15d76:	d003      	beq.n	15d80 <le_adv_recv+0x28>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
   15d78:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   15d7a:	f013 0f04 	tst.w	r3, #4
   15d7e:	d17b      	bne.n	15e78 <le_adv_recv+0x120>
		BT_DBG("Dropped direct adv report");
		return;
	}

	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   15d80:	9b01      	ldr	r3, [sp, #4]
   15d82:	781a      	ldrb	r2, [r3, #0]
   15d84:	1e93      	subs	r3, r2, #2
   15d86:	b2db      	uxtb	r3, r3
   15d88:	2b01      	cmp	r3, #1
   15d8a:	d933      	bls.n	15df4 <le_adv_recv+0x9c>
	    addr->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&id_addr, addr);
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   15d8c:	2aff      	cmp	r2, #255	; 0xff
   15d8e:	d03c      	beq.n	15e0a <le_adv_recv+0xb2>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
   15d90:	9901      	ldr	r1, [sp, #4]
   15d92:	2000      	movs	r0, #0
   15d94:	f00d fa68 	bl	23268 <bt_lookup_id_addr>
   15d98:	4601      	mov	r1, r0
   15d9a:	2207      	movs	r2, #7
   15d9c:	a802      	add	r0, sp, #8
   15d9e:	f00c fe46 	bl	22a2e <memcpy>
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	info->addr = &id_addr;
   15da2:	ab02      	add	r3, sp, #8
   15da4:	f8c9 3000 	str.w	r3, [r9]

	if (scan_dev_found_cb) {
   15da8:	4b36      	ldr	r3, [pc, #216]	; (15e84 <le_adv_recv+0x12c>)
   15daa:	681b      	ldr	r3, [r3, #0]
   15dac:	b1b3      	cbz	r3, 15ddc <le_adv_recv+0x84>
		net_buf_simple_save(&buf->b, &state);
   15dae:	f106 0708 	add.w	r7, r6, #8
	state->offset = net_buf_simple_headroom(buf);
   15db2:	4638      	mov	r0, r7
   15db4:	f010 f850 	bl	25e58 <net_buf_simple_headroom>
   15db8:	b284      	uxth	r4, r0
	state->len = buf->len;
   15dba:	89b5      	ldrh	r5, [r6, #12]

		buf->len = len;
   15dbc:	f8a6 b00c 	strh.w	fp, [r6, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   15dc0:	4b30      	ldr	r3, [pc, #192]	; (15e84 <le_adv_recv+0x12c>)
   15dc2:	f8d3 8000 	ldr.w	r8, [r3]
   15dc6:	463b      	mov	r3, r7
   15dc8:	f899 2007 	ldrb.w	r2, [r9, #7]
   15dcc:	f999 1005 	ldrsb.w	r1, [r9, #5]
   15dd0:	a802      	add	r0, sp, #8
   15dd2:	47c0      	blx	r8
	buf->data = buf->__buf + state->offset;
   15dd4:	6933      	ldr	r3, [r6, #16]
   15dd6:	4423      	add	r3, r4
   15dd8:	60b3      	str	r3, [r6, #8]
	buf->len = state->len;
   15dda:	81b5      	strh	r5, [r6, #12]
	return list->head;
   15ddc:	4b2a      	ldr	r3, [pc, #168]	; (15e88 <le_adv_recv+0x130>)
   15dde:	681d      	ldr	r5, [r3, #0]
				  &buf->b);

		net_buf_simple_restore(&buf->b, &state);
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   15de0:	b1ed      	cbz	r5, 15e1e <le_adv_recv+0xc6>
   15de2:	3d08      	subs	r5, #8
   15de4:	d01d      	beq.n	15e22 <le_adv_recv+0xca>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15de6:	f115 0408 	adds.w	r4, r5, #8
   15dea:	d01f      	beq.n	15e2c <le_adv_recv+0xd4>
	return node->next;
   15dec:	68ac      	ldr	r4, [r5, #8]
   15dee:	b1ec      	cbz	r4, 15e2c <le_adv_recv+0xd4>
   15df0:	3c08      	subs	r4, #8
   15df2:	e01b      	b.n	15e2c <le_adv_recv+0xd4>
   15df4:	2207      	movs	r2, #7
   15df6:	9901      	ldr	r1, [sp, #4]
   15df8:	a802      	add	r0, sp, #8
   15dfa:	f00c fe18 	bl	22a2e <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15dfe:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15e02:	3b02      	subs	r3, #2
   15e04:	f88d 3008 	strb.w	r3, [sp, #8]
   15e08:	e7cb      	b.n	15da2 <le_adv_recv+0x4a>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   15e0a:	2300      	movs	r3, #0
   15e0c:	9304      	str	r3, [sp, #16]
   15e0e:	f8cd 3013 	str.w	r3, [sp, #19]
   15e12:	2207      	movs	r2, #7
   15e14:	a904      	add	r1, sp, #16
   15e16:	a802      	add	r0, sp, #8
   15e18:	f00c fe09 	bl	22a2e <memcpy>
   15e1c:	e7c1      	b.n	15da2 <le_adv_recv+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   15e1e:	462c      	mov	r4, r5
   15e20:	e004      	b.n	15e2c <le_adv_recv+0xd4>
   15e22:	462c      	mov	r4, r5
   15e24:	e002      	b.n	15e2c <le_adv_recv+0xd4>
   15e26:	4623      	mov	r3, r4
   15e28:	4625      	mov	r5, r4
   15e2a:	461c      	mov	r4, r3
   15e2c:	b1f5      	cbz	r5, 15e6c <le_adv_recv+0x114>
		if (listener->recv) {
   15e2e:	682b      	ldr	r3, [r5, #0]
   15e30:	b193      	cbz	r3, 15e58 <le_adv_recv+0x100>
			net_buf_simple_save(&buf->b, &state);
   15e32:	f106 0808 	add.w	r8, r6, #8
	state->offset = net_buf_simple_headroom(buf);
   15e36:	4640      	mov	r0, r8
   15e38:	f010 f80e 	bl	25e58 <net_buf_simple_headroom>
   15e3c:	b287      	uxth	r7, r0
	state->len = buf->len;
   15e3e:	f8b6 a00c 	ldrh.w	sl, [r6, #12]

			buf->len = len;
   15e42:	f8a6 b00c 	strh.w	fp, [r6, #12]
			listener->recv(info, &buf->b);
   15e46:	682b      	ldr	r3, [r5, #0]
   15e48:	4641      	mov	r1, r8
   15e4a:	4648      	mov	r0, r9
   15e4c:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   15e4e:	6930      	ldr	r0, [r6, #16]
   15e50:	4438      	add	r0, r7
   15e52:	60b0      	str	r0, [r6, #8]
	buf->len = state->len;
   15e54:	f8a6 a00c 	strh.w	sl, [r6, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   15e58:	2c00      	cmp	r4, #0
   15e5a:	d0e4      	beq.n	15e26 <le_adv_recv+0xce>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15e5c:	f114 0308 	adds.w	r3, r4, #8
   15e60:	d0e2      	beq.n	15e28 <le_adv_recv+0xd0>
	return node->next;
   15e62:	68a3      	ldr	r3, [r4, #8]
   15e64:	2b00      	cmp	r3, #0
   15e66:	d0df      	beq.n	15e28 <le_adv_recv+0xd0>
   15e68:	3b08      	subs	r3, #8
   15e6a:	e7dd      	b.n	15e28 <le_adv_recv+0xd0>
			net_buf_simple_restore(&buf->b, &state);
		}
	}

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
   15e6c:	f899 2008 	ldrb.w	r2, [r9, #8]
   15e70:	9901      	ldr	r1, [sp, #4]
   15e72:	a802      	add	r0, sp, #8
   15e74:	f7ff ff2a 	bl	15ccc <check_pending_conn>
#endif /* CONFIG_BT_CENTRAL */
}
   15e78:	b007      	add	sp, #28
   15e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e7e:	bf00      	nop
   15e80:	2000036c 	.word	0x2000036c
   15e84:	200031e0 	.word	0x200031e0
   15e88:	200031d8 	.word	0x200031d8

00015e8c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   15e8c:	b538      	push	{r3, r4, r5, lr}
   15e8e:	f3bf 8f5b 	dmb	ish
   15e92:	4b48      	ldr	r3, [pc, #288]	; (15fb4 <bt_le_scan_start+0x128>)
   15e94:	681b      	ldr	r3, [r3, #0]
   15e96:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15e9a:	f013 0f02 	tst.w	r3, #2
   15e9e:	d07d      	beq.n	15f9c <bt_le_scan_start+0x110>
   15ea0:	4604      	mov	r4, r0
   15ea2:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
   15ea4:	f00d fa09 	bl	232ba <valid_le_scan_param>
   15ea8:	2800      	cmp	r0, #0
   15eaa:	d07a      	beq.n	15fa2 <bt_le_scan_start+0x116>
		return -EINVAL;
	}

	if (param->type && !bt_id_scan_random_addr_check()) {
   15eac:	7823      	ldrb	r3, [r4, #0]
   15eae:	b11b      	cbz	r3, 15eb8 <bt_le_scan_start+0x2c>
   15eb0:	f00d f9f0 	bl	23294 <bt_id_scan_random_addr_check>
   15eb4:	2800      	cmp	r0, #0
   15eb6:	d077      	beq.n	15fa8 <bt_le_scan_start+0x11c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15eb8:	4b3e      	ldr	r3, [pc, #248]	; (15fb4 <bt_le_scan_start+0x128>)
   15eba:	f3bf 8f5b 	dmb	ish
   15ebe:	e853 2f00 	ldrex	r2, [r3]
   15ec2:	f042 0140 	orr.w	r1, r2, #64	; 0x40
   15ec6:	e843 1000 	strex	r0, r1, [r3]
   15eca:	2800      	cmp	r0, #0
   15ecc:	d1f7      	bne.n	15ebe <bt_le_scan_start+0x32>
   15ece:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   15ed2:	f012 0f40 	tst.w	r2, #64	; 0x40
   15ed6:	d16a      	bne.n	15fae <bt_le_scan_start+0x122>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15ed8:	f3bf 8f5b 	dmb	ish
   15edc:	681b      	ldr	r3, [r3, #0]
   15ede:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   15ee2:	f013 0f20 	tst.w	r3, #32
   15ee6:	d003      	beq.n	15ef0 <bt_le_scan_start+0x64>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   15ee8:	2000      	movs	r0, #0
   15eea:	f00d fa09 	bl	23300 <bt_le_scan_set_enable>
		if (err) {
   15eee:	b9d8      	cbnz	r0, 15f28 <bt_le_scan_start+0x9c>
			return err;
		}
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
			  param->options & BT_LE_SCAN_OPT_FILTER_DUPLICATE);
   15ef0:	6863      	ldr	r3, [r4, #4]
	if (val) {
   15ef2:	f013 0f01 	tst.w	r3, #1
   15ef6:	d025      	beq.n	15f44 <bt_le_scan_start+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15ef8:	4b2e      	ldr	r3, [pc, #184]	; (15fb4 <bt_le_scan_start+0x128>)
   15efa:	f3bf 8f5b 	dmb	ish
   15efe:	e853 2f00 	ldrex	r2, [r3]
   15f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   15f06:	e843 2100 	strex	r1, r2, [r3]
   15f0a:	2900      	cmp	r1, #0
   15f0c:	d1f7      	bne.n	15efe <bt_le_scan_start+0x72>
   15f0e:	f3bf 8f5b 	dmb	ish
			phy_coded = &param_coded;
		}

		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
	} else {
		if (param->timeout) {
   15f12:	89a3      	ldrh	r3, [r4, #12]
   15f14:	bb23      	cbnz	r3, 15f60 <bt_le_scan_start+0xd4>
			atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
			return -ENOTSUP;
		}

		err = start_le_scan_legacy(param->type, param->interval,
   15f16:	8962      	ldrh	r2, [r4, #10]
   15f18:	8921      	ldrh	r1, [r4, #8]
   15f1a:	7820      	ldrb	r0, [r4, #0]
   15f1c:	f7ff fe34 	bl	15b88 <start_le_scan_legacy>
					   param->window);
	}

	if (err) {
   15f20:	bb70      	cbnz	r0, 15f80 <bt_le_scan_start+0xf4>
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
	}

	scan_dev_found_cb = cb;
   15f22:	4b25      	ldr	r3, [pc, #148]	; (15fb8 <bt_le_scan_start+0x12c>)
   15f24:	601d      	str	r5, [r3, #0]

	return 0;
}
   15f26:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15f28:	4b22      	ldr	r3, [pc, #136]	; (15fb4 <bt_le_scan_start+0x128>)
   15f2a:	f3bf 8f5b 	dmb	ish
   15f2e:	e853 2f00 	ldrex	r2, [r3]
   15f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15f36:	e843 2100 	strex	r1, r2, [r3]
   15f3a:	2900      	cmp	r1, #0
   15f3c:	d1f7      	bne.n	15f2e <bt_le_scan_start+0xa2>
   15f3e:	f3bf 8f5b 	dmb	ish
			return err;
   15f42:	e7f0      	b.n	15f26 <bt_le_scan_start+0x9a>
   15f44:	4b1b      	ldr	r3, [pc, #108]	; (15fb4 <bt_le_scan_start+0x128>)
   15f46:	f3bf 8f5b 	dmb	ish
   15f4a:	e853 2f00 	ldrex	r2, [r3]
   15f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   15f52:	e843 2100 	strex	r1, r2, [r3]
   15f56:	2900      	cmp	r1, #0
   15f58:	d1f7      	bne.n	15f4a <bt_le_scan_start+0xbe>
   15f5a:	f3bf 8f5b 	dmb	ish
   15f5e:	e7d8      	b.n	15f12 <bt_le_scan_start+0x86>
   15f60:	4b14      	ldr	r3, [pc, #80]	; (15fb4 <bt_le_scan_start+0x128>)
   15f62:	f3bf 8f5b 	dmb	ish
   15f66:	e853 2f00 	ldrex	r2, [r3]
   15f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15f6e:	e843 2100 	strex	r1, r2, [r3]
   15f72:	2900      	cmp	r1, #0
   15f74:	d1f7      	bne.n	15f66 <bt_le_scan_start+0xda>
   15f76:	f3bf 8f5b 	dmb	ish
			return -ENOTSUP;
   15f7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15f7e:	e7d2      	b.n	15f26 <bt_le_scan_start+0x9a>
   15f80:	4b0c      	ldr	r3, [pc, #48]	; (15fb4 <bt_le_scan_start+0x128>)
   15f82:	f3bf 8f5b 	dmb	ish
   15f86:	e853 2f00 	ldrex	r2, [r3]
   15f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15f8e:	e843 2100 	strex	r1, r2, [r3]
   15f92:	2900      	cmp	r1, #0
   15f94:	d1f7      	bne.n	15f86 <bt_le_scan_start+0xfa>
   15f96:	f3bf 8f5b 	dmb	ish
		return err;
   15f9a:	e7c4      	b.n	15f26 <bt_le_scan_start+0x9a>
		return -EAGAIN;
   15f9c:	f06f 000a 	mvn.w	r0, #10
   15fa0:	e7c1      	b.n	15f26 <bt_le_scan_start+0x9a>
		return -EINVAL;
   15fa2:	f06f 0015 	mvn.w	r0, #21
   15fa6:	e7be      	b.n	15f26 <bt_le_scan_start+0x9a>
		return -EINVAL;
   15fa8:	f06f 0015 	mvn.w	r0, #21
   15fac:	e7bb      	b.n	15f26 <bt_le_scan_start+0x9a>
		return -EALREADY;
   15fae:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15fb2:	e7b8      	b.n	15f26 <bt_le_scan_start+0x9a>
   15fb4:	2000036c 	.word	0x2000036c
   15fb8:	200031e0 	.word	0x200031e0

00015fbc <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   15fbc:	b508      	push	{r3, lr}
   15fbe:	4b0c      	ldr	r3, [pc, #48]	; (15ff0 <bt_le_scan_stop+0x34>)
   15fc0:	f3bf 8f5b 	dmb	ish
   15fc4:	e853 2f00 	ldrex	r2, [r3]
   15fc8:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   15fcc:	e843 1000 	strex	r0, r1, [r3]
   15fd0:	2800      	cmp	r0, #0
   15fd2:	d1f7      	bne.n	15fc4 <bt_le_scan_stop+0x8>
   15fd4:	f3bf 8f5b 	dmb	ish
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   15fd8:	f012 0f40 	tst.w	r2, #64	; 0x40
   15fdc:	d005      	beq.n	15fea <bt_le_scan_stop+0x2e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   15fde:	2000      	movs	r0, #0
   15fe0:	4b04      	ldr	r3, [pc, #16]	; (15ff4 <bt_le_scan_stop+0x38>)
   15fe2:	6018      	str	r0, [r3, #0]
#if defined(CONFIG_BT_SMP)
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
   15fe4:	f7ff fe2a 	bl	15c3c <bt_le_scan_update>
}
   15fe8:	bd08      	pop	{r3, pc}
		return -EALREADY;
   15fea:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15fee:	e7fb      	b.n	15fe8 <bt_le_scan_stop+0x2c>
   15ff0:	2000036c 	.word	0x2000036c
   15ff4:	200031e0 	.word	0x200031e0

00015ff8 <bt_le_scan_cb_register>:

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   15ff8:	f100 0308 	add.w	r3, r0, #8
	parent->next = child;
   15ffc:	2200      	movs	r2, #0
   15ffe:	6082      	str	r2, [r0, #8]
	return list->tail;
   16000:	4a05      	ldr	r2, [pc, #20]	; (16018 <bt_le_scan_cb_register+0x20>)
   16002:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
   16004:	b11a      	cbz	r2, 1600e <bt_le_scan_cb_register+0x16>
	parent->next = child;
   16006:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16008:	4a03      	ldr	r2, [pc, #12]	; (16018 <bt_le_scan_cb_register+0x20>)
   1600a:	6053      	str	r3, [r2, #4]
}
   1600c:	4770      	bx	lr
   1600e:	4a02      	ldr	r2, [pc, #8]	; (16018 <bt_le_scan_cb_register+0x20>)
   16010:	6053      	str	r3, [r2, #4]
	list->head = node;
   16012:	6013      	str	r3, [r2, #0]
}
   16014:	4770      	bx	lr
   16016:	bf00      	nop
   16018:	200031d8 	.word	0x200031d8

0001601c <notify_disconnected>:
		bt_gatt_connected(conn);
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   1601c:	b538      	push	{r3, r4, r5, lr}
   1601e:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   16020:	4b0c      	ldr	r3, [pc, #48]	; (16054 <notify_disconnected+0x38>)
   16022:	681c      	ldr	r4, [r3, #0]
   16024:	e000      	b.n	16028 <notify_disconnected+0xc>
   16026:	6924      	ldr	r4, [r4, #16]
   16028:	b134      	cbz	r4, 16038 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   1602a:	6863      	ldr	r3, [r4, #4]
   1602c:	2b00      	cmp	r3, #0
   1602e:	d0fa      	beq.n	16026 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   16030:	7a69      	ldrb	r1, [r5, #9]
   16032:	4628      	mov	r0, r5
   16034:	4798      	blx	r3
   16036:	e7f6      	b.n	16026 <notify_disconnected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16038:	4c07      	ldr	r4, [pc, #28]	; (16058 <notify_disconnected+0x3c>)
   1603a:	e000      	b.n	1603e <notify_disconnected+0x22>
   1603c:	3414      	adds	r4, #20
   1603e:	4b07      	ldr	r3, [pc, #28]	; (1605c <notify_disconnected+0x40>)
   16040:	429c      	cmp	r4, r3
   16042:	d206      	bcs.n	16052 <notify_disconnected+0x36>
		if (cb->disconnected) {
   16044:	6863      	ldr	r3, [r4, #4]
   16046:	2b00      	cmp	r3, #0
   16048:	d0f8      	beq.n	1603c <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   1604a:	7a69      	ldrb	r1, [r5, #9]
   1604c:	4628      	mov	r0, r5
   1604e:	4798      	blx	r3
   16050:	e7f4      	b.n	1603c <notify_disconnected+0x20>
		}
	}
}
   16052:	bd38      	pop	{r3, r4, r5, pc}
   16054:	200031e4 	.word	0x200031e4
   16058:	00028278 	.word	0x00028278
   1605c:	0002828c 	.word	0x0002828c

00016060 <create_param_setup>:

	return true;
}

static void create_param_setup(const struct bt_conn_le_create_param *param)
{
   16060:	b430      	push	{r4, r5}
	bt_dev.create_param = *param;
   16062:	4d0c      	ldr	r5, [pc, #48]	; (16094 <create_param_setup+0x34>)
   16064:	f105 0408 	add.w	r4, r5, #8
   16068:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1606a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	bt_dev.create_param.timeout =
		(bt_dev.create_param.timeout != 0) ?
   1606e:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   16070:	b90b      	cbnz	r3, 16076 <create_param_setup+0x16>
   16072:	f44f 7396 	mov.w	r3, #300	; 0x12c
   16076:	4a07      	ldr	r2, [pc, #28]	; (16094 <create_param_setup+0x34>)
   16078:	8293      	strh	r3, [r2, #20]
		bt_dev.create_param.timeout :
		(MSEC_PER_SEC / 10) * CONFIG_BT_CREATE_CONN_TIMEOUT;

	bt_dev.create_param.interval_coded =
		(bt_dev.create_param.interval_coded != 0) ?
   1607a:	8a13      	ldrh	r3, [r2, #16]
	bt_dev.create_param.interval_coded =
   1607c:	b903      	cbnz	r3, 16080 <create_param_setup+0x20>
   1607e:	8993      	ldrh	r3, [r2, #12]
   16080:	4a04      	ldr	r2, [pc, #16]	; (16094 <create_param_setup+0x34>)
   16082:	8213      	strh	r3, [r2, #16]
		bt_dev.create_param.interval_coded :
		bt_dev.create_param.interval;

	bt_dev.create_param.window_coded =
		(bt_dev.create_param.window_coded != 0) ?
   16084:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   16086:	b903      	cbnz	r3, 1608a <create_param_setup+0x2a>
   16088:	89d3      	ldrh	r3, [r2, #14]
   1608a:	4a02      	ldr	r2, [pc, #8]	; (16094 <create_param_setup+0x34>)
   1608c:	8253      	strh	r3, [r2, #18]
		bt_dev.create_param.window_coded :
		bt_dev.create_param.window;
}
   1608e:	bc30      	pop	{r4, r5}
   16090:	4770      	bx	lr
   16092:	bf00      	nop
   16094:	200002a0 	.word	0x200002a0

00016098 <tx_free>:
{
   16098:	b508      	push	{r3, lr}
   1609a:	4601      	mov	r1, r0
	tx->cb = NULL;
   1609c:	2300      	movs	r3, #0
   1609e:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   160a0:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   160a2:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   160a4:	4801      	ldr	r0, [pc, #4]	; (160ac <tx_free+0x14>)
   160a6:	f011 faf9 	bl	2769c <k_queue_append>
}
   160aa:	bd08      	pop	{r3, pc}
   160ac:	200008c0 	.word	0x200008c0

000160b0 <conn_tx_alloc>:
{
   160b0:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   160b2:	f007 fec5 	bl	1de40 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   160b6:	4b08      	ldr	r3, [pc, #32]	; (160d8 <conn_tx_alloc+0x28>)
   160b8:	4283      	cmp	r3, r0
   160ba:	d007      	beq.n	160cc <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   160bc:	f04f 32ff 	mov.w	r2, #4294967295
   160c0:	f04f 33ff 	mov.w	r3, #4294967295
   160c4:	4805      	ldr	r0, [pc, #20]	; (160dc <conn_tx_alloc+0x2c>)
   160c6:	f007 f8a1 	bl	1d20c <z_impl_k_queue_get>
}
   160ca:	bd08      	pop	{r3, pc}
   160cc:	2200      	movs	r2, #0
   160ce:	2300      	movs	r3, #0
   160d0:	4802      	ldr	r0, [pc, #8]	; (160dc <conn_tx_alloc+0x2c>)
   160d2:	f007 f89b 	bl	1d20c <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   160d6:	e7f8      	b.n	160ca <conn_tx_alloc+0x1a>
   160d8:	200028e8 	.word	0x200028e8
   160dc:	200008c0 	.word	0x200008c0

000160e0 <notify_connected>:
{
   160e0:	b538      	push	{r3, r4, r5, lr}
   160e2:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   160e4:	4b0f      	ldr	r3, [pc, #60]	; (16124 <notify_connected+0x44>)
   160e6:	681c      	ldr	r4, [r3, #0]
   160e8:	e000      	b.n	160ec <notify_connected+0xc>
   160ea:	6924      	ldr	r4, [r4, #16]
   160ec:	b134      	cbz	r4, 160fc <notify_connected+0x1c>
		if (cb->connected) {
   160ee:	6823      	ldr	r3, [r4, #0]
   160f0:	2b00      	cmp	r3, #0
   160f2:	d0fa      	beq.n	160ea <notify_connected+0xa>
			cb->connected(conn, conn->err);
   160f4:	7a69      	ldrb	r1, [r5, #9]
   160f6:	4628      	mov	r0, r5
   160f8:	4798      	blx	r3
   160fa:	e7f6      	b.n	160ea <notify_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   160fc:	4c0a      	ldr	r4, [pc, #40]	; (16128 <notify_connected+0x48>)
   160fe:	e000      	b.n	16102 <notify_connected+0x22>
   16100:	3414      	adds	r4, #20
   16102:	4b0a      	ldr	r3, [pc, #40]	; (1612c <notify_connected+0x4c>)
   16104:	429c      	cmp	r4, r3
   16106:	d206      	bcs.n	16116 <notify_connected+0x36>
		if (cb->connected) {
   16108:	6823      	ldr	r3, [r4, #0]
   1610a:	2b00      	cmp	r3, #0
   1610c:	d0f8      	beq.n	16100 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   1610e:	7a69      	ldrb	r1, [r5, #9]
   16110:	4628      	mov	r0, r5
   16112:	4798      	blx	r3
   16114:	e7f4      	b.n	16100 <notify_connected+0x20>
	if (!conn->err) {
   16116:	7a6b      	ldrb	r3, [r5, #9]
   16118:	b103      	cbz	r3, 1611c <notify_connected+0x3c>
}
   1611a:	bd38      	pop	{r3, r4, r5, pc}
		bt_gatt_connected(conn);
   1611c:	4628      	mov	r0, r5
   1611e:	f001 fe6b 	bl	17df8 <bt_gatt_connected>
}
   16122:	e7fa      	b.n	1611a <notify_connected+0x3a>
   16124:	200031e4 	.word	0x200031e4
   16128:	00028278 	.word	0x00028278
   1612c:	0002828c 	.word	0x0002828c

00016130 <bt_conn_get_pkts>:
}
   16130:	4800      	ldr	r0, [pc, #0]	; (16134 <bt_conn_get_pkts+0x4>)
   16132:	4770      	bx	lr
   16134:	200003a0 	.word	0x200003a0

00016138 <bt_conn_new>:
{
   16138:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < size; i++) {
   1613a:	2300      	movs	r3, #0
   1613c:	428b      	cmp	r3, r1
   1613e:	d228      	bcs.n	16192 <bt_conn_new+0x5a>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   16140:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   16144:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   16148:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1614c:	2501      	movs	r5, #1
   1614e:	f3bf 8f5b 	dmb	ish
   16152:	e852 6f00 	ldrex	r6, [r2]
   16156:	2e00      	cmp	r6, #0
   16158:	d104      	bne.n	16164 <bt_conn_new+0x2c>
   1615a:	e842 5c00 	strex	ip, r5, [r2]
   1615e:	f1bc 0f00 	cmp.w	ip, #0
   16162:	d1f6      	bne.n	16152 <bt_conn_new+0x1a>
   16164:	f3bf 8f5b 	dmb	ish
   16168:	d111      	bne.n	1618e <bt_conn_new+0x56>
	if (!conn) {
   1616a:	b174      	cbz	r4, 1618a <bt_conn_new+0x52>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1616c:	22b8      	movs	r2, #184	; 0xb8
   1616e:	2100      	movs	r1, #0
   16170:	4620      	mov	r0, r4
   16172:	f00c fc80 	bl	22a76 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   16176:	4908      	ldr	r1, [pc, #32]	; (16198 <bt_conn_new+0x60>)
   16178:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1617c:	f011 fb90 	bl	278a0 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   16180:	4906      	ldr	r1, [pc, #24]	; (1619c <bt_conn_new+0x64>)
   16182:	f104 0028 	add.w	r0, r4, #40	; 0x28
   16186:	f011 fb65 	bl	27854 <k_work_init>
}
   1618a:	4620      	mov	r0, r4
   1618c:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < size; i++) {
   1618e:	442b      	add	r3, r5
   16190:	e7d4      	b.n	1613c <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   16192:	2400      	movs	r4, #0
   16194:	e7e9      	b.n	1616a <bt_conn_new+0x32>
   16196:	bf00      	nop
   16198:	00023949 	.word	0x00023949
   1619c:	00023403 	.word	0x00023403

000161a0 <acl_conn_new>:
{
   161a0:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   161a2:	2104      	movs	r1, #4
   161a4:	4801      	ldr	r0, [pc, #4]	; (161ac <acl_conn_new+0xc>)
   161a6:	f7ff ffc7 	bl	16138 <bt_conn_new>
}
   161aa:	bd08      	pop	{r3, pc}
   161ac:	20001a10 	.word	0x20001a10

000161b0 <bt_conn_prepare_events>:
{
   161b0:	b570      	push	{r4, r5, r6, lr}
   161b2:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
   161b4:	4b0e      	ldr	r3, [pc, #56]	; (161f0 <bt_conn_prepare_events+0x40>)
   161b6:	2400      	movs	r4, #0
   161b8:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   161ba:	4622      	mov	r2, r4
   161bc:	2101      	movs	r1, #1
   161be:	f011 fe7f 	bl	27ec0 <k_poll_event_init>
   161c2:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   161c4:	e000      	b.n	161c8 <bt_conn_prepare_events+0x18>
   161c6:	3401      	adds	r4, #1
   161c8:	2c03      	cmp	r4, #3
   161ca:	dc0e      	bgt.n	161ea <bt_conn_prepare_events+0x3a>
		conn = &acl_conns[i];
   161cc:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   161d0:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   161d4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   161d8:	4b06      	ldr	r3, [pc, #24]	; (161f4 <bt_conn_prepare_events+0x44>)
   161da:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   161de:	f00d fa6e 	bl	236be <conn_prepare_events>
   161e2:	2800      	cmp	r0, #0
   161e4:	d1ef      	bne.n	161c6 <bt_conn_prepare_events+0x16>
			ev_count++;
   161e6:	3501      	adds	r5, #1
   161e8:	e7ed      	b.n	161c6 <bt_conn_prepare_events+0x16>
}
   161ea:	4628      	mov	r0, r5
   161ec:	bd70      	pop	{r4, r5, r6, pc}
   161ee:	bf00      	nop
   161f0:	200005dc 	.word	0x200005dc
   161f4:	20001a10 	.word	0x20001a10

000161f8 <bt_conn_lookup_handle>:
{
   161f8:	b508      	push	{r3, lr}
   161fa:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   161fc:	2104      	movs	r1, #4
   161fe:	4802      	ldr	r0, [pc, #8]	; (16208 <bt_conn_lookup_handle+0x10>)
   16200:	f00d fafb 	bl	237fa <conn_lookup_handle>
}
   16204:	bd08      	pop	{r3, pc}
   16206:	bf00      	nop
   16208:	20001a10 	.word	0x20001a10

0001620c <bt_conn_set_state>:
{
   1620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   1620e:	7a84      	ldrb	r4, [r0, #10]
   16210:	428c      	cmp	r4, r1
   16212:	f000 80a5 	beq.w	16360 <bt_conn_set_state+0x154>
   16216:	4605      	mov	r5, r0
	conn->state = state;
   16218:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1621a:	b15c      	cbz	r4, 16234 <bt_conn_set_state+0x28>
   1621c:	2c06      	cmp	r4, #6
   1621e:	d00f      	beq.n	16240 <bt_conn_set_state+0x34>
	switch (conn->state) {
   16220:	7aab      	ldrb	r3, [r5, #10]
   16222:	2b07      	cmp	r3, #7
   16224:	f200 809c 	bhi.w	16360 <bt_conn_set_state+0x154>
   16228:	e8df f003 	tbb	[pc, r3]
   1622c:	9a9a9721 	.word	0x9a9a9721
   16230:	11739a9a 	.word	0x11739a9a
		if (conn->type != BT_CONN_TYPE_ISO) {
   16234:	7883      	ldrb	r3, [r0, #2]
   16236:	2b08      	cmp	r3, #8
   16238:	d0f2      	beq.n	16220 <bt_conn_set_state+0x14>
			bt_conn_ref(conn);
   1623a:	f00d faaa 	bl	23792 <bt_conn_ref>
   1623e:	e7ef      	b.n	16220 <bt_conn_set_state+0x14>
		    conn->type == BT_CONN_TYPE_LE) {
   16240:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16242:	2b01      	cmp	r3, #1
   16244:	d1ec      	bne.n	16220 <bt_conn_set_state+0x14>
			k_work_cancel_delayable(&conn->deferred_work);
   16246:	3058      	adds	r0, #88	; 0x58
   16248:	f011 fb76 	bl	27938 <k_work_cancel_delayable>
   1624c:	e7e8      	b.n	16220 <bt_conn_set_state+0x14>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1624e:	78ab      	ldrb	r3, [r5, #2]
   16250:	2b04      	cmp	r3, #4
   16252:	f000 8085 	beq.w	16360 <bt_conn_set_state+0x154>
		k_fifo_init(&conn->tx_queue);
   16256:	f105 0038 	add.w	r0, r5, #56	; 0x38
	z_impl_k_queue_init(queue);
   1625a:	f011 fa13 	bl	27684 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1625e:	2100      	movs	r1, #0
   16260:	4840      	ldr	r0, [pc, #256]	; (16364 <bt_conn_set_state+0x158>)
   16262:	f008 fa6d 	bl	1e740 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   16266:	2300      	movs	r3, #0
   16268:	652b      	str	r3, [r5, #80]	; 0x50
	list->tail = NULL;
   1626a:	656b      	str	r3, [r5, #84]	; 0x54
}
   1626c:	e078      	b.n	16360 <bt_conn_set_state+0x154>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1626e:	78ab      	ldrb	r3, [r5, #2]
   16270:	2b04      	cmp	r3, #4
   16272:	d007      	beq.n	16284 <bt_conn_set_state+0x78>
		switch (old_state) {
   16274:	3c01      	subs	r4, #1
   16276:	2c05      	cmp	r4, #5
   16278:	d872      	bhi.n	16360 <bt_conn_set_state+0x154>
   1627a:	e8df f004 	tbb	[pc, r4]
   1627e:	2e07      	.short	0x2e07
   16280:	24384642 	.word	0x24384642
			bt_conn_unref(conn);
   16284:	4628      	mov	r0, r5
   16286:	f00d faab 	bl	237e0 <bt_conn_unref>
			break;
   1628a:	e069      	b.n	16360 <bt_conn_set_state+0x154>
			tx_notify(conn);
   1628c:	4628      	mov	r0, r5
   1628e:	f00d f893 	bl	233b8 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   16292:	78ab      	ldrb	r3, [r5, #2]
   16294:	2b01      	cmp	r3, #1
   16296:	d011      	beq.n	162bc <bt_conn_set_state+0xb0>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   16298:	3504      	adds	r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1629a:	f3bf 8f5b 	dmb	ish
   1629e:	e855 3f00 	ldrex	r3, [r5]
   162a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   162a6:	e845 3200 	strex	r2, r3, [r5]
   162aa:	2a00      	cmp	r2, #0
   162ac:	d1f7      	bne.n	1629e <bt_conn_set_state+0x92>
   162ae:	f3bf 8f5b 	dmb	ish
   162b2:	2100      	movs	r1, #0
   162b4:	482b      	ldr	r0, [pc, #172]	; (16364 <bt_conn_set_state+0x158>)
   162b6:	f008 fa43 	bl	1e740 <z_impl_k_poll_signal_raise>
   162ba:	e051      	b.n	16360 <bt_conn_set_state+0x154>
				k_work_cancel_delayable(&conn->deferred_work);
   162bc:	f105 0058 	add.w	r0, r5, #88	; 0x58
   162c0:	f011 fb3a 	bl	27938 <k_work_cancel_delayable>
   162c4:	e7e8      	b.n	16298 <bt_conn_set_state+0x8c>
			if (conn->err) {
   162c6:	7a6b      	ldrb	r3, [r5, #9]
   162c8:	b91b      	cbnz	r3, 162d2 <bt_conn_set_state+0xc6>
			bt_conn_unref(conn);
   162ca:	4628      	mov	r0, r5
   162cc:	f00d fa88 	bl	237e0 <bt_conn_unref>
			break;
   162d0:	e046      	b.n	16360 <bt_conn_set_state+0x154>
				notify_connected(conn);
   162d2:	4628      	mov	r0, r5
   162d4:	f7ff ff04 	bl	160e0 <notify_connected>
   162d8:	e7f7      	b.n	162ca <bt_conn_set_state+0xbe>
			if (conn->err) {
   162da:	7a6b      	ldrb	r3, [r5, #9]
   162dc:	b91b      	cbnz	r3, 162e6 <bt_conn_set_state+0xda>
			bt_conn_unref(conn);
   162de:	4628      	mov	r0, r5
   162e0:	f00d fa7e 	bl	237e0 <bt_conn_unref>
			break;
   162e4:	e03c      	b.n	16360 <bt_conn_set_state+0x154>
				notify_connected(conn);
   162e6:	4628      	mov	r0, r5
   162e8:	f7ff fefa 	bl	160e0 <notify_connected>
   162ec:	e7f7      	b.n	162de <bt_conn_set_state+0xd2>
			if (conn->err) {
   162ee:	7a6b      	ldrb	r3, [r5, #9]
   162f0:	b91b      	cbnz	r3, 162fa <bt_conn_set_state+0xee>
			bt_conn_unref(conn);
   162f2:	4628      	mov	r0, r5
   162f4:	f00d fa74 	bl	237e0 <bt_conn_unref>
			break;
   162f8:	e032      	b.n	16360 <bt_conn_set_state+0x154>
				notify_connected(conn);
   162fa:	4628      	mov	r0, r5
   162fc:	f7ff fef0 	bl	160e0 <notify_connected>
   16300:	e7f7      	b.n	162f2 <bt_conn_set_state+0xe6>
			bt_conn_unref(conn);
   16302:	4628      	mov	r0, r5
   16304:	f00d fa6c 	bl	237e0 <bt_conn_unref>
			break;
   16308:	e02a      	b.n	16360 <bt_conn_set_state+0x154>
			bt_conn_unref(conn);
   1630a:	4628      	mov	r0, r5
   1630c:	f00d fa68 	bl	237e0 <bt_conn_unref>
			break;
   16310:	e026      	b.n	16360 <bt_conn_set_state+0x154>
		if (conn->type == BT_CONN_TYPE_SCO) {
   16312:	78ab      	ldrb	r3, [r5, #2]
   16314:	2b04      	cmp	r3, #4
   16316:	d023      	beq.n	16360 <bt_conn_set_state+0x154>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16318:	2b01      	cmp	r3, #1
   1631a:	d121      	bne.n	16360 <bt_conn_set_state+0x154>
					K_MSEC(10 * bt_dev.create_param.timeout));
   1631c:	4b12      	ldr	r3, [pc, #72]	; (16368 <bt_conn_set_state+0x15c>)
   1631e:	8a9b      	ldrh	r3, [r3, #20]
   16320:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   16324:	005b      	lsls	r3, r3, #1
   16326:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1632a:	17df      	asrs	r7, r3, #31
		} else {
			return (t * to_hz + off) / from_hz;
   1632c:	03f9      	lsls	r1, r7, #15
   1632e:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   16332:	03d8      	lsls	r0, r3, #15
   16334:	f240 34e7 	movw	r4, #999	; 0x3e7
   16338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1633c:	2300      	movs	r3, #0
   1633e:	1900      	adds	r0, r0, r4
   16340:	f04f 0400 	mov.w	r4, #0
   16344:	eb44 0101 	adc.w	r1, r4, r1
   16348:	f7ea feda 	bl	1100 <__aeabi_uldivmod>
   1634c:	4602      	mov	r2, r0
   1634e:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   16350:	f105 0058 	add.w	r0, r5, #88	; 0x58
   16354:	f007 f9a6 	bl	1d6a4 <k_work_schedule>
   16358:	e002      	b.n	16360 <bt_conn_set_state+0x154>
		process_unack_tx(conn);
   1635a:	4628      	mov	r0, r5
   1635c:	f00d f8f3 	bl	23546 <process_unack_tx>
}
   16360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16362:	bf00      	nop
   16364:	200005dc 	.word	0x200005dc
   16368:	200002a0 	.word	0x200002a0

0001636c <bt_conn_index>:
		index = conn - acl_conns;
   1636c:	4b03      	ldr	r3, [pc, #12]	; (1637c <bt_conn_index+0x10>)
   1636e:	1ac0      	subs	r0, r0, r3
   16370:	1180      	asrs	r0, r0, #6
   16372:	4b03      	ldr	r3, [pc, #12]	; (16380 <bt_conn_index+0x14>)
   16374:	fb03 f000 	mul.w	r0, r3, r0
}
   16378:	b2c0      	uxtb	r0, r0
   1637a:	4770      	bx	lr
   1637c:	20001a10 	.word	0x20001a10
   16380:	aaaaaaab 	.word	0xaaaaaaab

00016384 <bt_conn_create_pdu_timeout>:
{
   16384:	b538      	push	{r3, r4, r5, lr}
   16386:	460c      	mov	r4, r1
	if (!pool) {
   16388:	4601      	mov	r1, r0
   1638a:	b150      	cbz	r0, 163a2 <bt_conn_create_pdu_timeout+0x1e>
	return net_buf_alloc_fixed(pool, timeout);
   1638c:	4608      	mov	r0, r1
   1638e:	f00f fc9e 	bl	25cce <net_buf_alloc_fixed>
	if (!buf) {
   16392:	4605      	mov	r5, r0
   16394:	b118      	cbz	r0, 1639e <bt_conn_create_pdu_timeout+0x1a>
	net_buf_simple_reserve(&buf->b, reserve);
   16396:	1d21      	adds	r1, r4, #4
   16398:	3008      	adds	r0, #8
   1639a:	f00f fcc0 	bl	25d1e <net_buf_simple_reserve>
}
   1639e:	4628      	mov	r0, r5
   163a0:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
   163a2:	4901      	ldr	r1, [pc, #4]	; (163a8 <bt_conn_create_pdu_timeout+0x24>)
   163a4:	e7f2      	b.n	1638c <bt_conn_create_pdu_timeout+0x8>
   163a6:	bf00      	nop
   163a8:	200008f0 	.word	0x200008f0

000163ac <notify_le_param_updated>:
{
   163ac:	b570      	push	{r4, r5, r6, lr}
   163ae:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   163b0:	f3bf 8f5b 	dmb	ish
   163b4:	6843      	ldr	r3, [r0, #4]
   163b6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   163ba:	f413 7f00 	tst.w	r3, #512	; 0x200
   163be:	d010      	beq.n	163e2 <notify_le_param_updated+0x36>
   163c0:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   163c2:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   163c6:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   163ca:	428b      	cmp	r3, r1
   163cc:	d309      	bcc.n	163e2 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   163ce:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   163d2:	428b      	cmp	r3, r1
   163d4:	d805      	bhi.n	163e2 <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   163d6:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   163da:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
   163de:	4299      	cmp	r1, r3
   163e0:	d002      	beq.n	163e8 <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
   163e2:	4b18      	ldr	r3, [pc, #96]	; (16444 <notify_le_param_updated+0x98>)
   163e4:	681d      	ldr	r5, [r3, #0]
   163e6:	e00d      	b.n	16404 <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   163e8:	f3bf 8f5b 	dmb	ish
   163ec:	e852 3f00 	ldrex	r3, [r2]
   163f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   163f4:	e842 3100 	strex	r1, r3, [r2]
   163f8:	2900      	cmp	r1, #0
   163fa:	d1f7      	bne.n	163ec <notify_le_param_updated+0x40>
   163fc:	f3bf 8f5b 	dmb	ish
}
   16400:	e7ef      	b.n	163e2 <notify_le_param_updated+0x36>
   16402:	692d      	ldr	r5, [r5, #16]
   16404:	b15d      	cbz	r5, 1641e <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   16406:	68ee      	ldr	r6, [r5, #12]
   16408:	2e00      	cmp	r6, #0
   1640a:	d0fa      	beq.n	16402 <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   1640c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   16410:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   16414:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   16418:	4620      	mov	r0, r4
   1641a:	47b0      	blx	r6
   1641c:	e7f1      	b.n	16402 <notify_le_param_updated+0x56>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1641e:	4d0a      	ldr	r5, [pc, #40]	; (16448 <notify_le_param_updated+0x9c>)
   16420:	e000      	b.n	16424 <notify_le_param_updated+0x78>
   16422:	3514      	adds	r5, #20
   16424:	4b09      	ldr	r3, [pc, #36]	; (1644c <notify_le_param_updated+0xa0>)
   16426:	429d      	cmp	r5, r3
   16428:	d20b      	bcs.n	16442 <notify_le_param_updated+0x96>
		if (cb->le_param_updated) {
   1642a:	68ee      	ldr	r6, [r5, #12]
   1642c:	2e00      	cmp	r6, #0
   1642e:	d0f8      	beq.n	16422 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   16430:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   16434:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   16438:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1643c:	4620      	mov	r0, r4
   1643e:	47b0      	blx	r6
   16440:	e7ef      	b.n	16422 <notify_le_param_updated+0x76>
}
   16442:	bd70      	pop	{r4, r5, r6, pc}
   16444:	200031e4 	.word	0x200031e4
   16448:	00028278 	.word	0x00028278
   1644c:	0002828c 	.word	0x0002828c

00016450 <le_param_req>:
{
   16450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16452:	4606      	mov	r6, r0
   16454:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   16456:	4608      	mov	r0, r1
   16458:	f00c fd37 	bl	22eca <bt_le_conn_params_valid>
   1645c:	4607      	mov	r7, r0
   1645e:	b338      	cbz	r0, 164b0 <le_param_req+0x60>
	for (cb = callback_list; cb; cb = cb->_next) {
   16460:	4b15      	ldr	r3, [pc, #84]	; (164b8 <le_param_req+0x68>)
   16462:	681c      	ldr	r4, [r3, #0]
   16464:	e000      	b.n	16468 <le_param_req+0x18>
   16466:	6924      	ldr	r4, [r4, #16]
   16468:	b16c      	cbz	r4, 16486 <le_param_req+0x36>
		if (!cb->le_param_req) {
   1646a:	68a3      	ldr	r3, [r4, #8]
   1646c:	2b00      	cmp	r3, #0
   1646e:	d0fa      	beq.n	16466 <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   16470:	4629      	mov	r1, r5
   16472:	4630      	mov	r0, r6
   16474:	4798      	blx	r3
   16476:	b1d0      	cbz	r0, 164ae <le_param_req+0x5e>
		if (!bt_le_conn_params_valid(param)) {
   16478:	4628      	mov	r0, r5
   1647a:	f00c fd26 	bl	22eca <bt_le_conn_params_valid>
   1647e:	2800      	cmp	r0, #0
   16480:	d1f1      	bne.n	16466 <le_param_req+0x16>
			return false;
   16482:	4607      	mov	r7, r0
   16484:	e014      	b.n	164b0 <le_param_req+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16486:	4c0d      	ldr	r4, [pc, #52]	; (164bc <le_param_req+0x6c>)
   16488:	e000      	b.n	1648c <le_param_req+0x3c>
   1648a:	3414      	adds	r4, #20
   1648c:	4b0c      	ldr	r3, [pc, #48]	; (164c0 <le_param_req+0x70>)
   1648e:	429c      	cmp	r4, r3
   16490:	d20e      	bcs.n	164b0 <le_param_req+0x60>
		if (!cb->le_param_req) {
   16492:	68a3      	ldr	r3, [r4, #8]
   16494:	2b00      	cmp	r3, #0
   16496:	d0f8      	beq.n	1648a <le_param_req+0x3a>
		if (!cb->le_param_req(conn, param)) {
   16498:	4629      	mov	r1, r5
   1649a:	4630      	mov	r0, r6
   1649c:	4798      	blx	r3
   1649e:	b148      	cbz	r0, 164b4 <le_param_req+0x64>
		if (!bt_le_conn_params_valid(param)) {
   164a0:	4628      	mov	r0, r5
   164a2:	f00c fd12 	bl	22eca <bt_le_conn_params_valid>
   164a6:	2800      	cmp	r0, #0
   164a8:	d1ef      	bne.n	1648a <le_param_req+0x3a>
			return false;
   164aa:	4607      	mov	r7, r0
   164ac:	e000      	b.n	164b0 <le_param_req+0x60>
			return false;
   164ae:	4607      	mov	r7, r0
}
   164b0:	4638      	mov	r0, r7
   164b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   164b4:	4607      	mov	r7, r0
   164b6:	e7fb      	b.n	164b0 <le_param_req+0x60>
   164b8:	200031e4 	.word	0x200031e4
   164bc:	00028278 	.word	0x00028278
   164c0:	0002828c 	.word	0x0002828c

000164c4 <bt_conn_lookup_addr_le>:
{
   164c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   164c6:	4607      	mov	r7, r0
   164c8:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   164ca:	2400      	movs	r4, #0
   164cc:	e002      	b.n	164d4 <bt_conn_lookup_addr_le+0x10>
			bt_conn_unref(conn);
   164ce:	f00d f987 	bl	237e0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   164d2:	3401      	adds	r4, #1
   164d4:	2c03      	cmp	r4, #3
   164d6:	dc17      	bgt.n	16508 <bt_conn_lookup_addr_le+0x44>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   164d8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   164dc:	480b      	ldr	r0, [pc, #44]	; (1650c <bt_conn_lookup_addr_le+0x48>)
   164de:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   164e2:	f00d f956 	bl	23792 <bt_conn_ref>
		if (!conn) {
   164e6:	4605      	mov	r5, r0
   164e8:	2800      	cmp	r0, #0
   164ea:	d0f2      	beq.n	164d2 <bt_conn_lookup_addr_le+0xe>
		if (conn->type != BT_CONN_TYPE_LE) {
   164ec:	7883      	ldrb	r3, [r0, #2]
   164ee:	2b01      	cmp	r3, #1
   164f0:	d1ed      	bne.n	164ce <bt_conn_lookup_addr_le+0xa>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   164f2:	4632      	mov	r2, r6
   164f4:	4639      	mov	r1, r7
   164f6:	f00d f9cd 	bl	23894 <bt_conn_is_peer_addr_le>
   164fa:	b108      	cbz	r0, 16500 <bt_conn_lookup_addr_le+0x3c>
}
   164fc:	4628      	mov	r0, r5
   164fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   16500:	4628      	mov	r0, r5
   16502:	f00d f96d 	bl	237e0 <bt_conn_unref>
			continue;
   16506:	e7e4      	b.n	164d2 <bt_conn_lookup_addr_le+0xe>
	return NULL;
   16508:	2500      	movs	r5, #0
   1650a:	e7f7      	b.n	164fc <bt_conn_lookup_addr_le+0x38>
   1650c:	20001a10 	.word	0x20001a10

00016510 <bt_conn_lookup_state_le>:
{
   16510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16514:	4607      	mov	r7, r0
   16516:	460e      	mov	r6, r1
   16518:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1651a:	2400      	movs	r4, #0
   1651c:	e00a      	b.n	16534 <bt_conn_lookup_state_le+0x24>
			bt_conn_unref(conn);
   1651e:	f00d f95f 	bl	237e0 <bt_conn_unref>
			continue;
   16522:	e006      	b.n	16532 <bt_conn_lookup_state_le+0x22>
			bt_conn_unref(conn);
   16524:	4628      	mov	r0, r5
   16526:	f00d f95b 	bl	237e0 <bt_conn_unref>
			continue;
   1652a:	e002      	b.n	16532 <bt_conn_lookup_state_le+0x22>
			bt_conn_unref(conn);
   1652c:	4628      	mov	r0, r5
   1652e:	f00d f957 	bl	237e0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16532:	3401      	adds	r4, #1
   16534:	2c03      	cmp	r4, #3
   16536:	dc1a      	bgt.n	1656e <bt_conn_lookup_state_le+0x5e>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16538:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1653c:	480e      	ldr	r0, [pc, #56]	; (16578 <bt_conn_lookup_state_le+0x68>)
   1653e:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   16542:	f00d f926 	bl	23792 <bt_conn_ref>
		if (!conn) {
   16546:	4605      	mov	r5, r0
   16548:	2800      	cmp	r0, #0
   1654a:	d0f2      	beq.n	16532 <bt_conn_lookup_state_le+0x22>
		if (conn->type != BT_CONN_TYPE_LE) {
   1654c:	7883      	ldrb	r3, [r0, #2]
   1654e:	2b01      	cmp	r3, #1
   16550:	d1e5      	bne.n	1651e <bt_conn_lookup_state_le+0xe>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   16552:	b12e      	cbz	r6, 16560 <bt_conn_lookup_state_le+0x50>
   16554:	4632      	mov	r2, r6
   16556:	4639      	mov	r1, r7
   16558:	f00d f99c 	bl	23894 <bt_conn_is_peer_addr_le>
   1655c:	2800      	cmp	r0, #0
   1655e:	d0e1      	beq.n	16524 <bt_conn_lookup_state_le+0x14>
		if (!(conn->state == state && conn->id == id)) {
   16560:	7aab      	ldrb	r3, [r5, #10]
   16562:	4543      	cmp	r3, r8
   16564:	d1e2      	bne.n	1652c <bt_conn_lookup_state_le+0x1c>
   16566:	7a2b      	ldrb	r3, [r5, #8]
   16568:	42bb      	cmp	r3, r7
   1656a:	d001      	beq.n	16570 <bt_conn_lookup_state_le+0x60>
   1656c:	e7de      	b.n	1652c <bt_conn_lookup_state_le+0x1c>
	return NULL;
   1656e:	2500      	movs	r5, #0
}
   16570:	4628      	mov	r0, r5
   16572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16576:	bf00      	nop
   16578:	20001a10 	.word	0x20001a10

0001657c <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   1657c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1657e:	b083      	sub	sp, #12
   16580:	461f      	mov	r7, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16582:	f3bf 8f5b 	dmb	ish
   16586:	4b44      	ldr	r3, [pc, #272]	; (16698 <bt_conn_le_create+0x11c>)
   16588:	681b      	ldr	r3, [r3, #0]
   1658a:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1658e:	f013 0f02 	tst.w	r3, #2
   16592:	d068      	beq.n	16666 <bt_conn_le_create+0xea>
   16594:	4604      	mov	r4, r0
   16596:	460e      	mov	r6, r1
   16598:	4615      	mov	r5, r2
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   1659a:	4610      	mov	r0, r2
   1659c:	f00c fc95 	bl	22eca <bt_le_conn_params_valid>
   165a0:	2800      	cmp	r0, #0
   165a2:	d063      	beq.n	1666c <bt_conn_le_create+0xf0>
		return -EINVAL;
	}

	if (!create_param_validate(create_param)) {
   165a4:	4630      	mov	r0, r6
   165a6:	f00c ff05 	bl	233b4 <create_param_validate>
   165aa:	2800      	cmp	r0, #0
   165ac:	d061      	beq.n	16672 <bt_conn_le_create+0xf6>
   165ae:	f3bf 8f5b 	dmb	ish
   165b2:	4b39      	ldr	r3, [pc, #228]	; (16698 <bt_conn_le_create+0x11c>)
   165b4:	681b      	ldr	r3, [r3, #0]
   165b6:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   165ba:	f013 0f40 	tst.w	r3, #64	; 0x40
   165be:	d15b      	bne.n	16678 <bt_conn_le_create+0xfc>
   165c0:	f3bf 8f5b 	dmb	ish
   165c4:	4b34      	ldr	r3, [pc, #208]	; (16698 <bt_conn_le_create+0x11c>)
   165c6:	681b      	ldr	r3, [r3, #0]
   165c8:	f3bf 8f5b 	dmb	ish
		return -EAGAIN;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   165cc:	f413 6f00 	tst.w	r3, #2048	; 0x800
   165d0:	d155      	bne.n	1667e <bt_conn_le_create+0x102>
		return -EALREADY;
	}

	if (!bt_id_scan_random_addr_check()) {
   165d2:	f00c fe5f 	bl	23294 <bt_id_scan_random_addr_check>
   165d6:	2800      	cmp	r0, #0
   165d8:	d054      	beq.n	16684 <bt_conn_le_create+0x108>
		return -EINVAL;
	}

	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   165da:	4621      	mov	r1, r4
   165dc:	2000      	movs	r0, #0
   165de:	f00d f980 	bl	238e2 <bt_conn_exists_le>
   165e2:	2800      	cmp	r0, #0
   165e4:	d151      	bne.n	1668a <bt_conn_le_create+0x10e>
		return -EINVAL;
	}

	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   165e6:	7820      	ldrb	r0, [r4, #0]
   165e8:	3802      	subs	r0, #2
   165ea:	b2c0      	uxtb	r0, r0
   165ec:	2801      	cmp	r0, #1
   165ee:	d922      	bls.n	16636 <bt_conn_le_create+0xba>
	    peer->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&dst, peer);
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
	} else {
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   165f0:	4621      	mov	r1, r4
   165f2:	2000      	movs	r0, #0
   165f4:	f00c fe38 	bl	23268 <bt_lookup_id_addr>
   165f8:	4601      	mov	r1, r0
   165fa:	2207      	movs	r2, #7
   165fc:	4668      	mov	r0, sp
   165fe:	f00c fa16 	bl	22a2e <memcpy>
	}

	/* Only default identity supported for now */
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   16602:	4669      	mov	r1, sp
   16604:	2000      	movs	r0, #0
   16606:	f00d f92e 	bl	23866 <bt_conn_add_le>
	if (!conn) {
   1660a:	4604      	mov	r4, r0
   1660c:	2800      	cmp	r0, #0
   1660e:	d03f      	beq.n	16690 <bt_conn_le_create+0x114>
		return -ENOMEM;
	}

	bt_conn_set_param_le(conn, conn_param);
   16610:	4629      	mov	r1, r5
   16612:	f00c fec2 	bl	2339a <bt_conn_set_param_le>
	create_param_setup(create_param);
   16616:	4630      	mov	r0, r6
   16618:	f7ff fd22 	bl	16060 <create_param_setup>
		*ret_conn = conn;
		return 0;
	}
#endif

	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1661c:	2106      	movs	r1, #6
   1661e:	4620      	mov	r0, r4
   16620:	f7ff fdf4 	bl	1620c <bt_conn_set_state>

	err = bt_le_create_conn(conn);
   16624:	4620      	mov	r0, r4
   16626:	f00c fc32 	bl	22e8e <bt_le_create_conn>
	if (err) {
   1662a:	4605      	mov	r5, r0
   1662c:	b970      	cbnz	r0, 1664c <bt_conn_le_create+0xd0>

		bt_le_scan_update(false);
		return err;
	}

	*ret_conn = conn;
   1662e:	603c      	str	r4, [r7, #0]
	return 0;
}
   16630:	4628      	mov	r0, r5
   16632:	b003      	add	sp, #12
   16634:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16636:	2207      	movs	r2, #7
   16638:	4621      	mov	r1, r4
   1663a:	4668      	mov	r0, sp
   1663c:	f00c f9f7 	bl	22a2e <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   16640:	f89d 3000 	ldrb.w	r3, [sp]
   16644:	3b02      	subs	r3, #2
   16646:	f88d 3000 	strb.w	r3, [sp]
   1664a:	e7da      	b.n	16602 <bt_conn_le_create+0x86>
		conn->err = 0;
   1664c:	2600      	movs	r6, #0
   1664e:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16650:	4631      	mov	r1, r6
   16652:	4620      	mov	r0, r4
   16654:	f7ff fdda 	bl	1620c <bt_conn_set_state>
		bt_conn_unref(conn);
   16658:	4620      	mov	r0, r4
   1665a:	f00d f8c1 	bl	237e0 <bt_conn_unref>
		bt_le_scan_update(false);
   1665e:	4630      	mov	r0, r6
   16660:	f7ff faec 	bl	15c3c <bt_le_scan_update>
		return err;
   16664:	e7e4      	b.n	16630 <bt_conn_le_create+0xb4>
		return -EAGAIN;
   16666:	f06f 050a 	mvn.w	r5, #10
   1666a:	e7e1      	b.n	16630 <bt_conn_le_create+0xb4>
		return -EINVAL;
   1666c:	f06f 0515 	mvn.w	r5, #21
   16670:	e7de      	b.n	16630 <bt_conn_le_create+0xb4>
		return -EINVAL;
   16672:	f06f 0515 	mvn.w	r5, #21
   16676:	e7db      	b.n	16630 <bt_conn_le_create+0xb4>
		return -EAGAIN;
   16678:	f06f 050a 	mvn.w	r5, #10
   1667c:	e7d8      	b.n	16630 <bt_conn_le_create+0xb4>
		return -EALREADY;
   1667e:	f06f 0577 	mvn.w	r5, #119	; 0x77
   16682:	e7d5      	b.n	16630 <bt_conn_le_create+0xb4>
		return -EINVAL;
   16684:	f06f 0515 	mvn.w	r5, #21
   16688:	e7d2      	b.n	16630 <bt_conn_le_create+0xb4>
		return -EINVAL;
   1668a:	f06f 0515 	mvn.w	r5, #21
   1668e:	e7cf      	b.n	16630 <bt_conn_le_create+0xb4>
		return -ENOMEM;
   16690:	f06f 050b 	mvn.w	r5, #11
   16694:	e7cc      	b.n	16630 <bt_conn_le_create+0xb4>
   16696:	bf00      	nop
   16698:	2000036c 	.word	0x2000036c

0001669c <send_conn_le_param_update>:
{
   1669c:	b538      	push	{r3, r4, r5, lr}
   1669e:	4604      	mov	r4, r0
   166a0:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   166a2:	4608      	mov	r0, r1
   166a4:	f00c fc11 	bl	22eca <bt_le_conn_params_valid>
   166a8:	b360      	cbz	r0, 16704 <send_conn_le_param_update+0x68>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   166aa:	4b18      	ldr	r3, [pc, #96]	; (1670c <send_conn_le_param_update+0x70>)
   166ac:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   166b0:	f013 0f02 	tst.w	r3, #2
   166b4:	d004      	beq.n	166c0 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   166b6:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   166ba:	f013 0f02 	tst.w	r3, #2
   166be:	d113      	bne.n	166e8 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   166c0:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   166c2:	b9d3      	cbnz	r3, 166fa <send_conn_le_param_update+0x5e>
		rc = bt_conn_le_conn_update(conn, param);
   166c4:	4629      	mov	r1, r5
   166c6:	4620      	mov	r0, r4
   166c8:	f00d f917 	bl	238fa <bt_conn_le_conn_update>
		if (rc == 0) {
   166cc:	b9c8      	cbnz	r0, 16702 <send_conn_le_param_update+0x66>
			conn->le.interval_min = param->interval_min;
   166ce:	882b      	ldrh	r3, [r5, #0]
   166d0:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   166d4:	886b      	ldrh	r3, [r5, #2]
   166d6:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   166da:	88ab      	ldrh	r3, [r5, #4]
   166dc:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   166e0:	88eb      	ldrh	r3, [r5, #6]
   166e2:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   166e6:	e00c      	b.n	16702 <send_conn_le_param_update+0x66>
   166e8:	f3bf 8f5b 	dmb	ish
   166ec:	6863      	ldr	r3, [r4, #4]
   166ee:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   166f2:	f413 6f80 	tst.w	r3, #1024	; 0x400
   166f6:	d1e3      	bne.n	166c0 <send_conn_le_param_update+0x24>
   166f8:	e7e4      	b.n	166c4 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   166fa:	4629      	mov	r1, r5
   166fc:	4620      	mov	r0, r4
   166fe:	f00d fb0d 	bl	23d1c <bt_l2cap_update_conn_param>
}
   16702:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   16704:	f06f 0015 	mvn.w	r0, #21
   16708:	e7fb      	b.n	16702 <send_conn_le_param_update+0x66>
   1670a:	bf00      	nop
   1670c:	200002a0 	.word	0x200002a0

00016710 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   16710:	b508      	push	{r3, lr}
   16712:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   16714:	4801      	ldr	r0, [pc, #4]	; (1671c <bt_conn_create_frag_timeout+0xc>)
   16716:	f7ff fe35 	bl	16384 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   1671a:	bd08      	pop	{r3, pc}
   1671c:	20000940 	.word	0x20000940

00016720 <create_frag>:
{
   16720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16722:	4606      	mov	r6, r0
   16724:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   16726:	f04f 32ff 	mov.w	r2, #4294967295
   1672a:	f04f 33ff 	mov.w	r3, #4294967295
   1672e:	2000      	movs	r0, #0
   16730:	f7ff ffee 	bl	16710 <bt_conn_create_frag_timeout>
   16734:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   16736:	7ab3      	ldrb	r3, [r6, #10]
   16738:	2b07      	cmp	r3, #7
   1673a:	d11a      	bne.n	16772 <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   1673c:	2300      	movs	r3, #0
   1673e:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   16740:	4b10      	ldr	r3, [pc, #64]	; (16784 <create_frag+0x64>)
   16742:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   16746:	f100 0708 	add.w	r7, r0, #8
   1674a:	4638      	mov	r0, r7
   1674c:	f00f fb88 	bl	25e60 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16750:	4286      	cmp	r6, r0
   16752:	d212      	bcs.n	1677a <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   16754:	4b0b      	ldr	r3, [pc, #44]	; (16784 <create_frag+0x64>)
   16756:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1675a:	4632      	mov	r2, r6
   1675c:	f855 1f08 	ldr.w	r1, [r5, #8]!
   16760:	4638      	mov	r0, r7
   16762:	f00f fb3d 	bl	25de0 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   16766:	4631      	mov	r1, r6
   16768:	4628      	mov	r0, r5
   1676a:	f00f fb55 	bl	25e18 <net_buf_simple_pull>
}
   1676e:	4620      	mov	r0, r4
   16770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   16772:	f00f fae5 	bl	25d40 <net_buf_unref>
		return NULL;
   16776:	2400      	movs	r4, #0
   16778:	e7f9      	b.n	1676e <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   1677a:	4638      	mov	r0, r7
   1677c:	f00f fb70 	bl	25e60 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16780:	b286      	uxth	r6, r0
   16782:	e7ea      	b.n	1675a <create_frag+0x3a>
   16784:	200002a0 	.word	0x200002a0

00016788 <send_buf>:
{
   16788:	b538      	push	{r3, r4, r5, lr}
   1678a:	4605      	mov	r5, r0
   1678c:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   1678e:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   16790:	4a1b      	ldr	r2, [pc, #108]	; (16800 <send_buf+0x78>)
   16792:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   16796:	429a      	cmp	r2, r3
   16798:	d21f      	bcs.n	167da <send_buf+0x52>
	frag = create_frag(conn, buf);
   1679a:	f7ff ffc1 	bl	16720 <create_frag>
	if (!frag) {
   1679e:	4601      	mov	r1, r0
   167a0:	b350      	cbz	r0, 167f8 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   167a2:	2301      	movs	r3, #1
   167a4:	2200      	movs	r2, #0
   167a6:	4628      	mov	r0, r5
   167a8:	f00c fe52 	bl	23450 <send_frag>
   167ac:	4603      	mov	r3, r0
   167ae:	b1c8      	cbz	r0, 167e4 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   167b0:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   167b2:	4a13      	ldr	r2, [pc, #76]	; (16800 <send_buf+0x78>)
   167b4:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   167b8:	429a      	cmp	r2, r3
   167ba:	d215      	bcs.n	167e8 <send_buf+0x60>
		frag = create_frag(conn, buf);
   167bc:	4621      	mov	r1, r4
   167be:	4628      	mov	r0, r5
   167c0:	f7ff ffae 	bl	16720 <create_frag>
		if (!frag) {
   167c4:	4601      	mov	r1, r0
   167c6:	b1c8      	cbz	r0, 167fc <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   167c8:	2301      	movs	r3, #1
   167ca:	461a      	mov	r2, r3
   167cc:	4628      	mov	r0, r5
   167ce:	f00c fe3f 	bl	23450 <send_frag>
   167d2:	4603      	mov	r3, r0
   167d4:	2800      	cmp	r0, #0
   167d6:	d1eb      	bne.n	167b0 <send_buf+0x28>
   167d8:	e004      	b.n	167e4 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   167da:	2300      	movs	r3, #0
   167dc:	2202      	movs	r2, #2
   167de:	f00c fe37 	bl	23450 <send_frag>
   167e2:	4603      	mov	r3, r0
}
   167e4:	4618      	mov	r0, r3
   167e6:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   167e8:	2300      	movs	r3, #0
   167ea:	2203      	movs	r2, #3
   167ec:	4621      	mov	r1, r4
   167ee:	4628      	mov	r0, r5
   167f0:	f00c fe2e 	bl	23450 <send_frag>
   167f4:	4603      	mov	r3, r0
   167f6:	e7f5      	b.n	167e4 <send_buf+0x5c>
		return false;
   167f8:	2300      	movs	r3, #0
   167fa:	e7f3      	b.n	167e4 <send_buf+0x5c>
			return false;
   167fc:	2300      	movs	r3, #0
   167fe:	e7f1      	b.n	167e4 <send_buf+0x5c>
   16800:	200002a0 	.word	0x200002a0

00016804 <bt_conn_process_tx>:
{
   16804:	b538      	push	{r3, r4, r5, lr}
   16806:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   16808:	7a83      	ldrb	r3, [r0, #10]
   1680a:	b97b      	cbnz	r3, 1682c <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   1680c:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1680e:	f3bf 8f5b 	dmb	ish
   16812:	e853 2f00 	ldrex	r2, [r3]
   16816:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1681a:	e843 1000 	strex	r0, r1, [r3]
   1681e:	2800      	cmp	r0, #0
   16820:	d1f7      	bne.n	16812 <bt_conn_process_tx+0xe>
   16822:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   16826:	f012 0f40 	tst.w	r2, #64	; 0x40
   1682a:	d10d      	bne.n	16848 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1682c:	2200      	movs	r2, #0
   1682e:	2300      	movs	r3, #0
   16830:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16834:	f00f fa52 	bl	25cdc <net_buf_get>
	BT_ASSERT(buf);
   16838:	4605      	mov	r5, r0
   1683a:	b148      	cbz	r0, 16850 <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   1683c:	4629      	mov	r1, r5
   1683e:	4620      	mov	r0, r4
   16840:	f7ff ffa2 	bl	16788 <send_buf>
   16844:	b190      	cbz	r0, 1686c <bt_conn_process_tx+0x68>
}
   16846:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
   16848:	4620      	mov	r0, r4
   1684a:	f00c ff1a 	bl	23682 <conn_cleanup>
		return;
   1684e:	e7fa      	b.n	16846 <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   16850:	f240 23df 	movw	r3, #735	; 0x2df
   16854:	4a07      	ldr	r2, [pc, #28]	; (16874 <bt_conn_process_tx+0x70>)
   16856:	4908      	ldr	r1, [pc, #32]	; (16878 <bt_conn_process_tx+0x74>)
   16858:	4808      	ldr	r0, [pc, #32]	; (1687c <bt_conn_process_tx+0x78>)
   1685a:	f00a fc51 	bl	21100 <printk>
   1685e:	4040      	eors	r0, r0
   16860:	f380 8811 	msr	BASEPRI, r0
   16864:	f04f 0003 	mov.w	r0, #3
   16868:	df02      	svc	2
   1686a:	e7e7      	b.n	1683c <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
   1686c:	4628      	mov	r0, r5
   1686e:	f00f fa67 	bl	25d40 <net_buf_unref>
   16872:	e7e8      	b.n	16846 <bt_conn_process_tx+0x42>
   16874:	00028a80 	.word	0x00028a80
   16878:	000289b0 	.word	0x000289b0
   1687c:	00028934 	.word	0x00028934

00016880 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   16880:	b570      	push	{r4, r5, r6, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   16882:	2400      	movs	r4, #0
   16884:	e006      	b.n	16894 <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
   16886:	4919      	ldr	r1, [pc, #100]	; (168ec <bt_conn_init+0x6c>)
   16888:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1688c:	4818      	ldr	r0, [pc, #96]	; (168f0 <bt_conn_init+0x70>)
   1688e:	f010 ff05 	bl	2769c <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   16892:	3401      	adds	r4, #1
   16894:	2c02      	cmp	r4, #2
   16896:	ddf6      	ble.n	16886 <bt_conn_init+0x6>
	}

	bt_att_init();
   16898:	f00e f8ea 	bl	24a70 <bt_att_init>

	err = bt_smp_init();
   1689c:	f00f f94d 	bl	25b3a <bt_smp_init>
	if (err) {
   168a0:	4606      	mov	r6, r0
   168a2:	b108      	cbz	r0, 168a8 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   168a4:	4630      	mov	r0, r6
   168a6:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_init();
   168a8:	f00d fa65 	bl	23d76 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   168ac:	4634      	mov	r4, r6
   168ae:	e003      	b.n	168b8 <bt_conn_init+0x38>
			bt_conn_unref(conn);
   168b0:	4628      	mov	r0, r5
   168b2:	f00c ff95 	bl	237e0 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   168b6:	3401      	adds	r4, #1
   168b8:	2c03      	cmp	r4, #3
   168ba:	dcf3      	bgt.n	168a4 <bt_conn_init+0x24>
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   168bc:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   168c0:	4b0c      	ldr	r3, [pc, #48]	; (168f4 <bt_conn_init+0x74>)
   168c2:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   168c6:	f00c ff64 	bl	23792 <bt_conn_ref>
			if (!conn) {
   168ca:	4605      	mov	r5, r0
   168cc:	2800      	cmp	r0, #0
   168ce:	d0f2      	beq.n	168b6 <bt_conn_init+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   168d0:	f3bf 8f5b 	dmb	ish
   168d4:	6843      	ldr	r3, [r0, #4]
   168d6:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
   168da:	f013 0f01 	tst.w	r3, #1
   168de:	d0e7      	beq.n	168b0 <bt_conn_init+0x30>
				conn->id = BT_ID_DEFAULT;
   168e0:	2300      	movs	r3, #0
   168e2:	7203      	strb	r3, [r0, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   168e4:	2102      	movs	r1, #2
   168e6:	f7ff fc91 	bl	1620c <bt_conn_set_state>
   168ea:	e7e1      	b.n	168b0 <bt_conn_init+0x30>
   168ec:	200031e8 	.word	0x200031e8
   168f0:	200008c0 	.word	0x200008c0
   168f4:	20001a10 	.word	0x20001a10

000168f8 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   168f8:	4a05      	ldr	r2, [pc, #20]	; (16910 <get_ident+0x18>)
   168fa:	7813      	ldrb	r3, [r2, #0]
   168fc:	3301      	adds	r3, #1
   168fe:	b2db      	uxtb	r3, r3
   16900:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   16902:	b90b      	cbnz	r3, 16908 <get_ident+0x10>
		ident++;
   16904:	3301      	adds	r3, #1
   16906:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   16908:	4b01      	ldr	r3, [pc, #4]	; (16910 <get_ident+0x18>)
   1690a:	7818      	ldrb	r0, [r3, #0]
   1690c:	4770      	bx	lr
   1690e:	bf00      	nop
   16910:	20006a83 	.word	0x20006a83

00016914 <l2cap_accept>:
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   16914:	2300      	movs	r3, #0
   16916:	2b03      	cmp	r3, #3
   16918:	dc10      	bgt.n	1693c <l2cap_accept+0x28>
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1691a:	22e8      	movs	r2, #232	; 0xe8
   1691c:	fb02 f203 	mul.w	r2, r2, r3
   16920:	4808      	ldr	r0, [pc, #32]	; (16944 <l2cap_accept+0x30>)
   16922:	5882      	ldr	r2, [r0, r2]
   16924:	b10a      	cbz	r2, 1692a <l2cap_accept+0x16>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   16926:	3301      	adds	r3, #1
   16928:	e7f5      	b.n	16916 <l2cap_accept+0x2>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1692a:	4a06      	ldr	r2, [pc, #24]	; (16944 <l2cap_accept+0x30>)
   1692c:	20e8      	movs	r0, #232	; 0xe8
   1692e:	fb00 2303 	mla	r3, r0, r3, r2
   16932:	4a05      	ldr	r2, [pc, #20]	; (16948 <l2cap_accept+0x34>)
   16934:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   16936:	600b      	str	r3, [r1, #0]

		return 0;
   16938:	2000      	movs	r0, #0
   1693a:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   1693c:	f06f 000b 	mvn.w	r0, #11
}
   16940:	4770      	bx	lr
   16942:	bf00      	nop
   16944:	20001d10 	.word	0x20001d10
   16948:	00028ad0 	.word	0x00028ad0

0001694c <l2cap_chan_add>:
	if (!ch) {
   1694c:	b1e1      	cbz	r1, 16988 <l2cap_chan_add+0x3c>
{
   1694e:	b570      	push	{r4, r5, r6, lr}
   16950:	4604      	mov	r4, r0
   16952:	4615      	mov	r5, r2
   16954:	460e      	mov	r6, r1
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   16956:	490d      	ldr	r1, [pc, #52]	; (1698c <l2cap_chan_add+0x40>)
   16958:	f106 0010 	add.w	r0, r6, #16
   1695c:	f010 ffa0 	bl	278a0 <k_work_init_delayable>
	atomic_clear(chan->status);
   16960:	f106 0368 	add.w	r3, r6, #104	; 0x68
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16964:	2200      	movs	r2, #0
   16966:	f3bf 8f5b 	dmb	ish
   1696a:	e853 1f00 	ldrex	r1, [r3]
   1696e:	e843 2000 	strex	r0, r2, [r3]
   16972:	2800      	cmp	r0, #0
   16974:	d1f9      	bne.n	1696a <l2cap_chan_add+0x1e>
   16976:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   1697a:	462a      	mov	r2, r5
   1697c:	4631      	mov	r1, r6
   1697e:	4620      	mov	r0, r4
   16980:	f00d f886 	bl	23a90 <bt_l2cap_chan_add>
	return true;
   16984:	2001      	movs	r0, #1
}
   16986:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   16988:	2000      	movs	r0, #0
}
   1698a:	4770      	bx	lr
   1698c:	00023a7b 	.word	0x00023a7b

00016990 <bt_l2cap_connected>:
{
   16990:	b530      	push	{r4, r5, lr}
   16992:	b083      	sub	sp, #12
   16994:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16996:	4c1a      	ldr	r4, [pc, #104]	; (16a00 <bt_l2cap_connected+0x70>)
   16998:	e000      	b.n	1699c <bt_l2cap_connected+0xc>
   1699a:	340c      	adds	r4, #12
   1699c:	4b19      	ldr	r3, [pc, #100]	; (16a04 <bt_l2cap_connected+0x74>)
   1699e:	429c      	cmp	r4, r3
   169a0:	d22c      	bcs.n	169fc <bt_l2cap_connected+0x6c>
		if (fchan->accept(conn, &chan) < 0) {
   169a2:	6863      	ldr	r3, [r4, #4]
   169a4:	a901      	add	r1, sp, #4
   169a6:	4628      	mov	r0, r5
   169a8:	4798      	blx	r3
   169aa:	2800      	cmp	r0, #0
   169ac:	dbf5      	blt.n	1699a <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
   169ae:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
   169b0:	8823      	ldrh	r3, [r4, #0]
   169b2:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   169b6:	f8a1 3080 	strh.w	r3, [r1, #128]	; 0x80
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   169ba:	68a2      	ldr	r2, [r4, #8]
   169bc:	4628      	mov	r0, r5
   169be:	f7ff ffc5 	bl	1694c <l2cap_chan_add>
   169c2:	b1d8      	cbz	r0, 169fc <bt_l2cap_connected+0x6c>
		if (chan->ops->connected) {
   169c4:	9801      	ldr	r0, [sp, #4]
   169c6:	6843      	ldr	r3, [r0, #4]
   169c8:	681b      	ldr	r3, [r3, #0]
   169ca:	b103      	cbz	r3, 169ce <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
   169cc:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   169ce:	9b01      	ldr	r3, [sp, #4]
   169d0:	3368      	adds	r3, #104	; 0x68
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   169d2:	f3bf 8f5b 	dmb	ish
   169d6:	e853 2f00 	ldrex	r2, [r3]
   169da:	f042 0201 	orr.w	r2, r2, #1
   169de:	e843 2100 	strex	r1, r2, [r3]
   169e2:	2900      	cmp	r1, #0
   169e4:	d1f7      	bne.n	169d6 <bt_l2cap_connected+0x46>
   169e6:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   169ea:	9801      	ldr	r0, [sp, #4]
   169ec:	6843      	ldr	r3, [r0, #4]
   169ee:	699b      	ldr	r3, [r3, #24]
   169f0:	2b00      	cmp	r3, #0
   169f2:	d0d2      	beq.n	1699a <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   169f4:	f100 0168 	add.w	r1, r0, #104	; 0x68
   169f8:	4798      	blx	r3
   169fa:	e7ce      	b.n	1699a <bt_l2cap_connected+0xa>
}
   169fc:	b003      	add	sp, #12
   169fe:	bd30      	pop	{r4, r5, pc}
   16a00:	00028254 	.word	0x00028254
   16a04:	00028278 	.word	0x00028278

00016a08 <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
   16a08:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   16a0a:	4b03      	ldr	r3, [pc, #12]	; (16a18 <att_cfm_sent+0x10>)
   16a0c:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16a10:	f00d f9b2 	bl	23d78 <att_sent>
}
   16a14:	bd08      	pop	{r3, pc}
   16a16:	bf00      	nop
   16a18:	00024111 	.word	0x00024111

00016a1c <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
   16a1c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   16a1e:	4b03      	ldr	r3, [pc, #12]	; (16a2c <att_rsp_sent+0x10>)
   16a20:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16a24:	f00d f9a8 	bl	23d78 <att_sent>
}
   16a28:	bd08      	pop	{r3, pc}
   16a2a:	bf00      	nop
   16a2c:	0002412d 	.word	0x0002412d

00016a30 <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
   16a30:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   16a32:	4b03      	ldr	r3, [pc, #12]	; (16a40 <att_req_sent+0x10>)
   16a34:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16a38:	f00d f99e 	bl	23d78 <att_sent>
}
   16a3c:	bd08      	pop	{r3, pc}
   16a3e:	bf00      	nop
   16a40:	000240f9 	.word	0x000240f9

00016a44 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
   16a44:	4b08      	ldr	r3, [pc, #32]	; (16a68 <att_cb+0x24>)
   16a46:	4298      	cmp	r0, r3
   16a48:	d009      	beq.n	16a5e <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
   16a4a:	4b08      	ldr	r3, [pc, #32]	; (16a6c <att_cb+0x28>)
   16a4c:	4298      	cmp	r0, r3
   16a4e:	d008      	beq.n	16a62 <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
   16a50:	4b07      	ldr	r3, [pc, #28]	; (16a70 <att_cb+0x2c>)
   16a52:	4298      	cmp	r0, r3
   16a54:	d001      	beq.n	16a5a <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
   16a56:	4807      	ldr	r0, [pc, #28]	; (16a74 <att_cb+0x30>)
	}
}
   16a58:	4770      	bx	lr
		return att_req_sent;
   16a5a:	4807      	ldr	r0, [pc, #28]	; (16a78 <att_cb+0x34>)
   16a5c:	4770      	bx	lr
		return att_rsp_sent;
   16a5e:	4807      	ldr	r0, [pc, #28]	; (16a7c <att_cb+0x38>)
   16a60:	4770      	bx	lr
		return att_cfm_sent;
   16a62:	4807      	ldr	r0, [pc, #28]	; (16a80 <att_cb+0x3c>)
   16a64:	4770      	bx	lr
   16a66:	bf00      	nop
   16a68:	0002412d 	.word	0x0002412d
   16a6c:	00024111 	.word	0x00024111
   16a70:	000240f9 	.word	0x000240f9
   16a74:	00023d79 	.word	0x00023d79
   16a78:	00016a31 	.word	0x00016a31
   16a7c:	00016a1d 	.word	0x00016a1d
   16a80:	00016a09 	.word	0x00016a09

00016a84 <chan_cb>:
{
   16a84:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   16a86:	6883      	ldr	r3, [r0, #8]
   16a88:	7818      	ldrb	r0, [r3, #0]
   16a8a:	f00d f9be 	bl	23e0a <att_op_get_type>
   16a8e:	3801      	subs	r0, #1
   16a90:	2804      	cmp	r0, #4
   16a92:	d808      	bhi.n	16aa6 <chan_cb+0x22>
   16a94:	e8df f000 	tbb	[pc, r0]
   16a98:	09070305 	.word	0x09070305
   16a9c:	05          	.byte	0x05
   16a9d:	00          	.byte	0x00
   16a9e:	4804      	ldr	r0, [pc, #16]	; (16ab0 <chan_cb+0x2c>)
   16aa0:	e000      	b.n	16aa4 <chan_cb+0x20>
		return chan_req_sent;
   16aa2:	4804      	ldr	r0, [pc, #16]	; (16ab4 <chan_cb+0x30>)
}
   16aa4:	bd08      	pop	{r3, pc}
		return NULL;
   16aa6:	2000      	movs	r0, #0
   16aa8:	e7fc      	b.n	16aa4 <chan_cb+0x20>
		return chan_cfm_sent;
   16aaa:	4803      	ldr	r0, [pc, #12]	; (16ab8 <chan_cb+0x34>)
   16aac:	e7fa      	b.n	16aa4 <chan_cb+0x20>
   16aae:	bf00      	nop
   16ab0:	0002412d 	.word	0x0002412d
   16ab4:	000240f9 	.word	0x000240f9
   16ab8:	00024111 	.word	0x00024111

00016abc <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   16abc:	b570      	push	{r4, r5, r6, lr}
   16abe:	b082      	sub	sp, #8
   16ac0:	4605      	mov	r5, r0
   16ac2:	460e      	mov	r6, r1
	return list->head;
   16ac4:	6a43      	ldr	r3, [r0, #36]	; 0x24
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16ac6:	b10b      	cbz	r3, 16acc <att_chan_new+0x10>
   16ac8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   16acc:	9301      	str	r3, [sp, #4]
	int quota = 0;
   16ace:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16ad0:	e002      	b.n	16ad8 <att_chan_new+0x1c>
		if (chan->att == att) {
			quota++;
   16ad2:	3201      	adds	r2, #1
   16ad4:	e005      	b.n	16ae2 <att_chan_new+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16ad6:	9301      	str	r3, [sp, #4]
   16ad8:	9c01      	ldr	r4, [sp, #4]
   16ada:	b174      	cbz	r4, 16afa <att_chan_new+0x3e>
		if (chan->att == att) {
   16adc:	6823      	ldr	r3, [r4, #0]
   16ade:	42ab      	cmp	r3, r5
   16ae0:	d0f7      	beq.n	16ad2 <att_chan_new+0x16>
		}

		if (quota == ATT_CHAN_MAX) {
   16ae2:	2a01      	cmp	r2, #1
   16ae4:	d02e      	beq.n	16b44 <att_chan_new+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16ae6:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   16aea:	d0f4      	beq.n	16ad6 <att_chan_new+0x1a>
	return node->next;
   16aec:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16af0:	2b00      	cmp	r3, #0
   16af2:	d0f0      	beq.n	16ad6 <att_chan_new+0x1a>
   16af4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   16af8:	e7ed      	b.n	16ad6 <att_chan_new+0x1a>
			BT_ERR("Maximum number of channels reached: %d", quota);
			return NULL;
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16afa:	2200      	movs	r2, #0
   16afc:	2300      	movs	r3, #0
   16afe:	a901      	add	r1, sp, #4
   16b00:	4811      	ldr	r0, [pc, #68]	; (16b48 <att_chan_new+0x8c>)
   16b02:	f006 f97b 	bl	1cdfc <k_mem_slab_alloc>
   16b06:	b9d0      	cbnz	r0, 16b3e <att_chan_new+0x82>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   16b08:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16b0c:	2100      	movs	r1, #0
   16b0e:	9801      	ldr	r0, [sp, #4]
   16b10:	f00b ffb1 	bl	22a76 <memset>
	chan->chan.chan.ops = &ops;
   16b14:	9801      	ldr	r0, [sp, #4]
   16b16:	4b0d      	ldr	r3, [pc, #52]	; (16b4c <att_chan_new+0x90>)
   16b18:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
   16b1a:	30f8      	adds	r0, #248	; 0xf8
	z_impl_k_queue_init(queue);
   16b1c:	f010 fdb2 	bl	27684 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   16b20:	9b01      	ldr	r3, [sp, #4]
   16b22:	33f0      	adds	r3, #240	; 0xf0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16b24:	f3bf 8f5b 	dmb	ish
   16b28:	e853 2f00 	ldrex	r2, [r3]
   16b2c:	e843 6100 	strex	r1, r6, [r3]
   16b30:	2900      	cmp	r1, #0
   16b32:	d1f9      	bne.n	16b28 <att_chan_new+0x6c>
   16b34:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   16b38:	9b01      	ldr	r3, [sp, #4]
   16b3a:	601d      	str	r5, [r3, #0]

	return chan;
   16b3c:	9c01      	ldr	r4, [sp, #4]
}
   16b3e:	4620      	mov	r0, r4
   16b40:	b002      	add	sp, #8
   16b42:	bd70      	pop	{r4, r5, r6, pc}
			return NULL;
   16b44:	2400      	movs	r4, #0
   16b46:	e7fa      	b.n	16b3e <att_chan_new+0x82>
   16b48:	200007b0 	.word	0x200007b0
   16b4c:	200005ec 	.word	0x200005ec

00016b50 <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   16b50:	b570      	push	{r4, r5, r6, lr}
   16b52:	b082      	sub	sp, #8
   16b54:	4604      	mov	r4, r0
   16b56:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16b58:	2200      	movs	r2, #0
   16b5a:	2300      	movs	r3, #0
   16b5c:	a901      	add	r1, sp, #4
   16b5e:	4810      	ldr	r0, [pc, #64]	; (16ba0 <bt_att_accept+0x50>)
   16b60:	f006 f94c 	bl	1cdfc <k_mem_slab_alloc>
   16b64:	b9b0      	cbnz	r0, 16b94 <bt_att_accept+0x44>
   16b66:	4606      	mov	r6, r0
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
   16b68:	222c      	movs	r2, #44	; 0x2c
   16b6a:	2100      	movs	r1, #0
   16b6c:	9801      	ldr	r0, [sp, #4]
   16b6e:	f00b ff82 	bl	22a76 <memset>
	att->conn = conn;
   16b72:	9b01      	ldr	r3, [sp, #4]
   16b74:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   16b76:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   16b78:	2100      	movs	r1, #0
   16b7a:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   16b7c:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   16b7e:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   16b80:	6281      	str	r1, [r0, #40]	; 0x28
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
   16b82:	f7ff ff9b 	bl	16abc <att_chan_new>
	if (!chan) {
   16b86:	4603      	mov	r3, r0
   16b88:	b138      	cbz	r0, 16b9a <bt_att_accept+0x4a>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   16b8a:	3308      	adds	r3, #8
   16b8c:	602b      	str	r3, [r5, #0]

	return 0;
}
   16b8e:	4630      	mov	r0, r6
   16b90:	b002      	add	sp, #8
   16b92:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   16b94:	f06f 060b 	mvn.w	r6, #11
   16b98:	e7f9      	b.n	16b8e <bt_att_accept+0x3e>
		return -ENOMEM;
   16b9a:	f06f 060b 	mvn.w	r6, #11
   16b9e:	e7f6      	b.n	16b8e <bt_att_accept+0x3e>
   16ba0:	20000794 	.word	0x20000794

00016ba4 <bt_att_released>:
{
   16ba4:	b500      	push	{lr}
   16ba6:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   16ba8:	3808      	subs	r0, #8
   16baa:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   16bac:	a901      	add	r1, sp, #4
   16bae:	4803      	ldr	r0, [pc, #12]	; (16bbc <bt_att_released+0x18>)
   16bb0:	f010 fc42 	bl	27438 <k_mem_slab_free>
}
   16bb4:	b003      	add	sp, #12
   16bb6:	f85d fb04 	ldr.w	pc, [sp], #4
   16bba:	bf00      	nop
   16bbc:	200007b0 	.word	0x200007b0

00016bc0 <read_group_cb>:
{
   16bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bc2:	b085      	sub	sp, #20
   16bc4:	4605      	mov	r5, r0
   16bc6:	460e      	mov	r6, r1
   16bc8:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   16bca:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16bcc:	2300      	movs	r3, #0
   16bce:	f88d 3008 	strb.w	r3, [sp, #8]
   16bd2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16bd6:	f8ad 300a 	strh.w	r3, [sp, #10]
   16bda:	a902      	add	r1, sp, #8
   16bdc:	6800      	ldr	r0, [r0, #0]
   16bde:	f00b ff9b 	bl	22b18 <bt_uuid_cmp>
   16be2:	b158      	cbz	r0, 16bfc <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16be4:	2300      	movs	r3, #0
   16be6:	f88d 300c 	strb.w	r3, [sp, #12]
   16bea:	f642 0301 	movw	r3, #10241	; 0x2801
   16bee:	f8ad 300e 	strh.w	r3, [sp, #14]
   16bf2:	a903      	add	r1, sp, #12
   16bf4:	6828      	ldr	r0, [r5, #0]
   16bf6:	f00b ff8f 	bl	22b18 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16bfa:	bb30      	cbnz	r0, 16c4a <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16bfc:	6861      	ldr	r1, [r4, #4]
   16bfe:	6828      	ldr	r0, [r5, #0]
   16c00:	f00b ff8a 	bl	22b18 <bt_uuid_cmp>
   16c04:	bb48      	cbnz	r0, 16c5a <read_group_cb+0x9a>
	if (data->rsp->len &&
   16c06:	68e3      	ldr	r3, [r4, #12]
   16c08:	781a      	ldrb	r2, [r3, #0]
   16c0a:	b132      	cbz	r2, 16c1a <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16c0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   16c10:	68a1      	ldr	r1, [r4, #8]
   16c12:	8989      	ldrh	r1, [r1, #12]
   16c14:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   16c16:	4293      	cmp	r3, r2
   16c18:	db24      	blt.n	16c64 <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   16c1a:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   16c1c:	2104      	movs	r1, #4
   16c1e:	3008      	adds	r0, #8
   16c20:	f00f f8d8 	bl	25dd4 <net_buf_simple_add>
   16c24:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16c26:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16c28:	6923      	ldr	r3, [r4, #16]
   16c2a:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16c2c:	9401      	str	r4, [sp, #4]
   16c2e:	4b10      	ldr	r3, [pc, #64]	; (16c70 <read_group_cb+0xb0>)
   16c30:	9300      	str	r3, [sp, #0]
   16c32:	2300      	movs	r3, #0
   16c34:	68a2      	ldr	r2, [r4, #8]
   16c36:	4629      	mov	r1, r5
   16c38:	4638      	mov	r0, r7
   16c3a:	f00d fbb5 	bl	243a8 <att_chan_read>
	if (read < 0) {
   16c3e:	2800      	cmp	r0, #0
   16c40:	db12      	blt.n	16c68 <read_group_cb+0xa8>
	if (!data->group) {
   16c42:	6923      	ldr	r3, [r4, #16]
   16c44:	b193      	cbz	r3, 16c6c <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
   16c46:	2001      	movs	r0, #1
   16c48:	e00a      	b.n	16c60 <read_group_cb+0xa0>
		if (data->group &&
   16c4a:	6923      	ldr	r3, [r4, #16]
   16c4c:	b11b      	cbz	r3, 16c56 <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   16c4e:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   16c50:	42b2      	cmp	r2, r6
   16c52:	d200      	bcs.n	16c56 <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
   16c54:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16c56:	2001      	movs	r0, #1
   16c58:	e002      	b.n	16c60 <read_group_cb+0xa0>
		data->group = NULL;
   16c5a:	2300      	movs	r3, #0
   16c5c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   16c5e:	2001      	movs	r0, #1
}
   16c60:	b005      	add	sp, #20
   16c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   16c64:	2000      	movs	r0, #0
   16c66:	e7fb      	b.n	16c60 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   16c68:	2000      	movs	r0, #0
   16c6a:	e7f9      	b.n	16c60 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   16c6c:	2000      	movs	r0, #0
   16c6e:	e7f7      	b.n	16c60 <read_group_cb+0xa0>
   16c70:	00023ddd 	.word	0x00023ddd

00016c74 <read_type_cb>:
{
   16c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16c78:	b083      	sub	sp, #12
   16c7a:	4606      	mov	r6, r0
   16c7c:	4688      	mov	r8, r1
   16c7e:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   16c80:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   16c82:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16c84:	6851      	ldr	r1, [r2, #4]
   16c86:	6800      	ldr	r0, [r0, #0]
   16c88:	f00b ff46 	bl	22b18 <bt_uuid_cmp>
   16c8c:	b120      	cbz	r0, 16c98 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   16c8e:	2501      	movs	r5, #1
}
   16c90:	4628      	mov	r0, r5
   16c92:	b003      	add	sp, #12
   16c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   16c98:	2215      	movs	r2, #21
   16c9a:	4631      	mov	r1, r6
   16c9c:	4628      	mov	r0, r5
   16c9e:	f00e fd61 	bl	25764 <bt_gatt_check_perm>
   16ca2:	4605      	mov	r5, r0
   16ca4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   16ca6:	b130      	cbz	r0, 16cb6 <read_type_cb+0x42>
		if (data->rsp->len) {
   16ca8:	68e3      	ldr	r3, [r4, #12]
   16caa:	781b      	ldrb	r3, [r3, #0]
   16cac:	b10b      	cbz	r3, 16cb2 <read_type_cb+0x3e>
			data->err = 0x00;
   16cae:	2300      	movs	r3, #0
   16cb0:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   16cb2:	2500      	movs	r5, #0
   16cb4:	e7ec      	b.n	16c90 <read_type_cb+0x1c>
	data->err = 0x00;
   16cb6:	f04f 0900 	mov.w	r9, #0
   16cba:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16cbe:	68a0      	ldr	r0, [r4, #8]
   16cc0:	f00f f868 	bl	25d94 <net_buf_frag_last>
   16cc4:	2102      	movs	r1, #2
   16cc6:	3008      	adds	r0, #8
   16cc8:	f00f f884 	bl	25dd4 <net_buf_simple_add>
   16ccc:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   16cce:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16cd2:	9401      	str	r4, [sp, #4]
   16cd4:	4b11      	ldr	r3, [pc, #68]	; (16d1c <read_type_cb+0xa8>)
   16cd6:	9300      	str	r3, [sp, #0]
   16cd8:	464b      	mov	r3, r9
   16cda:	68a2      	ldr	r2, [r4, #8]
   16cdc:	4631      	mov	r1, r6
   16cde:	4638      	mov	r0, r7
   16ce0:	f00d fb62 	bl	243a8 <att_chan_read>
	if (read < 0) {
   16ce4:	2800      	cmp	r0, #0
   16ce6:	db07      	blt.n	16cf8 <read_type_cb+0x84>
	if (!data->item) {
   16ce8:	6923      	ldr	r3, [r4, #16]
   16cea:	2b00      	cmp	r3, #0
   16cec:	d0d0      	beq.n	16c90 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16cee:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
   16cf2:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   16cf4:	2200      	movs	r2, #0

	while (buf) {
   16cf6:	e006      	b.n	16d06 <read_type_cb+0x92>
		data->err = err_to_att(read);
   16cf8:	f00d f854 	bl	23da4 <err_to_att>
   16cfc:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   16cfe:	e7c7      	b.n	16c90 <read_type_cb+0x1c>
		bytes += buf->len;
   16d00:	8999      	ldrh	r1, [r3, #12]
   16d02:	440a      	add	r2, r1
		buf = buf->frags;
   16d04:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   16d06:	2b00      	cmp	r3, #0
   16d08:	d1fa      	bne.n	16d00 <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16d0a:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16d0c:	68e3      	ldr	r3, [r4, #12]
   16d0e:	781d      	ldrb	r5, [r3, #0]
   16d10:	42aa      	cmp	r2, r5
   16d12:	bf94      	ite	ls
   16d14:	2500      	movls	r5, #0
   16d16:	2501      	movhi	r5, #1
   16d18:	e7ba      	b.n	16c90 <read_type_cb+0x1c>
   16d1a:	bf00      	nop
   16d1c:	00023db5 	.word	0x00023db5

00016d20 <bt_att_connected>:
{
   16d20:	b538      	push	{r3, r4, r5, lr}
   16d22:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
   16d24:	4605      	mov	r5, r0
   16d26:	f855 0908 	ldr.w	r0, [r5], #-8
   16d2a:	f00d fd13 	bl	24754 <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
   16d2e:	4629      	mov	r1, r5
   16d30:	6800      	ldr	r0, [r0, #0]
   16d32:	f00d f903 	bl	23f3c <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16d36:	f3bf 8f5b 	dmb	ish
   16d3a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   16d3e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   16d42:	f013 0f08 	tst.w	r3, #8
   16d46:	d104      	bne.n	16d52 <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16d48:	2317      	movs	r3, #23
   16d4a:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16d4e:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   16d52:	4628      	mov	r0, r5
   16d54:	f00d fab7 	bl	242c6 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   16d58:	4902      	ldr	r1, [pc, #8]	; (16d64 <bt_att_connected+0x44>)
   16d5a:	f504 7084 	add.w	r0, r4, #264	; 0x108
   16d5e:	f010 fd9f 	bl	278a0 <k_work_init_delayable>
}
   16d62:	bd38      	pop	{r3, r4, r5, pc}
   16d64:	00024c41 	.word	0x00024c41

00016d68 <att_indicate>:
{
   16d68:	b570      	push	{r4, r5, r6, lr}
   16d6a:	4605      	mov	r5, r0
   16d6c:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   16d6e:	f101 0008 	add.w	r0, r1, #8
   16d72:	f00f f869 	bl	25e48 <net_buf_simple_pull_le16>
   16d76:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   16d78:	682e      	ldr	r6, [r5, #0]
   16d7a:	89a3      	ldrh	r3, [r4, #12]
   16d7c:	68a2      	ldr	r2, [r4, #8]
   16d7e:	6830      	ldr	r0, [r6, #0]
   16d80:	f00e fdd5 	bl	2592e <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   16d84:	2200      	movs	r2, #0
   16d86:	211e      	movs	r1, #30
   16d88:	4628      	mov	r0, r5
   16d8a:	f00d fce9 	bl	24760 <bt_att_chan_create_pdu>
	if (!buf) {
   16d8e:	b120      	cbz	r0, 16d9a <att_indicate+0x32>
   16d90:	4601      	mov	r1, r0
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   16d92:	4a03      	ldr	r2, [pc, #12]	; (16da0 <att_indicate+0x38>)
   16d94:	4628      	mov	r0, r5
   16d96:	f00d fa89 	bl	242ac <bt_att_chan_send_rsp>
}
   16d9a:	2000      	movs	r0, #0
   16d9c:	bd70      	pop	{r4, r5, r6, pc}
   16d9e:	bf00      	nop
   16da0:	00024111 	.word	0x00024111

00016da4 <send_err_rsp>:
	if (!req) {
   16da4:	b901      	cbnz	r1, 16da8 <send_err_rsp+0x4>
   16da6:	4770      	bx	lr
{
   16da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16dac:	4606      	mov	r6, r0
   16dae:	4615      	mov	r5, r2
   16db0:	461c      	mov	r4, r3
   16db2:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   16db4:	2204      	movs	r2, #4
   16db6:	2101      	movs	r1, #1
   16db8:	f00d fcd2 	bl	24760 <bt_att_chan_create_pdu>
	if (!buf) {
   16dbc:	4680      	mov	r8, r0
   16dbe:	b160      	cbz	r0, 16dda <send_err_rsp+0x36>
	return net_buf_simple_add(&buf->b, len);
   16dc0:	2104      	movs	r1, #4
   16dc2:	3008      	adds	r0, #8
   16dc4:	f00f f806 	bl	25dd4 <net_buf_simple_add>
	rsp->request = req;
   16dc8:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   16dca:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   16dce:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   16dd0:	4a03      	ldr	r2, [pc, #12]	; (16de0 <send_err_rsp+0x3c>)
   16dd2:	4641      	mov	r1, r8
   16dd4:	4630      	mov	r0, r6
   16dd6:	f00d fa69 	bl	242ac <bt_att_chan_send_rsp>
}
   16dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16dde:	bf00      	nop
   16de0:	0002412d 	.word	0x0002412d

00016de4 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   16de4:	898b      	ldrh	r3, [r1, #12]
   16de6:	b90b      	cbnz	r3, 16dec <bt_att_recv+0x8>
}
   16de8:	2000      	movs	r0, #0
   16dea:	4770      	bx	lr
{
   16dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16df0:	4607      	mov	r7, r0
   16df2:	460e      	mov	r6, r1
   16df4:	f1a0 0808 	sub.w	r8, r0, #8
	return net_buf_simple_pull_mem(&buf->b, len);
   16df8:	2101      	movs	r1, #1
   16dfa:	f106 0008 	add.w	r0, r6, #8
   16dfe:	f00f f813 	bl	25e28 <net_buf_simple_pull_mem>
   16e02:	4605      	mov	r5, r0
	if (!att_chan->att) {
   16e04:	f857 3c08 	ldr.w	r3, [r7, #-8]
   16e08:	b1fb      	cbz	r3, 16e4a <bt_att_recv+0x66>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16e0a:	2300      	movs	r3, #0
   16e0c:	2b1b      	cmp	r3, #27
   16e0e:	d81f      	bhi.n	16e50 <bt_att_recv+0x6c>
		if (hdr->code == handlers[i].op) {
   16e10:	782c      	ldrb	r4, [r5, #0]
   16e12:	4a2e      	ldr	r2, [pc, #184]	; (16ecc <bt_att_recv+0xe8>)
   16e14:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   16e18:	4294      	cmp	r4, r2
   16e1a:	d001      	beq.n	16e20 <bt_att_recv+0x3c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16e1c:	3301      	adds	r3, #1
   16e1e:	e7f5      	b.n	16e0c <bt_att_recv+0x28>
			handler = &handlers[i];
   16e20:	4c2a      	ldr	r4, [pc, #168]	; (16ecc <bt_att_recv+0xe8>)
   16e22:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
   16e26:	b1ac      	cbz	r4, 16e54 <bt_att_recv+0x70>
		if (handler->type == ATT_REQUEST &&
   16e28:	78a3      	ldrb	r3, [r4, #2]
   16e2a:	2b01      	cmp	r3, #1
   16e2c:	d01f      	beq.n	16e6e <bt_att_recv+0x8a>
		} else if (handler->type == ATT_INDICATION &&
   16e2e:	78a3      	ldrb	r3, [r4, #2]
   16e30:	2b05      	cmp	r3, #5
   16e32:	d02e      	beq.n	16e92 <bt_att_recv+0xae>
	if (buf->len < handler->expect_len) {
   16e34:	89b2      	ldrh	r2, [r6, #12]
   16e36:	7863      	ldrb	r3, [r4, #1]
   16e38:	429a      	cmp	r2, r3
   16e3a:	d33b      	bcc.n	16eb4 <bt_att_recv+0xd0>
		err = handler->func(att_chan, buf);
   16e3c:	6863      	ldr	r3, [r4, #4]
   16e3e:	4631      	mov	r1, r6
   16e40:	4640      	mov	r0, r8
   16e42:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16e44:	78a3      	ldrb	r3, [r4, #2]
   16e46:	2b01      	cmp	r3, #1
   16e48:	d036      	beq.n	16eb8 <bt_att_recv+0xd4>
}
   16e4a:	2000      	movs	r0, #0
   16e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16e50:	2400      	movs	r4, #0
   16e52:	e7e8      	b.n	16e26 <bt_att_recv+0x42>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   16e54:	782c      	ldrb	r4, [r5, #0]
   16e56:	4620      	mov	r0, r4
   16e58:	f00c ffd7 	bl	23e0a <att_op_get_type>
   16e5c:	2800      	cmp	r0, #0
   16e5e:	d0f4      	beq.n	16e4a <bt_att_recv+0x66>
			send_err_rsp(att_chan, hdr->code, 0,
   16e60:	2306      	movs	r3, #6
   16e62:	2200      	movs	r2, #0
   16e64:	4621      	mov	r1, r4
   16e66:	4640      	mov	r0, r8
   16e68:	f7ff ff9c 	bl	16da4 <send_err_rsp>
		return 0;
   16e6c:	e7ed      	b.n	16e4a <bt_att_recv+0x66>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   16e6e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16e72:	f3bf 8f5b 	dmb	ish
   16e76:	e853 2f00 	ldrex	r2, [r3]
   16e7a:	f042 0101 	orr.w	r1, r2, #1
   16e7e:	e843 1000 	strex	r0, r1, [r3]
   16e82:	2800      	cmp	r0, #0
   16e84:	d1f7      	bne.n	16e76 <bt_att_recv+0x92>
   16e86:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   16e8a:	f012 0f01 	tst.w	r2, #1
   16e8e:	d0ce      	beq.n	16e2e <bt_att_recv+0x4a>
   16e90:	e7db      	b.n	16e4a <bt_att_recv+0x66>
			   atomic_test_and_set_bit(att_chan->flags,
   16e92:	37e8      	adds	r7, #232	; 0xe8
   16e94:	f3bf 8f5b 	dmb	ish
   16e98:	e857 3f00 	ldrex	r3, [r7]
   16e9c:	f043 0202 	orr.w	r2, r3, #2
   16ea0:	e847 2100 	strex	r1, r2, [r7]
   16ea4:	2900      	cmp	r1, #0
   16ea6:	d1f7      	bne.n	16e98 <bt_att_recv+0xb4>
   16ea8:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   16eac:	f013 0f02 	tst.w	r3, #2
   16eb0:	d0c0      	beq.n	16e34 <bt_att_recv+0x50>
   16eb2:	e7ca      	b.n	16e4a <bt_att_recv+0x66>
		err = BT_ATT_ERR_INVALID_PDU;
   16eb4:	2004      	movs	r0, #4
   16eb6:	e7c5      	b.n	16e44 <bt_att_recv+0x60>
	if (handler->type == ATT_REQUEST && err) {
   16eb8:	2800      	cmp	r0, #0
   16eba:	d0c6      	beq.n	16e4a <bt_att_recv+0x66>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16ebc:	4603      	mov	r3, r0
   16ebe:	2200      	movs	r2, #0
   16ec0:	7829      	ldrb	r1, [r5, #0]
   16ec2:	4640      	mov	r0, r8
   16ec4:	f7ff ff6e 	bl	16da4 <send_err_rsp>
   16ec8:	e7bf      	b.n	16e4a <bt_att_recv+0x66>
   16eca:	bf00      	nop
   16ecc:	00028af4 	.word	0x00028af4

00016ed0 <att_write_rsp>:
{
   16ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ed4:	b08a      	sub	sp, #40	; 0x28
   16ed6:	4604      	mov	r4, r0
   16ed8:	4617      	mov	r7, r2
   16eda:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16edc:	6803      	ldr	r3, [r0, #0]
   16ede:	4688      	mov	r8, r1
   16ee0:	3900      	subs	r1, #0
   16ee2:	bf18      	it	ne
   16ee4:	2101      	movne	r1, #1
   16ee6:	6818      	ldr	r0, [r3, #0]
   16ee8:	f00e fdaf 	bl	25a4a <bt_gatt_change_aware>
   16eec:	2800      	cmp	r0, #0
   16eee:	d04f      	beq.n	16f90 <att_write_rsp+0xc0>
	if (!handle) {
   16ef0:	b925      	cbnz	r5, 16efc <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16ef2:	2601      	movs	r6, #1
}
   16ef4:	4630      	mov	r0, r6
   16ef6:	b00a      	add	sp, #40	; 0x28
   16ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   16efc:	2218      	movs	r2, #24
   16efe:	2100      	movs	r1, #0
   16f00:	a804      	add	r0, sp, #16
   16f02:	f00b fdb8 	bl	22a76 <memset>
	if (rsp) {
   16f06:	b13f      	cbz	r7, 16f18 <att_write_rsp+0x48>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   16f08:	2200      	movs	r2, #0
   16f0a:	4639      	mov	r1, r7
   16f0c:	4620      	mov	r0, r4
   16f0e:	f00d fc27 	bl	24760 <bt_att_chan_create_pdu>
   16f12:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   16f14:	2800      	cmp	r0, #0
   16f16:	d03d      	beq.n	16f94 <att_write_rsp+0xc4>
	data.conn = chan->att->conn;
   16f18:	6823      	ldr	r3, [r4, #0]
   16f1a:	681b      	ldr	r3, [r3, #0]
   16f1c:	9304      	str	r3, [sp, #16]
	data.req = req;
   16f1e:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   16f22:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   16f26:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   16f2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16f2c:	9307      	str	r3, [sp, #28]
	data.len = len;
   16f2e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   16f32:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16f36:	2301      	movs	r3, #1
   16f38:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   16f3c:	ab04      	add	r3, sp, #16
   16f3e:	9302      	str	r3, [sp, #8]
   16f40:	4b15      	ldr	r3, [pc, #84]	; (16f98 <att_write_rsp+0xc8>)
   16f42:	9301      	str	r3, [sp, #4]
   16f44:	2200      	movs	r2, #0
   16f46:	9200      	str	r2, [sp, #0]
   16f48:	4613      	mov	r3, r2
   16f4a:	4629      	mov	r1, r5
   16f4c:	4628      	mov	r0, r5
   16f4e:	f000 fc8b 	bl	17868 <bt_gatt_foreach_attr_type>
	if (data.err) {
   16f52:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   16f56:	b93e      	cbnz	r6, 16f68 <att_write_rsp+0x98>
	if (data.buf) {
   16f58:	9905      	ldr	r1, [sp, #20]
   16f5a:	2900      	cmp	r1, #0
   16f5c:	d0ca      	beq.n	16ef4 <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16f5e:	4a0f      	ldr	r2, [pc, #60]	; (16f9c <att_write_rsp+0xcc>)
   16f60:	4620      	mov	r0, r4
   16f62:	f00d f9a3 	bl	242ac <bt_att_chan_send_rsp>
   16f66:	e7c5      	b.n	16ef4 <att_write_rsp+0x24>
		if (rsp) {
   16f68:	b927      	cbnz	r7, 16f74 <att_write_rsp+0xa4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   16f6a:	f1b8 0f18 	cmp.w	r8, #24
   16f6e:	d00c      	beq.n	16f8a <att_write_rsp+0xba>
   16f70:	2600      	movs	r6, #0
   16f72:	e7bf      	b.n	16ef4 <att_write_rsp+0x24>
			net_buf_unref(data.buf);
   16f74:	9805      	ldr	r0, [sp, #20]
   16f76:	f00e fee3 	bl	25d40 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   16f7a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   16f7e:	462a      	mov	r2, r5
   16f80:	4641      	mov	r1, r8
   16f82:	4620      	mov	r0, r4
   16f84:	f7ff ff0e 	bl	16da4 <send_err_rsp>
   16f88:	e7ef      	b.n	16f6a <att_write_rsp+0x9a>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   16f8a:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   16f8e:	e7b1      	b.n	16ef4 <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16f90:	2612      	movs	r6, #18
   16f92:	e7af      	b.n	16ef4 <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
   16f94:	260e      	movs	r6, #14
   16f96:	e7ad      	b.n	16ef4 <att_write_rsp+0x24>
   16f98:	00024353 	.word	0x00024353
   16f9c:	0002412d 	.word	0x0002412d

00016fa0 <att_read_group_rsp>:
{
   16fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16fa4:	b08a      	sub	sp, #40	; 0x28
   16fa6:	4604      	mov	r4, r0
   16fa8:	460f      	mov	r7, r1
   16faa:	4615      	mov	r5, r2
   16fac:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   16fae:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   16fb2:	2214      	movs	r2, #20
   16fb4:	2100      	movs	r1, #0
   16fb6:	eb0d 0002 	add.w	r0, sp, r2
   16fba:	f00b fd5c 	bl	22a76 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   16fbe:	2201      	movs	r2, #1
   16fc0:	2111      	movs	r1, #17
   16fc2:	4640      	mov	r0, r8
   16fc4:	f00d fc22 	bl	2480c <bt_att_create_pdu>
   16fc8:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   16fca:	b350      	cbz	r0, 17022 <att_read_group_rsp+0x82>
	data.chan = chan;
   16fcc:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   16fce:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   16fd0:	2101      	movs	r1, #1
   16fd2:	3008      	adds	r0, #8
   16fd4:	f00e fefe 	bl	25dd4 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16fd8:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   16fda:	2200      	movs	r2, #0
   16fdc:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   16fde:	9209      	str	r2, [sp, #36]	; 0x24
   16fe0:	ab05      	add	r3, sp, #20
   16fe2:	9302      	str	r3, [sp, #8]
   16fe4:	4b10      	ldr	r3, [pc, #64]	; (17028 <att_read_group_rsp+0x88>)
   16fe6:	9301      	str	r3, [sp, #4]
   16fe8:	9200      	str	r2, [sp, #0]
   16fea:	4613      	mov	r3, r2
   16fec:	4631      	mov	r1, r6
   16fee:	4628      	mov	r0, r5
   16ff0:	f000 fc3a 	bl	17868 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   16ff4:	9b08      	ldr	r3, [sp, #32]
   16ff6:	781e      	ldrb	r6, [r3, #0]
   16ff8:	b14e      	cbz	r6, 1700e <att_read_group_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16ffa:	4a0c      	ldr	r2, [pc, #48]	; (1702c <att_read_group_rsp+0x8c>)
   16ffc:	9907      	ldr	r1, [sp, #28]
   16ffe:	4620      	mov	r0, r4
   17000:	f00d f954 	bl	242ac <bt_att_chan_send_rsp>
	return 0;
   17004:	2600      	movs	r6, #0
}
   17006:	4630      	mov	r0, r6
   17008:	b00a      	add	sp, #40	; 0x28
   1700a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   1700e:	9807      	ldr	r0, [sp, #28]
   17010:	f00e fe96 	bl	25d40 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   17014:	230a      	movs	r3, #10
   17016:	462a      	mov	r2, r5
   17018:	2110      	movs	r1, #16
   1701a:	4620      	mov	r0, r4
   1701c:	f7ff fec2 	bl	16da4 <send_err_rsp>
		return 0;
   17020:	e7f1      	b.n	17006 <att_read_group_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   17022:	260e      	movs	r6, #14
   17024:	e7ef      	b.n	17006 <att_read_group_rsp+0x66>
   17026:	bf00      	nop
   17028:	00016bc1 	.word	0x00016bc1
   1702c:	0002412d 	.word	0x0002412d

00017030 <att_read_mult_req>:
{
   17030:	b570      	push	{r4, r5, r6, lr}
   17032:	b088      	sub	sp, #32
   17034:	4606      	mov	r6, r0
   17036:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   17038:	6884      	ldr	r4, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   1703a:	2101      	movs	r1, #1
   1703c:	4620      	mov	r0, r4
   1703e:	f00e fd04 	bl	25a4a <bt_gatt_change_aware>
   17042:	2800      	cmp	r0, #0
   17044:	d039      	beq.n	170ba <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   17046:	2210      	movs	r2, #16
   17048:	2100      	movs	r1, #0
   1704a:	eb0d 0002 	add.w	r0, sp, r2
   1704e:	f00b fd12 	bl	22a76 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   17052:	2200      	movs	r2, #0
   17054:	210f      	movs	r1, #15
   17056:	4620      	mov	r0, r4
   17058:	f00d fbd8 	bl	2480c <bt_att_create_pdu>
   1705c:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1705e:	b378      	cbz	r0, 170c0 <att_read_mult_req+0x90>
	data.chan = chan;
   17060:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   17062:	89ab      	ldrh	r3, [r5, #12]
   17064:	2b01      	cmp	r3, #1
   17066:	d921      	bls.n	170ac <att_read_mult_req+0x7c>
	return net_buf_simple_pull_le16(&buf->b);
   17068:	f105 0008 	add.w	r0, r5, #8
   1706c:	f00e feec 	bl	25e48 <net_buf_simple_pull_le16>
   17070:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17072:	2301      	movs	r3, #1
   17074:	f88d 301c 	strb.w	r3, [sp, #28]
   17078:	ab04      	add	r3, sp, #16
   1707a:	9302      	str	r3, [sp, #8]
   1707c:	4b11      	ldr	r3, [pc, #68]	; (170c4 <att_read_mult_req+0x94>)
   1707e:	9301      	str	r3, [sp, #4]
   17080:	2200      	movs	r2, #0
   17082:	9200      	str	r2, [sp, #0]
   17084:	4613      	mov	r3, r2
   17086:	4601      	mov	r1, r0
   17088:	f000 fbee 	bl	17868 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1708c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   17090:	2b00      	cmp	r3, #0
   17092:	d0e6      	beq.n	17062 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   17094:	9806      	ldr	r0, [sp, #24]
   17096:	f00e fe53 	bl	25d40 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   1709a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1709e:	4622      	mov	r2, r4
   170a0:	210e      	movs	r1, #14
   170a2:	4630      	mov	r0, r6
   170a4:	f7ff fe7e 	bl	16da4 <send_err_rsp>
			return 0;
   170a8:	2000      	movs	r0, #0
   170aa:	e007      	b.n	170bc <att_read_mult_req+0x8c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   170ac:	4a06      	ldr	r2, [pc, #24]	; (170c8 <att_read_mult_req+0x98>)
   170ae:	9906      	ldr	r1, [sp, #24]
   170b0:	4630      	mov	r0, r6
   170b2:	f00d f8fb 	bl	242ac <bt_att_chan_send_rsp>
	return 0;
   170b6:	2000      	movs	r0, #0
   170b8:	e000      	b.n	170bc <att_read_mult_req+0x8c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   170ba:	2012      	movs	r0, #18
}
   170bc:	b008      	add	sp, #32
   170be:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
   170c0:	200e      	movs	r0, #14
   170c2:	e7fb      	b.n	170bc <att_read_mult_req+0x8c>
   170c4:	000244ff 	.word	0x000244ff
   170c8:	0002412d 	.word	0x0002412d

000170cc <att_read_rsp>:
{
   170cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   170d0:	b088      	sub	sp, #32
   170d2:	4604      	mov	r4, r0
   170d4:	4688      	mov	r8, r1
   170d6:	4616      	mov	r6, r2
   170d8:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   170da:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   170dc:	2101      	movs	r1, #1
   170de:	4638      	mov	r0, r7
   170e0:	f00e fcb3 	bl	25a4a <bt_gatt_change_aware>
   170e4:	2800      	cmp	r0, #0
   170e6:	d03a      	beq.n	1715e <att_read_rsp+0x92>
	if (!handle) {
   170e8:	b925      	cbnz	r5, 170f4 <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
   170ea:	2601      	movs	r6, #1
}
   170ec:	4630      	mov	r0, r6
   170ee:	b008      	add	sp, #32
   170f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   170f4:	2210      	movs	r2, #16
   170f6:	2100      	movs	r1, #0
   170f8:	eb0d 0002 	add.w	r0, sp, r2
   170fc:	f00b fcbb 	bl	22a76 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   17100:	2200      	movs	r2, #0
   17102:	4631      	mov	r1, r6
   17104:	4638      	mov	r0, r7
   17106:	f00d fb81 	bl	2480c <bt_att_create_pdu>
   1710a:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1710c:	b348      	cbz	r0, 17162 <att_read_rsp+0x96>
	data.chan = chan;
   1710e:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   17110:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   17114:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17118:	2301      	movs	r3, #1
   1711a:	f88d 301c 	strb.w	r3, [sp, #28]
   1711e:	ab04      	add	r3, sp, #16
   17120:	9302      	str	r3, [sp, #8]
   17122:	4b11      	ldr	r3, [pc, #68]	; (17168 <att_read_rsp+0x9c>)
   17124:	9301      	str	r3, [sp, #4]
   17126:	2200      	movs	r2, #0
   17128:	9200      	str	r2, [sp, #0]
   1712a:	4613      	mov	r3, r2
   1712c:	4629      	mov	r1, r5
   1712e:	4628      	mov	r0, r5
   17130:	f000 fb9a 	bl	17868 <bt_gatt_foreach_attr_type>
	if (data.err) {
   17134:	f89d 601c 	ldrb.w	r6, [sp, #28]
   17138:	b92e      	cbnz	r6, 17146 <att_read_rsp+0x7a>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1713a:	4a0c      	ldr	r2, [pc, #48]	; (1716c <att_read_rsp+0xa0>)
   1713c:	9906      	ldr	r1, [sp, #24]
   1713e:	4620      	mov	r0, r4
   17140:	f00d f8b4 	bl	242ac <bt_att_chan_send_rsp>
	return 0;
   17144:	e7d2      	b.n	170ec <att_read_rsp+0x20>
		net_buf_unref(data.buf);
   17146:	9806      	ldr	r0, [sp, #24]
   17148:	f00e fdfa 	bl	25d40 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   1714c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   17150:	462a      	mov	r2, r5
   17152:	4641      	mov	r1, r8
   17154:	4620      	mov	r0, r4
   17156:	f7ff fe25 	bl	16da4 <send_err_rsp>
		return 0;
   1715a:	2600      	movs	r6, #0
   1715c:	e7c6      	b.n	170ec <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1715e:	2612      	movs	r6, #18
   17160:	e7c4      	b.n	170ec <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
   17162:	260e      	movs	r6, #14
   17164:	e7c2      	b.n	170ec <att_read_rsp+0x20>
   17166:	bf00      	nop
   17168:	000244ff 	.word	0x000244ff
   1716c:	0002412d 	.word	0x0002412d

00017170 <att_read_type_rsp>:
{
   17170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17174:	b08a      	sub	sp, #40	; 0x28
   17176:	4604      	mov	r4, r0
   17178:	460f      	mov	r7, r1
   1717a:	4615      	mov	r5, r2
   1717c:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1717e:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   17182:	2218      	movs	r2, #24
   17184:	2100      	movs	r1, #0
   17186:	a804      	add	r0, sp, #16
   17188:	f00b fc75 	bl	22a76 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1718c:	2201      	movs	r2, #1
   1718e:	2109      	movs	r1, #9
   17190:	4640      	mov	r0, r8
   17192:	f00d fb3b 	bl	2480c <bt_att_create_pdu>
   17196:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   17198:	b368      	cbz	r0, 171f6 <att_read_type_rsp+0x86>
	data.chan = chan;
   1719a:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   1719c:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   1719e:	2101      	movs	r1, #1
   171a0:	3008      	adds	r0, #8
   171a2:	f00e fe17 	bl	25dd4 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   171a6:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   171a8:	2200      	movs	r2, #0
   171aa:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   171ac:	230a      	movs	r3, #10
   171ae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   171b2:	ab04      	add	r3, sp, #16
   171b4:	9302      	str	r3, [sp, #8]
   171b6:	4b11      	ldr	r3, [pc, #68]	; (171fc <att_read_type_rsp+0x8c>)
   171b8:	9301      	str	r3, [sp, #4]
   171ba:	9200      	str	r2, [sp, #0]
   171bc:	4613      	mov	r3, r2
   171be:	4631      	mov	r1, r6
   171c0:	4628      	mov	r0, r5
   171c2:	f000 fb51 	bl	17868 <bt_gatt_foreach_attr_type>
	if (data.err) {
   171c6:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   171ca:	b946      	cbnz	r6, 171de <att_read_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   171cc:	4a0c      	ldr	r2, [pc, #48]	; (17200 <att_read_type_rsp+0x90>)
   171ce:	9906      	ldr	r1, [sp, #24]
   171d0:	4620      	mov	r0, r4
   171d2:	f00d f86b 	bl	242ac <bt_att_chan_send_rsp>
}
   171d6:	4630      	mov	r0, r6
   171d8:	b00a      	add	sp, #40	; 0x28
   171da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   171de:	9806      	ldr	r0, [sp, #24]
   171e0:	f00e fdae 	bl	25d40 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   171e4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   171e8:	462a      	mov	r2, r5
   171ea:	2108      	movs	r1, #8
   171ec:	4620      	mov	r0, r4
   171ee:	f7ff fdd9 	bl	16da4 <send_err_rsp>
		return 0;
   171f2:	2600      	movs	r6, #0
   171f4:	e7ef      	b.n	171d6 <att_read_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   171f6:	260e      	movs	r6, #14
   171f8:	e7ed      	b.n	171d6 <att_read_type_rsp+0x66>
   171fa:	bf00      	nop
   171fc:	00016c75 	.word	0x00016c75
   17200:	0002412d 	.word	0x0002412d

00017204 <att_find_type_rsp>:
{
   17204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17208:	b08a      	sub	sp, #40	; 0x28
   1720a:	4604      	mov	r4, r0
   1720c:	460d      	mov	r5, r1
   1720e:	4616      	mov	r6, r2
   17210:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   17212:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   17216:	2214      	movs	r2, #20
   17218:	2100      	movs	r1, #0
   1721a:	eb0d 0002 	add.w	r0, sp, r2
   1721e:	f00b fc2a 	bl	22a76 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   17222:	2200      	movs	r2, #0
   17224:	2107      	movs	r1, #7
   17226:	4640      	mov	r0, r8
   17228:	f00d faf0 	bl	2480c <bt_att_create_pdu>
   1722c:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1722e:	b360      	cbz	r0, 1728a <att_find_type_rsp+0x86>
	data.chan = chan;
   17230:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   17232:	2200      	movs	r2, #0
   17234:	9207      	str	r2, [sp, #28]
	data.value = value;
   17236:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   17238:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1723c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17240:	230a      	movs	r3, #10
   17242:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   17246:	ab05      	add	r3, sp, #20
   17248:	9302      	str	r3, [sp, #8]
   1724a:	4b11      	ldr	r3, [pc, #68]	; (17290 <att_find_type_rsp+0x8c>)
   1724c:	9301      	str	r3, [sp, #4]
   1724e:	9200      	str	r2, [sp, #0]
   17250:	4613      	mov	r3, r2
   17252:	4631      	mov	r1, r6
   17254:	4628      	mov	r0, r5
   17256:	f000 fb07 	bl	17868 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1725a:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   1725e:	b946      	cbnz	r6, 17272 <att_find_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17260:	4a0c      	ldr	r2, [pc, #48]	; (17294 <att_find_type_rsp+0x90>)
   17262:	9906      	ldr	r1, [sp, #24]
   17264:	4620      	mov	r0, r4
   17266:	f00d f821 	bl	242ac <bt_att_chan_send_rsp>
}
   1726a:	4630      	mov	r0, r6
   1726c:	b00a      	add	sp, #40	; 0x28
   1726e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   17272:	9806      	ldr	r0, [sp, #24]
   17274:	f00e fd64 	bl	25d40 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   17278:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1727c:	462a      	mov	r2, r5
   1727e:	2106      	movs	r1, #6
   17280:	4620      	mov	r0, r4
   17282:	f7ff fd8f 	bl	16da4 <send_err_rsp>
		return 0;
   17286:	2600      	movs	r6, #0
   17288:	e7ef      	b.n	1726a <att_find_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   1728a:	260e      	movs	r6, #14
   1728c:	e7ed      	b.n	1726a <att_find_type_rsp+0x66>
   1728e:	bf00      	nop
   17290:	00024547 	.word	0x00024547
   17294:	0002412d 	.word	0x0002412d

00017298 <att_find_info_rsp>:
{
   17298:	b5f0      	push	{r4, r5, r6, r7, lr}
   1729a:	b089      	sub	sp, #36	; 0x24
   1729c:	4604      	mov	r4, r0
   1729e:	460f      	mov	r7, r1
   172a0:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   172a2:	6885      	ldr	r5, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   172a4:	2210      	movs	r2, #16
   172a6:	2100      	movs	r1, #0
   172a8:	eb0d 0002 	add.w	r0, sp, r2
   172ac:	f00b fbe3 	bl	22a76 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   172b0:	2200      	movs	r2, #0
   172b2:	2105      	movs	r1, #5
   172b4:	4628      	mov	r0, r5
   172b6:	f00d faa9 	bl	2480c <bt_att_create_pdu>
   172ba:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   172bc:	b300      	cbz	r0, 17300 <att_find_info_rsp+0x68>
	data.chan = chan;
   172be:	9404      	str	r4, [sp, #16]
   172c0:	ab04      	add	r3, sp, #16
   172c2:	9302      	str	r3, [sp, #8]
   172c4:	4b0f      	ldr	r3, [pc, #60]	; (17304 <att_find_info_rsp+0x6c>)
   172c6:	9301      	str	r3, [sp, #4]
   172c8:	2200      	movs	r2, #0
   172ca:	9200      	str	r2, [sp, #0]
   172cc:	4613      	mov	r3, r2
   172ce:	4631      	mov	r1, r6
   172d0:	4638      	mov	r0, r7
   172d2:	f000 fac9 	bl	17868 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   172d6:	9b06      	ldr	r3, [sp, #24]
   172d8:	b13b      	cbz	r3, 172ea <att_find_info_rsp+0x52>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   172da:	4a0b      	ldr	r2, [pc, #44]	; (17308 <att_find_info_rsp+0x70>)
   172dc:	9905      	ldr	r1, [sp, #20]
   172de:	4620      	mov	r0, r4
   172e0:	f00c ffe4 	bl	242ac <bt_att_chan_send_rsp>
	return 0;
   172e4:	2000      	movs	r0, #0
}
   172e6:	b009      	add	sp, #36	; 0x24
   172e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
   172ea:	9805      	ldr	r0, [sp, #20]
   172ec:	f00e fd28 	bl	25d40 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   172f0:	230a      	movs	r3, #10
   172f2:	463a      	mov	r2, r7
   172f4:	2104      	movs	r1, #4
   172f6:	4620      	mov	r0, r4
   172f8:	f7ff fd54 	bl	16da4 <send_err_rsp>
		return 0;
   172fc:	2000      	movs	r0, #0
   172fe:	e7f2      	b.n	172e6 <att_find_info_rsp+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   17300:	200e      	movs	r0, #14
   17302:	e7f0      	b.n	172e6 <att_find_info_rsp+0x4e>
   17304:	0002469d 	.word	0x0002469d
   17308:	0002412d 	.word	0x0002412d

0001730c <att_mtu_req>:
{
   1730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1730e:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   17310:	6803      	ldr	r3, [r0, #0]
   17312:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17314:	f3bf 8f5b 	dmb	ish
   17318:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1731c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   17320:	f013 0f08 	tst.w	r3, #8
   17324:	d123      	bne.n	1736e <att_mtu_req+0x62>
	req = (void *)buf->data;
   17326:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   17328:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1732a:	2e16      	cmp	r6, #22
   1732c:	d921      	bls.n	17372 <att_mtu_req+0x66>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1732e:	2202      	movs	r2, #2
   17330:	2103      	movs	r1, #3
   17332:	f00d fa6b 	bl	2480c <bt_att_create_pdu>
	if (!pdu) {
   17336:	4607      	mov	r7, r0
   17338:	b1e8      	cbz	r0, 17376 <att_mtu_req+0x6a>
   1733a:	2102      	movs	r1, #2
   1733c:	3008      	adds	r0, #8
   1733e:	f00e fd49 	bl	25dd4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   17342:	2500      	movs	r5, #0
   17344:	f06f 0308 	mvn.w	r3, #8
   17348:	7003      	strb	r3, [r0, #0]
   1734a:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1734c:	4a0b      	ldr	r2, [pc, #44]	; (1737c <att_mtu_req+0x70>)
   1734e:	4639      	mov	r1, r7
   17350:	4620      	mov	r0, r4
   17352:	f00c ffab 	bl	242ac <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   17356:	2ef7      	cmp	r6, #247	; 0xf7
   17358:	bf28      	it	cs
   1735a:	26f7      	movcs	r6, #247	; 0xf7
   1735c:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   17360:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   17364:	4620      	mov	r0, r4
   17366:	f00c ffae 	bl	242c6 <att_chan_mtu_updated>
	return 0;
   1736a:	4628      	mov	r0, r5
}
   1736c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1736e:	2006      	movs	r0, #6
   17370:	e7fc      	b.n	1736c <att_mtu_req+0x60>
		return BT_ATT_ERR_INVALID_PDU;
   17372:	2004      	movs	r0, #4
   17374:	e7fa      	b.n	1736c <att_mtu_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   17376:	200e      	movs	r0, #14
   17378:	e7f8      	b.n	1736c <att_mtu_req+0x60>
   1737a:	bf00      	nop
   1737c:	0002412d 	.word	0x0002412d

00017380 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   17380:	b500      	push	{lr}
   17382:	b083      	sub	sp, #12
   17384:	4602      	mov	r2, r0
   17386:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
   17388:	2100      	movs	r1, #0
   1738a:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1738c:	a901      	add	r1, sp, #4
   1738e:	4807      	ldr	r0, [pc, #28]	; (173ac <bt_att_req_alloc+0x2c>)
   17390:	f005 fd34 	bl	1cdfc <k_mem_slab_alloc>
   17394:	b940      	cbnz	r0, 173a8 <bt_att_req_alloc+0x28>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   17396:	2210      	movs	r2, #16
   17398:	2100      	movs	r1, #0
   1739a:	9801      	ldr	r0, [sp, #4]
   1739c:	f00b fb6b 	bl	22a76 <memset>

	return req;
   173a0:	9801      	ldr	r0, [sp, #4]
}
   173a2:	b003      	add	sp, #12
   173a4:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   173a8:	2000      	movs	r0, #0
   173aa:	e7fa      	b.n	173a2 <bt_att_req_alloc+0x22>
   173ac:	200007e8 	.word	0x200007e8

000173b0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   173b0:	b500      	push	{lr}
   173b2:	b083      	sub	sp, #12
   173b4:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   173b6:	6880      	ldr	r0, [r0, #8]
   173b8:	b120      	cbz	r0, 173c4 <bt_att_req_free+0x14>
		net_buf_unref(req->buf);
   173ba:	f00e fcc1 	bl	25d40 <net_buf_unref>
		req->buf = NULL;
   173be:	9b01      	ldr	r3, [sp, #4]
   173c0:	2200      	movs	r2, #0
   173c2:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   173c4:	a901      	add	r1, sp, #4
   173c6:	4803      	ldr	r0, [pc, #12]	; (173d4 <bt_att_req_free+0x24>)
   173c8:	f010 f836 	bl	27438 <k_mem_slab_free>
}
   173cc:	b003      	add	sp, #12
   173ce:	f85d fb04 	ldr.w	pc, [sp], #4
   173d2:	bf00      	nop
   173d4:	200007e8 	.word	0x200007e8

000173d8 <att_handle_rsp>:
{
   173d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   173dc:	b082      	sub	sp, #8
   173de:	4604      	mov	r4, r0
   173e0:	460f      	mov	r7, r1
   173e2:	4691      	mov	r9, r2
   173e4:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   173e6:	f500 7088 	add.w	r0, r0, #272	; 0x110
   173ea:	f010 faa5 	bl	27938 <k_work_cancel_delayable>
	if (!chan->req) {
   173ee:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   173f2:	b318      	cbz	r0, 1743c <att_handle_rsp+0x64>
	if (chan->req == &cancel) {
   173f4:	4b12      	ldr	r3, [pc, #72]	; (17440 <att_handle_rsp+0x68>)
   173f6:	4298      	cmp	r0, r3
   173f8:	d01c      	beq.n	17434 <att_handle_rsp+0x5c>
	func = chan->req->func;
   173fa:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   173fc:	f04f 0a00 	mov.w	sl, #0
   17400:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   17404:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   17408:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   1740c:	f7ff ffd0 	bl	173b0 <bt_att_req_free>
	chan->req = NULL;
   17410:	f8c4 a0f4 	str.w	sl, [r4, #244]	; 0xf4
	att_req_send_process(chan->att);
   17414:	6820      	ldr	r0, [r4, #0]
   17416:	f00c fe2b 	bl	24070 <att_req_send_process>
	if (func) {
   1741a:	b13d      	cbz	r5, 1742c <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   1741c:	6823      	ldr	r3, [r4, #0]
   1741e:	6818      	ldr	r0, [r3, #0]
   17420:	f8cd 8000 	str.w	r8, [sp]
   17424:	464b      	mov	r3, r9
   17426:	463a      	mov	r2, r7
   17428:	4631      	mov	r1, r6
   1742a:	47a8      	blx	r5
}
   1742c:	2000      	movs	r0, #0
   1742e:	b002      	add	sp, #8
   17430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chan->req = NULL;
   17434:	2500      	movs	r5, #0
   17436:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		goto process;
   1743a:	e7eb      	b.n	17414 <att_handle_rsp+0x3c>
	bt_att_func_t func = NULL;
   1743c:	2500      	movs	r5, #0
   1743e:	e7e9      	b.n	17414 <att_handle_rsp+0x3c>
   17440:	20003218 	.word	0x20003218

00017444 <att_error_rsp>:
{
   17444:	b508      	push	{r3, lr}
	rsp = (void *)buf->data;
   17446:	688a      	ldr	r2, [r1, #8]
	if (!chan->req || chan->req == &cancel) {
   17448:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1744c:	b143      	cbz	r3, 17460 <att_error_rsp+0x1c>
   1744e:	4906      	ldr	r1, [pc, #24]	; (17468 <att_error_rsp+0x24>)
   17450:	428b      	cmp	r3, r1
   17452:	d007      	beq.n	17464 <att_error_rsp+0x20>
	err = rsp->error;
   17454:	78d3      	ldrb	r3, [r2, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   17456:	2200      	movs	r2, #0
   17458:	4611      	mov	r1, r2
   1745a:	f7ff ffbd 	bl	173d8 <att_handle_rsp>
}
   1745e:	bd08      	pop	{r3, pc}
		err = BT_ATT_ERR_UNLIKELY;
   17460:	230e      	movs	r3, #14
   17462:	e7f8      	b.n	17456 <att_error_rsp+0x12>
   17464:	230e      	movs	r3, #14
   17466:	e7f6      	b.n	17456 <att_error_rsp+0x12>
   17468:	20003218 	.word	0x20003218

0001746c <att_reset>:
{
   1746c:	b570      	push	{r4, r5, r6, lr}
   1746e:	b084      	sub	sp, #16
   17470:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   17472:	2200      	movs	r2, #0
   17474:	2300      	movs	r3, #0
   17476:	9803      	ldr	r0, [sp, #12]
   17478:	300c      	adds	r0, #12
   1747a:	f00e fc2f 	bl	25cdc <net_buf_get>
   1747e:	4603      	mov	r3, r0
   17480:	b118      	cbz	r0, 1748a <att_reset+0x1e>
		net_buf_unref(buf);
   17482:	4618      	mov	r0, r3
   17484:	f00e fc5c 	bl	25d40 <net_buf_unref>
   17488:	e7f3      	b.n	17472 <att_reset+0x6>
	att->conn = NULL;
   1748a:	9b03      	ldr	r3, [sp, #12]
   1748c:	2200      	movs	r2, #0
   1748e:	601a      	str	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   17490:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   17492:	685d      	ldr	r5, [r3, #4]
   17494:	b11d      	cbz	r5, 1749e <att_reset+0x32>
   17496:	462c      	mov	r4, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   17498:	b135      	cbz	r5, 174a8 <att_reset+0x3c>
	return node->next;
   1749a:	682c      	ldr	r4, [r5, #0]
   1749c:	e004      	b.n	174a8 <att_reset+0x3c>
   1749e:	462c      	mov	r4, r5
   174a0:	e002      	b.n	174a8 <att_reset+0x3c>
   174a2:	4623      	mov	r3, r4
   174a4:	4625      	mov	r5, r4
   174a6:	461c      	mov	r4, r3
   174a8:	b195      	cbz	r5, 174d0 <att_reset+0x64>
		if (req->func) {
   174aa:	686e      	ldr	r6, [r5, #4]
   174ac:	b136      	cbz	r6, 174bc <att_reset+0x50>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   174ae:	68eb      	ldr	r3, [r5, #12]
   174b0:	9300      	str	r3, [sp, #0]
   174b2:	2300      	movs	r3, #0
   174b4:	461a      	mov	r2, r3
   174b6:	210e      	movs	r1, #14
   174b8:	4618      	mov	r0, r3
   174ba:	47b0      	blx	r6
		bt_att_req_free(req);
   174bc:	4628      	mov	r0, r5
   174be:	f7ff ff77 	bl	173b0 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   174c2:	2c00      	cmp	r4, #0
   174c4:	d0ed      	beq.n	174a2 <att_reset+0x36>
   174c6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   174c8:	2c00      	cmp	r4, #0
   174ca:	d0eb      	beq.n	174a4 <att_reset+0x38>
	return node->next;
   174cc:	6823      	ldr	r3, [r4, #0]
   174ce:	e7e9      	b.n	174a4 <att_reset+0x38>
	k_mem_slab_free(&att_slab, (void **)&att);
   174d0:	a903      	add	r1, sp, #12
   174d2:	4802      	ldr	r0, [pc, #8]	; (174dc <att_reset+0x70>)
   174d4:	f00f ffb0 	bl	27438 <k_mem_slab_free>
}
   174d8:	b004      	add	sp, #16
   174da:	bd70      	pop	{r4, r5, r6, pc}
   174dc:	20000794 	.word	0x20000794

000174e0 <bt_att_chan_req_cancel>:
	return 0;
}

static bool bt_att_chan_req_cancel(struct bt_att_chan *chan,
				   struct bt_att_req *req)
{
   174e0:	b508      	push	{r3, lr}
	if (chan->req != req) {
   174e2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   174e6:	428b      	cmp	r3, r1
   174e8:	d001      	beq.n	174ee <bt_att_chan_req_cancel+0xe>
		return false;
   174ea:	2000      	movs	r0, #0
	chan->req = &cancel;

	bt_att_req_free(req);

	return true;
}
   174ec:	bd08      	pop	{r3, pc}
	chan->req = &cancel;
   174ee:	4b04      	ldr	r3, [pc, #16]	; (17500 <bt_att_chan_req_cancel+0x20>)
   174f0:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
	bt_att_req_free(req);
   174f4:	4608      	mov	r0, r1
   174f6:	f7ff ff5b 	bl	173b0 <bt_att_req_free>
	return true;
   174fa:	2001      	movs	r0, #1
   174fc:	e7f6      	b.n	174ec <bt_att_chan_req_cancel+0xc>
   174fe:	bf00      	nop
   17500:	20003218 	.word	0x20003218

00017504 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17504:	4b0d      	ldr	r3, [pc, #52]	; (1753c <bt_gatt_service_init+0x38>)
   17506:	2201      	movs	r2, #1
   17508:	f3bf 8f5b 	dmb	ish
   1750c:	e853 1f00 	ldrex	r1, [r3]
   17510:	2900      	cmp	r1, #0
   17512:	d103      	bne.n	1751c <bt_gatt_service_init+0x18>
   17514:	e843 2000 	strex	r0, r2, [r3]
   17518:	2800      	cmp	r0, #0
   1751a:	d1f7      	bne.n	1750c <bt_gatt_service_init+0x8>
   1751c:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   17520:	d101      	bne.n	17526 <bt_gatt_service_init+0x22>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17522:	4b07      	ldr	r3, [pc, #28]	; (17540 <bt_gatt_service_init+0x3c>)
   17524:	e006      	b.n	17534 <bt_gatt_service_init+0x30>
   17526:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   17528:	685a      	ldr	r2, [r3, #4]
   1752a:	4906      	ldr	r1, [pc, #24]	; (17544 <bt_gatt_service_init+0x40>)
   1752c:	8808      	ldrh	r0, [r1, #0]
   1752e:	4402      	add	r2, r0
   17530:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17532:	3308      	adds	r3, #8
   17534:	4a04      	ldr	r2, [pc, #16]	; (17548 <bt_gatt_service_init+0x44>)
   17536:	4293      	cmp	r3, r2
   17538:	d3f6      	bcc.n	17528 <bt_gatt_service_init+0x24>
	}
}
   1753a:	4770      	bx	lr
   1753c:	20003304 	.word	0x20003304
   17540:	0002828c 	.word	0x0002828c
   17544:	20006a80 	.word	0x20006a80
   17548:	0002829c 	.word	0x0002829c

0001754c <find_cf_cfg>:
{
   1754c:	b570      	push	{r4, r5, r6, lr}
   1754e:	b082      	sub	sp, #8
   17550:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   17552:	2400      	movs	r4, #0
   17554:	e00b      	b.n	1756e <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   17556:	4628      	mov	r0, r5
   17558:	2300      	movs	r3, #0
   1755a:	9300      	str	r3, [sp, #0]
   1755c:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   17560:	2207      	movs	r2, #7
   17562:	4669      	mov	r1, sp
   17564:	3001      	adds	r0, #1
   17566:	f00b fa35 	bl	229d4 <memcmp>
   1756a:	b1a0      	cbz	r0, 17596 <find_cf_cfg+0x4a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1756c:	3401      	adds	r4, #1
   1756e:	2c03      	cmp	r4, #3
   17570:	dc10      	bgt.n	17594 <find_cf_cfg+0x48>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   17572:	4d0a      	ldr	r5, [pc, #40]	; (1759c <find_cf_cfg+0x50>)
   17574:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   17578:	2e00      	cmp	r6, #0
   1757a:	d0ec      	beq.n	17556 <find_cf_cfg+0xa>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1757c:	4907      	ldr	r1, [pc, #28]	; (1759c <find_cf_cfg+0x50>)
   1757e:	0123      	lsls	r3, r4, #4
   17580:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   17584:	3201      	adds	r2, #1
   17586:	5cc9      	ldrb	r1, [r1, r3]
   17588:	4630      	mov	r0, r6
   1758a:	f00c f983 	bl	23894 <bt_conn_is_peer_addr_le>
   1758e:	2800      	cmp	r0, #0
   17590:	d0ec      	beq.n	1756c <find_cf_cfg+0x20>
   17592:	e000      	b.n	17596 <find_cf_cfg+0x4a>
	return NULL;
   17594:	2500      	movs	r5, #0
}
   17596:	4628      	mov	r0, r5
   17598:	b002      	add	sp, #8
   1759a:	bd70      	pop	{r4, r5, r6, pc}
   1759c:	20003230 	.word	0x20003230

000175a0 <find_sc_cfg>:
{
   175a0:	b570      	push	{r4, r5, r6, lr}
   175a2:	4605      	mov	r5, r0
   175a4:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   175a6:	2400      	movs	r4, #0
   175a8:	e000      	b.n	175ac <find_sc_cfg+0xc>
   175aa:	3401      	adds	r4, #1
   175ac:	2c03      	cmp	r4, #3
   175ae:	d817      	bhi.n	175e0 <find_sc_cfg+0x40>
		if (id == sc_cfg[i].id &&
   175b0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   175b4:	4a0b      	ldr	r2, [pc, #44]	; (175e4 <find_sc_cfg+0x44>)
   175b6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   175ba:	429d      	cmp	r5, r3
   175bc:	d1f5      	bne.n	175aa <find_sc_cfg+0xa>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   175be:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   175c2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   175c6:	2207      	movs	r2, #7
   175c8:	4631      	mov	r1, r6
   175ca:	3001      	adds	r0, #1
   175cc:	f00b fa02 	bl	229d4 <memcmp>
		if (id == sc_cfg[i].id &&
   175d0:	2800      	cmp	r0, #0
   175d2:	d1ea      	bne.n	175aa <find_sc_cfg+0xa>
			return &sc_cfg[i];
   175d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   175d8:	4802      	ldr	r0, [pc, #8]	; (175e4 <find_sc_cfg+0x44>)
   175da:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   175de:	e000      	b.n	175e2 <find_sc_cfg+0x42>
	return NULL;
   175e0:	2000      	movs	r0, #0
}
   175e2:	bd70      	pop	{r4, r5, r6, pc}
   175e4:	20003274 	.word	0x20003274

000175e8 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   175e8:	b570      	push	{r4, r5, r6, lr}
   175ea:	b082      	sub	sp, #8
   175ec:	4606      	mov	r6, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   175ee:	2400      	movs	r4, #0
   175f0:	e00b      	b.n	1760a <gatt_sub_find+0x22>
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   175f2:	4628      	mov	r0, r5
   175f4:	2300      	movs	r3, #0
   175f6:	9300      	str	r3, [sp, #0]
   175f8:	f8cd 3003 	str.w	r3, [sp, #3]
   175fc:	2207      	movs	r2, #7
   175fe:	4669      	mov	r1, sp
   17600:	3001      	adds	r0, #1
   17602:	f00b f9e7 	bl	229d4 <memcmp>
   17606:	b1a0      	cbz	r0, 17632 <gatt_sub_find+0x4a>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   17608:	3401      	adds	r4, #1
   1760a:	2c03      	cmp	r4, #3
   1760c:	dc10      	bgt.n	17630 <gatt_sub_find+0x48>
		struct gatt_sub *sub = &subscriptions[i];
   1760e:	4d0a      	ldr	r5, [pc, #40]	; (17638 <gatt_sub_find+0x50>)
   17610:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   17614:	2e00      	cmp	r6, #0
   17616:	d0ec      	beq.n	175f2 <gatt_sub_find+0xa>
				return sub;
			}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   17618:	4907      	ldr	r1, [pc, #28]	; (17638 <gatt_sub_find+0x50>)
   1761a:	0123      	lsls	r3, r4, #4
   1761c:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   17620:	3201      	adds	r2, #1
   17622:	5cc9      	ldrb	r1, [r1, r3]
   17624:	4630      	mov	r0, r6
   17626:	f00c f935 	bl	23894 <bt_conn_is_peer_addr_le>
   1762a:	2800      	cmp	r0, #0
   1762c:	d0ec      	beq.n	17608 <gatt_sub_find+0x20>
   1762e:	e000      	b.n	17632 <gatt_sub_find+0x4a>
			return sub;
		}
	}

	return NULL;
   17630:	2500      	movs	r5, #0
}
   17632:	4628      	mov	r0, r5
   17634:	b002      	add	sp, #8
   17636:	bd70      	pop	{r4, r5, r6, pc}
   17638:	20003308 	.word	0x20003308

0001763c <sc_indicate_rsp>:
{
   1763c:	b510      	push	{r4, lr}
   1763e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17640:	4b19      	ldr	r3, [pc, #100]	; (176a8 <sc_indicate_rsp+0x6c>)
   17642:	f103 0250 	add.w	r2, r3, #80	; 0x50
   17646:	f3bf 8f5b 	dmb	ish
   1764a:	e852 1f00 	ldrex	r1, [r2]
   1764e:	f021 0102 	bic.w	r1, r1, #2
   17652:	e842 1000 	strex	r0, r1, [r2]
   17656:	2800      	cmp	r0, #0
   17658:	d1f7      	bne.n	1764a <sc_indicate_rsp+0xe>
   1765a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1765e:	f3bf 8f5b 	dmb	ish
   17662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   17664:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17668:	f013 0f01 	tst.w	r3, #1
   1766c:	d116      	bne.n	1769c <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
   1766e:	4620      	mov	r0, r4
   17670:	f7ff ff6c 	bl	1754c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   17674:	4603      	mov	r3, r0
   17676:	b180      	cbz	r0, 1769a <sc_indicate_rsp+0x5e>
   17678:	7a02      	ldrb	r2, [r0, #8]
   1767a:	f012 0f01 	tst.w	r2, #1
   1767e:	d00c      	beq.n	1769a <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   17680:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17682:	f3bf 8f5b 	dmb	ish
   17686:	e853 2f00 	ldrex	r2, [r3]
   1768a:	f042 0201 	orr.w	r2, r2, #1
   1768e:	e843 2100 	strex	r1, r2, [r3]
   17692:	2900      	cmp	r1, #0
   17694:	d1f7      	bne.n	17686 <sc_indicate_rsp+0x4a>
   17696:	f3bf 8f5b 	dmb	ish
}
   1769a:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1769c:	2200      	movs	r2, #0
   1769e:	2300      	movs	r3, #0
   176a0:	4802      	ldr	r0, [pc, #8]	; (176ac <sc_indicate_rsp+0x70>)
   176a2:	f006 f807 	bl	1d6b4 <k_work_reschedule>
   176a6:	e7e2      	b.n	1766e <sc_indicate_rsp+0x32>
   176a8:	20002118 	.word	0x20002118
   176ac:	20002138 	.word	0x20002138

000176b0 <disconnected_cb>:
{
   176b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176b4:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   176b6:	6882      	ldr	r2, [r0, #8]
   176b8:	4b2e      	ldr	r3, [pc, #184]	; (17774 <disconnected_cb+0xc4>)
   176ba:	429a      	cmp	r2, r3
   176bc:	d002      	beq.n	176c4 <disconnected_cb+0x14>
}
   176be:	2001      	movs	r0, #1
   176c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176c4:	4606      	mov	r6, r0
	ccc = attr->user_data;
   176c6:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (!ccc->value) {
   176ca:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
   176ce:	2b00      	cmp	r3, #0
   176d0:	d0f5      	beq.n	176be <disconnected_cb+0xe>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   176d2:	2400      	movs	r4, #0
	value_used = false;
   176d4:	46a2      	mov	sl, r4
   176d6:	e003      	b.n	176e0 <disconnected_cb+0x30>
				bt_conn_unref(tmp);
   176d8:	4618      	mov	r0, r3
   176da:	f00c f881 	bl	237e0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   176de:	3401      	adds	r4, #1
   176e0:	2c03      	cmp	r4, #3
   176e2:	d839      	bhi.n	17758 <disconnected_cb+0xa8>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   176e4:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   176e8:	eb08 0545 	add.w	r5, r8, r5, lsl #1
		if (!cfg->value) {
   176ec:	892b      	ldrh	r3, [r5, #8]
   176ee:	2b00      	cmp	r3, #0
   176f0:	d0f5      	beq.n	176de <disconnected_cb+0x2e>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   176f2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   176f6:	f105 0901 	add.w	r9, r5, #1
   176fa:	464a      	mov	r2, r9
   176fc:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
   17700:	4638      	mov	r0, r7
   17702:	f00c f8c7 	bl	23894 <bt_conn_is_peer_addr_le>
   17706:	b978      	cbnz	r0, 17728 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17708:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1770c:	4649      	mov	r1, r9
   1770e:	f818 0013 	ldrb.w	r0, [r8, r3, lsl #1]
   17712:	f7fe fed7 	bl	164c4 <bt_conn_lookup_addr_le>
			if (tmp) {
   17716:	4603      	mov	r3, r0
   17718:	2800      	cmp	r0, #0
   1771a:	d0e0      	beq.n	176de <disconnected_cb+0x2e>
				if (tmp->state == BT_CONN_CONNECTED) {
   1771c:	7a82      	ldrb	r2, [r0, #10]
   1771e:	2a07      	cmp	r2, #7
   17720:	d1da      	bne.n	176d8 <disconnected_cb+0x28>
					value_used = true;
   17722:	f04f 0a01 	mov.w	sl, #1
   17726:	e7d7      	b.n	176d8 <disconnected_cb+0x28>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17728:	f107 0b88 	add.w	fp, r7, #136	; 0x88
   1772c:	4659      	mov	r1, fp
   1772e:	7a38      	ldrb	r0, [r7, #8]
   17730:	f00b fd6f 	bl	23212 <bt_addr_le_is_bonded>
   17734:	b950      	cbnz	r0, 1774c <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   17736:	4b10      	ldr	r3, [pc, #64]	; (17778 <disconnected_cb+0xc8>)
   17738:	4598      	cmp	r8, r3
   1773a:	d003      	beq.n	17744 <disconnected_cb+0x94>
				clear_ccc_cfg(cfg);
   1773c:	4628      	mov	r0, r5
   1773e:	f00d fcad 	bl	2509c <clear_ccc_cfg>
   17742:	e7cc      	b.n	176de <disconnected_cb+0x2e>
					sc_clear(conn);
   17744:	4638      	mov	r0, r7
   17746:	f00d fda1 	bl	2528c <sc_clear>
   1774a:	e7f7      	b.n	1773c <disconnected_cb+0x8c>
	memcpy(dst, src, sizeof(*dst));
   1774c:	2207      	movs	r2, #7
   1774e:	4659      	mov	r1, fp
   17750:	4648      	mov	r0, r9
   17752:	f00b f96c 	bl	22a2e <memcpy>
}
   17756:	e7c2      	b.n	176de <disconnected_cb+0x2e>
	if (!value_used) {
   17758:	f1ba 0f00 	cmp.w	sl, #0
   1775c:	d1af      	bne.n	176be <disconnected_cb+0xe>
		ccc->value = 0U;
   1775e:	2300      	movs	r3, #0
   17760:	f8a8 3028 	strh.w	r3, [r8, #40]	; 0x28
		if (ccc->cfg_changed) {
   17764:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   17768:	2b00      	cmp	r3, #0
   1776a:	d0a8      	beq.n	176be <disconnected_cb+0xe>
			ccc->cfg_changed(attr, ccc->value);
   1776c:	2100      	movs	r1, #0
   1776e:	4630      	mov	r0, r6
   17770:	4798      	blx	r3
   17772:	e7a4      	b.n	176be <disconnected_cb+0xe>
   17774:	000250bd 	.word	0x000250bd
   17778:	20000688 	.word	0x20000688

0001777c <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   1777c:	b500      	push	{lr}
   1777e:	b083      	sub	sp, #12
   17780:	460a      	mov	r2, r1
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   17782:	2304      	movs	r3, #4
   17784:	9301      	str	r3, [sp, #4]
   17786:	2312      	movs	r3, #18
   17788:	9300      	str	r3, [sp, #0]
   1778a:	4b03      	ldr	r3, [pc, #12]	; (17798 <gatt_write_ccc+0x1c>)
   1778c:	4903      	ldr	r1, [pc, #12]	; (1779c <gatt_write_ccc+0x20>)
   1778e:	f00d fe22 	bl	253d6 <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
   17792:	b003      	add	sp, #12
   17794:	f85d fb04 	ldr.w	pc, [sp], #4
   17798:	000254b1 	.word	0x000254b1
   1779c:	000252e7 	.word	0x000252e7

000177a0 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   177a0:	4b13      	ldr	r3, [pc, #76]	; (177f0 <bt_gatt_init+0x50>)
   177a2:	2201      	movs	r2, #1
   177a4:	f3bf 8f5b 	dmb	ish
   177a8:	e853 1f00 	ldrex	r1, [r3]
   177ac:	2900      	cmp	r1, #0
   177ae:	d103      	bne.n	177b8 <bt_gatt_init+0x18>
   177b0:	e843 2000 	strex	r0, r2, [r3]
   177b4:	2800      	cmp	r0, #0
   177b6:	d1f7      	bne.n	177a8 <bt_gatt_init+0x8>
   177b8:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   177bc:	d116      	bne.n	177ec <bt_gatt_init+0x4c>
{
   177be:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   177c0:	f7ff fea0 	bl	17504 <bt_gatt_service_init>
	list->head = NULL;
   177c4:	4b0b      	ldr	r3, [pc, #44]	; (177f4 <bt_gatt_init+0x54>)
   177c6:	2200      	movs	r2, #0
   177c8:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   177ca:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   177cc:	4c0a      	ldr	r4, [pc, #40]	; (177f8 <bt_gatt_init+0x58>)
   177ce:	490b      	ldr	r1, [pc, #44]	; (177fc <bt_gatt_init+0x5c>)
   177d0:	4620      	mov	r0, r4
   177d2:	f010 f865 	bl	278a0 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   177d6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   177da:	2300      	movs	r3, #0
   177dc:	4620      	mov	r0, r4
   177de:	f005 ff61 	bl	1d6a4 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   177e2:	4907      	ldr	r1, [pc, #28]	; (17800 <bt_gatt_init+0x60>)
   177e4:	4807      	ldr	r0, [pc, #28]	; (17804 <bt_gatt_init+0x64>)
   177e6:	f010 f85b 	bl	278a0 <k_work_init_delayable>
}
   177ea:	bd10      	pop	{r4, pc}
   177ec:	4770      	bx	lr
   177ee:	bf00      	nop
   177f0:	20003270 	.word	0x20003270
   177f4:	20003228 	.word	0x20003228
   177f8:	200020c0 	.word	0x200020c0
   177fc:	00025753 	.word	0x00025753
   17800:	00017b35 	.word	0x00017b35
   17804:	20002138 	.word	0x20002138

00017808 <bt_gatt_attr_get_handle>:
	if (!attr) {
   17808:	b328      	cbz	r0, 17856 <bt_gatt_attr_get_handle+0x4e>
{
   1780a:	b4f0      	push	{r4, r5, r6, r7}
   1780c:	4606      	mov	r6, r0
	if (attr->handle) {
   1780e:	8a00      	ldrh	r0, [r0, #16]
   17810:	bb20      	cbnz	r0, 1785c <bt_gatt_attr_get_handle+0x54>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17812:	4d13      	ldr	r5, [pc, #76]	; (17860 <bt_gatt_attr_get_handle+0x58>)
	uint16_t handle = 1;
   17814:	2201      	movs	r2, #1
   17816:	e003      	b.n	17820 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   17818:	686b      	ldr	r3, [r5, #4]
   1781a:	441a      	add	r2, r3
   1781c:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1781e:	3508      	adds	r5, #8
   17820:	4b10      	ldr	r3, [pc, #64]	; (17864 <bt_gatt_attr_get_handle+0x5c>)
   17822:	429d      	cmp	r5, r3
   17824:	d21a      	bcs.n	1785c <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   17826:	682c      	ldr	r4, [r5, #0]
   17828:	42b4      	cmp	r4, r6
   1782a:	d8f5      	bhi.n	17818 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1782c:	686f      	ldr	r7, [r5, #4]
   1782e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   17832:	009b      	lsls	r3, r3, #2
   17834:	3b14      	subs	r3, #20
   17836:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   17838:	42b3      	cmp	r3, r6
   1783a:	d3ed      	bcc.n	17818 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1783c:	2300      	movs	r3, #0
   1783e:	429f      	cmp	r7, r3
   17840:	d9ed      	bls.n	1781e <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   17842:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   17846:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1784a:	42b1      	cmp	r1, r6
   1784c:	d005      	beq.n	1785a <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1784e:	3301      	adds	r3, #1
   17850:	3201      	adds	r2, #1
   17852:	b292      	uxth	r2, r2
   17854:	e7f3      	b.n	1783e <bt_gatt_attr_get_handle+0x36>
		return 0;
   17856:	2000      	movs	r0, #0
}
   17858:	4770      	bx	lr
				return handle;
   1785a:	4610      	mov	r0, r2
}
   1785c:	bcf0      	pop	{r4, r5, r6, r7}
   1785e:	4770      	bx	lr
   17860:	0002828c 	.word	0x0002828c
   17864:	0002829c 	.word	0x0002829c

00017868 <bt_gatt_foreach_attr_type>:
{
   17868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1786c:	b089      	sub	sp, #36	; 0x24
   1786e:	4607      	mov	r7, r0
   17870:	468a      	mov	sl, r1
   17872:	4690      	mov	r8, r2
   17874:	4699      	mov	r9, r3
   17876:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1787a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1787e:	b91b      	cbnz	r3, 17888 <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   17880:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17884:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   17888:	4b19      	ldr	r3, [pc, #100]	; (178f0 <bt_gatt_foreach_attr_type+0x88>)
   1788a:	881b      	ldrh	r3, [r3, #0]
   1788c:	42bb      	cmp	r3, r7
   1788e:	d22c      	bcs.n	178ea <bt_gatt_foreach_attr_type+0x82>
}
   17890:	b009      	add	sp, #36	; 0x24
   17892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   17896:	b294      	uxth	r4, r2
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17898:	3608      	adds	r6, #8
   1789a:	4b16      	ldr	r3, [pc, #88]	; (178f4 <bt_gatt_foreach_attr_type+0x8c>)
   1789c:	429e      	cmp	r6, r3
   1789e:	d2f7      	bcs.n	17890 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   178a0:	6873      	ldr	r3, [r6, #4]
   178a2:	18e2      	adds	r2, r4, r3
   178a4:	42ba      	cmp	r2, r7
   178a6:	d3f6      	bcc.n	17896 <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   178a8:	2500      	movs	r5, #0
   178aa:	9707      	str	r7, [sp, #28]
   178ac:	6873      	ldr	r3, [r6, #4]
   178ae:	42ab      	cmp	r3, r5
   178b0:	d919      	bls.n	178e6 <bt_gatt_foreach_attr_type+0x7e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   178b2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   178b6:	f8cd b010 	str.w	fp, [sp, #16]
   178ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   178bc:	9303      	str	r3, [sp, #12]
   178be:	ab12      	add	r3, sp, #72	; 0x48
   178c0:	9302      	str	r3, [sp, #8]
   178c2:	f8cd 9004 	str.w	r9, [sp, #4]
   178c6:	f8cd 8000 	str.w	r8, [sp]
   178ca:	4653      	mov	r3, sl
   178cc:	9a07      	ldr	r2, [sp, #28]
   178ce:	4621      	mov	r1, r4
   178d0:	6837      	ldr	r7, [r6, #0]
   178d2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   178d6:	f00d fd45 	bl	25364 <gatt_foreach_iter>
   178da:	2800      	cmp	r0, #0
   178dc:	d0d8      	beq.n	17890 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   178de:	3501      	adds	r5, #1
   178e0:	3401      	adds	r4, #1
   178e2:	b2a4      	uxth	r4, r4
   178e4:	e7e2      	b.n	178ac <bt_gatt_foreach_attr_type+0x44>
   178e6:	9f07      	ldr	r7, [sp, #28]
   178e8:	e7d6      	b.n	17898 <bt_gatt_foreach_attr_type+0x30>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   178ea:	4e03      	ldr	r6, [pc, #12]	; (178f8 <bt_gatt_foreach_attr_type+0x90>)
		uint16_t handle = 1;
   178ec:	2401      	movs	r4, #1
   178ee:	e7d4      	b.n	1789a <bt_gatt_foreach_attr_type+0x32>
   178f0:	20006a80 	.word	0x20006a80
   178f4:	0002829c 	.word	0x0002829c
   178f8:	0002828c 	.word	0x0002828c

000178fc <db_hash_gen>:
{
   178fc:	b510      	push	{r4, lr}
   178fe:	b0cc      	sub	sp, #304	; 0x130
	uint8_t key[16] = {};
   17900:	2300      	movs	r3, #0
   17902:	9348      	str	r3, [sp, #288]	; 0x120
   17904:	9349      	str	r3, [sp, #292]	; 0x124
   17906:	934a      	str	r3, [sp, #296]	; 0x128
   17908:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1790a:	aa1c      	add	r2, sp, #112	; 0x70
   1790c:	a948      	add	r1, sp, #288	; 0x120
   1790e:	a804      	add	r0, sp, #16
   17910:	f00a fea5 	bl	2265e <tc_cmac_setup>
   17914:	b348      	cbz	r0, 1796a <db_hash_gen+0x6e>
   17916:	ac04      	add	r4, sp, #16
   17918:	9402      	str	r4, [sp, #8]
   1791a:	4b15      	ldr	r3, [pc, #84]	; (17970 <db_hash_gen+0x74>)
   1791c:	9301      	str	r3, [sp, #4]
   1791e:	2200      	movs	r2, #0
   17920:	9200      	str	r2, [sp, #0]
   17922:	4613      	mov	r3, r2
   17924:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17928:	2001      	movs	r0, #1
   1792a:	f7ff ff9d 	bl	17868 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1792e:	4621      	mov	r1, r4
   17930:	4810      	ldr	r0, [pc, #64]	; (17974 <db_hash_gen+0x78>)
   17932:	f00a ff2f 	bl	22794 <tc_cmac_final>
   17936:	b1c0      	cbz	r0, 1796a <db_hash_gen+0x6e>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   17938:	2300      	movs	r3, #0
   1793a:	e007      	b.n	1794c <db_hash_gen+0x50>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1793c:	4a0d      	ldr	r2, [pc, #52]	; (17974 <db_hash_gen+0x78>)
   1793e:	5cd0      	ldrb	r0, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17940:	f1c3 010f 	rsb	r1, r3, #15
   17944:	5c54      	ldrb	r4, [r2, r1]
   17946:	54d4      	strb	r4, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   17948:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   1794a:	3301      	adds	r3, #1
   1794c:	2b07      	cmp	r3, #7
   1794e:	d9f5      	bls.n	1793c <db_hash_gen+0x40>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17950:	4b09      	ldr	r3, [pc, #36]	; (17978 <db_hash_gen+0x7c>)
   17952:	f3bf 8f5b 	dmb	ish
   17956:	e853 2f00 	ldrex	r2, [r3]
   1795a:	f042 0204 	orr.w	r2, r2, #4
   1795e:	e843 2100 	strex	r1, r2, [r3]
   17962:	2900      	cmp	r1, #0
   17964:	d1f7      	bne.n	17956 <db_hash_gen+0x5a>
   17966:	f3bf 8f5b 	dmb	ish
}
   1796a:	b04c      	add	sp, #304	; 0x130
   1796c:	bd10      	pop	{r4, pc}
   1796e:	bf00      	nop
   17970:	00024e5f 	.word	0x00024e5f
   17974:	200020b0 	.word	0x200020b0
   17978:	20002168 	.word	0x20002168

0001797c <gatt_find_by_uuid>:
{
   1797c:	b510      	push	{r4, lr}
   1797e:	b084      	sub	sp, #16
   17980:	4604      	mov	r4, r0
   17982:	460a      	mov	r2, r1
	found->attr = NULL;
   17984:	2300      	movs	r3, #0
   17986:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17988:	9002      	str	r0, [sp, #8]
   1798a:	4907      	ldr	r1, [pc, #28]	; (179a8 <gatt_find_by_uuid+0x2c>)
   1798c:	9101      	str	r1, [sp, #4]
   1798e:	2101      	movs	r1, #1
   17990:	9100      	str	r1, [sp, #0]
   17992:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17996:	8880      	ldrh	r0, [r0, #4]
   17998:	f7ff ff66 	bl	17868 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1799c:	6820      	ldr	r0, [r4, #0]
}
   1799e:	3800      	subs	r0, #0
   179a0:	bf18      	it	ne
   179a2:	2001      	movne	r0, #1
   179a4:	b004      	add	sp, #16
   179a6:	bd10      	pop	{r4, pc}
   179a8:	00024e43 	.word	0x00024e43

000179ac <gatt_indicate>:
{
   179ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   179b0:	b082      	sub	sp, #8
   179b2:	4606      	mov	r6, r0
   179b4:	460f      	mov	r7, r1
   179b6:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   179b8:	2214      	movs	r2, #20
   179ba:	6861      	ldr	r1, [r4, #4]
   179bc:	f00d fed2 	bl	25764 <bt_gatt_check_perm>
   179c0:	2800      	cmp	r0, #0
   179c2:	d139      	bne.n	17a38 <gatt_indicate+0x8c>
	len = sizeof(*ind) + params->len;
   179c4:	8aa5      	ldrh	r5, [r4, #20]
   179c6:	3502      	adds	r5, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   179c8:	9500      	str	r5, [sp, #0]
   179ca:	231d      	movs	r3, #29
   179cc:	2200      	movs	r2, #0
   179ce:	4621      	mov	r1, r4
   179d0:	481c      	ldr	r0, [pc, #112]	; (17a44 <gatt_indicate+0x98>)
   179d2:	f00d fcf2 	bl	253ba <gatt_req_alloc>
	if (!req) {
   179d6:	4680      	mov	r8, r0
   179d8:	b388      	cbz	r0, 17a3e <gatt_indicate+0x92>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   179da:	462a      	mov	r2, r5
   179dc:	211d      	movs	r1, #29
   179de:	4630      	mov	r0, r6
   179e0:	f00c ff14 	bl	2480c <bt_att_create_pdu>
	if (!buf) {
   179e4:	4681      	mov	r9, r0
   179e6:	b1e8      	cbz	r0, 17a24 <gatt_indicate+0x78>
   179e8:	f100 0a08 	add.w	sl, r0, #8
   179ec:	2102      	movs	r1, #2
   179ee:	4650      	mov	r0, sl
   179f0:	f00e f9f0 	bl	25dd4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   179f4:	4605      	mov	r5, r0
   179f6:	f825 7b02 	strh.w	r7, [r5], #2
   179fa:	8aa1      	ldrh	r1, [r4, #20]
   179fc:	4650      	mov	r0, sl
   179fe:	f00e f9e9 	bl	25dd4 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   17a02:	8aa2      	ldrh	r2, [r4, #20]
   17a04:	6921      	ldr	r1, [r4, #16]
   17a06:	4628      	mov	r0, r5
   17a08:	f00b f811 	bl	22a2e <memcpy>
	req->buf = buf;
   17a0c:	f8c8 9008 	str.w	r9, [r8, #8]
	err = bt_att_req_send(conn, req);
   17a10:	4641      	mov	r1, r8
   17a12:	4630      	mov	r0, r6
   17a14:	f00d f93f 	bl	24c96 <bt_att_req_send>
	if (err) {
   17a18:	4604      	mov	r4, r0
   17a1a:	b948      	cbnz	r0, 17a30 <gatt_indicate+0x84>
}
   17a1c:	4620      	mov	r0, r4
   17a1e:	b002      	add	sp, #8
   17a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bt_att_req_free(req);
   17a24:	4640      	mov	r0, r8
   17a26:	f7ff fcc3 	bl	173b0 <bt_att_req_free>
		return -ENOMEM;
   17a2a:	f06f 040b 	mvn.w	r4, #11
   17a2e:	e7f5      	b.n	17a1c <gatt_indicate+0x70>
		bt_att_req_free(req);
   17a30:	4640      	mov	r0, r8
   17a32:	f7ff fcbd 	bl	173b0 <bt_att_req_free>
   17a36:	e7f1      	b.n	17a1c <gatt_indicate+0x70>
		return -EPERM;
   17a38:	f04f 34ff 	mov.w	r4, #4294967295
   17a3c:	e7ee      	b.n	17a1c <gatt_indicate+0x70>
		return -ENOMEM;
   17a3e:	f06f 040b 	mvn.w	r4, #11
   17a42:	e7eb      	b.n	17a1c <gatt_indicate+0x70>
   17a44:	00024e21 	.word	0x00024e21

00017a48 <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17a48:	f3bf 8f5b 	dmb	ish
   17a4c:	4b37      	ldr	r3, [pc, #220]	; (17b2c <bt_gatt_indicate+0xe4>)
   17a4e:	681b      	ldr	r3, [r3, #0]
   17a50:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17a54:	f013 0f02 	tst.w	r3, #2
   17a58:	d05e      	beq.n	17b18 <bt_gatt_indicate+0xd0>
{
   17a5a:	b530      	push	{r4, r5, lr}
   17a5c:	b08d      	sub	sp, #52	; 0x34
   17a5e:	4605      	mov	r5, r0
   17a60:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17a62:	b110      	cbz	r0, 17a6a <bt_gatt_indicate+0x22>
   17a64:	7a83      	ldrb	r3, [r0, #10]
   17a66:	2b07      	cmp	r3, #7
   17a68:	d159      	bne.n	17b1e <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   17a6a:	6860      	ldr	r0, [r4, #4]
   17a6c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17a6e:	f7ff fecb 	bl	17808 <bt_gatt_attr_get_handle>
   17a72:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   17a76:	6821      	ldr	r1, [r4, #0]
   17a78:	b341      	cbz	r1, 17acc <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17a7a:	a805      	add	r0, sp, #20
   17a7c:	f7ff ff7e 	bl	1797c <gatt_find_by_uuid>
   17a80:	2800      	cmp	r0, #0
   17a82:	d04f      	beq.n	17b24 <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   17a84:	9b05      	ldr	r3, [sp, #20]
   17a86:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17a88:	9b05      	ldr	r3, [sp, #20]
   17a8a:	6818      	ldr	r0, [r3, #0]
   17a8c:	2300      	movs	r3, #0
   17a8e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   17a92:	f642 0303 	movw	r3, #10243	; 0x2803
   17a96:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   17a9a:	a90b      	add	r1, sp, #44	; 0x2c
   17a9c:	f00b f83c 	bl	22b18 <bt_uuid_cmp>
   17aa0:	b948      	cbnz	r0, 17ab6 <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17aa2:	9805      	ldr	r0, [sp, #20]
   17aa4:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   17aa6:	799b      	ldrb	r3, [r3, #6]
   17aa8:	f013 0f20 	tst.w	r3, #32
   17aac:	d013      	beq.n	17ad6 <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17aae:	f00d fe01 	bl	256b4 <bt_gatt_attr_value_handle>
   17ab2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   17ab6:	b18d      	cbz	r5, 17adc <bt_gatt_indicate+0x94>
		params->_ref = 1;
   17ab8:	2301      	movs	r3, #1
   17aba:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   17abc:	4622      	mov	r2, r4
   17abe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   17ac2:	4628      	mov	r0, r5
   17ac4:	f7ff ff72 	bl	179ac <gatt_indicate>
}
   17ac8:	b00d      	add	sp, #52	; 0x34
   17aca:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   17acc:	2800      	cmp	r0, #0
   17ace:	d1db      	bne.n	17a88 <bt_gatt_indicate+0x40>
			return -ENOENT;
   17ad0:	f06f 0001 	mvn.w	r0, #1
   17ad4:	e7f8      	b.n	17ac8 <bt_gatt_indicate+0x80>
			return -EINVAL;
   17ad6:	f06f 0015 	mvn.w	r0, #21
   17ada:	e7f5      	b.n	17ac8 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   17adc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   17ae0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   17ae2:	2302      	movs	r3, #2
   17ae4:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   17ae8:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   17aea:	2300      	movs	r3, #0
   17aec:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17aee:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   17af2:	f642 1202 	movw	r2, #10498	; 0x2902
   17af6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   17afa:	aa05      	add	r2, sp, #20
   17afc:	9202      	str	r2, [sp, #8]
   17afe:	4a0c      	ldr	r2, [pc, #48]	; (17b30 <bt_gatt_indicate+0xe8>)
   17b00:	9201      	str	r2, [sp, #4]
   17b02:	2201      	movs	r2, #1
   17b04:	9200      	str	r2, [sp, #0]
   17b06:	aa0a      	add	r2, sp, #40	; 0x28
   17b08:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17b0c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   17b10:	f7ff feaa 	bl	17868 <bt_gatt_foreach_attr_type>
	return data.err;
   17b14:	9807      	ldr	r0, [sp, #28]
   17b16:	e7d7      	b.n	17ac8 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   17b18:	f06f 000a 	mvn.w	r0, #10
}
   17b1c:	4770      	bx	lr
		return -ENOTCONN;
   17b1e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17b22:	e7d1      	b.n	17ac8 <bt_gatt_indicate+0x80>
			return -ENOENT;
   17b24:	f06f 0001 	mvn.w	r0, #1
   17b28:	e7ce      	b.n	17ac8 <bt_gatt_indicate+0x80>
   17b2a:	bf00      	nop
   17b2c:	2000036c 	.word	0x2000036c
   17b30:	00017c1d 	.word	0x00017c1d

00017b34 <sc_process>:
{
   17b34:	b510      	push	{r4, lr}
   17b36:	b082      	sub	sp, #8
   17b38:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   17b3a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   17b3e:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   17b42:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   17b46:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   17b4a:	f1a0 0120 	sub.w	r1, r0, #32
   17b4e:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17b52:	f3bf 8f5b 	dmb	ish
   17b56:	e854 2f00 	ldrex	r2, [r4]
   17b5a:	f022 0201 	bic.w	r2, r2, #1
   17b5e:	e844 2000 	strex	r0, r2, [r4]
   17b62:	2800      	cmp	r0, #0
   17b64:	d1f7      	bne.n	17b56 <sc_process+0x22>
   17b66:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   17b6a:	2000      	movs	r0, #0
   17b6c:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   17b70:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17b74:	4a0e      	ldr	r2, [pc, #56]	; (17bb0 <sc_process+0x7c>)
   17b76:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   17b7a:	4a0e      	ldr	r2, [pc, #56]	; (17bb4 <sc_process+0x80>)
   17b7c:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   17b80:	aa01      	add	r2, sp, #4
   17b82:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   17b86:	2204      	movs	r2, #4
   17b88:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17b8c:	f7ff ff5c 	bl	17a48 <bt_gatt_indicate>
   17b90:	b108      	cbz	r0, 17b96 <sc_process+0x62>
}
   17b92:	b002      	add	sp, #8
   17b94:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17b96:	f3bf 8f5b 	dmb	ish
   17b9a:	e854 3f00 	ldrex	r3, [r4]
   17b9e:	f043 0302 	orr.w	r3, r3, #2
   17ba2:	e844 3200 	strex	r2, r3, [r4]
   17ba6:	2a00      	cmp	r2, #0
   17ba8:	d1f7      	bne.n	17b9a <sc_process+0x66>
   17baa:	f3bf 8f5b 	dmb	ish
   17bae:	e7f0      	b.n	17b92 <sc_process+0x5e>
   17bb0:	00028bfc 	.word	0x00028bfc
   17bb4:	0001763d 	.word	0x0001763d

00017bb8 <sc_restore>:
{
   17bb8:	b530      	push	{r4, r5, lr}
   17bba:	b083      	sub	sp, #12
   17bbc:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17bbe:	f100 0188 	add.w	r1, r0, #136	; 0x88
   17bc2:	7a00      	ldrb	r0, [r0, #8]
   17bc4:	f7ff fcec 	bl	175a0 <find_sc_cfg>
	if (!cfg) {
   17bc8:	b300      	cbz	r0, 17c0c <sc_restore+0x54>
   17bca:	4605      	mov	r5, r0
	if (!(cfg->data.start || cfg->data.end)) {
   17bcc:	8903      	ldrh	r3, [r0, #8]
   17bce:	b90b      	cbnz	r3, 17bd4 <sc_restore+0x1c>
   17bd0:	8942      	ldrh	r2, [r0, #10]
   17bd2:	b1da      	cbz	r2, 17c0c <sc_restore+0x54>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   17bd4:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   17bd8:	896b      	ldrh	r3, [r5, #10]
   17bda:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   17bde:	4620      	mov	r0, r4
   17be0:	f7fe fbc4 	bl	1636c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17be4:	490a      	ldr	r1, [pc, #40]	; (17c10 <sc_restore+0x58>)
   17be6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   17bea:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   17bee:	4a09      	ldr	r2, [pc, #36]	; (17c14 <sc_restore+0x5c>)
   17bf0:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   17bf2:	4a09      	ldr	r2, [pc, #36]	; (17c18 <sc_restore+0x60>)
   17bf4:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   17bf6:	aa01      	add	r2, sp, #4
   17bf8:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   17bfa:	2204      	movs	r2, #4
   17bfc:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17bfe:	4619      	mov	r1, r3
   17c00:	4620      	mov	r0, r4
   17c02:	f7ff ff21 	bl	17a48 <bt_gatt_indicate>
	sc_reset(cfg);
   17c06:	4628      	mov	r0, r5
   17c08:	f00d fb66 	bl	252d8 <sc_reset>
}
   17c0c:	b003      	add	sp, #12
   17c0e:	bd30      	pop	{r4, r5, pc}
   17c10:	200032a4 	.word	0x200032a4
   17c14:	00028bfc 	.word	0x00028bfc
   17c18:	00024f3f 	.word	0x00024f3f

00017c1c <notify_cb>:
{
   17c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17c20:	b082      	sub	sp, #8
   17c22:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17c24:	6882      	ldr	r2, [r0, #8]
   17c26:	4b48      	ldr	r3, [pc, #288]	; (17d48 <notify_cb+0x12c>)
   17c28:	429a      	cmp	r2, r3
   17c2a:	d005      	beq.n	17c38 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   17c2c:	f04f 0801 	mov.w	r8, #1
}
   17c30:	4640      	mov	r0, r8
   17c32:	b002      	add	sp, #8
   17c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17c38:	4606      	mov	r6, r0
	ccc = attr->user_data;
   17c3a:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   17c3c:	4b43      	ldr	r3, [pc, #268]	; (17d4c <notify_cb+0x130>)
   17c3e:	429f      	cmp	r7, r3
   17c40:	d031      	beq.n	17ca6 <notify_cb+0x8a>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17c42:	2400      	movs	r4, #0
   17c44:	e04c      	b.n	17ce0 <notify_cb+0xc4>
				sc = (struct sc_data *)data->ind_params->data;
   17c46:	692b      	ldr	r3, [r5, #16]
   17c48:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   17c4a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   17c4e:	8853      	ldrh	r3, [r2, #2]
   17c50:	8812      	ldrh	r2, [r2, #0]
   17c52:	4641      	mov	r1, r8
   17c54:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 17d50 <notify_cb+0x134>
   17c58:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   17c5c:	f00d f9f1 	bl	25042 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17c60:	3401      	adds	r4, #1
   17c62:	2c03      	cmp	r4, #3
   17c64:	d8ed      	bhi.n	17c42 <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   17c66:	eb04 0844 	add.w	r8, r4, r4, lsl #1
   17c6a:	4b39      	ldr	r3, [pc, #228]	; (17d50 <notify_cb+0x134>)
   17c6c:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   17c70:	f108 0801 	add.w	r8, r8, #1
   17c74:	2300      	movs	r3, #0
   17c76:	9300      	str	r3, [sp, #0]
   17c78:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   17c7c:	2207      	movs	r2, #7
   17c7e:	4669      	mov	r1, sp
   17c80:	4640      	mov	r0, r8
   17c82:	f00a fea7 	bl	229d4 <memcmp>
   17c86:	2800      	cmp	r0, #0
   17c88:	d0ea      	beq.n	17c60 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   17c8a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   17c8e:	2207      	movs	r2, #7
   17c90:	4641      	mov	r1, r8
   17c92:	482f      	ldr	r0, [pc, #188]	; (17d50 <notify_cb+0x134>)
   17c94:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   17c98:	f7fe fc3a 	bl	16510 <bt_conn_lookup_state_le>
			if (!conn) {
   17c9c:	2800      	cmp	r0, #0
   17c9e:	d0d2      	beq.n	17c46 <notify_cb+0x2a>
			bt_conn_unref(conn);
   17ca0:	f00b fd9e 	bl	237e0 <bt_conn_unref>
   17ca4:	e7dc      	b.n	17c60 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17ca6:	2400      	movs	r4, #0
   17ca8:	e7db      	b.n	17c62 <notify_cb+0x46>
			bt_conn_unref(conn);
   17caa:	f00b fd99 	bl	237e0 <bt_conn_unref>
			continue;
   17cae:	e016      	b.n	17cde <notify_cb+0xc2>
			bt_conn_unref(conn);
   17cb0:	4648      	mov	r0, r9
   17cb2:	f00b fd95 	bl	237e0 <bt_conn_unref>
			continue;
   17cb6:	e012      	b.n	17cde <notify_cb+0xc2>
			err = gatt_indicate(conn, data->handle,
   17cb8:	692a      	ldr	r2, [r5, #16]
   17cba:	88a9      	ldrh	r1, [r5, #4]
   17cbc:	4648      	mov	r0, r9
   17cbe:	f7ff fe75 	bl	179ac <gatt_indicate>
			if (err == 0) {
   17cc2:	4682      	mov	sl, r0
   17cc4:	b918      	cbnz	r0, 17cce <notify_cb+0xb2>
				data->ind_params->_ref++;
   17cc6:	692a      	ldr	r2, [r5, #16]
   17cc8:	7d93      	ldrb	r3, [r2, #22]
   17cca:	3301      	adds	r3, #1
   17ccc:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   17cce:	4648      	mov	r0, r9
   17cd0:	f00b fd86 	bl	237e0 <bt_conn_unref>
		if (err < 0) {
   17cd4:	f1ba 0f00 	cmp.w	sl, #0
   17cd8:	dbaa      	blt.n	17c30 <notify_cb+0x14>
		data->err = 0;
   17cda:	2300      	movs	r3, #0
   17cdc:	60ab      	str	r3, [r5, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17cde:	3401      	adds	r4, #1
   17ce0:	2c03      	cmp	r4, #3
   17ce2:	d82e      	bhi.n	17d42 <notify_cb+0x126>
		if (cfg->value != data->type) {
   17ce4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17ce8:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   17cec:	891a      	ldrh	r2, [r3, #8]
   17cee:	89ab      	ldrh	r3, [r5, #12]
   17cf0:	429a      	cmp	r2, r3
   17cf2:	d1f4      	bne.n	17cde <notify_cb+0xc2>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17cf4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17cf8:	eb07 0143 	add.w	r1, r7, r3, lsl #1
   17cfc:	3101      	adds	r1, #1
   17cfe:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   17d02:	f7fe fbdf 	bl	164c4 <bt_conn_lookup_addr_le>
		if (!conn) {
   17d06:	4681      	mov	r9, r0
   17d08:	2800      	cmp	r0, #0
   17d0a:	d0e8      	beq.n	17cde <notify_cb+0xc2>
		if (conn->state != BT_CONN_CONNECTED) {
   17d0c:	7a83      	ldrb	r3, [r0, #10]
   17d0e:	2b07      	cmp	r3, #7
   17d10:	d1cb      	bne.n	17caa <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   17d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17d14:	b11b      	cbz	r3, 17d1e <notify_cb+0x102>
   17d16:	4631      	mov	r1, r6
   17d18:	4798      	blx	r3
   17d1a:	2800      	cmp	r0, #0
   17d1c:	d0c8      	beq.n	17cb0 <notify_cb+0x94>
		if (bt_gatt_check_perm(conn, attr,
   17d1e:	2214      	movs	r2, #20
   17d20:	4631      	mov	r1, r6
   17d22:	4648      	mov	r0, r9
   17d24:	f00d fd1e 	bl	25764 <bt_gatt_check_perm>
   17d28:	4680      	mov	r8, r0
   17d2a:	2800      	cmp	r0, #0
   17d2c:	d1d7      	bne.n	17cde <notify_cb+0xc2>
		if (data->type == BT_GATT_CCC_INDICATE) {
   17d2e:	89ab      	ldrh	r3, [r5, #12]
   17d30:	2b02      	cmp	r3, #2
   17d32:	d0c1      	beq.n	17cb8 <notify_cb+0x9c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   17d34:	692a      	ldr	r2, [r5, #16]
   17d36:	88a9      	ldrh	r1, [r5, #4]
   17d38:	4648      	mov	r0, r9
   17d3a:	f00d fd3f 	bl	257bc <gatt_notify>
   17d3e:	4682      	mov	sl, r0
   17d40:	e7c5      	b.n	17cce <notify_cb+0xb2>
	return BT_GATT_ITER_CONTINUE;
   17d42:	f04f 0801 	mov.w	r8, #1
   17d46:	e773      	b.n	17c30 <notify_cb+0x14>
   17d48:	000250bd 	.word	0x000250bd
   17d4c:	20000688 	.word	0x20000688
   17d50:	20003274 	.word	0x20003274

00017d54 <update_ccc>:
{
   17d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = data->conn;
   17d56:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   17d58:	6882      	ldr	r2, [r0, #8]
   17d5a:	4b19      	ldr	r3, [pc, #100]	; (17dc0 <update_ccc+0x6c>)
   17d5c:	429a      	cmp	r2, r3
   17d5e:	d001      	beq.n	17d64 <update_ccc+0x10>
}
   17d60:	2001      	movs	r0, #1
   17d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d64:	4605      	mov	r5, r0
	ccc = attr->user_data;
   17d66:	68c6      	ldr	r6, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17d68:	2400      	movs	r4, #0
   17d6a:	e000      	b.n	17d6e <update_ccc+0x1a>
   17d6c:	3401      	adds	r4, #1
   17d6e:	2c03      	cmp	r4, #3
   17d70:	d8f6      	bhi.n	17d60 <update_ccc+0xc>
		if (!cfg->value ||
   17d72:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17d76:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   17d7a:	891b      	ldrh	r3, [r3, #8]
   17d7c:	2b00      	cmp	r3, #0
   17d7e:	d0f5      	beq.n	17d6c <update_ccc+0x18>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17d80:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17d84:	eb06 0243 	add.w	r2, r6, r3, lsl #1
   17d88:	3201      	adds	r2, #1
   17d8a:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   17d8e:	4638      	mov	r0, r7
   17d90:	f00b fd80 	bl	23894 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   17d94:	2800      	cmp	r0, #0
   17d96:	d0e9      	beq.n	17d6c <update_ccc+0x18>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   17d98:	222a      	movs	r2, #42	; 0x2a
   17d9a:	4629      	mov	r1, r5
   17d9c:	4638      	mov	r0, r7
   17d9e:	f00d fce1 	bl	25764 <bt_gatt_check_perm>
		if (err) {
   17da2:	b108      	cbz	r0, 17da8 <update_ccc+0x54>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   17da4:	2803      	cmp	r0, #3
   17da6:	d0e1      	beq.n	17d6c <update_ccc+0x18>
		gatt_ccc_changed(attr, ccc);
   17da8:	4631      	mov	r1, r6
   17daa:	4628      	mov	r0, r5
   17dac:	f00d f81f 	bl	24dee <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   17db0:	4b04      	ldr	r3, [pc, #16]	; (17dc4 <update_ccc+0x70>)
   17db2:	429e      	cmp	r6, r3
   17db4:	d1d4      	bne.n	17d60 <update_ccc+0xc>
			sc_restore(conn);
   17db6:	4638      	mov	r0, r7
   17db8:	f7ff fefe 	bl	17bb8 <sc_restore>
   17dbc:	e7d0      	b.n	17d60 <update_ccc+0xc>
   17dbe:	bf00      	nop
   17dc0:	000250bd 	.word	0x000250bd
   17dc4:	20000688 	.word	0x20000688

00017dc8 <bt_gatt_exchange_mtu>:
	if (conn->state != BT_CONN_CONNECTED) {
   17dc8:	7a83      	ldrb	r3, [r0, #10]
   17dca:	2b07      	cmp	r3, #7
   17dcc:	d10c      	bne.n	17de8 <bt_gatt_exchange_mtu+0x20>
{
   17dce:	b500      	push	{lr}
   17dd0:	b083      	sub	sp, #12
   17dd2:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_mtu_rsp, params,
   17dd4:	2302      	movs	r3, #2
   17dd6:	9301      	str	r3, [sp, #4]
   17dd8:	9300      	str	r3, [sp, #0]
   17dda:	4b05      	ldr	r3, [pc, #20]	; (17df0 <bt_gatt_exchange_mtu+0x28>)
   17ddc:	4905      	ldr	r1, [pc, #20]	; (17df4 <bt_gatt_exchange_mtu+0x2c>)
   17dde:	f00d fafa 	bl	253d6 <gatt_req_send>
}
   17de2:	b003      	add	sp, #12
   17de4:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENOTCONN;
   17de8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   17dec:	4770      	bx	lr
   17dee:	bf00      	nop
   17df0:	00025499 	.word	0x00025499
   17df4:	00024e55 	.word	0x00024e55

00017df8 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   17df8:	b510      	push	{r4, lr}
   17dfa:	b086      	sub	sp, #24
   17dfc:	4604      	mov	r4, r0
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   17dfe:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   17e00:	2001      	movs	r0, #1
   17e02:	f88d 0014 	strb.w	r0, [sp, #20]
   17e06:	ab04      	add	r3, sp, #16
   17e08:	9302      	str	r3, [sp, #8]
   17e0a:	4b07      	ldr	r3, [pc, #28]	; (17e28 <bt_gatt_connected+0x30>)
   17e0c:	9301      	str	r3, [sp, #4]
   17e0e:	2200      	movs	r2, #0
   17e10:	9200      	str	r2, [sp, #0]
   17e12:	4613      	mov	r3, r2
   17e14:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17e18:	f7ff fd26 	bl	17868 <bt_gatt_foreach_attr_type>
				err);
		}
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
   17e1c:	4620      	mov	r0, r4
   17e1e:	f00d fb14 	bl	2544a <add_subscriptions>
#endif /* CONFIG_BT_GATT_CLIENT */
}
   17e22:	b006      	add	sp, #24
   17e24:	bd10      	pop	{r4, pc}
   17e26:	bf00      	nop
   17e28:	00017d55 	.word	0x00017d55

00017e2c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   17e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e2e:	4605      	mov	r5, r0
   17e30:	460e      	mov	r6, r1
   17e32:	4617      	mov	r7, r2
	return list->head;
   17e34:	4b0a      	ldr	r3, [pc, #40]	; (17e60 <bt_gatt_att_max_mtu_changed+0x34>)
   17e36:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   17e38:	b134      	cbz	r4, 17e48 <bt_gatt_att_max_mtu_changed+0x1c>
   17e3a:	3c04      	subs	r4, #4
   17e3c:	e004      	b.n	17e48 <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17e3e:	1d23      	adds	r3, r4, #4
   17e40:	d00b      	beq.n	17e5a <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
   17e42:	6864      	ldr	r4, [r4, #4]
   17e44:	b15c      	cbz	r4, 17e5e <bt_gatt_att_max_mtu_changed+0x32>
   17e46:	3c04      	subs	r4, #4
   17e48:	b14c      	cbz	r4, 17e5e <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
   17e4a:	6823      	ldr	r3, [r4, #0]
   17e4c:	2b00      	cmp	r3, #0
   17e4e:	d0f6      	beq.n	17e3e <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
   17e50:	463a      	mov	r2, r7
   17e52:	4631      	mov	r1, r6
   17e54:	4628      	mov	r0, r5
   17e56:	4798      	blx	r3
   17e58:	e7f1      	b.n	17e3e <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   17e5a:	461c      	mov	r4, r3
   17e5c:	e7f4      	b.n	17e48 <bt_gatt_att_max_mtu_changed+0x1c>
		}
	}
}
   17e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17e60:	20003228 	.word	0x20003228

00017e64 <db_hash_read>:
{
   17e64:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e66:	b085      	sub	sp, #20
   17e68:	4604      	mov	r4, r0
   17e6a:	460d      	mov	r5, r1
   17e6c:	4616      	mov	r6, r2
   17e6e:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17e70:	4812      	ldr	r0, [pc, #72]	; (17ebc <db_hash_read+0x58>)
   17e72:	f100 0140 	add.w	r1, r0, #64	; 0x40
   17e76:	3010      	adds	r0, #16
   17e78:	f00f fd6e 	bl	27958 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17e7c:	f3bf 8f5b 	dmb	ish
   17e80:	4b0f      	ldr	r3, [pc, #60]	; (17ec0 <db_hash_read+0x5c>)
   17e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   17e84:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17e88:	f013 0f04 	tst.w	r3, #4
   17e8c:	d012      	beq.n	17eb4 <db_hash_read+0x50>
	(void)bt_gatt_change_aware(conn, true);
   17e8e:	2101      	movs	r1, #1
   17e90:	4620      	mov	r0, r4
   17e92:	f00d fdda 	bl	25a4a <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17e96:	2310      	movs	r3, #16
   17e98:	9302      	str	r3, [sp, #8]
   17e9a:	4b08      	ldr	r3, [pc, #32]	; (17ebc <db_hash_read+0x58>)
   17e9c:	9301      	str	r3, [sp, #4]
   17e9e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   17ea2:	9300      	str	r3, [sp, #0]
   17ea4:	463b      	mov	r3, r7
   17ea6:	4632      	mov	r2, r6
   17ea8:	4629      	mov	r1, r5
   17eaa:	4620      	mov	r0, r4
   17eac:	f00d fb60 	bl	25570 <bt_gatt_attr_read>
}
   17eb0:	b005      	add	sp, #20
   17eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   17eb4:	2001      	movs	r0, #1
   17eb6:	f7ff fd21 	bl	178fc <db_hash_gen>
   17eba:	e7e8      	b.n	17e8e <db_hash_read+0x2a>
   17ebc:	200020b0 	.word	0x200020b0
   17ec0:	20002118 	.word	0x20002118

00017ec4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   17ec4:	b510      	push	{r4, lr}
   17ec6:	b084      	sub	sp, #16
   17ec8:	4604      	mov	r4, r0
   17eca:	9002      	str	r0, [sp, #8]
   17ecc:	4b08      	ldr	r3, [pc, #32]	; (17ef0 <bt_gatt_disconnected+0x2c>)
   17ece:	9301      	str	r3, [sp, #4]
   17ed0:	2200      	movs	r2, #0
   17ed2:	9200      	str	r2, [sp, #0]
   17ed4:	4613      	mov	r3, r2
   17ed6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17eda:	2001      	movs	r0, #1
   17edc:	f7ff fcc4 	bl	17868 <bt_gatt_foreach_attr_type>
				     remove_peer_from_attr,
				     &addr_with_id);
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
   17ee0:	4620      	mov	r0, r4
   17ee2:	f00d f980 	bl	251e6 <remove_subscriptions>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   17ee6:	4620      	mov	r0, r4
   17ee8:	f00d fb1e 	bl	25528 <remove_cf_cfg>
#endif
}
   17eec:	b004      	add	sp, #16
   17eee:	bd10      	pop	{r4, pc}
   17ef0:	000176b1 	.word	0x000176b1

00017ef4 <bt_smp_accept>:
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   17ef4:	2300      	movs	r3, #0
   17ef6:	2b03      	cmp	r3, #3
   17ef8:	dc10      	bgt.n	17f1c <bt_smp_accept+0x28>
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   17efa:	22e8      	movs	r2, #232	; 0xe8
   17efc:	fb02 f203 	mul.w	r2, r2, r3
   17f00:	4808      	ldr	r0, [pc, #32]	; (17f24 <bt_smp_accept+0x30>)
   17f02:	5882      	ldr	r2, [r0, r2]
   17f04:	b10a      	cbz	r2, 17f0a <bt_smp_accept+0x16>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   17f06:	3301      	adds	r3, #1
   17f08:	e7f5      	b.n	17ef6 <bt_smp_accept+0x2>
			continue;
		}

		smp->chan.ops = &ops;
   17f0a:	4a06      	ldr	r2, [pc, #24]	; (17f24 <bt_smp_accept+0x30>)
   17f0c:	20e8      	movs	r0, #232	; 0xe8
   17f0e:	fb00 2303 	mla	r3, r0, r3, r2
   17f12:	4a05      	ldr	r2, [pc, #20]	; (17f28 <bt_smp_accept+0x34>)
   17f14:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   17f16:	600b      	str	r3, [r1, #0]

		return 0;
   17f18:	2000      	movs	r0, #0
   17f1a:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   17f1c:	f06f 000b 	mvn.w	r0, #11
}
   17f20:	4770      	bx	lr
   17f22:	bf00      	nop
   17f24:	20002170 	.word	0x20002170
   17f28:	00028cd8 	.word	0x00028cd8

00017f2c <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   17f2c:	4b03      	ldr	r3, [pc, #12]	; (17f3c <pool_id+0x10>)
   17f2e:	1ac0      	subs	r0, r0, r3
   17f30:	10c0      	asrs	r0, r0, #3
}
   17f32:	4b03      	ldr	r3, [pc, #12]	; (17f40 <pool_id+0x14>)
   17f34:	fb03 f000 	mul.w	r0, r3, r0
   17f38:	4770      	bx	lr
   17f3a:	bf00      	nop
   17f3c:	200008f0 	.word	0x200008f0
   17f40:	cccccccd 	.word	0xcccccccd

00017f44 <net_buf_pool_get>:
	return &_net_buf_pool_list[id];
   17f44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
   17f48:	4b01      	ldr	r3, [pc, #4]	; (17f50 <net_buf_pool_get+0xc>)
   17f4a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   17f4e:	4770      	bx	lr
   17f50:	200008f0 	.word	0x200008f0

00017f54 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
   17f54:	b510      	push	{r4, lr}
   17f56:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17f58:	7980      	ldrb	r0, [r0, #6]
   17f5a:	f7ff fff3 	bl	17f44 <net_buf_pool_get>

	return buf - pool->__bufs;
   17f5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   17f60:	1a24      	subs	r4, r4, r0
   17f62:	10e4      	asrs	r4, r4, #3
}
   17f64:	4801      	ldr	r0, [pc, #4]	; (17f6c <net_buf_id+0x18>)
   17f66:	fb00 f004 	mul.w	r0, r0, r4
   17f6a:	bd10      	pop	{r4, pc}
   17f6c:	aaaaaaab 	.word	0xaaaaaaab

00017f70 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   17f70:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
   17f74:	b242      	sxtb	r2, r0
   17f76:	2a00      	cmp	r2, #0
   17f78:	db12      	blt.n	17fa0 <endpoint_ctx+0x30>
			if (ep_num >= CFG_EPIN_CNT) {
				return false;
			}
		}
	} else {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   17f7a:	2b08      	cmp	r3, #8
   17f7c:	d002      	beq.n	17f84 <endpoint_ctx+0x14>
			if (CFG_EP_ISOOUT_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPOUT_CNT) {
   17f7e:	f010 0f78 	tst.w	r0, #120	; 0x78
   17f82:	d11d      	bne.n	17fc0 <endpoint_ctx+0x50>
	if (!ep_is_valid(ep)) {
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
   17f84:	f000 030f 	and.w	r3, r0, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
   17f88:	2a00      	cmp	r2, #0
   17f8a:	db10      	blt.n	17fae <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   17f8c:	f010 0f08 	tst.w	r0, #8
   17f90:	d11a      	bne.n	17fc8 <endpoint_ctx+0x58>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
   17f92:	3309      	adds	r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   17f94:	015b      	lsls	r3, r3, #5
   17f96:	3348      	adds	r3, #72	; 0x48
   17f98:	480c      	ldr	r0, [pc, #48]	; (17fcc <endpoint_ctx+0x5c>)
   17f9a:	4403      	add	r3, r0
   17f9c:	1d18      	adds	r0, r3, #4
   17f9e:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   17fa0:	2b08      	cmp	r3, #8
   17fa2:	d0ef      	beq.n	17f84 <endpoint_ctx+0x14>
			if (ep_num >= CFG_EPIN_CNT) {
   17fa4:	f010 0f78 	tst.w	r0, #120	; 0x78
   17fa8:	d0ec      	beq.n	17f84 <endpoint_ctx+0x14>
		return NULL;
   17faa:	2000      	movs	r0, #0
   17fac:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   17fae:	f010 0f08 	tst.w	r0, #8
   17fb2:	d107      	bne.n	17fc4 <endpoint_ctx+0x54>
			return &ctx->ep_ctx[ep_num];
   17fb4:	015b      	lsls	r3, r3, #5
   17fb6:	3348      	adds	r3, #72	; 0x48
   17fb8:	4804      	ldr	r0, [pc, #16]	; (17fcc <endpoint_ctx+0x5c>)
   17fba:	4403      	add	r3, r0
   17fbc:	1d18      	adds	r0, r3, #4
   17fbe:	4770      	bx	lr
		return NULL;
   17fc0:	2000      	movs	r0, #0
   17fc2:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   17fc4:	4802      	ldr	r0, [pc, #8]	; (17fd0 <endpoint_ctx+0x60>)
   17fc6:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   17fc8:	4802      	ldr	r0, [pc, #8]	; (17fd4 <endpoint_ctx+0x64>)
					    ep_num];
		}
	}

	return NULL;
}
   17fca:	4770      	bx	lr
   17fcc:	20003948 	.word	0x20003948
   17fd0:	20003a94 	.word	0x20003a94
   17fd4:	20003bb4 	.word	0x20003bb4

00017fd8 <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
   17fd8:	b510      	push	{r4, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	uint32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   17fda:	2400      	movs	r4, #0
   17fdc:	e005      	b.n	17fea <eps_ctx_init+0x12>
		ep_ctx = in_endpoint_ctx(i);
   17fde:	b2e0      	uxtb	r0, r4
   17fe0:	f00d ff47 	bl	25e72 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
   17fe4:	f00d ff4f 	bl	25e86 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   17fe8:	3401      	adds	r4, #1
   17fea:	2c07      	cmp	r4, #7
   17fec:	d9f7      	bls.n	17fde <eps_ctx_init+0x6>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   17fee:	2400      	movs	r4, #0
   17ff0:	e006      	b.n	18000 <eps_ctx_init+0x28>
		ep_ctx = out_endpoint_ctx(i);
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
			ep_ctx->buf.block.data = ep_out_bufs[i];
   17ff2:	4b10      	ldr	r3, [pc, #64]	; (18034 <eps_ctx_init+0x5c>)
   17ff4:	eb03 1384 	add.w	r3, r3, r4, lsl #6
   17ff8:	6103      	str	r3, [r0, #16]
		}

		ep_ctx_reset(ep_ctx);
   17ffa:	f00d ff44 	bl	25e86 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   17ffe:	3401      	adds	r4, #1
   18000:	2c07      	cmp	r4, #7
   18002:	d806      	bhi.n	18012 <eps_ctx_init+0x3a>
		ep_ctx = out_endpoint_ctx(i);
   18004:	b2e0      	uxtb	r0, r4
   18006:	f00d ff3a 	bl	25e7e <out_endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   1800a:	6903      	ldr	r3, [r0, #16]
   1800c:	2b00      	cmp	r3, #0
   1800e:	d1f4      	bne.n	17ffa <eps_ctx_init+0x22>
   18010:	e7ef      	b.n	17ff2 <eps_ctx_init+0x1a>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   18012:	2088      	movs	r0, #136	; 0x88
   18014:	f00d ff2d 	bl	25e72 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
   18018:	f00d ff35 	bl	25e86 <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		BUILD_ASSERT(CFG_EP_ISOOUT_CNT <= 1);

		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   1801c:	2008      	movs	r0, #8
   1801e:	f00d ff2e 	bl	25e7e <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
   18022:	6903      	ldr	r3, [r0, #16]
   18024:	b11b      	cbz	r3, 1802e <eps_ctx_init+0x56>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
		}

		ep_ctx_reset(ep_ctx);
   18026:	f00d ff2e 	bl	25e86 <ep_ctx_reset>
	}

	return 0;
}
   1802a:	2000      	movs	r0, #0
   1802c:	bd10      	pop	{r4, pc}
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   1802e:	4b02      	ldr	r3, [pc, #8]	; (18038 <eps_ctx_init+0x60>)
   18030:	6103      	str	r3, [r0, #16]
   18032:	e7f8      	b.n	18026 <eps_ctx_init+0x4e>
   18034:	20003748 	.word	0x20003748
   18038:	20003348 	.word	0x20003348

0001803c <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   1803c:	b510      	push	{r4, lr}
   1803e:	b082      	sub	sp, #8
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   18040:	480b      	ldr	r0, [pc, #44]	; (18070 <usb_init+0x34>)
   18042:	f002 fd91 	bl	1ab68 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
   18046:	480b      	ldr	r0, [pc, #44]	; (18074 <usb_init+0x38>)
   18048:	f002 fdd2 	bl	1abf0 <nrfx_power_usbevt_init>

	k_work_queue_start(&usbd_work_queue,
   1804c:	2400      	movs	r4, #0
   1804e:	9400      	str	r4, [sp, #0]
   18050:	f04f 33ff 	mov.w	r3, #4294967295
   18054:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18058:	4907      	ldr	r1, [pc, #28]	; (18078 <usb_init+0x3c>)
   1805a:	4808      	ldr	r0, [pc, #32]	; (1807c <usb_init+0x40>)
   1805c:	f005 fae4 	bl	1d628 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   18060:	4907      	ldr	r1, [pc, #28]	; (18080 <usb_init+0x44>)
   18062:	4808      	ldr	r0, [pc, #32]	; (18084 <usb_init+0x48>)
   18064:	f00f fbf6 	bl	27854 <k_work_init>

	return 0;
}
   18068:	4620      	mov	r0, r4
   1806a:	b002      	add	sp, #8
   1806c:	bd10      	pop	{r4, pc}
   1806e:	bf00      	nop
   18070:	00028d08 	.word	0x00028d08
   18074:	00028d0c 	.word	0x00028d0c
   18078:	20007ac0 	.word	0x20007ac0
   1807c:	20002510 	.word	0x20002510
   18080:	000181c1 	.word	0x000181c1
   18084:	20003970 	.word	0x20003970

00018088 <submit_dc_power_event>:
{
   18088:	b530      	push	{r4, r5, lr}
   1808a:	b083      	sub	sp, #12
   1808c:	4605      	mov	r5, r0
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1808e:	2200      	movs	r2, #0
   18090:	2300      	movs	r3, #0
   18092:	a901      	add	r1, sp, #4
   18094:	481d      	ldr	r0, [pc, #116]	; (1810c <submit_dc_power_event+0x84>)
   18096:	f004 feb1 	bl	1cdfc <k_mem_slab_alloc>
   1809a:	b9a0      	cbnz	r0, 180c6 <submit_dc_power_event+0x3e>
	ev = (struct usbd_event *)block.data;
   1809c:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   1809e:	6064      	str	r4, [r4, #4]
	if (!ev) {
   180a0:	b154      	cbz	r4, 180b8 <submit_dc_power_event+0x30>
	ev->evt_type = USBD_EVT_POWER;
   180a2:	2300      	movs	r3, #0
   180a4:	7423      	strb	r3, [r4, #16]
	ev->evt.pwr_evt.state = state;
   180a6:	7225      	strb	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   180a8:	4621      	mov	r1, r4
   180aa:	4819      	ldr	r0, [pc, #100]	; (18110 <submit_dc_power_event+0x88>)
   180ac:	f00f faf6 	bl	2769c <k_queue_append>
	if (usbd_ctx.attached) {
   180b0:	4b18      	ldr	r3, [pc, #96]	; (18114 <submit_dc_power_event+0x8c>)
   180b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   180b6:	bb1b      	cbnz	r3, 18100 <submit_dc_power_event+0x78>
}
   180b8:	b003      	add	sp, #12
   180ba:	bd30      	pop	{r4, r5, pc}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   180bc:	1d01      	adds	r1, r0, #4
   180be:	4813      	ldr	r0, [pc, #76]	; (1810c <submit_dc_power_event+0x84>)
   180c0:	f00f f9ba 	bl	27438 <k_mem_slab_free>
	} while (ev != NULL);
   180c4:	b144      	cbz	r4, 180d8 <submit_dc_power_event+0x50>
	return z_impl_k_queue_get(queue, timeout);
   180c6:	2200      	movs	r2, #0
   180c8:	2300      	movs	r3, #0
   180ca:	4811      	ldr	r0, [pc, #68]	; (18110 <submit_dc_power_event+0x88>)
   180cc:	f005 f89e 	bl	1d20c <z_impl_k_queue_get>
		if (ev) {
   180d0:	4604      	mov	r4, r0
   180d2:	2800      	cmp	r0, #0
   180d4:	d1f2      	bne.n	180bc <submit_dc_power_event+0x34>
   180d6:	e7f5      	b.n	180c4 <submit_dc_power_event+0x3c>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   180d8:	2200      	movs	r2, #0
   180da:	2300      	movs	r3, #0
   180dc:	a901      	add	r1, sp, #4
   180de:	480b      	ldr	r0, [pc, #44]	; (1810c <submit_dc_power_event+0x84>)
   180e0:	f004 fe8c 	bl	1cdfc <k_mem_slab_alloc>
   180e4:	2800      	cmp	r0, #0
   180e6:	d1db      	bne.n	180a0 <submit_dc_power_event+0x18>
		ev = (struct usbd_event *)block.data;
   180e8:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   180ea:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   180ec:	2304      	movs	r3, #4
   180ee:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   180f0:	4807      	ldr	r0, [pc, #28]	; (18110 <submit_dc_power_event+0x88>)
   180f2:	f00f fad3 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   180f6:	4908      	ldr	r1, [pc, #32]	; (18118 <submit_dc_power_event+0x90>)
   180f8:	4808      	ldr	r0, [pc, #32]	; (1811c <submit_dc_power_event+0x94>)
   180fa:	f00f fbb1 	bl	27860 <k_work_submit_to_queue>
		return NULL;
   180fe:	e7cf      	b.n	180a0 <submit_dc_power_event+0x18>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   18100:	4905      	ldr	r1, [pc, #20]	; (18118 <submit_dc_power_event+0x90>)
   18102:	4806      	ldr	r0, [pc, #24]	; (1811c <submit_dc_power_event+0x94>)
   18104:	f00f fbac 	bl	27860 <k_work_submit_to_queue>
}
   18108:	e7d6      	b.n	180b8 <submit_dc_power_event+0x30>
   1810a:	bf00      	nop
   1810c:	200007cc 	.word	0x200007cc
   18110:	200008d8 	.word	0x200008d8
   18114:	20003948 	.word	0x20003948
   18118:	20003970 	.word	0x20003970
   1811c:	20002510 	.word	0x20002510

00018120 <usbd_sof_trigger_iso_read>:
{
   18120:	b530      	push	{r4, r5, lr}
   18122:	b083      	sub	sp, #12
	ep_ctx = endpoint_ctx(NRFX_USBD_EPOUT8);
   18124:	2008      	movs	r0, #8
   18126:	f7ff ff23 	bl	17f70 <endpoint_ctx>
	if (!ep_ctx) {
   1812a:	b110      	cbz	r0, 18132 <usbd_sof_trigger_iso_read+0x12>
   1812c:	4605      	mov	r5, r0
	if (ep_ctx->cfg.en) {
   1812e:	7a03      	ldrb	r3, [r0, #8]
   18130:	b90b      	cbnz	r3, 18136 <usbd_sof_trigger_iso_read+0x16>
}
   18132:	b003      	add	sp, #12
   18134:	bd30      	pop	{r4, r5, pc}
		ep_ctx->read_pending = true;
   18136:	2301      	movs	r3, #1
   18138:	7743      	strb	r3, [r0, #29]
		ep_ctx->read_complete = true;
   1813a:	7703      	strb	r3, [r0, #28]
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1813c:	2200      	movs	r2, #0
   1813e:	2300      	movs	r3, #0
   18140:	a901      	add	r1, sp, #4
   18142:	481b      	ldr	r0, [pc, #108]	; (181b0 <usbd_sof_trigger_iso_read+0x90>)
   18144:	f004 fe5a 	bl	1cdfc <k_mem_slab_alloc>
   18148:	b9a8      	cbnz	r0, 18176 <usbd_sof_trigger_iso_read+0x56>
	ev = (struct usbd_event *)block.data;
   1814a:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   1814c:	6064      	str	r4, [r4, #4]
		if (!ev) {
   1814e:	2c00      	cmp	r4, #0
   18150:	d0ef      	beq.n	18132 <usbd_sof_trigger_iso_read+0x12>
		ev->evt_type = USBD_EVT_EP;
   18152:	2301      	movs	r3, #1
   18154:	7423      	strb	r3, [r4, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   18156:	7323      	strb	r3, [r4, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   18158:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   1815a:	4621      	mov	r1, r4
   1815c:	4815      	ldr	r0, [pc, #84]	; (181b4 <usbd_sof_trigger_iso_read+0x94>)
   1815e:	f00f fa9d 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   18162:	4915      	ldr	r1, [pc, #84]	; (181b8 <usbd_sof_trigger_iso_read+0x98>)
   18164:	4815      	ldr	r0, [pc, #84]	; (181bc <usbd_sof_trigger_iso_read+0x9c>)
   18166:	f00f fb7b 	bl	27860 <k_work_submit_to_queue>
}
   1816a:	e7e2      	b.n	18132 <usbd_sof_trigger_iso_read+0x12>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1816c:	1d01      	adds	r1, r0, #4
   1816e:	4810      	ldr	r0, [pc, #64]	; (181b0 <usbd_sof_trigger_iso_read+0x90>)
   18170:	f00f f962 	bl	27438 <k_mem_slab_free>
	} while (ev != NULL);
   18174:	b144      	cbz	r4, 18188 <usbd_sof_trigger_iso_read+0x68>
   18176:	2200      	movs	r2, #0
   18178:	2300      	movs	r3, #0
   1817a:	480e      	ldr	r0, [pc, #56]	; (181b4 <usbd_sof_trigger_iso_read+0x94>)
   1817c:	f005 f846 	bl	1d20c <z_impl_k_queue_get>
		if (ev) {
   18180:	4604      	mov	r4, r0
   18182:	2800      	cmp	r0, #0
   18184:	d1f2      	bne.n	1816c <usbd_sof_trigger_iso_read+0x4c>
   18186:	e7f5      	b.n	18174 <usbd_sof_trigger_iso_read+0x54>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   18188:	2200      	movs	r2, #0
   1818a:	2300      	movs	r3, #0
   1818c:	a901      	add	r1, sp, #4
   1818e:	4808      	ldr	r0, [pc, #32]	; (181b0 <usbd_sof_trigger_iso_read+0x90>)
   18190:	f004 fe34 	bl	1cdfc <k_mem_slab_alloc>
   18194:	2800      	cmp	r0, #0
   18196:	d1da      	bne.n	1814e <usbd_sof_trigger_iso_read+0x2e>
		ev = (struct usbd_event *)block.data;
   18198:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1819a:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1819c:	2304      	movs	r3, #4
   1819e:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   181a0:	4804      	ldr	r0, [pc, #16]	; (181b4 <usbd_sof_trigger_iso_read+0x94>)
   181a2:	f00f fa7b 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   181a6:	4904      	ldr	r1, [pc, #16]	; (181b8 <usbd_sof_trigger_iso_read+0x98>)
   181a8:	4804      	ldr	r0, [pc, #16]	; (181bc <usbd_sof_trigger_iso_read+0x9c>)
   181aa:	f00f fb59 	bl	27860 <k_work_submit_to_queue>
		return NULL;
   181ae:	e7ce      	b.n	1814e <usbd_sof_trigger_iso_read+0x2e>
   181b0:	200007cc 	.word	0x200007cc
   181b4:	200008d8 	.word	0x200008d8
   181b8:	20003970 	.word	0x20003970
   181bc:	20002510 	.word	0x20002510

000181c0 <usbd_work_handler>:
{
   181c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181c4:	b084      	sub	sp, #16
   181c6:	4606      	mov	r6, r0
	while ((ev = usbd_evt_get()) != NULL) {
   181c8:	e11b      	b.n	18402 <usbd_work_handler+0x242>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   181ca:	1d21      	adds	r1, r4, #4
   181cc:	489e      	ldr	r0, [pc, #632]	; (18448 <usbd_work_handler+0x288>)
   181ce:	f00f f933 	bl	27438 <k_mem_slab_free>
			continue;
   181d2:	e116      	b.n	18402 <usbd_work_handler+0x242>
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   181d4:	68a5      	ldr	r5, [r4, #8]
	switch (ep_evt->evt_type) {
   181d6:	7b23      	ldrb	r3, [r4, #12]
   181d8:	2b03      	cmp	r3, #3
   181da:	f200 810e 	bhi.w	183fa <usbd_work_handler+0x23a>
   181de:	e8df f003 	tbb	[pc, r3]
   181e2:	4502      	.short	0x4502
   181e4:	6b66      	.short	0x6b66
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   181e6:	696f      	ldr	r7, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   181e8:	2208      	movs	r2, #8
   181ea:	2100      	movs	r1, #0
   181ec:	4638      	mov	r0, r7
   181ee:	f00a fc42 	bl	22a76 <memset>
    return ret;
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   181f2:	4b96      	ldr	r3, [pc, #600]	; (1844c <usbd_work_handler+0x28c>)
   181f4:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
   181f8:	703a      	strb	r2, [r7, #0]
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BREQUEST);
   181fa:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get(NRF_USBD);
   181fe:	707a      	strb	r2, [r7, #1]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WVALUEL;
   18200:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
   18204:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   18206:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   1820a:	0209      	lsls	r1, r1, #8
   1820c:	b289      	uxth	r1, r1
   1820e:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   18210:	807a      	strh	r2, [r7, #2]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WINDEXL;
   18212:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
   18216:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   18218:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   1821c:	0209      	lsls	r1, r1, #8
   1821e:	b289      	uxth	r1, r1
   18220:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   18222:	80ba      	strh	r2, [r7, #4]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WLENGTHL;
   18224:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
   18228:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   1822a:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   1822e:	021b      	lsls	r3, r3, #8
   18230:	b29b      	uxth	r3, r3
   18232:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   18234:	80fb      	strh	r3, [r7, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   18236:	2208      	movs	r2, #8
   18238:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1823a:	4639      	mov	r1, r7
   1823c:	4884      	ldr	r0, [pc, #528]	; (18450 <usbd_work_handler+0x290>)
   1823e:	f00a fbf6 	bl	22a2e <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   18242:	682b      	ldr	r3, [r5, #0]
   18244:	2100      	movs	r1, #0
   18246:	7a68      	ldrb	r0, [r5, #9]
   18248:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   1824a:	f997 3000 	ldrsb.w	r3, [r7]
   1824e:	2b00      	cmp	r3, #0
   18250:	db01      	blt.n	18256 <usbd_work_handler+0x96>
   18252:	88fb      	ldrh	r3, [r7, #6]
   18254:	b923      	cbnz	r3, 18260 <usbd_work_handler+0xa0>
		ctx->ctrl_read_len = 0U;
   18256:	4b7f      	ldr	r3, [pc, #508]	; (18454 <usbd_work_handler+0x294>)
   18258:	2200      	movs	r2, #0
   1825a:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
}
   1825e:	e0cc      	b.n	183fa <usbd_work_handler+0x23a>
		ctx->ctrl_read_len = usbd_setup->wLength;
   18260:	4a7c      	ldr	r2, [pc, #496]	; (18454 <usbd_work_handler+0x294>)
   18262:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   18266:	f003 ffa3 	bl	1c1b0 <nrfx_usbd_setup_data_clear>
   1826a:	e0c6      	b.n	183fa <usbd_work_handler+0x23a>
	if (!ep_ctx->read_pending) {
   1826c:	7f6b      	ldrb	r3, [r5, #29]
   1826e:	2b00      	cmp	r3, #0
   18270:	f000 80c3 	beq.w	183fa <usbd_work_handler+0x23a>
	if (!ep_ctx->read_complete) {
   18274:	7f2b      	ldrb	r3, [r5, #28]
   18276:	2b00      	cmp	r3, #0
   18278:	f000 80bf 	beq.w	183fa <usbd_work_handler+0x23a>
	ep_ctx->read_pending = false;
   1827c:	2700      	movs	r7, #0
   1827e:	776f      	strb	r7, [r5, #29]
	ep_ctx->read_complete = false;
   18280:	772f      	strb	r7, [r5, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   18282:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 18458 <usbd_work_handler+0x298>
   18286:	f04f 32ff 	mov.w	r2, #4294967295
   1828a:	f04f 33ff 	mov.w	r3, #4294967295
   1828e:	4640      	mov	r0, r8
   18290:	f004 feee 	bl	1d070 <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   18294:	696b      	ldr	r3, [r5, #20]
   18296:	9301      	str	r3, [sp, #4]
   18298:	686b      	ldr	r3, [r5, #4]
   1829a:	9302      	str	r3, [sp, #8]
   1829c:	9703      	str	r7, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   1829e:	a901      	add	r1, sp, #4
   182a0:	7a68      	ldrb	r0, [r5, #9]
   182a2:	f003 fb39 	bl	1b918 <nrfx_usbd_ep_transfer>
	return z_impl_k_mutex_unlock(mutex);
   182a6:	4640      	mov	r0, r8
   182a8:	f004 ff6c 	bl	1d184 <z_impl_k_mutex_unlock>
   182ac:	e0a5      	b.n	183fa <usbd_work_handler+0x23a>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   182ae:	682b      	ldr	r3, [r5, #0]
   182b0:	2101      	movs	r1, #1
   182b2:	7a68      	ldrb	r0, [r5, #9]
   182b4:	4798      	blx	r3
		break;
   182b6:	e0a0      	b.n	183fa <usbd_work_handler+0x23a>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   182b8:	7aab      	ldrb	r3, [r5, #10]
   182ba:	b90b      	cbnz	r3, 182c0 <usbd_work_handler+0x100>
		    !ep_ctx->trans_zlp) {
   182bc:	7feb      	ldrb	r3, [r5, #31]
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   182be:	b123      	cbz	r3, 182ca <usbd_work_handler+0x10a>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   182c0:	682b      	ldr	r3, [r5, #0]
   182c2:	2102      	movs	r1, #2
   182c4:	7a68      	ldrb	r0, [r5, #9]
   182c6:	4798      	blx	r3
}
   182c8:	e097      	b.n	183fa <usbd_work_handler+0x23a>
	return z_impl_k_mutex_lock(mutex, timeout);
   182ca:	4f63      	ldr	r7, [pc, #396]	; (18458 <usbd_work_handler+0x298>)
   182cc:	f04f 32ff 	mov.w	r2, #4294967295
   182d0:	f04f 33ff 	mov.w	r3, #4294967295
   182d4:	4638      	mov	r0, r7
   182d6:	f004 fecb 	bl	1d070 <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
   182da:	f003 ffbb 	bl	1c254 <nrfx_usbd_setup_clear>
	return z_impl_k_mutex_unlock(mutex);
   182de:	4638      	mov	r0, r7
   182e0:	f004 ff50 	bl	1d184 <z_impl_k_mutex_unlock>
   182e4:	e7ec      	b.n	182c0 <usbd_work_handler+0x100>
	switch (pwr_evt->state) {
   182e6:	7a23      	ldrb	r3, [r4, #8]
   182e8:	2b04      	cmp	r3, #4
   182ea:	f200 8086 	bhi.w	183fa <usbd_work_handler+0x23a>
   182ee:	e8df f003 	tbb	[pc, r3]
   182f2:	031e      	.short	0x031e
   182f4:	2e0d      	.short	0x2e0d
   182f6:	3d          	.byte	0x3d
   182f7:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   182f8:	f003 fa9c 	bl	1b834 <nrfx_usbd_is_enabled>
   182fc:	2800      	cmp	r0, #0
   182fe:	d17c      	bne.n	183fa <usbd_work_handler+0x23a>
			nrfx_usbd_enable();
   18300:	f003 f9e2 	bl	1b6c8 <nrfx_usbd_enable>
			err = hfxo_start(ctx);
   18304:	4853      	ldr	r0, [pc, #332]	; (18454 <usbd_work_handler+0x294>)
   18306:	f00d fe25 	bl	25f54 <hfxo_start>
   1830a:	e076      	b.n	183fa <usbd_work_handler+0x23a>
		usbd_enable_endpoints(ctx);
   1830c:	4d51      	ldr	r5, [pc, #324]	; (18454 <usbd_work_handler+0x294>)
   1830e:	4628      	mov	r0, r5
   18310:	f00d fdee 	bl	25ef0 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
   18314:	2001      	movs	r0, #1
   18316:	f003 fa71 	bl	1b7fc <nrfx_usbd_start>
		ctx->ready = true;
   1831a:	2301      	movs	r3, #1
   1831c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
		if (ctx->status_cb) {
   18320:	682b      	ldr	r3, [r5, #0]
   18322:	2b00      	cmp	r3, #0
   18324:	d069      	beq.n	183fa <usbd_work_handler+0x23a>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   18326:	2100      	movs	r1, #0
   18328:	2002      	movs	r0, #2
   1832a:	4798      	blx	r3
   1832c:	e065      	b.n	183fa <usbd_work_handler+0x23a>
		ctx->ready = false;
   1832e:	4d49      	ldr	r5, [pc, #292]	; (18454 <usbd_work_handler+0x294>)
   18330:	2300      	movs	r3, #0
   18332:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
		nrfx_usbd_disable();
   18336:	f004 fa45 	bl	1c7c4 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   1833a:	4628      	mov	r0, r5
   1833c:	f00d fdb7 	bl	25eae <hfxo_stop>
		if (ctx->status_cb) {
   18340:	682b      	ldr	r3, [r5, #0]
   18342:	2b00      	cmp	r3, #0
   18344:	d059      	beq.n	183fa <usbd_work_handler+0x23a>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   18346:	2100      	movs	r1, #0
   18348:	2004      	movs	r0, #4
   1834a:	4798      	blx	r3
   1834c:	e055      	b.n	183fa <usbd_work_handler+0x23a>
	return get_usbd_ctx()->ready;
   1834e:	4b41      	ldr	r3, [pc, #260]	; (18454 <usbd_work_handler+0x294>)
   18350:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (dev_ready()) {
   18354:	2b00      	cmp	r3, #0
   18356:	d050      	beq.n	183fa <usbd_work_handler+0x23a>
			nrfx_usbd_suspend();
   18358:	f004 fa56 	bl	1c808 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   1835c:	4b3d      	ldr	r3, [pc, #244]	; (18454 <usbd_work_handler+0x294>)
   1835e:	681b      	ldr	r3, [r3, #0]
   18360:	2b00      	cmp	r3, #0
   18362:	d04a      	beq.n	183fa <usbd_work_handler+0x23a>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   18364:	2100      	movs	r1, #0
   18366:	2005      	movs	r0, #5
   18368:	4798      	blx	r3
   1836a:	e046      	b.n	183fa <usbd_work_handler+0x23a>
		if (ctx->status_cb && dev_ready()) {
   1836c:	4b39      	ldr	r3, [pc, #228]	; (18454 <usbd_work_handler+0x294>)
   1836e:	681b      	ldr	r3, [r3, #0]
   18370:	2b00      	cmp	r3, #0
   18372:	d042      	beq.n	183fa <usbd_work_handler+0x23a>
	return get_usbd_ctx()->ready;
   18374:	4a37      	ldr	r2, [pc, #220]	; (18454 <usbd_work_handler+0x294>)
   18376:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
		if (ctx->status_cb && dev_ready()) {
   1837a:	2a00      	cmp	r2, #0
   1837c:	d03d      	beq.n	183fa <usbd_work_handler+0x23a>
			ctx->status_cb(USB_DC_RESUME, NULL);
   1837e:	2100      	movs	r1, #0
   18380:	2006      	movs	r0, #6
   18382:	4798      	blx	r3
}
   18384:	e039      	b.n	183fa <usbd_work_handler+0x23a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   18386:	f106 0510 	add.w	r5, r6, #16
	return z_impl_k_mutex_lock(mutex, timeout);
   1838a:	f04f 32ff 	mov.w	r2, #4294967295
   1838e:	f04f 33ff 	mov.w	r3, #4294967295
   18392:	4628      	mov	r0, r5
   18394:	f004 fe6c 	bl	1d070 <z_impl_k_mutex_lock>
			eps_ctx_init();
   18398:	f7ff fe1e 	bl	17fd8 <eps_ctx_init>
	return z_impl_k_mutex_unlock(mutex);
   1839c:	4628      	mov	r0, r5
   1839e:	f004 fef1 	bl	1d184 <z_impl_k_mutex_unlock>
			if (ctx->status_cb) {
   183a2:	f856 3c28 	ldr.w	r3, [r6, #-40]
   183a6:	b343      	cbz	r3, 183fa <usbd_work_handler+0x23a>
				ctx->status_cb(USB_DC_RESET, NULL);
   183a8:	2100      	movs	r1, #0
   183aa:	2001      	movs	r0, #1
   183ac:	4798      	blx	r3
   183ae:	e024      	b.n	183fa <usbd_work_handler+0x23a>
			usbd_sof_trigger_iso_read();
   183b0:	f7ff feb6 	bl	18120 <usbd_sof_trigger_iso_read>
			if (ctx->status_cb) {
   183b4:	f856 3c28 	ldr.w	r3, [r6, #-40]
   183b8:	b1fb      	cbz	r3, 183fa <usbd_work_handler+0x23a>
				ctx->status_cb(USB_DC_SOF, NULL);
   183ba:	2100      	movs	r1, #0
   183bc:	200a      	movs	r0, #10
   183be:	4798      	blx	r3
   183c0:	e01b      	b.n	183fa <usbd_work_handler+0x23a>
	nrfx_power_usbevt_disable();
   183c2:	f00e fee3 	bl	2718c <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   183c6:	f004 f9fd 	bl	1c7c4 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   183ca:	f003 f973 	bl	1b6b4 <nrfx_usbd_uninit>
static inline void usbd_evt_flush(void)
   183ce:	e004      	b.n	183da <usbd_work_handler+0x21a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   183d0:	1d01      	adds	r1, r0, #4
   183d2:	481d      	ldr	r0, [pc, #116]	; (18448 <usbd_work_handler+0x288>)
   183d4:	f00f f830 	bl	27438 <k_mem_slab_free>
	} while (ev != NULL);
   183d8:	b145      	cbz	r5, 183ec <usbd_work_handler+0x22c>
	return z_impl_k_queue_get(queue, timeout);
   183da:	2200      	movs	r2, #0
   183dc:	2300      	movs	r3, #0
   183de:	481f      	ldr	r0, [pc, #124]	; (1845c <usbd_work_handler+0x29c>)
   183e0:	f004 ff14 	bl	1d20c <z_impl_k_queue_get>
		if (ev) {
   183e4:	4605      	mov	r5, r0
   183e6:	2800      	cmp	r0, #0
   183e8:	d1f2      	bne.n	183d0 <usbd_work_handler+0x210>
   183ea:	e7f5      	b.n	183d8 <usbd_work_handler+0x218>
	ret = eps_ctx_init();
   183ec:	f7ff fdf4 	bl	17fd8 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   183f0:	f00e fec5 	bl	2717e <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   183f4:	481a      	ldr	r0, [pc, #104]	; (18460 <usbd_work_handler+0x2a0>)
   183f6:	f003 fa37 	bl	1b868 <nrfx_usbd_init>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   183fa:	1d21      	adds	r1, r4, #4
   183fc:	4812      	ldr	r0, [pc, #72]	; (18448 <usbd_work_handler+0x288>)
   183fe:	f00f f81b 	bl	27438 <k_mem_slab_free>
   18402:	2200      	movs	r2, #0
   18404:	2300      	movs	r3, #0
   18406:	4815      	ldr	r0, [pc, #84]	; (1845c <usbd_work_handler+0x29c>)
   18408:	f004 ff00 	bl	1d20c <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
   1840c:	4604      	mov	r4, r0
   1840e:	b1b8      	cbz	r0, 18440 <usbd_work_handler+0x280>
	return get_usbd_ctx()->ready;
   18410:	4b10      	ldr	r3, [pc, #64]	; (18454 <usbd_work_handler+0x294>)
   18412:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   18416:	b91b      	cbnz	r3, 18420 <usbd_work_handler+0x260>
   18418:	7c23      	ldrb	r3, [r4, #16]
   1841a:	2b00      	cmp	r3, #0
   1841c:	f47f aed5 	bne.w	181ca <usbd_work_handler+0xa>
		switch (ev->evt_type) {
   18420:	7c23      	ldrb	r3, [r4, #16]
   18422:	2b04      	cmp	r3, #4
   18424:	d8e9      	bhi.n	183fa <usbd_work_handler+0x23a>
   18426:	a201      	add	r2, pc, #4	; (adr r2, 1842c <usbd_work_handler+0x26c>)
   18428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1842c:	000182e7 	.word	0x000182e7
   18430:	000181d5 	.word	0x000181d5
   18434:	00018387 	.word	0x00018387
   18438:	000183b1 	.word	0x000183b1
   1843c:	000183c3 	.word	0x000183c3
}
   18440:	b004      	add	sp, #16
   18442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18446:	bf00      	nop
   18448:	200007cc 	.word	0x200007cc
   1844c:	40027000 	.word	0x40027000
   18450:	2000394c 	.word	0x2000394c
   18454:	20003948 	.word	0x20003948
   18458:	20003980 	.word	0x20003980
   1845c:	200008d8 	.word	0x200008d8
   18460:	0001882d 	.word	0x0001882d

00018464 <usbd_event_transfer_data>:
{
   18464:	b570      	push	{r4, r5, r6, lr}
   18466:	b082      	sub	sp, #8
   18468:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   1846a:	7885      	ldrb	r5, [r0, #2]
   1846c:	4628      	mov	r0, r5
   1846e:	f7ff fd7f 	bl	17f70 <endpoint_ctx>
   18472:	4606      	mov	r6, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   18474:	f015 0f80 	tst.w	r5, #128	; 0x80
   18478:	d11d      	bne.n	184b6 <usbd_event_transfer_data+0x52>
		switch (p_event->data.eptransfer.status) {
   1847a:	78e3      	ldrb	r3, [r4, #3]
   1847c:	2b00      	cmp	r3, #0
   1847e:	d07d      	beq.n	1857c <usbd_event_transfer_data+0x118>
   18480:	2b01      	cmp	r3, #1
   18482:	d11a      	bne.n	184ba <usbd_event_transfer_data+0x56>
	if (k_mem_slab_alloc(&fifo_elem_slab,
   18484:	2200      	movs	r2, #0
   18486:	2300      	movs	r3, #0
   18488:	a901      	add	r1, sp, #4
   1848a:	486f      	ldr	r0, [pc, #444]	; (18648 <usbd_event_transfer_data+0x1e4>)
   1848c:	f004 fcb6 	bl	1cdfc <k_mem_slab_alloc>
   18490:	2800      	cmp	r0, #0
   18492:	d156      	bne.n	18542 <usbd_event_transfer_data+0xde>
	ev = (struct usbd_event *)block.data;
   18494:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   18496:	6064      	str	r4, [r4, #4]
			if (!ev) {
   18498:	b17c      	cbz	r4, 184ba <usbd_event_transfer_data+0x56>
			ep_ctx->read_pending = true;
   1849a:	2301      	movs	r3, #1
   1849c:	7773      	strb	r3, [r6, #29]
			ev->evt_type = USBD_EVT_EP;
   1849e:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   184a0:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   184a2:	60a6      	str	r6, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   184a4:	4621      	mov	r1, r4
   184a6:	4869      	ldr	r0, [pc, #420]	; (1864c <usbd_event_transfer_data+0x1e8>)
   184a8:	f00f f8f8 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   184ac:	4968      	ldr	r1, [pc, #416]	; (18650 <usbd_event_transfer_data+0x1ec>)
   184ae:	4869      	ldr	r0, [pc, #420]	; (18654 <usbd_event_transfer_data+0x1f0>)
   184b0:	f00f f9d6 	bl	27860 <k_work_submit_to_queue>
}
   184b4:	e001      	b.n	184ba <usbd_event_transfer_data+0x56>
		switch (p_event->data.eptransfer.status) {
   184b6:	78e3      	ldrb	r3, [r4, #3]
   184b8:	b10b      	cbz	r3, 184be <usbd_event_transfer_data+0x5a>
}
   184ba:	b002      	add	sp, #8
   184bc:	bd70      	pop	{r4, r5, r6, pc}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   184be:	2200      	movs	r2, #0
   184c0:	2300      	movs	r3, #0
   184c2:	a901      	add	r1, sp, #4
   184c4:	4860      	ldr	r0, [pc, #384]	; (18648 <usbd_event_transfer_data+0x1e4>)
   184c6:	f004 fc99 	bl	1cdfc <k_mem_slab_alloc>
   184ca:	b9a0      	cbnz	r0, 184f6 <usbd_event_transfer_data+0x92>
	ev = (struct usbd_event *)block.data;
   184cc:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   184ce:	6064      	str	r4, [r4, #4]
			if (!ev) {
   184d0:	2c00      	cmp	r4, #0
   184d2:	d0f2      	beq.n	184ba <usbd_event_transfer_data+0x56>
			ep_ctx->write_in_progress = false;
   184d4:	2300      	movs	r3, #0
   184d6:	77b3      	strb	r3, [r6, #30]
			ev->evt_type = USBD_EVT_EP;
   184d8:	2301      	movs	r3, #1
   184da:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   184dc:	2303      	movs	r3, #3
   184de:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   184e0:	60a6      	str	r6, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   184e2:	4621      	mov	r1, r4
   184e4:	4859      	ldr	r0, [pc, #356]	; (1864c <usbd_event_transfer_data+0x1e8>)
   184e6:	f00f f8d9 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   184ea:	4959      	ldr	r1, [pc, #356]	; (18650 <usbd_event_transfer_data+0x1ec>)
   184ec:	4859      	ldr	r0, [pc, #356]	; (18654 <usbd_event_transfer_data+0x1f0>)
   184ee:	f00f f9b7 	bl	27860 <k_work_submit_to_queue>
}
   184f2:	e7e2      	b.n	184ba <usbd_event_transfer_data+0x56>
	} while (ev != NULL);
   184f4:	b164      	cbz	r4, 18510 <usbd_event_transfer_data+0xac>
   184f6:	2200      	movs	r2, #0
   184f8:	2300      	movs	r3, #0
   184fa:	4854      	ldr	r0, [pc, #336]	; (1864c <usbd_event_transfer_data+0x1e8>)
   184fc:	f004 fe86 	bl	1d20c <z_impl_k_queue_get>
		if (ev) {
   18500:	4604      	mov	r4, r0
   18502:	2800      	cmp	r0, #0
   18504:	d0f6      	beq.n	184f4 <usbd_event_transfer_data+0x90>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   18506:	1d01      	adds	r1, r0, #4
   18508:	484f      	ldr	r0, [pc, #316]	; (18648 <usbd_event_transfer_data+0x1e4>)
   1850a:	f00e ff95 	bl	27438 <k_mem_slab_free>
}
   1850e:	e7f1      	b.n	184f4 <usbd_event_transfer_data+0x90>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   18510:	2200      	movs	r2, #0
   18512:	2300      	movs	r3, #0
   18514:	a901      	add	r1, sp, #4
   18516:	484c      	ldr	r0, [pc, #304]	; (18648 <usbd_event_transfer_data+0x1e4>)
   18518:	f004 fc70 	bl	1cdfc <k_mem_slab_alloc>
   1851c:	2800      	cmp	r0, #0
   1851e:	d1d7      	bne.n	184d0 <usbd_event_transfer_data+0x6c>
		ev = (struct usbd_event *)block.data;
   18520:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   18522:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   18524:	2304      	movs	r3, #4
   18526:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   18528:	4848      	ldr	r0, [pc, #288]	; (1864c <usbd_event_transfer_data+0x1e8>)
   1852a:	f00f f8b7 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1852e:	4948      	ldr	r1, [pc, #288]	; (18650 <usbd_event_transfer_data+0x1ec>)
   18530:	4848      	ldr	r0, [pc, #288]	; (18654 <usbd_event_transfer_data+0x1f0>)
   18532:	f00f f995 	bl	27860 <k_work_submit_to_queue>
		return NULL;
   18536:	e7cb      	b.n	184d0 <usbd_event_transfer_data+0x6c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   18538:	1d01      	adds	r1, r0, #4
   1853a:	4843      	ldr	r0, [pc, #268]	; (18648 <usbd_event_transfer_data+0x1e4>)
   1853c:	f00e ff7c 	bl	27438 <k_mem_slab_free>
	} while (ev != NULL);
   18540:	b144      	cbz	r4, 18554 <usbd_event_transfer_data+0xf0>
   18542:	2200      	movs	r2, #0
   18544:	2300      	movs	r3, #0
   18546:	4841      	ldr	r0, [pc, #260]	; (1864c <usbd_event_transfer_data+0x1e8>)
   18548:	f004 fe60 	bl	1d20c <z_impl_k_queue_get>
		if (ev) {
   1854c:	4604      	mov	r4, r0
   1854e:	2800      	cmp	r0, #0
   18550:	d1f2      	bne.n	18538 <usbd_event_transfer_data+0xd4>
   18552:	e7f5      	b.n	18540 <usbd_event_transfer_data+0xdc>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   18554:	2200      	movs	r2, #0
   18556:	2300      	movs	r3, #0
   18558:	a901      	add	r1, sp, #4
   1855a:	483b      	ldr	r0, [pc, #236]	; (18648 <usbd_event_transfer_data+0x1e4>)
   1855c:	f004 fc4e 	bl	1cdfc <k_mem_slab_alloc>
   18560:	2800      	cmp	r0, #0
   18562:	d199      	bne.n	18498 <usbd_event_transfer_data+0x34>
		ev = (struct usbd_event *)block.data;
   18564:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   18566:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   18568:	2304      	movs	r3, #4
   1856a:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   1856c:	4837      	ldr	r0, [pc, #220]	; (1864c <usbd_event_transfer_data+0x1e8>)
   1856e:	f00f f895 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   18572:	4937      	ldr	r1, [pc, #220]	; (18650 <usbd_event_transfer_data+0x1ec>)
   18574:	4837      	ldr	r0, [pc, #220]	; (18654 <usbd_event_transfer_data+0x1f0>)
   18576:	f00f f973 	bl	27860 <k_work_submit_to_queue>
		return NULL;
   1857a:	e78d      	b.n	18498 <usbd_event_transfer_data+0x34>
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1857c:	2200      	movs	r2, #0
   1857e:	2300      	movs	r3, #0
   18580:	a901      	add	r1, sp, #4
   18582:	4831      	ldr	r0, [pc, #196]	; (18648 <usbd_event_transfer_data+0x1e4>)
   18584:	f004 fc3a 	bl	1cdfc <k_mem_slab_alloc>
   18588:	bb10      	cbnz	r0, 185d0 <usbd_event_transfer_data+0x16c>
	ev = (struct usbd_event *)block.data;
   1858a:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
   1858c:	606d      	str	r5, [r5, #4]
			if (!ev) {
   1858e:	2d00      	cmp	r5, #0
   18590:	d093      	beq.n	184ba <usbd_event_transfer_data+0x56>
				p_event->data.eptransfer.ep);
   18592:	78a3      	ldrb	r3, [r4, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   18594:	f994 2002 	ldrsb.w	r2, [r4, #2]
   18598:	2a00      	cmp	r2, #0
   1859a:	db36      	blt.n	1860a <usbd_event_transfer_data+0x1a6>
            ret = p_reg->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   1859c:	f013 0f08 	tst.w	r3, #8
   185a0:	d046      	beq.n	18630 <usbd_event_transfer_data+0x1cc>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   185a2:	4b2d      	ldr	r3, [pc, #180]	; (18658 <usbd_event_transfer_data+0x1f4>)
   185a4:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   185a8:	60f3      	str	r3, [r6, #12]
			ev->evt_type = USBD_EVT_EP;
   185aa:	2301      	movs	r3, #1
   185ac:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   185ae:	2302      	movs	r3, #2
   185b0:	732b      	strb	r3, [r5, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   185b2:	60ae      	str	r6, [r5, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   185b4:	4629      	mov	r1, r5
   185b6:	4825      	ldr	r0, [pc, #148]	; (1864c <usbd_event_transfer_data+0x1e8>)
   185b8:	f00f f870 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   185bc:	4924      	ldr	r1, [pc, #144]	; (18650 <usbd_event_transfer_data+0x1ec>)
   185be:	4825      	ldr	r0, [pc, #148]	; (18654 <usbd_event_transfer_data+0x1f0>)
   185c0:	f00f f94e 	bl	27860 <k_work_submit_to_queue>
}
   185c4:	e779      	b.n	184ba <usbd_event_transfer_data+0x56>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   185c6:	1d01      	adds	r1, r0, #4
   185c8:	481f      	ldr	r0, [pc, #124]	; (18648 <usbd_event_transfer_data+0x1e4>)
   185ca:	f00e ff35 	bl	27438 <k_mem_slab_free>
	} while (ev != NULL);
   185ce:	b145      	cbz	r5, 185e2 <usbd_event_transfer_data+0x17e>
   185d0:	2200      	movs	r2, #0
   185d2:	2300      	movs	r3, #0
   185d4:	481d      	ldr	r0, [pc, #116]	; (1864c <usbd_event_transfer_data+0x1e8>)
   185d6:	f004 fe19 	bl	1d20c <z_impl_k_queue_get>
		if (ev) {
   185da:	4605      	mov	r5, r0
   185dc:	2800      	cmp	r0, #0
   185de:	d1f2      	bne.n	185c6 <usbd_event_transfer_data+0x162>
   185e0:	e7f5      	b.n	185ce <usbd_event_transfer_data+0x16a>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   185e2:	2200      	movs	r2, #0
   185e4:	2300      	movs	r3, #0
   185e6:	a901      	add	r1, sp, #4
   185e8:	4817      	ldr	r0, [pc, #92]	; (18648 <usbd_event_transfer_data+0x1e4>)
   185ea:	f004 fc07 	bl	1cdfc <k_mem_slab_alloc>
   185ee:	2800      	cmp	r0, #0
   185f0:	d1cd      	bne.n	1858e <usbd_event_transfer_data+0x12a>
		ev = (struct usbd_event *)block.data;
   185f2:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   185f4:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   185f6:	2304      	movs	r3, #4
   185f8:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   185fa:	4814      	ldr	r0, [pc, #80]	; (1864c <usbd_event_transfer_data+0x1e8>)
   185fc:	f00f f84e 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   18600:	4913      	ldr	r1, [pc, #76]	; (18650 <usbd_event_transfer_data+0x1ec>)
   18602:	4814      	ldr	r0, [pc, #80]	; (18654 <usbd_event_transfer_data+0x1f0>)
   18604:	f00f f92c 	bl	27860 <k_work_submit_to_queue>
		return NULL;
   18608:	e7c1      	b.n	1858e <usbd_event_transfer_data+0x12a>
        if (NRF_USBD_EPISO_CHECK(ep))
   1860a:	f013 0f08 	tst.w	r3, #8
   1860e:	d003      	beq.n	18618 <usbd_event_transfer_data+0x1b4>
            ret = p_reg->ISOIN.AMOUNT;
   18610:	4b11      	ldr	r3, [pc, #68]	; (18658 <usbd_event_transfer_data+0x1f4>)
   18612:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
   18616:	e7c7      	b.n	185a8 <usbd_event_transfer_data+0x144>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   18618:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPIN[epnr].AMOUNT;
   1861c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18620:	009b      	lsls	r3, r3, #2
   18622:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18626:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   1862a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1862e:	e7bb      	b.n	185a8 <usbd_event_transfer_data+0x144>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   18630:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPOUT[epnr].AMOUNT;
   18634:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18638:	009b      	lsls	r3, r3, #2
   1863a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1863e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   18642:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   18646:	e7af      	b.n	185a8 <usbd_event_transfer_data+0x144>
   18648:	200007cc 	.word	0x200007cc
   1864c:	200008d8 	.word	0x200008d8
   18650:	20003970 	.word	0x20003970
   18654:	20002510 	.word	0x20002510
   18658:	40027000 	.word	0x40027000

0001865c <usbd_event_transfer_ctrl>:
{
   1865c:	b570      	push	{r4, r5, r6, lr}
   1865e:	b082      	sub	sp, #8
   18660:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   18662:	7885      	ldrb	r5, [r0, #2]
   18664:	4628      	mov	r0, r5
   18666:	f7ff fc83 	bl	17f70 <endpoint_ctx>
   1866a:	4606      	mov	r6, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1866c:	f015 0f80 	tst.w	r5, #128	; 0x80
   18670:	d11d      	bne.n	186ae <usbd_event_transfer_ctrl+0x52>
		switch (p_event->data.eptransfer.status) {
   18672:	78e3      	ldrb	r3, [r4, #3]
   18674:	2b00      	cmp	r3, #0
   18676:	d07d      	beq.n	18774 <usbd_event_transfer_ctrl+0x118>
   18678:	2b01      	cmp	r3, #1
   1867a:	d11a      	bne.n	186b2 <usbd_event_transfer_ctrl+0x56>
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1867c:	2200      	movs	r2, #0
   1867e:	2300      	movs	r3, #0
   18680:	a901      	add	r1, sp, #4
   18682:	4865      	ldr	r0, [pc, #404]	; (18818 <usbd_event_transfer_ctrl+0x1bc>)
   18684:	f004 fbba 	bl	1cdfc <k_mem_slab_alloc>
   18688:	2800      	cmp	r0, #0
   1868a:	d156      	bne.n	1873a <usbd_event_transfer_ctrl+0xde>
	ev = (struct usbd_event *)block.data;
   1868c:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   1868e:	6064      	str	r4, [r4, #4]
			if (!ev) {
   18690:	b17c      	cbz	r4, 186b2 <usbd_event_transfer_ctrl+0x56>
			ep_ctx->read_pending = true;
   18692:	2301      	movs	r3, #1
   18694:	7773      	strb	r3, [r6, #29]
			ev->evt_type = USBD_EVT_EP;
   18696:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   18698:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1869a:	60a6      	str	r6, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   1869c:	4621      	mov	r1, r4
   1869e:	485f      	ldr	r0, [pc, #380]	; (1881c <usbd_event_transfer_ctrl+0x1c0>)
   186a0:	f00e fffc 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   186a4:	495e      	ldr	r1, [pc, #376]	; (18820 <usbd_event_transfer_ctrl+0x1c4>)
   186a6:	485f      	ldr	r0, [pc, #380]	; (18824 <usbd_event_transfer_ctrl+0x1c8>)
   186a8:	f00f f8da 	bl	27860 <k_work_submit_to_queue>
}
   186ac:	e001      	b.n	186b2 <usbd_event_transfer_ctrl+0x56>
		switch (p_event->data.eptransfer.status) {
   186ae:	78e3      	ldrb	r3, [r4, #3]
   186b0:	b10b      	cbz	r3, 186b6 <usbd_event_transfer_ctrl+0x5a>
}
   186b2:	b002      	add	sp, #8
   186b4:	bd70      	pop	{r4, r5, r6, pc}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   186b6:	2200      	movs	r2, #0
   186b8:	2300      	movs	r3, #0
   186ba:	a901      	add	r1, sp, #4
   186bc:	4856      	ldr	r0, [pc, #344]	; (18818 <usbd_event_transfer_ctrl+0x1bc>)
   186be:	f004 fb9d 	bl	1cdfc <k_mem_slab_alloc>
   186c2:	b9a0      	cbnz	r0, 186ee <usbd_event_transfer_ctrl+0x92>
	ev = (struct usbd_event *)block.data;
   186c4:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   186c6:	6064      	str	r4, [r4, #4]
			if (!ev) {
   186c8:	2c00      	cmp	r4, #0
   186ca:	d0f2      	beq.n	186b2 <usbd_event_transfer_ctrl+0x56>
			ep_ctx->write_in_progress = false;
   186cc:	2300      	movs	r3, #0
   186ce:	77b3      	strb	r3, [r6, #30]
			ev->evt_type = USBD_EVT_EP;
   186d0:	2301      	movs	r3, #1
   186d2:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   186d4:	2303      	movs	r3, #3
   186d6:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   186d8:	60a6      	str	r6, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   186da:	4621      	mov	r1, r4
   186dc:	484f      	ldr	r0, [pc, #316]	; (1881c <usbd_event_transfer_ctrl+0x1c0>)
   186de:	f00e ffdd 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   186e2:	494f      	ldr	r1, [pc, #316]	; (18820 <usbd_event_transfer_ctrl+0x1c4>)
   186e4:	484f      	ldr	r0, [pc, #316]	; (18824 <usbd_event_transfer_ctrl+0x1c8>)
   186e6:	f00f f8bb 	bl	27860 <k_work_submit_to_queue>
}
   186ea:	e7e2      	b.n	186b2 <usbd_event_transfer_ctrl+0x56>
	} while (ev != NULL);
   186ec:	b164      	cbz	r4, 18708 <usbd_event_transfer_ctrl+0xac>
   186ee:	2200      	movs	r2, #0
   186f0:	2300      	movs	r3, #0
   186f2:	484a      	ldr	r0, [pc, #296]	; (1881c <usbd_event_transfer_ctrl+0x1c0>)
   186f4:	f004 fd8a 	bl	1d20c <z_impl_k_queue_get>
		if (ev) {
   186f8:	4604      	mov	r4, r0
   186fa:	2800      	cmp	r0, #0
   186fc:	d0f6      	beq.n	186ec <usbd_event_transfer_ctrl+0x90>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   186fe:	1d01      	adds	r1, r0, #4
   18700:	4845      	ldr	r0, [pc, #276]	; (18818 <usbd_event_transfer_ctrl+0x1bc>)
   18702:	f00e fe99 	bl	27438 <k_mem_slab_free>
}
   18706:	e7f1      	b.n	186ec <usbd_event_transfer_ctrl+0x90>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   18708:	2200      	movs	r2, #0
   1870a:	2300      	movs	r3, #0
   1870c:	a901      	add	r1, sp, #4
   1870e:	4842      	ldr	r0, [pc, #264]	; (18818 <usbd_event_transfer_ctrl+0x1bc>)
   18710:	f004 fb74 	bl	1cdfc <k_mem_slab_alloc>
   18714:	2800      	cmp	r0, #0
   18716:	d1d7      	bne.n	186c8 <usbd_event_transfer_ctrl+0x6c>
		ev = (struct usbd_event *)block.data;
   18718:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1871a:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1871c:	2304      	movs	r3, #4
   1871e:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   18720:	483e      	ldr	r0, [pc, #248]	; (1881c <usbd_event_transfer_ctrl+0x1c0>)
   18722:	f00e ffbb 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   18726:	493e      	ldr	r1, [pc, #248]	; (18820 <usbd_event_transfer_ctrl+0x1c4>)
   18728:	483e      	ldr	r0, [pc, #248]	; (18824 <usbd_event_transfer_ctrl+0x1c8>)
   1872a:	f00f f899 	bl	27860 <k_work_submit_to_queue>
		return NULL;
   1872e:	e7cb      	b.n	186c8 <usbd_event_transfer_ctrl+0x6c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   18730:	1d01      	adds	r1, r0, #4
   18732:	4839      	ldr	r0, [pc, #228]	; (18818 <usbd_event_transfer_ctrl+0x1bc>)
   18734:	f00e fe80 	bl	27438 <k_mem_slab_free>
	} while (ev != NULL);
   18738:	b144      	cbz	r4, 1874c <usbd_event_transfer_ctrl+0xf0>
   1873a:	2200      	movs	r2, #0
   1873c:	2300      	movs	r3, #0
   1873e:	4837      	ldr	r0, [pc, #220]	; (1881c <usbd_event_transfer_ctrl+0x1c0>)
   18740:	f004 fd64 	bl	1d20c <z_impl_k_queue_get>
		if (ev) {
   18744:	4604      	mov	r4, r0
   18746:	2800      	cmp	r0, #0
   18748:	d1f2      	bne.n	18730 <usbd_event_transfer_ctrl+0xd4>
   1874a:	e7f5      	b.n	18738 <usbd_event_transfer_ctrl+0xdc>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1874c:	2200      	movs	r2, #0
   1874e:	2300      	movs	r3, #0
   18750:	a901      	add	r1, sp, #4
   18752:	4831      	ldr	r0, [pc, #196]	; (18818 <usbd_event_transfer_ctrl+0x1bc>)
   18754:	f004 fb52 	bl	1cdfc <k_mem_slab_alloc>
   18758:	2800      	cmp	r0, #0
   1875a:	d199      	bne.n	18690 <usbd_event_transfer_ctrl+0x34>
		ev = (struct usbd_event *)block.data;
   1875c:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1875e:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   18760:	2304      	movs	r3, #4
   18762:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   18764:	482d      	ldr	r0, [pc, #180]	; (1881c <usbd_event_transfer_ctrl+0x1c0>)
   18766:	f00e ff99 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1876a:	492d      	ldr	r1, [pc, #180]	; (18820 <usbd_event_transfer_ctrl+0x1c4>)
   1876c:	482d      	ldr	r0, [pc, #180]	; (18824 <usbd_event_transfer_ctrl+0x1c8>)
   1876e:	f00f f877 	bl	27860 <k_work_submit_to_queue>
		return NULL;
   18772:	e78d      	b.n	18690 <usbd_event_transfer_ctrl+0x34>
	if (k_mem_slab_alloc(&fifo_elem_slab,
   18774:	2200      	movs	r2, #0
   18776:	2300      	movs	r3, #0
   18778:	a901      	add	r1, sp, #4
   1877a:	4827      	ldr	r0, [pc, #156]	; (18818 <usbd_event_transfer_ctrl+0x1bc>)
   1877c:	f004 fb3e 	bl	1cdfc <k_mem_slab_alloc>
   18780:	bb28      	cbnz	r0, 187ce <usbd_event_transfer_ctrl+0x172>
	ev = (struct usbd_event *)block.data;
   18782:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
   18784:	606d      	str	r5, [r5, #4]
			if (!ev) {
   18786:	2d00      	cmp	r5, #0
   18788:	d093      	beq.n	186b2 <usbd_event_transfer_ctrl+0x56>
			ev->evt_type = USBD_EVT_EP;
   1878a:	2301      	movs	r3, #1
   1878c:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   1878e:	2302      	movs	r3, #2
   18790:	732b      	strb	r3, [r5, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   18792:	60ae      	str	r6, [r5, #8]
			err_code = nrfx_usbd_ep_status_get(
   18794:	f106 010c 	add.w	r1, r6, #12
   18798:	78a0      	ldrb	r0, [r4, #2]
   1879a:	f003 f953 	bl	1ba44 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   1879e:	4b22      	ldr	r3, [pc, #136]	; (18828 <usbd_event_transfer_ctrl+0x1cc>)
   187a0:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
   187a4:	68f2      	ldr	r2, [r6, #12]
   187a6:	4293      	cmp	r3, r2
   187a8:	d82e      	bhi.n	18808 <usbd_event_transfer_ctrl+0x1ac>
				ctx->ctrl_read_len = 0U;
   187aa:	4b1f      	ldr	r3, [pc, #124]	; (18828 <usbd_event_transfer_ctrl+0x1cc>)
   187ac:	2200      	movs	r2, #0
   187ae:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	k_fifo_put(&usbd_evt_fifo, ev);
   187b2:	4629      	mov	r1, r5
   187b4:	4819      	ldr	r0, [pc, #100]	; (1881c <usbd_event_transfer_ctrl+0x1c0>)
   187b6:	f00e ff71 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   187ba:	4919      	ldr	r1, [pc, #100]	; (18820 <usbd_event_transfer_ctrl+0x1c4>)
   187bc:	4819      	ldr	r0, [pc, #100]	; (18824 <usbd_event_transfer_ctrl+0x1c8>)
   187be:	f00f f84f 	bl	27860 <k_work_submit_to_queue>
}
   187c2:	e776      	b.n	186b2 <usbd_event_transfer_ctrl+0x56>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   187c4:	1d01      	adds	r1, r0, #4
   187c6:	4814      	ldr	r0, [pc, #80]	; (18818 <usbd_event_transfer_ctrl+0x1bc>)
   187c8:	f00e fe36 	bl	27438 <k_mem_slab_free>
	} while (ev != NULL);
   187cc:	b145      	cbz	r5, 187e0 <usbd_event_transfer_ctrl+0x184>
   187ce:	2200      	movs	r2, #0
   187d0:	2300      	movs	r3, #0
   187d2:	4812      	ldr	r0, [pc, #72]	; (1881c <usbd_event_transfer_ctrl+0x1c0>)
   187d4:	f004 fd1a 	bl	1d20c <z_impl_k_queue_get>
		if (ev) {
   187d8:	4605      	mov	r5, r0
   187da:	2800      	cmp	r0, #0
   187dc:	d1f2      	bne.n	187c4 <usbd_event_transfer_ctrl+0x168>
   187de:	e7f5      	b.n	187cc <usbd_event_transfer_ctrl+0x170>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   187e0:	2200      	movs	r2, #0
   187e2:	2300      	movs	r3, #0
   187e4:	a901      	add	r1, sp, #4
   187e6:	480c      	ldr	r0, [pc, #48]	; (18818 <usbd_event_transfer_ctrl+0x1bc>)
   187e8:	f004 fb08 	bl	1cdfc <k_mem_slab_alloc>
   187ec:	2800      	cmp	r0, #0
   187ee:	d1ca      	bne.n	18786 <usbd_event_transfer_ctrl+0x12a>
		ev = (struct usbd_event *)block.data;
   187f0:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   187f2:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   187f4:	2304      	movs	r3, #4
   187f6:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   187f8:	4808      	ldr	r0, [pc, #32]	; (1881c <usbd_event_transfer_ctrl+0x1c0>)
   187fa:	f00e ff4f 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   187fe:	4908      	ldr	r1, [pc, #32]	; (18820 <usbd_event_transfer_ctrl+0x1c4>)
   18800:	4808      	ldr	r0, [pc, #32]	; (18824 <usbd_event_transfer_ctrl+0x1c8>)
   18802:	f00f f82d 	bl	27860 <k_work_submit_to_queue>
		return NULL;
   18806:	e7be      	b.n	18786 <usbd_event_transfer_ctrl+0x12a>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   18808:	1a9b      	subs	r3, r3, r2
   1880a:	4a07      	ldr	r2, [pc, #28]	; (18828 <usbd_event_transfer_ctrl+0x1cc>)
   1880c:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   18810:	f003 fcce 	bl	1c1b0 <nrfx_usbd_setup_data_clear>
   18814:	e7cd      	b.n	187b2 <usbd_event_transfer_ctrl+0x156>
   18816:	bf00      	nop
   18818:	200007cc 	.word	0x200007cc
   1881c:	200008d8 	.word	0x200008d8
   18820:	20003970 	.word	0x20003970
   18824:	20002510 	.word	0x20002510
   18828:	20003948 	.word	0x20003948

0001882c <usbd_event_handler>:
{
   1882c:	b510      	push	{r4, lr}
   1882e:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
   18830:	2300      	movs	r3, #0
   18832:	9303      	str	r3, [sp, #12]
   18834:	9304      	str	r3, [sp, #16]
   18836:	9305      	str	r3, [sp, #20]
   18838:	9306      	str	r3, [sp, #24]
   1883a:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
   1883c:	7803      	ldrb	r3, [r0, #0]
   1883e:	3b01      	subs	r3, #1
   18840:	2b05      	cmp	r3, #5
   18842:	d826      	bhi.n	18892 <usbd_event_handler+0x66>
   18844:	e8df f003 	tbb	[pc, r3]
   18848:	2e270335 	.word	0x2e270335
   1884c:	3953      	.short	0x3953
		evt.evt_type = USBD_EVT_POWER;
   1884e:	2300      	movs	r3, #0
   18850:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   18854:	2303      	movs	r3, #3
   18856:	f88d 3014 	strb.w	r3, [sp, #20]
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1885a:	2200      	movs	r2, #0
   1885c:	2300      	movs	r3, #0
   1885e:	a901      	add	r1, sp, #4
   18860:	4840      	ldr	r0, [pc, #256]	; (18964 <usbd_event_handler+0x138>)
   18862:	f004 facb 	bl	1cdfc <k_mem_slab_alloc>
   18866:	2800      	cmp	r0, #0
   18868:	d15e      	bne.n	18928 <usbd_event_handler+0xfc>
	ev = (struct usbd_event *)block.data;
   1886a:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   1886c:	6064      	str	r4, [r4, #4]
		if (!ev) {
   1886e:	b184      	cbz	r4, 18892 <usbd_event_handler+0x66>
		ev->evt_type = evt.evt_type;
   18870:	f89d 301c 	ldrb.w	r3, [sp, #28]
   18874:	7423      	strb	r3, [r4, #16]
		ev->evt = evt.evt;
   18876:	f104 0308 	add.w	r3, r4, #8
   1887a:	9906      	ldr	r1, [sp, #24]
   1887c:	9805      	ldr	r0, [sp, #20]
   1887e:	e883 0003 	stmia.w	r3, {r0, r1}
	k_fifo_put(&usbd_evt_fifo, ev);
   18882:	4621      	mov	r1, r4
   18884:	4838      	ldr	r0, [pc, #224]	; (18968 <usbd_event_handler+0x13c>)
   18886:	f00e ff09 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1888a:	4938      	ldr	r1, [pc, #224]	; (1896c <usbd_event_handler+0x140>)
   1888c:	4838      	ldr	r0, [pc, #224]	; (18970 <usbd_event_handler+0x144>)
   1888e:	f00e ffe7 	bl	27860 <k_work_submit_to_queue>
}
   18892:	b008      	add	sp, #32
   18894:	bd10      	pop	{r4, pc}
		evt.evt_type = USBD_EVT_POWER;
   18896:	2300      	movs	r3, #0
   18898:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
   1889c:	2304      	movs	r3, #4
   1889e:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
   188a2:	e7da      	b.n	1885a <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_POWER;
   188a4:	2300      	movs	r3, #0
   188a6:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
   188aa:	2304      	movs	r3, #4
   188ac:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
   188b0:	e7d3      	b.n	1885a <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_RESET;
   188b2:	2302      	movs	r3, #2
   188b4:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
   188b8:	e7cf      	b.n	1885a <usbd_event_handler+0x2e>
   188ba:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   188bc:	7880      	ldrb	r0, [r0, #2]
   188be:	f7ff fb57 	bl	17f70 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   188c2:	7a83      	ldrb	r3, [r0, #10]
   188c4:	2b01      	cmp	r3, #1
   188c6:	d00e      	beq.n	188e6 <usbd_event_handler+0xba>
   188c8:	d805      	bhi.n	188d6 <usbd_event_handler+0xaa>
   188ca:	2b00      	cmp	r3, #0
   188cc:	d1e1      	bne.n	18892 <usbd_event_handler+0x66>
			usbd_event_transfer_ctrl(p_event);
   188ce:	4620      	mov	r0, r4
   188d0:	f7ff fec4 	bl	1865c <usbd_event_transfer_ctrl>
	if (put_evt) {
   188d4:	e7dd      	b.n	18892 <usbd_event_handler+0x66>
   188d6:	3b02      	subs	r3, #2
   188d8:	b2db      	uxtb	r3, r3
   188da:	2b01      	cmp	r3, #1
   188dc:	d8d9      	bhi.n	18892 <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
   188de:	4620      	mov	r0, r4
   188e0:	f7ff fdc0 	bl	18464 <usbd_event_transfer_data>
	if (put_evt) {
   188e4:	e7d5      	b.n	18892 <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
   188e6:	4620      	mov	r0, r4
   188e8:	f7ff fdbc 	bl	18464 <usbd_event_transfer_data>
	if (put_evt) {
   188ec:	e7d1      	b.n	18892 <usbd_event_handler+0x66>
		nrfx_usbd_setup_get(&drv_setup);
   188ee:	a801      	add	r0, sp, #4
   188f0:	f003 fc32 	bl	1c158 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   188f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   188f8:	2b05      	cmp	r3, #5
   188fa:	d00a      	beq.n	18912 <usbd_event_handler+0xe6>
				endpoint_ctx(NRF_USBD_EPOUT(0));
   188fc:	2000      	movs	r0, #0
   188fe:	f7ff fb37 	bl	17f70 <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
   18902:	2301      	movs	r3, #1
   18904:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
   18908:	9005      	str	r0, [sp, #20]
			evt.evt.ep_evt.evt_type = EP_EVT_SETUP_RECV;
   1890a:	2300      	movs	r3, #0
   1890c:	f88d 3018 	strb.w	r3, [sp, #24]
	if (put_evt) {
   18910:	e7a3      	b.n	1885a <usbd_event_handler+0x2e>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   18912:	f89d 3004 	ldrb.w	r3, [sp, #4]
   18916:	f013 0f60 	tst.w	r3, #96	; 0x60
   1891a:	d0ba      	beq.n	18892 <usbd_event_handler+0x66>
   1891c:	e7ee      	b.n	188fc <usbd_event_handler+0xd0>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1891e:	1d01      	adds	r1, r0, #4
   18920:	4810      	ldr	r0, [pc, #64]	; (18964 <usbd_event_handler+0x138>)
   18922:	f00e fd89 	bl	27438 <k_mem_slab_free>
	} while (ev != NULL);
   18926:	b144      	cbz	r4, 1893a <usbd_event_handler+0x10e>
   18928:	2200      	movs	r2, #0
   1892a:	2300      	movs	r3, #0
   1892c:	480e      	ldr	r0, [pc, #56]	; (18968 <usbd_event_handler+0x13c>)
   1892e:	f004 fc6d 	bl	1d20c <z_impl_k_queue_get>
		if (ev) {
   18932:	4604      	mov	r4, r0
   18934:	2800      	cmp	r0, #0
   18936:	d1f2      	bne.n	1891e <usbd_event_handler+0xf2>
   18938:	e7f5      	b.n	18926 <usbd_event_handler+0xfa>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1893a:	2200      	movs	r2, #0
   1893c:	2300      	movs	r3, #0
   1893e:	a901      	add	r1, sp, #4
   18940:	4808      	ldr	r0, [pc, #32]	; (18964 <usbd_event_handler+0x138>)
   18942:	f004 fa5b 	bl	1cdfc <k_mem_slab_alloc>
   18946:	2800      	cmp	r0, #0
   18948:	d191      	bne.n	1886e <usbd_event_handler+0x42>
		ev = (struct usbd_event *)block.data;
   1894a:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1894c:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1894e:	2304      	movs	r3, #4
   18950:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   18952:	4805      	ldr	r0, [pc, #20]	; (18968 <usbd_event_handler+0x13c>)
   18954:	f00e fea2 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   18958:	4904      	ldr	r1, [pc, #16]	; (1896c <usbd_event_handler+0x140>)
   1895a:	4805      	ldr	r0, [pc, #20]	; (18970 <usbd_event_handler+0x144>)
   1895c:	f00e ff80 	bl	27860 <k_work_submit_to_queue>
		return NULL;
   18960:	e785      	b.n	1886e <usbd_event_handler+0x42>
   18962:	bf00      	nop
   18964:	200007cc 	.word	0x200007cc
   18968:	200008d8 	.word	0x200008d8
   1896c:	20003970 	.word	0x20003970
   18970:	20002510 	.word	0x20002510

00018974 <usb_dc_attach>:
{
   18974:	b510      	push	{r4, lr}
	if (ctx->attached) {
   18976:	4b1d      	ldr	r3, [pc, #116]	; (189ec <usb_dc_attach+0x78>)
   18978:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1897c:	b113      	cbz	r3, 18984 <usb_dc_attach+0x10>
		return 0;
   1897e:	2400      	movs	r4, #0
}
   18980:	4620      	mov	r0, r4
   18982:	bd10      	pop	{r4, pc}
	return z_impl_k_mutex_init(mutex);
   18984:	4c19      	ldr	r4, [pc, #100]	; (189ec <usb_dc_attach+0x78>)
   18986:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1898a:	f00e fdf2 	bl	27572 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   1898e:	2000      	movs	r0, #0
   18990:	f000 fc3e 	bl	19210 <z_nrf_clock_control_get_onoff>
	ctx->hfxo_mgr =
   18994:	61e0      	str	r0, [r4, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18996:	2200      	movs	r2, #0
   18998:	2101      	movs	r1, #1
   1899a:	2027      	movs	r0, #39	; 0x27
   1899c:	f7fb fa34 	bl	13e08 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   189a0:	4813      	ldr	r0, [pc, #76]	; (189f0 <usb_dc_attach+0x7c>)
   189a2:	f002 ff61 	bl	1b868 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   189a6:	4b13      	ldr	r3, [pc, #76]	; (189f4 <usb_dc_attach+0x80>)
   189a8:	4298      	cmp	r0, r3
   189aa:	d11b      	bne.n	189e4 <usb_dc_attach+0x70>
	nrfx_power_usbevt_enable();
   189ac:	f00e fbe7 	bl	2717e <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   189b0:	f7ff fb12 	bl	17fd8 <eps_ctx_init>
	if (ret == 0) {
   189b4:	4604      	mov	r4, r0
   189b6:	b918      	cbnz	r0, 189c0 <usb_dc_attach+0x4c>
		ctx->attached = true;
   189b8:	4b0c      	ldr	r3, [pc, #48]	; (189ec <usb_dc_attach+0x78>)
   189ba:	2201      	movs	r2, #1
   189bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   189c0:	4b0d      	ldr	r3, [pc, #52]	; (189f8 <usb_dc_attach+0x84>)
   189c2:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   189c4:	b11b      	cbz	r3, 189ce <usb_dc_attach+0x5a>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   189c6:	490d      	ldr	r1, [pc, #52]	; (189fc <usb_dc_attach+0x88>)
   189c8:	480d      	ldr	r0, [pc, #52]	; (18a00 <usb_dc_attach+0x8c>)
   189ca:	f00e ff49 	bl	27860 <k_work_submit_to_queue>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   189ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   189d2:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   189d6:	f013 0f01 	tst.w	r3, #1
   189da:	d0d1      	beq.n	18980 <usb_dc_attach+0xc>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   189dc:	2000      	movs	r0, #0
   189de:	f00d fad8 	bl	25f92 <usb_dc_power_event_handler>
   189e2:	e7cd      	b.n	18980 <usb_dc_attach+0xc>
		return -EIO;
   189e4:	f06f 0404 	mvn.w	r4, #4
   189e8:	e7ca      	b.n	18980 <usb_dc_attach+0xc>
   189ea:	bf00      	nop
   189ec:	20003948 	.word	0x20003948
   189f0:	0001882d 	.word	0x0001882d
   189f4:	0bad0000 	.word	0x0bad0000
   189f8:	200008d8 	.word	0x200008d8
   189fc:	20003970 	.word	0x20003970
   18a00:	20002510 	.word	0x20002510

00018a04 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   18a04:	4b07      	ldr	r3, [pc, #28]	; (18a24 <usb_dc_set_address+0x20>)
   18a06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   18a0a:	b12b      	cbz	r3, 18a18 <usb_dc_set_address+0x14>
	return get_usbd_ctx()->ready;
   18a0c:	4b05      	ldr	r3, [pc, #20]	; (18a24 <usb_dc_set_address+0x20>)
   18a0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   18a12:	b123      	cbz	r3, 18a1e <usb_dc_set_address+0x1a>
	return 0;
   18a14:	2000      	movs	r0, #0
   18a16:	4770      	bx	lr
		return -ENODEV;
   18a18:	f06f 0012 	mvn.w	r0, #18
   18a1c:	4770      	bx	lr
   18a1e:	f06f 0012 	mvn.w	r0, #18
}
   18a22:	4770      	bx	lr
   18a24:	20003948 	.word	0x20003948

00018a28 <usb_dc_ep_configure>:
{
   18a28:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   18a2a:	4b12      	ldr	r3, [pc, #72]	; (18a74 <usb_dc_ep_configure+0x4c>)
   18a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   18a30:	b1bb      	cbz	r3, 18a62 <usb_dc_ep_configure+0x3a>
   18a32:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   18a34:	7805      	ldrb	r5, [r0, #0]
   18a36:	4628      	mov	r0, r5
   18a38:	f7ff fa9a 	bl	17f70 <endpoint_ctx>
	if (!ep_ctx) {
   18a3c:	b1a0      	cbz	r0, 18a68 <usb_dc_ep_configure+0x40>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   18a3e:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   18a40:	7922      	ldrb	r2, [r4, #4]
   18a42:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   18a44:	8862      	ldrh	r2, [r4, #2]
   18a46:	6042      	str	r2, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   18a48:	7820      	ldrb	r0, [r4, #0]
   18a4a:	f010 0f08 	tst.w	r0, #8
   18a4e:	d103      	bne.n	18a58 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   18a50:	8863      	ldrh	r3, [r4, #2]
   18a52:	1e5a      	subs	r2, r3, #1
   18a54:	4213      	tst	r3, r2
   18a56:	d10a      	bne.n	18a6e <usb_dc_ep_configure+0x46>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   18a58:	8861      	ldrh	r1, [r4, #2]
   18a5a:	f002 fef5 	bl	1b848 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   18a5e:	2000      	movs	r0, #0
}
   18a60:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   18a62:	f06f 0012 	mvn.w	r0, #18
   18a66:	e7fb      	b.n	18a60 <usb_dc_ep_configure+0x38>
		return -EINVAL;
   18a68:	f06f 0015 	mvn.w	r0, #21
   18a6c:	e7f8      	b.n	18a60 <usb_dc_ep_configure+0x38>
			return -EINVAL;
   18a6e:	f06f 0015 	mvn.w	r0, #21
   18a72:	e7f5      	b.n	18a60 <usb_dc_ep_configure+0x38>
   18a74:	20003948 	.word	0x20003948

00018a78 <usb_dc_ep_set_stall>:
{
   18a78:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   18a7a:	4b16      	ldr	r3, [pc, #88]	; (18ad4 <usb_dc_ep_set_stall+0x5c>)
   18a7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   18a80:	b1e3      	cbz	r3, 18abc <usb_dc_ep_set_stall+0x44>
   18a82:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
   18a84:	4b13      	ldr	r3, [pc, #76]	; (18ad4 <usb_dc_ep_set_stall+0x5c>)
   18a86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   18a8a:	b1d3      	cbz	r3, 18ac2 <usb_dc_ep_set_stall+0x4a>
	ep_ctx = endpoint_ctx(ep);
   18a8c:	f7ff fa70 	bl	17f70 <endpoint_ctx>
	if (!ep_ctx) {
   18a90:	4605      	mov	r5, r0
   18a92:	b1c8      	cbz	r0, 18ac8 <usb_dc_ep_set_stall+0x50>
	switch (ep_ctx->cfg.type) {
   18a94:	7a83      	ldrb	r3, [r0, #10]
   18a96:	2b01      	cmp	r3, #1
   18a98:	d019      	beq.n	18ace <usb_dc_ep_set_stall+0x56>
   18a9a:	d807      	bhi.n	18aac <usb_dc_ep_set_stall+0x34>
   18a9c:	b90b      	cbnz	r3, 18aa2 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_setup_stall();
   18a9e:	f003 fbe1 	bl	1c264 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
   18aa2:	2000      	movs	r0, #0
   18aa4:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   18aa6:	696b      	ldr	r3, [r5, #20]
   18aa8:	61ab      	str	r3, [r5, #24]
}
   18aaa:	bd38      	pop	{r3, r4, r5, pc}
	switch (ep_ctx->cfg.type) {
   18aac:	3b02      	subs	r3, #2
   18aae:	b2db      	uxtb	r3, r3
   18ab0:	2b01      	cmp	r3, #1
   18ab2:	d8f6      	bhi.n	18aa2 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   18ab4:	4620      	mov	r0, r4
   18ab6:	f003 fb1b 	bl	1c0f0 <nrfx_usbd_ep_stall>
		break;
   18aba:	e7f2      	b.n	18aa2 <usb_dc_ep_set_stall+0x2a>
		return -ENODEV;
   18abc:	f06f 0012 	mvn.w	r0, #18
   18ac0:	e7f3      	b.n	18aaa <usb_dc_ep_set_stall+0x32>
   18ac2:	f06f 0012 	mvn.w	r0, #18
   18ac6:	e7f0      	b.n	18aaa <usb_dc_ep_set_stall+0x32>
		return -EINVAL;
   18ac8:	f06f 0015 	mvn.w	r0, #21
   18acc:	e7ed      	b.n	18aaa <usb_dc_ep_set_stall+0x32>
	switch (ep_ctx->cfg.type) {
   18ace:	f06f 0015 	mvn.w	r0, #21
   18ad2:	e7ea      	b.n	18aaa <usb_dc_ep_set_stall+0x32>
   18ad4:	20003948 	.word	0x20003948

00018ad8 <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
   18ad8:	4b11      	ldr	r3, [pc, #68]	; (18b20 <usb_dc_ep_clear_stall+0x48>)
   18ada:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   18ade:	b19b      	cbz	r3, 18b08 <usb_dc_ep_clear_stall+0x30>
{
   18ae0:	b510      	push	{r4, lr}
   18ae2:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
   18ae4:	4b0e      	ldr	r3, [pc, #56]	; (18b20 <usb_dc_ep_clear_stall+0x48>)
   18ae6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   18aea:	b183      	cbz	r3, 18b0e <usb_dc_ep_clear_stall+0x36>
	ep_ctx = endpoint_ctx(ep);
   18aec:	f7ff fa40 	bl	17f70 <endpoint_ctx>
	if (!ep_ctx) {
   18af0:	b180      	cbz	r0, 18b14 <usb_dc_ep_clear_stall+0x3c>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   18af2:	f014 0f08 	tst.w	r4, #8
   18af6:	d110      	bne.n	18b1a <usb_dc_ep_clear_stall+0x42>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   18af8:	4620      	mov	r0, r4
   18afa:	f003 fb21 	bl	1c140 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   18afe:	4620      	mov	r0, r4
   18b00:	f003 fd6a 	bl	1c5d8 <nrfx_usbd_ep_stall_clear>
	return 0;
   18b04:	2000      	movs	r0, #0
}
   18b06:	bd10      	pop	{r4, pc}
		return -ENODEV;
   18b08:	f06f 0012 	mvn.w	r0, #18
}
   18b0c:	4770      	bx	lr
		return -ENODEV;
   18b0e:	f06f 0012 	mvn.w	r0, #18
   18b12:	e7f8      	b.n	18b06 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
   18b14:	f06f 0015 	mvn.w	r0, #21
   18b18:	e7f5      	b.n	18b06 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
   18b1a:	f06f 0015 	mvn.w	r0, #21
   18b1e:	e7f2      	b.n	18b06 <usb_dc_ep_clear_stall+0x2e>
   18b20:	20003948 	.word	0x20003948

00018b24 <usb_dc_ep_is_stalled>:
{
   18b24:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   18b26:	4b10      	ldr	r3, [pc, #64]	; (18b68 <usb_dc_ep_is_stalled+0x44>)
   18b28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   18b2c:	b17b      	cbz	r3, 18b4e <usb_dc_ep_is_stalled+0x2a>
   18b2e:	4604      	mov	r4, r0
   18b30:	460d      	mov	r5, r1
	return get_usbd_ctx()->ready;
   18b32:	4b0d      	ldr	r3, [pc, #52]	; (18b68 <usb_dc_ep_is_stalled+0x44>)
   18b34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   18b38:	b163      	cbz	r3, 18b54 <usb_dc_ep_is_stalled+0x30>
	ep_ctx = endpoint_ctx(ep);
   18b3a:	f7ff fa19 	bl	17f70 <endpoint_ctx>
	if (!ep_ctx) {
   18b3e:	b160      	cbz	r0, 18b5a <usb_dc_ep_is_stalled+0x36>
	if (!stalled) {
   18b40:	b175      	cbz	r5, 18b60 <usb_dc_ep_is_stalled+0x3c>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   18b42:	4620      	mov	r0, r4
   18b44:	f003 fadc 	bl	1c100 <nrfx_usbd_ep_stall_check>
   18b48:	7028      	strb	r0, [r5, #0]
	return 0;
   18b4a:	2000      	movs	r0, #0
}
   18b4c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   18b4e:	f06f 0012 	mvn.w	r0, #18
   18b52:	e7fb      	b.n	18b4c <usb_dc_ep_is_stalled+0x28>
   18b54:	f06f 0012 	mvn.w	r0, #18
   18b58:	e7f8      	b.n	18b4c <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
   18b5a:	f06f 0015 	mvn.w	r0, #21
   18b5e:	e7f5      	b.n	18b4c <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
   18b60:	f06f 0015 	mvn.w	r0, #21
   18b64:	e7f2      	b.n	18b4c <usb_dc_ep_is_stalled+0x28>
   18b66:	bf00      	nop
   18b68:	20003948 	.word	0x20003948

00018b6c <usb_dc_ep_enable>:
{
   18b6c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   18b6e:	4b15      	ldr	r3, [pc, #84]	; (18bc4 <usb_dc_ep_enable+0x58>)
   18b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   18b74:	b1eb      	cbz	r3, 18bb2 <usb_dc_ep_enable+0x46>
   18b76:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
   18b78:	f7ff f9fa 	bl	17f70 <endpoint_ctx>
	if (!ep_ctx) {
   18b7c:	4605      	mov	r5, r0
   18b7e:	b1d8      	cbz	r0, 18bb8 <usb_dc_ep_enable+0x4c>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   18b80:	f014 0f08 	tst.w	r4, #8
   18b84:	d009      	beq.n	18b9a <usb_dc_ep_enable+0x2e>
	if (ep_ctx->cfg.en) {
   18b86:	7a2b      	ldrb	r3, [r5, #8]
   18b88:	b9cb      	cbnz	r3, 18bbe <usb_dc_ep_enable+0x52>
	ep_ctx->cfg.en = true;
   18b8a:	2301      	movs	r3, #1
   18b8c:	722b      	strb	r3, [r5, #8]
	return get_usbd_ctx()->ready;
   18b8e:	4b0d      	ldr	r3, [pc, #52]	; (18bc4 <usb_dc_ep_enable+0x58>)
   18b90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (dev_ready()) {
   18b94:	b943      	cbnz	r3, 18ba8 <usb_dc_ep_enable+0x3c>
	return 0;
   18b96:	2000      	movs	r0, #0
}
   18b98:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   18b9a:	4620      	mov	r0, r4
   18b9c:	f003 fad0 	bl	1c140 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   18ba0:	4620      	mov	r0, r4
   18ba2:	f003 fd19 	bl	1c5d8 <nrfx_usbd_ep_stall_clear>
   18ba6:	e7ee      	b.n	18b86 <usb_dc_ep_enable+0x1a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   18ba8:	4620      	mov	r0, r4
   18baa:	f003 fcbb 	bl	1c524 <nrfx_usbd_ep_enable>
	return 0;
   18bae:	2000      	movs	r0, #0
   18bb0:	e7f2      	b.n	18b98 <usb_dc_ep_enable+0x2c>
		return -ENODEV;
   18bb2:	f06f 0012 	mvn.w	r0, #18
   18bb6:	e7ef      	b.n	18b98 <usb_dc_ep_enable+0x2c>
		return -EINVAL;
   18bb8:	f06f 0015 	mvn.w	r0, #21
   18bbc:	e7ec      	b.n	18b98 <usb_dc_ep_enable+0x2c>
		return -EALREADY;
   18bbe:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18bc2:	e7e9      	b.n	18b98 <usb_dc_ep_enable+0x2c>
   18bc4:	20003948 	.word	0x20003948

00018bc8 <usb_dc_ep_disable>:
{
   18bc8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   18bca:	4b13      	ldr	r3, [pc, #76]	; (18c18 <usb_dc_ep_disable+0x50>)
   18bcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   18bd0:	b1ab      	cbz	r3, 18bfe <usb_dc_ep_disable+0x36>
   18bd2:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
   18bd4:	4b10      	ldr	r3, [pc, #64]	; (18c18 <usb_dc_ep_disable+0x50>)
   18bd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   18bda:	b19b      	cbz	r3, 18c04 <usb_dc_ep_disable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   18bdc:	f7ff f9c8 	bl	17f70 <endpoint_ctx>
	if (!ep_ctx) {
   18be0:	4605      	mov	r5, r0
   18be2:	b190      	cbz	r0, 18c0a <usb_dc_ep_disable+0x42>
	if (!ep_ctx->cfg.en) {
   18be4:	7a03      	ldrb	r3, [r0, #8]
   18be6:	b19b      	cbz	r3, 18c10 <usb_dc_ep_disable+0x48>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   18be8:	4620      	mov	r0, r4
   18bea:	f003 fecf 	bl	1c98c <nrfx_usbd_ep_disable>
	ep_ctx->write_in_progress = false;
   18bee:	2400      	movs	r4, #0
   18bf0:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   18bf2:	4628      	mov	r0, r5
   18bf4:	f00d f947 	bl	25e86 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   18bf8:	722c      	strb	r4, [r5, #8]
	return 0;
   18bfa:	4620      	mov	r0, r4
}
   18bfc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   18bfe:	f06f 0012 	mvn.w	r0, #18
   18c02:	e7fb      	b.n	18bfc <usb_dc_ep_disable+0x34>
   18c04:	f06f 0012 	mvn.w	r0, #18
   18c08:	e7f8      	b.n	18bfc <usb_dc_ep_disable+0x34>
		return -EINVAL;
   18c0a:	f06f 0015 	mvn.w	r0, #21
   18c0e:	e7f5      	b.n	18bfc <usb_dc_ep_disable+0x34>
		return -EALREADY;
   18c10:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18c14:	e7f2      	b.n	18bfc <usb_dc_ep_disable+0x34>
   18c16:	bf00      	nop
   18c18:	20003948 	.word	0x20003948

00018c1c <usb_dc_ep_write>:
{
   18c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c20:	b084      	sub	sp, #16
   18c22:	461f      	mov	r7, r3
	return get_usbd_ctx()->attached;
   18c24:	4b3c      	ldr	r3, [pc, #240]	; (18d18 <usb_dc_ep_write+0xfc>)
   18c26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   18c2a:	2b00      	cmp	r3, #0
   18c2c:	d065      	beq.n	18cfa <usb_dc_ep_write+0xde>
   18c2e:	4604      	mov	r4, r0
   18c30:	4688      	mov	r8, r1
   18c32:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
   18c34:	4b38      	ldr	r3, [pc, #224]	; (18d18 <usb_dc_ep_write+0xfc>)
   18c36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   18c3a:	2b00      	cmp	r3, #0
   18c3c:	d060      	beq.n	18d00 <usb_dc_ep_write+0xe4>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   18c3e:	f010 0f80 	tst.w	r0, #128	; 0x80
   18c42:	d060      	beq.n	18d06 <usb_dc_ep_write+0xea>
	ep_ctx = endpoint_ctx(ep);
   18c44:	f7ff f994 	bl	17f70 <endpoint_ctx>
	if (!ep_ctx) {
   18c48:	4605      	mov	r5, r0
   18c4a:	2800      	cmp	r0, #0
   18c4c:	d05e      	beq.n	18d0c <usb_dc_ep_write+0xf0>
	if (!ep_ctx->cfg.en) {
   18c4e:	7a03      	ldrb	r3, [r0, #8]
   18c50:	2b00      	cmp	r3, #0
   18c52:	d05e      	beq.n	18d12 <usb_dc_ep_write+0xf6>
	return z_impl_k_mutex_lock(mutex, timeout);
   18c54:	f04f 32ff 	mov.w	r2, #4294967295
   18c58:	f04f 33ff 	mov.w	r3, #4294967295
   18c5c:	482f      	ldr	r0, [pc, #188]	; (18d1c <usb_dc_ep_write+0x100>)
   18c5e:	f004 fa07 	bl	1d070 <z_impl_k_mutex_lock>
	if (ep_ctx->write_in_progress) {
   18c62:	7fab      	ldrb	r3, [r5, #30]
   18c64:	bb9b      	cbnz	r3, 18cce <usb_dc_ep_write+0xb2>
	if (!data_len && ep_ctx->trans_zlp) {
   18c66:	b91e      	cbnz	r6, 18c70 <usb_dc_ep_write+0x54>
   18c68:	7feb      	ldrb	r3, [r5, #31]
   18c6a:	b10b      	cbz	r3, 18c70 <usb_dc_ep_write+0x54>
		ep_ctx->trans_zlp = false;
   18c6c:	2300      	movs	r3, #0
   18c6e:	77eb      	strb	r3, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   18c70:	7aab      	ldrb	r3, [r5, #10]
   18c72:	b963      	cbnz	r3, 18c8e <usb_dc_ep_write+0x72>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   18c74:	b15e      	cbz	r6, 18c8e <usb_dc_ep_write+0x72>
   18c76:	4a28      	ldr	r2, [pc, #160]	; (18d18 <usb_dc_ep_write+0xfc>)
   18c78:	8952      	ldrh	r2, [r2, #10]
   18c7a:	42b2      	cmp	r2, r6
   18c7c:	d907      	bls.n	18c8e <usb_dc_ep_write+0x72>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   18c7e:	6869      	ldr	r1, [r5, #4]
   18c80:	fbb6 f2f1 	udiv	r2, r6, r1
   18c84:	fb01 6212 	mls	r2, r1, r2, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   18c88:	b90a      	cbnz	r2, 18c8e <usb_dc_ep_write+0x72>
			ep_ctx->trans_zlp = true;
   18c8a:	2201      	movs	r2, #1
   18c8c:	77ea      	strb	r2, [r5, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   18c8e:	b91b      	cbnz	r3, 18c98 <usb_dc_ep_write+0x7c>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   18c90:	f003 faf0 	bl	1c274 <nrfx_usbd_last_setup_dir_get>
   18c94:	42a0      	cmp	r0, r4
   18c96:	d120      	bne.n	18cda <usb_dc_ep_write+0xbe>
	ep_ctx->write_in_progress = true;
   18c98:	2301      	movs	r3, #1
   18c9a:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   18c9c:	f8cd 8004 	str.w	r8, [sp, #4]
   18ca0:	9602      	str	r6, [sp, #8]
   18ca2:	2300      	movs	r3, #0
   18ca4:	9303      	str	r3, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   18ca6:	a901      	add	r1, sp, #4
   18ca8:	4620      	mov	r0, r4
   18caa:	f002 fe35 	bl	1b918 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   18cae:	4b1c      	ldr	r3, [pc, #112]	; (18d20 <usb_dc_ep_write+0x104>)
   18cb0:	4298      	cmp	r0, r3
   18cb2:	d019      	beq.n	18ce8 <usb_dc_ep_write+0xcc>
		ep_ctx->write_in_progress = false;
   18cb4:	2300      	movs	r3, #0
   18cb6:	77ab      	strb	r3, [r5, #30]
		if (ret_bytes) {
   18cb8:	b1d7      	cbz	r7, 18cf0 <usb_dc_ep_write+0xd4>
			*ret_bytes = 0;
   18cba:	603b      	str	r3, [r7, #0]
		result = -EIO;
   18cbc:	f06f 0404 	mvn.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
   18cc0:	4816      	ldr	r0, [pc, #88]	; (18d1c <usb_dc_ep_write+0x100>)
   18cc2:	f004 fa5f 	bl	1d184 <z_impl_k_mutex_unlock>
}
   18cc6:	4620      	mov	r0, r4
   18cc8:	b004      	add	sp, #16
   18cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18cce:	4813      	ldr	r0, [pc, #76]	; (18d1c <usb_dc_ep_write+0x100>)
   18cd0:	f004 fa58 	bl	1d184 <z_impl_k_mutex_unlock>
		return -EAGAIN;
   18cd4:	f06f 040a 	mvn.w	r4, #10
   18cd8:	e7f5      	b.n	18cc6 <usb_dc_ep_write+0xaa>
		nrfx_usbd_setup_clear();
   18cda:	f003 fabb 	bl	1c254 <nrfx_usbd_setup_clear>
   18cde:	480f      	ldr	r0, [pc, #60]	; (18d1c <usb_dc_ep_write+0x100>)
   18ce0:	f004 fa50 	bl	1d184 <z_impl_k_mutex_unlock>
		return 0;
   18ce4:	2400      	movs	r4, #0
   18ce6:	e7ee      	b.n	18cc6 <usb_dc_ep_write+0xaa>
		if (ret_bytes) {
   18ce8:	b12f      	cbz	r7, 18cf6 <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
   18cea:	603e      	str	r6, [r7, #0]
	int result = 0;
   18cec:	2400      	movs	r4, #0
   18cee:	e7e7      	b.n	18cc0 <usb_dc_ep_write+0xa4>
		result = -EIO;
   18cf0:	f06f 0404 	mvn.w	r4, #4
   18cf4:	e7e4      	b.n	18cc0 <usb_dc_ep_write+0xa4>
	int result = 0;
   18cf6:	2400      	movs	r4, #0
   18cf8:	e7e2      	b.n	18cc0 <usb_dc_ep_write+0xa4>
		return -ENODEV;
   18cfa:	f06f 0412 	mvn.w	r4, #18
   18cfe:	e7e2      	b.n	18cc6 <usb_dc_ep_write+0xaa>
   18d00:	f06f 0412 	mvn.w	r4, #18
   18d04:	e7df      	b.n	18cc6 <usb_dc_ep_write+0xaa>
		return -EINVAL;
   18d06:	f06f 0415 	mvn.w	r4, #21
   18d0a:	e7dc      	b.n	18cc6 <usb_dc_ep_write+0xaa>
		return -EINVAL;
   18d0c:	f06f 0415 	mvn.w	r4, #21
   18d10:	e7d9      	b.n	18cc6 <usb_dc_ep_write+0xaa>
		return -EINVAL;
   18d12:	f06f 0415 	mvn.w	r4, #21
   18d16:	e7d6      	b.n	18cc6 <usb_dc_ep_write+0xaa>
   18d18:	20003948 	.word	0x20003948
   18d1c:	20003980 	.word	0x20003980
   18d20:	0bad0000 	.word	0x0bad0000

00018d24 <usb_dc_ep_read_wait>:
{
   18d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d28:	461f      	mov	r7, r3
	return get_usbd_ctx()->attached;
   18d2a:	4b2b      	ldr	r3, [pc, #172]	; (18dd8 <usb_dc_ep_read_wait+0xb4>)
   18d2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   18d30:	2b00      	cmp	r3, #0
   18d32:	d042      	beq.n	18dba <usb_dc_ep_read_wait+0x96>
   18d34:	460d      	mov	r5, r1
   18d36:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
   18d38:	4b27      	ldr	r3, [pc, #156]	; (18dd8 <usb_dc_ep_read_wait+0xb4>)
   18d3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   18d3e:	2b00      	cmp	r3, #0
   18d40:	d03e      	beq.n	18dc0 <usb_dc_ep_read_wait+0x9c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   18d42:	f010 0f80 	tst.w	r0, #128	; 0x80
   18d46:	d13e      	bne.n	18dc6 <usb_dc_ep_read_wait+0xa2>
	if (!data && max_data_len) {
   18d48:	b349      	cbz	r1, 18d9e <usb_dc_ep_read_wait+0x7a>
	ep_ctx = endpoint_ctx(ep);
   18d4a:	f7ff f911 	bl	17f70 <endpoint_ctx>
	if (!ep_ctx) {
   18d4e:	4604      	mov	r4, r0
   18d50:	2800      	cmp	r0, #0
   18d52:	d03b      	beq.n	18dcc <usb_dc_ep_read_wait+0xa8>
	if (!ep_ctx->cfg.en) {
   18d54:	7a03      	ldrb	r3, [r0, #8]
   18d56:	2b00      	cmp	r3, #0
   18d58:	d03b      	beq.n	18dd2 <usb_dc_ep_read_wait+0xae>
	return z_impl_k_mutex_lock(mutex, timeout);
   18d5a:	f04f 32ff 	mov.w	r2, #4294967295
   18d5e:	f04f 33ff 	mov.w	r3, #4294967295
   18d62:	481e      	ldr	r0, [pc, #120]	; (18ddc <usb_dc_ep_read_wait+0xb8>)
   18d64:	f004 f984 	bl	1d070 <z_impl_k_mutex_lock>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   18d68:	68e3      	ldr	r3, [r4, #12]
   18d6a:	46b0      	mov	r8, r6
   18d6c:	429e      	cmp	r6, r3
   18d6e:	bf28      	it	cs
   18d70:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   18d72:	b1cd      	cbz	r5, 18da8 <usb_dc_ep_read_wait+0x84>
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   18d74:	4642      	mov	r2, r8
   18d76:	69a1      	ldr	r1, [r4, #24]
   18d78:	4628      	mov	r0, r5
   18d7a:	f009 fe58 	bl	22a2e <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   18d7e:	69a3      	ldr	r3, [r4, #24]
   18d80:	4443      	add	r3, r8
   18d82:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   18d84:	68e3      	ldr	r3, [r4, #12]
   18d86:	eba3 0308 	sub.w	r3, r3, r8
   18d8a:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   18d8c:	b10f      	cbz	r7, 18d92 <usb_dc_ep_read_wait+0x6e>
		*read_bytes = bytes_to_copy;
   18d8e:	f8c7 8000 	str.w	r8, [r7]
	return z_impl_k_mutex_unlock(mutex);
   18d92:	4812      	ldr	r0, [pc, #72]	; (18ddc <usb_dc_ep_read_wait+0xb8>)
   18d94:	f004 f9f6 	bl	1d184 <z_impl_k_mutex_unlock>
	return 0;
   18d98:	2000      	movs	r0, #0
}
   18d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!data && max_data_len) {
   18d9e:	2a00      	cmp	r2, #0
   18da0:	d0d3      	beq.n	18d4a <usb_dc_ep_read_wait+0x26>
		return -EINVAL;
   18da2:	f06f 0015 	mvn.w	r0, #21
   18da6:	e7f8      	b.n	18d9a <usb_dc_ep_read_wait+0x76>
	if (!data && !max_data_len) {
   18da8:	2e00      	cmp	r6, #0
   18daa:	d1e3      	bne.n	18d74 <usb_dc_ep_read_wait+0x50>
		if (read_bytes) {
   18dac:	b107      	cbz	r7, 18db0 <usb_dc_ep_read_wait+0x8c>
			*read_bytes = ep_ctx->buf.len;
   18dae:	603b      	str	r3, [r7, #0]
   18db0:	480a      	ldr	r0, [pc, #40]	; (18ddc <usb_dc_ep_read_wait+0xb8>)
   18db2:	f004 f9e7 	bl	1d184 <z_impl_k_mutex_unlock>
		return 0;
   18db6:	2000      	movs	r0, #0
   18db8:	e7ef      	b.n	18d9a <usb_dc_ep_read_wait+0x76>
		return -ENODEV;
   18dba:	f06f 0012 	mvn.w	r0, #18
   18dbe:	e7ec      	b.n	18d9a <usb_dc_ep_read_wait+0x76>
   18dc0:	f06f 0012 	mvn.w	r0, #18
   18dc4:	e7e9      	b.n	18d9a <usb_dc_ep_read_wait+0x76>
		return -EINVAL;
   18dc6:	f06f 0015 	mvn.w	r0, #21
   18dca:	e7e6      	b.n	18d9a <usb_dc_ep_read_wait+0x76>
		return -EINVAL;
   18dcc:	f06f 0015 	mvn.w	r0, #21
   18dd0:	e7e3      	b.n	18d9a <usb_dc_ep_read_wait+0x76>
		return -EINVAL;
   18dd2:	f06f 0015 	mvn.w	r0, #21
   18dd6:	e7e0      	b.n	18d9a <usb_dc_ep_read_wait+0x76>
   18dd8:	20003948 	.word	0x20003948
   18ddc:	20003980 	.word	0x20003980

00018de0 <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
   18de0:	4b3c      	ldr	r3, [pc, #240]	; (18ed4 <usb_dc_ep_read_continue+0xf4>)
   18de2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   18de6:	2b00      	cmp	r3, #0
   18de8:	d065      	beq.n	18eb6 <usb_dc_ep_read_continue+0xd6>
	return get_usbd_ctx()->ready;
   18dea:	4b3a      	ldr	r3, [pc, #232]	; (18ed4 <usb_dc_ep_read_continue+0xf4>)
   18dec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   18df0:	2b00      	cmp	r3, #0
   18df2:	d063      	beq.n	18ebc <usb_dc_ep_read_continue+0xdc>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   18df4:	f010 0f80 	tst.w	r0, #128	; 0x80
   18df8:	d163      	bne.n	18ec2 <usb_dc_ep_read_continue+0xe2>
{
   18dfa:	b530      	push	{r4, r5, lr}
   18dfc:	b083      	sub	sp, #12
	ep_ctx = endpoint_ctx(ep);
   18dfe:	f7ff f8b7 	bl	17f70 <endpoint_ctx>
	if (!ep_ctx) {
   18e02:	4604      	mov	r4, r0
   18e04:	2800      	cmp	r0, #0
   18e06:	d05f      	beq.n	18ec8 <usb_dc_ep_read_continue+0xe8>
	if (!ep_ctx->cfg.en) {
   18e08:	7a03      	ldrb	r3, [r0, #8]
   18e0a:	2b00      	cmp	r3, #0
   18e0c:	d05f      	beq.n	18ece <usb_dc_ep_read_continue+0xee>
	return z_impl_k_mutex_lock(mutex, timeout);
   18e0e:	f04f 32ff 	mov.w	r2, #4294967295
   18e12:	f04f 33ff 	mov.w	r3, #4294967295
   18e16:	4830      	ldr	r0, [pc, #192]	; (18ed8 <usb_dc_ep_read_continue+0xf8>)
   18e18:	f004 f92a 	bl	1d070 <z_impl_k_mutex_lock>
	if (!ep_ctx->buf.len) {
   18e1c:	68e3      	ldr	r3, [r4, #12]
   18e1e:	b92b      	cbnz	r3, 18e2c <usb_dc_ep_read_continue+0x4c>
		ep_ctx->buf.curr = ep_ctx->buf.data;
   18e20:	6963      	ldr	r3, [r4, #20]
   18e22:	61a3      	str	r3, [r4, #24]
		ep_ctx->read_complete = true;
   18e24:	2301      	movs	r3, #1
   18e26:	7723      	strb	r3, [r4, #28]
		if (ep_ctx->read_pending) {
   18e28:	7f63      	ldrb	r3, [r4, #29]
   18e2a:	b92b      	cbnz	r3, 18e38 <usb_dc_ep_read_continue+0x58>
	return z_impl_k_mutex_unlock(mutex);
   18e2c:	482a      	ldr	r0, [pc, #168]	; (18ed8 <usb_dc_ep_read_continue+0xf8>)
   18e2e:	f004 f9a9 	bl	1d184 <z_impl_k_mutex_unlock>
	return 0;
   18e32:	2000      	movs	r0, #0
}
   18e34:	b003      	add	sp, #12
   18e36:	bd30      	pop	{r4, r5, pc}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   18e38:	2200      	movs	r2, #0
   18e3a:	2300      	movs	r3, #0
   18e3c:	a901      	add	r1, sp, #4
   18e3e:	4827      	ldr	r0, [pc, #156]	; (18edc <usb_dc_ep_read_continue+0xfc>)
   18e40:	f003 ffdc 	bl	1cdfc <k_mem_slab_alloc>
   18e44:	b9a0      	cbnz	r0, 18e70 <usb_dc_ep_read_continue+0x90>
	ev = (struct usbd_event *)block.data;
   18e46:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
   18e48:	606d      	str	r5, [r5, #4]
			if (!ev) {
   18e4a:	b375      	cbz	r5, 18eaa <usb_dc_ep_read_continue+0xca>
			ev->evt_type = USBD_EVT_EP;
   18e4c:	2301      	movs	r3, #1
   18e4e:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   18e50:	60ac      	str	r4, [r5, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   18e52:	732b      	strb	r3, [r5, #12]
	k_fifo_put(&usbd_evt_fifo, ev);
   18e54:	4629      	mov	r1, r5
   18e56:	4822      	ldr	r0, [pc, #136]	; (18ee0 <usb_dc_ep_read_continue+0x100>)
   18e58:	f00e fc20 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   18e5c:	4921      	ldr	r1, [pc, #132]	; (18ee4 <usb_dc_ep_read_continue+0x104>)
   18e5e:	4822      	ldr	r0, [pc, #136]	; (18ee8 <usb_dc_ep_read_continue+0x108>)
   18e60:	f00e fcfe 	bl	27860 <k_work_submit_to_queue>
}
   18e64:	e7e2      	b.n	18e2c <usb_dc_ep_read_continue+0x4c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   18e66:	1d01      	adds	r1, r0, #4
   18e68:	481c      	ldr	r0, [pc, #112]	; (18edc <usb_dc_ep_read_continue+0xfc>)
   18e6a:	f00e fae5 	bl	27438 <k_mem_slab_free>
	} while (ev != NULL);
   18e6e:	b145      	cbz	r5, 18e82 <usb_dc_ep_read_continue+0xa2>
	return z_impl_k_queue_get(queue, timeout);
   18e70:	2200      	movs	r2, #0
   18e72:	2300      	movs	r3, #0
   18e74:	481a      	ldr	r0, [pc, #104]	; (18ee0 <usb_dc_ep_read_continue+0x100>)
   18e76:	f004 f9c9 	bl	1d20c <z_impl_k_queue_get>
		if (ev) {
   18e7a:	4605      	mov	r5, r0
   18e7c:	2800      	cmp	r0, #0
   18e7e:	d1f2      	bne.n	18e66 <usb_dc_ep_read_continue+0x86>
   18e80:	e7f5      	b.n	18e6e <usb_dc_ep_read_continue+0x8e>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   18e82:	2200      	movs	r2, #0
   18e84:	2300      	movs	r3, #0
   18e86:	a901      	add	r1, sp, #4
   18e88:	4814      	ldr	r0, [pc, #80]	; (18edc <usb_dc_ep_read_continue+0xfc>)
   18e8a:	f003 ffb7 	bl	1cdfc <k_mem_slab_alloc>
   18e8e:	2800      	cmp	r0, #0
   18e90:	d1db      	bne.n	18e4a <usb_dc_ep_read_continue+0x6a>
		ev = (struct usbd_event *)block.data;
   18e92:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   18e94:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   18e96:	2304      	movs	r3, #4
   18e98:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   18e9a:	4811      	ldr	r0, [pc, #68]	; (18ee0 <usb_dc_ep_read_continue+0x100>)
   18e9c:	f00e fbfe 	bl	2769c <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   18ea0:	4910      	ldr	r1, [pc, #64]	; (18ee4 <usb_dc_ep_read_continue+0x104>)
   18ea2:	4811      	ldr	r0, [pc, #68]	; (18ee8 <usb_dc_ep_read_continue+0x108>)
   18ea4:	f00e fcdc 	bl	27860 <k_work_submit_to_queue>
		return NULL;
   18ea8:	e7cf      	b.n	18e4a <usb_dc_ep_read_continue+0x6a>
	return z_impl_k_mutex_unlock(mutex);
   18eaa:	480b      	ldr	r0, [pc, #44]	; (18ed8 <usb_dc_ep_read_continue+0xf8>)
   18eac:	f004 f96a 	bl	1d184 <z_impl_k_mutex_unlock>
				return -ENOMEM;
   18eb0:	f06f 000b 	mvn.w	r0, #11
   18eb4:	e7be      	b.n	18e34 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   18eb6:	f06f 0012 	mvn.w	r0, #18
   18eba:	4770      	bx	lr
   18ebc:	f06f 0012 	mvn.w	r0, #18
   18ec0:	4770      	bx	lr
		return -EINVAL;
   18ec2:	f06f 0015 	mvn.w	r0, #21
}
   18ec6:	4770      	bx	lr
		return -EINVAL;
   18ec8:	f06f 0015 	mvn.w	r0, #21
   18ecc:	e7b2      	b.n	18e34 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   18ece:	f06f 0015 	mvn.w	r0, #21
   18ed2:	e7af      	b.n	18e34 <usb_dc_ep_read_continue+0x54>
   18ed4:	20003948 	.word	0x20003948
   18ed8:	20003980 	.word	0x20003980
   18edc:	200007cc 	.word	0x200007cc
   18ee0:	200008d8 	.word	0x200008d8
   18ee4:	20003970 	.word	0x20003970
   18ee8:	20002510 	.word	0x20002510

00018eec <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
   18eec:	4b08      	ldr	r3, [pc, #32]	; (18f10 <usb_dc_ep_set_callback+0x24>)
   18eee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   18ef2:	b13b      	cbz	r3, 18f04 <usb_dc_ep_set_callback+0x18>
{
   18ef4:	b510      	push	{r4, lr}
   18ef6:	460c      	mov	r4, r1
	ep_ctx = endpoint_ctx(ep);
   18ef8:	f7ff f83a 	bl	17f70 <endpoint_ctx>
	if (!ep_ctx) {
   18efc:	b128      	cbz	r0, 18f0a <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
   18efe:	6004      	str	r4, [r0, #0]
	return 0;
   18f00:	2000      	movs	r0, #0
}
   18f02:	bd10      	pop	{r4, pc}
		return -ENODEV;
   18f04:	f06f 0012 	mvn.w	r0, #18
}
   18f08:	4770      	bx	lr
		return -EINVAL;
   18f0a:	f06f 0015 	mvn.w	r0, #21
   18f0e:	e7f8      	b.n	18f02 <usb_dc_ep_set_callback+0x16>
   18f10:	20003948 	.word	0x20003948

00018f14 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   18f14:	4b01      	ldr	r3, [pc, #4]	; (18f1c <usb_dc_set_status_callback+0x8>)
   18f16:	6018      	str	r0, [r3, #0]
}
   18f18:	4770      	bx	lr
   18f1a:	bf00      	nop
   18f1c:	20003948 	.word	0x20003948

00018f20 <usb_dc_ep_mps>:
{
   18f20:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   18f22:	4b07      	ldr	r3, [pc, #28]	; (18f40 <usb_dc_ep_mps+0x20>)
   18f24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   18f28:	b123      	cbz	r3, 18f34 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   18f2a:	f7ff f821 	bl	17f70 <endpoint_ctx>
	if (!ep_ctx) {
   18f2e:	b120      	cbz	r0, 18f3a <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   18f30:	6840      	ldr	r0, [r0, #4]
}
   18f32:	bd08      	pop	{r3, pc}
		return -ENODEV;
   18f34:	f06f 0012 	mvn.w	r0, #18
   18f38:	e7fb      	b.n	18f32 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   18f3a:	f06f 0015 	mvn.w	r0, #21
   18f3e:	e7f8      	b.n	18f32 <usb_dc_ep_mps+0x12>
   18f40:	20003948 	.word	0x20003948

00018f44 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   18f44:	4800      	ldr	r0, [pc, #0]	; (18f48 <get_hf_flags+0x4>)
   18f46:	4770      	bx	lr
   18f48:	20003c28 	.word	0x20003c28

00018f4c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   18f4c:	4b03      	ldr	r3, [pc, #12]	; (18f5c <get_subsys+0x10>)
   18f4e:	1ac0      	subs	r0, r0, r3
   18f50:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   18f52:	4b03      	ldr	r3, [pc, #12]	; (18f60 <get_subsys+0x14>)
   18f54:	fb03 f000 	mul.w	r0, r3, r0
   18f58:	4770      	bx	lr
   18f5a:	bf00      	nop
   18f5c:	20003be8 	.word	0x20003be8
   18f60:	b6db6db7 	.word	0xb6db6db7

00018f64 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   18f64:	b538      	push	{r3, r4, r5, lr}
   18f66:	4605      	mov	r5, r0
   18f68:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   18f6a:	f7ff ffef 	bl	18f4c <get_subsys>
   18f6e:	4601      	mov	r1, r0
   18f70:	2240      	movs	r2, #64	; 0x40
   18f72:	4803      	ldr	r0, [pc, #12]	; (18f80 <onoff_stop+0x1c>)
   18f74:	f00d f8ba 	bl	260ec <stop>
   18f78:	4601      	mov	r1, r0
	notify(mgr, res);
   18f7a:	4628      	mov	r0, r5
   18f7c:	47a0      	blx	r4
}
   18f7e:	bd38      	pop	{r3, r4, r5, pc}
   18f80:	0002802c 	.word	0x0002802c

00018f84 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   18f84:	b530      	push	{r4, r5, lr}
   18f86:	b083      	sub	sp, #12
   18f88:	4605      	mov	r5, r0
   18f8a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18f8c:	f7ff ffde 	bl	18f4c <get_subsys>
   18f90:	4601      	mov	r1, r0
   18f92:	2340      	movs	r3, #64	; 0x40
   18f94:	9300      	str	r3, [sp, #0]
   18f96:	4623      	mov	r3, r4
   18f98:	4a05      	ldr	r2, [pc, #20]	; (18fb0 <onoff_start+0x2c>)
   18f9a:	4806      	ldr	r0, [pc, #24]	; (18fb4 <onoff_start+0x30>)
   18f9c:	f00d f8c0 	bl	26120 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   18fa0:	1e01      	subs	r1, r0, #0
   18fa2:	db01      	blt.n	18fa8 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   18fa4:	b003      	add	sp, #12
   18fa6:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   18fa8:	4628      	mov	r0, r5
   18faa:	47a0      	blx	r4
}
   18fac:	e7fa      	b.n	18fa4 <onoff_start+0x20>
   18fae:	bf00      	nop
   18fb0:	00026169 	.word	0x00026169
   18fb4:	0002802c 	.word	0x0002802c

00018fb8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   18fb8:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   18fba:	b110      	cbz	r0, 18fc2 <clock_event_handler+0xa>
   18fbc:	2801      	cmp	r0, #1
   18fbe:	d00d      	beq.n	18fdc <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   18fc0:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   18fc2:	2100      	movs	r1, #0
   18fc4:	4808      	ldr	r0, [pc, #32]	; (18fe8 <clock_event_handler+0x30>)
   18fc6:	f00d f81a 	bl	25ffe <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   18fca:	6883      	ldr	r3, [r0, #8]
   18fcc:	f013 0f07 	tst.w	r3, #7
   18fd0:	d1f6      	bne.n	18fc0 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   18fd2:	2100      	movs	r1, #0
   18fd4:	4804      	ldr	r0, [pc, #16]	; (18fe8 <clock_event_handler+0x30>)
   18fd6:	f00d f877 	bl	260c8 <clkstarted_handle>
   18fda:	e7f1      	b.n	18fc0 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   18fdc:	2101      	movs	r1, #1
   18fde:	4802      	ldr	r0, [pc, #8]	; (18fe8 <clock_event_handler+0x30>)
   18fe0:	f00d f872 	bl	260c8 <clkstarted_handle>
}
   18fe4:	e7ec      	b.n	18fc0 <clock_event_handler+0x8>
   18fe6:	bf00      	nop
   18fe8:	0002802c 	.word	0x0002802c

00018fec <generic_hfclk_start>:
{
   18fec:	b510      	push	{r4, lr}
	__asm__ volatile(
   18fee:	f04f 0340 	mov.w	r3, #64	; 0x40
   18ff2:	f3ef 8411 	mrs	r4, BASEPRI
   18ff6:	f383 8812 	msr	BASEPRI_MAX, r3
   18ffa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   18ffe:	4a13      	ldr	r2, [pc, #76]	; (1904c <generic_hfclk_start+0x60>)
   19000:	6813      	ldr	r3, [r2, #0]
   19002:	f043 0302 	orr.w	r3, r3, #2
   19006:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   19008:	f013 0f01 	tst.w	r3, #1
   1900c:	d108      	bne.n	19020 <generic_hfclk_start+0x34>
	bool already_started = false;
   1900e:	2300      	movs	r3, #0
	__asm__ volatile(
   19010:	f384 8811 	msr	BASEPRI, r4
   19014:	f3bf 8f6f 	isb	sy
	if (already_started) {
   19018:	b99b      	cbnz	r3, 19042 <generic_hfclk_start+0x56>
	hfclk_start();
   1901a:	f00d f8ad 	bl	26178 <hfclk_start>
}
   1901e:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19024:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19028:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1902c:	f012 0f01 	tst.w	r2, #1
   19030:	d101      	bne.n	19036 <generic_hfclk_start+0x4a>
	bool already_started = false;
   19032:	2300      	movs	r3, #0
   19034:	e7ec      	b.n	19010 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   19036:	f7ff ff85 	bl	18f44 <get_hf_flags>
   1903a:	f00d f832 	bl	260a2 <set_on_state>
			already_started = true;
   1903e:	2301      	movs	r3, #1
   19040:	e7e6      	b.n	19010 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   19042:	2100      	movs	r1, #0
   19044:	4802      	ldr	r0, [pc, #8]	; (19050 <generic_hfclk_start+0x64>)
   19046:	f00d f83f 	bl	260c8 <clkstarted_handle>
		return;
   1904a:	e7e8      	b.n	1901e <generic_hfclk_start+0x32>
   1904c:	20003c38 	.word	0x20003c38
   19050:	0002802c 	.word	0x0002802c

00019054 <generic_hfclk_stop>:
{
   19054:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19056:	4b0a      	ldr	r3, [pc, #40]	; (19080 <generic_hfclk_stop+0x2c>)
   19058:	f3bf 8f5b 	dmb	ish
   1905c:	e853 2f00 	ldrex	r2, [r3]
   19060:	f022 0102 	bic.w	r1, r2, #2
   19064:	e843 1000 	strex	r0, r1, [r3]
   19068:	2800      	cmp	r0, #0
   1906a:	d1f7      	bne.n	1905c <generic_hfclk_stop+0x8>
   1906c:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   19070:	f012 0f01 	tst.w	r2, #1
   19074:	d000      	beq.n	19078 <generic_hfclk_stop+0x24>
}
   19076:	bd08      	pop	{r3, pc}
	hfclk_stop();
   19078:	f00d f888 	bl	2618c <hfclk_stop>
   1907c:	e7fb      	b.n	19076 <generic_hfclk_stop+0x22>
   1907e:	bf00      	nop
   19080:	20003c38 	.word	0x20003c38

00019084 <api_blocking_start>:
{
   19084:	b500      	push	{lr}
   19086:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   19088:	f8cd d000 	str.w	sp, [sp]
   1908c:	f8cd d004 	str.w	sp, [sp, #4]
   19090:	2300      	movs	r3, #0
   19092:	9302      	str	r3, [sp, #8]
   19094:	2301      	movs	r3, #1
   19096:	9303      	str	r3, [sp, #12]
   19098:	ab04      	add	r3, sp, #16
   1909a:	9304      	str	r3, [sp, #16]
   1909c:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1909e:	466b      	mov	r3, sp
   190a0:	4a06      	ldr	r2, [pc, #24]	; (190bc <api_blocking_start+0x38>)
   190a2:	f00d f859 	bl	26158 <api_start>
	if (err < 0) {
   190a6:	2800      	cmp	r0, #0
   190a8:	db05      	blt.n	190b6 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   190aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   190ae:	2300      	movs	r3, #0
   190b0:	4668      	mov	r0, sp
   190b2:	f004 f90f 	bl	1d2d4 <z_impl_k_sem_take>
}
   190b6:	b007      	add	sp, #28
   190b8:	f85d fb04 	ldr.w	pc, [sp], #4
   190bc:	000261a1 	.word	0x000261a1

000190c0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   190c0:	b570      	push	{r4, r5, r6, lr}
   190c2:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   190c4:	2200      	movs	r2, #0
   190c6:	2101      	movs	r1, #1
   190c8:	4610      	mov	r0, r2
   190ca:	f7fa fe9d 	bl	13e08 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   190ce:	2000      	movs	r0, #0
   190d0:	f7fa fe68 	bl	13da4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   190d4:	4811      	ldr	r0, [pc, #68]	; (1911c <clk_init+0x5c>)
   190d6:	f001 fb2d 	bl	1a734 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   190da:	4b11      	ldr	r3, [pc, #68]	; (19120 <clk_init+0x60>)
   190dc:	4298      	cmp	r0, r3
   190de:	d11a      	bne.n	19116 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   190e0:	f00e f82b 	bl	2713a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   190e4:	2400      	movs	r4, #0
   190e6:	e003      	b.n	190f0 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   190e8:	2301      	movs	r3, #1
   190ea:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   190ec:	441c      	add	r4, r3
   190ee:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   190f0:	2c01      	cmp	r4, #1
   190f2:	d80e      	bhi.n	19112 <clk_init+0x52>
						get_sub_data(dev, i);
   190f4:	4621      	mov	r1, r4
   190f6:	4630      	mov	r0, r6
   190f8:	f00c ff81 	bl	25ffe <get_sub_data>
   190fc:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   190fe:	4621      	mov	r1, r4
   19100:	4630      	mov	r0, r6
   19102:	f00c ff87 	bl	26014 <get_onoff_manager>
   19106:	4907      	ldr	r1, [pc, #28]	; (19124 <clk_init+0x64>)
   19108:	f008 f8f1 	bl	212ee <onoff_manager_init>
		if (err < 0) {
   1910c:	2800      	cmp	r0, #0
   1910e:	daeb      	bge.n	190e8 <clk_init+0x28>
   19110:	e000      	b.n	19114 <clk_init+0x54>
	}

	return 0;
   19112:	2000      	movs	r0, #0
}
   19114:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   19116:	f06f 0004 	mvn.w	r0, #4
   1911a:	e7fb      	b.n	19114 <clk_init+0x54>
   1911c:	00018fb9 	.word	0x00018fb9
   19120:	0bad0000 	.word	0x0bad0000
   19124:	00028d3c 	.word	0x00028d3c

00019128 <lfclk_spinwait>:
{
   19128:	b570      	push	{r4, r5, r6, lr}
   1912a:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1912c:	2801      	cmp	r0, #1
   1912e:	d107      	bne.n	19140 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   19130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19134:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   19138:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1913c:	2b01      	cmp	r3, #1
   1913e:	d058      	beq.n	191f2 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19140:	f00e f9b8 	bl	274b4 <k_is_in_isr>
   19144:	b928      	cbnz	r0, 19152 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   19146:	4b2e      	ldr	r3, [pc, #184]	; (19200 <lfclk_spinwait+0xd8>)
   19148:	781b      	ldrb	r3, [r3, #0]
   1914a:	2b00      	cmp	r3, #0
   1914c:	d041      	beq.n	191d2 <lfclk_spinwait+0xaa>
   1914e:	2300      	movs	r3, #0
   19150:	e000      	b.n	19154 <lfclk_spinwait+0x2c>
   19152:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   19154:	461c      	mov	r4, r3
   19156:	2b00      	cmp	r3, #0
   19158:	d03d      	beq.n	191d6 <lfclk_spinwait+0xae>
	__asm__ volatile(
   1915a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1915e:	f3ef 8611 	mrs	r6, BASEPRI
   19162:	f383 8812 	msr	BASEPRI_MAX, r3
   19166:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   1916a:	b924      	cbnz	r4, 19176 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   1916c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19170:	2202      	movs	r2, #2
   19172:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1917a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1917e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19182:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   19186:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   1918a:	d12b      	bne.n	191e4 <lfclk_spinwait+0xbc>
    return false;
   1918c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1918e:	b11a      	cbz	r2, 19198 <lfclk_spinwait+0x70>
   19190:	2b01      	cmp	r3, #1
   19192:	d029      	beq.n	191e8 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   19194:	2d01      	cmp	r5, #1
   19196:	d027      	beq.n	191e8 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   19198:	b1fc      	cbz	r4, 191da <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1919a:	4630      	mov	r0, r6
   1919c:	f7fa fdf8 	bl	13d90 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   191a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   191a4:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   191a8:	2b00      	cmp	r3, #0
   191aa:	d1e4      	bne.n	19176 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   191ac:	4b15      	ldr	r3, [pc, #84]	; (19204 <lfclk_spinwait+0xdc>)
   191ae:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   191b0:	2b00      	cmp	r3, #0
   191b2:	d0e0      	beq.n	19176 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   191b4:	4b13      	ldr	r3, [pc, #76]	; (19204 <lfclk_spinwait+0xdc>)
   191b6:	2200      	movs	r2, #0
   191b8:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   191ba:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   191bc:	2301      	movs	r3, #1
   191be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   191c2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   191c6:	4a10      	ldr	r2, [pc, #64]	; (19208 <lfclk_spinwait+0xe0>)
   191c8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   191cc:	4a0f      	ldr	r2, [pc, #60]	; (1920c <lfclk_spinwait+0xe4>)
   191ce:	6013      	str	r3, [r2, #0]
}
   191d0:	e7d1      	b.n	19176 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   191d2:	2301      	movs	r3, #1
   191d4:	e7be      	b.n	19154 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   191d6:	2600      	movs	r6, #0
   191d8:	e7c7      	b.n	1916a <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   191da:	2021      	movs	r0, #33	; 0x21
   191dc:	2100      	movs	r1, #0
   191de:	f004 fe03 	bl	1dde8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   191e2:	e7dd      	b.n	191a0 <lfclk_spinwait+0x78>
                return true;
   191e4:	2201      	movs	r2, #1
   191e6:	e7d2      	b.n	1918e <lfclk_spinwait+0x66>
	if (isr_mode) {
   191e8:	b124      	cbz	r4, 191f4 <lfclk_spinwait+0xcc>
	__asm__ volatile(
   191ea:	f386 8811 	msr	BASEPRI, r6
   191ee:	f3bf 8f6f 	isb	sy
}
   191f2:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   191f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   191f8:	2202      	movs	r2, #2
   191fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   191fe:	e7f8      	b.n	191f2 <lfclk_spinwait+0xca>
   19200:	20006a8a 	.word	0x20006a8a
   19204:	40000104 	.word	0x40000104
   19208:	e000e100 	.word	0xe000e100
   1920c:	40000008 	.word	0x40000008

00019210 <z_nrf_clock_control_get_onoff>:
{
   19210:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
   19212:	b2c1      	uxtb	r1, r0
   19214:	4801      	ldr	r0, [pc, #4]	; (1921c <z_nrf_clock_control_get_onoff+0xc>)
   19216:	f00c fefd 	bl	26014 <get_onoff_manager>
}
   1921a:	bd08      	pop	{r3, pc}
   1921c:	0002802c 	.word	0x0002802c

00019220 <z_nrf_clock_control_lf_on>:
{
   19220:	b510      	push	{r4, lr}
   19222:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19224:	4b10      	ldr	r3, [pc, #64]	; (19268 <z_nrf_clock_control_lf_on+0x48>)
   19226:	2101      	movs	r1, #1
   19228:	f3bf 8f5b 	dmb	ish
   1922c:	e853 2f00 	ldrex	r2, [r3]
   19230:	e843 1000 	strex	r0, r1, [r3]
   19234:	2800      	cmp	r0, #0
   19236:	d1f9      	bne.n	1922c <z_nrf_clock_control_lf_on+0xc>
   19238:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1923c:	b11a      	cbz	r2, 19246 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   1923e:	1e63      	subs	r3, r4, #1
   19240:	2b01      	cmp	r3, #1
   19242:	d90c      	bls.n	1925e <z_nrf_clock_control_lf_on+0x3e>
}
   19244:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   19246:	4809      	ldr	r0, [pc, #36]	; (1926c <z_nrf_clock_control_lf_on+0x4c>)
   19248:	f00c fee4 	bl	26014 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1924c:	4908      	ldr	r1, [pc, #32]	; (19270 <z_nrf_clock_control_lf_on+0x50>)
   1924e:	2300      	movs	r3, #0
   19250:	604b      	str	r3, [r1, #4]
   19252:	60cb      	str	r3, [r1, #12]
   19254:	2301      	movs	r3, #1
   19256:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   19258:	f008 f865 	bl	21326 <onoff_request>
   1925c:	e7ef      	b.n	1923e <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   1925e:	4620      	mov	r0, r4
   19260:	f7ff ff62 	bl	19128 <lfclk_spinwait>
		break;
   19264:	e7ee      	b.n	19244 <z_nrf_clock_control_lf_on+0x24>
   19266:	bf00      	nop
   19268:	20003c3c 	.word	0x20003c3c
   1926c:	0002802c 	.word	0x0002802c
   19270:	20003bd8 	.word	0x20003bd8

00019274 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   19274:	b510      	push	{r4, lr}
   19276:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   19278:	280a      	cmp	r0, #10
   1927a:	d007      	beq.n	1928c <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1927c:	4b07      	ldr	r3, [pc, #28]	; (1929c <console_out+0x28>)
   1927e:	6818      	ldr	r0, [r3, #0]
   19280:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   19282:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   19284:	685b      	ldr	r3, [r3, #4]
   19286:	4798      	blx	r3

	return c;
}
   19288:	4620      	mov	r0, r4
   1928a:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   1928c:	4b03      	ldr	r3, [pc, #12]	; (1929c <console_out+0x28>)
   1928e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   19290:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   19292:	685b      	ldr	r3, [r3, #4]
   19294:	210d      	movs	r1, #13
   19296:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   19298:	e7f0      	b.n	1927c <console_out+0x8>
   1929a:	bf00      	nop
   1929c:	20003c40 	.word	0x20003c40

000192a0 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   192a0:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   192a2:	4c04      	ldr	r4, [pc, #16]	; (192b4 <uart_console_hook_install+0x14>)
   192a4:	4620      	mov	r0, r4
   192a6:	f7fb f91f 	bl	144e8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   192aa:	4620      	mov	r0, r4
   192ac:	f7f7 fdbc 	bl	10e28 <__printk_hook_install>
}
   192b0:	bd10      	pop	{r4, pc}
   192b2:	bf00      	nop
   192b4:	00019275 	.word	0x00019275

000192b8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   192b8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   192ba:	4806      	ldr	r0, [pc, #24]	; (192d4 <uart_console_init+0x1c>)
   192bc:	4b06      	ldr	r3, [pc, #24]	; (192d8 <uart_console_init+0x20>)
   192be:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   192c0:	f00d fffe 	bl	272c0 <z_device_ready>
   192c4:	b118      	cbz	r0, 192ce <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   192c6:	f7ff ffeb 	bl	192a0 <uart_console_hook_install>

	return 0;
   192ca:	2000      	movs	r0, #0
}
   192cc:	bd08      	pop	{r3, pc}
		return -ENODEV;
   192ce:	f06f 0012 	mvn.w	r0, #18
   192d2:	e7fb      	b.n	192cc <uart_console_init+0x14>
   192d4:	00028014 	.word	0x00028014
   192d8:	20003c40 	.word	0x20003c40

000192dc <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
   192dc:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
   192de:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   192e0:	685f      	ldr	r7, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   192e2:	4b37      	ldr	r3, [pc, #220]	; (193c0 <gpio_nrfx_config+0xe4>)
   192e4:	4013      	ands	r3, r2
   192e6:	4c37      	ldr	r4, [pc, #220]	; (193c4 <gpio_nrfx_config+0xe8>)
   192e8:	42a3      	cmp	r3, r4
   192ea:	d027      	beq.n	1933c <gpio_nrfx_config+0x60>
   192ec:	d812      	bhi.n	19314 <gpio_nrfx_config+0x38>
   192ee:	2b06      	cmp	r3, #6
   192f0:	d026      	beq.n	19340 <gpio_nrfx_config+0x64>
   192f2:	d904      	bls.n	192fe <gpio_nrfx_config+0x22>
   192f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   192f8:	d109      	bne.n	1930e <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
   192fa:	2401      	movs	r4, #1
   192fc:	e016      	b.n	1932c <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   192fe:	b30b      	cbz	r3, 19344 <gpio_nrfx_config+0x68>
   19300:	2b02      	cmp	r3, #2
   19302:	d101      	bne.n	19308 <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
   19304:	2404      	movs	r4, #4
   19306:	e011      	b.n	1932c <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19308:	f06f 0015 	mvn.w	r0, #21
   1930c:	e046      	b.n	1939c <gpio_nrfx_config+0xc0>
   1930e:	f06f 0015 	mvn.w	r0, #21
   19312:	e043      	b.n	1939c <gpio_nrfx_config+0xc0>
   19314:	4c2c      	ldr	r4, [pc, #176]	; (193c8 <gpio_nrfx_config+0xec>)
   19316:	42a3      	cmp	r3, r4
   19318:	d016      	beq.n	19348 <gpio_nrfx_config+0x6c>
   1931a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1931e:	d101      	bne.n	19324 <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
   19320:	2403      	movs	r4, #3
   19322:	e003      	b.n	1932c <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   19328:	d146      	bne.n	193b8 <gpio_nrfx_config+0xdc>
		drive = NRF_GPIO_PIN_S0H1;
   1932a:	2402      	movs	r4, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
   1932c:	f012 0f10 	tst.w	r2, #16
   19330:	d10c      	bne.n	1934c <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
   19332:	f012 0f20 	tst.w	r2, #32
   19336:	d033      	beq.n	193a0 <gpio_nrfx_config+0xc4>
		pull = NRF_GPIO_PIN_PULLDOWN;
   19338:	2501      	movs	r5, #1
   1933a:	e008      	b.n	1934e <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
   1933c:	2407      	movs	r4, #7
   1933e:	e7f5      	b.n	1932c <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
   19340:	2406      	movs	r4, #6
   19342:	e7f3      	b.n	1932c <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19344:	2400      	movs	r4, #0
   19346:	e7f1      	b.n	1932c <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
   19348:	2405      	movs	r4, #5
   1934a:	e7ef      	b.n	1932c <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
   1934c:	2503      	movs	r5, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
   1934e:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   19352:	f412 7f80 	tst.w	r2, #256	; 0x100
   19356:	bf0c      	ite	eq
   19358:	2601      	moveq	r6, #1
   1935a:	2600      	movne	r6, #0

	if ((flags & GPIO_OUTPUT) != 0) {
   1935c:	f412 7f00 	tst.w	r2, #512	; 0x200
   19360:	d006      	beq.n	19370 <gpio_nrfx_config+0x94>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   19362:	f412 6f00 	tst.w	r2, #2048	; 0x800
   19366:	d01d      	beq.n	193a4 <gpio_nrfx_config+0xc8>
			nrf_gpio_port_out_set(reg, BIT(pin));
   19368:	2201      	movs	r2, #1
   1936a:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1936c:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	return port->config;
   19370:	6842      	ldr	r2, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   19372:	7a12      	ldrb	r2, [r2, #8]
   19374:	f001 011f 	and.w	r1, r1, #31
   19378:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1937c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1937e:	2a01      	cmp	r2, #1
   19380:	d018      	beq.n	193b4 <gpio_nrfx_config+0xd8>
        case 0: return NRF_P0;
   19382:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   19386:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   1938a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1938e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   19392:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   19396:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
   1939a:	2000      	movs	r0, #0
}
   1939c:	bcf0      	pop	{r4, r5, r6, r7}
   1939e:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
   193a0:	2500      	movs	r5, #0
   193a2:	e7d4      	b.n	1934e <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   193a4:	f412 6f80 	tst.w	r2, #1024	; 0x400
   193a8:	d0e2      	beq.n	19370 <gpio_nrfx_config+0x94>
			nrf_gpio_port_out_clear(reg, BIT(pin));
   193aa:	2201      	movs	r2, #1
   193ac:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   193ae:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
}
   193b2:	e7dd      	b.n	19370 <gpio_nrfx_config+0x94>
        case 1: return NRF_P1;
   193b4:	4a05      	ldr	r2, [pc, #20]	; (193cc <gpio_nrfx_config+0xf0>)
   193b6:	e7e6      	b.n	19386 <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   193b8:	f06f 0015 	mvn.w	r0, #21
   193bc:	e7ee      	b.n	1939c <gpio_nrfx_config+0xc0>
   193be:	bf00      	nop
   193c0:	00f00006 	.word	0x00f00006
   193c4:	00100006 	.word	0x00100006
   193c8:	00400002 	.word	0x00400002
   193cc:	50000300 	.word	0x50000300

000193d0 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
   193d0:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
   193d2:	6905      	ldr	r5, [r0, #16]
	return port->config;
   193d4:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
   193d6:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   193d8:	696a      	ldr	r2, [r5, #20]
   193da:	69ab      	ldr	r3, [r5, #24]
   193dc:	4313      	orrs	r3, r2
   193de:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
   193e2:	2301      	movs	r3, #1
	uint32_t pin = 0U;
   193e4:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
   193e6:	e011      	b.n	1940c <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
   193e8:	f04f 0c02 	mov.w	ip, #2
   193ec:	e01d      	b.n	1942a <cfg_level_pins+0x5a>
   193ee:	4f14      	ldr	r7, [pc, #80]	; (19440 <cfg_level_pins+0x70>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   193f0:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   193f4:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   193f8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   193fc:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
   19400:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
   19404:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
   19408:	3001      	adds	r0, #1
		bit <<= 1;
   1940a:	005b      	lsls	r3, r3, #1
	while (level_pins) {
   1940c:	b1a9      	cbz	r1, 1943a <cfg_level_pins+0x6a>
		if (level_pins & bit) {
   1940e:	420b      	tst	r3, r1
   19410:	d0fa      	beq.n	19408 <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   19412:	7a34      	ldrb	r4, [r6, #8]
   19414:	f000 021f 	and.w	r2, r0, #31
   19418:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1941c:	692c      	ldr	r4, [r5, #16]
   1941e:	40c4      	lsrs	r4, r0
   19420:	f014 0f01 	tst.w	r4, #1
   19424:	d1e0      	bne.n	193e8 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
   19426:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
   1942a:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
   1942e:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19430:	2a01      	cmp	r2, #1
   19432:	d0dc      	beq.n	193ee <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
   19434:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
   19438:	e7da      	b.n	193f0 <cfg_level_pins+0x20>
	}
}
   1943a:	bcf0      	pop	{r4, r5, r6, r7}
   1943c:	4770      	bx	lr
   1943e:	bf00      	nop
   19440:	50000300 	.word	0x50000300

00019444 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
   19444:	b5f0      	push	{r4, r5, r6, r7, lr}
   19446:	468c      	mov	ip, r1
	return port->data;
   19448:	6903      	ldr	r3, [r0, #16]
	return port->config;
   1944a:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
   1944c:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1944e:	695a      	ldr	r2, [r3, #20]
   19450:	6998      	ldr	r0, [r3, #24]
   19452:	4302      	orrs	r2, r0
   19454:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   19458:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
   1945a:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1945e:	6918      	ldr	r0, [r3, #16]
   19460:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
   19462:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
   19466:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
   19468:	2301      	movs	r3, #1
	uint32_t pin = 0U;
   1946a:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
   1946c:	e015      	b.n	1949a <check_level_trigger_pins+0x56>
        case 1: return NRF_P1;
   1946e:	f8df e074 	ldr.w	lr, [pc, #116]	; 194e4 <check_level_trigger_pins+0xa0>
   19472:	e025      	b.n	194c0 <check_level_trigger_pins+0x7c>
    *p_pin = pin_number & 0x1F;
   19474:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
   19478:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1947a:	2a01      	cmp	r2, #1
   1947c:	d02e      	beq.n	194dc <check_level_trigger_pins+0x98>
        case 0: return NRF_P0;
   1947e:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   19482:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
   19486:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
   1948a:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1948e:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
   19492:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
   19496:	3501      	adds	r5, #1
		bit <<= 1;
   19498:	005b      	lsls	r3, r3, #1
	while (check_pins) {
   1949a:	b314      	cbz	r4, 194e2 <check_level_trigger_pins+0x9e>
		if (check_pins & bit) {
   1949c:	4223      	tst	r3, r4
   1949e:	d0fa      	beq.n	19496 <check_level_trigger_pins+0x52>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   194a0:	7a0e      	ldrb	r6, [r1, #8]
   194a2:	f005 021f 	and.w	r2, r5, #31
   194a6:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
   194aa:	423b      	tst	r3, r7
   194ac:	d1e2      	bne.n	19474 <check_level_trigger_pins+0x30>
    *p_pin = pin_number & 0x1F;
   194ae:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
   194b2:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   194b6:	f1be 0f01 	cmp.w	lr, #1
   194ba:	d0d8      	beq.n	1946e <check_level_trigger_pins+0x2a>
        case 0: return NRF_P0;
   194bc:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   194c0:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   194c4:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   194c8:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
   194cc:	2e02      	cmp	r6, #2
   194ce:	d1d1      	bne.n	19474 <check_level_trigger_pins+0x30>
					*sense_levels |= bit;
   194d0:	f8dc 6000 	ldr.w	r6, [ip]
   194d4:	431e      	orrs	r6, r3
   194d6:	f8cc 6000 	str.w	r6, [ip]
   194da:	e7cb      	b.n	19474 <check_level_trigger_pins+0x30>
        case 1: return NRF_P1;
   194dc:	f8df e004 	ldr.w	lr, [pc, #4]	; 194e4 <check_level_trigger_pins+0xa0>
   194e0:	e7cf      	b.n	19482 <check_level_trigger_pins+0x3e>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
   194e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   194e4:	50000300 	.word	0x50000300

000194e8 <gpiote_pin_cleanup>:
{
   194e8:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   194ea:	4b14      	ldr	r3, [pc, #80]	; (1953c <gpiote_pin_cleanup+0x54>)
   194ec:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   194f0:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   194f2:	2300      	movs	r3, #0
   194f4:	e000      	b.n	194f8 <gpiote_pin_cleanup+0x10>
   194f6:	3301      	adds	r3, #1
   194f8:	2b07      	cmp	r3, #7
   194fa:	d81d      	bhi.n	19538 <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   194fc:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   19500:	490e      	ldr	r1, [pc, #56]	; (1953c <gpiote_pin_cleanup+0x54>)
   19502:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   19506:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1950a:	4290      	cmp	r0, r2
   1950c:	d1f3      	bne.n	194f6 <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
   1950e:	fa24 f203 	lsr.w	r2, r4, r3
   19512:	f012 0f01 	tst.w	r2, #1
   19516:	d0ee      	beq.n	194f6 <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   19518:	460a      	mov	r2, r1
   1951a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1951e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   19522:	f021 0101 	bic.w	r1, r1, #1
   19526:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1952a:	2101      	movs	r1, #1
   1952c:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
   1952e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   19532:	b2d8      	uxtb	r0, r3
   19534:	f001 fab2 	bl	1aa9c <nrfx_gpiote_channel_free>
}
   19538:	bd10      	pop	{r4, pc}
   1953a:	bf00      	nop
   1953c:	40006000 	.word	0x40006000

00019540 <gpiote_channel_alloc>:
{
   19540:	b570      	push	{r4, r5, r6, lr}
   19542:	b082      	sub	sp, #8
   19544:	4604      	mov	r4, r0
   19546:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   19548:	f10d 0007 	add.w	r0, sp, #7
   1954c:	f001 fac2 	bl	1aad4 <nrfx_gpiote_channel_alloc>
   19550:	4b1c      	ldr	r3, [pc, #112]	; (195c4 <gpiote_channel_alloc+0x84>)
   19552:	4298      	cmp	r0, r3
   19554:	d132      	bne.n	195bc <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   19556:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1955a:	f103 0240 	add.w	r2, r3, #64	; 0x40
   1955e:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   19560:	4e19      	ldr	r6, [pc, #100]	; (195c8 <gpiote_channel_alloc+0x88>)
   19562:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   19566:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   1956a:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   1956e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   19572:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19576:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   1957a:	0224      	lsls	r4, r4, #8
   1957c:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   19580:	042d      	lsls	r5, r5, #16
   19582:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19586:	432c      	orrs	r4, r5
   19588:	430c      	orrs	r4, r1
   1958a:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
   1958e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   19592:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19596:	2000      	movs	r0, #0
   19598:	6018      	str	r0, [r3, #0]
   1959a:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   1959c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   195a0:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   195a4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   195a8:	f042 0201 	orr.w	r2, r2, #1
   195ac:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   195b0:	2301      	movs	r3, #1
   195b2:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
   195b4:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
   195b8:	b002      	add	sp, #8
   195ba:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   195bc:	f06f 0012 	mvn.w	r0, #18
   195c0:	e7fa      	b.n	195b8 <gpiote_channel_alloc+0x78>
   195c2:	bf00      	nop
   195c4:	0bad0000 	.word	0x0bad0000
   195c8:	40006000 	.word	0x40006000

000195cc <gpiote_pin_int_cfg>:
{
   195cc:	b570      	push	{r4, r5, r6, lr}
   195ce:	460d      	mov	r5, r1
	return port->data;
   195d0:	6906      	ldr	r6, [r0, #16]
	return port->config;
   195d2:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   195d4:	7a1b      	ldrb	r3, [r3, #8]
   195d6:	f001 041f 	and.w	r4, r1, #31
   195da:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
   195de:	4620      	mov	r0, r4
   195e0:	f7ff ff82 	bl	194e8 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
   195e4:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
   195e8:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   195ea:	2b01      	cmp	r3, #1
   195ec:	d020      	beq.n	19630 <gpiote_pin_int_cfg+0x64>
        case 0: return NRF_P0;
   195ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   195f2:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
   195f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   195fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   195fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
   19602:	68f3      	ldr	r3, [r6, #12]
   19604:	40eb      	lsrs	r3, r5
   19606:	f013 0f01 	tst.w	r3, #1
   1960a:	d02f      	beq.n	1966c <gpiote_pin_int_cfg+0xa0>
		if (data->trig_edge & BIT(pin)) {
   1960c:	6973      	ldr	r3, [r6, #20]
   1960e:	40eb      	lsrs	r3, r5
   19610:	f013 0f01 	tst.w	r3, #1
   19614:	d015      	beq.n	19642 <gpiote_pin_int_cfg+0x76>
				if (data->double_edge & BIT(pin)) {
   19616:	69b3      	ldr	r3, [r6, #24]
   19618:	40eb      	lsrs	r3, r5
   1961a:	f013 0f01 	tst.w	r3, #1
   1961e:	d109      	bne.n	19634 <gpiote_pin_int_cfg+0x68>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   19620:	6931      	ldr	r1, [r6, #16]
   19622:	fa21 f505 	lsr.w	r5, r1, r5
   19626:	f015 0f01 	tst.w	r5, #1
   1962a:	d008      	beq.n	1963e <gpiote_pin_int_cfg+0x72>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
   1962c:	2101      	movs	r1, #1
   1962e:	e002      	b.n	19636 <gpiote_pin_int_cfg+0x6a>
        case 1: return NRF_P1;
   19630:	4a0f      	ldr	r2, [pc, #60]	; (19670 <gpiote_pin_int_cfg+0xa4>)
   19632:	e7de      	b.n	195f2 <gpiote_pin_int_cfg+0x26>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   19634:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
   19636:	4620      	mov	r0, r4
   19638:	f7ff ff82 	bl	19540 <gpiote_channel_alloc>
   1963c:	e017      	b.n	1966e <gpiote_pin_int_cfg+0xa2>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
   1963e:	2102      	movs	r1, #2
   19640:	e7f9      	b.n	19636 <gpiote_pin_int_cfg+0x6a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   19642:	6931      	ldr	r1, [r6, #16]
   19644:	fa21 f505 	lsr.w	r5, r1, r5
   19648:	f015 0f01 	tst.w	r5, #1
   1964c:	d10c      	bne.n	19668 <gpiote_pin_int_cfg+0x9c>
	return NRF_GPIO_PIN_SENSE_LOW;
   1964e:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   19650:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   19654:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   19658:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1965c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   19660:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
   19664:	2000      	movs	r0, #0
}
   19666:	e002      	b.n	1966e <gpiote_pin_int_cfg+0xa2>
		return NRF_GPIO_PIN_SENSE_HIGH;
   19668:	2102      	movs	r1, #2
   1966a:	e7f1      	b.n	19650 <gpiote_pin_int_cfg+0x84>
	int res = 0;
   1966c:	2000      	movs	r0, #0
}
   1966e:	bd70      	pop	{r4, r5, r6, pc}
   19670:	50000300 	.word	0x50000300

00019674 <gpio_nrfx_pin_interrupt_configure>:
{
   19674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
   19676:	6904      	ldr	r4, [r0, #16]
	return port->config;
   19678:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1967a:	7a2e      	ldrb	r6, [r5, #8]
   1967c:	f001 051f 	and.w	r5, r1, #31
   19680:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   19684:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   19688:	d025      	beq.n	196d6 <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1968a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1968e:	d035      	beq.n	196fc <gpio_nrfx_pin_interrupt_configure+0x88>
   19690:	68e5      	ldr	r5, [r4, #12]
   19692:	2601      	movs	r6, #1
   19694:	408e      	lsls	r6, r1
   19696:	4335      	orrs	r5, r6
   19698:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1969a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1969e:	d033      	beq.n	19708 <gpio_nrfx_pin_interrupt_configure+0x94>
   196a0:	6962      	ldr	r2, [r4, #20]
   196a2:	2501      	movs	r5, #1
   196a4:	408d      	lsls	r5, r1
   196a6:	ea22 0205 	bic.w	r2, r2, r5
   196aa:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   196ac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   196b0:	d02f      	beq.n	19712 <gpio_nrfx_pin_interrupt_configure+0x9e>
   196b2:	69a2      	ldr	r2, [r4, #24]
   196b4:	2501      	movs	r5, #1
   196b6:	408d      	lsls	r5, r1
   196b8:	ea22 0205 	bic.w	r2, r2, r5
   196bc:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   196be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   196c2:	d02b      	beq.n	1971c <gpio_nrfx_pin_interrupt_configure+0xa8>
   196c4:	6923      	ldr	r3, [r4, #16]
   196c6:	2201      	movs	r2, #1
   196c8:	408a      	lsls	r2, r1
   196ca:	ea23 0302 	bic.w	r3, r3, r2
   196ce:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
   196d0:	f7ff ff7c 	bl	195cc <gpiote_pin_int_cfg>
}
   196d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
   196d6:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
   196da:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   196dc:	2d01      	cmp	r5, #1
   196de:	d00b      	beq.n	196f8 <gpio_nrfx_pin_interrupt_configure+0x84>
        case 0: return NRF_P0;
   196e0:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   196e4:	f506 75e0 	add.w	r5, r6, #448	; 0x1c0
   196e8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   196ec:	f015 0f01 	tst.w	r5, #1
   196f0:	d0cb      	beq.n	1968a <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
   196f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   196f6:	e7ed      	b.n	196d4 <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
   196f8:	4f0b      	ldr	r7, [pc, #44]	; (19728 <gpio_nrfx_pin_interrupt_configure+0xb4>)
   196fa:	e7f3      	b.n	196e4 <gpio_nrfx_pin_interrupt_configure+0x70>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   196fc:	68e5      	ldr	r5, [r4, #12]
   196fe:	2601      	movs	r6, #1
   19700:	408e      	lsls	r6, r1
   19702:	ea25 0506 	bic.w	r5, r5, r6
   19706:	e7c7      	b.n	19698 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   19708:	6962      	ldr	r2, [r4, #20]
   1970a:	2501      	movs	r5, #1
   1970c:	408d      	lsls	r5, r1
   1970e:	432a      	orrs	r2, r5
   19710:	e7cb      	b.n	196aa <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   19712:	69a2      	ldr	r2, [r4, #24]
   19714:	2501      	movs	r5, #1
   19716:	408d      	lsls	r5, r1
   19718:	432a      	orrs	r2, r5
   1971a:	e7cf      	b.n	196bc <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1971c:	6923      	ldr	r3, [r4, #16]
   1971e:	2201      	movs	r2, #1
   19720:	408a      	lsls	r2, r1
   19722:	4313      	orrs	r3, r2
   19724:	e7d3      	b.n	196ce <gpio_nrfx_pin_interrupt_configure+0x5a>
   19726:	bf00      	nop
   19728:	50000300 	.word	0x50000300

0001972c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1972c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1972e:	4b0b      	ldr	r3, [pc, #44]	; (1975c <gpio_nrfx_init+0x30>)
   19730:	781b      	ldrb	r3, [r3, #0]
   19732:	b10b      	cbz	r3, 19738 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   19734:	2000      	movs	r0, #0
   19736:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
   19738:	4b08      	ldr	r3, [pc, #32]	; (1975c <gpio_nrfx_init+0x30>)
   1973a:	2201      	movs	r2, #1
   1973c:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1973e:	2200      	movs	r2, #0
   19740:	2105      	movs	r1, #5
   19742:	2006      	movs	r0, #6
   19744:	f7fa fb60 	bl	13e08 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
   19748:	2006      	movs	r0, #6
   1974a:	f7fa fb2b 	bl	13da4 <arch_irq_enable>
   1974e:	4b04      	ldr	r3, [pc, #16]	; (19760 <gpio_nrfx_init+0x34>)
   19750:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19754:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   19758:	e7ec      	b.n	19734 <gpio_nrfx_init+0x8>
   1975a:	bf00      	nop
   1975c:	20006a84 	.word	0x20006a84
   19760:	40006000 	.word	0x40006000

00019764 <gpiote_event_handler>:
{
   19764:	b570      	push	{r4, r5, r6, lr}
   19766:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   19768:	2300      	movs	r3, #0
   1976a:	9302      	str	r3, [sp, #8]
   1976c:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   1976e:	9300      	str	r3, [sp, #0]
   19770:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19772:	4b46      	ldr	r3, [pc, #280]	; (1988c <gpiote_event_handler+0x128>)
   19774:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
   19776:	b90c      	cbnz	r4, 1977c <gpiote_event_handler+0x18>
{
   19778:	2100      	movs	r1, #0
   1977a:	e011      	b.n	197a0 <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   1977c:	4d44      	ldr	r5, [pc, #272]	; (19890 <gpiote_event_handler+0x12c>)
   1977e:	4669      	mov	r1, sp
   19780:	4628      	mov	r0, r5
   19782:	f7ff fe5f 	bl	19444 <check_level_trigger_pins>
		fired_triggers[0] =
   19786:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   19788:	a901      	add	r1, sp, #4
   1978a:	f105 0018 	add.w	r0, r5, #24
   1978e:	f7ff fe59 	bl	19444 <check_level_trigger_pins>
		fired_triggers[1] =
   19792:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19794:	4b3d      	ldr	r3, [pc, #244]	; (1988c <gpiote_event_handler+0x128>)
   19796:	2200      	movs	r2, #0
   19798:	601a      	str	r2, [r3, #0]
   1979a:	681b      	ldr	r3, [r3, #0]
}
   1979c:	e7ec      	b.n	19778 <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1979e:	3101      	adds	r1, #1
   197a0:	2907      	cmp	r1, #7
   197a2:	d82d      	bhi.n	19800 <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
   197a4:	f101 0340 	add.w	r3, r1, #64	; 0x40
   197a8:	009b      	lsls	r3, r3, #2
   197aa:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   197ac:	2301      	movs	r3, #1
   197ae:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
   197b0:	4838      	ldr	r0, [pc, #224]	; (19894 <gpiote_event_handler+0x130>)
   197b2:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
   197b6:	4203      	tst	r3, r0
   197b8:	d0f1      	beq.n	1979e <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   197ba:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   197be:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   197c2:	681b      	ldr	r3, [r3, #0]
   197c4:	2b00      	cmp	r3, #0
   197c6:	d0ea      	beq.n	1979e <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   197c8:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   197cc:	4831      	ldr	r0, [pc, #196]	; (19894 <gpiote_event_handler+0x130>)
   197ce:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   197d2:	f3c0 3340 	ubfx	r3, r0, #13, #1
   197d6:	f3c0 2004 	ubfx	r0, r0, #8, #5
   197da:	2501      	movs	r5, #1
   197dc:	fa05 f000 	lsl.w	r0, r5, r0
   197e0:	ad04      	add	r5, sp, #16
   197e2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   197e6:	f853 5c08 	ldr.w	r5, [r3, #-8]
   197ea:	4305      	orrs	r5, r0
   197ec:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
   197f0:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   197f4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   197f8:	2200      	movs	r2, #0
   197fa:	601a      	str	r2, [r3, #0]
   197fc:	681b      	ldr	r3, [r3, #0]
}
   197fe:	e7ce      	b.n	1979e <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
   19800:	9e02      	ldr	r6, [sp, #8]
   19802:	b92e      	cbnz	r6, 19810 <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
   19804:	9e03      	ldr	r6, [sp, #12]
   19806:	b9ee      	cbnz	r6, 19844 <gpiote_event_handler+0xe0>
	if (port_event) {
   19808:	2c00      	cmp	r4, #0
   1980a:	d135      	bne.n	19878 <gpiote_event_handler+0x114>
}
   1980c:	b004      	add	sp, #16
   1980e:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   19810:	4b21      	ldr	r3, [pc, #132]	; (19898 <gpiote_event_handler+0x134>)
   19812:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19814:	b119      	cbz	r1, 1981e <gpiote_event_handler+0xba>
   19816:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   19818:	b149      	cbz	r1, 1982e <gpiote_event_handler+0xca>
	return node->next;
   1981a:	680d      	ldr	r5, [r1, #0]
   1981c:	e007      	b.n	1982e <gpiote_event_handler+0xca>
   1981e:	460d      	mov	r5, r1
   19820:	e005      	b.n	1982e <gpiote_event_handler+0xca>
   19822:	b16d      	cbz	r5, 19840 <gpiote_event_handler+0xdc>
   19824:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   19826:	b105      	cbz	r5, 1982a <gpiote_event_handler+0xc6>
	return node->next;
   19828:	682b      	ldr	r3, [r5, #0]
   1982a:	4629      	mov	r1, r5
   1982c:	461d      	mov	r5, r3
   1982e:	2900      	cmp	r1, #0
   19830:	d0e8      	beq.n	19804 <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
   19832:	688a      	ldr	r2, [r1, #8]
   19834:	4032      	ands	r2, r6
   19836:	d0f4      	beq.n	19822 <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   19838:	684b      	ldr	r3, [r1, #4]
   1983a:	4815      	ldr	r0, [pc, #84]	; (19890 <gpiote_event_handler+0x12c>)
   1983c:	4798      	blx	r3
   1983e:	e7f0      	b.n	19822 <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19840:	462b      	mov	r3, r5
   19842:	e7f2      	b.n	1982a <gpiote_event_handler+0xc6>
	return list->head;
   19844:	4b15      	ldr	r3, [pc, #84]	; (1989c <gpiote_event_handler+0x138>)
   19846:	6859      	ldr	r1, [r3, #4]
   19848:	b119      	cbz	r1, 19852 <gpiote_event_handler+0xee>
   1984a:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1984c:	b149      	cbz	r1, 19862 <gpiote_event_handler+0xfe>
	return node->next;
   1984e:	680d      	ldr	r5, [r1, #0]
   19850:	e007      	b.n	19862 <gpiote_event_handler+0xfe>
   19852:	460d      	mov	r5, r1
   19854:	e005      	b.n	19862 <gpiote_event_handler+0xfe>
   19856:	b16d      	cbz	r5, 19874 <gpiote_event_handler+0x110>
   19858:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   1985a:	b105      	cbz	r5, 1985e <gpiote_event_handler+0xfa>
	return node->next;
   1985c:	682b      	ldr	r3, [r5, #0]
   1985e:	4629      	mov	r1, r5
   19860:	461d      	mov	r5, r3
   19862:	2900      	cmp	r1, #0
   19864:	d0d0      	beq.n	19808 <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
   19866:	688a      	ldr	r2, [r1, #8]
   19868:	4032      	ands	r2, r6
   1986a:	d0f4      	beq.n	19856 <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
   1986c:	684b      	ldr	r3, [r1, #4]
   1986e:	480c      	ldr	r0, [pc, #48]	; (198a0 <gpiote_event_handler+0x13c>)
   19870:	4798      	blx	r3
   19872:	e7f0      	b.n	19856 <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19874:	462b      	mov	r3, r5
   19876:	e7f2      	b.n	1985e <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   19878:	4c05      	ldr	r4, [pc, #20]	; (19890 <gpiote_event_handler+0x12c>)
   1987a:	4620      	mov	r0, r4
   1987c:	f7ff fda8 	bl	193d0 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   19880:	f104 0018 	add.w	r0, r4, #24
   19884:	f7ff fda4 	bl	193d0 <cfg_level_pins>
}
   19888:	e7c0      	b.n	1980c <gpiote_event_handler+0xa8>
   1988a:	bf00      	nop
   1988c:	4000617c 	.word	0x4000617c
   19890:	000280a4 	.word	0x000280a4
   19894:	40006000 	.word	0x40006000
   19898:	20003c44 	.word	0x20003c44
   1989c:	20003c60 	.word	0x20003c60
   198a0:	000280bc 	.word	0x000280bc

000198a4 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   198a4:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
   198a6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   198a8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   198ac:	d06f      	beq.n	1998e <baudrate_set+0xea>
   198ae:	d83a      	bhi.n	19926 <baudrate_set+0x82>
   198b0:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   198b4:	d06e      	beq.n	19994 <baudrate_set+0xf0>
   198b6:	d90a      	bls.n	198ce <baudrate_set+0x2a>
   198b8:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   198bc:	d075      	beq.n	199aa <baudrate_set+0x106>
   198be:	d924      	bls.n	1990a <baudrate_set+0x66>
   198c0:	f647 2312 	movw	r3, #31250	; 0x7a12
   198c4:	4299      	cmp	r1, r3
   198c6:	d12b      	bne.n	19920 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   198c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   198cc:	e013      	b.n	198f6 <baudrate_set+0x52>
	switch (baudrate) {
   198ce:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   198d2:	d061      	beq.n	19998 <baudrate_set+0xf4>
   198d4:	d907      	bls.n	198e6 <baudrate_set+0x42>
   198d6:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   198da:	d063      	beq.n	199a4 <baudrate_set+0x100>
   198dc:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   198e0:	d110      	bne.n	19904 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   198e2:	4b3c      	ldr	r3, [pc, #240]	; (199d4 <baudrate_set+0x130>)
   198e4:	e007      	b.n	198f6 <baudrate_set+0x52>
	switch (baudrate) {
   198e6:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   198ea:	d058      	beq.n	1999e <baudrate_set+0xfa>
   198ec:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   198f0:	d105      	bne.n	198fe <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   198f2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   198f6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   198fa:	2000      	movs	r0, #0
   198fc:	4770      	bx	lr
	switch (baudrate) {
   198fe:	f06f 0015 	mvn.w	r0, #21
   19902:	4770      	bx	lr
   19904:	f06f 0015 	mvn.w	r0, #21
   19908:	4770      	bx	lr
   1990a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   1990e:	d04e      	beq.n	199ae <baudrate_set+0x10a>
   19910:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   19914:	d101      	bne.n	1991a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   19916:	4b30      	ldr	r3, [pc, #192]	; (199d8 <baudrate_set+0x134>)
   19918:	e7ed      	b.n	198f6 <baudrate_set+0x52>
	switch (baudrate) {
   1991a:	f06f 0015 	mvn.w	r0, #21
   1991e:	4770      	bx	lr
   19920:	f06f 0015 	mvn.w	r0, #21
   19924:	4770      	bx	lr
   19926:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   1992a:	d042      	beq.n	199b2 <baudrate_set+0x10e>
   1992c:	d909      	bls.n	19942 <baudrate_set+0x9e>
   1992e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   19932:	d046      	beq.n	199c2 <baudrate_set+0x11e>
   19934:	d91f      	bls.n	19976 <baudrate_set+0xd2>
   19936:	4b29      	ldr	r3, [pc, #164]	; (199dc <baudrate_set+0x138>)
   19938:	4299      	cmp	r1, r3
   1993a:	d148      	bne.n	199ce <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1993c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19940:	e7d9      	b.n	198f6 <baudrate_set+0x52>
	switch (baudrate) {
   19942:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   19946:	d037      	beq.n	199b8 <baudrate_set+0x114>
   19948:	d905      	bls.n	19956 <baudrate_set+0xb2>
   1994a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   1994e:	d10f      	bne.n	19970 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   19950:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   19954:	e7cf      	b.n	198f6 <baudrate_set+0x52>
	switch (baudrate) {
   19956:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   1995a:	4299      	cmp	r1, r3
   1995c:	d02e      	beq.n	199bc <baudrate_set+0x118>
   1995e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   19962:	d102      	bne.n	1996a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   19964:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   19968:	e7c5      	b.n	198f6 <baudrate_set+0x52>
	switch (baudrate) {
   1996a:	f06f 0015 	mvn.w	r0, #21
   1996e:	4770      	bx	lr
   19970:	f06f 0015 	mvn.w	r0, #21
   19974:	4770      	bx	lr
   19976:	4b1a      	ldr	r3, [pc, #104]	; (199e0 <baudrate_set+0x13c>)
   19978:	4299      	cmp	r1, r3
   1997a:	d025      	beq.n	199c8 <baudrate_set+0x124>
   1997c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   19980:	d102      	bne.n	19988 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   19982:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   19986:	e7b6      	b.n	198f6 <baudrate_set+0x52>
	switch (baudrate) {
   19988:	f06f 0015 	mvn.w	r0, #21
   1998c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1998e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   19992:	e7b0      	b.n	198f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   19994:	4b13      	ldr	r3, [pc, #76]	; (199e4 <baudrate_set+0x140>)
   19996:	e7ae      	b.n	198f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   19998:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1999c:	e7ab      	b.n	198f6 <baudrate_set+0x52>
	switch (baudrate) {
   1999e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   199a2:	e7a8      	b.n	198f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   199a4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   199a8:	e7a5      	b.n	198f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   199aa:	4b0f      	ldr	r3, [pc, #60]	; (199e8 <baudrate_set+0x144>)
   199ac:	e7a3      	b.n	198f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   199ae:	4b0f      	ldr	r3, [pc, #60]	; (199ec <baudrate_set+0x148>)
   199b0:	e7a1      	b.n	198f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   199b2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   199b6:	e79e      	b.n	198f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   199b8:	4b0d      	ldr	r3, [pc, #52]	; (199f0 <baudrate_set+0x14c>)
   199ba:	e79c      	b.n	198f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   199bc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   199c0:	e799      	b.n	198f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   199c2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   199c6:	e796      	b.n	198f6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   199c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   199cc:	e793      	b.n	198f6 <baudrate_set+0x52>
	switch (baudrate) {
   199ce:	f06f 0015 	mvn.w	r0, #21
}
   199d2:	4770      	bx	lr
   199d4:	0013b000 	.word	0x0013b000
   199d8:	004ea000 	.word	0x004ea000
   199dc:	000f4240 	.word	0x000f4240
   199e0:	0003d090 	.word	0x0003d090
   199e4:	00275000 	.word	0x00275000
   199e8:	0075c000 	.word	0x0075c000
   199ec:	003af000 	.word	0x003af000
   199f0:	013a9000 	.word	0x013a9000

000199f4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   199f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   199f8:	4605      	mov	r5, r0
   199fa:	460f      	mov	r7, r1
	return dev->data;
   199fc:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19a00:	f00d fd58 	bl	274b4 <k_is_in_isr>
   19a04:	b920      	cbnz	r0, 19a10 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   19a06:	4b16      	ldr	r3, [pc, #88]	; (19a60 <uarte_nrfx_poll_out+0x6c>)
   19a08:	781b      	ldrb	r3, [r3, #0]
   19a0a:	b1ab      	cbz	r3, 19a38 <uarte_nrfx_poll_out+0x44>
   19a0c:	2300      	movs	r3, #0
   19a0e:	e000      	b.n	19a12 <uarte_nrfx_poll_out+0x1e>
   19a10:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   19a12:	b19b      	cbz	r3, 19a3c <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   19a14:	f04f 0340 	mov.w	r3, #64	; 0x40
   19a18:	f3ef 8411 	mrs	r4, BASEPRI
   19a1c:	f383 8812 	msr	BASEPRI_MAX, r3
   19a20:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   19a24:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   19a26:	4628      	mov	r0, r5
   19a28:	f00c fd1e 	bl	26468 <is_tx_ready>
   19a2c:	b950      	cbnz	r0, 19a44 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   19a2e:	f384 8811 	msr	BASEPRI, r4
   19a32:	f3bf 8f6f 	isb	sy
}
   19a36:	e7ed      	b.n	19a14 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19a38:	2301      	movs	r3, #1
   19a3a:	e7ea      	b.n	19a12 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   19a3c:	4628      	mov	r0, r5
   19a3e:	f00c fe34 	bl	266aa <wait_tx_ready>
   19a42:	4606      	mov	r6, r0
	}

	data->char_out = c;
   19a44:	4641      	mov	r1, r8
   19a46:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   19a4a:	2201      	movs	r2, #1
   19a4c:	4628      	mov	r0, r5
   19a4e:	f00c fd25 	bl	2649c <tx_start>
	__asm__ volatile(
   19a52:	f386 8811 	msr	BASEPRI, r6
   19a56:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   19a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19a5e:	bf00      	nop
   19a60:	20006a8a 	.word	0x20006a8a

00019a64 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   19a64:	b538      	push	{r3, r4, r5, lr}
   19a66:	4604      	mov	r4, r0
   19a68:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   19a6a:	f101 0016 	add.w	r0, r1, #22
   19a6e:	f001 f953 	bl	1ad18 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   19a72:	4b0c      	ldr	r3, [pc, #48]	; (19aa4 <endtx_stoptx_ppi_init+0x40>)
   19a74:	4298      	cmp	r0, r3
   19a76:	d111      	bne.n	19a9c <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   19a78:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   19a7a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   19a7e:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19a80:	4a09      	ldr	r2, [pc, #36]	; (19aa8 <endtx_stoptx_ppi_init+0x44>)
   19a82:	33a2      	adds	r3, #162	; 0xa2
   19a84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19a88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19a8c:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   19a8e:	7da9      	ldrb	r1, [r5, #22]
   19a90:	2301      	movs	r3, #1
   19a92:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   19a94:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   19a98:	2000      	movs	r0, #0
}
   19a9a:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   19a9c:	f06f 0004 	mvn.w	r0, #4
   19aa0:	e7fb      	b.n	19a9a <endtx_stoptx_ppi_init+0x36>
   19aa2:	bf00      	nop
   19aa4:	0bad0000 	.word	0x0bad0000
   19aa8:	4001f000 	.word	0x4001f000

00019aac <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   19aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
   19aae:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   19ab0:	6825      	ldr	r5, [r4, #0]
	return dev->data;
   19ab2:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   19ab4:	2300      	movs	r3, #0
   19ab6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   19aba:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
   19abc:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
   19abe:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   19ac2:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19ac4:	2b01      	cmp	r3, #1
   19ac6:	f000 8097 	beq.w	19bf8 <uarte_instance_init+0x14c>
        case 0: return NRF_P0;
   19aca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19ace:	2301      	movs	r3, #1
   19ad0:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   19ad2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
   19ad6:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
   19ad8:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19adc:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19ade:	2b01      	cmp	r3, #1
   19ae0:	f000 808c 	beq.w	19bfc <uarte_instance_init+0x150>
        case 0: return NRF_P0;
   19ae4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19ae8:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   19aec:	2203      	movs	r2, #3
   19aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   19af2:	68e3      	ldr	r3, [r4, #12]
   19af4:	f1b3 3fff 	cmp.w	r3, #4294967295
   19af8:	d00c      	beq.n	19b14 <uarte_instance_init+0x68>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
   19afa:	7e21      	ldrb	r1, [r4, #24]
    *p_pin = pin_number & 0x1F;
   19afc:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19b00:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19b02:	2b01      	cmp	r3, #1
   19b04:	d07c      	beq.n	19c00 <uarte_instance_init+0x154>
        case 0: return NRF_P0;
   19b06:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   19b0a:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   19b0c:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   19b10:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
   19b14:	68a2      	ldr	r2, [r4, #8]
   19b16:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
   19b18:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   19b1c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   19b20:	6923      	ldr	r3, [r4, #16]
   19b22:	f1b3 3fff 	cmp.w	r3, #4294967295
   19b26:	d00c      	beq.n	19b42 <uarte_instance_init+0x96>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
   19b28:	7e61      	ldrb	r1, [r4, #25]
    *p_pin = pin_number & 0x1F;
   19b2a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19b2e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19b30:	2b01      	cmp	r3, #1
   19b32:	d067      	beq.n	19c04 <uarte_instance_init+0x158>
        case 0: return NRF_P0;
   19b34:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   19b38:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   19b3a:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   19b3e:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   19b42:	6963      	ldr	r3, [r4, #20]
   19b44:	f1b3 3fff 	cmp.w	r3, #4294967295
   19b48:	d017      	beq.n	19b7a <uarte_instance_init+0xce>
    *p_pin = pin_number & 0x1F;
   19b4a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19b4e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19b50:	2b01      	cmp	r3, #1
   19b52:	d059      	beq.n	19c08 <uarte_instance_init+0x15c>
        case 0: return NRF_P0;
   19b54:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19b58:	2301      	movs	r3, #1
   19b5a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   19b5c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
   19b60:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
   19b62:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19b66:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19b68:	2b01      	cmp	r3, #1
   19b6a:	d04f      	beq.n	19c0c <uarte_instance_init+0x160>
        case 0: return NRF_P0;
   19b6c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19b70:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   19b74:	2203      	movs	r2, #3
   19b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
   19b7a:	6962      	ldr	r2, [r4, #20]
   19b7c:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
   19b7e:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   19b82:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
   19b86:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   19b88:	3104      	adds	r1, #4
   19b8a:	f00c fc00 	bl	2638e <uarte_nrfx_configure>
	if (err) {
   19b8e:	4607      	mov	r7, r0
   19b90:	bb80      	cbnz	r0, 19bf4 <uarte_instance_init+0x148>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   19b92:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   19b94:	f013 0f08 	tst.w	r3, #8
   19b98:	d13a      	bne.n	19c10 <uarte_instance_init+0x164>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   19b9a:	2308      	movs	r3, #8
   19b9c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   19ba0:	68e3      	ldr	r3, [r4, #12]
   19ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
   19ba6:	d00c      	beq.n	19bc2 <uarte_instance_init+0x116>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19ba8:	2300      	movs	r3, #0
   19baa:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   19bae:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   19bb2:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   19bb6:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   19bba:	2301      	movs	r3, #1
   19bbc:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19bc0:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   19bc2:	6863      	ldr	r3, [r4, #4]
   19bc4:	f013 0f08 	tst.w	r3, #8
   19bc8:	d103      	bne.n	19bd2 <uarte_instance_init+0x126>
    p_reg->INTENSET = mask;
   19bca:	f44f 7380 	mov.w	r3, #256	; 0x100
   19bce:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   19bd2:	6863      	ldr	r3, [r4, #4]
   19bd4:	f013 0f10 	tst.w	r3, #16
   19bd8:	d003      	beq.n	19be2 <uarte_instance_init+0x136>
   19bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   19bde:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   19be2:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19be4:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19be8:	2300      	movs	r3, #0
   19bea:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19bee:	2301      	movs	r3, #1
   19bf0:	60ab      	str	r3, [r5, #8]
   19bf2:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   19bf4:	4638      	mov	r0, r7
   19bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   19bf8:	4a09      	ldr	r2, [pc, #36]	; (19c20 <uarte_instance_init+0x174>)
   19bfa:	e768      	b.n	19ace <uarte_instance_init+0x22>
   19bfc:	4908      	ldr	r1, [pc, #32]	; (19c20 <uarte_instance_init+0x174>)
   19bfe:	e773      	b.n	19ae8 <uarte_instance_init+0x3c>
   19c00:	4f07      	ldr	r7, [pc, #28]	; (19c20 <uarte_instance_init+0x174>)
   19c02:	e782      	b.n	19b0a <uarte_instance_init+0x5e>
   19c04:	4f06      	ldr	r7, [pc, #24]	; (19c20 <uarte_instance_init+0x174>)
   19c06:	e797      	b.n	19b38 <uarte_instance_init+0x8c>
   19c08:	4905      	ldr	r1, [pc, #20]	; (19c20 <uarte_instance_init+0x174>)
   19c0a:	e7a5      	b.n	19b58 <uarte_instance_init+0xac>
   19c0c:	4904      	ldr	r1, [pc, #16]	; (19c20 <uarte_instance_init+0x174>)
   19c0e:	e7af      	b.n	19b70 <uarte_instance_init+0xc4>
		err = endtx_stoptx_ppi_init(uarte, data);
   19c10:	4631      	mov	r1, r6
   19c12:	4628      	mov	r0, r5
   19c14:	f7ff ff26 	bl	19a64 <endtx_stoptx_ppi_init>
		if (err < 0) {
   19c18:	2800      	cmp	r0, #0
   19c1a:	dabe      	bge.n	19b9a <uarte_instance_init+0xee>
			return err;
   19c1c:	4607      	mov	r7, r0
   19c1e:	e7e9      	b.n	19bf4 <uarte_instance_init+0x148>
   19c20:	50000300 	.word	0x50000300

00019c24 <random_byte_get>:
	__asm__ volatile(
   19c24:	f04f 0340 	mov.w	r3, #64	; 0x40
   19c28:	f3ef 8211 	mrs	r2, BASEPRI
   19c2c:	f383 8812 	msr	BASEPRI_MAX, r3
   19c30:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   19c34:	4b09      	ldr	r3, [pc, #36]	; (19c5c <random_byte_get+0x38>)
   19c36:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   19c38:	b16b      	cbz	r3, 19c56 <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   19c3a:	4b09      	ldr	r3, [pc, #36]	; (19c60 <random_byte_get+0x3c>)
   19c3c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   19c40:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19c42:	f503 7380 	add.w	r3, r3, #256	; 0x100
   19c46:	2100      	movs	r1, #0
   19c48:	6019      	str	r1, [r3, #0]
   19c4a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   19c4c:	f382 8811 	msr	BASEPRI, r2
   19c50:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   19c54:	4770      	bx	lr
	int retval = -EAGAIN;
   19c56:	f06f 000a 	mvn.w	r0, #10
   19c5a:	e7f7      	b.n	19c4c <random_byte_get+0x28>
   19c5c:	4000d100 	.word	0x4000d100
   19c60:	4000d000 	.word	0x4000d000

00019c64 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   19c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c68:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   19c6a:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   19c6e:	78c5      	ldrb	r5, [r0, #3]
   19c70:	462f      	mov	r7, r5
	__asm__ volatile(
   19c72:	f04f 0340 	mov.w	r3, #64	; 0x40
   19c76:	f3ef 8811 	mrs	r8, BASEPRI
   19c7a:	f383 8812 	msr	BASEPRI_MAX, r3
   19c7e:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   19c82:	7800      	ldrb	r0, [r0, #0]
   19c84:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   19c86:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   19c8a:	ebac 0c00 	sub.w	ip, ip, r0
   19c8e:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   19c92:	4562      	cmp	r2, ip
   19c94:	d901      	bls.n	19c9a <rng_pool_get+0x36>
		len = available;
   19c96:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   19c9a:	1883      	adds	r3, r0, r2
   19c9c:	402b      	ands	r3, r5
   19c9e:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   19ca0:	f388 8811 	msr	BASEPRI, r8
   19ca4:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   19ca8:	460b      	mov	r3, r1
}
   19caa:	e006      	b.n	19cba <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   19cac:	1932      	adds	r2, r6, r4
   19cae:	7952      	ldrb	r2, [r2, #5]
   19cb0:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   19cb4:	3401      	adds	r4, #1
   19cb6:	403c      	ands	r4, r7
	while (likely(len--)) {
   19cb8:	462a      	mov	r2, r5
   19cba:	1e55      	subs	r5, r2, #1
   19cbc:	b2ad      	uxth	r5, r5
   19cbe:	2a00      	cmp	r2, #0
   19cc0:	d1f4      	bne.n	19cac <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   19cc2:	4570      	cmp	r0, lr
   19cc4:	d10d      	bne.n	19ce2 <rng_pool_get+0x7e>
	__asm__ volatile(
   19cc6:	f04f 0040 	mov.w	r0, #64	; 0x40
   19cca:	f3ef 8211 	mrs	r2, BASEPRI
   19cce:	f380 8812 	msr	BASEPRI_MAX, r0
   19cd2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   19cd6:	7830      	ldrb	r0, [r6, #0]
   19cd8:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   19cda:	f382 8811 	msr	BASEPRI, r2
   19cde:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   19ce2:	1a5b      	subs	r3, r3, r1
   19ce4:	b298      	uxth	r0, r3
	available = available - len;
   19ce6:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   19cea:	7933      	ldrb	r3, [r6, #4]
   19cec:	4563      	cmp	r3, ip
   19cee:	d302      	bcc.n	19cf6 <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19cf0:	4b02      	ldr	r3, [pc, #8]	; (19cfc <rng_pool_get+0x98>)
   19cf2:	2201      	movs	r2, #1
   19cf4:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   19cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19cfa:	bf00      	nop
   19cfc:	4000d000 	.word	0x4000d000

00019d00 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   19d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d02:	460d      	mov	r5, r1
   19d04:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   19d06:	f013 0f01 	tst.w	r3, #1
   19d0a:	d103      	bne.n	19d14 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   19d0c:	4822      	ldr	r0, [pc, #136]	; (19d98 <entropy_nrf5_get_entropy_isr+0x98>)
   19d0e:	f7ff ffa9 	bl	19c64 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   19d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   19d14:	b90a      	cbnz	r2, 19d1a <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   19d16:	4620      	mov	r0, r4
   19d18:	e7fb      	b.n	19d12 <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   19d1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   19d1e:	f3ef 8611 	mrs	r6, BASEPRI
   19d22:	f383 8812 	msr	BASEPRI_MAX, r3
   19d26:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   19d2a:	200d      	movs	r0, #13
   19d2c:	f7fa f85e 	bl	13dec <arch_irq_is_enabled>
   19d30:	4607      	mov	r7, r0
		irq_disable(IRQN);
   19d32:	200d      	movs	r0, #13
   19d34:	f7fa f846 	bl	13dc4 <arch_irq_disable>
	__asm__ volatile(
   19d38:	f386 8811 	msr	BASEPRI, r6
   19d3c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19d40:	4b16      	ldr	r3, [pc, #88]	; (19d9c <entropy_nrf5_get_entropy_isr+0x9c>)
   19d42:	2200      	movs	r2, #0
   19d44:	601a      	str	r2, [r3, #0]
   19d46:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19d48:	4b15      	ldr	r3, [pc, #84]	; (19da0 <entropy_nrf5_get_entropy_isr+0xa0>)
   19d4a:	2201      	movs	r2, #1
   19d4c:	601a      	str	r2, [r3, #0]
   19d4e:	4b15      	ldr	r3, [pc, #84]	; (19da4 <entropy_nrf5_get_entropy_isr+0xa4>)
   19d50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   19d54:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   19d58:	4626      	mov	r6, r4
   19d5a:	e004      	b.n	19d66 <entropy_nrf5_get_entropy_isr+0x66>
   19d5c:	f3bf 8f4f 	dsb	sy
				__WFE();
   19d60:	bf20      	wfe
				__SEV();
   19d62:	bf40      	sev
				__WFE();
   19d64:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   19d66:	4b0d      	ldr	r3, [pc, #52]	; (19d9c <entropy_nrf5_get_entropy_isr+0x9c>)
   19d68:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   19d6a:	2b00      	cmp	r3, #0
   19d6c:	d0f6      	beq.n	19d5c <entropy_nrf5_get_entropy_isr+0x5c>
			byte = random_byte_get();
   19d6e:	f7ff ff59 	bl	19c24 <random_byte_get>
   19d72:	4b0c      	ldr	r3, [pc, #48]	; (19da4 <entropy_nrf5_get_entropy_isr+0xa4>)
   19d74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   19d78:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   19d7c:	2800      	cmp	r0, #0
   19d7e:	db02      	blt.n	19d86 <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   19d80:	3e01      	subs	r6, #1
   19d82:	b2b6      	uxth	r6, r6
   19d84:	55a8      	strb	r0, [r5, r6]
		} while (len);
   19d86:	2e00      	cmp	r6, #0
   19d88:	d1ed      	bne.n	19d66 <entropy_nrf5_get_entropy_isr+0x66>
		if (irq_enabled) {
   19d8a:	2f00      	cmp	r7, #0
   19d8c:	d0c3      	beq.n	19d16 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   19d8e:	200d      	movs	r0, #13
   19d90:	f7fa f808 	bl	13da4 <arch_irq_enable>
   19d94:	e7bf      	b.n	19d16 <entropy_nrf5_get_entropy_isr+0x16>
   19d96:	bf00      	nop
   19d98:	20003ccc 	.word	0x20003ccc
   19d9c:	4000d100 	.word	0x4000d100
   19da0:	4000d000 	.word	0x4000d000
   19da4:	e000e100 	.word	0xe000e100

00019da8 <isr>:
{
   19da8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   19daa:	f7ff ff3b 	bl	19c24 <random_byte_get>
	if (byte < 0) {
   19dae:	2800      	cmp	r0, #0
   19db0:	db06      	blt.n	19dc0 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   19db2:	b2c4      	uxtb	r4, r0
   19db4:	4621      	mov	r1, r4
   19db6:	480a      	ldr	r0, [pc, #40]	; (19de0 <isr+0x38>)
   19db8:	f00c fcad 	bl	26716 <rng_pool_put>
	if (ret < 0) {
   19dbc:	2800      	cmp	r0, #0
   19dbe:	db00      	blt.n	19dc2 <isr+0x1a>
}
   19dc0:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   19dc2:	4621      	mov	r1, r4
   19dc4:	4807      	ldr	r0, [pc, #28]	; (19de4 <isr+0x3c>)
   19dc6:	f00c fca6 	bl	26716 <rng_pool_put>
		if (ret < 0) {
   19dca:	2800      	cmp	r0, #0
   19dcc:	db03      	blt.n	19dd6 <isr+0x2e>
	z_impl_k_sem_give(sem);
   19dce:	4806      	ldr	r0, [pc, #24]	; (19de8 <isr+0x40>)
   19dd0:	f003 fa58 	bl	1d284 <z_impl_k_sem_give>
}
   19dd4:	e7f4      	b.n	19dc0 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19dd6:	4b05      	ldr	r3, [pc, #20]	; (19dec <isr+0x44>)
   19dd8:	2201      	movs	r2, #1
   19dda:	601a      	str	r2, [r3, #0]
}
   19ddc:	e7f7      	b.n	19dce <isr+0x26>
   19dde:	bf00      	nop
   19de0:	20003ccc 	.word	0x20003ccc
   19de4:	20003ce1 	.word	0x20003ce1
   19de8:	20003cb4 	.word	0x20003cb4
   19dec:	4000d004 	.word	0x4000d004

00019df0 <entropy_nrf5_get_entropy>:
{
   19df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19df2:	460f      	mov	r7, r1
   19df4:	4614      	mov	r4, r2
	while (len) {
   19df6:	e002      	b.n	19dfe <entropy_nrf5_get_entropy+0xe>
		len -= bytes;
   19df8:	1b64      	subs	r4, r4, r5
   19dfa:	b2a4      	uxth	r4, r4
		buf += bytes;
   19dfc:	442f      	add	r7, r5
	while (len) {
   19dfe:	b1e4      	cbz	r4, 19e3a <entropy_nrf5_get_entropy+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   19e00:	4e0f      	ldr	r6, [pc, #60]	; (19e40 <entropy_nrf5_get_entropy+0x50>)
   19e02:	f04f 32ff 	mov.w	r2, #4294967295
   19e06:	f04f 33ff 	mov.w	r3, #4294967295
   19e0a:	4630      	mov	r0, r6
   19e0c:	f003 fa62 	bl	1d2d4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   19e10:	4622      	mov	r2, r4
   19e12:	4639      	mov	r1, r7
   19e14:	f106 0045 	add.w	r0, r6, #69	; 0x45
   19e18:	f7ff ff24 	bl	19c64 <rng_pool_get>
   19e1c:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   19e1e:	4630      	mov	r0, r6
   19e20:	f003 fa30 	bl	1d284 <z_impl_k_sem_give>
		if (bytes == 0U) {
   19e24:	2d00      	cmp	r5, #0
   19e26:	d1e7      	bne.n	19df8 <entropy_nrf5_get_entropy+0x8>
	return z_impl_k_sem_take(sem, timeout);
   19e28:	f04f 32ff 	mov.w	r2, #4294967295
   19e2c:	f04f 33ff 	mov.w	r3, #4294967295
   19e30:	f106 0018 	add.w	r0, r6, #24
   19e34:	f003 fa4e 	bl	1d2d4 <z_impl_k_sem_take>
			continue;
   19e38:	e7e1      	b.n	19dfe <entropy_nrf5_get_entropy+0xe>
}
   19e3a:	2000      	movs	r0, #0
   19e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19e3e:	bf00      	nop
   19e40:	20003c9c 	.word	0x20003c9c

00019e44 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   19e44:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   19e46:	4c18      	ldr	r4, [pc, #96]	; (19ea8 <entropy_nrf5_init+0x64>)
   19e48:	2201      	movs	r2, #1
   19e4a:	4611      	mov	r1, r2
   19e4c:	4620      	mov	r0, r4
   19e4e:	f00d fc78 	bl	27742 <z_impl_k_sem_init>
   19e52:	2201      	movs	r2, #1
   19e54:	2100      	movs	r1, #0
   19e56:	f104 0018 	add.w	r0, r4, #24
   19e5a:	f00d fc72 	bl	27742 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   19e5e:	2204      	movs	r2, #4
   19e60:	2108      	movs	r1, #8
   19e62:	f104 0045 	add.w	r0, r4, #69	; 0x45
   19e66:	f00c fc6a 	bl	2673e <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   19e6a:	220c      	movs	r2, #12
   19e6c:	2110      	movs	r1, #16
   19e6e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   19e72:	f00c fc64 	bl	2673e <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   19e76:	4b0d      	ldr	r3, [pc, #52]	; (19eac <entropy_nrf5_init+0x68>)
   19e78:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   19e7c:	f022 0201 	bic.w	r2, r2, #1
   19e80:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19e84:	4a0a      	ldr	r2, [pc, #40]	; (19eb0 <entropy_nrf5_init+0x6c>)
   19e86:	2400      	movs	r4, #0
   19e88:	6014      	str	r4, [r2, #0]
   19e8a:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   19e8c:	2101      	movs	r1, #1
   19e8e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19e92:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   19e94:	4622      	mov	r2, r4
   19e96:	200d      	movs	r0, #13
   19e98:	f7f9 ffb6 	bl	13e08 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   19e9c:	200d      	movs	r0, #13
   19e9e:	f7f9 ff81 	bl	13da4 <arch_irq_enable>

	return 0;
}
   19ea2:	4620      	mov	r0, r4
   19ea4:	bd10      	pop	{r4, pc}
   19ea6:	bf00      	nop
   19ea8:	20003c9c 	.word	0x20003c9c
   19eac:	4000d000 	.word	0x4000d000
   19eb0:	4000d100 	.word	0x4000d100

00019eb4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   19eb4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   19eb8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   19ebc:	4b01      	ldr	r3, [pc, #4]	; (19ec4 <set_comparator+0x10>)
   19ebe:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   19ec2:	4770      	bx	lr
   19ec4:	40011000 	.word	0x40011000

00019ec8 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   19ec8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   19ecc:	4b01      	ldr	r3, [pc, #4]	; (19ed4 <get_comparator+0xc>)
   19ece:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   19ed2:	4770      	bx	lr
   19ed4:	40011000 	.word	0x40011000

00019ed8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19edc:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   19ede:	4a02      	ldr	r2, [pc, #8]	; (19ee8 <event_enable+0x10>)
   19ee0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   19ee4:	4770      	bx	lr
   19ee6:	bf00      	nop
   19ee8:	40011000 	.word	0x40011000

00019eec <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19ef0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   19ef2:	4a02      	ldr	r2, [pc, #8]	; (19efc <event_disable+0x10>)
   19ef4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   19ef8:	4770      	bx	lr
   19efa:	bf00      	nop
   19efc:	40011000 	.word	0x40011000

00019f00 <counter>:
     return p_reg->COUNTER;
   19f00:	4b01      	ldr	r3, [pc, #4]	; (19f08 <counter+0x8>)
   19f02:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   19f06:	4770      	bx	lr
   19f08:	40011000 	.word	0x40011000

00019f0c <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   19f0c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   19f0e:	2301      	movs	r3, #1
   19f10:	4083      	lsls	r3, r0
   19f12:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19f14:	4a10      	ldr	r2, [pc, #64]	; (19f58 <compare_int_lock+0x4c>)
   19f16:	f3bf 8f5b 	dmb	ish
   19f1a:	e852 1f00 	ldrex	r1, [r2]
   19f1e:	ea01 0c04 	and.w	ip, r1, r4
   19f22:	e842 ce00 	strex	lr, ip, [r2]
   19f26:	f1be 0f00 	cmp.w	lr, #0
   19f2a:	d1f6      	bne.n	19f1a <compare_int_lock+0xe>
   19f2c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19f30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19f34:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   19f38:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19f3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   19f40:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   19f44:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19f48:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   19f4c:	420b      	tst	r3, r1
}
   19f4e:	bf14      	ite	ne
   19f50:	2001      	movne	r0, #1
   19f52:	2000      	moveq	r0, #0
   19f54:	bd10      	pop	{r4, pc}
   19f56:	bf00      	nop
   19f58:	20003cf4 	.word	0x20003cf4

00019f5c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   19f5c:	b570      	push	{r4, r5, r6, lr}
   19f5e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   19f60:	f00c fc37 	bl	267d2 <full_int_lock>
   19f64:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   19f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19f6a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   19f6c:	4a17      	ldr	r2, [pc, #92]	; (19fcc <channel_processing_check_and_clear+0x70>)
   19f6e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   19f72:	4213      	tst	r3, r2
   19f74:	d105      	bne.n	19f82 <channel_processing_check_and_clear+0x26>
	bool result = false;
   19f76:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   19f78:	4628      	mov	r0, r5
   19f7a:	f00c fc2e 	bl	267da <full_int_unlock>

	return result;
}
   19f7e:	4630      	mov	r0, r6
   19f80:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   19f82:	2301      	movs	r3, #1
   19f84:	40a3      	lsls	r3, r4
   19f86:	43db      	mvns	r3, r3
   19f88:	4a11      	ldr	r2, [pc, #68]	; (19fd0 <channel_processing_check_and_clear+0x74>)
   19f8a:	f3bf 8f5b 	dmb	ish
   19f8e:	e852 1f00 	ldrex	r1, [r2]
   19f92:	ea01 0003 	and.w	r0, r1, r3
   19f96:	e842 0600 	strex	r6, r0, [r2]
   19f9a:	2e00      	cmp	r6, #0
   19f9c:	d1f7      	bne.n	19f8e <channel_processing_check_and_clear+0x32>
   19f9e:	f3bf 8f5b 	dmb	ish
   19fa2:	b959      	cbnz	r1, 19fbc <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   19fa4:	f104 0350 	add.w	r3, r4, #80	; 0x50
   19fa8:	009b      	lsls	r3, r3, #2
   19faa:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19fac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19fb0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   19fb4:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   19fb6:	b113      	cbz	r3, 19fbe <channel_processing_check_and_clear+0x62>
   19fb8:	2301      	movs	r3, #1
   19fba:	e000      	b.n	19fbe <channel_processing_check_and_clear+0x62>
   19fbc:	2301      	movs	r3, #1
		if (result) {
   19fbe:	461e      	mov	r6, r3
   19fc0:	2b00      	cmp	r3, #0
   19fc2:	d0d9      	beq.n	19f78 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   19fc4:	4620      	mov	r0, r4
   19fc6:	f00c fbf5 	bl	267b4 <event_clear>
   19fca:	e7d5      	b.n	19f78 <channel_processing_check_and_clear+0x1c>
   19fcc:	40011000 	.word	0x40011000
   19fd0:	20003cf0 	.word	0x20003cf0

00019fd4 <compare_int_unlock>:
	if (key) {
   19fd4:	b901      	cbnz	r1, 19fd8 <compare_int_unlock+0x4>
}
   19fd6:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   19fd8:	2301      	movs	r3, #1
   19fda:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19fdc:	4a11      	ldr	r2, [pc, #68]	; (1a024 <compare_int_unlock+0x50>)
   19fde:	f3bf 8f5b 	dmb	ish
   19fe2:	e852 1f00 	ldrex	r1, [r2]
   19fe6:	4319      	orrs	r1, r3
   19fe8:	e842 1c00 	strex	ip, r1, [r2]
   19fec:	f1bc 0f00 	cmp.w	ip, #0
   19ff0:	d1f7      	bne.n	19fe2 <compare_int_unlock+0xe>
   19ff2:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19ff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19ffa:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   19ffc:	4a0a      	ldr	r2, [pc, #40]	; (1a028 <compare_int_unlock+0x54>)
   19ffe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a002:	f3bf 8f5b 	dmb	ish
   1a006:	4b09      	ldr	r3, [pc, #36]	; (1a02c <compare_int_unlock+0x58>)
   1a008:	681b      	ldr	r3, [r3, #0]
   1a00a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1a00e:	fa23 f000 	lsr.w	r0, r3, r0
   1a012:	f010 0f01 	tst.w	r0, #1
   1a016:	d0de      	beq.n	19fd6 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a018:	4b05      	ldr	r3, [pc, #20]	; (1a030 <compare_int_unlock+0x5c>)
   1a01a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a01e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1a022:	e7d8      	b.n	19fd6 <compare_int_unlock+0x2>
   1a024:	20003cf4 	.word	0x20003cf4
   1a028:	40011000 	.word	0x40011000
   1a02c:	20003cf0 	.word	0x20003cf0
   1a030:	e000e100 	.word	0xe000e100

0001a034 <sys_clock_timeout_handler>:
{
   1a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a036:	4607      	mov	r7, r0
   1a038:	4614      	mov	r4, r2
   1a03a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   1a03c:	4610      	mov	r0, r2
   1a03e:	4619      	mov	r1, r3
   1a040:	f00c fbc4 	bl	267cc <absolute_time_to_cc>
   1a044:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1a046:	4b15      	ldr	r3, [pc, #84]	; (1a09c <sys_clock_timeout_handler+0x68>)
   1a048:	681a      	ldr	r2, [r3, #0]
   1a04a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   1a04c:	601c      	str	r4, [r3, #0]
   1a04e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1a050:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1a054:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1a058:	d308      	bcc.n	1a06c <sys_clock_timeout_handler+0x38>
	return false;
   1a05a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1a05c:	f004 f84c 	bl	1e0f8 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   1a060:	4638      	mov	r0, r7
   1a062:	f7ff ff31 	bl	19ec8 <get_comparator>
   1a066:	42a8      	cmp	r0, r5
   1a068:	d00c      	beq.n	1a084 <sys_clock_timeout_handler+0x50>
}
   1a06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1a06c:	4b0c      	ldr	r3, [pc, #48]	; (1a0a0 <sys_clock_timeout_handler+0x6c>)
   1a06e:	6819      	ldr	r1, [r3, #0]
   1a070:	0a0b      	lsrs	r3, r1, #8
   1a072:	060a      	lsls	r2, r1, #24
   1a074:	1952      	adds	r2, r2, r5
   1a076:	f143 0300 	adc.w	r3, r3, #0
   1a07a:	490a      	ldr	r1, [pc, #40]	; (1a0a4 <sys_clock_timeout_handler+0x70>)
   1a07c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   1a080:	2401      	movs	r4, #1
   1a082:	e7eb      	b.n	1a05c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   1a084:	b11c      	cbz	r4, 1a08e <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   1a086:	4638      	mov	r0, r7
   1a088:	f7ff ff26 	bl	19ed8 <event_enable>
}
   1a08c:	e7ed      	b.n	1a06a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   1a08e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1a092:	4638      	mov	r0, r7
   1a094:	f7ff ff0e 	bl	19eb4 <set_comparator>
   1a098:	e7f5      	b.n	1a086 <sys_clock_timeout_handler+0x52>
   1a09a:	bf00      	nop
   1a09c:	20002600 	.word	0x20002600
   1a0a0:	20003cf8 	.word	0x20003cf8
   1a0a4:	200025e8 	.word	0x200025e8

0001a0a8 <z_nrf_rtc_timer_read>:
{
   1a0a8:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1a0aa:	4b0d      	ldr	r3, [pc, #52]	; (1a0e0 <z_nrf_rtc_timer_read+0x38>)
   1a0ac:	681b      	ldr	r3, [r3, #0]
   1a0ae:	0a1d      	lsrs	r5, r3, #8
   1a0b0:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1a0b2:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1a0b6:	f7ff ff23 	bl	19f00 <counter>
   1a0ba:	4603      	mov	r3, r0
	val += cntr;
   1a0bc:	1820      	adds	r0, r4, r0
   1a0be:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1a0c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1a0c6:	d20a      	bcs.n	1a0de <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   1a0c8:	4b06      	ldr	r3, [pc, #24]	; (1a0e4 <z_nrf_rtc_timer_read+0x3c>)
   1a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a0ce:	4299      	cmp	r1, r3
   1a0d0:	bf08      	it	eq
   1a0d2:	4290      	cmpeq	r0, r2
   1a0d4:	d203      	bcs.n	1a0de <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   1a0d6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1a0da:	f141 0100 	adc.w	r1, r1, #0
}
   1a0de:	bd38      	pop	{r3, r4, r5, pc}
   1a0e0:	20003cf8 	.word	0x20003cf8
   1a0e4:	200025e8 	.word	0x200025e8

0001a0e8 <compare_set_nolocks>:
{
   1a0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a0ec:	4606      	mov	r6, r0
   1a0ee:	4614      	mov	r4, r2
   1a0f0:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   1a0f2:	4610      	mov	r0, r2
   1a0f4:	4619      	mov	r1, r3
   1a0f6:	f00c fb69 	bl	267cc <absolute_time_to_cc>
   1a0fa:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1a0fc:	f7ff ffd4 	bl	1a0a8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1a100:	42a9      	cmp	r1, r5
   1a102:	bf08      	it	eq
   1a104:	42a0      	cmpeq	r0, r4
   1a106:	d21e      	bcs.n	1a146 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   1a108:	ebb4 0800 	subs.w	r8, r4, r0
   1a10c:	eb65 0901 	sbc.w	r9, r5, r1
   1a110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1a114:	2300      	movs	r3, #0
   1a116:	454b      	cmp	r3, r9
   1a118:	bf08      	it	eq
   1a11a:	4542      	cmpeq	r2, r8
   1a11c:	d32e      	bcc.n	1a17c <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
   1a11e:	4b19      	ldr	r3, [pc, #100]	; (1a184 <compare_set_nolocks+0x9c>)
   1a120:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1a124:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1a128:	42ab      	cmp	r3, r5
   1a12a:	bf08      	it	eq
   1a12c:	42a2      	cmpeq	r2, r4
   1a12e:	d018      	beq.n	1a162 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   1a130:	4639      	mov	r1, r7
   1a132:	4630      	mov	r0, r6
   1a134:	f00c fb54 	bl	267e0 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   1a138:	4639      	mov	r1, r7
   1a13a:	f00c fb37 	bl	267ac <counter_sub>
   1a13e:	1824      	adds	r4, r4, r0
   1a140:	f145 0500 	adc.w	r5, r5, #0
   1a144:	e00d      	b.n	1a162 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   1a146:	2301      	movs	r3, #1
   1a148:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a14a:	4a0f      	ldr	r2, [pc, #60]	; (1a188 <compare_set_nolocks+0xa0>)
   1a14c:	f3bf 8f5b 	dmb	ish
   1a150:	e852 1f00 	ldrex	r1, [r2]
   1a154:	4319      	orrs	r1, r3
   1a156:	e842 1000 	strex	r0, r1, [r2]
   1a15a:	2800      	cmp	r0, #0
   1a15c:	d1f8      	bne.n	1a150 <compare_set_nolocks+0x68>
   1a15e:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1a162:	4b08      	ldr	r3, [pc, #32]	; (1a184 <compare_set_nolocks+0x9c>)
   1a164:	0132      	lsls	r2, r6, #4
   1a166:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1a16a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   1a16e:	9908      	ldr	r1, [sp, #32]
   1a170:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1a172:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a174:	6073      	str	r3, [r6, #4]
	return ret;
   1a176:	2000      	movs	r0, #0
}
   1a178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   1a17c:	f06f 0015 	mvn.w	r0, #21
   1a180:	e7fa      	b.n	1a178 <compare_set_nolocks+0x90>
   1a182:	bf00      	nop
   1a184:	200025f0 	.word	0x200025f0
   1a188:	20003cf0 	.word	0x20003cf0

0001a18c <process_channel>:

static void process_channel(int32_t chan)
{
   1a18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a190:	b082      	sub	sp, #8
   1a192:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   1a194:	f7ff fee2 	bl	19f5c <channel_processing_check_and_clear>
   1a198:	b910      	cbnz	r0, 1a1a0 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
   1a19a:	b002      	add	sp, #8
   1a19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   1a1a0:	f7ff ff82 	bl	1a0a8 <z_nrf_rtc_timer_read>
   1a1a4:	4606      	mov	r6, r0
   1a1a6:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   1a1a8:	f00c fb13 	bl	267d2 <full_int_lock>
   1a1ac:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   1a1ae:	4b13      	ldr	r3, [pc, #76]	; (1a1fc <process_channel+0x70>)
   1a1b0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1a1b4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1a1b8:	454f      	cmp	r7, r9
   1a1ba:	bf08      	it	eq
   1a1bc:	4546      	cmpeq	r6, r8
   1a1be:	d20b      	bcs.n	1a1d8 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1a1c0:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   1a1c2:	4650      	mov	r0, sl
   1a1c4:	f00c fb09 	bl	267da <full_int_unlock>
		if (handler) {
   1a1c8:	2e00      	cmp	r6, #0
   1a1ca:	d0e6      	beq.n	1a19a <process_channel+0xe>
			handler(chan, expire_time, user_context);
   1a1cc:	9500      	str	r5, [sp, #0]
   1a1ce:	4642      	mov	r2, r8
   1a1d0:	464b      	mov	r3, r9
   1a1d2:	4620      	mov	r0, r4
   1a1d4:	47b0      	blx	r6
}
   1a1d6:	e7e0      	b.n	1a19a <process_channel+0xe>
			handler = cc_data[chan].callback;
   1a1d8:	4a08      	ldr	r2, [pc, #32]	; (1a1fc <process_channel+0x70>)
   1a1da:	0123      	lsls	r3, r4, #4
   1a1dc:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1a1e0:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   1a1e2:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   1a1e4:	2000      	movs	r0, #0
   1a1e6:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1a1e8:	f04f 32ff 	mov.w	r2, #4294967295
   1a1ec:	f04f 33ff 	mov.w	r3, #4294967295
   1a1f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   1a1f4:	4620      	mov	r0, r4
   1a1f6:	f7ff fe79 	bl	19eec <event_disable>
   1a1fa:	e7e2      	b.n	1a1c2 <process_channel+0x36>
   1a1fc:	200025f0 	.word	0x200025f0

0001a200 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1a200:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1a202:	4b0d      	ldr	r3, [pc, #52]	; (1a238 <rtc_nrf_isr+0x38>)
   1a204:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1a208:	f013 0f02 	tst.w	r3, #2
   1a20c:	d00a      	beq.n	1a224 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a20e:	4b0b      	ldr	r3, [pc, #44]	; (1a23c <rtc_nrf_isr+0x3c>)
   1a210:	681b      	ldr	r3, [r3, #0]
   1a212:	b13b      	cbz	r3, 1a224 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1a214:	4b09      	ldr	r3, [pc, #36]	; (1a23c <rtc_nrf_isr+0x3c>)
   1a216:	2200      	movs	r2, #0
   1a218:	601a      	str	r2, [r3, #0]
   1a21a:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1a21c:	4a08      	ldr	r2, [pc, #32]	; (1a240 <rtc_nrf_isr+0x40>)
   1a21e:	6813      	ldr	r3, [r2, #0]
   1a220:	3301      	adds	r3, #1
   1a222:	6013      	str	r3, [r2, #0]
{
   1a224:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1a226:	2c00      	cmp	r4, #0
   1a228:	dd00      	ble.n	1a22c <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
   1a22a:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1a22c:	4620      	mov	r0, r4
   1a22e:	f7ff ffad 	bl	1a18c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1a232:	3401      	adds	r4, #1
   1a234:	e7f7      	b.n	1a226 <rtc_nrf_isr+0x26>
   1a236:	bf00      	nop
   1a238:	40011000 	.word	0x40011000
   1a23c:	40011104 	.word	0x40011104
   1a240:	20003cf8 	.word	0x20003cf8

0001a244 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   1a244:	b530      	push	{r4, r5, lr}
   1a246:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   1a248:	2300      	movs	r3, #0
   1a24a:	4a1f      	ldr	r2, [pc, #124]	; (1a2c8 <sys_clock_driver_init+0x84>)
   1a24c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1a250:	2b00      	cmp	r3, #0
   1a252:	dd27      	ble.n	1a2a4 <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
   1a254:	4c1c      	ldr	r4, [pc, #112]	; (1a2c8 <sys_clock_driver_init+0x84>)
   1a256:	2502      	movs	r5, #2
   1a258:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a25c:	4b1b      	ldr	r3, [pc, #108]	; (1a2cc <sys_clock_driver_init+0x88>)
   1a25e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a262:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1a266:	2200      	movs	r2, #0
   1a268:	2101      	movs	r1, #1
   1a26a:	2011      	movs	r0, #17
   1a26c:	f7f9 fdcc 	bl	13e08 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1a270:	2011      	movs	r0, #17
   1a272:	f7f9 fd97 	bl	13da4 <arch_irq_enable>
   1a276:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1a27a:	2301      	movs	r3, #1
   1a27c:	4a14      	ldr	r2, [pc, #80]	; (1a2d0 <sys_clock_driver_init+0x8c>)
   1a27e:	6013      	str	r3, [r2, #0]
   1a280:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1a282:	4a14      	ldr	r2, [pc, #80]	; (1a2d4 <sys_clock_driver_init+0x90>)
   1a284:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1a286:	2400      	movs	r4, #0
   1a288:	9401      	str	r4, [sp, #4]
   1a28a:	4b13      	ldr	r3, [pc, #76]	; (1a2d8 <sys_clock_driver_init+0x94>)
   1a28c:	9300      	str	r3, [sp, #0]
   1a28e:	4a13      	ldr	r2, [pc, #76]	; (1a2dc <sys_clock_driver_init+0x98>)
   1a290:	2300      	movs	r3, #0
   1a292:	4620      	mov	r0, r4
   1a294:	f00c fadf 	bl	26856 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1a298:	4628      	mov	r0, r5
   1a29a:	f7fe ffc1 	bl	19220 <z_nrf_clock_control_lf_on>

	return 0;
}
   1a29e:	4620      	mov	r0, r4
   1a2a0:	b003      	add	sp, #12
   1a2a2:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1a2a4:	4a0e      	ldr	r2, [pc, #56]	; (1a2e0 <sys_clock_driver_init+0x9c>)
   1a2a6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1a2aa:	f04f 30ff 	mov.w	r0, #4294967295
   1a2ae:	f04f 31ff 	mov.w	r1, #4294967295
   1a2b2:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1a2b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a2ba:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   1a2bc:	4902      	ldr	r1, [pc, #8]	; (1a2c8 <sys_clock_driver_init+0x84>)
   1a2be:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1a2c2:	3301      	adds	r3, #1
   1a2c4:	e7c4      	b.n	1a250 <sys_clock_driver_init+0xc>
   1a2c6:	bf00      	nop
   1a2c8:	40011000 	.word	0x40011000
   1a2cc:	e000e100 	.word	0xe000e100
   1a2d0:	40011008 	.word	0x40011008
   1a2d4:	20003cf4 	.word	0x20003cf4
   1a2d8:	0001a035 	.word	0x0001a035
   1a2dc:	007fffff 	.word	0x007fffff
   1a2e0:	200025f0 	.word	0x200025f0

0001a2e4 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
   1a2e4:	b510      	push	{r4, lr}
   1a2e6:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1a2e8:	f1b0 3fff 	cmp.w	r0, #4294967295
   1a2ec:	d007      	beq.n	1a2fe <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1a2ee:	1e44      	subs	r4, r0, #1
   1a2f0:	2c00      	cmp	r4, #0
   1a2f2:	dd07      	ble.n	1a304 <sys_clock_set_timeout+0x20>
   1a2f4:	4b11      	ldr	r3, [pc, #68]	; (1a33c <sys_clock_set_timeout+0x58>)
   1a2f6:	429c      	cmp	r4, r3
   1a2f8:	dd05      	ble.n	1a306 <sys_clock_set_timeout+0x22>
   1a2fa:	4c11      	ldr	r4, [pc, #68]	; (1a340 <sys_clock_set_timeout+0x5c>)
   1a2fc:	e003      	b.n	1a306 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1a2fe:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   1a302:	e7f4      	b.n	1a2ee <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1a304:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1a306:	f7ff fecf 	bl	1a0a8 <z_nrf_rtc_timer_read>
   1a30a:	4b0e      	ldr	r3, [pc, #56]	; (1a344 <sys_clock_set_timeout+0x60>)
   1a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a310:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   1a312:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1a316:	d300      	bcc.n	1a31a <sys_clock_set_timeout+0x36>
		ticks = 0;
   1a318:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1a31a:	4404      	add	r4, r0
   1a31c:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
   1a31e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   1a322:	d300      	bcc.n	1a326 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   1a324:	4c06      	ldr	r4, [pc, #24]	; (1a340 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1a326:	2000      	movs	r0, #0
   1a328:	9001      	str	r0, [sp, #4]
   1a32a:	4907      	ldr	r1, [pc, #28]	; (1a348 <sys_clock_set_timeout+0x64>)
   1a32c:	9100      	str	r1, [sp, #0]
   1a32e:	1912      	adds	r2, r2, r4
   1a330:	f143 0300 	adc.w	r3, r3, #0
   1a334:	f00c fa8f 	bl	26856 <compare_set>
}
   1a338:	b002      	add	sp, #8
   1a33a:	bd10      	pop	{r4, pc}
   1a33c:	007ffffe 	.word	0x007ffffe
   1a340:	007fffff 	.word	0x007fffff
   1a344:	20002600 	.word	0x20002600
   1a348:	0001a035 	.word	0x0001a035

0001a34c <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   1a34c:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1a34e:	f7ff feab 	bl	1a0a8 <z_nrf_rtc_timer_read>
   1a352:	4b02      	ldr	r3, [pc, #8]	; (1a35c <sys_clock_elapsed+0x10>)
   1a354:	681b      	ldr	r3, [r3, #0]
}
   1a356:	1ac0      	subs	r0, r0, r3
   1a358:	bd08      	pop	{r3, pc}
   1a35a:	bf00      	nop
   1a35c:	20002600 	.word	0x20002600

0001a360 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1a360:	b508      	push	{r3, lr}
   1a362:	4602      	mov	r2, r0
   1a364:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1a366:	4802      	ldr	r0, [pc, #8]	; (1a370 <multithreading_lock_acquire+0x10>)
   1a368:	f002 fe82 	bl	1d070 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   1a36c:	bd08      	pop	{r3, pc}
   1a36e:	bf00      	nop
   1a370:	20000818 	.word	0x20000818

0001a374 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   1a374:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1a376:	4802      	ldr	r0, [pc, #8]	; (1a380 <multithreading_lock_release+0xc>)
   1a378:	f002 ff04 	bl	1d184 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   1a37c:	bd08      	pop	{r3, pc}
   1a37e:	bf00      	nop
   1a380:	20000818 	.word	0x20000818

0001a384 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1a384:	b510      	push	{r4, lr}
   1a386:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1a388:	4a03      	ldr	r2, [pc, #12]	; (1a398 <rand_prio_low_vector_get_blocking+0x14>)
   1a38a:	6810      	ldr	r0, [r2, #0]
   1a38c:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1a38e:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1a390:	680c      	ldr	r4, [r1, #0]
   1a392:	4619      	mov	r1, r3
   1a394:	47a0      	blx	r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1a396:	bd10      	pop	{r4, pc}
   1a398:	20003cfc 	.word	0x20003cfc

0001a39c <host_signal>:
{
   1a39c:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1a39e:	4802      	ldr	r0, [pc, #8]	; (1a3a8 <host_signal+0xc>)
   1a3a0:	f002 ff70 	bl	1d284 <z_impl_k_sem_give>
}
   1a3a4:	bd08      	pop	{r3, pc}
   1a3a6:	bf00      	nop
   1a3a8:	20000890 	.word	0x20000890

0001a3ac <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1a3ac:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1a3ae:	4803      	ldr	r0, [pc, #12]	; (1a3bc <hci_driver_init+0x10>)
   1a3b0:	f7fb f92a 	bl	15608 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1a3b4:	4802      	ldr	r0, [pc, #8]	; (1a3c0 <hci_driver_init+0x14>)
   1a3b6:	f7ea fc63 	bl	4c80 <sdc_init>
	return err;
}
   1a3ba:	bd08      	pop	{r3, pc}
   1a3bc:	00028e58 	.word	0x00028e58
   1a3c0:	00026891 	.word	0x00026891

0001a3c4 <acl_handle>:
{
   1a3c4:	b538      	push	{r3, r4, r5, lr}
   1a3c6:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a3c8:	f04f 30ff 	mov.w	r0, #4294967295
   1a3cc:	f04f 31ff 	mov.w	r1, #4294967295
   1a3d0:	f7ff ffc6 	bl	1a360 <multithreading_lock_acquire>
	if (!errcode) {
   1a3d4:	4605      	mov	r5, r0
   1a3d6:	b108      	cbz	r0, 1a3dc <acl_handle+0x18>
}
   1a3d8:	4628      	mov	r0, r5
   1a3da:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   1a3dc:	68a0      	ldr	r0, [r4, #8]
   1a3de:	f7f3 fcb4 	bl	dd4a <sdc_hci_data_put>
   1a3e2:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1a3e4:	f7ff ffc6 	bl	1a374 <multithreading_lock_release>
		if (errcode) {
   1a3e8:	2d00      	cmp	r5, #0
   1a3ea:	d0f5      	beq.n	1a3d8 <acl_handle+0x14>
   1a3ec:	4801      	ldr	r0, [pc, #4]	; (1a3f4 <acl_handle+0x30>)
   1a3ee:	f002 ff49 	bl	1d284 <z_impl_k_sem_give>
}
   1a3f2:	e7f1      	b.n	1a3d8 <acl_handle+0x14>
   1a3f4:	20000890 	.word	0x20000890

0001a3f8 <cmd_handle>:
{
   1a3f8:	b538      	push	{r3, r4, r5, lr}
   1a3fa:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a3fc:	f04f 30ff 	mov.w	r0, #4294967295
   1a400:	f04f 31ff 	mov.w	r1, #4294967295
   1a404:	f7ff ffac 	bl	1a360 <multithreading_lock_acquire>
	if (!errcode) {
   1a408:	4604      	mov	r4, r0
   1a40a:	b110      	cbz	r0, 1a412 <cmd_handle+0x1a>
	if (errcode) {
   1a40c:	b144      	cbz	r4, 1a420 <cmd_handle+0x28>
}
   1a40e:	4620      	mov	r0, r4
   1a410:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   1a412:	68a8      	ldr	r0, [r5, #8]
   1a414:	f000 f8b8 	bl	1a588 <hci_internal_cmd_put>
   1a418:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1a41a:	f7ff ffab 	bl	1a374 <multithreading_lock_release>
   1a41e:	e7f5      	b.n	1a40c <cmd_handle+0x14>
	z_impl_k_sem_give(sem);
   1a420:	4801      	ldr	r0, [pc, #4]	; (1a428 <cmd_handle+0x30>)
   1a422:	f002 ff2f 	bl	1d284 <z_impl_k_sem_give>
	return 0;
   1a426:	e7f2      	b.n	1a40e <cmd_handle+0x16>
   1a428:	20000890 	.word	0x20000890

0001a42c <rand_prio_high_vector_get>:
{
   1a42c:	b538      	push	{r3, r4, r5, lr}
   1a42e:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1a430:	4b07      	ldr	r3, [pc, #28]	; (1a450 <rand_prio_high_vector_get+0x24>)
   1a432:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1a434:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1a436:	685d      	ldr	r5, [r3, #4]
   1a438:	b13d      	cbz	r5, 1a44a <rand_prio_high_vector_get+0x1e>
   1a43a:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1a43c:	2300      	movs	r3, #0
   1a43e:	4621      	mov	r1, r4
   1a440:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1a442:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1a446:	b2c0      	uxtb	r0, r0
   1a448:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1a44a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a44e:	e7f8      	b.n	1a442 <rand_prio_high_vector_get+0x16>
   1a450:	20003cfc 	.word	0x20003cfc

0001a454 <rand_prio_low_vector_get>:
{
   1a454:	b538      	push	{r3, r4, r5, lr}
   1a456:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1a458:	4b07      	ldr	r3, [pc, #28]	; (1a478 <rand_prio_low_vector_get+0x24>)
   1a45a:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   1a45c:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   1a45e:	685d      	ldr	r5, [r3, #4]
   1a460:	b13d      	cbz	r5, 1a472 <rand_prio_low_vector_get+0x1e>
   1a462:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   1a464:	2300      	movs	r3, #0
   1a466:	4621      	mov	r1, r4
   1a468:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1a46a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1a46e:	b2c0      	uxtb	r0, r0
   1a470:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1a472:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a476:	e7f8      	b.n	1a46a <rand_prio_low_vector_get+0x16>
   1a478:	20003cfc 	.word	0x20003cfc

0001a47c <recv_thread>:
{
   1a47c:	b538      	push	{r3, r4, r5, lr}
	bool received_data = false;
   1a47e:	2500      	movs	r5, #0
	bool received_evt = false;
   1a480:	462c      	mov	r4, r5
   1a482:	e00a      	b.n	1a49a <recv_thread+0x1e>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   1a484:	4d0b      	ldr	r5, [pc, #44]	; (1a4b4 <recv_thread+0x38>)
   1a486:	4628      	mov	r0, r5
   1a488:	f00c fa5a 	bl	26940 <fetch_and_process_hci_evt>
   1a48c:	4604      	mov	r4, r0
			received_data = fetch_and_process_acl_data(&hci_buffer[0]);
   1a48e:	4628      	mov	r0, r5
   1a490:	f00c fa84 	bl	2699c <fetch_and_process_acl_data>
   1a494:	4605      	mov	r5, r0
	z_impl_k_yield();
   1a496:	f003 fc13 	bl	1dcc0 <z_impl_k_yield>
		if (!received_evt && !received_data) {
   1a49a:	2c00      	cmp	r4, #0
   1a49c:	d1f2      	bne.n	1a484 <recv_thread+0x8>
   1a49e:	2d00      	cmp	r5, #0
   1a4a0:	d1f0      	bne.n	1a484 <recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   1a4a2:	f04f 32ff 	mov.w	r2, #4294967295
   1a4a6:	f04f 33ff 	mov.w	r3, #4294967295
   1a4aa:	4803      	ldr	r0, [pc, #12]	; (1a4b8 <recv_thread+0x3c>)
   1a4ac:	f002 ff12 	bl	1d2d4 <z_impl_k_sem_take>
   1a4b0:	e7e8      	b.n	1a484 <recv_thread+0x8>
   1a4b2:	bf00      	nop
   1a4b4:	20003d00 	.word	0x20003d00
   1a4b8:	20000890 	.word	0x20000890

0001a4bc <hci_driver_open>:
{
   1a4bc:	b530      	push	{r4, r5, lr}
   1a4be:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a4c0:	4c28      	ldr	r4, [pc, #160]	; (1a564 <hci_driver_open+0xa8>)
   1a4c2:	2200      	movs	r2, #0
   1a4c4:	2300      	movs	r3, #0
   1a4c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a4ca:	2300      	movs	r3, #0
   1a4cc:	9304      	str	r3, [sp, #16]
   1a4ce:	f06f 0209 	mvn.w	r2, #9
   1a4d2:	9203      	str	r2, [sp, #12]
   1a4d4:	9302      	str	r3, [sp, #8]
   1a4d6:	9301      	str	r3, [sp, #4]
   1a4d8:	9300      	str	r3, [sp, #0]
   1a4da:	4b23      	ldr	r3, [pc, #140]	; (1a568 <hci_driver_open+0xac>)
   1a4dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a4e0:	4922      	ldr	r1, [pc, #136]	; (1a56c <hci_driver_open+0xb0>)
   1a4e2:	4620      	mov	r0, r4
   1a4e4:	f00c fffb 	bl	274de <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1a4e8:	4921      	ldr	r1, [pc, #132]	; (1a570 <hci_driver_open+0xb4>)
   1a4ea:	4620      	mov	r0, r4
   1a4ec:	f002 fcdc 	bl	1cea8 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1a4f0:	a80b      	add	r0, sp, #44	; 0x2c
   1a4f2:	f7ea fb35 	bl	4b60 <sdc_build_revision_get>
	err = configure_supported_features();
   1a4f6:	f00c fa6a 	bl	269ce <configure_supported_features>
	if (err) {
   1a4fa:	b118      	cbz	r0, 1a504 <hci_driver_open+0x48>
		return -err;
   1a4fc:	4244      	negs	r4, r0
}
   1a4fe:	4620      	mov	r0, r4
   1a500:	b011      	add	sp, #68	; 0x44
   1a502:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   1a504:	f00c fa7d 	bl	26a02 <configure_memory_usage>
	if (err) {
   1a508:	4604      	mov	r4, r0
   1a50a:	2800      	cmp	r0, #0
   1a50c:	d1f7      	bne.n	1a4fe <hci_driver_open+0x42>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1a50e:	4819      	ldr	r0, [pc, #100]	; (1a574 <hci_driver_open+0xb8>)
   1a510:	f002 fb28 	bl	1cb64 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1a514:	4b18      	ldr	r3, [pc, #96]	; (1a578 <hci_driver_open+0xbc>)
   1a516:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1a518:	b1e8      	cbz	r0, 1a556 <hci_driver_open+0x9a>
	sdc_rand_source_t rand_functions = {
   1a51a:	4a18      	ldr	r2, [pc, #96]	; (1a57c <hci_driver_open+0xc0>)
   1a51c:	ab08      	add	r3, sp, #32
   1a51e:	ca07      	ldmia	r2, {r0, r1, r2}
   1a520:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1a524:	4618      	mov	r0, r3
   1a526:	f7ea fcbd 	bl	4ea4 <sdc_rand_source_register>
	if (err) {
   1a52a:	4604      	mov	r4, r0
   1a52c:	b9b0      	cbnz	r0, 1a55c <hci_driver_open+0xa0>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1a52e:	f04f 30ff 	mov.w	r0, #4294967295
   1a532:	f04f 31ff 	mov.w	r1, #4294967295
   1a536:	f7ff ff13 	bl	1a360 <multithreading_lock_acquire>
	if (!err) {
   1a53a:	4605      	mov	r5, r0
   1a53c:	b118      	cbz	r0, 1a546 <hci_driver_open+0x8a>
	if (err < 0) {
   1a53e:	2d00      	cmp	r5, #0
   1a540:	dadd      	bge.n	1a4fe <hci_driver_open+0x42>
		return err;
   1a542:	462c      	mov	r4, r5
   1a544:	e7db      	b.n	1a4fe <hci_driver_open+0x42>
		err = sdc_enable(host_signal, sdc_mempool);
   1a546:	490e      	ldr	r1, [pc, #56]	; (1a580 <hci_driver_open+0xc4>)
   1a548:	480e      	ldr	r0, [pc, #56]	; (1a584 <hci_driver_open+0xc8>)
   1a54a:	f7ea fb71 	bl	4c30 <sdc_enable>
   1a54e:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1a550:	f7ff ff10 	bl	1a374 <multithreading_lock_release>
   1a554:	e7f3      	b.n	1a53e <hci_driver_open+0x82>
		return -ENODEV;
   1a556:	f06f 0412 	mvn.w	r4, #18
   1a55a:	e7d0      	b.n	1a4fe <hci_driver_open+0x42>
		return -EINVAL;
   1a55c:	f06f 0415 	mvn.w	r4, #21
   1a560:	e7cd      	b.n	1a4fe <hci_driver_open+0x42>
   1a562:	bf00      	nop
   1a564:	20002608 	.word	0x20002608
   1a568:	0001a47d 	.word	0x0001a47d
   1a56c:	20007ee0 	.word	0x20007ee0
   1a570:	00028e38 	.word	0x00028e38
   1a574:	00028e0c 	.word	0x00028e0c
   1a578:	20003cfc 	.word	0x20003cfc
   1a57c:	00028390 	.word	0x00028390
   1a580:	20003e00 	.word	0x20003e00
   1a584:	0001a39d 	.word	0x0001a39d

0001a588 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1a588:	4b0b      	ldr	r3, [pc, #44]	; (1a5b8 <hci_internal_cmd_put+0x30>)
   1a58a:	781b      	ldrb	r3, [r3, #0]
   1a58c:	b96b      	cbnz	r3, 1a5aa <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   1a58e:	7883      	ldrb	r3, [r0, #2]
   1a590:	3303      	adds	r3, #3
   1a592:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1a596:	dc0b      	bgt.n	1a5b0 <hci_internal_cmd_put+0x28>
{
   1a598:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   1a59a:	4c07      	ldr	r4, [pc, #28]	; (1a5b8 <hci_internal_cmd_put+0x30>)
   1a59c:	1c61      	adds	r1, r4, #1
   1a59e:	f00c fd3a 	bl	27016 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1a5a2:	2301      	movs	r3, #1
   1a5a4:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1a5a6:	2000      	movs	r0, #0
}
   1a5a8:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   1a5aa:	f04f 30ff 	mov.w	r0, #4294967295
   1a5ae:	4770      	bx	lr
		return -EINVAL;
   1a5b0:	f06f 0015 	mvn.w	r0, #21
}
   1a5b4:	4770      	bx	lr
   1a5b6:	bf00      	nop
   1a5b8:	20005e38 	.word	0x20005e38

0001a5bc <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1a5bc:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1a5be:	4b07      	ldr	r3, [pc, #28]	; (1a5dc <hci_internal_evt_get+0x20>)
   1a5c0:	781b      	ldrb	r3, [r3, #0]
   1a5c2:	b913      	cbnz	r3, 1a5ca <hci_internal_evt_get+0xe>
		cmd_complete_or_status.occurred = false;

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
   1a5c4:	f7f3 fbcc 	bl	dd60 <sdc_hci_evt_get>
}
   1a5c8:	bd10      	pop	{r4, pc}
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1a5ca:	4c04      	ldr	r4, [pc, #16]	; (1a5dc <hci_internal_evt_get+0x20>)
   1a5cc:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1a5ce:	3202      	adds	r2, #2
   1a5d0:	1c61      	adds	r1, r4, #1
   1a5d2:	f008 fa2c 	bl	22a2e <memcpy>
		cmd_complete_or_status.occurred = false;
   1a5d6:	2000      	movs	r0, #0
   1a5d8:	7020      	strb	r0, [r4, #0]
		return 0;
   1a5da:	e7f5      	b.n	1a5c8 <hci_internal_evt_get+0xc>
   1a5dc:	20005e38 	.word	0x20005e38

0001a5e0 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1a5e0:	b538      	push	{r3, r4, r5, lr}
   1a5e2:	4605      	mov	r5, r0
   1a5e4:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   1a5e6:	4b0a      	ldr	r3, [pc, #40]	; (1a610 <bt_rand+0x30>)
   1a5e8:	681b      	ldr	r3, [r3, #0]
   1a5ea:	b13b      	cbz	r3, 1a5fc <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1a5ec:	4b08      	ldr	r3, [pc, #32]	; (1a610 <bt_rand+0x30>)
   1a5ee:	6818      	ldr	r0, [r3, #0]
   1a5f0:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   1a5f2:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   1a5f4:	681b      	ldr	r3, [r3, #0]
   1a5f6:	4629      	mov	r1, r5
   1a5f8:	4798      	blx	r3
}
   1a5fa:	bd38      	pop	{r3, r4, r5, pc}
   1a5fc:	4805      	ldr	r0, [pc, #20]	; (1a614 <bt_rand+0x34>)
   1a5fe:	f002 fab1 	bl	1cb64 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1a602:	4b03      	ldr	r3, [pc, #12]	; (1a610 <bt_rand+0x30>)
   1a604:	6018      	str	r0, [r3, #0]
		if (!dev) {
   1a606:	2800      	cmp	r0, #0
   1a608:	d1f0      	bne.n	1a5ec <bt_rand+0xc>
			return -ENODEV;
   1a60a:	f06f 0012 	mvn.w	r0, #18
   1a60e:	e7f4      	b.n	1a5fa <bt_rand+0x1a>
   1a610:	20005e80 	.word	0x20005e80
   1a614:	00028e0c 	.word	0x00028e0c

0001a618 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1a618:	b510      	push	{r4, lr}
   1a61a:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   1a61c:	f00c fd59 	bl	270d2 <m_config_clock_source_get>
   1a620:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1a624:	2332      	movs	r3, #50	; 0x32
   1a626:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1a62a:	2300      	movs	r3, #0
   1a62c:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   1a630:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   1a634:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1a638:	4a0c      	ldr	r2, [pc, #48]	; (1a66c <mpsl_lib_init+0x54>)
   1a63a:	2119      	movs	r1, #25
   1a63c:	4668      	mov	r0, sp
   1a63e:	f7ea f8b3 	bl	47a8 <mpsl_init>
	if (err) {
   1a642:	4604      	mov	r4, r0
   1a644:	b110      	cbz	r0, 1a64c <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1a646:	4620      	mov	r0, r4
   1a648:	b002      	add	sp, #8
   1a64a:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a64c:	2201      	movs	r2, #1
   1a64e:	2100      	movs	r1, #0
   1a650:	2008      	movs	r0, #8
   1a652:	f7f9 fbd9 	bl	13e08 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a656:	2201      	movs	r2, #1
   1a658:	2100      	movs	r1, #0
   1a65a:	200b      	movs	r0, #11
   1a65c:	f7f9 fbd4 	bl	13e08 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a660:	2201      	movs	r2, #1
   1a662:	2100      	movs	r1, #0
   1a664:	4610      	mov	r0, r2
   1a666:	f7f9 fbcf 	bl	13e08 <z_arm_irq_priority_set>
	return 0;
   1a66a:	e7ec      	b.n	1a646 <mpsl_lib_init+0x2e>
   1a66c:	000270c5 	.word	0x000270c5

0001a670 <signal_thread>:
{
   1a670:	b538      	push	{r3, r4, r5, lr}
		k_sem_take(&sem_signal, K_FOREVER);
   1a672:	f04f 34ff 	mov.w	r4, #4294967295
   1a676:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   1a67a:	4622      	mov	r2, r4
   1a67c:	462b      	mov	r3, r5
   1a67e:	4806      	ldr	r0, [pc, #24]	; (1a698 <signal_thread+0x28>)
   1a680:	f002 fe28 	bl	1d2d4 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a684:	4620      	mov	r0, r4
   1a686:	4629      	mov	r1, r5
   1a688:	f7ff fe6a 	bl	1a360 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1a68c:	f7f2 feb1 	bl	d3f2 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1a690:	f7ff fe70 	bl	1a374 <multithreading_lock_release>
	while (true) {
   1a694:	e7ed      	b.n	1a672 <signal_thread+0x2>
   1a696:	bf00      	nop
   1a698:	200008a8 	.word	0x200008a8

0001a69c <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1a69c:	b530      	push	{r4, r5, lr}
   1a69e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a6a0:	4d0f      	ldr	r5, [pc, #60]	; (1a6e0 <mpsl_signal_thread_init+0x44>)
   1a6a2:	2200      	movs	r2, #0
   1a6a4:	2300      	movs	r3, #0
   1a6a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a6aa:	2400      	movs	r4, #0
   1a6ac:	9404      	str	r4, [sp, #16]
   1a6ae:	f06f 0309 	mvn.w	r3, #9
   1a6b2:	9303      	str	r3, [sp, #12]
   1a6b4:	9402      	str	r4, [sp, #8]
   1a6b6:	9401      	str	r4, [sp, #4]
   1a6b8:	9400      	str	r4, [sp, #0]
   1a6ba:	4b0a      	ldr	r3, [pc, #40]	; (1a6e4 <mpsl_signal_thread_init+0x48>)
   1a6bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a6c0:	4909      	ldr	r1, [pc, #36]	; (1a6e8 <mpsl_signal_thread_init+0x4c>)
   1a6c2:	4628      	mov	r0, r5
   1a6c4:	f00c ff0b 	bl	274de <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1a6c8:	4908      	ldr	r1, [pc, #32]	; (1a6ec <mpsl_signal_thread_init+0x50>)
   1a6ca:	4628      	mov	r0, r5
   1a6cc:	f002 fbec 	bl	1cea8 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1a6d0:	4622      	mov	r2, r4
   1a6d2:	2104      	movs	r1, #4
   1a6d4:	2019      	movs	r0, #25
   1a6d6:	f7f9 fb97 	bl	13e08 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1a6da:	4620      	mov	r0, r4
   1a6dc:	b009      	add	sp, #36	; 0x24
   1a6de:	bd30      	pop	{r4, r5, pc}
   1a6e0:	200026c0 	.word	0x200026c0
   1a6e4:	0001a671 	.word	0x0001a671
   1a6e8:	20008300 	.word	0x20008300
   1a6ec:	00028e70 	.word	0x00028e70

0001a6f0 <mpsl_low_prio_irq_handler>:
{
   1a6f0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1a6f2:	4802      	ldr	r0, [pc, #8]	; (1a6fc <mpsl_low_prio_irq_handler+0xc>)
   1a6f4:	f002 fdc6 	bl	1d284 <z_impl_k_sem_give>
}
   1a6f8:	bd08      	pop	{r3, pc}
   1a6fa:	bf00      	nop
   1a6fc:	200008a8 	.word	0x200008a8

0001a700 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   1a700:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1a702:	4b02      	ldr	r3, [pc, #8]	; (1a70c <mpsl_hfclk_callback+0xc>)
   1a704:	681b      	ldr	r3, [r3, #0]
   1a706:	2000      	movs	r0, #0
   1a708:	4798      	blx	r3
}
   1a70a:	bd08      	pop	{r3, pc}
   1a70c:	20005e84 	.word	0x20005e84

0001a710 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1a710:	b508      	push	{r3, lr}
	switch (domain) {
   1a712:	b128      	cbz	r0, 1a720 <nrfx_clock_start+0x10>
   1a714:	2801      	cmp	r0, #1
   1a716:	d102      	bne.n	1a71e <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1a718:	4804      	ldr	r0, [pc, #16]	; (1a72c <nrfx_clock_start+0x1c>)
   1a71a:	f7e9 fec3 	bl	44a4 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1a71e:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1a720:	4b03      	ldr	r3, [pc, #12]	; (1a730 <nrfx_clock_start+0x20>)
   1a722:	681b      	ldr	r3, [r3, #0]
   1a724:	2001      	movs	r0, #1
   1a726:	4798      	blx	r3
}
   1a728:	e7f9      	b.n	1a71e <nrfx_clock_start+0xe>
   1a72a:	bf00      	nop
   1a72c:	0001a701 	.word	0x0001a701
   1a730:	20005e84 	.word	0x20005e84

0001a734 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1a734:	4b01      	ldr	r3, [pc, #4]	; (1a73c <nrfx_clock_init+0x8>)
   1a736:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1a738:	4801      	ldr	r0, [pc, #4]	; (1a740 <nrfx_clock_init+0xc>)
   1a73a:	4770      	bx	lr
   1a73c:	20005e84 	.word	0x20005e84
   1a740:	0bad0000 	.word	0x0bad0000

0001a744 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   1a744:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1a748:	4905      	ldr	r1, [pc, #20]	; (1a760 <__NVIC_SystemReset+0x1c>)
   1a74a:	68ca      	ldr	r2, [r1, #12]
   1a74c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1a750:	4b04      	ldr	r3, [pc, #16]	; (1a764 <__NVIC_SystemReset+0x20>)
   1a752:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1a754:	60cb      	str	r3, [r1, #12]
   1a756:	f3bf 8f4f 	dsb	sy
    __NOP();
   1a75a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1a75c:	e7fd      	b.n	1a75a <__NVIC_SystemReset+0x16>
   1a75e:	bf00      	nop
   1a760:	e000ed00 	.word	0xe000ed00
   1a764:	05fa0004 	.word	0x05fa0004

0001a768 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a768:	4b03      	ldr	r3, [pc, #12]	; (1a778 <nrf52_errata_36+0x10>)
   1a76a:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a76c:	2b08      	cmp	r3, #8
   1a76e:	d001      	beq.n	1a774 <nrf52_errata_36+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1a770:	2000      	movs	r0, #0
   1a772:	4770      	bx	lr
                        return true;
   1a774:	2001      	movs	r0, #1
    #endif
}
   1a776:	4770      	bx	lr
   1a778:	10000130 	.word	0x10000130

0001a77c <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a77c:	4b03      	ldr	r3, [pc, #12]	; (1a78c <nrf52_errata_66+0x10>)
   1a77e:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a780:	2b08      	cmp	r3, #8
   1a782:	d001      	beq.n	1a788 <nrf52_errata_66+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1a784:	2000      	movs	r0, #0
   1a786:	4770      	bx	lr
                        return true;
   1a788:	2001      	movs	r0, #1
    #endif
}
   1a78a:	4770      	bx	lr
   1a78c:	10000130 	.word	0x10000130

0001a790 <nrf52_errata_98>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a790:	4b08      	ldr	r3, [pc, #32]	; (1a7b4 <nrf52_errata_98+0x24>)
   1a792:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a794:	3304      	adds	r3, #4
   1a796:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a798:	2a08      	cmp	r2, #8
   1a79a:	d001      	beq.n	1a7a0 <nrf52_errata_98+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1a79c:	2000      	movs	r0, #0
   1a79e:	4770      	bx	lr
                switch(var2)
   1a7a0:	2b00      	cmp	r3, #0
   1a7a2:	d804      	bhi.n	1a7ae <nrf52_errata_98+0x1e>
   1a7a4:	e8df f003 	tbb	[pc, r3]
   1a7a8:	01          	.byte	0x01
   1a7a9:	00          	.byte	0x00
            if (var1 == 0x08)
   1a7aa:	2001      	movs	r0, #1
   1a7ac:	4770      	bx	lr
                        return false;
   1a7ae:	2000      	movs	r0, #0
    #endif
}
   1a7b0:	4770      	bx	lr
   1a7b2:	bf00      	nop
   1a7b4:	10000130 	.word	0x10000130

0001a7b8 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a7b8:	4b08      	ldr	r3, [pc, #32]	; (1a7dc <nrf52_errata_103+0x24>)
   1a7ba:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a7bc:	3304      	adds	r3, #4
   1a7be:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a7c0:	2a08      	cmp	r2, #8
   1a7c2:	d001      	beq.n	1a7c8 <nrf52_errata_103+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1a7c4:	2000      	movs	r0, #0
   1a7c6:	4770      	bx	lr
                switch(var2)
   1a7c8:	2b00      	cmp	r3, #0
   1a7ca:	d804      	bhi.n	1a7d6 <nrf52_errata_103+0x1e>
   1a7cc:	e8df f003 	tbb	[pc, r3]
   1a7d0:	01          	.byte	0x01
   1a7d1:	00          	.byte	0x00
            if (var1 == 0x08)
   1a7d2:	2001      	movs	r0, #1
   1a7d4:	4770      	bx	lr
                        return false;
   1a7d6:	2000      	movs	r0, #0
    #endif
}
   1a7d8:	4770      	bx	lr
   1a7da:	bf00      	nop
   1a7dc:	10000130 	.word	0x10000130

0001a7e0 <nrf52_errata_115>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a7e0:	4b08      	ldr	r3, [pc, #32]	; (1a804 <nrf52_errata_115+0x24>)
   1a7e2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a7e4:	3304      	adds	r3, #4
   1a7e6:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a7e8:	2a08      	cmp	r2, #8
   1a7ea:	d001      	beq.n	1a7f0 <nrf52_errata_115+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1a7ec:	2000      	movs	r0, #0
   1a7ee:	4770      	bx	lr
                switch(var2)
   1a7f0:	2b00      	cmp	r3, #0
   1a7f2:	d804      	bhi.n	1a7fe <nrf52_errata_115+0x1e>
   1a7f4:	e8df f003 	tbb	[pc, r3]
   1a7f8:	01          	.byte	0x01
   1a7f9:	00          	.byte	0x00
            if (var1 == 0x08)
   1a7fa:	2001      	movs	r0, #1
   1a7fc:	4770      	bx	lr
                        return false;
   1a7fe:	2000      	movs	r0, #0
    #endif
}
   1a800:	4770      	bx	lr
   1a802:	bf00      	nop
   1a804:	10000130 	.word	0x10000130

0001a808 <nrf52_errata_120>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a808:	4b08      	ldr	r3, [pc, #32]	; (1a82c <nrf52_errata_120+0x24>)
   1a80a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a80c:	3304      	adds	r3, #4
   1a80e:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a810:	2a08      	cmp	r2, #8
   1a812:	d001      	beq.n	1a818 <nrf52_errata_120+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1a814:	2000      	movs	r0, #0
   1a816:	4770      	bx	lr
                switch(var2)
   1a818:	2b00      	cmp	r3, #0
   1a81a:	d804      	bhi.n	1a826 <nrf52_errata_120+0x1e>
   1a81c:	e8df f003 	tbb	[pc, r3]
   1a820:	01          	.byte	0x01
   1a821:	00          	.byte	0x00
            if (var1 == 0x08)
   1a822:	2001      	movs	r0, #1
   1a824:	4770      	bx	lr
                        return false;
   1a826:	2000      	movs	r0, #0
    #endif
}
   1a828:	4770      	bx	lr
   1a82a:	bf00      	nop
   1a82c:	10000130 	.word	0x10000130

0001a830 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a830:	4b03      	ldr	r3, [pc, #12]	; (1a840 <nrf52_errata_136+0x10>)
   1a832:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a834:	2b08      	cmp	r3, #8
   1a836:	d001      	beq.n	1a83c <nrf52_errata_136+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1a838:	2000      	movs	r0, #0
   1a83a:	4770      	bx	lr
                        return true;
   1a83c:	2001      	movs	r0, #1
    #endif
}
   1a83e:	4770      	bx	lr
   1a840:	10000130 	.word	0x10000130

0001a844 <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a844:	4b06      	ldr	r3, [pc, #24]	; (1a860 <nrf52_errata_249+0x1c>)
   1a846:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a848:	4a06      	ldr	r2, [pc, #24]	; (1a864 <nrf52_errata_249+0x20>)
   1a84a:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a84c:	2b08      	cmp	r3, #8
   1a84e:	d001      	beq.n	1a854 <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1a850:	2000      	movs	r0, #0
   1a852:	4770      	bx	lr
                switch(var2)
   1a854:	2a03      	cmp	r2, #3
   1a856:	d801      	bhi.n	1a85c <nrf52_errata_249+0x18>
   1a858:	2000      	movs	r0, #0
   1a85a:	4770      	bx	lr
                        return true;
   1a85c:	2001      	movs	r0, #1
    #endif
}
   1a85e:	4770      	bx	lr
   1a860:	10000130 	.word	0x10000130
   1a864:	10000134 	.word	0x10000134

0001a868 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1a868:	4b02      	ldr	r3, [pc, #8]	; (1a874 <nvmc_wait+0xc>)
   1a86a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1a86e:	2b00      	cmp	r3, #0
   1a870:	d0fa      	beq.n	1a868 <nvmc_wait>
}
   1a872:	4770      	bx	lr
   1a874:	4001e000 	.word	0x4001e000

0001a878 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   1a878:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1a87a:	4b03      	ldr	r3, [pc, #12]	; (1a888 <nvmc_config+0x10>)
   1a87c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   1a880:	f7ff fff2 	bl	1a868 <nvmc_wait>
}
   1a884:	bd08      	pop	{r3, pc}
   1a886:	bf00      	nop
   1a888:	4001e000 	.word	0x4001e000

0001a88c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1a88c:	4b01      	ldr	r3, [pc, #4]	; (1a894 <SystemCoreClockUpdate+0x8>)
   1a88e:	4a02      	ldr	r2, [pc, #8]	; (1a898 <SystemCoreClockUpdate+0xc>)
   1a890:	601a      	str	r2, [r3, #0]
}
   1a892:	4770      	bx	lr
   1a894:	200006ec 	.word	0x200006ec
   1a898:	03d09000 	.word	0x03d09000

0001a89c <SystemInit>:

void SystemInit(void)
{
   1a89c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1a89e:	f7ff ff63 	bl	1a768 <nrf52_errata_36>
   1a8a2:	b140      	cbz	r0, 1a8b6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1a8a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a8a8:	2200      	movs	r2, #0
   1a8aa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1a8ae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1a8b2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1a8b6:	f7ff ff61 	bl	1a77c <nrf52_errata_66>
   1a8ba:	2800      	cmp	r0, #0
   1a8bc:	d046      	beq.n	1a94c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1a8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a8c2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1a8c6:	4b5d      	ldr	r3, [pc, #372]	; (1aa3c <SystemInit+0x1a0>)
   1a8c8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1a8cc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1a8d0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1a8d4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1a8d8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1a8dc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1a8e0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1a8e4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1a8e8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1a8ec:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1a8f0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1a8f4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1a8f8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1a8fc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1a900:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1a904:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1a908:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1a90c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1a910:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1a914:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1a918:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1a91c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1a920:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1a924:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1a928:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1a92c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1a930:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1a934:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1a938:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1a93c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1a940:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1a944:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1a948:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1a94c:	f7ff ff20 	bl	1a790 <nrf52_errata_98>
   1a950:	b110      	cbz	r0, 1a958 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1a952:	4b3b      	ldr	r3, [pc, #236]	; (1aa40 <SystemInit+0x1a4>)
   1a954:	4a3b      	ldr	r2, [pc, #236]	; (1aa44 <SystemInit+0x1a8>)
   1a956:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1a958:	f7ff ff2e 	bl	1a7b8 <nrf52_errata_103>
   1a95c:	b118      	cbz	r0, 1a966 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1a95e:	4b3a      	ldr	r3, [pc, #232]	; (1aa48 <SystemInit+0x1ac>)
   1a960:	22fb      	movs	r2, #251	; 0xfb
   1a962:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1a966:	f7ff ff3b 	bl	1a7e0 <nrf52_errata_115>
   1a96a:	b148      	cbz	r0, 1a980 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1a96c:	4937      	ldr	r1, [pc, #220]	; (1aa4c <SystemInit+0x1b0>)
   1a96e:	680b      	ldr	r3, [r1, #0]
   1a970:	f023 030f 	bic.w	r3, r3, #15
   1a974:	4a36      	ldr	r2, [pc, #216]	; (1aa50 <SystemInit+0x1b4>)
   1a976:	6812      	ldr	r2, [r2, #0]
   1a978:	f002 020f 	and.w	r2, r2, #15
   1a97c:	4313      	orrs	r3, r2
   1a97e:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1a980:	f7ff ff42 	bl	1a808 <nrf52_errata_120>
   1a984:	b118      	cbz	r0, 1a98e <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1a986:	4b33      	ldr	r3, [pc, #204]	; (1aa54 <SystemInit+0x1b8>)
   1a988:	f44f 7200 	mov.w	r2, #512	; 0x200
   1a98c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1a98e:	f7ff ff4f 	bl	1a830 <nrf52_errata_136>
   1a992:	b160      	cbz	r0, 1a9ae <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1a994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a998:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1a99c:	f013 0f01 	tst.w	r3, #1
   1a9a0:	d005      	beq.n	1a9ae <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1a9a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a9a6:	f06f 0201 	mvn.w	r2, #1
   1a9aa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   1a9ae:	f7ff ff49 	bl	1a844 <nrf52_errata_249>
   1a9b2:	b138      	cbz	r0, 1a9c4 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1a9b4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a9b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1a9bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a9c0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   1a9c4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a9c8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
   1a9cc:	f013 0f01 	tst.w	r3, #1
   1a9d0:	d10e      	bne.n	1a9f0 <SystemInit+0x154>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a9d2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a9d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1a9da:	2b00      	cmp	r3, #0
   1a9dc:	db1a      	blt.n	1aa14 <SystemInit+0x178>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1a9de:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a9e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a9e6:	2b00      	cmp	r3, #0
   1a9e8:	db14      	blt.n	1aa14 <SystemInit+0x178>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   1a9ea:	f7ff ff4f 	bl	1a88c <SystemCoreClockUpdate>
}
   1a9ee:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   1a9f0:	2001      	movs	r0, #1
   1a9f2:	f7ff ff41 	bl	1a878 <nvmc_config>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   1a9f6:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   1a9fa:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   1a9fe:	f023 0301 	bic.w	r3, r3, #1
   1aa02:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            nvmc_wait();
   1aa06:	f7ff ff2f 	bl	1a868 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   1aa0a:	2000      	movs	r0, #0
   1aa0c:	f7ff ff34 	bl	1a878 <nvmc_config>
            NVIC_SystemReset();
   1aa10:	f7ff fe98 	bl	1a744 <__NVIC_SystemReset>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   1aa14:	2001      	movs	r0, #1
   1aa16:	f7ff ff2f 	bl	1a878 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1aa1a:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   1aa1e:	2512      	movs	r5, #18
   1aa20:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   1aa24:	f7ff ff20 	bl	1a868 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1aa28:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   1aa2c:	f7ff ff1c 	bl	1a868 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   1aa30:	2000      	movs	r0, #0
   1aa32:	f7ff ff21 	bl	1a878 <nvmc_config>
            NVIC_SystemReset();
   1aa36:	f7ff fe85 	bl	1a744 <__NVIC_SystemReset>
   1aa3a:	bf00      	nop
   1aa3c:	4000c000 	.word	0x4000c000
   1aa40:	4000568c 	.word	0x4000568c
   1aa44:	00038148 	.word	0x00038148
   1aa48:	4000f000 	.word	0x4000f000
   1aa4c:	40000ee4 	.word	0x40000ee4
   1aa50:	10000258 	.word	0x10000258
   1aa54:	40029640 	.word	0x40029640

0001aa58 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
   1aa58:	4b04      	ldr	r3, [pc, #16]	; (1aa6c <is_allocated_channel+0x14>)
   1aa5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1aa5c:	2301      	movs	r3, #1
   1aa5e:	4083      	lsls	r3, r0
   1aa60:	421a      	tst	r2, r3
}
   1aa62:	bf14      	ite	ne
   1aa64:	2001      	movne	r0, #1
   1aa66:	2000      	moveq	r0, #0
   1aa68:	4770      	bx	lr
   1aa6a:	bf00      	nop
   1aa6c:	20005e88 	.word	0x20005e88

0001aa70 <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
   1aa70:	2301      	movs	r3, #1
   1aa72:	fa03 f000 	lsl.w	r0, r3, r0
   1aa76:	4a02      	ldr	r2, [pc, #8]	; (1aa80 <channel_allocated_set+0x10>)
   1aa78:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1aa7a:	4303      	orrs	r3, r0
   1aa7c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
   1aa7e:	4770      	bx	lr
   1aa80:	20005e88 	.word	0x20005e88

0001aa84 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1aa84:	2301      	movs	r3, #1
   1aa86:	fa03 f000 	lsl.w	r0, r3, r0
   1aa8a:	4a03      	ldr	r2, [pc, #12]	; (1aa98 <channel_allocated_clr+0x14>)
   1aa8c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1aa8e:	ea23 0300 	bic.w	r3, r3, r0
   1aa92:	65d3      	str	r3, [r2, #92]	; 0x5c
}
   1aa94:	4770      	bx	lr
   1aa96:	bf00      	nop
   1aa98:	20005e88 	.word	0x20005e88

0001aa9c <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
   1aa9c:	b538      	push	{r3, r4, r5, lr}
   1aa9e:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1aaa0:	f00c fb65 	bl	2716e <is_app_channel>
   1aaa4:	b908      	cbnz	r0, 1aaaa <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1aaa6:	4809      	ldr	r0, [pc, #36]	; (1aacc <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1aaa8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1aaaa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aaae:	f3ef 8511 	mrs	r5, BASEPRI
   1aab2:	f383 8812 	msr	BASEPRI_MAX, r3
   1aab6:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
   1aaba:	4620      	mov	r0, r4
   1aabc:	f7ff ffe2 	bl	1aa84 <channel_allocated_clr>
	__asm__ volatile(
   1aac0:	f385 8811 	msr	BASEPRI, r5
   1aac4:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
   1aac8:	4801      	ldr	r0, [pc, #4]	; (1aad0 <nrfx_gpiote_channel_free+0x34>)
}
   1aaca:	e7ed      	b.n	1aaa8 <nrfx_gpiote_channel_free+0xc>
   1aacc:	0bad0004 	.word	0x0bad0004
   1aad0:	0bad0000 	.word	0x0bad0000

0001aad4 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1aad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1aad8:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1aada:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1aadc:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1aade:	4f17      	ldr	r7, [pc, #92]	; (1ab3c <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1aae0:	e013      	b.n	1ab0a <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
   1aae2:	4620      	mov	r0, r4
   1aae4:	f7ff ffc4 	bl	1aa70 <channel_allocated_set>
            *p_channel = ch_idx;
   1aae8:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
   1aaec:	4f14      	ldr	r7, [pc, #80]	; (1ab40 <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
   1aaee:	f386 8811 	msr	BASEPRI, r6
   1aaf2:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1aaf6:	4b12      	ldr	r3, [pc, #72]	; (1ab40 <nrfx_gpiote_channel_alloc+0x6c>)
   1aaf8:	429f      	cmp	r7, r3
   1aafa:	d01b      	beq.n	1ab34 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1aafc:	2301      	movs	r3, #1
   1aafe:	fa03 f309 	lsl.w	r3, r3, r9
   1ab02:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1ab06:	3401      	adds	r4, #1
   1ab08:	b2e4      	uxtb	r4, r4
   1ab0a:	b19d      	cbz	r5, 1ab34 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
   1ab0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab10:	f3ef 8611 	mrs	r6, BASEPRI
   1ab14:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab18:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1ab1c:	46a1      	mov	r9, r4
   1ab1e:	fa25 f304 	lsr.w	r3, r5, r4
   1ab22:	f013 0f01 	tst.w	r3, #1
   1ab26:	d0e2      	beq.n	1aaee <nrfx_gpiote_channel_alloc+0x1a>
   1ab28:	4620      	mov	r0, r4
   1ab2a:	f7ff ff95 	bl	1aa58 <is_allocated_channel>
   1ab2e:	2800      	cmp	r0, #0
   1ab30:	d1dd      	bne.n	1aaee <nrfx_gpiote_channel_alloc+0x1a>
   1ab32:	e7d6      	b.n	1aae2 <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ab34:	4638      	mov	r0, r7
   1ab36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ab3a:	bf00      	nop
   1ab3c:	0bad0002 	.word	0x0bad0002
   1ab40:	0bad0000 	.word	0x0bad0000

0001ab44 <nrf52_errata_197>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ab44:	4b06      	ldr	r3, [pc, #24]	; (1ab60 <nrf52_errata_197+0x1c>)
   1ab46:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1ab48:	4a06      	ldr	r2, [pc, #24]	; (1ab64 <nrf52_errata_197+0x20>)
   1ab4a:	6812      	ldr	r2, [r2, #0]
            if (var1 == 0x08)
   1ab4c:	2b08      	cmp	r3, #8
   1ab4e:	d001      	beq.n	1ab54 <nrf52_errata_197+0x10>
        return false;
   1ab50:	2000      	movs	r0, #0
   1ab52:	4770      	bx	lr
                switch(var2)
   1ab54:	2a02      	cmp	r2, #2
   1ab56:	d001      	beq.n	1ab5c <nrf52_errata_197+0x18>
                        return false;
   1ab58:	2000      	movs	r0, #0
   1ab5a:	4770      	bx	lr
                        return true;
   1ab5c:	2001      	movs	r0, #1
}
   1ab5e:	4770      	bx	lr
   1ab60:	10000130 	.word	0x10000130
   1ab64:	10000134 	.word	0x10000134

0001ab68 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   1ab68:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   1ab6a:	4b18      	ldr	r3, [pc, #96]	; (1abcc <nrfx_power_init+0x64>)
   1ab6c:	781b      	ldrb	r3, [r3, #0]
   1ab6e:	bb5b      	cbnz	r3, 1abc8 <nrfx_power_init+0x60>
   1ab70:	4604      	mov	r4, r0
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   1ab72:	7803      	ldrb	r3, [r0, #0]
   1ab74:	f3c3 0540 	ubfx	r5, r3, #1, #1
    if (enable && nrf52_errata_197())
   1ab78:	f013 0f02 	tst.w	r3, #2
   1ab7c:	d005      	beq.n	1ab8a <nrfx_power_init+0x22>
   1ab7e:	f7ff ffe1 	bl	1ab44 <nrf52_errata_197>
   1ab82:	b110      	cbz	r0, 1ab8a <nrfx_power_init+0x22>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   1ab84:	4b12      	ldr	r3, [pc, #72]	; (1abd0 <nrfx_power_init+0x68>)
   1ab86:	2201      	movs	r2, #1
   1ab88:	601a      	str	r2, [r3, #0]
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1ab8a:	b1b5      	cbz	r5, 1abba <nrfx_power_init+0x52>
   1ab8c:	2201      	movs	r2, #1
   1ab8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ab92:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
   1ab96:	7823      	ldrb	r3, [r4, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1ab98:	f013 0f01 	tst.w	r3, #1
   1ab9c:	d00f      	beq.n	1abbe <nrfx_power_init+0x56>
   1ab9e:	2201      	movs	r2, #1
   1aba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1aba4:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1aba8:	2000      	movs	r0, #0
   1abaa:	f7f9 f91f 	bl	13dec <arch_irq_is_enabled>
   1abae:	b140      	cbz	r0, 1abc2 <nrfx_power_init+0x5a>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   1abb0:	4b06      	ldr	r3, [pc, #24]	; (1abcc <nrfx_power_init+0x64>)
   1abb2:	2201      	movs	r2, #1
   1abb4:	701a      	strb	r2, [r3, #0]
    return NRFX_SUCCESS;
   1abb6:	4807      	ldr	r0, [pc, #28]	; (1abd4 <nrfx_power_init+0x6c>)
}
   1abb8:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1abba:	2200      	movs	r2, #0
   1abbc:	e7e7      	b.n	1ab8e <nrfx_power_init+0x26>
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1abbe:	2200      	movs	r2, #0
   1abc0:	e7ee      	b.n	1aba0 <nrfx_power_init+0x38>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1abc2:	f7f9 f8ef 	bl	13da4 <arch_irq_enable>
   1abc6:	e7f3      	b.n	1abb0 <nrfx_power_init+0x48>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1abc8:	4803      	ldr	r0, [pc, #12]	; (1abd8 <nrfx_power_init+0x70>)
   1abca:	e7f5      	b.n	1abb8 <nrfx_power_init+0x50>
   1abcc:	20006a85 	.word	0x20006a85
   1abd0:	40000638 	.word	0x40000638
   1abd4:	0bad0000 	.word	0x0bad0000
   1abd8:	0bad000c 	.word	0x0bad000c

0001abdc <nrfx_power_usbevt_uninit>:
                                     NRF_POWER_INT_USBREMOVED_MASK  |
                                     NRF_POWER_INT_USBPWRRDY_MASK);
}

void nrfx_power_usbevt_uninit(void)
{
   1abdc:	b508      	push	{r3, lr}
    nrfx_power_usbevt_disable();
   1abde:	f00c fad5 	bl	2718c <nrfx_power_usbevt_disable>
    m_usbevt_handler = NULL;
   1abe2:	4b02      	ldr	r3, [pc, #8]	; (1abec <nrfx_power_usbevt_uninit+0x10>)
   1abe4:	2200      	movs	r2, #0
   1abe6:	601a      	str	r2, [r3, #0]
}
   1abe8:	bd08      	pop	{r3, pc}
   1abea:	bf00      	nop
   1abec:	20005ef0 	.word	0x20005ef0

0001abf0 <nrfx_power_usbevt_init>:
{
   1abf0:	b510      	push	{r4, lr}
   1abf2:	4604      	mov	r4, r0
    nrfx_power_usbevt_uninit();
   1abf4:	f7ff fff2 	bl	1abdc <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   1abf8:	6823      	ldr	r3, [r4, #0]
   1abfa:	b10b      	cbz	r3, 1ac00 <nrfx_power_usbevt_init+0x10>
        m_usbevt_handler = p_config->handler;
   1abfc:	4a01      	ldr	r2, [pc, #4]	; (1ac04 <nrfx_power_usbevt_init+0x14>)
   1abfe:	6013      	str	r3, [r2, #0]
}
   1ac00:	bd10      	pop	{r4, pc}
   1ac02:	bf00      	nop
   1ac04:	20005ef0 	.word	0x20005ef0

0001ac08 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   1ac08:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
   1ac0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ac0e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   1ac12:	f014 0f04 	tst.w	r4, #4
   1ac16:	d00b      	beq.n	1ac30 <nrfx_power_irq_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ac18:	f503 7384 	add.w	r3, r3, #264	; 0x108
   1ac1c:	681b      	ldr	r3, [r3, #0]
    if (ret)
   1ac1e:	b11b      	cbz	r3, 1ac28 <nrfx_power_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ac20:	4a29      	ldr	r2, [pc, #164]	; (1acc8 <nrfx_power_irq_handler+0xc0>)
   1ac22:	2100      	movs	r1, #0
   1ac24:	6011      	str	r1, [r2, #0]
   1ac26:	6812      	ldr	r2, [r2, #0]
   1ac28:	b113      	cbz	r3, 1ac30 <nrfx_power_irq_handler+0x28>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   1ac2a:	4b28      	ldr	r3, [pc, #160]	; (1accc <nrfx_power_irq_handler+0xc4>)
   1ac2c:	681b      	ldr	r3, [r3, #0]
   1ac2e:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   1ac30:	f014 0f20 	tst.w	r4, #32
   1ac34:	d00b      	beq.n	1ac4e <nrfx_power_irq_handler+0x46>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ac36:	4b26      	ldr	r3, [pc, #152]	; (1acd0 <nrfx_power_irq_handler+0xc8>)
   1ac38:	681b      	ldr	r3, [r3, #0]
    if (ret)
   1ac3a:	b11b      	cbz	r3, 1ac44 <nrfx_power_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ac3c:	4a24      	ldr	r2, [pc, #144]	; (1acd0 <nrfx_power_irq_handler+0xc8>)
   1ac3e:	2100      	movs	r1, #0
   1ac40:	6011      	str	r1, [r2, #0]
   1ac42:	6812      	ldr	r2, [r2, #0]
   1ac44:	b11b      	cbz	r3, 1ac4e <nrfx_power_irq_handler+0x46>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   1ac46:	4b23      	ldr	r3, [pc, #140]	; (1acd4 <nrfx_power_irq_handler+0xcc>)
   1ac48:	681b      	ldr	r3, [r3, #0]
   1ac4a:	2000      	movs	r0, #0
   1ac4c:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   1ac4e:	f014 0f40 	tst.w	r4, #64	; 0x40
   1ac52:	d00b      	beq.n	1ac6c <nrfx_power_irq_handler+0x64>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ac54:	4b20      	ldr	r3, [pc, #128]	; (1acd8 <nrfx_power_irq_handler+0xd0>)
   1ac56:	681b      	ldr	r3, [r3, #0]
    if (ret)
   1ac58:	b11b      	cbz	r3, 1ac62 <nrfx_power_irq_handler+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ac5a:	4a1f      	ldr	r2, [pc, #124]	; (1acd8 <nrfx_power_irq_handler+0xd0>)
   1ac5c:	2100      	movs	r1, #0
   1ac5e:	6011      	str	r1, [r2, #0]
   1ac60:	6812      	ldr	r2, [r2, #0]
   1ac62:	b11b      	cbz	r3, 1ac6c <nrfx_power_irq_handler+0x64>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   1ac64:	4b1b      	ldr	r3, [pc, #108]	; (1acd4 <nrfx_power_irq_handler+0xcc>)
   1ac66:	681b      	ldr	r3, [r3, #0]
   1ac68:	2001      	movs	r0, #1
   1ac6a:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   1ac6c:	f014 0f80 	tst.w	r4, #128	; 0x80
   1ac70:	d00b      	beq.n	1ac8a <nrfx_power_irq_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ac72:	4b1a      	ldr	r3, [pc, #104]	; (1acdc <nrfx_power_irq_handler+0xd4>)
   1ac74:	681b      	ldr	r3, [r3, #0]
    if (ret)
   1ac76:	b11b      	cbz	r3, 1ac80 <nrfx_power_irq_handler+0x78>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ac78:	4a18      	ldr	r2, [pc, #96]	; (1acdc <nrfx_power_irq_handler+0xd4>)
   1ac7a:	2100      	movs	r1, #0
   1ac7c:	6011      	str	r1, [r2, #0]
   1ac7e:	6812      	ldr	r2, [r2, #0]
   1ac80:	b11b      	cbz	r3, 1ac8a <nrfx_power_irq_handler+0x82>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   1ac82:	4b17      	ldr	r3, [pc, #92]	; (1ace0 <nrfx_power_irq_handler+0xd8>)
   1ac84:	681b      	ldr	r3, [r3, #0]
   1ac86:	2000      	movs	r0, #0
   1ac88:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   1ac8a:	f414 7f80 	tst.w	r4, #256	; 0x100
   1ac8e:	d00b      	beq.n	1aca8 <nrfx_power_irq_handler+0xa0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ac90:	4b14      	ldr	r3, [pc, #80]	; (1ace4 <nrfx_power_irq_handler+0xdc>)
   1ac92:	681b      	ldr	r3, [r3, #0]
    if (ret)
   1ac94:	b11b      	cbz	r3, 1ac9e <nrfx_power_irq_handler+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ac96:	4a13      	ldr	r2, [pc, #76]	; (1ace4 <nrfx_power_irq_handler+0xdc>)
   1ac98:	2100      	movs	r1, #0
   1ac9a:	6011      	str	r1, [r2, #0]
   1ac9c:	6812      	ldr	r2, [r2, #0]
   1ac9e:	b11b      	cbz	r3, 1aca8 <nrfx_power_irq_handler+0xa0>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   1aca0:	4b0f      	ldr	r3, [pc, #60]	; (1ace0 <nrfx_power_irq_handler+0xd8>)
   1aca2:	681b      	ldr	r3, [r3, #0]
   1aca4:	2001      	movs	r0, #1
   1aca6:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   1aca8:	f414 7f00 	tst.w	r4, #512	; 0x200
   1acac:	d00b      	beq.n	1acc6 <nrfx_power_irq_handler+0xbe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1acae:	4b0e      	ldr	r3, [pc, #56]	; (1ace8 <nrfx_power_irq_handler+0xe0>)
   1acb0:	681b      	ldr	r3, [r3, #0]
    if (ret)
   1acb2:	b11b      	cbz	r3, 1acbc <nrfx_power_irq_handler+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1acb4:	4a0c      	ldr	r2, [pc, #48]	; (1ace8 <nrfx_power_irq_handler+0xe0>)
   1acb6:	2100      	movs	r1, #0
   1acb8:	6011      	str	r1, [r2, #0]
   1acba:	6812      	ldr	r2, [r2, #0]
   1acbc:	b11b      	cbz	r3, 1acc6 <nrfx_power_irq_handler+0xbe>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   1acbe:	4b08      	ldr	r3, [pc, #32]	; (1ace0 <nrfx_power_irq_handler+0xd8>)
   1acc0:	681b      	ldr	r3, [r3, #0]
   1acc2:	2002      	movs	r0, #2
   1acc4:	4798      	blx	r3
    }
#endif
}
   1acc6:	bd10      	pop	{r4, pc}
   1acc8:	40000108 	.word	0x40000108
   1accc:	20005ee8 	.word	0x20005ee8
   1acd0:	40000114 	.word	0x40000114
   1acd4:	20005eec 	.word	0x20005eec
   1acd8:	40000118 	.word	0x40000118
   1acdc:	4000011c 	.word	0x4000011c
   1ace0:	20005ef0 	.word	0x20005ef0
   1ace4:	40000120 	.word	0x40000120
   1ace8:	40000124 	.word	0x40000124

0001acec <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1acec:	2301      	movs	r3, #1
   1acee:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1acf0:	4a03      	ldr	r2, [pc, #12]	; (1ad00 <is_allocated_channel+0x14>)
   1acf2:	6812      	ldr	r2, [r2, #0]
   1acf4:	4213      	tst	r3, r2
}
   1acf6:	bf14      	ite	ne
   1acf8:	2001      	movne	r0, #1
   1acfa:	2000      	moveq	r0, #0
   1acfc:	4770      	bx	lr
   1acfe:	bf00      	nop
   1ad00:	20005ef4 	.word	0x20005ef4

0001ad04 <channel_allocated_set>:
   1ad04:	2301      	movs	r3, #1
   1ad06:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1ad0a:	4a02      	ldr	r2, [pc, #8]	; (1ad14 <channel_allocated_set+0x10>)
   1ad0c:	6813      	ldr	r3, [r2, #0]
   1ad0e:	4303      	orrs	r3, r0
   1ad10:	6013      	str	r3, [r2, #0]
}
   1ad12:	4770      	bx	lr
   1ad14:	20005ef4 	.word	0x20005ef4

0001ad18 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1ad18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ad1c:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1ad1e:	4b18      	ldr	r3, [pc, #96]	; (1ad80 <nrfx_ppi_channel_alloc+0x68>)
   1ad20:	681e      	ldr	r6, [r3, #0]
   1ad22:	43f6      	mvns	r6, r6
   1ad24:	f3c6 0613 	ubfx	r6, r6, #0, #20

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1ad28:	2400      	movs	r4, #0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1ad2a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1ad88 <nrfx_ppi_channel_alloc+0x70>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1ad2e:	e011      	b.n	1ad54 <nrfx_ppi_channel_alloc+0x3c>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
   1ad30:	4620      	mov	r0, r4
   1ad32:	f7ff ffe7 	bl	1ad04 <channel_allocated_set>
            *p_channel = channel;
   1ad36:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
   1ad3a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1ad84 <nrfx_ppi_channel_alloc+0x6c>
	__asm__ volatile(
   1ad3e:	f387 8811 	msr	BASEPRI, r7
   1ad42:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
   1ad46:	4b0f      	ldr	r3, [pc, #60]	; (1ad84 <nrfx_ppi_channel_alloc+0x6c>)
   1ad48:	4598      	cmp	r8, r3
   1ad4a:	d016      	beq.n	1ad7a <nrfx_ppi_channel_alloc+0x62>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1ad4c:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1ad50:	3401      	adds	r4, #1
   1ad52:	b2e4      	uxtb	r4, r4
   1ad54:	b18e      	cbz	r6, 1ad7a <nrfx_ppi_channel_alloc+0x62>
	__asm__ volatile(
   1ad56:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ad5a:	f3ef 8711 	mrs	r7, BASEPRI
   1ad5e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad62:	f3bf 8f6f 	isb	sy
   1ad66:	2501      	movs	r5, #1
   1ad68:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1ad6a:	4235      	tst	r5, r6
   1ad6c:	d0e7      	beq.n	1ad3e <nrfx_ppi_channel_alloc+0x26>
   1ad6e:	4620      	mov	r0, r4
   1ad70:	f7ff ffbc 	bl	1acec <is_allocated_channel>
   1ad74:	2800      	cmp	r0, #0
   1ad76:	d1e2      	bne.n	1ad3e <nrfx_ppi_channel_alloc+0x26>
   1ad78:	e7da      	b.n	1ad30 <nrfx_ppi_channel_alloc+0x18>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ad7a:	4640      	mov	r0, r8
   1ad7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ad80:	00028e6c 	.word	0x00028e6c
   1ad84:	0bad0000 	.word	0x0bad0000
   1ad88:	0bad0002 	.word	0x0bad0002

0001ad8c <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ad8c:	4b03      	ldr	r3, [pc, #12]	; (1ad9c <nrf52_errata_166+0x10>)
   1ad8e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1ad90:	2b08      	cmp	r3, #8
   1ad92:	d001      	beq.n	1ad98 <nrf52_errata_166+0xc>
        return false;
   1ad94:	2000      	movs	r0, #0
   1ad96:	4770      	bx	lr
                        return true;
   1ad98:	2001      	movs	r0, #1
}
   1ad9a:	4770      	bx	lr
   1ad9c:	10000130 	.word	0x10000130

0001ada0 <nrf52_errata_171>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ada0:	4b03      	ldr	r3, [pc, #12]	; (1adb0 <nrf52_errata_171+0x10>)
   1ada2:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1ada4:	2b08      	cmp	r3, #8
   1ada6:	d001      	beq.n	1adac <nrf52_errata_171+0xc>
        return false;
   1ada8:	2000      	movs	r0, #0
   1adaa:	4770      	bx	lr
                        return true;
   1adac:	2001      	movs	r0, #1
}
   1adae:	4770      	bx	lr
   1adb0:	10000130 	.word	0x10000130

0001adb4 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1adb4:	4b08      	ldr	r3, [pc, #32]	; (1add8 <nrf52_errata_187+0x24>)
   1adb6:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1adb8:	3304      	adds	r3, #4
   1adba:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1adbc:	2a08      	cmp	r2, #8
   1adbe:	d001      	beq.n	1adc4 <nrf52_errata_187+0x10>
        return false;
   1adc0:	2000      	movs	r0, #0
   1adc2:	4770      	bx	lr
                switch(var2)
   1adc4:	2b00      	cmp	r3, #0
   1adc6:	d804      	bhi.n	1add2 <nrf52_errata_187+0x1e>
   1adc8:	e8df f003 	tbb	[pc, r3]
   1adcc:	01          	.byte	0x01
   1adcd:	00          	.byte	0x00
            if (var1 == 0x08)
   1adce:	2000      	movs	r0, #0
   1add0:	4770      	bx	lr
                        return true;
   1add2:	2001      	movs	r0, #1
}
   1add4:	4770      	bx	lr
   1add6:	bf00      	nop
   1add8:	10000130 	.word	0x10000130

0001addc <nrf52_errata_199>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1addc:	4b03      	ldr	r3, [pc, #12]	; (1adec <nrf52_errata_199+0x10>)
   1adde:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1ade0:	2b08      	cmp	r3, #8
   1ade2:	d001      	beq.n	1ade8 <nrf52_errata_199+0xc>
        return false;
   1ade4:	2000      	movs	r0, #0
   1ade6:	4770      	bx	lr
                        return true;
   1ade8:	2001      	movs	r0, #1
}
   1adea:	4770      	bx	lr
   1adec:	10000130 	.word	0x10000130

0001adf0 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   1adf0:	b500      	push	{lr}
   1adf2:	b083      	sub	sp, #12
    m_bus_suspend = false;
   1adf4:	2300      	movs	r3, #0
   1adf6:	4a09      	ldr	r2, [pc, #36]	; (1ae1c <ev_usbreset_handler+0x2c>)
   1adf8:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   1adfa:	4a09      	ldr	r2, [pc, #36]	; (1ae20 <ev_usbreset_handler+0x30>)
   1adfc:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   1adfe:	f8ad 3005 	strh.w	r3, [sp, #5]
   1ae02:	f88d 3007 	strb.w	r3, [sp, #7]
   1ae06:	2301      	movs	r3, #1
   1ae08:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   1ae0c:	4b05      	ldr	r3, [pc, #20]	; (1ae24 <ev_usbreset_handler+0x34>)
   1ae0e:	681b      	ldr	r3, [r3, #0]
   1ae10:	a801      	add	r0, sp, #4
   1ae12:	4798      	blx	r3
}
   1ae14:	b003      	add	sp, #12
   1ae16:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae1a:	bf00      	nop
   1ae1c:	20006a86 	.word	0x20006a86
   1ae20:	20006a89 	.word	0x20006a89
   1ae24:	200060f8 	.word	0x200060f8

0001ae28 <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
   1ae28:	b500      	push	{lr}
   1ae2a:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
   1ae2c:	2300      	movs	r3, #0
   1ae2e:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   1ae32:	4b12      	ldr	r3, [pc, #72]	; (1ae7c <ev_sof_handler+0x54>)
   1ae34:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1ae38:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   1ae3c:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
   1ae40:	b15b      	cbz	r3, 1ae5a <ev_sof_handler+0x32>
    else if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
   1ae42:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1ae46:	d115      	bne.n	1ae74 <ev_sof_handler+0x4c>
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    };

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRF_USBD, NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
   1ae48:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ae4c:	d002      	beq.n	1ae54 <ev_sof_handler+0x2c>
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   1ae4e:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
   1ae52:	e004      	b.n	1ae5e <ev_sof_handler+0x36>
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   1ae54:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ae58:	e001      	b.n	1ae5e <ev_sof_handler+0x36>
   1ae5a:	f44f 7180 	mov.w	r1, #256	; 0x100
    }
    m_ep_ready |= iso_ready_mask;
   1ae5e:	4a08      	ldr	r2, [pc, #32]	; (1ae80 <ev_sof_handler+0x58>)
   1ae60:	6813      	ldr	r3, [r2, #0]
   1ae62:	430b      	orrs	r3, r1
   1ae64:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
   1ae66:	4b07      	ldr	r3, [pc, #28]	; (1ae84 <ev_sof_handler+0x5c>)
   1ae68:	681b      	ldr	r3, [r3, #0]
   1ae6a:	a801      	add	r0, sp, #4
   1ae6c:	4798      	blx	r3
}
   1ae6e:	b003      	add	sp, #12
   1ae70:	f85d fb04 	ldr.w	pc, [sp], #4
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   1ae74:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
   1ae78:	e7f1      	b.n	1ae5e <ev_sof_handler+0x36>
   1ae7a:	bf00      	nop
   1ae7c:	40027000 	.word	0x40027000
   1ae80:	20005fd4 	.word	0x20005fd4
   1ae84:	200060f8 	.word	0x200060f8

0001ae88 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   1ae88:	b510      	push	{r4, lr}
   1ae8a:	b082      	sub	sp, #8
    return p_reg->EVENTCAUSE;
   1ae8c:	4b23      	ldr	r3, [pc, #140]	; (1af1c <ev_usbevent_handler+0x94>)
   1ae8e:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   1ae92:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   1ae96:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   1ae9a:	f414 7f80 	tst.w	r4, #256	; 0x100
   1ae9e:	d00e      	beq.n	1aebe <ev_usbevent_handler+0x36>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   1aea0:	4b1f      	ldr	r3, [pc, #124]	; (1af20 <ev_usbevent_handler+0x98>)
   1aea2:	2201      	movs	r2, #1
   1aea4:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   1aea6:	2300      	movs	r3, #0
   1aea8:	f8ad 3005 	strh.w	r3, [sp, #5]
   1aeac:	f88d 3007 	strb.w	r3, [sp, #7]
   1aeb0:	2302      	movs	r3, #2
   1aeb2:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   1aeb6:	4b1b      	ldr	r3, [pc, #108]	; (1af24 <ev_usbevent_handler+0x9c>)
   1aeb8:	681b      	ldr	r3, [r3, #0]
   1aeba:	a801      	add	r0, sp, #4
   1aebc:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   1aebe:	f414 7f00 	tst.w	r4, #512	; 0x200
   1aec2:	d00d      	beq.n	1aee0 <ev_usbevent_handler+0x58>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   1aec4:	2300      	movs	r3, #0
   1aec6:	4a16      	ldr	r2, [pc, #88]	; (1af20 <ev_usbevent_handler+0x98>)
   1aec8:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   1aeca:	f8ad 3005 	strh.w	r3, [sp, #5]
   1aece:	f88d 3007 	strb.w	r3, [sp, #7]
   1aed2:	2303      	movs	r3, #3
   1aed4:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   1aed8:	4b12      	ldr	r3, [pc, #72]	; (1af24 <ev_usbevent_handler+0x9c>)
   1aeda:	681b      	ldr	r3, [r3, #0]
   1aedc:	a801      	add	r0, sp, #4
   1aede:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   1aee0:	f414 6f80 	tst.w	r4, #1024	; 0x400
   1aee4:	d017      	beq.n	1af16 <ev_usbevent_handler+0x8e>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   1aee6:	4b0e      	ldr	r3, [pc, #56]	; (1af20 <ev_usbevent_handler+0x98>)
   1aee8:	781b      	ldrb	r3, [r3, #0]
   1aeea:	b1a3      	cbz	r3, 1af16 <ev_usbevent_handler+0x8e>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   1aeec:	2300      	movs	r3, #0
   1aeee:	4a0c      	ldr	r2, [pc, #48]	; (1af20 <ev_usbevent_handler+0x98>)
   1aef0:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   1aef2:	2101      	movs	r1, #1
   1aef4:	4a09      	ldr	r2, [pc, #36]	; (1af1c <ev_usbevent_handler+0x94>)
   1aef6:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1aefa:	3258      	adds	r2, #88	; 0x58
   1aefc:	6011      	str	r1, [r2, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1aefe:	6812      	ldr	r2, [r2, #0]

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   1af00:	f8ad 3005 	strh.w	r3, [sp, #5]
   1af04:	f88d 3007 	strb.w	r3, [sp, #7]
   1af08:	2304      	movs	r3, #4
   1af0a:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   1af0e:	4b05      	ldr	r3, [pc, #20]	; (1af24 <ev_usbevent_handler+0x9c>)
   1af10:	681b      	ldr	r3, [r3, #0]
   1af12:	a801      	add	r0, sp, #4
   1af14:	4798      	blx	r3
        }
    }
}
   1af16:	b002      	add	sp, #8
   1af18:	bd10      	pop	{r4, pc}
   1af1a:	bf00      	nop
   1af1c:	40027000 	.word	0x40027000
   1af20:	20006a86 	.word	0x20006a86
   1af24:	200060f8 	.word	0x200060f8

0001af28 <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
   1af28:	b510      	push	{r4, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1af2a:	f7ff ff43 	bl	1adb4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   1af2e:	b1b8      	cbz	r0, 1af60 <usbd_enable+0x38>
   1af30:	f04f 0240 	mov.w	r2, #64	; 0x40
   1af34:	f3ef 8311 	mrs	r3, BASEPRI
   1af38:	f382 8812 	msr	BASEPRI_MAX, r2
   1af3c:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1af40:	4a41      	ldr	r2, [pc, #260]	; (1b048 <usbd_enable+0x120>)
   1af42:	6812      	ldr	r2, [r2, #0]
   1af44:	2a00      	cmp	r2, #0
   1af46:	d16f      	bne.n	1b028 <usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1af48:	4a3f      	ldr	r2, [pc, #252]	; (1b048 <usbd_enable+0x120>)
   1af4a:	f249 3175 	movw	r1, #37749	; 0x9375
   1af4e:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   1af50:	483e      	ldr	r0, [pc, #248]	; (1b04c <usbd_enable+0x124>)
   1af52:	2403      	movs	r4, #3
   1af54:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1af56:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1af58:	f383 8811 	msr	BASEPRI, r3
   1af5c:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   1af60:	f7ff ff1e 	bl	1ada0 <nrf52_errata_171>
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_171())
   1af64:	b1b8      	cbz	r0, 1af96 <usbd_enable+0x6e>
	__asm__ volatile(
   1af66:	f04f 0240 	mov.w	r2, #64	; 0x40
   1af6a:	f3ef 8311 	mrs	r3, BASEPRI
   1af6e:	f382 8812 	msr	BASEPRI_MAX, r2
   1af72:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1af76:	4a34      	ldr	r2, [pc, #208]	; (1b048 <usbd_enable+0x120>)
   1af78:	6812      	ldr	r2, [r2, #0]
   1af7a:	2a00      	cmp	r2, #0
   1af7c:	d158      	bne.n	1b030 <usbd_enable+0x108>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1af7e:	4a32      	ldr	r2, [pc, #200]	; (1b048 <usbd_enable+0x120>)
   1af80:	f249 3175 	movw	r1, #37749	; 0x9375
   1af84:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   1af86:	4832      	ldr	r0, [pc, #200]	; (1b050 <usbd_enable+0x128>)
   1af88:	24c0      	movs	r4, #192	; 0xc0
   1af8a:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1af8c:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1af8e:	f383 8811 	msr	BASEPRI, r3
   1af92:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   1af96:	4b2f      	ldr	r3, [pc, #188]	; (1b054 <usbd_enable+0x12c>)
   1af98:	2201      	movs	r2, #1
   1af9a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   1af9e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   1afa2:	4b2c      	ldr	r3, [pc, #176]	; (1b054 <usbd_enable+0x12c>)
   1afa4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   1afa8:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1afac:	d0f9      	beq.n	1afa2 <usbd_enable+0x7a>
    p_reg->EVENTCAUSE = flags;
   1afae:	4b29      	ldr	r3, [pc, #164]	; (1b054 <usbd_enable+0x12c>)
   1afb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1afb4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   1afb8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1afbc:	f7ff fef0 	bl	1ada0 <nrf52_errata_171>
    nrf_usbd_enable(NRF_USBD);

    /* Waiting for peripheral to enable, this should take a few us */
    usbd_eventcause_wait_and_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_171())
   1afc0:	b1b8      	cbz	r0, 1aff2 <usbd_enable+0xca>
	__asm__ volatile(
   1afc2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1afc6:	f3ef 8311 	mrs	r3, BASEPRI
   1afca:	f382 8812 	msr	BASEPRI_MAX, r2
   1afce:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1afd2:	4a1d      	ldr	r2, [pc, #116]	; (1b048 <usbd_enable+0x120>)
   1afd4:	6812      	ldr	r2, [r2, #0]
   1afd6:	2a00      	cmp	r2, #0
   1afd8:	d12e      	bne.n	1b038 <usbd_enable+0x110>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1afda:	4a1b      	ldr	r2, [pc, #108]	; (1b048 <usbd_enable+0x120>)
   1afdc:	f249 3175 	movw	r1, #37749	; 0x9375
   1afe0:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   1afe2:	481b      	ldr	r0, [pc, #108]	; (1b050 <usbd_enable+0x128>)
   1afe4:	2400      	movs	r4, #0
   1afe6:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1afe8:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1afea:	f383 8811 	msr	BASEPRI, r3
   1afee:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1aff2:	f7ff fedf 	bl	1adb4 <nrf52_errata_187>
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
   1aff6:	b1b0      	cbz	r0, 1b026 <usbd_enable+0xfe>
	__asm__ volatile(
   1aff8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1affc:	f3ef 8311 	mrs	r3, BASEPRI
   1b000:	f382 8812 	msr	BASEPRI_MAX, r2
   1b004:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1b008:	4a0f      	ldr	r2, [pc, #60]	; (1b048 <usbd_enable+0x120>)
   1b00a:	6812      	ldr	r2, [r2, #0]
   1b00c:	b9c2      	cbnz	r2, 1b040 <usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1b00e:	4a0e      	ldr	r2, [pc, #56]	; (1b048 <usbd_enable+0x120>)
   1b010:	f249 3175 	movw	r1, #37749	; 0x9375
   1b014:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   1b016:	480d      	ldr	r0, [pc, #52]	; (1b04c <usbd_enable+0x124>)
   1b018:	2400      	movs	r4, #0
   1b01a:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1b01c:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1b01e:	f383 8811 	msr	BASEPRI, r3
   1b022:	f3bf 8f6f 	isb	sy
    {
        usbd_errata_187_211_end();
    }
}
   1b026:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   1b028:	4a08      	ldr	r2, [pc, #32]	; (1b04c <usbd_enable+0x124>)
   1b02a:	2103      	movs	r1, #3
   1b02c:	6011      	str	r1, [r2, #0]
   1b02e:	e793      	b.n	1af58 <usbd_enable+0x30>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   1b030:	4a07      	ldr	r2, [pc, #28]	; (1b050 <usbd_enable+0x128>)
   1b032:	21c0      	movs	r1, #192	; 0xc0
   1b034:	6011      	str	r1, [r2, #0]
   1b036:	e7aa      	b.n	1af8e <usbd_enable+0x66>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   1b038:	4a05      	ldr	r2, [pc, #20]	; (1b050 <usbd_enable+0x128>)
   1b03a:	2100      	movs	r1, #0
   1b03c:	6011      	str	r1, [r2, #0]
   1b03e:	e7d4      	b.n	1afea <usbd_enable+0xc2>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   1b040:	4a02      	ldr	r2, [pc, #8]	; (1b04c <usbd_enable+0x124>)
   1b042:	2100      	movs	r1, #0
   1b044:	6011      	str	r1, [r2, #0]
   1b046:	e7ea      	b.n	1b01e <usbd_enable+0xf6>
   1b048:	4006ec00 	.word	0x4006ec00
   1b04c:	4006ed14 	.word	0x4006ed14
   1b050:	4006ec14 	.word	0x4006ec14
   1b054:	40027000 	.word	0x40027000

0001b058 <usbd_ep_data_handler>:
{
   1b058:	b530      	push	{r4, r5, lr}
   1b05a:	b083      	sub	sp, #12
   1b05c:	4604      	mov	r4, r0
   1b05e:	460d      	mov	r5, r1
    m_ep_ready |= (1U << bitpos);
   1b060:	2301      	movs	r3, #1
   1b062:	fa03 f201 	lsl.w	r2, r3, r1
   1b066:	495c      	ldr	r1, [pc, #368]	; (1b1d8 <usbd_ep_data_handler+0x180>)
   1b068:	680b      	ldr	r3, [r1, #0]
   1b06a:	4313      	orrs	r3, r2
   1b06c:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   1b06e:	f010 0f80 	tst.w	r0, #128	; 0x80
   1b072:	d114      	bne.n	1b09e <usbd_ep_data_handler+0x46>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   1b074:	4b59      	ldr	r3, [pc, #356]	; (1b1dc <usbd_ep_data_handler+0x184>)
   1b076:	6819      	ldr	r1, [r3, #0]
   1b078:	fa21 f505 	lsr.w	r5, r1, r5
   1b07c:	f015 0f01 	tst.w	r5, #1
   1b080:	d10b      	bne.n	1b09a <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   1b082:	2306      	movs	r3, #6
   1b084:	f88d 3004 	strb.w	r3, [sp, #4]
   1b088:	f88d 0006 	strb.w	r0, [sp, #6]
   1b08c:	2301      	movs	r3, #1
   1b08e:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   1b092:	4b53      	ldr	r3, [pc, #332]	; (1b1e0 <usbd_ep_data_handler+0x188>)
   1b094:	681b      	ldr	r3, [r3, #0]
   1b096:	a801      	add	r0, sp, #4
   1b098:	4798      	blx	r3
}
   1b09a:	b003      	add	sp, #12
   1b09c:	bd30      	pop	{r4, r5, pc}
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   1b09e:	f000 030f 	and.w	r3, r0, #15
   1b0a2:	4a50      	ldr	r2, [pc, #320]	; (1b1e4 <usbd_ep_data_handler+0x18c>)
   1b0a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1b0a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b0ac:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1b0b0:	681a      	ldr	r2, [r3, #0]
    if (ret)
   1b0b2:	b112      	cbz	r2, 1b0ba <usbd_ep_data_handler+0x62>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1b0b4:	2100      	movs	r1, #0
   1b0b6:	6019      	str	r1, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   1b0b8:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)))
   1b0ba:	2a00      	cmp	r2, #0
   1b0bc:	d047      	beq.n	1b14e <usbd_ep_data_handler+0xf6>
            if (ep != NRFX_USBD_EPIN0)
   1b0be:	2c80      	cmp	r4, #128	; 0x80
   1b0c0:	d05b      	beq.n	1b17a <usbd_ep_data_handler+0x122>
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   1b0c2:	f7ff fe8b 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1b0c6:	b110      	cbz	r0, 1b0ce <usbd_ep_data_handler+0x76>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1b0c8:	4b47      	ldr	r3, [pc, #284]	; (1b1e8 <usbd_ep_data_handler+0x190>)
   1b0ca:	2200      	movs	r2, #0
   1b0cc:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1b0ce:	4b47      	ldr	r3, [pc, #284]	; (1b1ec <usbd_ep_data_handler+0x194>)
   1b0d0:	2200      	movs	r2, #0
   1b0d2:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b0d4:	b263      	sxtb	r3, r4
   1b0d6:	4293      	cmp	r3, r2
   1b0d8:	db21      	blt.n	1b11e <usbd_ep_data_handler+0xc6>
   1b0da:	4945      	ldr	r1, [pc, #276]	; (1b1f0 <usbd_ep_data_handler+0x198>)
        NRF_USBD_EP_NR_GET(ep));
   1b0dc:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b0e0:	0110      	lsls	r0, r2, #4
   1b0e2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1b0e6:	7b92      	ldrb	r2, [r2, #14]
   1b0e8:	2a03      	cmp	r2, #3
   1b0ea:	d01a      	beq.n	1b122 <usbd_ep_data_handler+0xca>
    else if (p_state->handler.feeder == NULL)
   1b0ec:	580a      	ldr	r2, [r1, r0]
   1b0ee:	bb72      	cbnz	r2, 1b14e <usbd_ep_data_handler+0xf6>
    return NRFX_USBD_EP_BITPOS(ep);
   1b0f0:	2b00      	cmp	r3, #0
   1b0f2:	db00      	blt.n	1b0f6 <usbd_ep_data_handler+0x9e>
   1b0f4:	2210      	movs	r2, #16
   1b0f6:	f003 030f 	and.w	r3, r3, #15
   1b0fa:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1b0fc:	2201      	movs	r2, #1
   1b0fe:	fa02 f303 	lsl.w	r3, r2, r3
   1b102:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b104:	4a35      	ldr	r2, [pc, #212]	; (1b1dc <usbd_ep_data_handler+0x184>)
   1b106:	f3bf 8f5b 	dmb	ish
   1b10a:	e852 1f00 	ldrex	r1, [r2]
   1b10e:	4019      	ands	r1, r3
   1b110:	e842 1000 	strex	r0, r1, [r2]
   1b114:	2800      	cmp	r0, #0
   1b116:	d1f8      	bne.n	1b10a <usbd_ep_data_handler+0xb2>
   1b118:	f3bf 8f5b 	dmb	ish
}
   1b11c:	e017      	b.n	1b14e <usbd_ep_data_handler+0xf6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b11e:	4935      	ldr	r1, [pc, #212]	; (1b1f4 <usbd_ep_data_handler+0x19c>)
   1b120:	e7dc      	b.n	1b0dc <usbd_ep_data_handler+0x84>
    return NRFX_USBD_EP_BITPOS(ep);
   1b122:	2b00      	cmp	r3, #0
   1b124:	db27      	blt.n	1b176 <usbd_ep_data_handler+0x11e>
   1b126:	2210      	movs	r2, #16
   1b128:	f003 030f 	and.w	r3, r3, #15
   1b12c:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1b12e:	2201      	movs	r2, #1
   1b130:	fa02 f303 	lsl.w	r3, r2, r3
   1b134:	43db      	mvns	r3, r3
   1b136:	4a29      	ldr	r2, [pc, #164]	; (1b1dc <usbd_ep_data_handler+0x184>)
   1b138:	f3bf 8f5b 	dmb	ish
   1b13c:	e852 1f00 	ldrex	r1, [r2]
   1b140:	4019      	ands	r1, r3
   1b142:	e842 1000 	strex	r0, r1, [r2]
   1b146:	2800      	cmp	r0, #0
   1b148:	d1f8      	bne.n	1b13c <usbd_ep_data_handler+0xe4>
   1b14a:	f3bf 8f5b 	dmb	ish
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   1b14e:	4b23      	ldr	r3, [pc, #140]	; (1b1dc <usbd_ep_data_handler+0x184>)
   1b150:	6819      	ldr	r1, [r3, #0]
   1b152:	fa21 f505 	lsr.w	r5, r1, r5
   1b156:	f015 0f01 	tst.w	r5, #1
   1b15a:	d19e      	bne.n	1b09a <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1b15c:	2306      	movs	r3, #6
   1b15e:	f88d 3004 	strb.w	r3, [sp, #4]
   1b162:	f88d 4006 	strb.w	r4, [sp, #6]
   1b166:	2300      	movs	r3, #0
   1b168:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   1b16c:	4b1c      	ldr	r3, [pc, #112]	; (1b1e0 <usbd_ep_data_handler+0x188>)
   1b16e:	681b      	ldr	r3, [r3, #0]
   1b170:	a801      	add	r0, sp, #4
   1b172:	4798      	blx	r3
   1b174:	e791      	b.n	1b09a <usbd_ep_data_handler+0x42>
    return NRFX_USBD_EP_BITPOS(ep);
   1b176:	2200      	movs	r2, #0
   1b178:	e7d6      	b.n	1b128 <usbd_ep_data_handler+0xd0>
   1b17a:	f7ff fe2f 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1b17e:	b110      	cbz	r0, 1b186 <usbd_ep_data_handler+0x12e>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1b180:	4b19      	ldr	r3, [pc, #100]	; (1b1e8 <usbd_ep_data_handler+0x190>)
   1b182:	2200      	movs	r2, #0
   1b184:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1b186:	4b19      	ldr	r3, [pc, #100]	; (1b1ec <usbd_ep_data_handler+0x194>)
   1b188:	2200      	movs	r2, #0
   1b18a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1b18c:	4b18      	ldr	r3, [pc, #96]	; (1b1f0 <usbd_ep_data_handler+0x198>)
   1b18e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
   1b192:	2b03      	cmp	r3, #3
   1b194:	d012      	beq.n	1b1bc <usbd_ep_data_handler+0x164>
    else if (p_state->handler.feeder == NULL)
   1b196:	4b16      	ldr	r3, [pc, #88]	; (1b1f0 <usbd_ep_data_handler+0x198>)
   1b198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1b19c:	2b00      	cmp	r3, #0
   1b19e:	d1d6      	bne.n	1b14e <usbd_ep_data_handler+0xf6>
   1b1a0:	4b0e      	ldr	r3, [pc, #56]	; (1b1dc <usbd_ep_data_handler+0x184>)
   1b1a2:	f3bf 8f5b 	dmb	ish
   1b1a6:	e853 2f00 	ldrex	r2, [r3]
   1b1aa:	f022 0201 	bic.w	r2, r2, #1
   1b1ae:	e843 2100 	strex	r1, r2, [r3]
   1b1b2:	2900      	cmp	r1, #0
   1b1b4:	d1f7      	bne.n	1b1a6 <usbd_ep_data_handler+0x14e>
   1b1b6:	f3bf 8f5b 	dmb	ish
}
   1b1ba:	e7c8      	b.n	1b14e <usbd_ep_data_handler+0xf6>
   1b1bc:	4b07      	ldr	r3, [pc, #28]	; (1b1dc <usbd_ep_data_handler+0x184>)
   1b1be:	f3bf 8f5b 	dmb	ish
   1b1c2:	e853 2f00 	ldrex	r2, [r3]
   1b1c6:	f022 0201 	bic.w	r2, r2, #1
   1b1ca:	e843 2100 	strex	r1, r2, [r3]
   1b1ce:	2900      	cmp	r1, #0
   1b1d0:	d1f7      	bne.n	1b1c2 <usbd_ep_data_handler+0x16a>
   1b1d2:	f3bf 8f5b 	dmb	ish
   1b1d6:	e7ba      	b.n	1b14e <usbd_ep_data_handler+0xf6>
   1b1d8:	20005fd4 	.word	0x20005fd4
   1b1dc:	20005f64 	.word	0x20005f64
   1b1e0:	200060f8 	.word	0x200060f8
   1b1e4:	00028e88 	.word	0x00028e88
   1b1e8:	40027c1c 	.word	0x40027c1c
   1b1ec:	20006a87 	.word	0x20006a87
   1b1f0:	20005fd8 	.word	0x20005fd8
   1b1f4:	20006068 	.word	0x20006068

0001b1f8 <ev_setup_data_handler>:
{
   1b1f8:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   1b1fa:	4b07      	ldr	r3, [pc, #28]	; (1b218 <ev_setup_data_handler+0x20>)
   1b1fc:	7818      	ldrb	r0, [r3, #0]
    return NRFX_USBD_EP_BITPOS(ep);
   1b1fe:	f993 3000 	ldrsb.w	r3, [r3]
   1b202:	2b00      	cmp	r3, #0
   1b204:	db06      	blt.n	1b214 <ev_setup_data_handler+0x1c>
   1b206:	2110      	movs	r1, #16
   1b208:	f003 030f 	and.w	r3, r3, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   1b20c:	4419      	add	r1, r3
   1b20e:	f7ff ff23 	bl	1b058 <usbd_ep_data_handler>
}
   1b212:	bd08      	pop	{r3, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   1b214:	2100      	movs	r1, #0
   1b216:	e7f7      	b.n	1b208 <ev_setup_data_handler+0x10>
   1b218:	20006a89 	.word	0x20006a89

0001b21c <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   1b21c:	b500      	push	{lr}
   1b21e:	b083      	sub	sp, #12
   1b220:	f7ff fddc 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1b224:	b110      	cbz	r0, 1b22c <ev_dma_epout8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1b226:	4b16      	ldr	r3, [pc, #88]	; (1b280 <ev_dma_epout8_handler+0x64>)
   1b228:	2200      	movs	r2, #0
   1b22a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1b22c:	4b15      	ldr	r3, [pc, #84]	; (1b284 <ev_dma_epout8_handler+0x68>)
   1b22e:	2200      	movs	r2, #0
   1b230:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1b232:	4b15      	ldr	r3, [pc, #84]	; (1b288 <ev_dma_epout8_handler+0x6c>)
   1b234:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
   1b238:	2b03      	cmp	r3, #3
   1b23a:	d01d      	beq.n	1b278 <ev_dma_epout8_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
   1b23c:	4b12      	ldr	r3, [pc, #72]	; (1b288 <ev_dma_epout8_handler+0x6c>)
   1b23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1b242:	b9cb      	cbnz	r3, 1b278 <ev_dma_epout8_handler+0x5c>
   1b244:	4b11      	ldr	r3, [pc, #68]	; (1b28c <ev_dma_epout8_handler+0x70>)
   1b246:	f3bf 8f5b 	dmb	ish
   1b24a:	e853 2f00 	ldrex	r2, [r3]
   1b24e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   1b252:	e843 2100 	strex	r1, r2, [r3]
   1b256:	2900      	cmp	r1, #0
   1b258:	d1f7      	bne.n	1b24a <ev_dma_epout8_handler+0x2e>
   1b25a:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1b25e:	2306      	movs	r3, #6
   1b260:	f88d 3004 	strb.w	r3, [sp, #4]
   1b264:	2308      	movs	r3, #8
   1b266:	f88d 3006 	strb.w	r3, [sp, #6]
   1b26a:	2300      	movs	r3, #0
   1b26c:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   1b270:	4b07      	ldr	r3, [pc, #28]	; (1b290 <ev_dma_epout8_handler+0x74>)
   1b272:	681b      	ldr	r3, [r3, #0]
   1b274:	a801      	add	r0, sp, #4
   1b276:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   1b278:	b003      	add	sp, #12
   1b27a:	f85d fb04 	ldr.w	pc, [sp], #4
   1b27e:	bf00      	nop
   1b280:	40027c1c 	.word	0x40027c1c
   1b284:	20006a87 	.word	0x20006a87
   1b288:	20005fd8 	.word	0x20005fd8
   1b28c:	20005f64 	.word	0x20005f64
   1b290:	200060f8 	.word	0x200060f8

0001b294 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1b294:	b500      	push	{lr}
   1b296:	b083      	sub	sp, #12
   1b298:	f7ff fda0 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1b29c:	b110      	cbz	r0, 1b2a4 <ev_dma_epin8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1b29e:	4b1d      	ldr	r3, [pc, #116]	; (1b314 <ev_dma_epin8_handler+0x80>)
   1b2a0:	2200      	movs	r2, #0
   1b2a2:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1b2a4:	4b1c      	ldr	r3, [pc, #112]	; (1b318 <ev_dma_epin8_handler+0x84>)
   1b2a6:	2200      	movs	r2, #0
   1b2a8:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1b2aa:	4b1c      	ldr	r3, [pc, #112]	; (1b31c <ev_dma_epin8_handler+0x88>)
   1b2ac:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
   1b2b0:	2b03      	cmp	r3, #3
   1b2b2:	d01e      	beq.n	1b2f2 <ev_dma_epin8_handler+0x5e>
    else if (p_state->handler.feeder == NULL)
   1b2b4:	4b19      	ldr	r3, [pc, #100]	; (1b31c <ev_dma_epin8_handler+0x88>)
   1b2b6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1b2ba:	bb3b      	cbnz	r3, 1b30c <ev_dma_epin8_handler+0x78>
   1b2bc:	4b18      	ldr	r3, [pc, #96]	; (1b320 <ev_dma_epin8_handler+0x8c>)
   1b2be:	f3bf 8f5b 	dmb	ish
   1b2c2:	e853 2f00 	ldrex	r2, [r3]
   1b2c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   1b2ca:	e843 2100 	strex	r1, r2, [r3]
   1b2ce:	2900      	cmp	r1, #0
   1b2d0:	d1f7      	bne.n	1b2c2 <ev_dma_epin8_handler+0x2e>
   1b2d2:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1b2d6:	2306      	movs	r3, #6
   1b2d8:	f88d 3004 	strb.w	r3, [sp, #4]
   1b2dc:	2388      	movs	r3, #136	; 0x88
   1b2de:	f88d 3006 	strb.w	r3, [sp, #6]
   1b2e2:	2300      	movs	r3, #0
   1b2e4:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   1b2e8:	4b0e      	ldr	r3, [pc, #56]	; (1b324 <ev_dma_epin8_handler+0x90>)
   1b2ea:	681b      	ldr	r3, [r3, #0]
   1b2ec:	a801      	add	r0, sp, #4
   1b2ee:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1b2f0:	e00c      	b.n	1b30c <ev_dma_epin8_handler+0x78>
   1b2f2:	4b0b      	ldr	r3, [pc, #44]	; (1b320 <ev_dma_epin8_handler+0x8c>)
   1b2f4:	f3bf 8f5b 	dmb	ish
   1b2f8:	e853 2f00 	ldrex	r2, [r3]
   1b2fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   1b300:	e843 2100 	strex	r1, r2, [r3]
   1b304:	2900      	cmp	r1, #0
   1b306:	d1f7      	bne.n	1b2f8 <ev_dma_epin8_handler+0x64>
   1b308:	f3bf 8f5b 	dmb	ish
   1b30c:	b003      	add	sp, #12
   1b30e:	f85d fb04 	ldr.w	pc, [sp], #4
   1b312:	bf00      	nop
   1b314:	40027c1c 	.word	0x40027c1c
   1b318:	20006a87 	.word	0x20006a87
   1b31c:	20005fd8 	.word	0x20005fd8
   1b320:	20005f64 	.word	0x20005f64
   1b324:	200060f8 	.word	0x200060f8

0001b328 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   1b328:	b508      	push	{r3, lr}
   1b32a:	f7ff fd57 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1b32e:	b110      	cbz	r0, 1b336 <ev_dma_epin0_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1b330:	4b15      	ldr	r3, [pc, #84]	; (1b388 <ev_dma_epin0_handler+0x60>)
   1b332:	2200      	movs	r2, #0
   1b334:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1b336:	4b15      	ldr	r3, [pc, #84]	; (1b38c <ev_dma_epin0_handler+0x64>)
   1b338:	2200      	movs	r2, #0
   1b33a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1b33c:	4b14      	ldr	r3, [pc, #80]	; (1b390 <ev_dma_epin0_handler+0x68>)
   1b33e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
   1b342:	2b03      	cmp	r3, #3
   1b344:	d004      	beq.n	1b350 <ev_dma_epin0_handler+0x28>
    else if (p_state->handler.feeder == NULL)
   1b346:	4b12      	ldr	r3, [pc, #72]	; (1b390 <ev_dma_epin0_handler+0x68>)
   1b348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1b34c:	b173      	cbz	r3, 1b36c <ev_dma_epin0_handler+0x44>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   1b34e:	bd08      	pop	{r3, pc}
   1b350:	4b10      	ldr	r3, [pc, #64]	; (1b394 <ev_dma_epin0_handler+0x6c>)
   1b352:	f3bf 8f5b 	dmb	ish
   1b356:	e853 2f00 	ldrex	r2, [r3]
   1b35a:	f022 0201 	bic.w	r2, r2, #1
   1b35e:	e843 2100 	strex	r1, r2, [r3]
   1b362:	2900      	cmp	r1, #0
   1b364:	d1f7      	bne.n	1b356 <ev_dma_epin0_handler+0x2e>
   1b366:	f3bf 8f5b 	dmb	ish
   1b36a:	e7f0      	b.n	1b34e <ev_dma_epin0_handler+0x26>
   1b36c:	4b09      	ldr	r3, [pc, #36]	; (1b394 <ev_dma_epin0_handler+0x6c>)
   1b36e:	f3bf 8f5b 	dmb	ish
   1b372:	e853 2f00 	ldrex	r2, [r3]
   1b376:	f022 0201 	bic.w	r2, r2, #1
   1b37a:	e843 2100 	strex	r1, r2, [r3]
   1b37e:	2900      	cmp	r1, #0
   1b380:	d1f7      	bne.n	1b372 <ev_dma_epin0_handler+0x4a>
   1b382:	f3bf 8f5b 	dmb	ish
   1b386:	e7e2      	b.n	1b34e <ev_dma_epin0_handler+0x26>
   1b388:	40027c1c 	.word	0x40027c1c
   1b38c:	20006a87 	.word	0x20006a87
   1b390:	20005fd8 	.word	0x20005fd8
   1b394:	20005f64 	.word	0x20005f64

0001b398 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   1b398:	b508      	push	{r3, lr}
   1b39a:	f7ff fd1f 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1b39e:	b110      	cbz	r0, 1b3a6 <ev_dma_epin7_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1b3a0:	4b15      	ldr	r3, [pc, #84]	; (1b3f8 <ev_dma_epin7_handler+0x60>)
   1b3a2:	2200      	movs	r2, #0
   1b3a4:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1b3a6:	4b15      	ldr	r3, [pc, #84]	; (1b3fc <ev_dma_epin7_handler+0x64>)
   1b3a8:	2200      	movs	r2, #0
   1b3aa:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1b3ac:	4b14      	ldr	r3, [pc, #80]	; (1b400 <ev_dma_epin7_handler+0x68>)
   1b3ae:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
   1b3b2:	2b03      	cmp	r3, #3
   1b3b4:	d011      	beq.n	1b3da <ev_dma_epin7_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1b3b6:	4b12      	ldr	r3, [pc, #72]	; (1b400 <ev_dma_epin7_handler+0x68>)
   1b3b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1b3bc:	b9d3      	cbnz	r3, 1b3f4 <ev_dma_epin7_handler+0x5c>
   1b3be:	4b11      	ldr	r3, [pc, #68]	; (1b404 <ev_dma_epin7_handler+0x6c>)
   1b3c0:	f3bf 8f5b 	dmb	ish
   1b3c4:	e853 2f00 	ldrex	r2, [r3]
   1b3c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1b3cc:	e843 2100 	strex	r1, r2, [r3]
   1b3d0:	2900      	cmp	r1, #0
   1b3d2:	d1f7      	bne.n	1b3c4 <ev_dma_epin7_handler+0x2c>
   1b3d4:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   1b3d8:	e00c      	b.n	1b3f4 <ev_dma_epin7_handler+0x5c>
   1b3da:	4b0a      	ldr	r3, [pc, #40]	; (1b404 <ev_dma_epin7_handler+0x6c>)
   1b3dc:	f3bf 8f5b 	dmb	ish
   1b3e0:	e853 2f00 	ldrex	r2, [r3]
   1b3e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1b3e8:	e843 2100 	strex	r1, r2, [r3]
   1b3ec:	2900      	cmp	r1, #0
   1b3ee:	d1f7      	bne.n	1b3e0 <ev_dma_epin7_handler+0x48>
   1b3f0:	f3bf 8f5b 	dmb	ish
   1b3f4:	bd08      	pop	{r3, pc}
   1b3f6:	bf00      	nop
   1b3f8:	40027c1c 	.word	0x40027c1c
   1b3fc:	20006a87 	.word	0x20006a87
   1b400:	20005fd8 	.word	0x20005fd8
   1b404:	20005f64 	.word	0x20005f64

0001b408 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   1b408:	b508      	push	{r3, lr}
   1b40a:	f7ff fce7 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1b40e:	b110      	cbz	r0, 1b416 <ev_dma_epin5_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1b410:	4b15      	ldr	r3, [pc, #84]	; (1b468 <ev_dma_epin5_handler+0x60>)
   1b412:	2200      	movs	r2, #0
   1b414:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1b416:	4b15      	ldr	r3, [pc, #84]	; (1b46c <ev_dma_epin5_handler+0x64>)
   1b418:	2200      	movs	r2, #0
   1b41a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1b41c:	4b14      	ldr	r3, [pc, #80]	; (1b470 <ev_dma_epin5_handler+0x68>)
   1b41e:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
   1b422:	2b03      	cmp	r3, #3
   1b424:	d011      	beq.n	1b44a <ev_dma_epin5_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1b426:	4b12      	ldr	r3, [pc, #72]	; (1b470 <ev_dma_epin5_handler+0x68>)
   1b428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1b42c:	b9d3      	cbnz	r3, 1b464 <ev_dma_epin5_handler+0x5c>
   1b42e:	4b11      	ldr	r3, [pc, #68]	; (1b474 <ev_dma_epin5_handler+0x6c>)
   1b430:	f3bf 8f5b 	dmb	ish
   1b434:	e853 2f00 	ldrex	r2, [r3]
   1b438:	f022 0220 	bic.w	r2, r2, #32
   1b43c:	e843 2100 	strex	r1, r2, [r3]
   1b440:	2900      	cmp	r1, #0
   1b442:	d1f7      	bne.n	1b434 <ev_dma_epin5_handler+0x2c>
   1b444:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   1b448:	e00c      	b.n	1b464 <ev_dma_epin5_handler+0x5c>
   1b44a:	4b0a      	ldr	r3, [pc, #40]	; (1b474 <ev_dma_epin5_handler+0x6c>)
   1b44c:	f3bf 8f5b 	dmb	ish
   1b450:	e853 2f00 	ldrex	r2, [r3]
   1b454:	f022 0220 	bic.w	r2, r2, #32
   1b458:	e843 2100 	strex	r1, r2, [r3]
   1b45c:	2900      	cmp	r1, #0
   1b45e:	d1f7      	bne.n	1b450 <ev_dma_epin5_handler+0x48>
   1b460:	f3bf 8f5b 	dmb	ish
   1b464:	bd08      	pop	{r3, pc}
   1b466:	bf00      	nop
   1b468:	40027c1c 	.word	0x40027c1c
   1b46c:	20006a87 	.word	0x20006a87
   1b470:	20005fd8 	.word	0x20005fd8
   1b474:	20005f64 	.word	0x20005f64

0001b478 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   1b478:	b508      	push	{r3, lr}
   1b47a:	f7ff fcaf 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1b47e:	b110      	cbz	r0, 1b486 <ev_dma_epin6_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1b480:	4b15      	ldr	r3, [pc, #84]	; (1b4d8 <ev_dma_epin6_handler+0x60>)
   1b482:	2200      	movs	r2, #0
   1b484:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1b486:	4b15      	ldr	r3, [pc, #84]	; (1b4dc <ev_dma_epin6_handler+0x64>)
   1b488:	2200      	movs	r2, #0
   1b48a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1b48c:	4b14      	ldr	r3, [pc, #80]	; (1b4e0 <ev_dma_epin6_handler+0x68>)
   1b48e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   1b492:	2b03      	cmp	r3, #3
   1b494:	d011      	beq.n	1b4ba <ev_dma_epin6_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1b496:	4b12      	ldr	r3, [pc, #72]	; (1b4e0 <ev_dma_epin6_handler+0x68>)
   1b498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   1b49c:	b9d3      	cbnz	r3, 1b4d4 <ev_dma_epin6_handler+0x5c>
   1b49e:	4b11      	ldr	r3, [pc, #68]	; (1b4e4 <ev_dma_epin6_handler+0x6c>)
   1b4a0:	f3bf 8f5b 	dmb	ish
   1b4a4:	e853 2f00 	ldrex	r2, [r3]
   1b4a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1b4ac:	e843 2100 	strex	r1, r2, [r3]
   1b4b0:	2900      	cmp	r1, #0
   1b4b2:	d1f7      	bne.n	1b4a4 <ev_dma_epin6_handler+0x2c>
   1b4b4:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   1b4b8:	e00c      	b.n	1b4d4 <ev_dma_epin6_handler+0x5c>
   1b4ba:	4b0a      	ldr	r3, [pc, #40]	; (1b4e4 <ev_dma_epin6_handler+0x6c>)
   1b4bc:	f3bf 8f5b 	dmb	ish
   1b4c0:	e853 2f00 	ldrex	r2, [r3]
   1b4c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1b4c8:	e843 2100 	strex	r1, r2, [r3]
   1b4cc:	2900      	cmp	r1, #0
   1b4ce:	d1f7      	bne.n	1b4c0 <ev_dma_epin6_handler+0x48>
   1b4d0:	f3bf 8f5b 	dmb	ish
   1b4d4:	bd08      	pop	{r3, pc}
   1b4d6:	bf00      	nop
   1b4d8:	40027c1c 	.word	0x40027c1c
   1b4dc:	20006a87 	.word	0x20006a87
   1b4e0:	20005fd8 	.word	0x20005fd8
   1b4e4:	20005f64 	.word	0x20005f64

0001b4e8 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   1b4e8:	b508      	push	{r3, lr}
   1b4ea:	f7ff fc77 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1b4ee:	b110      	cbz	r0, 1b4f6 <ev_dma_epin1_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1b4f0:	4b15      	ldr	r3, [pc, #84]	; (1b548 <ev_dma_epin1_handler+0x60>)
   1b4f2:	2200      	movs	r2, #0
   1b4f4:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1b4f6:	4b15      	ldr	r3, [pc, #84]	; (1b54c <ev_dma_epin1_handler+0x64>)
   1b4f8:	2200      	movs	r2, #0
   1b4fa:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1b4fc:	4b14      	ldr	r3, [pc, #80]	; (1b550 <ev_dma_epin1_handler+0x68>)
   1b4fe:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
   1b502:	2b03      	cmp	r3, #3
   1b504:	d011      	beq.n	1b52a <ev_dma_epin1_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1b506:	4b12      	ldr	r3, [pc, #72]	; (1b550 <ev_dma_epin1_handler+0x68>)
   1b508:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1b50c:	b9d3      	cbnz	r3, 1b544 <ev_dma_epin1_handler+0x5c>
   1b50e:	4b11      	ldr	r3, [pc, #68]	; (1b554 <ev_dma_epin1_handler+0x6c>)
   1b510:	f3bf 8f5b 	dmb	ish
   1b514:	e853 2f00 	ldrex	r2, [r3]
   1b518:	f022 0202 	bic.w	r2, r2, #2
   1b51c:	e843 2100 	strex	r1, r2, [r3]
   1b520:	2900      	cmp	r1, #0
   1b522:	d1f7      	bne.n	1b514 <ev_dma_epin1_handler+0x2c>
   1b524:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   1b528:	e00c      	b.n	1b544 <ev_dma_epin1_handler+0x5c>
   1b52a:	4b0a      	ldr	r3, [pc, #40]	; (1b554 <ev_dma_epin1_handler+0x6c>)
   1b52c:	f3bf 8f5b 	dmb	ish
   1b530:	e853 2f00 	ldrex	r2, [r3]
   1b534:	f022 0202 	bic.w	r2, r2, #2
   1b538:	e843 2100 	strex	r1, r2, [r3]
   1b53c:	2900      	cmp	r1, #0
   1b53e:	d1f7      	bne.n	1b530 <ev_dma_epin1_handler+0x48>
   1b540:	f3bf 8f5b 	dmb	ish
   1b544:	bd08      	pop	{r3, pc}
   1b546:	bf00      	nop
   1b548:	40027c1c 	.word	0x40027c1c
   1b54c:	20006a87 	.word	0x20006a87
   1b550:	20005fd8 	.word	0x20005fd8
   1b554:	20005f64 	.word	0x20005f64

0001b558 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   1b558:	b508      	push	{r3, lr}
   1b55a:	f7ff fc3f 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1b55e:	b110      	cbz	r0, 1b566 <ev_dma_epin2_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1b560:	4b15      	ldr	r3, [pc, #84]	; (1b5b8 <ev_dma_epin2_handler+0x60>)
   1b562:	2200      	movs	r2, #0
   1b564:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1b566:	4b15      	ldr	r3, [pc, #84]	; (1b5bc <ev_dma_epin2_handler+0x64>)
   1b568:	2200      	movs	r2, #0
   1b56a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1b56c:	4b14      	ldr	r3, [pc, #80]	; (1b5c0 <ev_dma_epin2_handler+0x68>)
   1b56e:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   1b572:	2b03      	cmp	r3, #3
   1b574:	d011      	beq.n	1b59a <ev_dma_epin2_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1b576:	4b12      	ldr	r3, [pc, #72]	; (1b5c0 <ev_dma_epin2_handler+0x68>)
   1b578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   1b57c:	b9d3      	cbnz	r3, 1b5b4 <ev_dma_epin2_handler+0x5c>
   1b57e:	4b11      	ldr	r3, [pc, #68]	; (1b5c4 <ev_dma_epin2_handler+0x6c>)
   1b580:	f3bf 8f5b 	dmb	ish
   1b584:	e853 2f00 	ldrex	r2, [r3]
   1b588:	f022 0204 	bic.w	r2, r2, #4
   1b58c:	e843 2100 	strex	r1, r2, [r3]
   1b590:	2900      	cmp	r1, #0
   1b592:	d1f7      	bne.n	1b584 <ev_dma_epin2_handler+0x2c>
   1b594:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   1b598:	e00c      	b.n	1b5b4 <ev_dma_epin2_handler+0x5c>
   1b59a:	4b0a      	ldr	r3, [pc, #40]	; (1b5c4 <ev_dma_epin2_handler+0x6c>)
   1b59c:	f3bf 8f5b 	dmb	ish
   1b5a0:	e853 2f00 	ldrex	r2, [r3]
   1b5a4:	f022 0204 	bic.w	r2, r2, #4
   1b5a8:	e843 2100 	strex	r1, r2, [r3]
   1b5ac:	2900      	cmp	r1, #0
   1b5ae:	d1f7      	bne.n	1b5a0 <ev_dma_epin2_handler+0x48>
   1b5b0:	f3bf 8f5b 	dmb	ish
   1b5b4:	bd08      	pop	{r3, pc}
   1b5b6:	bf00      	nop
   1b5b8:	40027c1c 	.word	0x40027c1c
   1b5bc:	20006a87 	.word	0x20006a87
   1b5c0:	20005fd8 	.word	0x20005fd8
   1b5c4:	20005f64 	.word	0x20005f64

0001b5c8 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   1b5c8:	b508      	push	{r3, lr}
   1b5ca:	f7ff fc07 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1b5ce:	b110      	cbz	r0, 1b5d6 <ev_dma_epin3_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1b5d0:	4b15      	ldr	r3, [pc, #84]	; (1b628 <ev_dma_epin3_handler+0x60>)
   1b5d2:	2200      	movs	r2, #0
   1b5d4:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1b5d6:	4b15      	ldr	r3, [pc, #84]	; (1b62c <ev_dma_epin3_handler+0x64>)
   1b5d8:	2200      	movs	r2, #0
   1b5da:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1b5dc:	4b14      	ldr	r3, [pc, #80]	; (1b630 <ev_dma_epin3_handler+0x68>)
   1b5de:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   1b5e2:	2b03      	cmp	r3, #3
   1b5e4:	d011      	beq.n	1b60a <ev_dma_epin3_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1b5e6:	4b12      	ldr	r3, [pc, #72]	; (1b630 <ev_dma_epin3_handler+0x68>)
   1b5e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   1b5ec:	b9d3      	cbnz	r3, 1b624 <ev_dma_epin3_handler+0x5c>
   1b5ee:	4b11      	ldr	r3, [pc, #68]	; (1b634 <ev_dma_epin3_handler+0x6c>)
   1b5f0:	f3bf 8f5b 	dmb	ish
   1b5f4:	e853 2f00 	ldrex	r2, [r3]
   1b5f8:	f022 0208 	bic.w	r2, r2, #8
   1b5fc:	e843 2100 	strex	r1, r2, [r3]
   1b600:	2900      	cmp	r1, #0
   1b602:	d1f7      	bne.n	1b5f4 <ev_dma_epin3_handler+0x2c>
   1b604:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   1b608:	e00c      	b.n	1b624 <ev_dma_epin3_handler+0x5c>
   1b60a:	4b0a      	ldr	r3, [pc, #40]	; (1b634 <ev_dma_epin3_handler+0x6c>)
   1b60c:	f3bf 8f5b 	dmb	ish
   1b610:	e853 2f00 	ldrex	r2, [r3]
   1b614:	f022 0208 	bic.w	r2, r2, #8
   1b618:	e843 2100 	strex	r1, r2, [r3]
   1b61c:	2900      	cmp	r1, #0
   1b61e:	d1f7      	bne.n	1b610 <ev_dma_epin3_handler+0x48>
   1b620:	f3bf 8f5b 	dmb	ish
   1b624:	bd08      	pop	{r3, pc}
   1b626:	bf00      	nop
   1b628:	40027c1c 	.word	0x40027c1c
   1b62c:	20006a87 	.word	0x20006a87
   1b630:	20005fd8 	.word	0x20005fd8
   1b634:	20005f64 	.word	0x20005f64

0001b638 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   1b638:	b508      	push	{r3, lr}
   1b63a:	f7ff fbcf 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1b63e:	b110      	cbz	r0, 1b646 <ev_dma_epin4_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1b640:	4b15      	ldr	r3, [pc, #84]	; (1b698 <ev_dma_epin4_handler+0x60>)
   1b642:	2200      	movs	r2, #0
   1b644:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1b646:	4b15      	ldr	r3, [pc, #84]	; (1b69c <ev_dma_epin4_handler+0x64>)
   1b648:	2200      	movs	r2, #0
   1b64a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1b64c:	4b14      	ldr	r3, [pc, #80]	; (1b6a0 <ev_dma_epin4_handler+0x68>)
   1b64e:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   1b652:	2b03      	cmp	r3, #3
   1b654:	d011      	beq.n	1b67a <ev_dma_epin4_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1b656:	4b12      	ldr	r3, [pc, #72]	; (1b6a0 <ev_dma_epin4_handler+0x68>)
   1b658:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   1b65c:	b9d3      	cbnz	r3, 1b694 <ev_dma_epin4_handler+0x5c>
   1b65e:	4b11      	ldr	r3, [pc, #68]	; (1b6a4 <ev_dma_epin4_handler+0x6c>)
   1b660:	f3bf 8f5b 	dmb	ish
   1b664:	e853 2f00 	ldrex	r2, [r3]
   1b668:	f022 0210 	bic.w	r2, r2, #16
   1b66c:	e843 2100 	strex	r1, r2, [r3]
   1b670:	2900      	cmp	r1, #0
   1b672:	d1f7      	bne.n	1b664 <ev_dma_epin4_handler+0x2c>
   1b674:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   1b678:	e00c      	b.n	1b694 <ev_dma_epin4_handler+0x5c>
   1b67a:	4b0a      	ldr	r3, [pc, #40]	; (1b6a4 <ev_dma_epin4_handler+0x6c>)
   1b67c:	f3bf 8f5b 	dmb	ish
   1b680:	e853 2f00 	ldrex	r2, [r3]
   1b684:	f022 0210 	bic.w	r2, r2, #16
   1b688:	e843 2100 	strex	r1, r2, [r3]
   1b68c:	2900      	cmp	r1, #0
   1b68e:	d1f7      	bne.n	1b680 <ev_dma_epin4_handler+0x48>
   1b690:	f3bf 8f5b 	dmb	ish
   1b694:	bd08      	pop	{r3, pc}
   1b696:	bf00      	nop
   1b698:	40027c1c 	.word	0x40027c1c
   1b69c:	20006a87 	.word	0x20006a87
   1b6a0:	20005fd8 	.word	0x20005fd8
   1b6a4:	20005f64 	.word	0x20005f64

0001b6a8 <nrfx_usbd_isoinconfig_set>:
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   1b6a8:	4b01      	ldr	r3, [pc, #4]	; (1b6b0 <nrfx_usbd_isoinconfig_set+0x8>)
   1b6aa:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
   1b6ae:	4770      	bx	lr
   1b6b0:	40027000 	.word	0x40027000

0001b6b4 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   1b6b4:	2300      	movs	r3, #0
   1b6b6:	4a02      	ldr	r2, [pc, #8]	; (1b6c0 <nrfx_usbd_uninit+0xc>)
   1b6b8:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   1b6ba:	4a02      	ldr	r2, [pc, #8]	; (1b6c4 <nrfx_usbd_uninit+0x10>)
   1b6bc:	7013      	strb	r3, [r2, #0]
    return;
}
   1b6be:	4770      	bx	lr
   1b6c0:	200060f8 	.word	0x200060f8
   1b6c4:	20006a88 	.word	0x20006a88

0001b6c8 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   1b6c8:	b510      	push	{r4, lr}
    p_reg->EVENTCAUSE = flags;
   1b6ca:	4b41      	ldr	r3, [pc, #260]	; (1b7d0 <nrfx_usbd_enable+0x108>)
   1b6cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b6d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   1b6d4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
   1b6d8:	f7ff fc26 	bl	1af28 <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
   1b6dc:	f00b fd63 	bl	271a6 <nrf52_errata_223>

    if (nrfx_usbd_errata_223() && m_first_enable)
   1b6e0:	b118      	cbz	r0, 1b6ea <nrfx_usbd_enable+0x22>
   1b6e2:	4b3c      	ldr	r3, [pc, #240]	; (1b7d4 <nrfx_usbd_enable+0x10c>)
   1b6e4:	781b      	ldrb	r3, [r3, #0]
   1b6e6:	2b00      	cmp	r3, #0
   1b6e8:	d15f      	bne.n	1b7aa <nrfx_usbd_enable+0xe2>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1b6ea:	f7ff fb63 	bl	1adb4 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   1b6ee:	b1b8      	cbz	r0, 1b720 <nrfx_usbd_enable+0x58>
	__asm__ volatile(
   1b6f0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b6f4:	f3ef 8311 	mrs	r3, BASEPRI
   1b6f8:	f382 8812 	msr	BASEPRI_MAX, r2
   1b6fc:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1b700:	4a35      	ldr	r2, [pc, #212]	; (1b7d8 <nrfx_usbd_enable+0x110>)
   1b702:	6812      	ldr	r2, [r2, #0]
   1b704:	2a00      	cmp	r2, #0
   1b706:	d15b      	bne.n	1b7c0 <nrfx_usbd_enable+0xf8>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1b708:	4a33      	ldr	r2, [pc, #204]	; (1b7d8 <nrfx_usbd_enable+0x110>)
   1b70a:	f249 3175 	movw	r1, #37749	; 0x9375
   1b70e:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   1b710:	4832      	ldr	r0, [pc, #200]	; (1b7dc <nrfx_usbd_enable+0x114>)
   1b712:	2403      	movs	r4, #3
   1b714:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1b716:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1b718:	f383 8811 	msr	BASEPRI, r3
   1b71c:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   1b720:	f7ff fb34 	bl	1ad8c <nrf52_errata_166>
#endif
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_166())
   1b724:	b150      	cbz	r0, 1b73c <nrfx_usbd_enable+0x74>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   1b726:	4b2e      	ldr	r3, [pc, #184]	; (1b7e0 <nrfx_usbd_enable+0x118>)
   1b728:	f240 72e3 	movw	r2, #2019	; 0x7e3
   1b72c:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   1b72e:	3304      	adds	r3, #4
   1b730:	2240      	movs	r2, #64	; 0x40
   1b732:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
   1b734:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   1b738:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   1b73c:	4b24      	ldr	r3, [pc, #144]	; (1b7d0 <nrfx_usbd_enable+0x108>)
   1b73e:	2280      	movs	r2, #128	; 0x80
   1b740:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
   1b744:	2000      	movs	r0, #0
   1b746:	f7ff ffaf 	bl	1b6a8 <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   1b74a:	4b26      	ldr	r3, [pc, #152]	; (1b7e4 <nrfx_usbd_enable+0x11c>)
   1b74c:	f240 12ff 	movw	r2, #511	; 0x1ff
   1b750:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   1b752:	4b25      	ldr	r3, [pc, #148]	; (1b7e8 <nrfx_usbd_enable+0x120>)
   1b754:	2200      	movs	r2, #0
   1b756:	601a      	str	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   1b758:	f7ff fb40 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1b75c:	b110      	cbz	r0, 1b764 <nrfx_usbd_enable+0x9c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1b75e:	4b23      	ldr	r3, [pc, #140]	; (1b7ec <nrfx_usbd_enable+0x124>)
   1b760:	2200      	movs	r2, #0
   1b762:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1b764:	2300      	movs	r3, #0
   1b766:	4a22      	ldr	r2, [pc, #136]	; (1b7f0 <nrfx_usbd_enable+0x128>)
   1b768:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   1b76a:	4a22      	ldr	r2, [pc, #136]	; (1b7f4 <nrfx_usbd_enable+0x12c>)
   1b76c:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   1b76e:	4b22      	ldr	r3, [pc, #136]	; (1b7f8 <nrfx_usbd_enable+0x130>)
   1b770:	2202      	movs	r2, #2
   1b772:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1b774:	f7ff fb1e 	bl	1adb4 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   1b778:	b1b0      	cbz	r0, 1b7a8 <nrfx_usbd_enable+0xe0>
	__asm__ volatile(
   1b77a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b77e:	f3ef 8311 	mrs	r3, BASEPRI
   1b782:	f382 8812 	msr	BASEPRI_MAX, r2
   1b786:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1b78a:	4a13      	ldr	r2, [pc, #76]	; (1b7d8 <nrfx_usbd_enable+0x110>)
   1b78c:	6812      	ldr	r2, [r2, #0]
   1b78e:	b9da      	cbnz	r2, 1b7c8 <nrfx_usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1b790:	4a11      	ldr	r2, [pc, #68]	; (1b7d8 <nrfx_usbd_enable+0x110>)
   1b792:	f249 3175 	movw	r1, #37749	; 0x9375
   1b796:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   1b798:	4810      	ldr	r0, [pc, #64]	; (1b7dc <nrfx_usbd_enable+0x114>)
   1b79a:	2400      	movs	r4, #0
   1b79c:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1b79e:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1b7a0:	f383 8811 	msr	BASEPRI, r3
   1b7a4:	f3bf 8f6f 	isb	sy
#endif
    {
        usbd_errata_187_211_end();
    }
}
   1b7a8:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   1b7aa:	4b09      	ldr	r3, [pc, #36]	; (1b7d0 <nrfx_usbd_enable+0x108>)
   1b7ac:	2400      	movs	r4, #0
   1b7ae:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   1b7b2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
         usbd_enable();
   1b7b6:	f7ff fbb7 	bl	1af28 <usbd_enable>
         m_first_enable = false;
   1b7ba:	4b06      	ldr	r3, [pc, #24]	; (1b7d4 <nrfx_usbd_enable+0x10c>)
   1b7bc:	701c      	strb	r4, [r3, #0]
   1b7be:	e794      	b.n	1b6ea <nrfx_usbd_enable+0x22>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   1b7c0:	4a06      	ldr	r2, [pc, #24]	; (1b7dc <nrfx_usbd_enable+0x114>)
   1b7c2:	2103      	movs	r1, #3
   1b7c4:	6011      	str	r1, [r2, #0]
   1b7c6:	e7a7      	b.n	1b718 <nrfx_usbd_enable+0x50>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   1b7c8:	4a04      	ldr	r2, [pc, #16]	; (1b7dc <nrfx_usbd_enable+0x114>)
   1b7ca:	2100      	movs	r1, #0
   1b7cc:	6011      	str	r1, [r2, #0]
   1b7ce:	e7e7      	b.n	1b7a0 <nrfx_usbd_enable+0xd8>
   1b7d0:	40027000 	.word	0x40027000
   1b7d4:	20000770 	.word	0x20000770
   1b7d8:	4006ec00 	.word	0x4006ec00
   1b7dc:	4006ed14 	.word	0x4006ed14
   1b7e0:	40027800 	.word	0x40027800
   1b7e4:	20005fd4 	.word	0x20005fd4
   1b7e8:	20005f64 	.word	0x20005f64
   1b7ec:	40027c1c 	.word	0x40027c1c
   1b7f0:	20006a87 	.word	0x20006a87
   1b7f4:	20006a89 	.word	0x20006a89
   1b7f8:	20006a88 	.word	0x20006a88

0001b7fc <nrfx_usbd_start>:
    }
#endif
}

void nrfx_usbd_start(bool enable_sof)
{
   1b7fc:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   1b7fe:	4b09      	ldr	r3, [pc, #36]	; (1b824 <nrfx_usbd_start+0x28>)
   1b800:	2200      	movs	r2, #0
   1b802:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   1b804:	b960      	cbnz	r0, 1b820 <nrfx_usbd_start+0x24>
    uint32_t ints_to_enable =
   1b806:	4b08      	ldr	r3, [pc, #32]	; (1b828 <nrfx_usbd_start+0x2c>)
    p_reg->INTENSET = mask;
   1b808:	4c08      	ldr	r4, [pc, #32]	; (1b82c <nrfx_usbd_start+0x30>)
   1b80a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   1b80e:	2027      	movs	r0, #39	; 0x27
   1b810:	f7f8 fac8 	bl	13da4 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   1b814:	2301      	movs	r3, #1
   1b816:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   1b81a:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   1b81e:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   1b820:	4b03      	ldr	r3, [pc, #12]	; (1b830 <nrfx_usbd_start+0x34>)
   1b822:	e7f1      	b.n	1b808 <nrfx_usbd_start+0xc>
   1b824:	20006a86 	.word	0x20006a86
   1b828:	01c01407 	.word	0x01c01407
   1b82c:	40027000 	.word	0x40027000
   1b830:	01e01407 	.word	0x01e01407

0001b834 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   1b834:	4b03      	ldr	r3, [pc, #12]	; (1b844 <nrfx_usbd_is_enabled+0x10>)
   1b836:	7818      	ldrb	r0, [r3, #0]
}
   1b838:	2801      	cmp	r0, #1
   1b83a:	bf94      	ite	ls
   1b83c:	2000      	movls	r0, #0
   1b83e:	2001      	movhi	r0, #1
   1b840:	4770      	bx	lr
   1b842:	bf00      	nop
   1b844:	20006a88 	.word	0x20006a88

0001b848 <nrfx_usbd_ep_max_packet_size_set>:
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b848:	f010 0f80 	tst.w	r0, #128	; 0x80
   1b84c:	d106      	bne.n	1b85c <nrfx_usbd_ep_max_packet_size_set+0x14>
   1b84e:	4b04      	ldr	r3, [pc, #16]	; (1b860 <nrfx_usbd_ep_max_packet_size_set+0x18>)
        NRF_USBD_EP_NR_GET(ep));
   1b850:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b854:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
   1b858:	8181      	strh	r1, [r0, #12]
}
   1b85a:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b85c:	4b01      	ldr	r3, [pc, #4]	; (1b864 <nrfx_usbd_ep_max_packet_size_set+0x1c>)
   1b85e:	e7f7      	b.n	1b850 <nrfx_usbd_ep_max_packet_size_set+0x8>
   1b860:	20005fd8 	.word	0x20005fd8
   1b864:	20006068 	.word	0x20006068

0001b868 <nrfx_usbd_init>:
{
   1b868:	b570      	push	{r4, r5, r6, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   1b86a:	4b25      	ldr	r3, [pc, #148]	; (1b900 <nrfx_usbd_init+0x98>)
   1b86c:	781c      	ldrb	r4, [r3, #0]
   1b86e:	2c00      	cmp	r4, #0
   1b870:	d144      	bne.n	1b8fc <nrfx_usbd_init+0x94>
    m_event_handler = event_handler;
   1b872:	4b24      	ldr	r3, [pc, #144]	; (1b904 <nrfx_usbd_init+0x9c>)
   1b874:	6018      	str	r0, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   1b876:	4b22      	ldr	r3, [pc, #136]	; (1b900 <nrfx_usbd_init+0x98>)
   1b878:	2201      	movs	r2, #1
   1b87a:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   1b87c:	4625      	mov	r5, r4
   1b87e:	e012      	b.n	1b8a6 <nrfx_usbd_init+0x3e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1b880:	2140      	movs	r1, #64	; 0x40
   1b882:	4630      	mov	r0, r6
   1b884:	f7ff ffe0 	bl	1b848 <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b888:	f016 0f80 	tst.w	r6, #128	; 0x80
   1b88c:	d115      	bne.n	1b8ba <nrfx_usbd_init+0x52>
   1b88e:	491e      	ldr	r1, [pc, #120]	; (1b908 <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
   1b890:	f005 030f 	and.w	r3, r5, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b894:	0118      	lsls	r0, r3, #4
   1b896:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
   1b89a:	2200      	movs	r2, #0
   1b89c:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
   1b89e:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
   1b8a0:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   1b8a2:	3501      	adds	r5, #1
   1b8a4:	b2ed      	uxtb	r5, r5
   1b8a6:	2d08      	cmp	r5, #8
   1b8a8:	d81c      	bhi.n	1b8e4 <nrfx_usbd_init+0x7c>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   1b8aa:	f045 0680 	orr.w	r6, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1b8ae:	f015 0f08 	tst.w	r5, #8
   1b8b2:	d0e5      	beq.n	1b880 <nrfx_usbd_init+0x18>
   1b8b4:	f240 11ff 	movw	r1, #511	; 0x1ff
   1b8b8:	e7e3      	b.n	1b882 <nrfx_usbd_init+0x1a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b8ba:	4914      	ldr	r1, [pc, #80]	; (1b90c <nrfx_usbd_init+0xa4>)
   1b8bc:	e7e8      	b.n	1b890 <nrfx_usbd_init+0x28>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1b8be:	2140      	movs	r1, #64	; 0x40
   1b8c0:	4620      	mov	r0, r4
   1b8c2:	f7ff ffc1 	bl	1b848 <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b8c6:	f014 0f80 	tst.w	r4, #128	; 0x80
   1b8ca:	d113      	bne.n	1b8f4 <nrfx_usbd_init+0x8c>
   1b8cc:	490e      	ldr	r1, [pc, #56]	; (1b908 <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
   1b8ce:	f004 030f 	and.w	r3, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b8d2:	0118      	lsls	r0, r3, #4
   1b8d4:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
   1b8d8:	2200      	movs	r2, #0
   1b8da:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
   1b8dc:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
   1b8de:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   1b8e0:	3401      	adds	r4, #1
   1b8e2:	b2e4      	uxtb	r4, r4
   1b8e4:	2c08      	cmp	r4, #8
   1b8e6:	d807      	bhi.n	1b8f8 <nrfx_usbd_init+0x90>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1b8e8:	f014 0f08 	tst.w	r4, #8
   1b8ec:	d0e7      	beq.n	1b8be <nrfx_usbd_init+0x56>
   1b8ee:	f240 11ff 	movw	r1, #511	; 0x1ff
   1b8f2:	e7e5      	b.n	1b8c0 <nrfx_usbd_init+0x58>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b8f4:	4905      	ldr	r1, [pc, #20]	; (1b90c <nrfx_usbd_init+0xa4>)
   1b8f6:	e7ea      	b.n	1b8ce <nrfx_usbd_init+0x66>
    return NRFX_SUCCESS;
   1b8f8:	4805      	ldr	r0, [pc, #20]	; (1b910 <nrfx_usbd_init+0xa8>)
}
   1b8fa:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
   1b8fc:	4805      	ldr	r0, [pc, #20]	; (1b914 <nrfx_usbd_init+0xac>)
   1b8fe:	e7fc      	b.n	1b8fa <nrfx_usbd_init+0x92>
   1b900:	20006a88 	.word	0x20006a88
   1b904:	200060f8 	.word	0x200060f8
   1b908:	20005fd8 	.word	0x20005fd8
   1b90c:	20006068 	.word	0x20006068
   1b910:	0bad0000 	.word	0x0bad0000
   1b914:	0bad0005 	.word	0x0bad0005

0001b918 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   1b918:	b4f0      	push	{r4, r5, r6, r7}
    return NRFX_USBD_EP_BITPOS(ep);
   1b91a:	b242      	sxtb	r2, r0
   1b91c:	2a00      	cmp	r2, #0
   1b91e:	db14      	blt.n	1b94a <nrfx_usbd_ep_transfer+0x32>
   1b920:	2410      	movs	r4, #16
   1b922:	f002 030f 	and.w	r3, r2, #15
   1b926:	441c      	add	r4, r3
	__asm__ volatile(
   1b928:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b92c:	f3ef 8511 	mrs	r5, BASEPRI
   1b930:	f383 8812 	msr	BASEPRI_MAX, r3
   1b934:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   1b938:	f010 070f 	ands.w	r7, r0, #15
   1b93c:	d107      	bne.n	1b94e <nrfx_usbd_ep_transfer+0x36>
   1b93e:	4b2f      	ldr	r3, [pc, #188]	; (1b9fc <nrfx_usbd_ep_transfer+0xe4>)
   1b940:	781b      	ldrb	r3, [r3, #0]
   1b942:	4283      	cmp	r3, r0
   1b944:	d003      	beq.n	1b94e <nrfx_usbd_ep_transfer+0x36>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
   1b946:	482e      	ldr	r0, [pc, #184]	; (1ba00 <nrfx_usbd_ep_transfer+0xe8>)
   1b948:	e051      	b.n	1b9ee <nrfx_usbd_ep_transfer+0xd6>
    return NRFX_USBD_EP_BITPOS(ep);
   1b94a:	2400      	movs	r4, #0
   1b94c:	e7e9      	b.n	1b922 <nrfx_usbd_ep_transfer+0xa>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   1b94e:	4b2d      	ldr	r3, [pc, #180]	; (1ba04 <nrfx_usbd_ep_transfer+0xec>)
   1b950:	681b      	ldr	r3, [r3, #0]
   1b952:	43db      	mvns	r3, r3
   1b954:	b29b      	uxth	r3, r3
   1b956:	482c      	ldr	r0, [pc, #176]	; (1ba08 <nrfx_usbd_ep_transfer+0xf0>)
   1b958:	6800      	ldr	r0, [r0, #0]
   1b95a:	4303      	orrs	r3, r0
   1b95c:	2001      	movs	r0, #1
   1b95e:	fa00 f404 	lsl.w	r4, r0, r4
   1b962:	4223      	tst	r3, r4
   1b964:	d142      	bne.n	1b9ec <nrfx_usbd_ep_transfer+0xd4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b966:	2a00      	cmp	r2, #0
   1b968:	db1f      	blt.n	1b9aa <nrfx_usbd_ep_transfer+0x92>
   1b96a:	4828      	ldr	r0, [pc, #160]	; (1ba0c <nrfx_usbd_ep_transfer+0xf4>)
   1b96c:	ea4f 1c07 	mov.w	ip, r7, lsl #4
   1b970:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
   1b974:	2a00      	cmp	r2, #0
   1b976:	db1a      	blt.n	1b9ae <nrfx_usbd_ep_transfer+0x96>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   1b978:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   1b97c:	4a24      	ldr	r2, [pc, #144]	; (1ba10 <nrfx_usbd_ep_transfer+0xf8>)
   1b97e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   1b982:	4a24      	ldr	r2, [pc, #144]	; (1ba14 <nrfx_usbd_ep_transfer+0xfc>)
   1b984:	f840 200c 	str.w	r2, [r0, ip]
        }
        *p_context = *p_transfer;
   1b988:	c907      	ldmia	r1, {r0, r1, r2}
   1b98a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
   1b98e:	6073      	str	r3, [r6, #4]

        p_state->transfer_cnt = 0;
   1b990:	2300      	movs	r3, #0
   1b992:	60b3      	str	r3, [r6, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   1b994:	73b3      	strb	r3, [r6, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   1b996:	4a1c      	ldr	r2, [pc, #112]	; (1ba08 <nrfx_usbd_ep_transfer+0xf0>)
   1b998:	6813      	ldr	r3, [r2, #0]
   1b99a:	431c      	orrs	r4, r3
   1b99c:	6014      	str	r4, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b99e:	4b1e      	ldr	r3, [pc, #120]	; (1ba18 <nrfx_usbd_ep_transfer+0x100>)
   1b9a0:	2280      	movs	r2, #128	; 0x80
   1b9a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
   1b9a6:	481d      	ldr	r0, [pc, #116]	; (1ba1c <nrfx_usbd_ep_transfer+0x104>)
}
   1b9a8:	e021      	b.n	1b9ee <nrfx_usbd_ep_transfer+0xd6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1b9aa:	481d      	ldr	r0, [pc, #116]	; (1ba20 <nrfx_usbd_ep_transfer+0x108>)
   1b9ac:	e7de      	b.n	1b96c <nrfx_usbd_ep_transfer+0x54>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   1b9ae:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   1b9b2:	4a1c      	ldr	r2, [pc, #112]	; (1ba24 <nrfx_usbd_ep_transfer+0x10c>)
   1b9b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   1b9b8:	680a      	ldr	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1b9ba:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
   1b9be:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1b9c2:	d006      	beq.n	1b9d2 <nrfx_usbd_ep_transfer+0xba>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   1b9c4:	688a      	ldr	r2, [r1, #8]
   1b9c6:	f012 0f01 	tst.w	r2, #1
   1b9ca:	d10c      	bne.n	1b9e6 <nrfx_usbd_ep_transfer+0xce>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   1b9cc:	4a16      	ldr	r2, [pc, #88]	; (1ba28 <nrfx_usbd_ep_transfer+0x110>)
   1b9ce:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
   1b9d0:	e7da      	b.n	1b988 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   1b9d2:	688a      	ldr	r2, [r1, #8]
   1b9d4:	f012 0f01 	tst.w	r2, #1
   1b9d8:	d102      	bne.n	1b9e0 <nrfx_usbd_ep_transfer+0xc8>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   1b9da:	4a14      	ldr	r2, [pc, #80]	; (1ba2c <nrfx_usbd_ep_transfer+0x114>)
   1b9dc:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
   1b9de:	e7d3      	b.n	1b988 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   1b9e0:	4a13      	ldr	r2, [pc, #76]	; (1ba30 <nrfx_usbd_ep_transfer+0x118>)
   1b9e2:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
   1b9e4:	e7d0      	b.n	1b988 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   1b9e6:	4a13      	ldr	r2, [pc, #76]	; (1ba34 <nrfx_usbd_ep_transfer+0x11c>)
   1b9e8:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
   1b9ea:	e7cd      	b.n	1b988 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_BUSY;
   1b9ec:	4812      	ldr	r0, [pc, #72]	; (1ba38 <nrfx_usbd_ep_transfer+0x120>)
	__asm__ volatile(
   1b9ee:	f385 8811 	msr	BASEPRI, r5
   1b9f2:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   1b9f6:	bcf0      	pop	{r4, r5, r6, r7}
   1b9f8:	4770      	bx	lr
   1b9fa:	bf00      	nop
   1b9fc:	20006a89 	.word	0x20006a89
   1ba00:	0bad000a 	.word	0x0bad000a
   1ba04:	20005fd4 	.word	0x20005fd4
   1ba08:	20005f64 	.word	0x20005f64
   1ba0c:	20005fd8 	.word	0x20005fd8
   1ba10:	20005ef8 	.word	0x20005ef8
   1ba14:	000271ab 	.word	0x000271ab
   1ba18:	e000e100 	.word	0xe000e100
   1ba1c:	0bad0000 	.word	0x0bad0000
   1ba20:	20006068 	.word	0x20006068
   1ba24:	20005f68 	.word	0x20005f68
   1ba28:	0002723d 	.word	0x0002723d
   1ba2c:	000271e1 	.word	0x000271e1
   1ba30:	00027203 	.word	0x00027203
   1ba34:	0002727b 	.word	0x0002727b
   1ba38:	0bad000b 	.word	0x0bad000b

0001ba3c <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
   1ba3c:	4800      	ldr	r0, [pc, #0]	; (1ba40 <nrfx_usbd_feeder_buffer_get+0x4>)
   1ba3e:	4770      	bx	lr
   1ba40:	200060fc 	.word	0x200060fc

0001ba44 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
   1ba44:	b430      	push	{r4, r5}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1ba46:	f010 0f80 	tst.w	r0, #128	; 0x80
   1ba4a:	d118      	bne.n	1ba7e <nrfx_usbd_ep_status_get+0x3a>
   1ba4c:	4b0e      	ldr	r3, [pc, #56]	; (1ba88 <nrfx_usbd_ep_status_get+0x44>)
        NRF_USBD_EP_NR_GET(ep));
   1ba4e:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1ba52:	0104      	lsls	r4, r0, #4
   1ba54:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	__asm__ volatile(
   1ba58:	f04f 0540 	mov.w	r5, #64	; 0x40
   1ba5c:	f3ef 8211 	mrs	r2, BASEPRI
   1ba60:	f385 8812 	msr	BASEPRI_MAX, r5
   1ba64:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
   1ba68:	6885      	ldr	r5, [r0, #8]
   1ba6a:	600d      	str	r5, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   1ba6c:	591b      	ldr	r3, [r3, r4]
   1ba6e:	b143      	cbz	r3, 1ba82 <nrfx_usbd_ep_status_get+0x3e>
   1ba70:	2004      	movs	r0, #4
	__asm__ volatile(
   1ba72:	f382 8811 	msr	BASEPRI, r2
   1ba76:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   1ba7a:	bc30      	pop	{r4, r5}
   1ba7c:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1ba7e:	4b03      	ldr	r3, [pc, #12]	; (1ba8c <nrfx_usbd_ep_status_get+0x48>)
   1ba80:	e7e5      	b.n	1ba4e <nrfx_usbd_ep_status_get+0xa>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   1ba82:	7b80      	ldrb	r0, [r0, #14]
   1ba84:	e7f5      	b.n	1ba72 <nrfx_usbd_ep_status_get+0x2e>
   1ba86:	bf00      	nop
   1ba88:	20005fd8 	.word	0x20005fd8
   1ba8c:	20006068 	.word	0x20006068

0001ba90 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   1ba90:	f010 0f08 	tst.w	r0, #8
   1ba94:	d107      	bne.n	1baa6 <nrfx_usbd_epout_size_get+0x16>
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   1ba96:	f000 000f 	and.w	r0, r0, #15
   1ba9a:	f500 7094 	add.w	r0, r0, #296	; 0x128
   1ba9e:	4b06      	ldr	r3, [pc, #24]	; (1bab8 <nrfx_usbd_epout_size_get+0x28>)
   1baa0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1baa4:	4770      	bx	lr
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   1baa6:	4b04      	ldr	r3, [pc, #16]	; (1bab8 <nrfx_usbd_epout_size_get+0x28>)
   1baa8:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
   1baac:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   1bab0:	d100      	bne.n	1bab4 <nrfx_usbd_epout_size_get+0x24>
   1bab2:	4770      	bx	lr
            size_isoout = 0;
   1bab4:	2000      	movs	r0, #0

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   1bab6:	4770      	bx	lr
   1bab8:	40027000 	.word	0x40027000

0001babc <usbd_dmareq_process>:
    if (!m_dma_pending)
   1babc:	4b6d      	ldr	r3, [pc, #436]	; (1bc74 <usbd_dmareq_process+0x1b8>)
   1babe:	781b      	ldrb	r3, [r3, #0]
   1bac0:	2b00      	cmp	r3, #0
   1bac2:	f040 80d5 	bne.w	1bc70 <usbd_dmareq_process+0x1b4>
{
   1bac6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1baca:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   1bacc:	4b6a      	ldr	r3, [pc, #424]	; (1bc78 <usbd_dmareq_process+0x1bc>)
   1bace:	681b      	ldr	r3, [r3, #0]
   1bad0:	4a6a      	ldr	r2, [pc, #424]	; (1bc7c <usbd_dmareq_process+0x1c0>)
   1bad2:	6810      	ldr	r0, [r2, #0]
   1bad4:	4003      	ands	r3, r0
   1bad6:	f000 80c8 	beq.w	1bc6a <usbd_dmareq_process+0x1ae>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   1bada:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
   1bade:	d05a      	beq.n	1bb96 <usbd_dmareq_process+0xda>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
   1bae0:	f00b fba4 	bl	2722c <usbd_dma_scheduler_algorithm>
   1bae4:	4680      	mov	r8, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1bae6:	f1b8 0f0f 	cmp.w	r8, #15
   1baea:	d959      	bls.n	1bba0 <usbd_dmareq_process+0xe4>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
   1baec:	f1a8 0610 	sub.w	r6, r8, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1baf0:	b2f6      	uxtb	r6, r6
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1baf2:	b274      	sxtb	r4, r6
   1baf4:	2c00      	cmp	r4, #0
   1baf6:	db57      	blt.n	1bba8 <usbd_dmareq_process+0xec>
   1baf8:	f8df a19c 	ldr.w	sl, [pc, #412]	; 1bc98 <usbd_dmareq_process+0x1dc>
   1bafc:	f006 070f 	and.w	r7, r6, #15
        NRF_USBD_EP_NR_GET(ep));
   1bb00:	463d      	mov	r5, r7
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1bb02:	ea4f 1b07 	mov.w	fp, r7, lsl #4
   1bb06:	eb0a 1907 	add.w	r9, sl, r7, lsl #4
            if (NRF_USBD_EPIN_CHECK(ep))
   1bb0a:	2c00      	cmp	r4, #0
   1bb0c:	db4f      	blt.n	1bbae <usbd_dmareq_process+0xf2>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   1bb0e:	4630      	mov	r0, r6
   1bb10:	f7ff ffbe 	bl	1ba90 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   1bb14:	f85a a00b 	ldr.w	sl, [sl, fp]
   1bb18:	4683      	mov	fp, r0
   1bb1a:	4603      	mov	r3, r0
   1bb1c:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   1bb20:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1bb24:	a802      	add	r0, sp, #8
   1bb26:	47d0      	blx	sl
                if (transfer.p_data.rx == NULL)
   1bb28:	9b02      	ldr	r3, [sp, #8]
   1bb2a:	b113      	cbz	r3, 1bb32 <usbd_dmareq_process+0x76>
                else if (transfer.size < rx_size)
   1bb2c:	9b03      	ldr	r3, [sp, #12]
   1bb2e:	455b      	cmp	r3, fp
   1bb30:	d34b      	bcc.n	1bbca <usbd_dmareq_process+0x10e>
                if (!continue_transfer)
   1bb32:	b910      	cbnz	r0, 1bb3a <usbd_dmareq_process+0x7e>
                    p_state->handler.consumer = NULL;
   1bb34:	2300      	movs	r3, #0
   1bb36:	f8c9 3000 	str.w	r3, [r9]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   1bb3a:	f7ff f94f 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1bb3e:	b110      	cbz	r0, 1bb46 <usbd_dmareq_process+0x8a>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   1bb40:	4b4f      	ldr	r3, [pc, #316]	; (1bc80 <usbd_dmareq_process+0x1c4>)
   1bb42:	2282      	movs	r2, #130	; 0x82
   1bb44:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
   1bb46:	2001      	movs	r0, #1
   1bb48:	4b4a      	ldr	r3, [pc, #296]	; (1bc74 <usbd_dmareq_process+0x1b8>)
   1bb4a:	7018      	strb	r0, [r3, #0]
            m_ep_ready &= ~(1U << pos);
   1bb4c:	fa00 f008 	lsl.w	r0, r0, r8
   1bb50:	4a4a      	ldr	r2, [pc, #296]	; (1bc7c <usbd_dmareq_process+0x1c0>)
   1bb52:	6813      	ldr	r3, [r2, #0]
   1bb54:	ea23 0000 	bic.w	r0, r3, r0
   1bb58:	6010      	str	r0, [r2, #0]
            p_state->transfer_cnt += transfer.size;
   1bb5a:	9a03      	ldr	r2, [sp, #12]
   1bb5c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1bb60:	4413      	add	r3, r2
   1bb62:	f8c9 3008 	str.w	r3, [r9, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   1bb66:	9b02      	ldr	r3, [sp, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
   1bb68:	2c00      	cmp	r4, #0
   1bb6a:	db4f      	blt.n	1bc0c <usbd_dmareq_process+0x150>
        if (NRF_USBD_EPISO_CHECK(ep))
   1bb6c:	f016 0f08 	tst.w	r6, #8
   1bb70:	d05f      	beq.n	1bc32 <usbd_dmareq_process+0x176>
            p_reg->ISOOUT.PTR    = ptr;
   1bb72:	4944      	ldr	r1, [pc, #272]	; (1bc84 <usbd_dmareq_process+0x1c8>)
   1bb74:	f8c1 37a0 	str.w	r3, [r1, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   1bb78:	f8c1 27a4 	str.w	r2, [r1, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   1bb7c:	2c00      	cmp	r4, #0
   1bb7e:	db62      	blt.n	1bc46 <usbd_dmareq_process+0x18a>
   1bb80:	2328      	movs	r3, #40	; 0x28
   1bb82:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1bb86:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   1bb8a:	f507 371c 	add.w	r7, r7, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1bb8e:	2301      	movs	r3, #1
   1bb90:	603b      	str	r3, [r7, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1bb92:	683b      	ldr	r3, [r7, #0]
}
   1bb94:	e065      	b.n	1bc62 <usbd_dmareq_process+0x1a6>
                pos = usbd_dma_scheduler_algorithm(req);
   1bb96:	4618      	mov	r0, r3
   1bb98:	f00b fb48 	bl	2722c <usbd_dma_scheduler_algorithm>
   1bb9c:	4680      	mov	r8, r0
   1bb9e:	e7a2      	b.n	1bae6 <usbd_dmareq_process+0x2a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1bba0:	f068 067f 	orn	r6, r8, #127	; 0x7f
   1bba4:	b2f6      	uxtb	r6, r6
   1bba6:	e7a4      	b.n	1baf2 <usbd_dmareq_process+0x36>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1bba8:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1bc9c <usbd_dmareq_process+0x1e0>
   1bbac:	e7a6      	b.n	1bafc <usbd_dmareq_process+0x40>
                continue_transfer = p_state->handler.feeder(
   1bbae:	f8d9 3000 	ldr.w	r3, [r9]
   1bbb2:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   1bbb6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1bbba:	a802      	add	r0, sp, #8
   1bbbc:	4798      	blx	r3
                if (!continue_transfer)
   1bbbe:	2800      	cmp	r0, #0
   1bbc0:	d1bb      	bne.n	1bb3a <usbd_dmareq_process+0x7e>
                    p_state->handler.feeder = NULL;
   1bbc2:	2300      	movs	r3, #0
   1bbc4:	f8c9 3000 	str.w	r3, [r9]
   1bbc8:	e7b7      	b.n	1bb3a <usbd_dmareq_process+0x7e>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   1bbca:	2202      	movs	r2, #2
   1bbcc:	f889 200e 	strb.w	r2, [r9, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1bbd0:	2301      	movs	r3, #1
   1bbd2:	fa03 f808 	lsl.w	r8, r3, r8
   1bbd6:	ea6f 0808 	mvn.w	r8, r8
   1bbda:	4b27      	ldr	r3, [pc, #156]	; (1bc78 <usbd_dmareq_process+0x1bc>)
   1bbdc:	f3bf 8f5b 	dmb	ish
   1bbe0:	e853 1f00 	ldrex	r1, [r3]
   1bbe4:	ea01 0108 	and.w	r1, r1, r8
   1bbe8:	e843 1000 	strex	r0, r1, [r3]
   1bbec:	2800      	cmp	r0, #0
   1bbee:	d1f7      	bne.n	1bbe0 <usbd_dmareq_process+0x124>
   1bbf0:	f3bf 8f5b 	dmb	ish
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   1bbf4:	2306      	movs	r3, #6
   1bbf6:	f88d 3004 	strb.w	r3, [sp, #4]
   1bbfa:	f88d 6006 	strb.w	r6, [sp, #6]
   1bbfe:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
   1bc02:	4b21      	ldr	r3, [pc, #132]	; (1bc88 <usbd_dmareq_process+0x1cc>)
   1bc04:	681b      	ldr	r3, [r3, #0]
   1bc06:	a801      	add	r0, sp, #4
   1bc08:	4798      	blx	r3
                    continue;
   1bc0a:	e75f      	b.n	1bacc <usbd_dmareq_process+0x10>
        if (NRF_USBD_EPISO_CHECK(ep))
   1bc0c:	f016 0f08 	tst.w	r6, #8
   1bc10:	d005      	beq.n	1bc1e <usbd_dmareq_process+0x162>
            p_reg->ISOIN.PTR    = ptr;
   1bc12:	491c      	ldr	r1, [pc, #112]	; (1bc84 <usbd_dmareq_process+0x1c8>)
   1bc14:	f8c1 36a0 	str.w	r3, [r1, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   1bc18:	f8c1 26a4 	str.w	r2, [r1, #1700]	; 0x6a4
   1bc1c:	e7ae      	b.n	1bb7c <usbd_dmareq_process+0xc0>
            p_reg->EPIN[epnr].PTR    = ptr;
   1bc1e:	4919      	ldr	r1, [pc, #100]	; (1bc84 <usbd_dmareq_process+0x1c8>)
   1bc20:	eb07 0087 	add.w	r0, r7, r7, lsl #2
   1bc24:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   1bc28:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   1bc2c:	f8c0 2604 	str.w	r2, [r0, #1540]	; 0x604
   1bc30:	e7a4      	b.n	1bb7c <usbd_dmareq_process+0xc0>
            p_reg->EPOUT[epnr].PTR    = ptr;
   1bc32:	4914      	ldr	r1, [pc, #80]	; (1bc84 <usbd_dmareq_process+0x1c8>)
   1bc34:	eb07 0087 	add.w	r0, r7, r7, lsl #2
   1bc38:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   1bc3c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   1bc40:	f8c0 2704 	str.w	r2, [r0, #1796]	; 0x704
   1bc44:	e79a      	b.n	1bb7c <usbd_dmareq_process+0xc0>
    return (nrf_usbd_task_t)(
   1bc46:	2304      	movs	r3, #4
   1bc48:	e79b      	b.n	1bb82 <usbd_dmareq_process+0xc6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   1bc4a:	4b10      	ldr	r3, [pc, #64]	; (1bc8c <usbd_dmareq_process+0x1d0>)
   1bc4c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1bc50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1bc54:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1bc58:	681b      	ldr	r3, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   1bc5a:	b933      	cbnz	r3, 1bc6a <usbd_dmareq_process+0x1ae>
   1bc5c:	4b0c      	ldr	r3, [pc, #48]	; (1bc90 <usbd_dmareq_process+0x1d4>)
   1bc5e:	681b      	ldr	r3, [r3, #0]
   1bc60:	b91b      	cbnz	r3, 1bc6a <usbd_dmareq_process+0x1ae>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   1bc62:	2c00      	cmp	r4, #0
   1bc64:	dbf1      	blt.n	1bc4a <usbd_dmareq_process+0x18e>
   1bc66:	4b0b      	ldr	r3, [pc, #44]	; (1bc94 <usbd_dmareq_process+0x1d8>)
   1bc68:	e7f0      	b.n	1bc4c <usbd_dmareq_process+0x190>
}
   1bc6a:	b005      	add	sp, #20
   1bc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc70:	4770      	bx	lr
   1bc72:	bf00      	nop
   1bc74:	20006a87 	.word	0x20006a87
   1bc78:	20005f64 	.word	0x20005f64
   1bc7c:	20005fd4 	.word	0x20005fd4
   1bc80:	40027c1c 	.word	0x40027c1c
   1bc84:	40027000 	.word	0x40027000
   1bc88:	200060f8 	.word	0x200060f8
   1bc8c:	00028e88 	.word	0x00028e88
   1bc90:	40027100 	.word	0x40027100
   1bc94:	00028ea8 	.word	0x00028ea8
   1bc98:	20005fd8 	.word	0x20005fd8
   1bc9c:	20006068 	.word	0x20006068

0001bca0 <ev_epdata_handler>:
{
   1bca0:	b510      	push	{r4, lr}
    return p_reg->EPDATASTATUS;
   1bca2:	4b0f      	ldr	r3, [pc, #60]	; (1bce0 <ev_epdata_handler+0x40>)
   1bca4:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   1bca8:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);
   1bcac:	e009      	b.n	1bcc2 <ev_epdata_handler+0x22>
    return 32U;
   1bcae:	2120      	movs	r1, #32
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
   1bcb0:	f1a1 0010 	sub.w	r0, r1, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1bcb4:	b2c0      	uxtb	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   1bcb6:	2301      	movs	r3, #1
   1bcb8:	408b      	lsls	r3, r1
   1bcba:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   1bcbe:	f7ff f9cb 	bl	1b058 <usbd_ep_data_handler>
    while (dataepstatus)
   1bcc2:	b154      	cbz	r4, 1bcda <ev_epdata_handler+0x3a>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1bcc4:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
   1bcc8:	2900      	cmp	r1, #0
   1bcca:	d0f0      	beq.n	1bcae <ev_epdata_handler+0xe>
  return __builtin_clz(value);
   1bccc:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1bcd0:	290f      	cmp	r1, #15
   1bcd2:	d8ed      	bhi.n	1bcb0 <ev_epdata_handler+0x10>
   1bcd4:	f041 0080 	orr.w	r0, r1, #128	; 0x80
   1bcd8:	e7ed      	b.n	1bcb6 <ev_epdata_handler+0x16>
        usbd_dmareq_process();
   1bcda:	f7ff feef 	bl	1babc <usbd_dmareq_process>
}
   1bcde:	bd10      	pop	{r4, pc}
   1bce0:	40027000 	.word	0x40027000

0001bce4 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   1bce4:	b500      	push	{lr}
   1bce6:	b083      	sub	sp, #12
   1bce8:	f7ff f878 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1bcec:	b110      	cbz	r0, 1bcf4 <ev_dma_epout7_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1bcee:	4b1d      	ldr	r3, [pc, #116]	; (1bd64 <ev_dma_epout7_handler+0x80>)
   1bcf0:	2200      	movs	r2, #0
   1bcf2:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1bcf4:	4b1c      	ldr	r3, [pc, #112]	; (1bd68 <ev_dma_epout7_handler+0x84>)
   1bcf6:	2200      	movs	r2, #0
   1bcf8:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1bcfa:	4b1c      	ldr	r3, [pc, #112]	; (1bd6c <ev_dma_epout7_handler+0x88>)
   1bcfc:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
   1bd00:	2b03      	cmp	r3, #3
   1bd02:	d01d      	beq.n	1bd40 <ev_dma_epout7_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
   1bd04:	4b19      	ldr	r3, [pc, #100]	; (1bd6c <ev_dma_epout7_handler+0x88>)
   1bd06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1bd08:	bb3b      	cbnz	r3, 1bd5a <ev_dma_epout7_handler+0x76>
   1bd0a:	4b19      	ldr	r3, [pc, #100]	; (1bd70 <ev_dma_epout7_handler+0x8c>)
   1bd0c:	f3bf 8f5b 	dmb	ish
   1bd10:	e853 2f00 	ldrex	r2, [r3]
   1bd14:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   1bd18:	e843 2100 	strex	r1, r2, [r3]
   1bd1c:	2900      	cmp	r1, #0
   1bd1e:	d1f7      	bne.n	1bd10 <ev_dma_epout7_handler+0x2c>
   1bd20:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1bd24:	2306      	movs	r3, #6
   1bd26:	f88d 3004 	strb.w	r3, [sp, #4]
   1bd2a:	2307      	movs	r3, #7
   1bd2c:	f88d 3006 	strb.w	r3, [sp, #6]
   1bd30:	2300      	movs	r3, #0
   1bd32:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   1bd36:	4b0f      	ldr	r3, [pc, #60]	; (1bd74 <ev_dma_epout7_handler+0x90>)
   1bd38:	681b      	ldr	r3, [r3, #0]
   1bd3a:	a801      	add	r0, sp, #4
   1bd3c:	4798      	blx	r3
   1bd3e:	e00c      	b.n	1bd5a <ev_dma_epout7_handler+0x76>
   1bd40:	4b0b      	ldr	r3, [pc, #44]	; (1bd70 <ev_dma_epout7_handler+0x8c>)
   1bd42:	f3bf 8f5b 	dmb	ish
   1bd46:	e853 2f00 	ldrex	r2, [r3]
   1bd4a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   1bd4e:	e843 2100 	strex	r1, r2, [r3]
   1bd52:	2900      	cmp	r1, #0
   1bd54:	d1f7      	bne.n	1bd46 <ev_dma_epout7_handler+0x62>
   1bd56:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   1bd5a:	f7ff feaf 	bl	1babc <usbd_dmareq_process>
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   1bd5e:	b003      	add	sp, #12
   1bd60:	f85d fb04 	ldr.w	pc, [sp], #4
   1bd64:	40027c1c 	.word	0x40027c1c
   1bd68:	20006a87 	.word	0x20006a87
   1bd6c:	20005fd8 	.word	0x20005fd8
   1bd70:	20005f64 	.word	0x20005f64
   1bd74:	200060f8 	.word	0x200060f8

0001bd78 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   1bd78:	b500      	push	{lr}
   1bd7a:	b083      	sub	sp, #12
   1bd7c:	f7ff f82e 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1bd80:	b110      	cbz	r0, 1bd88 <ev_dma_epout1_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1bd82:	4b1d      	ldr	r3, [pc, #116]	; (1bdf8 <ev_dma_epout1_handler+0x80>)
   1bd84:	2200      	movs	r2, #0
   1bd86:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1bd88:	4b1c      	ldr	r3, [pc, #112]	; (1bdfc <ev_dma_epout1_handler+0x84>)
   1bd8a:	2200      	movs	r2, #0
   1bd8c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1bd8e:	4b1c      	ldr	r3, [pc, #112]	; (1be00 <ev_dma_epout1_handler+0x88>)
   1bd90:	7f9b      	ldrb	r3, [r3, #30]
   1bd92:	2b03      	cmp	r3, #3
   1bd94:	d01d      	beq.n	1bdd2 <ev_dma_epout1_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
   1bd96:	4b1a      	ldr	r3, [pc, #104]	; (1be00 <ev_dma_epout1_handler+0x88>)
   1bd98:	691b      	ldr	r3, [r3, #16]
   1bd9a:	bb3b      	cbnz	r3, 1bdec <ev_dma_epout1_handler+0x74>
   1bd9c:	4b19      	ldr	r3, [pc, #100]	; (1be04 <ev_dma_epout1_handler+0x8c>)
   1bd9e:	f3bf 8f5b 	dmb	ish
   1bda2:	e853 2f00 	ldrex	r2, [r3]
   1bda6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   1bdaa:	e843 2100 	strex	r1, r2, [r3]
   1bdae:	2900      	cmp	r1, #0
   1bdb0:	d1f7      	bne.n	1bda2 <ev_dma_epout1_handler+0x2a>
   1bdb2:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1bdb6:	2306      	movs	r3, #6
   1bdb8:	f88d 3004 	strb.w	r3, [sp, #4]
   1bdbc:	2301      	movs	r3, #1
   1bdbe:	f88d 3006 	strb.w	r3, [sp, #6]
   1bdc2:	2300      	movs	r3, #0
   1bdc4:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   1bdc8:	4b0f      	ldr	r3, [pc, #60]	; (1be08 <ev_dma_epout1_handler+0x90>)
   1bdca:	681b      	ldr	r3, [r3, #0]
   1bdcc:	a801      	add	r0, sp, #4
   1bdce:	4798      	blx	r3
   1bdd0:	e00c      	b.n	1bdec <ev_dma_epout1_handler+0x74>
   1bdd2:	4b0c      	ldr	r3, [pc, #48]	; (1be04 <ev_dma_epout1_handler+0x8c>)
   1bdd4:	f3bf 8f5b 	dmb	ish
   1bdd8:	e853 2f00 	ldrex	r2, [r3]
   1bddc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   1bde0:	e843 2100 	strex	r1, r2, [r3]
   1bde4:	2900      	cmp	r1, #0
   1bde6:	d1f7      	bne.n	1bdd8 <ev_dma_epout1_handler+0x60>
   1bde8:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   1bdec:	f7ff fe66 	bl	1babc <usbd_dmareq_process>
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   1bdf0:	b003      	add	sp, #12
   1bdf2:	f85d fb04 	ldr.w	pc, [sp], #4
   1bdf6:	bf00      	nop
   1bdf8:	40027c1c 	.word	0x40027c1c
   1bdfc:	20006a87 	.word	0x20006a87
   1be00:	20005fd8 	.word	0x20005fd8
   1be04:	20005f64 	.word	0x20005f64
   1be08:	200060f8 	.word	0x200060f8

0001be0c <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   1be0c:	b500      	push	{lr}
   1be0e:	b083      	sub	sp, #12
   1be10:	f7fe ffe4 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1be14:	b110      	cbz	r0, 1be1c <ev_dma_epout2_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1be16:	4b1d      	ldr	r3, [pc, #116]	; (1be8c <ev_dma_epout2_handler+0x80>)
   1be18:	2200      	movs	r2, #0
   1be1a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1be1c:	4b1c      	ldr	r3, [pc, #112]	; (1be90 <ev_dma_epout2_handler+0x84>)
   1be1e:	2200      	movs	r2, #0
   1be20:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1be22:	4b1c      	ldr	r3, [pc, #112]	; (1be94 <ev_dma_epout2_handler+0x88>)
   1be24:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   1be28:	2b03      	cmp	r3, #3
   1be2a:	d01d      	beq.n	1be68 <ev_dma_epout2_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
   1be2c:	4b19      	ldr	r3, [pc, #100]	; (1be94 <ev_dma_epout2_handler+0x88>)
   1be2e:	6a1b      	ldr	r3, [r3, #32]
   1be30:	bb3b      	cbnz	r3, 1be82 <ev_dma_epout2_handler+0x76>
   1be32:	4b19      	ldr	r3, [pc, #100]	; (1be98 <ev_dma_epout2_handler+0x8c>)
   1be34:	f3bf 8f5b 	dmb	ish
   1be38:	e853 2f00 	ldrex	r2, [r3]
   1be3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
   1be40:	e843 2100 	strex	r1, r2, [r3]
   1be44:	2900      	cmp	r1, #0
   1be46:	d1f7      	bne.n	1be38 <ev_dma_epout2_handler+0x2c>
   1be48:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1be4c:	2306      	movs	r3, #6
   1be4e:	f88d 3004 	strb.w	r3, [sp, #4]
   1be52:	2302      	movs	r3, #2
   1be54:	f88d 3006 	strb.w	r3, [sp, #6]
   1be58:	2300      	movs	r3, #0
   1be5a:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   1be5e:	4b0f      	ldr	r3, [pc, #60]	; (1be9c <ev_dma_epout2_handler+0x90>)
   1be60:	681b      	ldr	r3, [r3, #0]
   1be62:	a801      	add	r0, sp, #4
   1be64:	4798      	blx	r3
   1be66:	e00c      	b.n	1be82 <ev_dma_epout2_handler+0x76>
   1be68:	4b0b      	ldr	r3, [pc, #44]	; (1be98 <ev_dma_epout2_handler+0x8c>)
   1be6a:	f3bf 8f5b 	dmb	ish
   1be6e:	e853 2f00 	ldrex	r2, [r3]
   1be72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
   1be76:	e843 2100 	strex	r1, r2, [r3]
   1be7a:	2900      	cmp	r1, #0
   1be7c:	d1f7      	bne.n	1be6e <ev_dma_epout2_handler+0x62>
   1be7e:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   1be82:	f7ff fe1b 	bl	1babc <usbd_dmareq_process>
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   1be86:	b003      	add	sp, #12
   1be88:	f85d fb04 	ldr.w	pc, [sp], #4
   1be8c:	40027c1c 	.word	0x40027c1c
   1be90:	20006a87 	.word	0x20006a87
   1be94:	20005fd8 	.word	0x20005fd8
   1be98:	20005f64 	.word	0x20005f64
   1be9c:	200060f8 	.word	0x200060f8

0001bea0 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   1bea0:	b500      	push	{lr}
   1bea2:	b083      	sub	sp, #12
   1bea4:	f7fe ff9a 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1bea8:	b110      	cbz	r0, 1beb0 <ev_dma_epout3_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1beaa:	4b1d      	ldr	r3, [pc, #116]	; (1bf20 <ev_dma_epout3_handler+0x80>)
   1beac:	2200      	movs	r2, #0
   1beae:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1beb0:	4b1c      	ldr	r3, [pc, #112]	; (1bf24 <ev_dma_epout3_handler+0x84>)
   1beb2:	2200      	movs	r2, #0
   1beb4:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1beb6:	4b1c      	ldr	r3, [pc, #112]	; (1bf28 <ev_dma_epout3_handler+0x88>)
   1beb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   1bebc:	2b03      	cmp	r3, #3
   1bebe:	d01d      	beq.n	1befc <ev_dma_epout3_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
   1bec0:	4b19      	ldr	r3, [pc, #100]	; (1bf28 <ev_dma_epout3_handler+0x88>)
   1bec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bec4:	bb3b      	cbnz	r3, 1bf16 <ev_dma_epout3_handler+0x76>
   1bec6:	4b19      	ldr	r3, [pc, #100]	; (1bf2c <ev_dma_epout3_handler+0x8c>)
   1bec8:	f3bf 8f5b 	dmb	ish
   1becc:	e853 2f00 	ldrex	r2, [r3]
   1bed0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
   1bed4:	e843 2100 	strex	r1, r2, [r3]
   1bed8:	2900      	cmp	r1, #0
   1beda:	d1f7      	bne.n	1becc <ev_dma_epout3_handler+0x2c>
   1bedc:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1bee0:	2306      	movs	r3, #6
   1bee2:	f88d 3004 	strb.w	r3, [sp, #4]
   1bee6:	2303      	movs	r3, #3
   1bee8:	f88d 3006 	strb.w	r3, [sp, #6]
   1beec:	2300      	movs	r3, #0
   1beee:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   1bef2:	4b0f      	ldr	r3, [pc, #60]	; (1bf30 <ev_dma_epout3_handler+0x90>)
   1bef4:	681b      	ldr	r3, [r3, #0]
   1bef6:	a801      	add	r0, sp, #4
   1bef8:	4798      	blx	r3
   1befa:	e00c      	b.n	1bf16 <ev_dma_epout3_handler+0x76>
   1befc:	4b0b      	ldr	r3, [pc, #44]	; (1bf2c <ev_dma_epout3_handler+0x8c>)
   1befe:	f3bf 8f5b 	dmb	ish
   1bf02:	e853 2f00 	ldrex	r2, [r3]
   1bf06:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
   1bf0a:	e843 2100 	strex	r1, r2, [r3]
   1bf0e:	2900      	cmp	r1, #0
   1bf10:	d1f7      	bne.n	1bf02 <ev_dma_epout3_handler+0x62>
   1bf12:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   1bf16:	f7ff fdd1 	bl	1babc <usbd_dmareq_process>
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   1bf1a:	b003      	add	sp, #12
   1bf1c:	f85d fb04 	ldr.w	pc, [sp], #4
   1bf20:	40027c1c 	.word	0x40027c1c
   1bf24:	20006a87 	.word	0x20006a87
   1bf28:	20005fd8 	.word	0x20005fd8
   1bf2c:	20005f64 	.word	0x20005f64
   1bf30:	200060f8 	.word	0x200060f8

0001bf34 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   1bf34:	b500      	push	{lr}
   1bf36:	b083      	sub	sp, #12
   1bf38:	f7fe ff50 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1bf3c:	b110      	cbz	r0, 1bf44 <ev_dma_epout4_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1bf3e:	4b1d      	ldr	r3, [pc, #116]	; (1bfb4 <ev_dma_epout4_handler+0x80>)
   1bf40:	2200      	movs	r2, #0
   1bf42:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1bf44:	4b1c      	ldr	r3, [pc, #112]	; (1bfb8 <ev_dma_epout4_handler+0x84>)
   1bf46:	2200      	movs	r2, #0
   1bf48:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1bf4a:	4b1c      	ldr	r3, [pc, #112]	; (1bfbc <ev_dma_epout4_handler+0x88>)
   1bf4c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   1bf50:	2b03      	cmp	r3, #3
   1bf52:	d01d      	beq.n	1bf90 <ev_dma_epout4_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
   1bf54:	4b19      	ldr	r3, [pc, #100]	; (1bfbc <ev_dma_epout4_handler+0x88>)
   1bf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bf58:	bb3b      	cbnz	r3, 1bfaa <ev_dma_epout4_handler+0x76>
   1bf5a:	4b19      	ldr	r3, [pc, #100]	; (1bfc0 <ev_dma_epout4_handler+0x8c>)
   1bf5c:	f3bf 8f5b 	dmb	ish
   1bf60:	e853 2f00 	ldrex	r2, [r3]
   1bf64:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
   1bf68:	e843 2100 	strex	r1, r2, [r3]
   1bf6c:	2900      	cmp	r1, #0
   1bf6e:	d1f7      	bne.n	1bf60 <ev_dma_epout4_handler+0x2c>
   1bf70:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1bf74:	2306      	movs	r3, #6
   1bf76:	f88d 3004 	strb.w	r3, [sp, #4]
   1bf7a:	2304      	movs	r3, #4
   1bf7c:	f88d 3006 	strb.w	r3, [sp, #6]
   1bf80:	2300      	movs	r3, #0
   1bf82:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   1bf86:	4b0f      	ldr	r3, [pc, #60]	; (1bfc4 <ev_dma_epout4_handler+0x90>)
   1bf88:	681b      	ldr	r3, [r3, #0]
   1bf8a:	a801      	add	r0, sp, #4
   1bf8c:	4798      	blx	r3
   1bf8e:	e00c      	b.n	1bfaa <ev_dma_epout4_handler+0x76>
   1bf90:	4b0b      	ldr	r3, [pc, #44]	; (1bfc0 <ev_dma_epout4_handler+0x8c>)
   1bf92:	f3bf 8f5b 	dmb	ish
   1bf96:	e853 2f00 	ldrex	r2, [r3]
   1bf9a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
   1bf9e:	e843 2100 	strex	r1, r2, [r3]
   1bfa2:	2900      	cmp	r1, #0
   1bfa4:	d1f7      	bne.n	1bf96 <ev_dma_epout4_handler+0x62>
   1bfa6:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   1bfaa:	f7ff fd87 	bl	1babc <usbd_dmareq_process>
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   1bfae:	b003      	add	sp, #12
   1bfb0:	f85d fb04 	ldr.w	pc, [sp], #4
   1bfb4:	40027c1c 	.word	0x40027c1c
   1bfb8:	20006a87 	.word	0x20006a87
   1bfbc:	20005fd8 	.word	0x20005fd8
   1bfc0:	20005f64 	.word	0x20005f64
   1bfc4:	200060f8 	.word	0x200060f8

0001bfc8 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   1bfc8:	b500      	push	{lr}
   1bfca:	b083      	sub	sp, #12
   1bfcc:	f7fe ff06 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1bfd0:	b110      	cbz	r0, 1bfd8 <ev_dma_epout5_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1bfd2:	4b1d      	ldr	r3, [pc, #116]	; (1c048 <ev_dma_epout5_handler+0x80>)
   1bfd4:	2200      	movs	r2, #0
   1bfd6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1bfd8:	4b1c      	ldr	r3, [pc, #112]	; (1c04c <ev_dma_epout5_handler+0x84>)
   1bfda:	2200      	movs	r2, #0
   1bfdc:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1bfde:	4b1c      	ldr	r3, [pc, #112]	; (1c050 <ev_dma_epout5_handler+0x88>)
   1bfe0:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
   1bfe4:	2b03      	cmp	r3, #3
   1bfe6:	d01d      	beq.n	1c024 <ev_dma_epout5_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
   1bfe8:	4b19      	ldr	r3, [pc, #100]	; (1c050 <ev_dma_epout5_handler+0x88>)
   1bfea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1bfec:	bb3b      	cbnz	r3, 1c03e <ev_dma_epout5_handler+0x76>
   1bfee:	4b19      	ldr	r3, [pc, #100]	; (1c054 <ev_dma_epout5_handler+0x8c>)
   1bff0:	f3bf 8f5b 	dmb	ish
   1bff4:	e853 2f00 	ldrex	r2, [r3]
   1bff8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   1bffc:	e843 2100 	strex	r1, r2, [r3]
   1c000:	2900      	cmp	r1, #0
   1c002:	d1f7      	bne.n	1bff4 <ev_dma_epout5_handler+0x2c>
   1c004:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1c008:	2306      	movs	r3, #6
   1c00a:	f88d 3004 	strb.w	r3, [sp, #4]
   1c00e:	2305      	movs	r3, #5
   1c010:	f88d 3006 	strb.w	r3, [sp, #6]
   1c014:	2300      	movs	r3, #0
   1c016:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   1c01a:	4b0f      	ldr	r3, [pc, #60]	; (1c058 <ev_dma_epout5_handler+0x90>)
   1c01c:	681b      	ldr	r3, [r3, #0]
   1c01e:	a801      	add	r0, sp, #4
   1c020:	4798      	blx	r3
   1c022:	e00c      	b.n	1c03e <ev_dma_epout5_handler+0x76>
   1c024:	4b0b      	ldr	r3, [pc, #44]	; (1c054 <ev_dma_epout5_handler+0x8c>)
   1c026:	f3bf 8f5b 	dmb	ish
   1c02a:	e853 2f00 	ldrex	r2, [r3]
   1c02e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   1c032:	e843 2100 	strex	r1, r2, [r3]
   1c036:	2900      	cmp	r1, #0
   1c038:	d1f7      	bne.n	1c02a <ev_dma_epout5_handler+0x62>
   1c03a:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   1c03e:	f7ff fd3d 	bl	1babc <usbd_dmareq_process>
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   1c042:	b003      	add	sp, #12
   1c044:	f85d fb04 	ldr.w	pc, [sp], #4
   1c048:	40027c1c 	.word	0x40027c1c
   1c04c:	20006a87 	.word	0x20006a87
   1c050:	20005fd8 	.word	0x20005fd8
   1c054:	20005f64 	.word	0x20005f64
   1c058:	200060f8 	.word	0x200060f8

0001c05c <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   1c05c:	b500      	push	{lr}
   1c05e:	b083      	sub	sp, #12
   1c060:	f7fe febc 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1c064:	b110      	cbz	r0, 1c06c <ev_dma_epout6_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1c066:	4b1d      	ldr	r3, [pc, #116]	; (1c0dc <ev_dma_epout6_handler+0x80>)
   1c068:	2200      	movs	r2, #0
   1c06a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1c06c:	4b1c      	ldr	r3, [pc, #112]	; (1c0e0 <ev_dma_epout6_handler+0x84>)
   1c06e:	2200      	movs	r2, #0
   1c070:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1c072:	4b1c      	ldr	r3, [pc, #112]	; (1c0e4 <ev_dma_epout6_handler+0x88>)
   1c074:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
   1c078:	2b03      	cmp	r3, #3
   1c07a:	d01c      	beq.n	1c0b6 <ev_dma_epout6_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
   1c07c:	4b19      	ldr	r3, [pc, #100]	; (1c0e4 <ev_dma_epout6_handler+0x88>)
   1c07e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1c080:	bb33      	cbnz	r3, 1c0d0 <ev_dma_epout6_handler+0x74>
   1c082:	4b19      	ldr	r3, [pc, #100]	; (1c0e8 <ev_dma_epout6_handler+0x8c>)
   1c084:	f3bf 8f5b 	dmb	ish
   1c088:	e853 2f00 	ldrex	r2, [r3]
   1c08c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   1c090:	e843 2100 	strex	r1, r2, [r3]
   1c094:	2900      	cmp	r1, #0
   1c096:	d1f7      	bne.n	1c088 <ev_dma_epout6_handler+0x2c>
   1c098:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1c09c:	2306      	movs	r3, #6
   1c09e:	f88d 3004 	strb.w	r3, [sp, #4]
   1c0a2:	f88d 3006 	strb.w	r3, [sp, #6]
   1c0a6:	2300      	movs	r3, #0
   1c0a8:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   1c0ac:	4b0f      	ldr	r3, [pc, #60]	; (1c0ec <ev_dma_epout6_handler+0x90>)
   1c0ae:	681b      	ldr	r3, [r3, #0]
   1c0b0:	a801      	add	r0, sp, #4
   1c0b2:	4798      	blx	r3
   1c0b4:	e00c      	b.n	1c0d0 <ev_dma_epout6_handler+0x74>
   1c0b6:	4b0c      	ldr	r3, [pc, #48]	; (1c0e8 <ev_dma_epout6_handler+0x8c>)
   1c0b8:	f3bf 8f5b 	dmb	ish
   1c0bc:	e853 2f00 	ldrex	r2, [r3]
   1c0c0:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   1c0c4:	e843 2100 	strex	r1, r2, [r3]
   1c0c8:	2900      	cmp	r1, #0
   1c0ca:	d1f7      	bne.n	1c0bc <ev_dma_epout6_handler+0x60>
   1c0cc:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   1c0d0:	f7ff fcf4 	bl	1babc <usbd_dmareq_process>
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   1c0d4:	b003      	add	sp, #12
   1c0d6:	f85d fb04 	ldr.w	pc, [sp], #4
   1c0da:	bf00      	nop
   1c0dc:	40027c1c 	.word	0x40027c1c
   1c0e0:	20006a87 	.word	0x20006a87
   1c0e4:	20005fd8 	.word	0x20005fd8
   1c0e8:	20005f64 	.word	0x20005f64
   1c0ec:	200060f8 	.word	0x200060f8

0001c0f0 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   1c0f0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   1c0f4:	4b01      	ldr	r3, [pc, #4]	; (1c0fc <nrfx_usbd_ep_stall+0xc>)
   1c0f6:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   1c0fa:	4770      	bx	lr
   1c0fc:	40027000 	.word	0x40027000

0001c100 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   1c100:	f010 0f08 	tst.w	r0, #8
   1c104:	d117      	bne.n	1c136 <nrfx_usbd_ep_stall_check+0x36>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1c106:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   1c10a:	f010 0f80 	tst.w	r0, #128	; 0x80
   1c10e:	d10c      	bne.n	1c12a <nrfx_usbd_ep_stall_check+0x2a>
        return p_reg->HALTED.EPOUT[epnr];
   1c110:	f503 7388 	add.w	r3, r3, #272	; 0x110
   1c114:	009b      	lsls	r3, r3, #2
   1c116:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c11a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   1c11e:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   1c120:	2801      	cmp	r0, #1
   1c122:	bf14      	ite	ne
   1c124:	2000      	movne	r0, #0
   1c126:	2001      	moveq	r0, #1
   1c128:	4770      	bx	lr
        return p_reg->HALTED.EPIN[epnr];
   1c12a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   1c12e:	4a03      	ldr	r2, [pc, #12]	; (1c13c <nrfx_usbd_ep_stall_check+0x3c>)
   1c130:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   1c134:	e7f4      	b.n	1c120 <nrfx_usbd_ep_stall_check+0x20>
        return false;
   1c136:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   1c138:	4770      	bx	lr
   1c13a:	bf00      	nop
   1c13c:	40027000 	.word	0x40027000

0001c140 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   1c140:	4b04      	ldr	r3, [pc, #16]	; (1c154 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   1c142:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   1c146:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   1c14a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   1c14e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   1c152:	4770      	bx	lr
   1c154:	40027000 	.word	0x40027000

0001c158 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   1c158:	b510      	push	{r4, lr}
   1c15a:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   1c15c:	2208      	movs	r2, #8
   1c15e:	2100      	movs	r1, #0
   1c160:	f006 fc89 	bl	22a76 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   1c164:	4b11      	ldr	r3, [pc, #68]	; (1c1ac <nrfx_usbd_setup_get+0x54>)
   1c166:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
   1c16a:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   1c16c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
   1c170:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   1c172:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
   1c176:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   1c178:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   1c17c:	0209      	lsls	r1, r1, #8
   1c17e:	b289      	uxth	r1, r1
   1c180:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   1c182:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   1c184:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
   1c188:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   1c18a:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   1c18e:	0209      	lsls	r1, r1, #8
   1c190:	b289      	uxth	r1, r1
   1c192:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   1c194:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   1c196:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
   1c19a:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   1c19c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   1c1a0:	021b      	lsls	r3, r3, #8
   1c1a2:	b29b      	uxth	r3, r3
   1c1a4:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   1c1a6:	80e3      	strh	r3, [r4, #6]
}
   1c1a8:	bd10      	pop	{r4, pc}
   1c1aa:	bf00      	nop
   1c1ac:	40027000 	.word	0x40027000

0001c1b0 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1c1b0:	4b02      	ldr	r3, [pc, #8]	; (1c1bc <nrfx_usbd_setup_data_clear+0xc>)
   1c1b2:	2201      	movs	r2, #1
   1c1b4:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1c1b6:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   1c1b8:	4770      	bx	lr
   1c1ba:	bf00      	nop
   1c1bc:	4002704c 	.word	0x4002704c

0001c1c0 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1c1c0:	b500      	push	{lr}
   1c1c2:	b083      	sub	sp, #12
   1c1c4:	f7fe fe0a 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1c1c8:	b110      	cbz	r0, 1c1d0 <ev_dma_epout0_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1c1ca:	4b1d      	ldr	r3, [pc, #116]	; (1c240 <ev_dma_epout0_handler+0x80>)
   1c1cc:	2200      	movs	r2, #0
   1c1ce:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1c1d0:	4b1c      	ldr	r3, [pc, #112]	; (1c244 <ev_dma_epout0_handler+0x84>)
   1c1d2:	2200      	movs	r2, #0
   1c1d4:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1c1d6:	4b1c      	ldr	r3, [pc, #112]	; (1c248 <ev_dma_epout0_handler+0x88>)
   1c1d8:	7b9b      	ldrb	r3, [r3, #14]
   1c1da:	2b03      	cmp	r3, #3
   1c1dc:	d005      	beq.n	1c1ea <ev_dma_epout0_handler+0x2a>
    else if (p_state->handler.consumer == NULL)
   1c1de:	4b1a      	ldr	r3, [pc, #104]	; (1c248 <ev_dma_epout0_handler+0x88>)
   1c1e0:	681b      	ldr	r3, [r3, #0]
   1c1e2:	b183      	cbz	r3, 1c206 <ev_dma_epout0_handler+0x46>
        nrfx_usbd_setup_data_clear();
   1c1e4:	f7ff ffe4 	bl	1c1b0 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1c1e8:	e026      	b.n	1c238 <ev_dma_epout0_handler+0x78>
   1c1ea:	4b18      	ldr	r3, [pc, #96]	; (1c24c <ev_dma_epout0_handler+0x8c>)
   1c1ec:	f3bf 8f5b 	dmb	ish
   1c1f0:	e853 2f00 	ldrex	r2, [r3]
   1c1f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   1c1f8:	e843 2100 	strex	r1, r2, [r3]
   1c1fc:	2900      	cmp	r1, #0
   1c1fe:	d1f7      	bne.n	1c1f0 <ev_dma_epout0_handler+0x30>
   1c200:	f3bf 8f5b 	dmb	ish
   1c204:	e018      	b.n	1c238 <ev_dma_epout0_handler+0x78>
   1c206:	4b11      	ldr	r3, [pc, #68]	; (1c24c <ev_dma_epout0_handler+0x8c>)
   1c208:	f3bf 8f5b 	dmb	ish
   1c20c:	e853 2f00 	ldrex	r2, [r3]
   1c210:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   1c214:	e843 2100 	strex	r1, r2, [r3]
   1c218:	2900      	cmp	r1, #0
   1c21a:	d1f7      	bne.n	1c20c <ev_dma_epout0_handler+0x4c>
   1c21c:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1c220:	2306      	movs	r3, #6
   1c222:	f88d 3004 	strb.w	r3, [sp, #4]
   1c226:	2300      	movs	r3, #0
   1c228:	f88d 3006 	strb.w	r3, [sp, #6]
   1c22c:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   1c230:	4b07      	ldr	r3, [pc, #28]	; (1c250 <ev_dma_epout0_handler+0x90>)
   1c232:	681b      	ldr	r3, [r3, #0]
   1c234:	a801      	add	r0, sp, #4
   1c236:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1c238:	b003      	add	sp, #12
   1c23a:	f85d fb04 	ldr.w	pc, [sp], #4
   1c23e:	bf00      	nop
   1c240:	40027c1c 	.word	0x40027c1c
   1c244:	20006a87 	.word	0x20006a87
   1c248:	20005fd8 	.word	0x20005fd8
   1c24c:	20005f64 	.word	0x20005f64
   1c250:	200060f8 	.word	0x200060f8

0001c254 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1c254:	4b02      	ldr	r3, [pc, #8]	; (1c260 <nrfx_usbd_setup_clear+0xc>)
   1c256:	2201      	movs	r2, #1
   1c258:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1c25a:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   1c25c:	4770      	bx	lr
   1c25e:	bf00      	nop
   1c260:	40027050 	.word	0x40027050

0001c264 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1c264:	4b02      	ldr	r3, [pc, #8]	; (1c270 <nrfx_usbd_setup_stall+0xc>)
   1c266:	2201      	movs	r2, #1
   1c268:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1c26a:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   1c26c:	4770      	bx	lr
   1c26e:	bf00      	nop
   1c270:	40027054 	.word	0x40027054

0001c274 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   1c274:	4b01      	ldr	r3, [pc, #4]	; (1c27c <nrfx_usbd_last_setup_dir_get+0x8>)
   1c276:	7818      	ldrb	r0, [r3, #0]
   1c278:	4770      	bx	lr
   1c27a:	bf00      	nop
   1c27c:	20006a89 	.word	0x20006a89

0001c280 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   1c280:	b410      	push	{r4}
	__asm__ volatile(
   1c282:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c286:	f3ef 8411 	mrs	r4, BASEPRI
   1c28a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c28e:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_EP_BITPOS(ep);
   1c292:	b243      	sxtb	r3, r0
   1c294:	2b00      	cmp	r3, #0
   1c296:	db1e      	blt.n	1c2d6 <nrfx_usbd_transfer_out_drop+0x56>
   1c298:	2210      	movs	r2, #16
   1c29a:	f003 030f 	and.w	r3, r3, #15
   1c29e:	4413      	add	r3, r2
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   1c2a0:	2201      	movs	r2, #1
   1c2a2:	fa02 f303 	lsl.w	r3, r2, r3
   1c2a6:	490d      	ldr	r1, [pc, #52]	; (1c2dc <nrfx_usbd_transfer_out_drop+0x5c>)
   1c2a8:	680a      	ldr	r2, [r1, #0]
   1c2aa:	ea22 0203 	bic.w	r2, r2, r3
   1c2ae:	600a      	str	r2, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   1c2b0:	f010 0f08 	tst.w	r0, #8
   1c2b4:	d109      	bne.n	1c2ca <nrfx_usbd_transfer_out_drop+0x4a>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   1c2b6:	f000 000f 	and.w	r0, r0, #15
   1c2ba:	4b09      	ldr	r3, [pc, #36]	; (1c2e0 <nrfx_usbd_transfer_out_drop+0x60>)
   1c2bc:	f500 7094 	add.w	r0, r0, #296	; 0x128
   1c2c0:	2200      	movs	r2, #0
   1c2c2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   1c2c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	__asm__ volatile(
   1c2ca:	f384 8811 	msr	BASEPRI, r4
   1c2ce:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   1c2d2:	bc10      	pop	{r4}
   1c2d4:	4770      	bx	lr
    return NRFX_USBD_EP_BITPOS(ep);
   1c2d6:	2200      	movs	r2, #0
   1c2d8:	e7df      	b.n	1c29a <nrfx_usbd_transfer_out_drop+0x1a>
   1c2da:	bf00      	nop
   1c2dc:	20005fd4 	.word	0x20005fd4
   1c2e0:	40027000 	.word	0x40027000

0001c2e4 <ev_setup_handler>:
{
   1c2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c2e6:	b083      	sub	sp, #12
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   1c2e8:	4b60      	ldr	r3, [pc, #384]	; (1c46c <ev_setup_handler+0x188>)
   1c2ea:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1c2ee:	4b60      	ldr	r3, [pc, #384]	; (1c470 <ev_setup_handler+0x18c>)
   1c2f0:	681b      	ldr	r3, [r3, #0]
   1c2f2:	43db      	mvns	r3, r3
   1c2f4:	b29b      	uxth	r3, r3
   1c2f6:	4a5f      	ldr	r2, [pc, #380]	; (1c474 <ev_setup_handler+0x190>)
   1c2f8:	6812      	ldr	r2, [r2, #0]
   1c2fa:	4313      	orrs	r3, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   1c2fc:	4a5e      	ldr	r2, [pc, #376]	; (1c478 <ev_setup_handler+0x194>)
   1c2fe:	7810      	ldrb	r0, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
   1c300:	f992 2000 	ldrsb.w	r2, [r2]
   1c304:	2a00      	cmp	r2, #0
   1c306:	db2f      	blt.n	1c368 <ev_setup_handler+0x84>
   1c308:	2110      	movs	r1, #16
   1c30a:	f002 020f 	and.w	r2, r2, #15
   1c30e:	440a      	add	r2, r1
        & (1U <<ep2bit(m_last_setup_dir)))
   1c310:	2101      	movs	r1, #1
   1c312:	fa01 f202 	lsl.w	r2, r1, r2
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1c316:	4213      	tst	r3, r2
   1c318:	d128      	bne.n	1c36c <ev_setup_handler+0x88>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   1c31a:	f014 0f80 	tst.w	r4, #128	; 0x80
   1c31e:	f040 80a2 	bne.w	1c466 <ev_setup_handler+0x182>
   1c322:	2200      	movs	r2, #0
    m_last_setup_dir =
   1c324:	4b54      	ldr	r3, [pc, #336]	; (1c478 <ev_setup_handler+0x194>)
   1c326:	701a      	strb	r2, [r3, #0]
   1c328:	4b52      	ldr	r3, [pc, #328]	; (1c474 <ev_setup_handler+0x190>)
   1c32a:	f3bf 8f5b 	dmb	ish
   1c32e:	e853 2f00 	ldrex	r2, [r3]
   1c332:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
   1c336:	e843 2100 	strex	r1, r2, [r3]
   1c33a:	2900      	cmp	r1, #0
   1c33c:	d1f7      	bne.n	1c32e <ev_setup_handler+0x4a>
   1c33e:	f3bf 8f5b 	dmb	ish
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   1c342:	4a4b      	ldr	r2, [pc, #300]	; (1c470 <ev_setup_handler+0x18c>)
   1c344:	6813      	ldr	r3, [r2, #0]
   1c346:	f043 0301 	orr.w	r3, r3, #1
   1c34a:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   1c34c:	2300      	movs	r3, #0
   1c34e:	f8ad 3005 	strh.w	r3, [sp, #5]
   1c352:	f88d 3007 	strb.w	r3, [sp, #7]
   1c356:	2305      	movs	r3, #5
   1c358:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   1c35c:	4b47      	ldr	r3, [pc, #284]	; (1c47c <ev_setup_handler+0x198>)
   1c35e:	681b      	ldr	r3, [r3, #0]
   1c360:	a801      	add	r0, sp, #4
   1c362:	4798      	blx	r3
}
   1c364:	b003      	add	sp, #12
   1c366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   1c368:	2100      	movs	r1, #0
   1c36a:	e7ce      	b.n	1c30a <ev_setup_handler+0x26>
	__asm__ volatile(
   1c36c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c370:	f3ef 8611 	mrs	r6, BASEPRI
   1c374:	f383 8812 	msr	BASEPRI_MAX, r3
   1c378:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1c37c:	b243      	sxtb	r3, r0
   1c37e:	2b00      	cmp	r3, #0
   1c380:	db26      	blt.n	1c3d0 <ev_setup_handler+0xec>
   1c382:	4d3f      	ldr	r5, [pc, #252]	; (1c480 <ev_setup_handler+0x19c>)
        NRF_USBD_EP_NR_GET(ep));
   1c384:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1c388:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
   1c38c:	2b00      	cmp	r3, #0
   1c38e:	db24      	blt.n	1c3da <ev_setup_handler+0xf6>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1c390:	4a38      	ldr	r2, [pc, #224]	; (1c474 <ev_setup_handler+0x190>)
   1c392:	6812      	ldr	r2, [r2, #0]
   1c394:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
   1c396:	f003 030f 	and.w	r3, r3, #15
   1c39a:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1c39c:	40da      	lsrs	r2, r3
   1c39e:	f012 0f01 	tst.w	r2, #1
   1c3a2:	d117      	bne.n	1c3d4 <ev_setup_handler+0xf0>
            p_state->handler.consumer = NULL;
   1c3a4:	2200      	movs	r2, #0
   1c3a6:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1c3a8:	2201      	movs	r2, #1
   1c3aa:	fa02 f303 	lsl.w	r3, r2, r3
   1c3ae:	4931      	ldr	r1, [pc, #196]	; (1c474 <ev_setup_handler+0x190>)
   1c3b0:	680a      	ldr	r2, [r1, #0]
   1c3b2:	ea22 0203 	bic.w	r2, r2, r3
   1c3b6:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   1c3b8:	492d      	ldr	r1, [pc, #180]	; (1c470 <ev_setup_handler+0x18c>)
   1c3ba:	680a      	ldr	r2, [r1, #0]
   1c3bc:	ea22 0303 	bic.w	r3, r2, r3
   1c3c0:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
   1c3c2:	2303      	movs	r3, #3
   1c3c4:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
   1c3c6:	f386 8811 	msr	BASEPRI, r6
   1c3ca:	f3bf 8f6f 	isb	sy
}
   1c3ce:	e7a4      	b.n	1c31a <ev_setup_handler+0x36>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1c3d0:	4d2c      	ldr	r5, [pc, #176]	; (1c484 <ev_setup_handler+0x1a0>)
   1c3d2:	e7d7      	b.n	1c384 <ev_setup_handler+0xa0>
            nrfx_usbd_transfer_out_drop(ep);
   1c3d4:	f7ff ff54 	bl	1c280 <nrfx_usbd_transfer_out_drop>
   1c3d8:	e7f3      	b.n	1c3c2 <ev_setup_handler+0xde>
        if(!NRF_USBD_EPISO_CHECK(ep))
   1c3da:	f010 0f08 	tst.w	r0, #8
   1c3de:	d10f      	bne.n	1c400 <ev_setup_handler+0x11c>
            if(ep != NRFX_USBD_EPIN0)
   1c3e0:	2880      	cmp	r0, #128	; 0x80
   1c3e2:	d032      	beq.n	1c44a <ev_setup_handler+0x166>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   1c3e4:	f202 32da 	addw	r2, r2, #986	; 0x3da
   1c3e8:	0052      	lsls	r2, r2, #1
   1c3ea:	4927      	ldr	r1, [pc, #156]	; (1c488 <ev_setup_handler+0x1a4>)
   1c3ec:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1c3ee:	3104      	adds	r1, #4
   1c3f0:	680a      	ldr	r2, [r1, #0]
   1c3f2:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
   1c3f4:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1c3f8:	680f      	ldr	r7, [r1, #0]
   1c3fa:	433a      	orrs	r2, r7
   1c3fc:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   1c3fe:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   1c400:	4a1b      	ldr	r2, [pc, #108]	; (1c470 <ev_setup_handler+0x18c>)
   1c402:	6811      	ldr	r1, [r2, #0]
   1c404:	4a1b      	ldr	r2, [pc, #108]	; (1c474 <ev_setup_handler+0x190>)
   1c406:	6817      	ldr	r7, [r2, #0]
   1c408:	ea67 0c01 	orn	ip, r7, r1
    return NRFX_USBD_EP_BITPOS(ep);
   1c40c:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   1c410:	2201      	movs	r2, #1
   1c412:	fa02 f303 	lsl.w	r3, r2, r3
   1c416:	ea1c 0f03 	tst.w	ip, r3
   1c41a:	d0d4      	beq.n	1c3c6 <ev_setup_handler+0xe2>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1c41c:	ea27 0703 	bic.w	r7, r7, r3
   1c420:	4a14      	ldr	r2, [pc, #80]	; (1c474 <ev_setup_handler+0x190>)
   1c422:	6017      	str	r7, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
   1c424:	430b      	orrs	r3, r1
   1c426:	4a12      	ldr	r2, [pc, #72]	; (1c470 <ev_setup_handler+0x18c>)
   1c428:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
   1c42a:	2300      	movs	r3, #0
   1c42c:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   1c42e:	2303      	movs	r3, #3
   1c430:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1c432:	2206      	movs	r2, #6
   1c434:	f88d 2000 	strb.w	r2, [sp]
   1c438:	f88d 0002 	strb.w	r0, [sp, #2]
   1c43c:	f88d 3003 	strb.w	r3, [sp, #3]
            m_event_handler(&evt);
   1c440:	4b0e      	ldr	r3, [pc, #56]	; (1c47c <ev_setup_handler+0x198>)
   1c442:	681b      	ldr	r3, [r3, #0]
   1c444:	4668      	mov	r0, sp
   1c446:	4798      	blx	r3
   1c448:	e7bd      	b.n	1c3c6 <ev_setup_handler+0xe2>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   1c44a:	4a0f      	ldr	r2, [pc, #60]	; (1c488 <ev_setup_handler+0x1a4>)
   1c44c:	f240 71b4 	movw	r1, #1972	; 0x7b4
   1c450:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1c452:	490e      	ldr	r1, [pc, #56]	; (1c48c <ev_setup_handler+0x1a8>)
   1c454:	680a      	ldr	r2, [r1, #0]
   1c456:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
   1c458:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1c45c:	680f      	ldr	r7, [r1, #0]
   1c45e:	433a      	orrs	r2, r7
   1c460:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   1c462:	680a      	ldr	r2, [r1, #0]
   1c464:	e7cc      	b.n	1c400 <ev_setup_handler+0x11c>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   1c466:	2280      	movs	r2, #128	; 0x80
   1c468:	e75c      	b.n	1c324 <ev_setup_handler+0x40>
   1c46a:	bf00      	nop
   1c46c:	40027000 	.word	0x40027000
   1c470:	20005fd4 	.word	0x20005fd4
   1c474:	20005f64 	.word	0x20005f64
   1c478:	20006a89 	.word	0x20006a89
   1c47c:	200060f8 	.word	0x200060f8
   1c480:	20005fd8 	.word	0x20005fd8
   1c484:	20006068 	.word	0x20006068
   1c488:	40027800 	.word	0x40027800
   1c48c:	40027804 	.word	0x40027804

0001c490 <nrfx_usbd_irq_handler>:
{
   1c490:	b570      	push	{r4, r5, r6, lr}
    return p_reg->INTENSET;
   1c492:	4b22      	ldr	r3, [pc, #136]	; (1c51c <nrfx_usbd_irq_handler+0x8c>)
   1c494:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
    uint32_t active = 0;
   1c498:	2500      	movs	r5, #0
    while (to_process)
   1c49a:	e006      	b.n	1c4aa <nrfx_usbd_irq_handler+0x1a>
    return 32U;
   1c49c:	2220      	movs	r2, #32
   1c49e:	e00b      	b.n	1c4b8 <nrfx_usbd_irq_handler+0x28>
        to_process &= ~(1UL << event_nr);
   1c4a0:	2301      	movs	r3, #1
   1c4a2:	fa03 f202 	lsl.w	r2, r3, r2
   1c4a6:	ea21 0102 	bic.w	r1, r1, r2
    while (to_process)
   1c4aa:	b1c1      	cbz	r1, 1c4de <nrfx_usbd_irq_handler+0x4e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1c4ac:	fa91 f2a1 	rbit	r2, r1
  if (value == 0U)
   1c4b0:	2a00      	cmp	r2, #0
   1c4b2:	d0f3      	beq.n	1c49c <nrfx_usbd_irq_handler+0xc>
  return __builtin_clz(value);
   1c4b4:	fab2 f282 	clz	r2, r2
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   1c4b8:	f102 0340 	add.w	r3, r2, #64	; 0x40
   1c4bc:	009b      	lsls	r3, r3, #2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1c4be:	b29b      	uxth	r3, r3
   1c4c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c4c4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1c4c8:	6818      	ldr	r0, [r3, #0]
    if (ret)
   1c4ca:	b110      	cbz	r0, 1c4d2 <nrfx_usbd_irq_handler+0x42>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1c4cc:	2400      	movs	r4, #0
   1c4ce:	601c      	str	r4, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   1c4d0:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD,
   1c4d2:	2800      	cmp	r0, #0
   1c4d4:	d0e4      	beq.n	1c4a0 <nrfx_usbd_irq_handler+0x10>
            active |= 1UL << event_nr;
   1c4d6:	2301      	movs	r3, #1
   1c4d8:	4093      	lsls	r3, r2
   1c4da:	431d      	orrs	r5, r3
   1c4dc:	e7e0      	b.n	1c4a0 <nrfx_usbd_irq_handler+0x10>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   1c4de:	f405 0600 	and.w	r6, r5, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   1c4e2:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
    while (active)
   1c4e6:	e00a      	b.n	1c4fe <nrfx_usbd_irq_handler+0x6e>
   1c4e8:	fab4 f484 	clz	r4, r4
        m_isr[event_nr]();
   1c4ec:	4b0c      	ldr	r3, [pc, #48]	; (1c520 <nrfx_usbd_irq_handler+0x90>)
   1c4ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1c4f2:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   1c4f4:	2301      	movs	r3, #1
   1c4f6:	fa03 f404 	lsl.w	r4, r3, r4
   1c4fa:	ea25 0504 	bic.w	r5, r5, r4
    while (active)
   1c4fe:	b12d      	cbz	r5, 1c50c <nrfx_usbd_irq_handler+0x7c>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1c500:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
   1c504:	2c00      	cmp	r4, #0
   1c506:	d1ef      	bne.n	1c4e8 <nrfx_usbd_irq_handler+0x58>
    return 32U;
   1c508:	2420      	movs	r4, #32
   1c50a:	e7ef      	b.n	1c4ec <nrfx_usbd_irq_handler+0x5c>
    usbd_dmareq_process();
   1c50c:	f7ff fad6 	bl	1babc <usbd_dmareq_process>
    if (setup_active)
   1c510:	b906      	cbnz	r6, 1c514 <nrfx_usbd_irq_handler+0x84>
}
   1c512:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   1c514:	f7ff fee6 	bl	1c2e4 <ev_setup_handler>
}
   1c518:	e7fb      	b.n	1c512 <nrfx_usbd_irq_handler+0x82>
   1c51a:	bf00      	nop
   1c51c:	40027000 	.word	0x40027000
   1c520:	00028ebc 	.word	0x00028ebc

0001c524 <nrfx_usbd_ep_enable>:
{
   1c524:	b538      	push	{r3, r4, r5, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   1c526:	b244      	sxtb	r4, r0
   1c528:	2c00      	cmp	r4, #0
   1c52a:	db22      	blt.n	1c572 <nrfx_usbd_ep_enable+0x4e>
   1c52c:	4b26      	ldr	r3, [pc, #152]	; (1c5c8 <nrfx_usbd_ep_enable+0xa4>)
   1c52e:	f000 010f 	and.w	r1, r0, #15
   1c532:	5c5a      	ldrb	r2, [r3, r1]
   1c534:	2301      	movs	r3, #1
   1c536:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1c538:	4a24      	ldr	r2, [pc, #144]	; (1c5cc <nrfx_usbd_ep_enable+0xa8>)
   1c53a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   1c53e:	2c00      	cmp	r4, #0
   1c540:	db19      	blt.n	1c576 <nrfx_usbd_ep_enable+0x52>
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   1c542:	4b22      	ldr	r3, [pc, #136]	; (1c5cc <nrfx_usbd_ep_enable+0xa8>)
   1c544:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
   1c548:	40cb      	lsrs	r3, r1
   1c54a:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   1c54e:	b97b      	cbnz	r3, 1c570 <nrfx_usbd_ep_enable+0x4c>
    if (NRF_USBD_EPIN_CHECK(ep))
   1c550:	2c00      	cmp	r4, #0
   1c552:	db16      	blt.n	1c582 <nrfx_usbd_ep_enable+0x5e>
        p_reg->EPOUTEN |= 1UL << epnr;
   1c554:	4d1d      	ldr	r5, [pc, #116]	; (1c5cc <nrfx_usbd_ep_enable+0xa8>)
   1c556:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
   1c55a:	2201      	movs	r2, #1
   1c55c:	408a      	lsls	r2, r1
   1c55e:	4313      	orrs	r3, r2
   1c560:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   1c564:	b121      	cbz	r1, 1c570 <nrfx_usbd_ep_enable+0x4c>
   1c566:	2c00      	cmp	r4, #0
   1c568:	db02      	blt.n	1c570 <nrfx_usbd_ep_enable+0x4c>
        NRF_USBD_EPOUT_CHECK(ep) &&
   1c56a:	f010 0f08 	tst.w	r0, #8
   1c56e:	d011      	beq.n	1c594 <nrfx_usbd_ep_enable+0x70>
}
   1c570:	bd38      	pop	{r3, r4, r5, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   1c572:	4b17      	ldr	r3, [pc, #92]	; (1c5d0 <nrfx_usbd_ep_enable+0xac>)
   1c574:	e7db      	b.n	1c52e <nrfx_usbd_ep_enable+0xa>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   1c576:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1c57a:	40cb      	lsrs	r3, r1
   1c57c:	f003 0301 	and.w	r3, r3, #1
   1c580:	e7e5      	b.n	1c54e <nrfx_usbd_ep_enable+0x2a>
        p_reg->EPINEN |= 1UL << epnr;
   1c582:	4d12      	ldr	r5, [pc, #72]	; (1c5cc <nrfx_usbd_ep_enable+0xa8>)
   1c584:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
   1c588:	2201      	movs	r2, #1
   1c58a:	408a      	lsls	r2, r1
   1c58c:	4313      	orrs	r3, r2
   1c58e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
   1c592:	e7e7      	b.n	1c564 <nrfx_usbd_ep_enable+0x40>
	__asm__ volatile(
   1c594:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c598:	f3ef 8511 	mrs	r5, BASEPRI
   1c59c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c5a0:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   1c5a4:	f7ff fe6c 	bl	1c280 <nrfx_usbd_transfer_out_drop>
    return NRFX_USBD_EP_BITPOS(ep);
   1c5a8:	f004 040f 	and.w	r4, r4, #15
   1c5ac:	3410      	adds	r4, #16
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1c5ae:	2301      	movs	r3, #1
   1c5b0:	fa03 f404 	lsl.w	r4, r3, r4
   1c5b4:	4a07      	ldr	r2, [pc, #28]	; (1c5d4 <nrfx_usbd_ep_enable+0xb0>)
   1c5b6:	6813      	ldr	r3, [r2, #0]
   1c5b8:	ea23 0304 	bic.w	r3, r3, r4
   1c5bc:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1c5be:	f385 8811 	msr	BASEPRI, r5
   1c5c2:	f3bf 8f6f 	isb	sy
}
   1c5c6:	e7d3      	b.n	1c570 <nrfx_usbd_ep_enable+0x4c>
   1c5c8:	00028e9c 	.word	0x00028e9c
   1c5cc:	40027000 	.word	0x40027000
   1c5d0:	00028e7c 	.word	0x00028e7c
   1c5d4:	20005f64 	.word	0x20005f64

0001c5d8 <nrfx_usbd_ep_stall_clear>:
{
   1c5d8:	b510      	push	{r4, lr}
   1c5da:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   1c5dc:	f010 0f80 	tst.w	r0, #128	; 0x80
   1c5e0:	d003      	beq.n	1c5ea <nrfx_usbd_ep_stall_clear+0x12>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   1c5e2:	4b06      	ldr	r3, [pc, #24]	; (1c5fc <nrfx_usbd_ep_stall_clear+0x24>)
   1c5e4:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   1c5e8:	bd10      	pop	{r4, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   1c5ea:	f7ff fd89 	bl	1c100 <nrfx_usbd_ep_stall_check>
   1c5ee:	2800      	cmp	r0, #0
   1c5f0:	d0f7      	beq.n	1c5e2 <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
   1c5f2:	4620      	mov	r0, r4
   1c5f4:	f7ff fe44 	bl	1c280 <nrfx_usbd_transfer_out_drop>
   1c5f8:	e7f3      	b.n	1c5e2 <nrfx_usbd_ep_stall_clear+0xa>
   1c5fa:	bf00      	nop
   1c5fc:	40027000 	.word	0x40027000

0001c600 <usbd_ep_abort_all>:
{
   1c600:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c602:	b083      	sub	sp, #12
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   1c604:	4b59      	ldr	r3, [pc, #356]	; (1c76c <usbd_ep_abort_all+0x16c>)
   1c606:	885b      	ldrh	r3, [r3, #2]
   1c608:	4a59      	ldr	r2, [pc, #356]	; (1c770 <usbd_ep_abort_all+0x170>)
   1c60a:	6815      	ldr	r5, [r2, #0]
   1c60c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    while (0 != ep_waiting)
   1c610:	e016      	b.n	1c640 <usbd_ep_abort_all+0x40>
   1c612:	2420      	movs	r4, #32
   1c614:	e01f      	b.n	1c656 <usbd_ep_abort_all+0x56>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1c616:	f044 0380 	orr.w	r3, r4, #128	; 0x80
   1c61a:	e01f      	b.n	1c65c <usbd_ep_abort_all+0x5c>
   1c61c:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   1c620:	e024      	b.n	1c66c <usbd_ep_abort_all+0x6c>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1c622:	4e54      	ldr	r6, [pc, #336]	; (1c774 <usbd_ep_abort_all+0x174>)
   1c624:	e02e      	b.n	1c684 <usbd_ep_abort_all+0x84>
            nrfx_usbd_transfer_out_drop(ep);
   1c626:	f7ff fe2b 	bl	1c280 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   1c62a:	2303      	movs	r3, #3
   1c62c:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   1c62e:	f387 8811 	msr	BASEPRI, r7
   1c632:	f3bf 8f6f 	isb	sy
        ep_waiting &= ~(1U << bitpos);
   1c636:	2301      	movs	r3, #1
   1c638:	fa03 f404 	lsl.w	r4, r3, r4
   1c63c:	ea25 0504 	bic.w	r5, r5, r4
    while (0 != ep_waiting)
   1c640:	2d00      	cmp	r5, #0
   1c642:	f000 808c 	beq.w	1c75e <usbd_ep_abort_all+0x15e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1c646:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
   1c64a:	2c00      	cmp	r4, #0
   1c64c:	d0e1      	beq.n	1c612 <usbd_ep_abort_all+0x12>
  return __builtin_clz(value);
   1c64e:	fab4 f484 	clz	r4, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1c652:	2c0f      	cmp	r4, #15
   1c654:	d9df      	bls.n	1c616 <usbd_ep_abort_all+0x16>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
   1c656:	f1a4 0310 	sub.w	r3, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1c65a:	b2db      	uxtb	r3, r3
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   1c65c:	f013 0f08 	tst.w	r3, #8
   1c660:	d1e9      	bne.n	1c636 <usbd_ep_abort_all+0x36>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1c662:	2c0f      	cmp	r4, #15
   1c664:	d9da      	bls.n	1c61c <usbd_ep_abort_all+0x1c>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
   1c666:	f1a4 0010 	sub.w	r0, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1c66a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1c66c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c670:	f3ef 8711 	mrs	r7, BASEPRI
   1c674:	f383 8812 	msr	BASEPRI_MAX, r3
   1c678:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1c67c:	b243      	sxtb	r3, r0
   1c67e:	2b00      	cmp	r3, #0
   1c680:	dbcf      	blt.n	1c622 <usbd_ep_abort_all+0x22>
   1c682:	4e3d      	ldr	r6, [pc, #244]	; (1c778 <usbd_ep_abort_all+0x178>)
        NRF_USBD_EP_NR_GET(ep));
   1c684:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1c688:	eb06 1602 	add.w	r6, r6, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
   1c68c:	2b00      	cmp	r3, #0
   1c68e:	db19      	blt.n	1c6c4 <usbd_ep_abort_all+0xc4>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1c690:	4a37      	ldr	r2, [pc, #220]	; (1c770 <usbd_ep_abort_all+0x170>)
   1c692:	6812      	ldr	r2, [r2, #0]
   1c694:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
   1c696:	f003 030f 	and.w	r3, r3, #15
   1c69a:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1c69c:	40da      	lsrs	r2, r3
   1c69e:	f012 0f01 	tst.w	r2, #1
   1c6a2:	d1c0      	bne.n	1c626 <usbd_ep_abort_all+0x26>
            p_state->handler.consumer = NULL;
   1c6a4:	2200      	movs	r2, #0
   1c6a6:	6032      	str	r2, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1c6a8:	2201      	movs	r2, #1
   1c6aa:	fa02 f303 	lsl.w	r3, r2, r3
   1c6ae:	4930      	ldr	r1, [pc, #192]	; (1c770 <usbd_ep_abort_all+0x170>)
   1c6b0:	680a      	ldr	r2, [r1, #0]
   1c6b2:	ea22 0203 	bic.w	r2, r2, r3
   1c6b6:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   1c6b8:	492c      	ldr	r1, [pc, #176]	; (1c76c <usbd_ep_abort_all+0x16c>)
   1c6ba:	680a      	ldr	r2, [r1, #0]
   1c6bc:	ea22 0303 	bic.w	r3, r2, r3
   1c6c0:	600b      	str	r3, [r1, #0]
   1c6c2:	e7b2      	b.n	1c62a <usbd_ep_abort_all+0x2a>
        if(!NRF_USBD_EPISO_CHECK(ep))
   1c6c4:	f010 0f08 	tst.w	r0, #8
   1c6c8:	d111      	bne.n	1c6ee <usbd_ep_abort_all+0xee>
            if(ep != NRFX_USBD_EPIN0)
   1c6ca:	2880      	cmp	r0, #128	; 0x80
   1c6cc:	d037      	beq.n	1c73e <usbd_ep_abort_all+0x13e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   1c6ce:	f202 32da 	addw	r2, r2, #986	; 0x3da
   1c6d2:	0052      	lsls	r2, r2, #1
   1c6d4:	4929      	ldr	r1, [pc, #164]	; (1c77c <usbd_ep_abort_all+0x17c>)
   1c6d6:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1c6d8:	3104      	adds	r1, #4
   1c6da:	680a      	ldr	r2, [r1, #0]
   1c6dc:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
   1c6de:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1c6e2:	f8d1 c000 	ldr.w	ip, [r1]
   1c6e6:	ea42 020c 	orr.w	r2, r2, ip
   1c6ea:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   1c6ec:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   1c6ee:	4a1f      	ldr	r2, [pc, #124]	; (1c76c <usbd_ep_abort_all+0x16c>)
   1c6f0:	6811      	ldr	r1, [r2, #0]
   1c6f2:	4a1f      	ldr	r2, [pc, #124]	; (1c770 <usbd_ep_abort_all+0x170>)
   1c6f4:	f8d2 c000 	ldr.w	ip, [r2]
   1c6f8:	ea6c 0e01 	orn	lr, ip, r1
    return NRFX_USBD_EP_BITPOS(ep);
   1c6fc:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   1c700:	2201      	movs	r2, #1
   1c702:	fa02 f303 	lsl.w	r3, r2, r3
   1c706:	ea1e 0f03 	tst.w	lr, r3
   1c70a:	d090      	beq.n	1c62e <usbd_ep_abort_all+0x2e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1c70c:	ea2c 0203 	bic.w	r2, ip, r3
   1c710:	f8df c05c 	ldr.w	ip, [pc, #92]	; 1c770 <usbd_ep_abort_all+0x170>
   1c714:	f8cc 2000 	str.w	r2, [ip]
            m_ep_ready       |=   1U << ep2bit(ep) ;
   1c718:	430b      	orrs	r3, r1
   1c71a:	4a14      	ldr	r2, [pc, #80]	; (1c76c <usbd_ep_abort_all+0x16c>)
   1c71c:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
   1c71e:	2300      	movs	r3, #0
   1c720:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   1c722:	2303      	movs	r3, #3
   1c724:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1c726:	2206      	movs	r2, #6
   1c728:	f88d 2004 	strb.w	r2, [sp, #4]
   1c72c:	f88d 0006 	strb.w	r0, [sp, #6]
   1c730:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   1c734:	4b12      	ldr	r3, [pc, #72]	; (1c780 <usbd_ep_abort_all+0x180>)
   1c736:	681b      	ldr	r3, [r3, #0]
   1c738:	a801      	add	r0, sp, #4
   1c73a:	4798      	blx	r3
   1c73c:	e777      	b.n	1c62e <usbd_ep_abort_all+0x2e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   1c73e:	4a0f      	ldr	r2, [pc, #60]	; (1c77c <usbd_ep_abort_all+0x17c>)
   1c740:	f240 71b4 	movw	r1, #1972	; 0x7b4
   1c744:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1c746:	490f      	ldr	r1, [pc, #60]	; (1c784 <usbd_ep_abort_all+0x184>)
   1c748:	680a      	ldr	r2, [r1, #0]
   1c74a:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
   1c74c:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1c750:	f8d1 c000 	ldr.w	ip, [r1]
   1c754:	ea42 020c 	orr.w	r2, r2, ip
   1c758:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   1c75a:	680a      	ldr	r2, [r1, #0]
   1c75c:	e7c7      	b.n	1c6ee <usbd_ep_abort_all+0xee>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   1c75e:	4b03      	ldr	r3, [pc, #12]	; (1c76c <usbd_ep_abort_all+0x16c>)
   1c760:	f240 12ff 	movw	r2, #511	; 0x1ff
   1c764:	601a      	str	r2, [r3, #0]
}
   1c766:	b003      	add	sp, #12
   1c768:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c76a:	bf00      	nop
   1c76c:	20005fd4 	.word	0x20005fd4
   1c770:	20005f64 	.word	0x20005f64
   1c774:	20006068 	.word	0x20006068
   1c778:	20005fd8 	.word	0x20005fd8
   1c77c:	40027800 	.word	0x40027800
   1c780:	200060f8 	.word	0x200060f8
   1c784:	40027804 	.word	0x40027804

0001c788 <nrfx_usbd_stop>:
{
   1c788:	b510      	push	{r4, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c78a:	4b0c      	ldr	r3, [pc, #48]	; (1c7bc <nrfx_usbd_stop+0x34>)
   1c78c:	2280      	movs	r2, #128	; 0x80
   1c78e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   1c792:	2027      	movs	r0, #39	; 0x27
   1c794:	f7f7 fb2a 	bl	13dec <arch_irq_is_enabled>
   1c798:	b900      	cbnz	r0, 1c79c <nrfx_usbd_stop+0x14>
}
   1c79a:	bd10      	pop	{r4, pc}
        usbd_ep_abort_all();
   1c79c:	f7ff ff30 	bl	1c600 <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   1c7a0:	4c07      	ldr	r4, [pc, #28]	; (1c7c0 <nrfx_usbd_stop+0x38>)
   1c7a2:	2300      	movs	r3, #0
   1c7a4:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   1c7a8:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   1c7ac:	2027      	movs	r0, #39	; 0x27
   1c7ae:	f7f7 fb09 	bl	13dc4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1c7b2:	f04f 33ff 	mov.w	r3, #4294967295
   1c7b6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   1c7ba:	e7ee      	b.n	1c79a <nrfx_usbd_stop+0x12>
   1c7bc:	e000e100 	.word	0xe000e100
   1c7c0:	40027000 	.word	0x40027000

0001c7c4 <nrfx_usbd_disable>:
{
   1c7c4:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   1c7c6:	f7ff ffdf 	bl	1c788 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   1c7ca:	4b0b      	ldr	r3, [pc, #44]	; (1c7f8 <nrfx_usbd_disable+0x34>)
   1c7cc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   1c7d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   1c7d4:	2200      	movs	r2, #0
   1c7d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   1c7da:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1c7de:	f7fe fafd 	bl	1addc <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1c7e2:	b110      	cbz	r0, 1c7ea <nrfx_usbd_disable+0x26>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1c7e4:	4b05      	ldr	r3, [pc, #20]	; (1c7fc <nrfx_usbd_disable+0x38>)
   1c7e6:	2200      	movs	r2, #0
   1c7e8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1c7ea:	4b05      	ldr	r3, [pc, #20]	; (1c800 <nrfx_usbd_disable+0x3c>)
   1c7ec:	2200      	movs	r2, #0
   1c7ee:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   1c7f0:	4b04      	ldr	r3, [pc, #16]	; (1c804 <nrfx_usbd_disable+0x40>)
   1c7f2:	2201      	movs	r2, #1
   1c7f4:	701a      	strb	r2, [r3, #0]
}
   1c7f6:	bd08      	pop	{r3, pc}
   1c7f8:	40027000 	.word	0x40027000
   1c7fc:	40027c1c 	.word	0x40027c1c
   1c800:	20006a87 	.word	0x20006a87
   1c804:	20006a88 	.word	0x20006a88

0001c808 <nrfx_usbd_suspend>:
{
   1c808:	b538      	push	{r3, r4, r5, lr}
   1c80a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c80e:	f3ef 8511 	mrs	r5, BASEPRI
   1c812:	f383 8812 	msr	BASEPRI_MAX, r3
   1c816:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   1c81a:	4b13      	ldr	r3, [pc, #76]	; (1c868 <nrfx_usbd_suspend+0x60>)
   1c81c:	781b      	ldrb	r3, [r3, #0]
   1c81e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1c822:	b92b      	cbnz	r3, 1c830 <nrfx_usbd_suspend+0x28>
	__asm__ volatile(
   1c824:	f385 8811 	msr	BASEPRI, r5
   1c828:	f3bf 8f6f 	isb	sy
}
   1c82c:	4620      	mov	r0, r4
   1c82e:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   1c830:	f7ff fee6 	bl	1c600 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   1c834:	4b0d      	ldr	r3, [pc, #52]	; (1c86c <nrfx_usbd_suspend+0x64>)
   1c836:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   1c83a:	f413 7f00 	tst.w	r3, #512	; 0x200
   1c83e:	d111      	bne.n	1c864 <nrfx_usbd_suspend+0x5c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   1c840:	4b0a      	ldr	r3, [pc, #40]	; (1c86c <nrfx_usbd_suspend+0x64>)
   1c842:	2201      	movs	r2, #1
   1c844:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   1c848:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   1c84c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   1c850:	f413 7f00 	tst.w	r3, #512	; 0x200
   1c854:	d0e6      	beq.n	1c824 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   1c856:	4b05      	ldr	r3, [pc, #20]	; (1c86c <nrfx_usbd_suspend+0x64>)
   1c858:	2400      	movs	r4, #0
   1c85a:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   1c85e:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
}
   1c862:	e7df      	b.n	1c824 <nrfx_usbd_suspend+0x1c>
    bool suspended = false;
   1c864:	2400      	movs	r4, #0
   1c866:	e7dd      	b.n	1c824 <nrfx_usbd_suspend+0x1c>
   1c868:	20006a86 	.word	0x20006a86
   1c86c:	40027000 	.word	0x40027000

0001c870 <nrfx_usbd_ep_abort>:
{
   1c870:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c872:	b083      	sub	sp, #12
	__asm__ volatile(
   1c874:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c878:	f3ef 8511 	mrs	r5, BASEPRI
   1c87c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c880:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1c884:	b243      	sxtb	r3, r0
   1c886:	2b00      	cmp	r3, #0
   1c888:	db27      	blt.n	1c8da <nrfx_usbd_ep_abort+0x6a>
   1c88a:	4c39      	ldr	r4, [pc, #228]	; (1c970 <nrfx_usbd_ep_abort+0x100>)
        NRF_USBD_EP_NR_GET(ep));
   1c88c:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1c890:	eb04 1402 	add.w	r4, r4, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
   1c894:	2b00      	cmp	r3, #0
   1c896:	db25      	blt.n	1c8e4 <nrfx_usbd_ep_abort+0x74>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1c898:	4a36      	ldr	r2, [pc, #216]	; (1c974 <nrfx_usbd_ep_abort+0x104>)
   1c89a:	6812      	ldr	r2, [r2, #0]
   1c89c:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
   1c89e:	f003 030f 	and.w	r3, r3, #15
   1c8a2:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1c8a4:	40da      	lsrs	r2, r3
   1c8a6:	f012 0f01 	tst.w	r2, #1
   1c8aa:	d118      	bne.n	1c8de <nrfx_usbd_ep_abort+0x6e>
            p_state->handler.consumer = NULL;
   1c8ac:	2200      	movs	r2, #0
   1c8ae:	6022      	str	r2, [r4, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1c8b0:	2201      	movs	r2, #1
   1c8b2:	fa02 f303 	lsl.w	r3, r2, r3
   1c8b6:	492f      	ldr	r1, [pc, #188]	; (1c974 <nrfx_usbd_ep_abort+0x104>)
   1c8b8:	680a      	ldr	r2, [r1, #0]
   1c8ba:	ea22 0203 	bic.w	r2, r2, r3
   1c8be:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   1c8c0:	492d      	ldr	r1, [pc, #180]	; (1c978 <nrfx_usbd_ep_abort+0x108>)
   1c8c2:	680a      	ldr	r2, [r1, #0]
   1c8c4:	ea22 0303 	bic.w	r3, r2, r3
   1c8c8:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
   1c8ca:	2303      	movs	r3, #3
   1c8cc:	73a3      	strb	r3, [r4, #14]
	__asm__ volatile(
   1c8ce:	f385 8811 	msr	BASEPRI, r5
   1c8d2:	f3bf 8f6f 	isb	sy
}
   1c8d6:	b003      	add	sp, #12
   1c8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1c8da:	4c28      	ldr	r4, [pc, #160]	; (1c97c <nrfx_usbd_ep_abort+0x10c>)
   1c8dc:	e7d6      	b.n	1c88c <nrfx_usbd_ep_abort+0x1c>
            nrfx_usbd_transfer_out_drop(ep);
   1c8de:	f7ff fccf 	bl	1c280 <nrfx_usbd_transfer_out_drop>
   1c8e2:	e7f2      	b.n	1c8ca <nrfx_usbd_ep_abort+0x5a>
        if(!NRF_USBD_EPISO_CHECK(ep))
   1c8e4:	f010 0f08 	tst.w	r0, #8
   1c8e8:	d10f      	bne.n	1c90a <nrfx_usbd_ep_abort+0x9a>
            if(ep != NRFX_USBD_EPIN0)
   1c8ea:	2880      	cmp	r0, #128	; 0x80
   1c8ec:	d031      	beq.n	1c952 <nrfx_usbd_ep_abort+0xe2>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   1c8ee:	f202 32da 	addw	r2, r2, #986	; 0x3da
   1c8f2:	0052      	lsls	r2, r2, #1
   1c8f4:	4922      	ldr	r1, [pc, #136]	; (1c980 <nrfx_usbd_ep_abort+0x110>)
   1c8f6:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1c8f8:	3104      	adds	r1, #4
   1c8fa:	680a      	ldr	r2, [r1, #0]
   1c8fc:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
   1c8fe:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1c902:	680e      	ldr	r6, [r1, #0]
   1c904:	4332      	orrs	r2, r6
   1c906:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   1c908:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   1c90a:	4a1b      	ldr	r2, [pc, #108]	; (1c978 <nrfx_usbd_ep_abort+0x108>)
   1c90c:	6811      	ldr	r1, [r2, #0]
   1c90e:	4a19      	ldr	r2, [pc, #100]	; (1c974 <nrfx_usbd_ep_abort+0x104>)
   1c910:	6816      	ldr	r6, [r2, #0]
   1c912:	ea66 0701 	orn	r7, r6, r1
    return NRFX_USBD_EP_BITPOS(ep);
   1c916:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   1c91a:	2201      	movs	r2, #1
   1c91c:	fa02 f303 	lsl.w	r3, r2, r3
   1c920:	421f      	tst	r7, r3
   1c922:	d0d4      	beq.n	1c8ce <nrfx_usbd_ep_abort+0x5e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1c924:	ea26 0603 	bic.w	r6, r6, r3
   1c928:	4a12      	ldr	r2, [pc, #72]	; (1c974 <nrfx_usbd_ep_abort+0x104>)
   1c92a:	6016      	str	r6, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
   1c92c:	430b      	orrs	r3, r1
   1c92e:	4a12      	ldr	r2, [pc, #72]	; (1c978 <nrfx_usbd_ep_abort+0x108>)
   1c930:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
   1c932:	2300      	movs	r3, #0
   1c934:	6023      	str	r3, [r4, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   1c936:	2303      	movs	r3, #3
   1c938:	73a3      	strb	r3, [r4, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1c93a:	2206      	movs	r2, #6
   1c93c:	f88d 2004 	strb.w	r2, [sp, #4]
   1c940:	f88d 0006 	strb.w	r0, [sp, #6]
   1c944:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   1c948:	4b0e      	ldr	r3, [pc, #56]	; (1c984 <nrfx_usbd_ep_abort+0x114>)
   1c94a:	681b      	ldr	r3, [r3, #0]
   1c94c:	a801      	add	r0, sp, #4
   1c94e:	4798      	blx	r3
   1c950:	e7bd      	b.n	1c8ce <nrfx_usbd_ep_abort+0x5e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   1c952:	4a0b      	ldr	r2, [pc, #44]	; (1c980 <nrfx_usbd_ep_abort+0x110>)
   1c954:	f240 71b4 	movw	r1, #1972	; 0x7b4
   1c958:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1c95a:	490b      	ldr	r1, [pc, #44]	; (1c988 <nrfx_usbd_ep_abort+0x118>)
   1c95c:	680a      	ldr	r2, [r1, #0]
   1c95e:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
   1c960:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1c964:	680e      	ldr	r6, [r1, #0]
   1c966:	4332      	orrs	r2, r6
   1c968:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   1c96a:	680a      	ldr	r2, [r1, #0]
   1c96c:	e7cd      	b.n	1c90a <nrfx_usbd_ep_abort+0x9a>
   1c96e:	bf00      	nop
   1c970:	20005fd8 	.word	0x20005fd8
   1c974:	20005f64 	.word	0x20005f64
   1c978:	20005fd4 	.word	0x20005fd4
   1c97c:	20006068 	.word	0x20006068
   1c980:	40027800 	.word	0x40027800
   1c984:	200060f8 	.word	0x200060f8
   1c988:	40027804 	.word	0x40027804

0001c98c <nrfx_usbd_ep_disable>:
{
   1c98c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c98e:	b083      	sub	sp, #12
   1c990:	4604      	mov	r4, r0
	__asm__ volatile(
   1c992:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c996:	f3ef 8611 	mrs	r6, BASEPRI
   1c99a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c99e:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1c9a2:	b243      	sxtb	r3, r0
   1c9a4:	2b00      	cmp	r3, #0
   1c9a6:	db3e      	blt.n	1ca26 <nrfx_usbd_ep_disable+0x9a>
   1c9a8:	4d4a      	ldr	r5, [pc, #296]	; (1cad4 <nrfx_usbd_ep_disable+0x148>)
        NRF_USBD_EP_NR_GET(ep));
   1c9aa:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1c9ae:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
   1c9b2:	2b00      	cmp	r3, #0
   1c9b4:	db3d      	blt.n	1ca32 <nrfx_usbd_ep_disable+0xa6>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1c9b6:	4a48      	ldr	r2, [pc, #288]	; (1cad8 <nrfx_usbd_ep_disable+0x14c>)
   1c9b8:	6812      	ldr	r2, [r2, #0]
   1c9ba:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
   1c9bc:	f003 030f 	and.w	r3, r3, #15
   1c9c0:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1c9c2:	40da      	lsrs	r2, r3
   1c9c4:	f012 0f01 	tst.w	r2, #1
   1c9c8:	d12f      	bne.n	1ca2a <nrfx_usbd_ep_disable+0x9e>
            p_state->handler.consumer = NULL;
   1c9ca:	2200      	movs	r2, #0
   1c9cc:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1c9ce:	2201      	movs	r2, #1
   1c9d0:	fa02 f303 	lsl.w	r3, r2, r3
   1c9d4:	4940      	ldr	r1, [pc, #256]	; (1cad8 <nrfx_usbd_ep_disable+0x14c>)
   1c9d6:	680a      	ldr	r2, [r1, #0]
   1c9d8:	ea22 0203 	bic.w	r2, r2, r3
   1c9dc:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   1c9de:	493f      	ldr	r1, [pc, #252]	; (1cadc <nrfx_usbd_ep_disable+0x150>)
   1c9e0:	680a      	ldr	r2, [r1, #0]
   1c9e2:	ea22 0303 	bic.w	r3, r2, r3
   1c9e6:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
   1c9e8:	2303      	movs	r3, #3
   1c9ea:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
   1c9ec:	f386 8811 	msr	BASEPRI, r6
   1c9f0:	f3bf 8f6f 	isb	sy
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1c9f4:	f004 030f 	and.w	r3, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   1c9f8:	b264      	sxtb	r4, r4
   1c9fa:	2c00      	cmp	r4, #0
   1c9fc:	db5e      	blt.n	1cabc <nrfx_usbd_ep_disable+0x130>
        p_reg->EPOUTEN &= ~(1UL << epnr);
   1c9fe:	4838      	ldr	r0, [pc, #224]	; (1cae0 <nrfx_usbd_ep_disable+0x154>)
   1ca00:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
   1ca04:	2101      	movs	r1, #1
   1ca06:	4099      	lsls	r1, r3
   1ca08:	ea22 0201 	bic.w	r2, r2, r1
   1ca0c:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   1ca10:	2c00      	cmp	r4, #0
   1ca12:	db5d      	blt.n	1cad0 <nrfx_usbd_ep_disable+0x144>
   1ca14:	4a33      	ldr	r2, [pc, #204]	; (1cae4 <nrfx_usbd_ep_disable+0x158>)
   1ca16:	5cd2      	ldrb	r2, [r2, r3]
   1ca18:	2301      	movs	r3, #1
   1ca1a:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   1ca1c:	4a30      	ldr	r2, [pc, #192]	; (1cae0 <nrfx_usbd_ep_disable+0x154>)
   1ca1e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1ca22:	b003      	add	sp, #12
   1ca24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1ca26:	4d30      	ldr	r5, [pc, #192]	; (1cae8 <nrfx_usbd_ep_disable+0x15c>)
   1ca28:	e7bf      	b.n	1c9aa <nrfx_usbd_ep_disable+0x1e>
            nrfx_usbd_transfer_out_drop(ep);
   1ca2a:	4620      	mov	r0, r4
   1ca2c:	f7ff fc28 	bl	1c280 <nrfx_usbd_transfer_out_drop>
   1ca30:	e7da      	b.n	1c9e8 <nrfx_usbd_ep_disable+0x5c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   1ca32:	f014 0f08 	tst.w	r4, #8
   1ca36:	d10f      	bne.n	1ca58 <nrfx_usbd_ep_disable+0xcc>
            if(ep != NRFX_USBD_EPIN0)
   1ca38:	2c80      	cmp	r4, #128	; 0x80
   1ca3a:	d031      	beq.n	1caa0 <nrfx_usbd_ep_disable+0x114>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   1ca3c:	f202 32da 	addw	r2, r2, #986	; 0x3da
   1ca40:	0052      	lsls	r2, r2, #1
   1ca42:	492a      	ldr	r1, [pc, #168]	; (1caec <nrfx_usbd_ep_disable+0x160>)
   1ca44:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1ca46:	3104      	adds	r1, #4
   1ca48:	680a      	ldr	r2, [r1, #0]
   1ca4a:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
   1ca4c:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1ca50:	6808      	ldr	r0, [r1, #0]
   1ca52:	4302      	orrs	r2, r0
   1ca54:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   1ca56:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   1ca58:	4a20      	ldr	r2, [pc, #128]	; (1cadc <nrfx_usbd_ep_disable+0x150>)
   1ca5a:	6811      	ldr	r1, [r2, #0]
   1ca5c:	4a1e      	ldr	r2, [pc, #120]	; (1cad8 <nrfx_usbd_ep_disable+0x14c>)
   1ca5e:	6810      	ldr	r0, [r2, #0]
   1ca60:	ea60 0701 	orn	r7, r0, r1
    return NRFX_USBD_EP_BITPOS(ep);
   1ca64:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   1ca68:	2201      	movs	r2, #1
   1ca6a:	fa02 f303 	lsl.w	r3, r2, r3
   1ca6e:	421f      	tst	r7, r3
   1ca70:	d0bc      	beq.n	1c9ec <nrfx_usbd_ep_disable+0x60>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1ca72:	ea20 0003 	bic.w	r0, r0, r3
   1ca76:	4a18      	ldr	r2, [pc, #96]	; (1cad8 <nrfx_usbd_ep_disable+0x14c>)
   1ca78:	6010      	str	r0, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
   1ca7a:	430b      	orrs	r3, r1
   1ca7c:	4a17      	ldr	r2, [pc, #92]	; (1cadc <nrfx_usbd_ep_disable+0x150>)
   1ca7e:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
   1ca80:	2300      	movs	r3, #0
   1ca82:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   1ca84:	2303      	movs	r3, #3
   1ca86:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1ca88:	2206      	movs	r2, #6
   1ca8a:	f88d 2004 	strb.w	r2, [sp, #4]
   1ca8e:	f88d 4006 	strb.w	r4, [sp, #6]
   1ca92:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   1ca96:	4b16      	ldr	r3, [pc, #88]	; (1caf0 <nrfx_usbd_ep_disable+0x164>)
   1ca98:	681b      	ldr	r3, [r3, #0]
   1ca9a:	a801      	add	r0, sp, #4
   1ca9c:	4798      	blx	r3
   1ca9e:	e7a5      	b.n	1c9ec <nrfx_usbd_ep_disable+0x60>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   1caa0:	4a12      	ldr	r2, [pc, #72]	; (1caec <nrfx_usbd_ep_disable+0x160>)
   1caa2:	f240 71b4 	movw	r1, #1972	; 0x7b4
   1caa6:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1caa8:	4912      	ldr	r1, [pc, #72]	; (1caf4 <nrfx_usbd_ep_disable+0x168>)
   1caaa:	680a      	ldr	r2, [r1, #0]
   1caac:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
   1caae:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1cab2:	6808      	ldr	r0, [r1, #0]
   1cab4:	4302      	orrs	r2, r0
   1cab6:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   1cab8:	680a      	ldr	r2, [r1, #0]
   1caba:	e7cd      	b.n	1ca58 <nrfx_usbd_ep_disable+0xcc>
        p_reg->EPINEN &= ~(1UL << epnr);
   1cabc:	4808      	ldr	r0, [pc, #32]	; (1cae0 <nrfx_usbd_ep_disable+0x154>)
   1cabe:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   1cac2:	2101      	movs	r1, #1
   1cac4:	4099      	lsls	r1, r3
   1cac6:	ea22 0201 	bic.w	r2, r2, r1
   1caca:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
   1cace:	e79f      	b.n	1ca10 <nrfx_usbd_ep_disable+0x84>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   1cad0:	4a09      	ldr	r2, [pc, #36]	; (1caf8 <nrfx_usbd_ep_disable+0x16c>)
   1cad2:	e7a0      	b.n	1ca16 <nrfx_usbd_ep_disable+0x8a>
   1cad4:	20005fd8 	.word	0x20005fd8
   1cad8:	20005f64 	.word	0x20005f64
   1cadc:	20005fd4 	.word	0x20005fd4
   1cae0:	40027000 	.word	0x40027000
   1cae4:	00028e9c 	.word	0x00028e9c
   1cae8:	20006068 	.word	0x20006068
   1caec:	40027800 	.word	0x40027800
   1caf0:	200060f8 	.word	0x200060f8
   1caf4:	40027804 	.word	0x40027804
   1caf8:	00028e7c 	.word	0x00028e7c

0001cafc <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1cafc:	4b03      	ldr	r3, [pc, #12]	; (1cb0c <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1cafe:	4a04      	ldr	r2, [pc, #16]	; (1cb10 <z_device_state_init+0x14>)
   1cb00:	4293      	cmp	r3, r2
   1cb02:	d201      	bcs.n	1cb08 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   1cb04:	3318      	adds	r3, #24
   1cb06:	e7fa      	b.n	1cafe <z_device_state_init+0x2>
	}
}
   1cb08:	4770      	bx	lr
   1cb0a:	bf00      	nop
   1cb0c:	00028014 	.word	0x00028014
   1cb10:	000280d4 	.word	0x000280d4

0001cb14 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1cb14:	b570      	push	{r4, r5, r6, lr}
   1cb16:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1cb18:	4b11      	ldr	r3, [pc, #68]	; (1cb60 <z_sys_init_run_level+0x4c>)
   1cb1a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1cb1e:	e009      	b.n	1cb34 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1cb20:	4240      	negs	r0, r0
   1cb22:	e017      	b.n	1cb54 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1cb24:	68eb      	ldr	r3, [r5, #12]
   1cb26:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   1cb28:	68ea      	ldr	r2, [r5, #12]
   1cb2a:	7853      	ldrb	r3, [r2, #1]
   1cb2c:	f043 0301 	orr.w	r3, r3, #1
   1cb30:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1cb32:	3408      	adds	r4, #8
   1cb34:	1c73      	adds	r3, r6, #1
   1cb36:	4a0a      	ldr	r2, [pc, #40]	; (1cb60 <z_sys_init_run_level+0x4c>)
   1cb38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1cb3c:	42a3      	cmp	r3, r4
   1cb3e:	d90d      	bls.n	1cb5c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1cb40:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1cb42:	6823      	ldr	r3, [r4, #0]
   1cb44:	4628      	mov	r0, r5
   1cb46:	4798      	blx	r3
		if (dev != NULL) {
   1cb48:	2d00      	cmp	r5, #0
   1cb4a:	d0f2      	beq.n	1cb32 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   1cb4c:	2800      	cmp	r0, #0
   1cb4e:	d0eb      	beq.n	1cb28 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1cb50:	2800      	cmp	r0, #0
   1cb52:	dbe5      	blt.n	1cb20 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1cb54:	28ff      	cmp	r0, #255	; 0xff
   1cb56:	dde5      	ble.n	1cb24 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1cb58:	20ff      	movs	r0, #255	; 0xff
   1cb5a:	e7e3      	b.n	1cb24 <z_sys_init_run_level+0x10>
		}
	}
}
   1cb5c:	bd70      	pop	{r4, r5, r6, pc}
   1cb5e:	bf00      	nop
   1cb60:	00028f20 	.word	0x00028f20

0001cb64 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1cb64:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1cb66:	4605      	mov	r5, r0
   1cb68:	b328      	cbz	r0, 1cbb6 <z_impl_device_get_binding+0x52>
   1cb6a:	7803      	ldrb	r3, [r0, #0]
   1cb6c:	b32b      	cbz	r3, 1cbba <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1cb6e:	4c14      	ldr	r4, [pc, #80]	; (1cbc0 <z_impl_device_get_binding+0x5c>)
   1cb70:	e000      	b.n	1cb74 <z_impl_device_get_binding+0x10>
   1cb72:	3418      	adds	r4, #24
   1cb74:	4b13      	ldr	r3, [pc, #76]	; (1cbc4 <z_impl_device_get_binding+0x60>)
   1cb76:	429c      	cmp	r4, r3
   1cb78:	d008      	beq.n	1cb8c <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   1cb7a:	4620      	mov	r0, r4
   1cb7c:	f00a fba0 	bl	272c0 <z_device_ready>
   1cb80:	2800      	cmp	r0, #0
   1cb82:	d0f6      	beq.n	1cb72 <z_impl_device_get_binding+0xe>
   1cb84:	6823      	ldr	r3, [r4, #0]
   1cb86:	42ab      	cmp	r3, r5
   1cb88:	d1f3      	bne.n	1cb72 <z_impl_device_get_binding+0xe>
   1cb8a:	e012      	b.n	1cbb2 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1cb8c:	4c0c      	ldr	r4, [pc, #48]	; (1cbc0 <z_impl_device_get_binding+0x5c>)
   1cb8e:	e000      	b.n	1cb92 <z_impl_device_get_binding+0x2e>
   1cb90:	3418      	adds	r4, #24
   1cb92:	4b0c      	ldr	r3, [pc, #48]	; (1cbc4 <z_impl_device_get_binding+0x60>)
   1cb94:	429c      	cmp	r4, r3
   1cb96:	d00b      	beq.n	1cbb0 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1cb98:	4620      	mov	r0, r4
   1cb9a:	f00a fb91 	bl	272c0 <z_device_ready>
   1cb9e:	2800      	cmp	r0, #0
   1cba0:	d0f6      	beq.n	1cb90 <z_impl_device_get_binding+0x2c>
   1cba2:	6821      	ldr	r1, [r4, #0]
   1cba4:	4628      	mov	r0, r5
   1cba6:	f005 ff0b 	bl	229c0 <strcmp>
   1cbaa:	2800      	cmp	r0, #0
   1cbac:	d1f0      	bne.n	1cb90 <z_impl_device_get_binding+0x2c>
   1cbae:	e000      	b.n	1cbb2 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   1cbb0:	2400      	movs	r4, #0
}
   1cbb2:	4620      	mov	r0, r4
   1cbb4:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1cbb6:	4604      	mov	r4, r0
   1cbb8:	e7fb      	b.n	1cbb2 <z_impl_device_get_binding+0x4e>
   1cbba:	2400      	movs	r4, #0
   1cbbc:	e7f9      	b.n	1cbb2 <z_impl_device_get_binding+0x4e>
   1cbbe:	bf00      	nop
   1cbc0:	00028014 	.word	0x00028014
   1cbc4:	000280d4 	.word	0x000280d4

0001cbc8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1cbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbca:	b089      	sub	sp, #36	; 0x24
   1cbcc:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   1cbce:	4b15      	ldr	r3, [pc, #84]	; (1cc24 <init_idle_thread+0x5c>)
   1cbd0:	25b8      	movs	r5, #184	; 0xb8
   1cbd2:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   1cbd6:	4b14      	ldr	r3, [pc, #80]	; (1cc28 <init_idle_thread+0x60>)
   1cbd8:	f44f 76b0 	mov.w	r6, #352	; 0x160
   1cbdc:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   1cbe0:	af06      	add	r7, sp, #24
   1cbe2:	4603      	mov	r3, r0
   1cbe4:	4a11      	ldr	r2, [pc, #68]	; (1cc2c <init_idle_thread+0x64>)
   1cbe6:	2108      	movs	r1, #8
   1cbe8:	4638      	mov	r0, r7
   1cbea:	f004 fa97 	bl	2111c <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1cbee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1cbf2:	480f      	ldr	r0, [pc, #60]	; (1cc30 <init_idle_thread+0x68>)
   1cbf4:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   1cbf8:	9705      	str	r7, [sp, #20]
   1cbfa:	2301      	movs	r3, #1
   1cbfc:	9304      	str	r3, [sp, #16]
   1cbfe:	230f      	movs	r3, #15
   1cc00:	9303      	str	r3, [sp, #12]
   1cc02:	2300      	movs	r3, #0
   1cc04:	9302      	str	r3, [sp, #8]
   1cc06:	9301      	str	r3, [sp, #4]
   1cc08:	9400      	str	r4, [sp, #0]
   1cc0a:	4b0a      	ldr	r3, [pc, #40]	; (1cc34 <init_idle_thread+0x6c>)
   1cc0c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1cc10:	4631      	mov	r1, r6
   1cc12:	4628      	mov	r0, r5
   1cc14:	f000 f96c 	bl	1cef0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1cc18:	7b6b      	ldrb	r3, [r5, #13]
   1cc1a:	f023 0304 	bic.w	r3, r3, #4
   1cc1e:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1cc20:	b009      	add	sp, #36	; 0x24
   1cc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cc24:	20002778 	.word	0x20002778
   1cc28:	20008f40 	.word	0x20008f40
   1cc2c:	00028f38 	.word	0x00028f38
   1cc30:	2000613c 	.word	0x2000613c
   1cc34:	0002752f 	.word	0x0002752f

0001cc38 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   1cc38:	b570      	push	{r4, r5, r6, lr}
   1cc3a:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1cc3c:	f001 f832 	bl	1dca4 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   1cc40:	4d1b      	ldr	r5, [pc, #108]	; (1ccb0 <prepare_multithreading+0x78>)
   1cc42:	4b1c      	ldr	r3, [pc, #112]	; (1ccb4 <prepare_multithreading+0x7c>)
   1cc44:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1cc46:	4b1c      	ldr	r3, [pc, #112]	; (1ccb8 <prepare_multithreading+0x80>)
   1cc48:	9305      	str	r3, [sp, #20]
   1cc4a:	2301      	movs	r3, #1
   1cc4c:	9304      	str	r3, [sp, #16]
   1cc4e:	2400      	movs	r4, #0
   1cc50:	9403      	str	r4, [sp, #12]
   1cc52:	9402      	str	r4, [sp, #8]
   1cc54:	9401      	str	r4, [sp, #4]
   1cc56:	9400      	str	r4, [sp, #0]
   1cc58:	4b18      	ldr	r3, [pc, #96]	; (1ccbc <prepare_multithreading+0x84>)
   1cc5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1cc5e:	4918      	ldr	r1, [pc, #96]	; (1ccc0 <prepare_multithreading+0x88>)
   1cc60:	4628      	mov	r0, r5
   1cc62:	f000 f945 	bl	1cef0 <z_setup_new_thread>
   1cc66:	4606      	mov	r6, r0
   1cc68:	7b6b      	ldrb	r3, [r5, #13]
   1cc6a:	f023 0304 	bic.w	r3, r3, #4
   1cc6e:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   1cc70:	4628      	mov	r0, r5
   1cc72:	f00a fef5 	bl	27a60 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1cc76:	2c00      	cmp	r4, #0
   1cc78:	dd02      	ble.n	1cc80 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   1cc7a:	4630      	mov	r0, r6
   1cc7c:	b006      	add	sp, #24
   1cc7e:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   1cc80:	4620      	mov	r0, r4
   1cc82:	f7ff ffa1 	bl	1cbc8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1cc86:	4b0f      	ldr	r3, [pc, #60]	; (1ccc4 <prepare_multithreading+0x8c>)
   1cc88:	22b8      	movs	r2, #184	; 0xb8
   1cc8a:	fb02 3204 	mla	r2, r2, r4, r3
   1cc8e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1cc92:	4b08      	ldr	r3, [pc, #32]	; (1ccb4 <prepare_multithreading+0x7c>)
   1cc94:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1cc98:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1cc9a:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1cc9c:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   1cca0:	4a09      	ldr	r2, [pc, #36]	; (1ccc8 <prepare_multithreading+0x90>)
   1cca2:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   1cca6:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   1ccaa:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1ccac:	3401      	adds	r4, #1
   1ccae:	e7e2      	b.n	1cc76 <prepare_multithreading+0x3e>
   1ccb0:	20002830 	.word	0x20002830
   1ccb4:	2000613c 	.word	0x2000613c
   1ccb8:	00028f44 	.word	0x00028f44
   1ccbc:	0001cccd 	.word	0x0001cccd
   1ccc0:	20008720 	.word	0x20008720
   1ccc4:	20002778 	.word	0x20002778
   1ccc8:	200090a0 	.word	0x200090a0

0001cccc <bg_thread_main>:
{
   1cccc:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1ccce:	4b0a      	ldr	r3, [pc, #40]	; (1ccf8 <bg_thread_main+0x2c>)
   1ccd0:	2201      	movs	r2, #1
   1ccd2:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ccd4:	2002      	movs	r0, #2
   1ccd6:	f7ff ff1d 	bl	1cb14 <z_sys_init_run_level>
	boot_banner();
   1ccda:	f001 fd6f 	bl	1e7bc <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1ccde:	2003      	movs	r0, #3
   1cce0:	f7ff ff18 	bl	1cb14 <z_sys_init_run_level>
	z_init_static_threads();
   1cce4:	f000 f968 	bl	1cfb8 <z_init_static_threads>
	main();
   1cce8:	f7f4 f84e 	bl	10d88 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1ccec:	4a03      	ldr	r2, [pc, #12]	; (1ccfc <bg_thread_main+0x30>)
   1ccee:	7b13      	ldrb	r3, [r2, #12]
   1ccf0:	f023 0301 	bic.w	r3, r3, #1
   1ccf4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1ccf6:	bd08      	pop	{r3, pc}
   1ccf8:	20006a8a 	.word	0x20006a8a
   1ccfc:	20002830 	.word	0x20002830

0001cd00 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   1cd00:	b508      	push	{r3, lr}
   1cd02:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1cd04:	4a01      	ldr	r2, [pc, #4]	; (1cd0c <switch_to_main_thread+0xc>)
   1cd06:	4802      	ldr	r0, [pc, #8]	; (1cd10 <switch_to_main_thread+0x10>)
   1cd08:	f7f7 f970 	bl	13fec <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1cd0c:	0001cccd 	.word	0x0001cccd
   1cd10:	20002830 	.word	0x20002830

0001cd14 <z_bss_zero>:
{
   1cd14:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1cd16:	4803      	ldr	r0, [pc, #12]	; (1cd24 <z_bss_zero+0x10>)
   1cd18:	4a03      	ldr	r2, [pc, #12]	; (1cd28 <z_bss_zero+0x14>)
   1cd1a:	1a12      	subs	r2, r2, r0
   1cd1c:	2100      	movs	r1, #0
   1cd1e:	f005 feaa 	bl	22a76 <memset>
}
   1cd22:	bd08      	pop	{r3, pc}
   1cd24:	20000ab8 	.word	0x20000ab8
   1cd28:	20006c48 	.word	0x20006c48

0001cd2c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1cd2c:	b500      	push	{lr}
   1cd2e:	b0af      	sub	sp, #188	; 0xbc
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1cd30:	4b1d      	ldr	r3, [pc, #116]	; (1cda8 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1cd32:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1cd36:	4c1d      	ldr	r4, [pc, #116]	; (1cdac <z_cstart+0x80>)
   1cd38:	6963      	ldr	r3, [r4, #20]
   1cd3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1cd3e:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1cd40:	23e0      	movs	r3, #224	; 0xe0
   1cd42:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1cd46:	2320      	movs	r3, #32
   1cd48:	77e3      	strb	r3, [r4, #31]
   1cd4a:	2500      	movs	r5, #0
   1cd4c:	7625      	strb	r5, [r4, #24]
   1cd4e:	7665      	strb	r5, [r4, #25]
   1cd50:	76a5      	strb	r5, [r4, #26]
   1cd52:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1cd56:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cd58:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1cd5c:	6263      	str	r3, [r4, #36]	; 0x24
   1cd5e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1cd62:	f7f7 fa95 	bl	14290 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1cd66:	f7f6 ffff 	bl	13d68 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1cd6a:	f04f 33ff 	mov.w	r3, #4294967295
   1cd6e:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1cd70:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1cd72:	f7f7 fb97 	bl	144a4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1cd76:	f7f7 fb31 	bl	143dc <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1cd7a:	2401      	movs	r4, #1
   1cd7c:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1cd80:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1cd84:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   1cd86:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1cd88:	4b09      	ldr	r3, [pc, #36]	; (1cdb0 <z_cstart+0x84>)
   1cd8a:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1cd8e:	f7ff feb5 	bl	1cafc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1cd92:	4628      	mov	r0, r5
   1cd94:	f7ff febe 	bl	1cb14 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1cd98:	4620      	mov	r0, r4
   1cd9a:	f7ff febb 	bl	1cb14 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1cd9e:	f7ff ff4b 	bl	1cc38 <prepare_multithreading>
   1cda2:	f7ff ffad 	bl	1cd00 <switch_to_main_thread>
   1cda6:	bf00      	nop
   1cda8:	200098c0 	.word	0x200098c0
   1cdac:	e000ed00 	.word	0xe000ed00
   1cdb0:	2000613c 	.word	0x2000613c

0001cdb4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1cdb4:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1cdb6:	4c06      	ldr	r4, [pc, #24]	; (1cdd0 <statics_init+0x1c>)
   1cdb8:	4b06      	ldr	r3, [pc, #24]	; (1cdd4 <statics_init+0x20>)
   1cdba:	429c      	cmp	r4, r3
   1cdbc:	d206      	bcs.n	1cdcc <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1cdbe:	68a2      	ldr	r2, [r4, #8]
   1cdc0:	6861      	ldr	r1, [r4, #4]
   1cdc2:	4620      	mov	r0, r4
   1cdc4:	f00a faa3 	bl	2730e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1cdc8:	3414      	adds	r4, #20
   1cdca:	e7f5      	b.n	1cdb8 <statics_init+0x4>
		}
	}
	return 0;
}
   1cdcc:	2000      	movs	r0, #0
   1cdce:	bd10      	pop	{r4, pc}
   1cdd0:	20000804 	.word	0x20000804
   1cdd4:	20000804 	.word	0x20000804

0001cdd8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1cdd8:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1cdda:	4c06      	ldr	r4, [pc, #24]	; (1cdf4 <init_mem_slab_module+0x1c>)
	int rc = 0;
   1cddc:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1cdde:	4b06      	ldr	r3, [pc, #24]	; (1cdf8 <init_mem_slab_module+0x20>)
   1cde0:	429c      	cmp	r4, r3
   1cde2:	d206      	bcs.n	1cdf2 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   1cde4:	4620      	mov	r0, r4
   1cde6:	f00a fb02 	bl	273ee <create_free_list>
		if (rc < 0) {
   1cdea:	2800      	cmp	r0, #0
   1cdec:	db01      	blt.n	1cdf2 <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1cdee:	341c      	adds	r4, #28
   1cdf0:	e7f5      	b.n	1cdde <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   1cdf2:	bd10      	pop	{r4, pc}
   1cdf4:	20000794 	.word	0x20000794
   1cdf8:	20000804 	.word	0x20000804

0001cdfc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1cdfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cdfe:	b083      	sub	sp, #12
   1ce00:	460c      	mov	r4, r1
   1ce02:	461f      	mov	r7, r3
	__asm__ volatile(
   1ce04:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce08:	f3ef 8111 	mrs	r1, BASEPRI
   1ce0c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce10:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1ce14:	6943      	ldr	r3, [r0, #20]
   1ce16:	b16b      	cbz	r3, 1ce34 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   1ce18:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ce1a:	6943      	ldr	r3, [r0, #20]
   1ce1c:	681b      	ldr	r3, [r3, #0]
   1ce1e:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ce20:	6983      	ldr	r3, [r0, #24]
   1ce22:	3301      	adds	r3, #1
   1ce24:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1ce26:	2000      	movs	r0, #0
	__asm__ volatile(
   1ce28:	f381 8811 	msr	BASEPRI, r1
   1ce2c:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1ce30:	b003      	add	sp, #12
   1ce32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ce34:	4616      	mov	r6, r2
   1ce36:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1ce3a:	ea56 0307 	orrs.w	r3, r6, r7
   1ce3e:	d104      	bne.n	1ce4a <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   1ce40:	2300      	movs	r3, #0
   1ce42:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1ce44:	f06f 000b 	mvn.w	r0, #11
   1ce48:	e7ee      	b.n	1ce28 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1ce4a:	e9cd 6700 	strd	r6, r7, [sp]
   1ce4e:	4602      	mov	r2, r0
   1ce50:	4628      	mov	r0, r5
   1ce52:	f000 fdfd 	bl	1da50 <z_pend_curr>
		if (result == 0) {
   1ce56:	2800      	cmp	r0, #0
   1ce58:	d1ea      	bne.n	1ce30 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   1ce5a:	4b02      	ldr	r3, [pc, #8]	; (1ce64 <k_mem_slab_alloc+0x68>)
   1ce5c:	689b      	ldr	r3, [r3, #8]
   1ce5e:	695b      	ldr	r3, [r3, #20]
   1ce60:	6023      	str	r3, [r4, #0]
		return result;
   1ce62:	e7e5      	b.n	1ce30 <k_mem_slab_alloc+0x34>
   1ce64:	2000613c 	.word	0x2000613c

0001ce68 <z_thread_monitor_exit>:
	__asm__ volatile(
   1ce68:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce6c:	f3ef 8111 	mrs	r1, BASEPRI
   1ce70:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce74:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   1ce78:	4b0a      	ldr	r3, [pc, #40]	; (1cea4 <z_thread_monitor_exit+0x3c>)
   1ce7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ce7c:	4283      	cmp	r3, r0
   1ce7e:	d104      	bne.n	1ce8a <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1ce80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1ce82:	4b08      	ldr	r3, [pc, #32]	; (1cea4 <z_thread_monitor_exit+0x3c>)
   1ce84:	629a      	str	r2, [r3, #40]	; 0x28
   1ce86:	e007      	b.n	1ce98 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   1ce88:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1ce8a:	b113      	cbz	r3, 1ce92 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   1ce8c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1ce8e:	4282      	cmp	r2, r0
   1ce90:	d1fa      	bne.n	1ce88 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1ce92:	b10b      	cbz	r3, 1ce98 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1ce94:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1ce96:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   1ce98:	f381 8811 	msr	BASEPRI, r1
   1ce9c:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1cea0:	4770      	bx	lr
   1cea2:	bf00      	nop
   1cea4:	2000613c 	.word	0x2000613c

0001cea8 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   1cea8:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   1ceaa:	4604      	mov	r4, r0
   1ceac:	b140      	cbz	r0, 1cec0 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   1ceae:	2220      	movs	r2, #32
   1ceb0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1ceb4:	f005 fd58 	bl	22968 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1ceb8:	2000      	movs	r0, #0
   1ceba:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1cebe:	bd10      	pop	{r4, pc}
		thread = _current;
   1cec0:	4b01      	ldr	r3, [pc, #4]	; (1cec8 <z_impl_k_thread_name_set+0x20>)
   1cec2:	689c      	ldr	r4, [r3, #8]
   1cec4:	e7f3      	b.n	1ceae <z_impl_k_thread_name_set+0x6>
   1cec6:	bf00      	nop
   1cec8:	2000613c 	.word	0x2000613c

0001cecc <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   1cecc:	b538      	push	{r3, r4, r5, lr}
   1cece:	4614      	mov	r4, r2
   1ced0:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ced2:	ea54 0305 	orrs.w	r3, r4, r5
   1ced6:	d102      	bne.n	1cede <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   1ced8:	f00a faf2 	bl	274c0 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1cedc:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1cede:	462b      	mov	r3, r5
   1cee0:	4902      	ldr	r1, [pc, #8]	; (1ceec <schedule_new_thread+0x20>)
   1cee2:	3018      	adds	r0, #24
   1cee4:	f001 f85e 	bl	1dfa4 <z_add_timeout>
   1cee8:	e7f8      	b.n	1cedc <schedule_new_thread+0x10>
   1ceea:	bf00      	nop
   1ceec:	00027a99 	.word	0x00027a99

0001cef0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1cef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cef4:	b085      	sub	sp, #20
   1cef6:	4604      	mov	r4, r0
   1cef8:	460f      	mov	r7, r1
   1cefa:	4615      	mov	r5, r2
   1cefc:	461e      	mov	r6, r3
   1cefe:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1cf02:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1cf06:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1cf0a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1cf0e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1cf12:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   1cf14:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1cf16:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cf18:	2204      	movs	r2, #4
   1cf1a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1cf1c:	f00a fad4 	bl	274c8 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1cf20:	462a      	mov	r2, r5
   1cf22:	4639      	mov	r1, r7
   1cf24:	4620      	mov	r0, r4
   1cf26:	f00a fab3 	bl	27490 <setup_thread_stack>
   1cf2a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1cf2c:	f8cd 8008 	str.w	r8, [sp, #8]
   1cf30:	f8cd 9004 	str.w	r9, [sp, #4]
   1cf34:	f8cd a000 	str.w	sl, [sp]
   1cf38:	4633      	mov	r3, r6
   1cf3a:	4602      	mov	r2, r0
   1cf3c:	4639      	mov	r1, r7
   1cf3e:	4620      	mov	r0, r4
   1cf40:	f7f7 f804 	bl	13f4c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   1cf44:	2300      	movs	r3, #0
   1cf46:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   1cf48:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1cf4a:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1cf4e:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1cf52:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   1cf56:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf5a:	f3ef 8211 	mrs	r2, BASEPRI
   1cf5e:	f383 8812 	msr	BASEPRI_MAX, r3
   1cf62:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1cf66:	4b13      	ldr	r3, [pc, #76]	; (1cfb4 <z_setup_new_thread+0xc4>)
   1cf68:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1cf6a:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1cf6c:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   1cf6e:	f382 8811 	msr	BASEPRI, r2
   1cf72:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1cf76:	f1bb 0f00 	cmp.w	fp, #0
   1cf7a:	d013      	beq.n	1cfa4 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   1cf7c:	221f      	movs	r2, #31
   1cf7e:	4659      	mov	r1, fp
   1cf80:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1cf84:	f005 fcf0 	bl	22968 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1cf88:	2300      	movs	r3, #0
   1cf8a:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1cf8e:	4b09      	ldr	r3, [pc, #36]	; (1cfb4 <z_setup_new_thread+0xc4>)
   1cf90:	689b      	ldr	r3, [r3, #8]
   1cf92:	b15b      	cbz	r3, 1cfac <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1cf94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1cf98:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
   1cf9c:	4628      	mov	r0, r5
   1cf9e:	b005      	add	sp, #20
   1cfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1cfa4:	2300      	movs	r3, #0
   1cfa6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1cfaa:	e7f0      	b.n	1cf8e <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   1cfac:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   1cfb0:	e7f4      	b.n	1cf9c <z_setup_new_thread+0xac>
   1cfb2:	bf00      	nop
   1cfb4:	2000613c 	.word	0x2000613c

0001cfb8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1cfb8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1cfbc:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1cfbe:	4c23      	ldr	r4, [pc, #140]	; (1d04c <z_init_static_threads+0x94>)
   1cfc0:	4b23      	ldr	r3, [pc, #140]	; (1d050 <z_init_static_threads+0x98>)
   1cfc2:	429c      	cmp	r4, r3
   1cfc4:	d215      	bcs.n	1cff2 <z_init_static_threads+0x3a>
		z_setup_new_thread(
   1cfc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cfc8:	9305      	str	r3, [sp, #20]
   1cfca:	6a23      	ldr	r3, [r4, #32]
   1cfcc:	9304      	str	r3, [sp, #16]
   1cfce:	69e3      	ldr	r3, [r4, #28]
   1cfd0:	9303      	str	r3, [sp, #12]
   1cfd2:	69a3      	ldr	r3, [r4, #24]
   1cfd4:	9302      	str	r3, [sp, #8]
   1cfd6:	6963      	ldr	r3, [r4, #20]
   1cfd8:	9301      	str	r3, [sp, #4]
   1cfda:	6923      	ldr	r3, [r4, #16]
   1cfdc:	9300      	str	r3, [sp, #0]
   1cfde:	68e3      	ldr	r3, [r4, #12]
   1cfe0:	68a2      	ldr	r2, [r4, #8]
   1cfe2:	6861      	ldr	r1, [r4, #4]
   1cfe4:	6820      	ldr	r0, [r4, #0]
   1cfe6:	f7ff ff83 	bl	1cef0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1cfea:	6823      	ldr	r3, [r4, #0]
   1cfec:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1cfee:	3430      	adds	r4, #48	; 0x30
   1cff0:	e7e6      	b.n	1cfc0 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1cff2:	f000 fbe5 	bl	1d7c0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1cff6:	4c15      	ldr	r4, [pc, #84]	; (1d04c <z_init_static_threads+0x94>)
   1cff8:	e01b      	b.n	1d032 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   1cffa:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1cffc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1d000:	ea4f 79e3 	mov.w	r9, r3, asr #31
   1d004:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   1d008:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1d00c:	03d8      	lsls	r0, r3, #15
   1d00e:	f240 35e7 	movw	r5, #999	; 0x3e7
   1d012:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d016:	2300      	movs	r3, #0
   1d018:	1940      	adds	r0, r0, r5
   1d01a:	f04f 0500 	mov.w	r5, #0
   1d01e:	eb45 0101 	adc.w	r1, r5, r1
   1d022:	f7e4 f86d 	bl	1100 <__aeabi_uldivmod>
   1d026:	4602      	mov	r2, r0
   1d028:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   1d02a:	4630      	mov	r0, r6
   1d02c:	f7ff ff4e 	bl	1cecc <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   1d030:	3430      	adds	r4, #48	; 0x30
   1d032:	4b07      	ldr	r3, [pc, #28]	; (1d050 <z_init_static_threads+0x98>)
   1d034:	429c      	cmp	r4, r3
   1d036:	d204      	bcs.n	1d042 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1d038:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d03a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1d03e:	d0f7      	beq.n	1d030 <z_init_static_threads+0x78>
   1d040:	e7db      	b.n	1cffa <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   1d042:	f000 fdbb 	bl	1dbbc <k_sched_unlock>
}
   1d046:	b006      	add	sp, #24
   1d048:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1d04c:	20000794 	.word	0x20000794
   1d050:	20000794 	.word	0x20000794

0001d054 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
   1d054:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
   1d056:	f00a fe46 	bl	27ce6 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1d05a:	4b04      	ldr	r3, [pc, #16]	; (1d06c <pm_save_idle+0x18>)
   1d05c:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1d05e:	f7f5 fead 	bl	12dbc <pm_system_suspend>
   1d062:	b100      	cbz	r0, 1d066 <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
   1d064:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
   1d066:	f7f6 fe85 	bl	13d74 <arch_cpu_idle>
   1d06a:	e7fb      	b.n	1d064 <pm_save_idle+0x10>
   1d06c:	2000613c 	.word	0x2000613c

0001d070 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1d070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d074:	b083      	sub	sp, #12
   1d076:	4604      	mov	r4, r0
   1d078:	461d      	mov	r5, r3
	__asm__ volatile(
   1d07a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d07e:	f3ef 8711 	mrs	r7, BASEPRI
   1d082:	f383 8812 	msr	BASEPRI_MAX, r3
   1d086:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1d08a:	68c1      	ldr	r1, [r0, #12]
   1d08c:	b999      	cbnz	r1, 1d0b6 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   1d08e:	2900      	cmp	r1, #0
   1d090:	d14f      	bne.n	1d132 <z_impl_k_mutex_lock+0xc2>
   1d092:	4b3a      	ldr	r3, [pc, #232]	; (1d17c <z_impl_k_mutex_lock+0x10c>)
   1d094:	689b      	ldr	r3, [r3, #8]
   1d096:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1d09a:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1d09c:	3101      	adds	r1, #1
   1d09e:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1d0a0:	4b36      	ldr	r3, [pc, #216]	; (1d17c <z_impl_k_mutex_lock+0x10c>)
   1d0a2:	689b      	ldr	r3, [r3, #8]
   1d0a4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1d0a6:	f387 8811 	msr	BASEPRI, r7
   1d0aa:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1d0ae:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1d0b0:	b003      	add	sp, #12
   1d0b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d0b6:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1d0b8:	6882      	ldr	r2, [r0, #8]
   1d0ba:	4b30      	ldr	r3, [pc, #192]	; (1d17c <z_impl_k_mutex_lock+0x10c>)
   1d0bc:	689b      	ldr	r3, [r3, #8]
   1d0be:	429a      	cmp	r2, r3
   1d0c0:	d0e5      	beq.n	1d08e <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1d0c2:	ea55 0106 	orrs.w	r1, r5, r6
   1d0c6:	bf0c      	ite	eq
   1d0c8:	f04f 0801 	moveq.w	r8, #1
   1d0cc:	f04f 0800 	movne.w	r8, #0
   1d0d0:	d031      	beq.n	1d136 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1d0d2:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1d0d6:	4649      	mov	r1, r9
   1d0d8:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1d0dc:	f00a fa33 	bl	27546 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1d0e0:	4581      	cmp	r9, r0
   1d0e2:	dc2f      	bgt.n	1d144 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   1d0e4:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1d0e8:	9600      	str	r6, [sp, #0]
   1d0ea:	9501      	str	r5, [sp, #4]
   1d0ec:	4622      	mov	r2, r4
   1d0ee:	4639      	mov	r1, r7
   1d0f0:	4823      	ldr	r0, [pc, #140]	; (1d180 <z_impl_k_mutex_lock+0x110>)
   1d0f2:	f000 fcad 	bl	1da50 <z_pend_curr>
	if (got_mutex == 0) {
   1d0f6:	2800      	cmp	r0, #0
   1d0f8:	d0da      	beq.n	1d0b0 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   1d0fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d0fe:	f3ef 8511 	mrs	r5, BASEPRI
   1d102:	f383 8812 	msr	BASEPRI_MAX, r3
   1d106:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1d10a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d10c:	429c      	cmp	r4, r3
   1d10e:	d01f      	beq.n	1d150 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1d110:	b1f3      	cbz	r3, 1d150 <z_impl_k_mutex_lock+0xe0>
   1d112:	6921      	ldr	r1, [r4, #16]
   1d114:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1d118:	f00a fa15 	bl	27546 <new_prio_for_inheritance>
   1d11c:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1d11e:	4620      	mov	r0, r4
   1d120:	f00a fa1c 	bl	2755c <adjust_owner_prio>
   1d124:	b9b0      	cbnz	r0, 1d154 <z_impl_k_mutex_lock+0xe4>
   1d126:	f1b9 0f00 	cmp.w	r9, #0
   1d12a:	d015      	beq.n	1d158 <z_impl_k_mutex_lock+0xe8>
   1d12c:	f04f 0801 	mov.w	r8, #1
   1d130:	e012      	b.n	1d158 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1d132:	6923      	ldr	r3, [r4, #16]
   1d134:	e7b1      	b.n	1d09a <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   1d136:	f387 8811 	msr	BASEPRI, r7
   1d13a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1d13e:	f06f 000f 	mvn.w	r0, #15
   1d142:	e7b5      	b.n	1d0b0 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   1d144:	4601      	mov	r1, r0
   1d146:	4620      	mov	r0, r4
   1d148:	f00a fa08 	bl	2755c <adjust_owner_prio>
   1d14c:	4681      	mov	r9, r0
   1d14e:	e7cb      	b.n	1d0e8 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1d150:	6921      	ldr	r1, [r4, #16]
   1d152:	e7e4      	b.n	1d11e <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1d154:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   1d158:	f1b8 0f00 	cmp.w	r8, #0
   1d15c:	d106      	bne.n	1d16c <z_impl_k_mutex_lock+0xfc>
   1d15e:	f385 8811 	msr	BASEPRI, r5
   1d162:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1d166:	f06f 000a 	mvn.w	r0, #10
   1d16a:	e7a1      	b.n	1d0b0 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   1d16c:	4629      	mov	r1, r5
   1d16e:	4804      	ldr	r0, [pc, #16]	; (1d180 <z_impl_k_mutex_lock+0x110>)
   1d170:	f000 fb0a 	bl	1d788 <z_reschedule>
	return -EAGAIN;
   1d174:	f06f 000a 	mvn.w	r0, #10
   1d178:	e79a      	b.n	1d0b0 <z_impl_k_mutex_lock+0x40>
   1d17a:	bf00      	nop
   1d17c:	2000613c 	.word	0x2000613c
   1d180:	20006168 	.word	0x20006168

0001d184 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1d184:	6882      	ldr	r2, [r0, #8]
   1d186:	2a00      	cmp	r2, #0
   1d188:	d035      	beq.n	1d1f6 <z_impl_k_mutex_unlock+0x72>
{
   1d18a:	b538      	push	{r3, r4, r5, lr}
   1d18c:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1d18e:	4b1d      	ldr	r3, [pc, #116]	; (1d204 <z_impl_k_mutex_unlock+0x80>)
   1d190:	689b      	ldr	r3, [r3, #8]
   1d192:	429a      	cmp	r2, r3
   1d194:	d132      	bne.n	1d1fc <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1d196:	7bda      	ldrb	r2, [r3, #15]
   1d198:	3a01      	subs	r2, #1
   1d19a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1d19c:	68c3      	ldr	r3, [r0, #12]
   1d19e:	2b01      	cmp	r3, #1
   1d1a0:	d905      	bls.n	1d1ae <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1d1a2:	3b01      	subs	r3, #1
   1d1a4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1d1a6:	f000 fd09 	bl	1dbbc <k_sched_unlock>

	return 0;
   1d1aa:	2000      	movs	r0, #0
}
   1d1ac:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1d1ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d1b2:	f3ef 8511 	mrs	r5, BASEPRI
   1d1b6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d1ba:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1d1be:	6901      	ldr	r1, [r0, #16]
   1d1c0:	f00a f9cc 	bl	2755c <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1d1c4:	4620      	mov	r0, r4
   1d1c6:	f00a fce6 	bl	27b96 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1d1ca:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1d1cc:	b160      	cbz	r0, 1d1e8 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1d1ce:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d1d2:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1d1d4:	2300      	movs	r3, #0
   1d1d6:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1d1da:	f00a fc41 	bl	27a60 <z_ready_thread>
		z_reschedule(&lock, key);
   1d1de:	4629      	mov	r1, r5
   1d1e0:	4809      	ldr	r0, [pc, #36]	; (1d208 <z_impl_k_mutex_unlock+0x84>)
   1d1e2:	f000 fad1 	bl	1d788 <z_reschedule>
   1d1e6:	e7de      	b.n	1d1a6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1d1e8:	2300      	movs	r3, #0
   1d1ea:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   1d1ec:	f385 8811 	msr	BASEPRI, r5
   1d1f0:	f3bf 8f6f 	isb	sy
   1d1f4:	e7d7      	b.n	1d1a6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1d1f6:	f06f 0015 	mvn.w	r0, #21
}
   1d1fa:	4770      	bx	lr
		return -EPERM;
   1d1fc:	f04f 30ff 	mov.w	r0, #4294967295
   1d200:	e7d4      	b.n	1d1ac <z_impl_k_mutex_unlock+0x28>
   1d202:	bf00      	nop
   1d204:	2000613c 	.word	0x2000613c
   1d208:	20006168 	.word	0x20006168

0001d20c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1d20c:	b5d0      	push	{r4, r6, r7, lr}
   1d20e:	b082      	sub	sp, #8
   1d210:	4601      	mov	r1, r0
   1d212:	4616      	mov	r6, r2
   1d214:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d216:	4602      	mov	r2, r0
	__asm__ volatile(
   1d218:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d21c:	f3ef 8411 	mrs	r4, BASEPRI
   1d220:	f383 8812 	msr	BASEPRI_MAX, r3
   1d224:	f3bf 8f6f 	isb	sy
   1d228:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1d22c:	b188      	cbz	r0, 1d252 <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d22e:	6803      	ldr	r3, [r0, #0]
   1d230:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   1d234:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1d236:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d238:	4290      	cmp	r0, r2
   1d23a:	d008      	beq.n	1d24e <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1d23c:	2101      	movs	r1, #1
   1d23e:	f00a fa12 	bl	27666 <z_queue_node_peek>
	__asm__ volatile(
   1d242:	f384 8811 	msr	BASEPRI, r4
   1d246:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1d24a:	b002      	add	sp, #8
   1d24c:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
   1d24e:	604b      	str	r3, [r1, #4]
}
   1d250:	e7f4      	b.n	1d23c <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d252:	ea56 0307 	orrs.w	r3, r6, r7
   1d256:	d00a      	beq.n	1d26e <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1d258:	e9cd 6700 	strd	r6, r7, [sp]
   1d25c:	4621      	mov	r1, r4
   1d25e:	4610      	mov	r0, r2
   1d260:	f000 fbf6 	bl	1da50 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1d264:	b948      	cbnz	r0, 1d27a <z_impl_k_queue_get+0x6e>
   1d266:	4b06      	ldr	r3, [pc, #24]	; (1d280 <z_impl_k_queue_get+0x74>)
   1d268:	689b      	ldr	r3, [r3, #8]
   1d26a:	6958      	ldr	r0, [r3, #20]
   1d26c:	e7ed      	b.n	1d24a <z_impl_k_queue_get+0x3e>
   1d26e:	f384 8811 	msr	BASEPRI, r4
   1d272:	f3bf 8f6f 	isb	sy
		return NULL;
   1d276:	2000      	movs	r0, #0
   1d278:	e7e7      	b.n	1d24a <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1d27a:	2000      	movs	r0, #0
   1d27c:	e7e5      	b.n	1d24a <z_impl_k_queue_get+0x3e>
   1d27e:	bf00      	nop
   1d280:	2000613c 	.word	0x2000613c

0001d284 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1d284:	b538      	push	{r3, r4, r5, lr}
   1d286:	4604      	mov	r4, r0
	__asm__ volatile(
   1d288:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d28c:	f3ef 8511 	mrs	r5, BASEPRI
   1d290:	f383 8812 	msr	BASEPRI_MAX, r3
   1d294:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1d298:	f00a fc7d 	bl	27b96 <z_unpend_first_thread>

	if (thread != NULL) {
   1d29c:	b148      	cbz	r0, 1d2b2 <z_impl_k_sem_give+0x2e>
   1d29e:	2200      	movs	r2, #0
   1d2a0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1d2a4:	f00a fbdc 	bl	27a60 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1d2a8:	4629      	mov	r1, r5
   1d2aa:	4809      	ldr	r0, [pc, #36]	; (1d2d0 <z_impl_k_sem_give+0x4c>)
   1d2ac:	f000 fa6c 	bl	1d788 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1d2b0:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1d2b2:	68a3      	ldr	r3, [r4, #8]
   1d2b4:	68e2      	ldr	r2, [r4, #12]
   1d2b6:	4293      	cmp	r3, r2
   1d2b8:	d008      	beq.n	1d2cc <z_impl_k_sem_give+0x48>
   1d2ba:	2201      	movs	r2, #1
   1d2bc:	4413      	add	r3, r2
   1d2be:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1d2c0:	2102      	movs	r1, #2
   1d2c2:	f104 0010 	add.w	r0, r4, #16
   1d2c6:	f00a fe12 	bl	27eee <z_handle_obj_poll_events>
}
   1d2ca:	e7ed      	b.n	1d2a8 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1d2cc:	2200      	movs	r2, #0
   1d2ce:	e7f5      	b.n	1d2bc <z_impl_k_sem_give+0x38>
   1d2d0:	20006168 	.word	0x20006168

0001d2d4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1d2d4:	b530      	push	{r4, r5, lr}
   1d2d6:	b083      	sub	sp, #12
   1d2d8:	461d      	mov	r5, r3
   1d2da:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d2de:	f3ef 8111 	mrs	r1, BASEPRI
   1d2e2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d2e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1d2ea:	6883      	ldr	r3, [r0, #8]
   1d2ec:	b143      	cbz	r3, 1d300 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1d2ee:	3b01      	subs	r3, #1
   1d2f0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1d2f2:	f381 8811 	msr	BASEPRI, r1
   1d2f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1d2fa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1d2fc:	b003      	add	sp, #12
   1d2fe:	bd30      	pop	{r4, r5, pc}
   1d300:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d302:	ea54 0305 	orrs.w	r3, r4, r5
   1d306:	d006      	beq.n	1d316 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1d308:	e9cd 4500 	strd	r4, r5, [sp]
   1d30c:	4602      	mov	r2, r0
   1d30e:	4805      	ldr	r0, [pc, #20]	; (1d324 <z_impl_k_sem_take+0x50>)
   1d310:	f000 fb9e 	bl	1da50 <z_pend_curr>
	return ret;
   1d314:	e7f2      	b.n	1d2fc <z_impl_k_sem_take+0x28>
   1d316:	f381 8811 	msr	BASEPRI, r1
   1d31a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1d31e:	f06f 000f 	mvn.w	r0, #15
   1d322:	e7eb      	b.n	1d2fc <z_impl_k_sem_take+0x28>
   1d324:	20006168 	.word	0x20006168

0001d328 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1d328:	b510      	push	{r4, lr}
   1d32a:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1d32c:	4b08      	ldr	r3, [pc, #32]	; (1d350 <k_sys_work_q_init+0x28>)
   1d32e:	9302      	str	r3, [sp, #8]
   1d330:	2400      	movs	r4, #0
   1d332:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1d336:	ab02      	add	r3, sp, #8
   1d338:	9300      	str	r3, [sp, #0]
   1d33a:	f04f 33ff 	mov.w	r3, #4294967295
   1d33e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1d342:	4904      	ldr	r1, [pc, #16]	; (1d354 <k_sys_work_q_init+0x2c>)
   1d344:	4804      	ldr	r0, [pc, #16]	; (1d358 <k_sys_work_q_init+0x30>)
   1d346:	f000 f96f 	bl	1d628 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1d34a:	4620      	mov	r0, r4
   1d34c:	b004      	add	sp, #16
   1d34e:	bd10      	pop	{r4, pc}
   1d350:	00028f4c 	.word	0x00028f4c
   1d354:	200098c0 	.word	0x200098c0
   1d358:	200028e8 	.word	0x200028e8

0001d35c <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d35e:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   1d360:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d362:	f013 0f02 	tst.w	r3, #2
   1d366:	d15b      	bne.n	1d420 <submit_to_queue_locked+0xc4>
   1d368:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1d36a:	f013 0f04 	tst.w	r3, #4
   1d36e:	d15c      	bne.n	1d42a <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   1d370:	680b      	ldr	r3, [r1, #0]
   1d372:	2b00      	cmp	r3, #0
   1d374:	d037      	beq.n	1d3e6 <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   1d376:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1d378:	f013 0f01 	tst.w	r3, #1
   1d37c:	d036      	beq.n	1d3ec <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1d37e:	68a3      	ldr	r3, [r4, #8]
   1d380:	602b      	str	r3, [r5, #0]
			ret = 2;
   1d382:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   1d384:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   1d386:	2e00      	cmp	r6, #0
   1d388:	d03e      	beq.n	1d408 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1d38a:	4b29      	ldr	r3, [pc, #164]	; (1d430 <submit_to_queue_locked+0xd4>)
   1d38c:	689b      	ldr	r3, [r3, #8]
   1d38e:	42b3      	cmp	r3, r6
   1d390:	d02e      	beq.n	1d3f0 <submit_to_queue_locked+0x94>
   1d392:	2300      	movs	r3, #0
   1d394:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   1d396:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   1d39a:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1d39e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1d3a2:	f013 0f01 	tst.w	r3, #1
   1d3a6:	d032      	beq.n	1d40e <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   1d3a8:	b101      	cbz	r1, 1d3ac <submit_to_queue_locked+0x50>
   1d3aa:	b39a      	cbz	r2, 1d414 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   1d3ac:	b100      	cbz	r0, 1d3b0 <submit_to_queue_locked+0x54>
   1d3ae:	b3a1      	cbz	r1, 1d41a <submit_to_queue_locked+0xbe>
	parent->next = child;
   1d3b0:	2300      	movs	r3, #0
   1d3b2:	6023      	str	r3, [r4, #0]
	return list->tail;
   1d3b4:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   1d3b8:	b30b      	cbz	r3, 1d3fe <submit_to_queue_locked+0xa2>
	parent->next = child;
   1d3ba:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d3bc:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1d3c0:	2200      	movs	r2, #0
   1d3c2:	4611      	mov	r1, r2
   1d3c4:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   1d3c8:	f00a fc21 	bl	27c0e <z_sched_wake>
		ret = 1;
   1d3cc:	2001      	movs	r0, #1

		if (rc < 0) {
   1d3ce:	2800      	cmp	r0, #0
   1d3d0:	db06      	blt.n	1d3e0 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   1d3d2:	68e3      	ldr	r3, [r4, #12]
   1d3d4:	f043 0304 	orr.w	r3, r3, #4
   1d3d8:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   1d3da:	682b      	ldr	r3, [r5, #0]
   1d3dc:	60a3      	str	r3, [r4, #8]
   1d3de:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   1d3e0:	2800      	cmp	r0, #0
   1d3e2:	dc21      	bgt.n	1d428 <submit_to_queue_locked+0xcc>
   1d3e4:	e01e      	b.n	1d424 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   1d3e6:	6883      	ldr	r3, [r0, #8]
   1d3e8:	600b      	str	r3, [r1, #0]
   1d3ea:	e7c4      	b.n	1d376 <submit_to_queue_locked+0x1a>
		ret = 1;
   1d3ec:	2701      	movs	r7, #1
   1d3ee:	e7c9      	b.n	1d384 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1d3f0:	f00a f860 	bl	274b4 <k_is_in_isr>
   1d3f4:	b908      	cbnz	r0, 1d3fa <submit_to_queue_locked+0x9e>
   1d3f6:	2301      	movs	r3, #1
   1d3f8:	e7cc      	b.n	1d394 <submit_to_queue_locked+0x38>
   1d3fa:	2300      	movs	r3, #0
   1d3fc:	e7ca      	b.n	1d394 <submit_to_queue_locked+0x38>
   1d3fe:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   1d402:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   1d406:	e7db      	b.n	1d3c0 <submit_to_queue_locked+0x64>
		return -EINVAL;
   1d408:	f06f 0015 	mvn.w	r0, #21
   1d40c:	e7df      	b.n	1d3ce <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   1d40e:	f06f 0012 	mvn.w	r0, #18
   1d412:	e7dc      	b.n	1d3ce <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1d414:	f06f 000f 	mvn.w	r0, #15
   1d418:	e7d9      	b.n	1d3ce <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1d41a:	f06f 000f 	mvn.w	r0, #15
   1d41e:	e7d6      	b.n	1d3ce <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1d420:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   1d424:	2300      	movs	r3, #0
   1d426:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1d428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1d42a:	2000      	movs	r0, #0
   1d42c:	e7fa      	b.n	1d424 <submit_to_queue_locked+0xc8>
   1d42e:	bf00      	nop
   1d430:	2000613c 	.word	0x2000613c

0001d434 <finalize_cancel_locked>:
{
   1d434:	b570      	push	{r4, r5, r6, lr}
   1d436:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   1d438:	68c3      	ldr	r3, [r0, #12]
   1d43a:	f023 0302 	bic.w	r3, r3, #2
   1d43e:	60c3      	str	r3, [r0, #12]
	return list->head;
   1d440:	4b19      	ldr	r3, [pc, #100]	; (1d4a8 <finalize_cancel_locked+0x74>)
   1d442:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d444:	b1e8      	cbz	r0, 1d482 <finalize_cancel_locked+0x4e>
   1d446:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d448:	b100      	cbz	r0, 1d44c <finalize_cancel_locked+0x18>
	return node->next;
   1d44a:	6804      	ldr	r4, [r0, #0]
   1d44c:	2600      	movs	r6, #0
   1d44e:	e01d      	b.n	1d48c <finalize_cancel_locked+0x58>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1d450:	b15e      	cbz	r6, 1d46a <finalize_cancel_locked+0x36>
	return node->next;
   1d452:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   1d454:	6033      	str	r3, [r6, #0]
	return list->tail;
   1d456:	4b14      	ldr	r3, [pc, #80]	; (1d4a8 <finalize_cancel_locked+0x74>)
   1d458:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d45a:	4298      	cmp	r0, r3
   1d45c:	d00e      	beq.n	1d47c <finalize_cancel_locked+0x48>
	parent->next = child;
   1d45e:	2300      	movs	r3, #0
   1d460:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1d464:	f7ff ff0e 	bl	1d284 <z_impl_k_sem_give>
}
   1d468:	e015      	b.n	1d496 <finalize_cancel_locked+0x62>
	return node->next;
   1d46a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1d46c:	4b0e      	ldr	r3, [pc, #56]	; (1d4a8 <finalize_cancel_locked+0x74>)
   1d46e:	601a      	str	r2, [r3, #0]
	return list->tail;
   1d470:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d472:	4298      	cmp	r0, r3
   1d474:	d1f3      	bne.n	1d45e <finalize_cancel_locked+0x2a>
	list->tail = node;
   1d476:	4b0c      	ldr	r3, [pc, #48]	; (1d4a8 <finalize_cancel_locked+0x74>)
   1d478:	605a      	str	r2, [r3, #4]
}
   1d47a:	e7f0      	b.n	1d45e <finalize_cancel_locked+0x2a>
	list->tail = node;
   1d47c:	4b0a      	ldr	r3, [pc, #40]	; (1d4a8 <finalize_cancel_locked+0x74>)
   1d47e:	605e      	str	r6, [r3, #4]
}
   1d480:	e7ed      	b.n	1d45e <finalize_cancel_locked+0x2a>
   1d482:	4604      	mov	r4, r0
   1d484:	e7e2      	b.n	1d44c <finalize_cancel_locked+0x18>
   1d486:	4623      	mov	r3, r4
   1d488:	4620      	mov	r0, r4
   1d48a:	461c      	mov	r4, r3
   1d48c:	b150      	cbz	r0, 1d4a4 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   1d48e:	6843      	ldr	r3, [r0, #4]
   1d490:	42ab      	cmp	r3, r5
   1d492:	d0dd      	beq.n	1d450 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   1d494:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d496:	2c00      	cmp	r4, #0
   1d498:	d0f5      	beq.n	1d486 <finalize_cancel_locked+0x52>
   1d49a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d49c:	2c00      	cmp	r4, #0
   1d49e:	d0f3      	beq.n	1d488 <finalize_cancel_locked+0x54>
	return node->next;
   1d4a0:	6823      	ldr	r3, [r4, #0]
   1d4a2:	e7f1      	b.n	1d488 <finalize_cancel_locked+0x54>
}
   1d4a4:	bd70      	pop	{r4, r5, r6, pc}
   1d4a6:	bf00      	nop
   1d4a8:	20006168 	.word	0x20006168

0001d4ac <cancel_sync_locked>:
 *
 * @retval false if work was idle on entry.  The caller need not wait.
 */
static bool cancel_sync_locked(struct k_work *work,
			       struct z_work_canceller *canceller)
{
   1d4ac:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1d4ae:	68c5      	ldr	r5, [r0, #12]
   1d4b0:	f015 0f02 	tst.w	r5, #2
   1d4b4:	f3c5 0540 	ubfx	r5, r5, #1, #1

	/* If something's still running then we have to wait for
	 * completion, which is indicated when finish_cancel() gets
	 * invoked.
	 */
	if (ret) {
   1d4b8:	d101      	bne.n	1d4be <cancel_sync_locked+0x12>
		init_work_cancel(canceller, work);
	}

	return ret;
}
   1d4ba:	4628      	mov	r0, r5
   1d4bc:	bd70      	pop	{r4, r5, r6, pc}
   1d4be:	4604      	mov	r4, r0
   1d4c0:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   1d4c2:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d4c6:	2201      	movs	r2, #1
   1d4c8:	2100      	movs	r1, #0
   1d4ca:	f00a f93a 	bl	27742 <z_impl_k_sem_init>
	canceler->work = work;
   1d4ce:	6074      	str	r4, [r6, #4]
	parent->next = child;
   1d4d0:	2300      	movs	r3, #0
   1d4d2:	6033      	str	r3, [r6, #0]
	return list->tail;
   1d4d4:	4b05      	ldr	r3, [pc, #20]	; (1d4ec <cancel_sync_locked+0x40>)
   1d4d6:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1d4d8:	b11b      	cbz	r3, 1d4e2 <cancel_sync_locked+0x36>
	parent->next = child;
   1d4da:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1d4dc:	4b03      	ldr	r3, [pc, #12]	; (1d4ec <cancel_sync_locked+0x40>)
   1d4de:	605e      	str	r6, [r3, #4]
}
   1d4e0:	e7eb      	b.n	1d4ba <cancel_sync_locked+0xe>
   1d4e2:	4b02      	ldr	r3, [pc, #8]	; (1d4ec <cancel_sync_locked+0x40>)
   1d4e4:	605e      	str	r6, [r3, #4]
	list->head = node;
   1d4e6:	601e      	str	r6, [r3, #0]
}
   1d4e8:	e7e7      	b.n	1d4ba <cancel_sync_locked+0xe>
   1d4ea:	bf00      	nop
   1d4ec:	20006168 	.word	0x20006168

0001d4f0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1d4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d4f2:	b085      	sub	sp, #20
   1d4f4:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   1d4f6:	e016      	b.n	1d526 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   1d4f8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   1d4fc:	f023 0204 	bic.w	r2, r3, #4
   1d500:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1d504:	f013 0f04 	tst.w	r3, #4
   1d508:	d158      	bne.n	1d5bc <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1d50a:	2300      	movs	r3, #0
   1d50c:	9302      	str	r3, [sp, #8]
   1d50e:	f04f 32ff 	mov.w	r2, #4294967295
   1d512:	f04f 33ff 	mov.w	r3, #4294967295
   1d516:	e9cd 2300 	strd	r2, r3, [sp]
   1d51a:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   1d51e:	4631      	mov	r1, r6
   1d520:	482e      	ldr	r0, [pc, #184]	; (1d5dc <work_queue_main+0xec>)
   1d522:	f000 fccb 	bl	1debc <z_sched_wait>
	__asm__ volatile(
   1d526:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d52a:	f3ef 8611 	mrs	r6, BASEPRI
   1d52e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d532:	f3bf 8f6f 	isb	sy
	return list->head;
   1d536:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   1d53a:	2c00      	cmp	r4, #0
   1d53c:	d0dc      	beq.n	1d4f8 <work_queue_main+0x8>
	return node->next;
   1d53e:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1d540:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   1d544:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d548:	4294      	cmp	r4, r2
   1d54a:	d034      	beq.n	1d5b6 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   1d54c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1d550:	f043 0302 	orr.w	r3, r3, #2
   1d554:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   1d558:	68e3      	ldr	r3, [r4, #12]
   1d55a:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   1d55e:	f023 0304 	bic.w	r3, r3, #4
   1d562:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   1d564:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   1d566:	2c00      	cmp	r4, #0
   1d568:	d0cf      	beq.n	1d50a <work_queue_main+0x1a>
	__asm__ volatile(
   1d56a:	f386 8811 	msr	BASEPRI, r6
   1d56e:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   1d572:	4620      	mov	r0, r4
   1d574:	4798      	blx	r3
	__asm__ volatile(
   1d576:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d57a:	f3ef 8611 	mrs	r6, BASEPRI
   1d57e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d582:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1d586:	68e3      	ldr	r3, [r4, #12]
   1d588:	f023 0301 	bic.w	r3, r3, #1
   1d58c:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d58e:	f013 0f02 	tst.w	r3, #2
   1d592:	d11e      	bne.n	1d5d2 <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   1d594:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1d598:	f023 0302 	bic.w	r3, r3, #2
   1d59c:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   1d5a0:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   1d5a4:	f386 8811 	msr	BASEPRI, r6
   1d5a8:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1d5ac:	2b00      	cmp	r3, #0
   1d5ae:	d1ba      	bne.n	1d526 <work_queue_main+0x36>
	z_impl_k_yield();
   1d5b0:	f000 fb86 	bl	1dcc0 <z_impl_k_yield>
}
   1d5b4:	e7b7      	b.n	1d526 <work_queue_main+0x36>
	list->tail = node;
   1d5b6:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   1d5ba:	e7c7      	b.n	1d54c <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1d5bc:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1d5c0:	2200      	movs	r2, #0
   1d5c2:	2101      	movs	r1, #1
   1d5c4:	4638      	mov	r0, r7
   1d5c6:	f00a fb22 	bl	27c0e <z_sched_wake>
   1d5ca:	2800      	cmp	r0, #0
   1d5cc:	d1f8      	bne.n	1d5c0 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   1d5ce:	2300      	movs	r3, #0
   1d5d0:	e7c9      	b.n	1d566 <work_queue_main+0x76>
				finalize_cancel_locked(work);
   1d5d2:	4620      	mov	r0, r4
   1d5d4:	f7ff ff2e 	bl	1d434 <finalize_cancel_locked>
   1d5d8:	e7dc      	b.n	1d594 <work_queue_main+0xa4>
   1d5da:	bf00      	nop
   1d5dc:	20006168 	.word	0x20006168

0001d5e0 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1d5e0:	b570      	push	{r4, r5, r6, lr}
   1d5e2:	4606      	mov	r6, r0
   1d5e4:	4608      	mov	r0, r1
   1d5e6:	4614      	mov	r4, r2
   1d5e8:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d5ea:	ea54 0305 	orrs.w	r3, r4, r5
   1d5ee:	d00c      	beq.n	1d60a <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   1d5f0:	68cb      	ldr	r3, [r1, #12]
   1d5f2:	f043 0308 	orr.w	r3, r3, #8
   1d5f6:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   1d5f8:	6833      	ldr	r3, [r6, #0]
   1d5fa:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1d5fc:	462b      	mov	r3, r5
   1d5fe:	4905      	ldr	r1, [pc, #20]	; (1d614 <schedule_for_queue_locked+0x34>)
   1d600:	3010      	adds	r0, #16
   1d602:	f000 fccf 	bl	1dfa4 <z_add_timeout>

	return ret;
   1d606:	2001      	movs	r0, #1
}
   1d608:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   1d60a:	4631      	mov	r1, r6
   1d60c:	f7ff fea6 	bl	1d35c <submit_to_queue_locked>
   1d610:	e7fa      	b.n	1d608 <schedule_for_queue_locked+0x28>
   1d612:	bf00      	nop
   1d614:	000277ed 	.word	0x000277ed

0001d618 <k_work_submit>:
{
   1d618:	b508      	push	{r3, lr}
   1d61a:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1d61c:	4801      	ldr	r0, [pc, #4]	; (1d624 <k_work_submit+0xc>)
   1d61e:	f00a f91f 	bl	27860 <k_work_submit_to_queue>
}
   1d622:	bd08      	pop	{r3, pc}
   1d624:	200028e8 	.word	0x200028e8

0001d628 <k_work_queue_start>:
{
   1d628:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d62a:	b089      	sub	sp, #36	; 0x24
   1d62c:	4604      	mov	r4, r0
   1d62e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   1d630:	2000      	movs	r0, #0
   1d632:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   1d636:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   1d63a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   1d63e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   1d642:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   1d646:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   1d64a:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   1d64e:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   1d652:	b1fd      	cbz	r5, 1d694 <k_work_queue_start+0x6c>
   1d654:	7928      	ldrb	r0, [r5, #4]
   1d656:	b9f8      	cbnz	r0, 1d698 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1d658:	2001      	movs	r0, #1
	*flagp = flags;
   1d65a:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1d65e:	f04f 36ff 	mov.w	r6, #4294967295
   1d662:	f04f 37ff 	mov.w	r7, #4294967295
   1d666:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1d66a:	2000      	movs	r0, #0
   1d66c:	9004      	str	r0, [sp, #16]
   1d66e:	9303      	str	r3, [sp, #12]
   1d670:	9002      	str	r0, [sp, #8]
   1d672:	9001      	str	r0, [sp, #4]
   1d674:	9400      	str	r4, [sp, #0]
   1d676:	4b0a      	ldr	r3, [pc, #40]	; (1d6a0 <k_work_queue_start+0x78>)
   1d678:	4620      	mov	r0, r4
   1d67a:	f009 ff30 	bl	274de <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1d67e:	b125      	cbz	r5, 1d68a <k_work_queue_start+0x62>
   1d680:	6829      	ldr	r1, [r5, #0]
   1d682:	b111      	cbz	r1, 1d68a <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   1d684:	4620      	mov	r0, r4
   1d686:	f7ff fc0f 	bl	1cea8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1d68a:	4620      	mov	r0, r4
   1d68c:	f009 ff18 	bl	274c0 <z_impl_k_thread_start>
}
   1d690:	b009      	add	sp, #36	; 0x24
   1d692:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1d694:	2001      	movs	r0, #1
   1d696:	e7e0      	b.n	1d65a <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   1d698:	f240 1001 	movw	r0, #257	; 0x101
   1d69c:	e7dd      	b.n	1d65a <k_work_queue_start+0x32>
   1d69e:	bf00      	nop
   1d6a0:	0001d4f1 	.word	0x0001d4f1

0001d6a4 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1d6a4:	b508      	push	{r3, lr}
   1d6a6:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1d6a8:	4801      	ldr	r0, [pc, #4]	; (1d6b0 <k_work_schedule+0xc>)
   1d6aa:	f00a f905 	bl	278b8 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   1d6ae:	bd08      	pop	{r3, pc}
   1d6b0:	200028e8 	.word	0x200028e8

0001d6b4 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1d6b4:	b508      	push	{r3, lr}
   1d6b6:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1d6b8:	4801      	ldr	r0, [pc, #4]	; (1d6c0 <k_work_reschedule+0xc>)
   1d6ba:	f00a f917 	bl	278ec <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   1d6be:	bd08      	pop	{r3, pc}
   1d6c0:	200028e8 	.word	0x200028e8

0001d6c4 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   1d6c4:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
   1d6ca:	bf08      	it	eq
   1d6cc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1d6d0:	d100      	bne.n	1d6d4 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   1d6d2:	bd38      	pop	{r3, r4, r5, pc}
   1d6d4:	4902      	ldr	r1, [pc, #8]	; (1d6e0 <add_thread_timeout+0x1c>)
   1d6d6:	3018      	adds	r0, #24
   1d6d8:	f000 fc64 	bl	1dfa4 <z_add_timeout>
   1d6dc:	e7f9      	b.n	1d6d2 <add_thread_timeout+0xe>
   1d6de:	bf00      	nop
   1d6e0:	00027a99 	.word	0x00027a99

0001d6e4 <z_reset_time_slice>:
{
   1d6e4:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   1d6e6:	4b08      	ldr	r3, [pc, #32]	; (1d708 <z_reset_time_slice+0x24>)
   1d6e8:	681b      	ldr	r3, [r3, #0]
   1d6ea:	b903      	cbnz	r3, 1d6ee <z_reset_time_slice+0xa>
}
   1d6ec:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1d6ee:	f7fc fe2d 	bl	1a34c <sys_clock_elapsed>
   1d6f2:	4603      	mov	r3, r0
   1d6f4:	4a04      	ldr	r2, [pc, #16]	; (1d708 <z_reset_time_slice+0x24>)
   1d6f6:	6810      	ldr	r0, [r2, #0]
   1d6f8:	4403      	add	r3, r0
   1d6fa:	4a04      	ldr	r2, [pc, #16]	; (1d70c <z_reset_time_slice+0x28>)
   1d6fc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1d6fe:	2100      	movs	r1, #0
   1d700:	f00a fb07 	bl	27d12 <z_set_timeout_expiry>
}
   1d704:	e7f2      	b.n	1d6ec <z_reset_time_slice+0x8>
   1d706:	bf00      	nop
   1d708:	20006178 	.word	0x20006178
   1d70c:	2000613c 	.word	0x2000613c

0001d710 <k_sched_time_slice_set>:
{
   1d710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d714:	4606      	mov	r6, r0
   1d716:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   1d718:	2300      	movs	r3, #0
	__asm__ volatile(
   1d71a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d71e:	f3ef 8711 	mrs	r7, BASEPRI
   1d722:	f382 8812 	msr	BASEPRI_MAX, r2
   1d726:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1d72a:	e009      	b.n	1d740 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   1d72c:	4b13      	ldr	r3, [pc, #76]	; (1d77c <k_sched_time_slice_set+0x6c>)
   1d72e:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   1d732:	f7ff ffd7 	bl	1d6e4 <z_reset_time_slice>
	__asm__ volatile(
   1d736:	f387 8811 	msr	BASEPRI, r7
   1d73a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1d73e:	2301      	movs	r3, #1
   1d740:	b9cb      	cbnz	r3, 1d776 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   1d742:	2300      	movs	r3, #0
   1d744:	4a0e      	ldr	r2, [pc, #56]	; (1d780 <k_sched_time_slice_set+0x70>)
   1d746:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   1d748:	0c75      	lsrs	r5, r6, #17
   1d74a:	03f4      	lsls	r4, r6, #15
   1d74c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d754:	2300      	movs	r3, #0
   1d756:	1820      	adds	r0, r4, r0
   1d758:	f04f 0100 	mov.w	r1, #0
   1d75c:	eb45 0101 	adc.w	r1, r5, r1
   1d760:	f7e3 fcce 	bl	1100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1d764:	4b07      	ldr	r3, [pc, #28]	; (1d784 <k_sched_time_slice_set+0x74>)
   1d766:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1d768:	2e00      	cmp	r6, #0
   1d76a:	dddf      	ble.n	1d72c <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   1d76c:	2802      	cmp	r0, #2
   1d76e:	bfb8      	it	lt
   1d770:	2002      	movlt	r0, #2
   1d772:	6018      	str	r0, [r3, #0]
   1d774:	e7da      	b.n	1d72c <k_sched_time_slice_set+0x1c>
}
   1d776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d77a:	bf00      	nop
   1d77c:	20006174 	.word	0x20006174
   1d780:	2000613c 	.word	0x2000613c
   1d784:	20006178 	.word	0x20006178

0001d788 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1d788:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   1d78a:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d78c:	b921      	cbnz	r1, 1d798 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d78e:	f3ef 8305 	mrs	r3, IPSR
   1d792:	b913      	cbnz	r3, 1d79a <z_reschedule+0x12>
   1d794:	2101      	movs	r1, #1
   1d796:	e000      	b.n	1d79a <z_reschedule+0x12>
   1d798:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   1d79a:	f011 0f01 	tst.w	r1, #1
   1d79e:	d007      	beq.n	1d7b0 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   1d7a0:	4b06      	ldr	r3, [pc, #24]	; (1d7bc <z_reschedule+0x34>)
   1d7a2:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   1d7a4:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1d7a6:	429a      	cmp	r2, r3
   1d7a8:	d002      	beq.n	1d7b0 <z_reschedule+0x28>
	ret = arch_swap(key);
   1d7aa:	f7f6 fb77 	bl	13e9c <arch_swap>
		z_swap(lock, key);
   1d7ae:	e003      	b.n	1d7b8 <z_reschedule+0x30>
   1d7b0:	f380 8811 	msr	BASEPRI, r0
   1d7b4:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   1d7b8:	bd08      	pop	{r3, pc}
   1d7ba:	bf00      	nop
   1d7bc:	2000613c 	.word	0x2000613c

0001d7c0 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   1d7c0:	2300      	movs	r3, #0
	__asm__ volatile(
   1d7c2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d7c6:	f3ef 8111 	mrs	r1, BASEPRI
   1d7ca:	f382 8812 	msr	BASEPRI_MAX, r2
   1d7ce:	f3bf 8f6f 	isb	sy
   1d7d2:	b953      	cbnz	r3, 1d7ea <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   1d7d4:	4b05      	ldr	r3, [pc, #20]	; (1d7ec <k_sched_lock+0x2c>)
   1d7d6:	689a      	ldr	r2, [r3, #8]
   1d7d8:	7bd3      	ldrb	r3, [r2, #15]
   1d7da:	3b01      	subs	r3, #1
   1d7dc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1d7de:	f381 8811 	msr	BASEPRI, r1
   1d7e2:	f3bf 8f6f 	isb	sy
   1d7e6:	2301      	movs	r3, #1
   1d7e8:	e7f3      	b.n	1d7d2 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1d7ea:	4770      	bx	lr
   1d7ec:	2000613c 	.word	0x2000613c

0001d7f0 <update_cache>:
{
   1d7f0:	b538      	push	{r3, r4, r5, lr}
   1d7f2:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1d7f4:	480f      	ldr	r0, [pc, #60]	; (1d834 <update_cache+0x44>)
   1d7f6:	f00a f92c 	bl	27a52 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1d7fa:	4605      	mov	r5, r0
   1d7fc:	b170      	cbz	r0, 1d81c <update_cache+0x2c>
	if (preempt_ok != 0) {
   1d7fe:	b984      	cbnz	r4, 1d822 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   1d800:	4b0d      	ldr	r3, [pc, #52]	; (1d838 <update_cache+0x48>)
   1d802:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   1d804:	7b5a      	ldrb	r2, [r3, #13]
   1d806:	f012 0f1f 	tst.w	r2, #31
   1d80a:	d10a      	bne.n	1d822 <update_cache+0x32>
	return node->next != NULL;
   1d80c:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1d80e:	b942      	cbnz	r2, 1d822 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1d810:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1d812:	2a7f      	cmp	r2, #127	; 0x7f
   1d814:	d905      	bls.n	1d822 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   1d816:	4a08      	ldr	r2, [pc, #32]	; (1d838 <update_cache+0x48>)
   1d818:	61d3      	str	r3, [r2, #28]
   1d81a:	e00a      	b.n	1d832 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1d81c:	4b06      	ldr	r3, [pc, #24]	; (1d838 <update_cache+0x48>)
   1d81e:	68dd      	ldr	r5, [r3, #12]
   1d820:	e7ed      	b.n	1d7fe <update_cache+0xe>
		if (thread != _current) {
   1d822:	4b05      	ldr	r3, [pc, #20]	; (1d838 <update_cache+0x48>)
   1d824:	689b      	ldr	r3, [r3, #8]
   1d826:	42ab      	cmp	r3, r5
   1d828:	d001      	beq.n	1d82e <update_cache+0x3e>
			z_reset_time_slice();
   1d82a:	f7ff ff5b 	bl	1d6e4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1d82e:	4b02      	ldr	r3, [pc, #8]	; (1d838 <update_cache+0x48>)
   1d830:	61dd      	str	r5, [r3, #28]
}
   1d832:	bd38      	pop	{r3, r4, r5, pc}
   1d834:	2000615c 	.word	0x2000615c
   1d838:	2000613c 	.word	0x2000613c

0001d83c <move_thread_to_end_of_prio_q>:
{
   1d83c:	b538      	push	{r3, r4, r5, lr}
   1d83e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   1d840:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1d842:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d846:	2b00      	cmp	r3, #0
   1d848:	db28      	blt.n	1d89c <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   1d84a:	7b6b      	ldrb	r3, [r5, #13]
   1d84c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d850:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1d852:	4b1a      	ldr	r3, [pc, #104]	; (1d8bc <move_thread_to_end_of_prio_q+0x80>)
   1d854:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d858:	429c      	cmp	r4, r3
   1d85a:	d02d      	beq.n	1d8b8 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d85c:	b16c      	cbz	r4, 1d87a <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d85e:	4621      	mov	r1, r4
   1d860:	4628      	mov	r0, r5
   1d862:	f00a f8ac 	bl	279be <z_sched_prio_cmp>
   1d866:	2800      	cmp	r0, #0
   1d868:	dc20      	bgt.n	1d8ac <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d86a:	b134      	cbz	r4, 1d87a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1d86c:	4b13      	ldr	r3, [pc, #76]	; (1d8bc <move_thread_to_end_of_prio_q+0x80>)
   1d86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d870:	429c      	cmp	r4, r3
   1d872:	d002      	beq.n	1d87a <move_thread_to_end_of_prio_q+0x3e>
   1d874:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d876:	2c00      	cmp	r4, #0
   1d878:	d1f0      	bne.n	1d85c <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   1d87a:	4b10      	ldr	r3, [pc, #64]	; (1d8bc <move_thread_to_end_of_prio_q+0x80>)
   1d87c:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   1d87e:	f103 0120 	add.w	r1, r3, #32
   1d882:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1d884:	606a      	str	r2, [r5, #4]

	tail->next = node;
   1d886:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1d888:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   1d88a:	4b0c      	ldr	r3, [pc, #48]	; (1d8bc <move_thread_to_end_of_prio_q+0x80>)
   1d88c:	6898      	ldr	r0, [r3, #8]
   1d88e:	42a8      	cmp	r0, r5
   1d890:	bf14      	ite	ne
   1d892:	2000      	movne	r0, #0
   1d894:	2001      	moveq	r0, #1
   1d896:	f7ff ffab 	bl	1d7f0 <update_cache>
}
   1d89a:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d89c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1d8a0:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   1d8a2:	4601      	mov	r1, r0
   1d8a4:	4806      	ldr	r0, [pc, #24]	; (1d8c0 <move_thread_to_end_of_prio_q+0x84>)
   1d8a6:	f00a f8a9 	bl	279fc <z_priq_dumb_remove>
}
   1d8aa:	e7ce      	b.n	1d84a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1d8ac:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   1d8ae:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1d8b0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1d8b2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1d8b4:	6065      	str	r5, [r4, #4]
}
   1d8b6:	e7e8      	b.n	1d88a <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d8b8:	2400      	movs	r4, #0
   1d8ba:	e7cf      	b.n	1d85c <move_thread_to_end_of_prio_q+0x20>
   1d8bc:	2000613c 	.word	0x2000613c
   1d8c0:	2000615c 	.word	0x2000615c

0001d8c4 <z_time_slice>:
{
   1d8c4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d8c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d8ca:	f3ef 8411 	mrs	r4, BASEPRI
   1d8ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1d8d2:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1d8d6:	4b1c      	ldr	r3, [pc, #112]	; (1d948 <z_time_slice+0x84>)
   1d8d8:	689b      	ldr	r3, [r3, #8]
   1d8da:	4a1c      	ldr	r2, [pc, #112]	; (1d94c <z_time_slice+0x88>)
   1d8dc:	6812      	ldr	r2, [r2, #0]
   1d8de:	4293      	cmp	r3, r2
   1d8e0:	d01d      	beq.n	1d91e <z_time_slice+0x5a>
	pending_current = NULL;
   1d8e2:	4a1a      	ldr	r2, [pc, #104]	; (1d94c <z_time_slice+0x88>)
   1d8e4:	2100      	movs	r1, #0
   1d8e6:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1d8e8:	4a19      	ldr	r2, [pc, #100]	; (1d950 <z_time_slice+0x8c>)
   1d8ea:	6812      	ldr	r2, [r2, #0]
   1d8ec:	b322      	cbz	r2, 1d938 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1d8ee:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   1d8f0:	2a7f      	cmp	r2, #127	; 0x7f
   1d8f2:	d821      	bhi.n	1d938 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   1d8f4:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   1d8f6:	f012 0f1f 	tst.w	r2, #31
   1d8fa:	d11d      	bne.n	1d938 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1d8fc:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1d900:	4a14      	ldr	r2, [pc, #80]	; (1d954 <z_time_slice+0x90>)
   1d902:	6812      	ldr	r2, [r2, #0]
   1d904:	4291      	cmp	r1, r2
   1d906:	db17      	blt.n	1d938 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   1d908:	4a13      	ldr	r2, [pc, #76]	; (1d958 <z_time_slice+0x94>)
   1d90a:	4293      	cmp	r3, r2
   1d90c:	d014      	beq.n	1d938 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   1d90e:	4a0e      	ldr	r2, [pc, #56]	; (1d948 <z_time_slice+0x84>)
   1d910:	6912      	ldr	r2, [r2, #16]
   1d912:	4282      	cmp	r2, r0
   1d914:	dd0a      	ble.n	1d92c <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   1d916:	1a10      	subs	r0, r2, r0
   1d918:	4b0b      	ldr	r3, [pc, #44]	; (1d948 <z_time_slice+0x84>)
   1d91a:	6118      	str	r0, [r3, #16]
   1d91c:	e00f      	b.n	1d93e <z_time_slice+0x7a>
		z_reset_time_slice();
   1d91e:	f7ff fee1 	bl	1d6e4 <z_reset_time_slice>
	__asm__ volatile(
   1d922:	f384 8811 	msr	BASEPRI, r4
   1d926:	f3bf 8f6f 	isb	sy
		return;
   1d92a:	e00c      	b.n	1d946 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   1d92c:	4618      	mov	r0, r3
   1d92e:	f7ff ff85 	bl	1d83c <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   1d932:	f7ff fed7 	bl	1d6e4 <z_reset_time_slice>
   1d936:	e002      	b.n	1d93e <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   1d938:	4b03      	ldr	r3, [pc, #12]	; (1d948 <z_time_slice+0x84>)
   1d93a:	2200      	movs	r2, #0
   1d93c:	611a      	str	r2, [r3, #16]
   1d93e:	f384 8811 	msr	BASEPRI, r4
   1d942:	f3bf 8f6f 	isb	sy
}
   1d946:	bd10      	pop	{r4, pc}
   1d948:	2000613c 	.word	0x2000613c
   1d94c:	20006170 	.word	0x20006170
   1d950:	20006178 	.word	0x20006178
   1d954:	20006174 	.word	0x20006174
   1d958:	20002778 	.word	0x20002778

0001d95c <ready_thread>:
{
   1d95c:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   1d95e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1d960:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1d964:	2a00      	cmp	r2, #0
   1d966:	db2d      	blt.n	1d9c4 <ready_thread+0x68>
   1d968:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d96a:	f013 0f1f 	tst.w	r3, #31
   1d96e:	d105      	bne.n	1d97c <ready_thread+0x20>
	return node->next != NULL;
   1d970:	6982      	ldr	r2, [r0, #24]
   1d972:	b10a      	cbz	r2, 1d978 <ready_thread+0x1c>
   1d974:	2200      	movs	r2, #0
   1d976:	e002      	b.n	1d97e <ready_thread+0x22>
   1d978:	2201      	movs	r2, #1
   1d97a:	e000      	b.n	1d97e <ready_thread+0x22>
   1d97c:	2200      	movs	r2, #0
   1d97e:	b30a      	cbz	r2, 1d9c4 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   1d980:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d984:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1d986:	4b14      	ldr	r3, [pc, #80]	; (1d9d8 <ready_thread+0x7c>)
   1d988:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d98c:	429d      	cmp	r5, r3
   1d98e:	d020      	beq.n	1d9d2 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d990:	b16d      	cbz	r5, 1d9ae <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d992:	4629      	mov	r1, r5
   1d994:	4620      	mov	r0, r4
   1d996:	f00a f812 	bl	279be <z_sched_prio_cmp>
   1d99a:	2800      	cmp	r0, #0
   1d99c:	dc13      	bgt.n	1d9c6 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d99e:	b135      	cbz	r5, 1d9ae <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   1d9a0:	4b0d      	ldr	r3, [pc, #52]	; (1d9d8 <ready_thread+0x7c>)
   1d9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d9a4:	429d      	cmp	r5, r3
   1d9a6:	d002      	beq.n	1d9ae <ready_thread+0x52>
   1d9a8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d9aa:	2d00      	cmp	r5, #0
   1d9ac:	d1f0      	bne.n	1d990 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   1d9ae:	4b0a      	ldr	r3, [pc, #40]	; (1d9d8 <ready_thread+0x7c>)
   1d9b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1d9b2:	f103 0120 	add.w	r1, r3, #32
   1d9b6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1d9b8:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1d9ba:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1d9bc:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   1d9be:	2000      	movs	r0, #0
   1d9c0:	f7ff ff16 	bl	1d7f0 <update_cache>
}
   1d9c4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   1d9c6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1d9c8:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1d9ca:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1d9cc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1d9ce:	606c      	str	r4, [r5, #4]
}
   1d9d0:	e7f5      	b.n	1d9be <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d9d2:	2500      	movs	r5, #0
   1d9d4:	e7dc      	b.n	1d990 <ready_thread+0x34>
   1d9d6:	bf00      	nop
   1d9d8:	2000613c 	.word	0x2000613c

0001d9dc <z_sched_start>:
{
   1d9dc:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d9de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d9e2:	f3ef 8411 	mrs	r4, BASEPRI
   1d9e6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d9ea:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1d9ee:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   1d9f0:	f013 0f04 	tst.w	r3, #4
   1d9f4:	d104      	bne.n	1da00 <z_sched_start+0x24>
	__asm__ volatile(
   1d9f6:	f384 8811 	msr	BASEPRI, r4
   1d9fa:	f3bf 8f6f 	isb	sy
}
   1d9fe:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1da00:	f023 0304 	bic.w	r3, r3, #4
   1da04:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   1da06:	f7ff ffa9 	bl	1d95c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1da0a:	4621      	mov	r1, r4
   1da0c:	4801      	ldr	r0, [pc, #4]	; (1da14 <z_sched_start+0x38>)
   1da0e:	f7ff febb 	bl	1d788 <z_reschedule>
   1da12:	e7f4      	b.n	1d9fe <z_sched_start+0x22>
   1da14:	20006174 	.word	0x20006174

0001da18 <unready_thread>:
{
   1da18:	b510      	push	{r4, lr}
   1da1a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   1da1c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1da1e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1da22:	2b00      	cmp	r3, #0
   1da24:	db08      	blt.n	1da38 <unready_thread+0x20>
	update_cache(thread == _current);
   1da26:	4b08      	ldr	r3, [pc, #32]	; (1da48 <unready_thread+0x30>)
   1da28:	6898      	ldr	r0, [r3, #8]
   1da2a:	42a0      	cmp	r0, r4
   1da2c:	bf14      	ite	ne
   1da2e:	2000      	movne	r0, #0
   1da30:	2001      	moveq	r0, #1
   1da32:	f7ff fedd 	bl	1d7f0 <update_cache>
}
   1da36:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1da38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1da3c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   1da3e:	4601      	mov	r1, r0
   1da40:	4802      	ldr	r0, [pc, #8]	; (1da4c <unready_thread+0x34>)
   1da42:	f009 ffdb 	bl	279fc <z_priq_dumb_remove>
}
   1da46:	e7ee      	b.n	1da26 <unready_thread+0xe>
   1da48:	2000613c 	.word	0x2000613c
   1da4c:	2000615c 	.word	0x2000615c

0001da50 <z_pend_curr>:
{
   1da50:	b510      	push	{r4, lr}
   1da52:	460c      	mov	r4, r1
   1da54:	4611      	mov	r1, r2
	pending_current = _current;
   1da56:	4b06      	ldr	r3, [pc, #24]	; (1da70 <z_pend_curr+0x20>)
   1da58:	6898      	ldr	r0, [r3, #8]
   1da5a:	4b06      	ldr	r3, [pc, #24]	; (1da74 <z_pend_curr+0x24>)
   1da5c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1da5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1da62:	f00a f877 	bl	27b54 <pend>
   1da66:	4620      	mov	r0, r4
   1da68:	f7f6 fa18 	bl	13e9c <arch_swap>
}
   1da6c:	bd10      	pop	{r4, pc}
   1da6e:	bf00      	nop
   1da70:	2000613c 	.word	0x2000613c
   1da74:	20006170 	.word	0x20006170

0001da78 <z_set_prio>:
{
   1da78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1da7c:	4604      	mov	r4, r0
   1da7e:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   1da80:	2300      	movs	r3, #0
	__asm__ volatile(
   1da82:	f04f 0240 	mov.w	r2, #64	; 0x40
   1da86:	f3ef 8611 	mrs	r6, BASEPRI
   1da8a:	f382 8812 	msr	BASEPRI_MAX, r2
   1da8e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   1da92:	4698      	mov	r8, r3
   1da94:	e008      	b.n	1daa8 <z_set_prio+0x30>
		if (need_sched) {
   1da96:	f012 0801 	ands.w	r8, r2, #1
   1da9a:	d111      	bne.n	1dac0 <z_set_prio+0x48>
			thread->base.prio = prio;
   1da9c:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   1da9e:	f386 8811 	msr	BASEPRI, r6
   1daa2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1daa6:	2301      	movs	r3, #1
   1daa8:	461a      	mov	r2, r3
   1daaa:	2b00      	cmp	r3, #0
   1daac:	d13d      	bne.n	1db2a <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   1daae:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1dab0:	f013 0f1f 	tst.w	r3, #31
   1dab4:	d1ef      	bne.n	1da96 <z_set_prio+0x1e>
	return node->next != NULL;
   1dab6:	69a1      	ldr	r1, [r4, #24]
   1dab8:	2900      	cmp	r1, #0
   1daba:	d1ec      	bne.n	1da96 <z_set_prio+0x1e>
   1dabc:	2201      	movs	r2, #1
   1dabe:	e7ea      	b.n	1da96 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1dac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1dac4:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1dac6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1db34 <z_set_prio+0xbc>
   1daca:	4621      	mov	r1, r4
   1dacc:	4648      	mov	r0, r9
   1dace:	f009 ff95 	bl	279fc <z_priq_dumb_remove>
				thread->base.prio = prio;
   1dad2:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1dad4:	7b63      	ldrb	r3, [r4, #13]
   1dad6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1dada:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1dadc:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dae0:	454d      	cmp	r5, r9
   1dae2:	d020      	beq.n	1db26 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dae4:	b16d      	cbz	r5, 1db02 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1dae6:	4629      	mov	r1, r5
   1dae8:	4620      	mov	r0, r4
   1daea:	f009 ff68 	bl	279be <z_sched_prio_cmp>
   1daee:	2800      	cmp	r0, #0
   1daf0:	dc13      	bgt.n	1db1a <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1daf2:	b135      	cbz	r5, 1db02 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   1daf4:	4b0e      	ldr	r3, [pc, #56]	; (1db30 <z_set_prio+0xb8>)
   1daf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1daf8:	429d      	cmp	r5, r3
   1dafa:	d002      	beq.n	1db02 <z_set_prio+0x8a>
   1dafc:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dafe:	2d00      	cmp	r5, #0
   1db00:	d1f0      	bne.n	1dae4 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   1db02:	4b0b      	ldr	r3, [pc, #44]	; (1db30 <z_set_prio+0xb8>)
   1db04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1db06:	f103 0120 	add.w	r1, r3, #32
   1db0a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1db0c:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1db0e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1db10:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   1db12:	2001      	movs	r0, #1
   1db14:	f7ff fe6c 	bl	1d7f0 <update_cache>
   1db18:	e7c1      	b.n	1da9e <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   1db1a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1db1c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1db1e:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1db20:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1db22:	606c      	str	r4, [r5, #4]
}
   1db24:	e7f5      	b.n	1db12 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1db26:	2500      	movs	r5, #0
   1db28:	e7dc      	b.n	1dae4 <z_set_prio+0x6c>
}
   1db2a:	4640      	mov	r0, r8
   1db2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1db30:	2000613c 	.word	0x2000613c
   1db34:	2000615c 	.word	0x2000615c

0001db38 <z_impl_k_thread_suspend>:
{
   1db38:	b538      	push	{r3, r4, r5, lr}
   1db3a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1db3c:	3018      	adds	r0, #24
   1db3e:	f00a f8b4 	bl	27caa <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   1db42:	2300      	movs	r3, #0
	__asm__ volatile(
   1db44:	f04f 0240 	mov.w	r2, #64	; 0x40
   1db48:	f3ef 8511 	mrs	r5, BASEPRI
   1db4c:	f382 8812 	msr	BASEPRI_MAX, r2
   1db50:	f3bf 8f6f 	isb	sy
   1db54:	e010      	b.n	1db78 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1db56:	7b63      	ldrb	r3, [r4, #13]
   1db58:	f043 0310 	orr.w	r3, r3, #16
   1db5c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1db5e:	4b15      	ldr	r3, [pc, #84]	; (1dbb4 <z_impl_k_thread_suspend+0x7c>)
   1db60:	6898      	ldr	r0, [r3, #8]
   1db62:	42a0      	cmp	r0, r4
   1db64:	bf14      	ite	ne
   1db66:	2000      	movne	r0, #0
   1db68:	2001      	moveq	r0, #1
   1db6a:	f7ff fe41 	bl	1d7f0 <update_cache>
	__asm__ volatile(
   1db6e:	f385 8811 	msr	BASEPRI, r5
   1db72:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1db76:	2301      	movs	r3, #1
   1db78:	b963      	cbnz	r3, 1db94 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1db7a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   1db7c:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1db80:	2b00      	cmp	r3, #0
   1db82:	dae8      	bge.n	1db56 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1db84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1db88:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
   1db8a:	4621      	mov	r1, r4
   1db8c:	480a      	ldr	r0, [pc, #40]	; (1dbb8 <z_impl_k_thread_suspend+0x80>)
   1db8e:	f009 ff35 	bl	279fc <z_priq_dumb_remove>
}
   1db92:	e7e0      	b.n	1db56 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   1db94:	4b07      	ldr	r3, [pc, #28]	; (1dbb4 <z_impl_k_thread_suspend+0x7c>)
   1db96:	689b      	ldr	r3, [r3, #8]
   1db98:	42a3      	cmp	r3, r4
   1db9a:	d000      	beq.n	1db9e <z_impl_k_thread_suspend+0x66>
}
   1db9c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1db9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dba2:	f3ef 8011 	mrs	r0, BASEPRI
   1dba6:	f383 8812 	msr	BASEPRI_MAX, r3
   1dbaa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1dbae:	f009 ff10 	bl	279d2 <z_reschedule_irqlock>
   1dbb2:	e7f3      	b.n	1db9c <z_impl_k_thread_suspend+0x64>
   1dbb4:	2000613c 	.word	0x2000613c
   1dbb8:	2000615c 	.word	0x2000615c

0001dbbc <k_sched_unlock>:

void k_sched_unlock(void)
{
   1dbbc:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   1dbbe:	2300      	movs	r3, #0
   1dbc0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1dbc4:	f3ef 8411 	mrs	r4, BASEPRI
   1dbc8:	f382 8812 	msr	BASEPRI_MAX, r2
   1dbcc:	f3bf 8f6f 	isb	sy
   1dbd0:	b96b      	cbnz	r3, 1dbee <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1dbd2:	4b0c      	ldr	r3, [pc, #48]	; (1dc04 <k_sched_unlock+0x48>)
   1dbd4:	689a      	ldr	r2, [r3, #8]
   1dbd6:	7bd3      	ldrb	r3, [r2, #15]
   1dbd8:	3301      	adds	r3, #1
   1dbda:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1dbdc:	2000      	movs	r0, #0
   1dbde:	f7ff fe07 	bl	1d7f0 <update_cache>
	__asm__ volatile(
   1dbe2:	f384 8811 	msr	BASEPRI, r4
   1dbe6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1dbea:	2301      	movs	r3, #1
   1dbec:	e7f0      	b.n	1dbd0 <k_sched_unlock+0x14>
	__asm__ volatile(
   1dbee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dbf2:	f3ef 8011 	mrs	r0, BASEPRI
   1dbf6:	f383 8812 	msr	BASEPRI_MAX, r3
   1dbfa:	f3bf 8f6f 	isb	sy
   1dbfe:	f009 fee8 	bl	279d2 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1dc02:	bd10      	pop	{r4, pc}
   1dc04:	2000613c 	.word	0x2000613c

0001dc08 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   1dc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   1dc0a:	7b43      	ldrb	r3, [r0, #13]
   1dc0c:	f013 0f08 	tst.w	r3, #8
   1dc10:	d145      	bne.n	1dc9e <end_thread+0x96>
   1dc12:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   1dc14:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1dc18:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1dc1c:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   1dc1e:	f013 0f80 	tst.w	r3, #128	; 0x80
   1dc22:	d114      	bne.n	1dc4e <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
   1dc24:	68ab      	ldr	r3, [r5, #8]
   1dc26:	b15b      	cbz	r3, 1dc40 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1dc28:	4628      	mov	r0, r5
   1dc2a:	f009 fec6 	bl	279ba <pended_on_thread>
   1dc2e:	4629      	mov	r1, r5
   1dc30:	f009 fee4 	bl	279fc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1dc34:	7b6b      	ldrb	r3, [r5, #13]
   1dc36:	f023 0302 	bic.w	r3, r3, #2
   1dc3a:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1dc3c:	2300      	movs	r3, #0
   1dc3e:	60ab      	str	r3, [r5, #8]
   1dc40:	f105 0018 	add.w	r0, r5, #24
   1dc44:	f00a f831 	bl	27caa <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   1dc48:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1dc4c:	e01c      	b.n	1dc88 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1dc4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1dc52:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   1dc54:	4601      	mov	r1, r0
   1dc56:	4812      	ldr	r0, [pc, #72]	; (1dca0 <end_thread+0x98>)
   1dc58:	f009 fed0 	bl	279fc <z_priq_dumb_remove>
}
   1dc5c:	e7e2      	b.n	1dc24 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1dc5e:	4620      	mov	r0, r4
   1dc60:	f009 feab 	bl	279ba <pended_on_thread>
   1dc64:	4621      	mov	r1, r4
   1dc66:	f009 fec9 	bl	279fc <z_priq_dumb_remove>
   1dc6a:	7b63      	ldrb	r3, [r4, #13]
   1dc6c:	f023 0302 	bic.w	r3, r3, #2
   1dc70:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1dc72:	2600      	movs	r6, #0
   1dc74:	60a6      	str	r6, [r4, #8]
   1dc76:	f104 0018 	add.w	r0, r4, #24
   1dc7a:	f00a f816 	bl	27caa <z_abort_timeout>
   1dc7e:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   1dc82:	4620      	mov	r0, r4
   1dc84:	f7ff fe6a 	bl	1d95c <ready_thread>
	return list->head == list;
   1dc88:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dc8a:	42bc      	cmp	r4, r7
   1dc8c:	d001      	beq.n	1dc92 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1dc8e:	2c00      	cmp	r4, #0
   1dc90:	d1e5      	bne.n	1dc5e <end_thread+0x56>
		update_cache(1);
   1dc92:	2001      	movs	r0, #1
   1dc94:	f7ff fdac 	bl	1d7f0 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   1dc98:	4628      	mov	r0, r5
   1dc9a:	f7ff f8e5 	bl	1ce68 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1dc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dca0:	2000615c 	.word	0x2000615c

0001dca4 <z_sched_init>:
{
   1dca4:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
   1dca6:	4b05      	ldr	r3, [pc, #20]	; (1dcbc <z_sched_init+0x18>)
   1dca8:	f103 0220 	add.w	r2, r3, #32
   1dcac:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
   1dcae:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1dcb0:	2100      	movs	r1, #0
   1dcb2:	4608      	mov	r0, r1
   1dcb4:	f7ff fd2c 	bl	1d710 <k_sched_time_slice_set>
}
   1dcb8:	bd08      	pop	{r3, pc}
   1dcba:	bf00      	nop
   1dcbc:	2000613c 	.word	0x2000613c

0001dcc0 <z_impl_k_yield>:
{
   1dcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dcc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dcc6:	f3ef 8611 	mrs	r6, BASEPRI
   1dcca:	f383 8812 	msr	BASEPRI_MAX, r3
   1dcce:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
   1dcd2:	4c1c      	ldr	r4, [pc, #112]	; (1dd44 <z_impl_k_yield+0x84>)
   1dcd4:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1dcd6:	7b4b      	ldrb	r3, [r1, #13]
   1dcd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1dcdc:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   1dcde:	f104 0720 	add.w	r7, r4, #32
   1dce2:	4638      	mov	r0, r7
   1dce4:	f009 fe8a 	bl	279fc <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
   1dce8:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1dcea:	7b6b      	ldrb	r3, [r5, #13]
   1dcec:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1dcf0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1dcf2:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dcf4:	42bc      	cmp	r4, r7
   1dcf6:	d023      	beq.n	1dd40 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dcf8:	b16c      	cbz	r4, 1dd16 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1dcfa:	4621      	mov	r1, r4
   1dcfc:	4628      	mov	r0, r5
   1dcfe:	f009 fe5e 	bl	279be <z_sched_prio_cmp>
   1dd02:	2800      	cmp	r0, #0
   1dd04:	dc16      	bgt.n	1dd34 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1dd06:	b134      	cbz	r4, 1dd16 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   1dd08:	4b0e      	ldr	r3, [pc, #56]	; (1dd44 <z_impl_k_yield+0x84>)
   1dd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dd0c:	429c      	cmp	r4, r3
   1dd0e:	d002      	beq.n	1dd16 <z_impl_k_yield+0x56>
   1dd10:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dd12:	2c00      	cmp	r4, #0
   1dd14:	d1f0      	bne.n	1dcf8 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   1dd16:	4b0b      	ldr	r3, [pc, #44]	; (1dd44 <z_impl_k_yield+0x84>)
   1dd18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1dd1a:	f103 0120 	add.w	r1, r3, #32
   1dd1e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1dd20:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1dd22:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1dd24:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   1dd26:	2001      	movs	r0, #1
   1dd28:	f7ff fd62 	bl	1d7f0 <update_cache>
   1dd2c:	4630      	mov	r0, r6
   1dd2e:	f7f6 f8b5 	bl	13e9c <arch_swap>
}
   1dd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   1dd34:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1dd36:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1dd38:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1dd3a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1dd3c:	6065      	str	r5, [r4, #4]
}
   1dd3e:	e7f2      	b.n	1dd26 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dd40:	2400      	movs	r4, #0
   1dd42:	e7d9      	b.n	1dcf8 <z_impl_k_yield+0x38>
   1dd44:	2000613c 	.word	0x2000613c

0001dd48 <z_tick_sleep>:
{
   1dd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd4c:	4604      	mov	r4, r0
   1dd4e:	460d      	mov	r5, r1
	if (ticks == 0) {
   1dd50:	ea54 0105 	orrs.w	r1, r4, r5
   1dd54:	d037      	beq.n	1ddc6 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1dd56:	f06f 0101 	mvn.w	r1, #1
   1dd5a:	1a0a      	subs	r2, r1, r0
   1dd5c:	f04f 31ff 	mov.w	r1, #4294967295
   1dd60:	eb61 0305 	sbc.w	r3, r1, r5
   1dd64:	2a01      	cmp	r2, #1
   1dd66:	f173 0300 	sbcs.w	r3, r3, #0
   1dd6a:	db30      	blt.n	1ddce <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1dd6c:	f06f 0601 	mvn.w	r6, #1
   1dd70:	1a36      	subs	r6, r6, r0
   1dd72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dd76:	f3ef 8811 	mrs	r8, BASEPRI
   1dd7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd7e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1dd82:	4f16      	ldr	r7, [pc, #88]	; (1dddc <z_tick_sleep+0x94>)
   1dd84:	68b8      	ldr	r0, [r7, #8]
   1dd86:	4b16      	ldr	r3, [pc, #88]	; (1dde0 <z_tick_sleep+0x98>)
   1dd88:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1dd8a:	f7ff fe45 	bl	1da18 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1dd8e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1dd90:	4622      	mov	r2, r4
   1dd92:	462b      	mov	r3, r5
   1dd94:	4913      	ldr	r1, [pc, #76]	; (1dde4 <z_tick_sleep+0x9c>)
   1dd96:	3018      	adds	r0, #24
   1dd98:	f000 f904 	bl	1dfa4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1dd9c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1dd9e:	7b53      	ldrb	r3, [r2, #13]
   1dda0:	f043 0310 	orr.w	r3, r3, #16
   1dda4:	7353      	strb	r3, [r2, #13]
   1dda6:	4640      	mov	r0, r8
   1dda8:	f7f6 f878 	bl	13e9c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1ddac:	2500      	movs	r5, #0
   1ddae:	f009 ffdb 	bl	27d68 <sys_clock_tick_get_32>
   1ddb2:	1a34      	subs	r4, r6, r0
   1ddb4:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   1ddb8:	2c01      	cmp	r4, #1
   1ddba:	f175 0300 	sbcs.w	r3, r5, #0
   1ddbe:	da0a      	bge.n	1ddd6 <z_tick_sleep+0x8e>
	return 0;
   1ddc0:	2000      	movs	r0, #0
}
   1ddc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1ddc6:	f7ff ff7b 	bl	1dcc0 <z_impl_k_yield>
		return 0;
   1ddca:	2000      	movs	r0, #0
   1ddcc:	e7f9      	b.n	1ddc2 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1ddce:	f009 ffcb 	bl	27d68 <sys_clock_tick_get_32>
   1ddd2:	1906      	adds	r6, r0, r4
   1ddd4:	e7cd      	b.n	1dd72 <z_tick_sleep+0x2a>
		return ticks;
   1ddd6:	4620      	mov	r0, r4
   1ddd8:	e7f3      	b.n	1ddc2 <z_tick_sleep+0x7a>
   1ddda:	bf00      	nop
   1dddc:	2000613c 	.word	0x2000613c
   1dde0:	20006170 	.word	0x20006170
   1dde4:	00027a99 	.word	0x00027a99

0001dde8 <z_impl_k_sleep>:
{
   1dde8:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ddea:	f1b1 3fff 	cmp.w	r1, #4294967295
   1ddee:	bf08      	it	eq
   1ddf0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1ddf4:	d01a      	beq.n	1de2c <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   1ddf6:	f7ff ffa7 	bl	1dd48 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1ddfa:	4604      	mov	r4, r0
   1ddfc:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   1ddfe:	0169      	lsls	r1, r5, #5
   1de00:	0143      	lsls	r3, r0, #5
   1de02:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   1de06:	1a18      	subs	r0, r3, r0
   1de08:	eb62 0305 	sbc.w	r3, r2, r5
   1de0c:	009a      	lsls	r2, r3, #2
   1de0e:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   1de12:	0081      	lsls	r1, r0, #2
   1de14:	4613      	mov	r3, r2
   1de16:	1908      	adds	r0, r1, r4
   1de18:	eb45 0303 	adc.w	r3, r5, r3
   1de1c:	00da      	lsls	r2, r3, #3
   1de1e:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   1de22:	00c1      	lsls	r1, r0, #3
   1de24:	0bc8      	lsrs	r0, r1, #15
   1de26:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   1de2a:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   1de2c:	4b03      	ldr	r3, [pc, #12]	; (1de3c <z_impl_k_sleep+0x54>)
   1de2e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1de30:	f7ff fe82 	bl	1db38 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1de34:	f04f 30ff 	mov.w	r0, #4294967295
   1de38:	e7f7      	b.n	1de2a <z_impl_k_sleep+0x42>
   1de3a:	bf00      	nop
   1de3c:	2000613c 	.word	0x2000613c

0001de40 <z_impl_z_current_get>:
}
   1de40:	4b01      	ldr	r3, [pc, #4]	; (1de48 <z_impl_z_current_get+0x8>)
   1de42:	6898      	ldr	r0, [r3, #8]
   1de44:	4770      	bx	lr
   1de46:	bf00      	nop
   1de48:	2000613c 	.word	0x2000613c

0001de4c <z_impl_k_is_preempt_thread>:
   1de4c:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   1de50:	b933      	cbnz	r3, 1de60 <z_impl_k_is_preempt_thread+0x14>
   1de52:	4b05      	ldr	r3, [pc, #20]	; (1de68 <z_impl_k_is_preempt_thread+0x1c>)
   1de54:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1de56:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   1de58:	2b7f      	cmp	r3, #127	; 0x7f
   1de5a:	d803      	bhi.n	1de64 <z_impl_k_is_preempt_thread+0x18>
   1de5c:	2001      	movs	r0, #1
   1de5e:	4770      	bx	lr
   1de60:	2000      	movs	r0, #0
   1de62:	4770      	bx	lr
   1de64:	2000      	movs	r0, #0
}
   1de66:	4770      	bx	lr
   1de68:	2000613c 	.word	0x2000613c

0001de6c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1de6c:	b538      	push	{r3, r4, r5, lr}
   1de6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de72:	f3ef 8511 	mrs	r5, BASEPRI
   1de76:	f383 8812 	msr	BASEPRI_MAX, r3
   1de7a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1de7e:	7b43      	ldrb	r3, [r0, #13]
   1de80:	f013 0f08 	tst.w	r3, #8
   1de84:	d004      	beq.n	1de90 <z_thread_abort+0x24>
	__asm__ volatile(
   1de86:	f385 8811 	msr	BASEPRI, r5
   1de8a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1de8e:	bd38      	pop	{r3, r4, r5, pc}
   1de90:	4604      	mov	r4, r0
	end_thread(thread);
   1de92:	f7ff feb9 	bl	1dc08 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1de96:	4b08      	ldr	r3, [pc, #32]	; (1deb8 <z_thread_abort+0x4c>)
   1de98:	689b      	ldr	r3, [r3, #8]
   1de9a:	42a3      	cmp	r3, r4
   1de9c:	d004      	beq.n	1dea8 <z_thread_abort+0x3c>
   1de9e:	f385 8811 	msr	BASEPRI, r5
   1dea2:	f3bf 8f6f 	isb	sy
   1dea6:	e7f2      	b.n	1de8e <z_thread_abort+0x22>
   1dea8:	f3ef 8305 	mrs	r3, IPSR
   1deac:	2b00      	cmp	r3, #0
   1deae:	d1f6      	bne.n	1de9e <z_thread_abort+0x32>
   1deb0:	4628      	mov	r0, r5
   1deb2:	f7f5 fff3 	bl	13e9c <arch_swap>
	return ret;
   1deb6:	e7f2      	b.n	1de9e <z_thread_abort+0x32>
   1deb8:	2000613c 	.word	0x2000613c

0001debc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1debc:	b5d0      	push	{r4, r6, r7, lr}
   1debe:	b082      	sub	sp, #8
   1dec0:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1dec2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   1dec6:	e9cd 6700 	strd	r6, r7, [sp]
   1deca:	f7ff fdc1 	bl	1da50 <z_pend_curr>

	if (data != NULL) {
   1dece:	b11c      	cbz	r4, 1ded8 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   1ded0:	4b02      	ldr	r3, [pc, #8]	; (1dedc <z_sched_wait+0x20>)
   1ded2:	689b      	ldr	r3, [r3, #8]
   1ded4:	695b      	ldr	r3, [r3, #20]
   1ded6:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1ded8:	b002      	add	sp, #8
   1deda:	bdd0      	pop	{r4, r6, r7, pc}
   1dedc:	2000613c 	.word	0x2000613c

0001dee0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1dee0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   1dee2:	4806      	ldr	r0, [pc, #24]	; (1defc <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1dee4:	4a06      	ldr	r2, [pc, #24]	; (1df00 <z_data_copy+0x20>)
   1dee6:	1a12      	subs	r2, r2, r0
   1dee8:	4906      	ldr	r1, [pc, #24]	; (1df04 <z_data_copy+0x24>)
   1deea:	f004 fda0 	bl	22a2e <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1deee:	4a06      	ldr	r2, [pc, #24]	; (1df08 <z_data_copy+0x28>)
   1def0:	4906      	ldr	r1, [pc, #24]	; (1df0c <z_data_copy+0x2c>)
   1def2:	4807      	ldr	r0, [pc, #28]	; (1df10 <z_data_copy+0x30>)
   1def4:	f004 fd9b 	bl	22a2e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1def8:	bd08      	pop	{r3, pc}
   1defa:	bf00      	nop
   1defc:	20000000 	.word	0x20000000
   1df00:	20000ab4 	.word	0x20000ab4
   1df04:	00029114 	.word	0x00029114
   1df08:	00000000 	.word	0x00000000
   1df0c:	00029114 	.word	0x00029114
   1df10:	20000000 	.word	0x20000000

0001df14 <first>:
	return list->head == list;
   1df14:	4b03      	ldr	r3, [pc, #12]	; (1df24 <first+0x10>)
   1df16:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1df18:	4298      	cmp	r0, r3
   1df1a:	d000      	beq.n	1df1e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1df1c:	4770      	bx	lr
   1df1e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   1df20:	e7fc      	b.n	1df1c <first+0x8>
   1df22:	bf00      	nop
   1df24:	200006f0 	.word	0x200006f0

0001df28 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1df28:	b130      	cbz	r0, 1df38 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1df2a:	4a04      	ldr	r2, [pc, #16]	; (1df3c <next+0x14>)
   1df2c:	6852      	ldr	r2, [r2, #4]
   1df2e:	4290      	cmp	r0, r2
   1df30:	d001      	beq.n	1df36 <next+0xe>
   1df32:	6800      	ldr	r0, [r0, #0]
   1df34:	4770      	bx	lr
   1df36:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1df38:	4770      	bx	lr
   1df3a:	bf00      	nop
   1df3c:	200006f0 	.word	0x200006f0

0001df40 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   1df40:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1df42:	4b04      	ldr	r3, [pc, #16]	; (1df54 <elapsed+0x14>)
   1df44:	681b      	ldr	r3, [r3, #0]
   1df46:	b10b      	cbz	r3, 1df4c <elapsed+0xc>
   1df48:	2000      	movs	r0, #0
}
   1df4a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1df4c:	f7fc f9fe 	bl	1a34c <sys_clock_elapsed>
   1df50:	e7fb      	b.n	1df4a <elapsed+0xa>
   1df52:	bf00      	nop
   1df54:	2000617c 	.word	0x2000617c

0001df58 <next_timeout>:

static int32_t next_timeout(void)
{
   1df58:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1df5a:	f7ff ffdb 	bl	1df14 <first>
   1df5e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   1df60:	f7ff ffee 	bl	1df40 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   1df64:	b18c      	cbz	r4, 1df8a <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1df66:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1df6a:	1a12      	subs	r2, r2, r0
   1df6c:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1df70:	2a01      	cmp	r2, #1
   1df72:	f173 0100 	sbcs.w	r1, r3, #0
   1df76:	db11      	blt.n	1df9c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1df78:	4610      	mov	r0, r2
   1df7a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1df7e:	f173 0300 	sbcs.w	r3, r3, #0
   1df82:	db04      	blt.n	1df8e <next_timeout+0x36>
   1df84:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1df88:	e001      	b.n	1df8e <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   1df8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1df8e:	4b04      	ldr	r3, [pc, #16]	; (1dfa0 <next_timeout+0x48>)
   1df90:	691b      	ldr	r3, [r3, #16]
   1df92:	b113      	cbz	r3, 1df9a <next_timeout+0x42>
   1df94:	4283      	cmp	r3, r0
   1df96:	da00      	bge.n	1df9a <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   1df98:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   1df9a:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1df9c:	2000      	movs	r0, #0
   1df9e:	e7f6      	b.n	1df8e <next_timeout+0x36>
   1dfa0:	2000613c 	.word	0x2000613c

0001dfa4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1dfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfa8:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
   1dfae:	bf08      	it	eq
   1dfb0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1dfb4:	f000 8096 	beq.w	1e0e4 <z_add_timeout+0x140>
   1dfb8:	4682      	mov	sl, r0
   1dfba:	4614      	mov	r4, r2
   1dfbc:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1dfbe:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   1dfc0:	2300      	movs	r3, #0
	__asm__ volatile(
   1dfc2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1dfc6:	f3ef 8b11 	mrs	fp, BASEPRI
   1dfca:	f382 8812 	msr	BASEPRI_MAX, r2
   1dfce:	f3bf 8f6f 	isb	sy
   1dfd2:	e02e      	b.n	1e032 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   1dfd4:	2201      	movs	r2, #1
   1dfd6:	2300      	movs	r3, #0
   1dfd8:	e04b      	b.n	1e072 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1dfda:	f7ff ffb1 	bl	1df40 <elapsed>
   1dfde:	1822      	adds	r2, r4, r0
   1dfe0:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   1dfe4:	3201      	adds	r2, #1
   1dfe6:	f143 0300 	adc.w	r3, r3, #0
   1dfea:	f8ca 2010 	str.w	r2, [sl, #16]
   1dfee:	f8ca 3014 	str.w	r3, [sl, #20]
   1dff2:	e042      	b.n	1e07a <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1dff4:	9b00      	ldr	r3, [sp, #0]
   1dff6:	1ac2      	subs	r2, r0, r3
   1dff8:	9b01      	ldr	r3, [sp, #4]
   1dffa:	eb61 0303 	sbc.w	r3, r1, r3
   1dffe:	f8cc 2010 	str.w	r2, [ip, #16]
   1e002:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   1e006:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   1e00a:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   1e00e:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   1e012:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1e016:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1e01a:	f1bc 0f00 	cmp.w	ip, #0
   1e01e:	d049      	beq.n	1e0b4 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1e020:	f7ff ff78 	bl	1df14 <first>
   1e024:	4582      	cmp	sl, r0
   1e026:	d050      	beq.n	1e0ca <z_add_timeout+0x126>
	__asm__ volatile(
   1e028:	f38b 8811 	msr	BASEPRI, fp
   1e02c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1e030:	2301      	movs	r3, #1
   1e032:	2b00      	cmp	r3, #0
   1e034:	d156      	bne.n	1e0e4 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1e036:	f06f 0301 	mvn.w	r3, #1
   1e03a:	ebb3 0804 	subs.w	r8, r3, r4
   1e03e:	f04f 30ff 	mov.w	r0, #4294967295
   1e042:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1e046:	f1b8 0f00 	cmp.w	r8, #0
   1e04a:	f179 0300 	sbcs.w	r3, r9, #0
   1e04e:	dbc4      	blt.n	1dfda <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1e050:	4a26      	ldr	r2, [pc, #152]	; (1e0ec <z_add_timeout+0x148>)
   1e052:	6813      	ldr	r3, [r2, #0]
   1e054:	6852      	ldr	r2, [r2, #4]
   1e056:	18e3      	adds	r3, r4, r3
   1e058:	eb45 0202 	adc.w	r2, r5, r2
   1e05c:	f06f 0101 	mvn.w	r1, #1
   1e060:	1ace      	subs	r6, r1, r3
   1e062:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   1e066:	4632      	mov	r2, r6
   1e068:	463b      	mov	r3, r7
   1e06a:	2e01      	cmp	r6, #1
   1e06c:	f177 0100 	sbcs.w	r1, r7, #0
   1e070:	dbb0      	blt.n	1dfd4 <z_add_timeout+0x30>
   1e072:	f8ca 2010 	str.w	r2, [sl, #16]
   1e076:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1e07a:	f7ff ff4b 	bl	1df14 <first>
   1e07e:	4684      	mov	ip, r0
   1e080:	f1bc 0f00 	cmp.w	ip, #0
   1e084:	d0c9      	beq.n	1e01a <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   1e086:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   1e08a:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   1e08e:	e9cd 2300 	strd	r2, r3, [sp]
   1e092:	4282      	cmp	r2, r0
   1e094:	418b      	sbcs	r3, r1
   1e096:	dbad      	blt.n	1dff4 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   1e098:	9b00      	ldr	r3, [sp, #0]
   1e09a:	1a1a      	subs	r2, r3, r0
   1e09c:	9b01      	ldr	r3, [sp, #4]
   1e09e:	eb63 0301 	sbc.w	r3, r3, r1
   1e0a2:	f8ca 2010 	str.w	r2, [sl, #16]
   1e0a6:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1e0aa:	4660      	mov	r0, ip
   1e0ac:	f7ff ff3c 	bl	1df28 <next>
   1e0b0:	4684      	mov	ip, r0
   1e0b2:	e7e5      	b.n	1e080 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   1e0b4:	4b0e      	ldr	r3, [pc, #56]	; (1e0f0 <z_add_timeout+0x14c>)
   1e0b6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1e0b8:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   1e0bc:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   1e0c0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1e0c4:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1e0c8:	e7aa      	b.n	1e020 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1e0ca:	f7ff ff45 	bl	1df58 <next_timeout>

			if (next_time == 0 ||
   1e0ce:	4603      	mov	r3, r0
   1e0d0:	b118      	cbz	r0, 1e0da <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   1e0d2:	4a08      	ldr	r2, [pc, #32]	; (1e0f4 <z_add_timeout+0x150>)
   1e0d4:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1e0d6:	4282      	cmp	r2, r0
   1e0d8:	d0a6      	beq.n	1e028 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   1e0da:	2100      	movs	r1, #0
   1e0dc:	4618      	mov	r0, r3
   1e0de:	f7fc f901 	bl	1a2e4 <sys_clock_set_timeout>
   1e0e2:	e7a1      	b.n	1e028 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1e0e4:	b003      	add	sp, #12
   1e0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0ea:	bf00      	nop
   1e0ec:	200029c0 	.word	0x200029c0
   1e0f0:	200006f0 	.word	0x200006f0
   1e0f4:	2000613c 	.word	0x2000613c

0001e0f8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1e0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e0fa:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1e0fc:	f7ff fbe2 	bl	1d8c4 <z_time_slice>
	__asm__ volatile(
   1e100:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e104:	f3ef 8511 	mrs	r5, BASEPRI
   1e108:	f383 8812 	msr	BASEPRI_MAX, r3
   1e10c:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1e110:	4b28      	ldr	r3, [pc, #160]	; (1e1b4 <sys_clock_announce+0xbc>)
   1e112:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1e114:	f7ff fefe 	bl	1df14 <first>
   1e118:	4604      	mov	r4, r0
   1e11a:	b350      	cbz	r0, 1e172 <sys_clock_announce+0x7a>
   1e11c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1e120:	4b24      	ldr	r3, [pc, #144]	; (1e1b4 <sys_clock_announce+0xbc>)
   1e122:	681b      	ldr	r3, [r3, #0]
   1e124:	17d9      	asrs	r1, r3, #31
   1e126:	42b3      	cmp	r3, r6
   1e128:	eb71 0207 	sbcs.w	r2, r1, r7
   1e12c:	db21      	blt.n	1e172 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1e12e:	4a22      	ldr	r2, [pc, #136]	; (1e1b8 <sys_clock_announce+0xc0>)
   1e130:	e9d2 0100 	ldrd	r0, r1, [r2]
   1e134:	1980      	adds	r0, r0, r6
   1e136:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   1e13a:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   1e13e:	1b9b      	subs	r3, r3, r6
   1e140:	4a1c      	ldr	r2, [pc, #112]	; (1e1b4 <sys_clock_announce+0xbc>)
   1e142:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   1e144:	2200      	movs	r2, #0
   1e146:	2300      	movs	r3, #0
   1e148:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1e14c:	4620      	mov	r0, r4
   1e14e:	f009 fd95 	bl	27c7c <remove_timeout>
	__asm__ volatile(
   1e152:	f385 8811 	msr	BASEPRI, r5
   1e156:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   1e15a:	68a3      	ldr	r3, [r4, #8]
   1e15c:	4620      	mov	r0, r4
   1e15e:	4798      	blx	r3
	__asm__ volatile(
   1e160:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e164:	f3ef 8511 	mrs	r5, BASEPRI
   1e168:	f383 8812 	msr	BASEPRI_MAX, r3
   1e16c:	f3bf 8f6f 	isb	sy
   1e170:	e7d0      	b.n	1e114 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   1e172:	b144      	cbz	r4, 1e186 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   1e174:	4b0f      	ldr	r3, [pc, #60]	; (1e1b4 <sys_clock_announce+0xbc>)
   1e176:	6819      	ldr	r1, [r3, #0]
   1e178:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1e17c:	1a52      	subs	r2, r2, r1
   1e17e:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   1e182:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   1e186:	480c      	ldr	r0, [pc, #48]	; (1e1b8 <sys_clock_announce+0xc0>)
   1e188:	490a      	ldr	r1, [pc, #40]	; (1e1b4 <sys_clock_announce+0xbc>)
   1e18a:	680c      	ldr	r4, [r1, #0]
   1e18c:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e190:	1912      	adds	r2, r2, r4
   1e192:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   1e196:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   1e19a:	2400      	movs	r4, #0
   1e19c:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1e19e:	f7ff fedb 	bl	1df58 <next_timeout>
   1e1a2:	4621      	mov	r1, r4
   1e1a4:	f7fc f89e 	bl	1a2e4 <sys_clock_set_timeout>
	__asm__ volatile(
   1e1a8:	f385 8811 	msr	BASEPRI, r5
   1e1ac:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1e1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e1b2:	bf00      	nop
   1e1b4:	2000617c 	.word	0x2000617c
   1e1b8:	200029c0 	.word	0x200029c0

0001e1bc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1e1bc:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   1e1be:	2100      	movs	r1, #0
	__asm__ volatile(
   1e1c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1c4:	f3ef 8411 	mrs	r4, BASEPRI
   1e1c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1e1cc:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   1e1d0:	2200      	movs	r2, #0
   1e1d2:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   1e1d4:	b969      	cbnz	r1, 1e1f2 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   1e1d6:	f7fc f8b9 	bl	1a34c <sys_clock_elapsed>
   1e1da:	4b07      	ldr	r3, [pc, #28]	; (1e1f8 <sys_clock_tick_get+0x3c>)
   1e1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e1e0:	1812      	adds	r2, r2, r0
   1e1e2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1e1e6:	f384 8811 	msr	BASEPRI, r4
   1e1ea:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1e1ee:	2101      	movs	r1, #1
   1e1f0:	e7f0      	b.n	1e1d4 <sys_clock_tick_get+0x18>
	}
	return t;
}
   1e1f2:	4610      	mov	r0, r2
   1e1f4:	4619      	mov	r1, r3
   1e1f6:	bd10      	pop	{r4, pc}
   1e1f8:	200029c0 	.word	0x200029c0

0001e1fc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1e1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e200:	b08d      	sub	sp, #52	; 0x34
   1e202:	4605      	mov	r5, r0
   1e204:	9107      	str	r1, [sp, #28]
   1e206:	9202      	str	r2, [sp, #8]
   1e208:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1e20a:	4ba4      	ldr	r3, [pc, #656]	; (1e49c <z_impl_k_poll+0x2a0>)
   1e20c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1e210:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   1e214:	2301      	movs	r3, #1
   1e216:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   1e21a:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1e21e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1e222:	4613      	mov	r3, r2
   1e224:	430b      	orrs	r3, r1
   1e226:	bf0c      	ite	eq
   1e228:	2301      	moveq	r3, #1
   1e22a:	2300      	movne	r3, #0
   1e22c:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   1e22e:	2600      	movs	r6, #0
	int events_registered = 0;
   1e230:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   1e232:	e02e      	b.n	1e292 <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   1e234:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   1e236:	689b      	ldr	r3, [r3, #8]
   1e238:	b1c3      	cbz	r3, 1e26c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1e23a:	2302      	movs	r3, #2
   1e23c:	9305      	str	r3, [sp, #20]
			return true;
   1e23e:	2301      	movs	r3, #1
   1e240:	e014      	b.n	1e26c <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   1e242:	6923      	ldr	r3, [r4, #16]
	return list->head;
   1e244:	681b      	ldr	r3, [r3, #0]
   1e246:	b18b      	cbz	r3, 1e26c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1e248:	2304      	movs	r3, #4
   1e24a:	9305      	str	r3, [sp, #20]
			return true;
   1e24c:	2301      	movs	r3, #1
   1e24e:	e00d      	b.n	1e26c <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   1e250:	6923      	ldr	r3, [r4, #16]
   1e252:	689b      	ldr	r3, [r3, #8]
   1e254:	b153      	cbz	r3, 1e26c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   1e256:	2301      	movs	r3, #1
   1e258:	9305      	str	r3, [sp, #20]
   1e25a:	e007      	b.n	1e26c <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   1e25c:	6923      	ldr	r3, [r4, #16]
   1e25e:	6a1b      	ldr	r3, [r3, #32]
   1e260:	b123      	cbz	r3, 1e26c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1e262:	2310      	movs	r3, #16
   1e264:	9305      	str	r3, [sp, #20]
			return true;
   1e266:	2301      	movs	r3, #1
   1e268:	e000      	b.n	1e26c <z_impl_k_poll+0x70>
	switch (event->type) {
   1e26a:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   1e26c:	2b00      	cmp	r3, #0
   1e26e:	d03d      	beq.n	1e2ec <z_impl_k_poll+0xf0>
	event->poller = NULL;
   1e270:	2100      	movs	r1, #0
   1e272:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1e274:	68e3      	ldr	r3, [r4, #12]
   1e276:	f3c3 3245 	ubfx	r2, r3, #13, #6
   1e27a:	9805      	ldr	r0, [sp, #20]
   1e27c:	4302      	orrs	r2, r0
   1e27e:	f362 3352 	bfi	r3, r2, #13, #6
   1e282:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   1e284:	7039      	strb	r1, [r7, #0]
   1e286:	9b08      	ldr	r3, [sp, #32]
   1e288:	f383 8811 	msr	BASEPRI, r3
   1e28c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1e290:	3601      	adds	r6, #1
   1e292:	9b07      	ldr	r3, [sp, #28]
   1e294:	42b3      	cmp	r3, r6
   1e296:	f340 81bf 	ble.w	1e618 <z_impl_k_poll+0x41c>
	__asm__ volatile(
   1e29a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e29e:	f3ef 8211 	mrs	r2, BASEPRI
   1e2a2:	f383 8812 	msr	BASEPRI_MAX, r3
   1e2a6:	f3bf 8f6f 	isb	sy
   1e2aa:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   1e2ac:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   1e2b0:	00a3      	lsls	r3, r4, #2
   1e2b2:	9309      	str	r3, [sp, #36]	; 0x24
   1e2b4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   1e2b8:	7b63      	ldrb	r3, [r4, #13]
   1e2ba:	f003 031f 	and.w	r3, r3, #31
   1e2be:	3b01      	subs	r3, #1
   1e2c0:	2b07      	cmp	r3, #7
   1e2c2:	d8d2      	bhi.n	1e26a <z_impl_k_poll+0x6e>
   1e2c4:	a201      	add	r2, pc, #4	; (adr r2, 1e2cc <z_impl_k_poll+0xd0>)
   1e2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e2ca:	bf00      	nop
   1e2cc:	0001e251 	.word	0x0001e251
   1e2d0:	0001e235 	.word	0x0001e235
   1e2d4:	0001e26b 	.word	0x0001e26b
   1e2d8:	0001e243 	.word	0x0001e243
   1e2dc:	0001e26b 	.word	0x0001e26b
   1e2e0:	0001e26b 	.word	0x0001e26b
   1e2e4:	0001e26b 	.word	0x0001e26b
   1e2e8:	0001e25d 	.word	0x0001e25d
		} else if (!just_check && poller->is_polling) {
   1e2ec:	9b06      	ldr	r3, [sp, #24]
   1e2ee:	2b00      	cmp	r3, #0
   1e2f0:	d1c9      	bne.n	1e286 <z_impl_k_poll+0x8a>
   1e2f2:	783b      	ldrb	r3, [r7, #0]
   1e2f4:	2b00      	cmp	r3, #0
   1e2f6:	d0c6      	beq.n	1e286 <z_impl_k_poll+0x8a>
	switch (event->type) {
   1e2f8:	7b63      	ldrb	r3, [r4, #13]
   1e2fa:	f003 031f 	and.w	r3, r3, #31
   1e2fe:	3b01      	subs	r3, #1
   1e300:	2b07      	cmp	r3, #7
   1e302:	d846      	bhi.n	1e392 <z_impl_k_poll+0x196>
   1e304:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e308:	000800cc 	.word	0x000800cc
   1e30c:	006a0045 	.word	0x006a0045
   1e310:	00450045 	.word	0x00450045
   1e314:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   1e318:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1e31c:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1e320:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e324:	4598      	cmp	r8, r3
   1e326:	d02b      	beq.n	1e380 <z_impl_k_poll+0x184>
   1e328:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1e32c:	b343      	cbz	r3, 1e380 <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e32e:	6898      	ldr	r0, [r3, #8]
   1e330:	f009 fd54 	bl	27ddc <poller_thread>
   1e334:	900b      	str	r0, [sp, #44]	; 0x2c
   1e336:	4638      	mov	r0, r7
   1e338:	f009 fd50 	bl	27ddc <poller_thread>
   1e33c:	4601      	mov	r1, r0
   1e33e:	900a      	str	r0, [sp, #40]	; 0x28
   1e340:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1e342:	f009 fb3c 	bl	279be <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1e346:	2800      	cmp	r0, #0
   1e348:	dc1a      	bgt.n	1e380 <z_impl_k_poll+0x184>
	return list->head == list;
   1e34a:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e34e:	45d0      	cmp	r8, sl
   1e350:	d02f      	beq.n	1e3b2 <z_impl_k_poll+0x1b6>
   1e352:	4653      	mov	r3, sl
   1e354:	46a2      	mov	sl, r4
   1e356:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e358:	b38c      	cbz	r4, 1e3be <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   1e35a:	68a0      	ldr	r0, [r4, #8]
   1e35c:	f009 fd3e 	bl	27ddc <poller_thread>
   1e360:	4601      	mov	r1, r0
   1e362:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e364:	f009 fb2b 	bl	279be <z_sched_prio_cmp>
   1e368:	2800      	cmp	r0, #0
   1e36a:	dc16      	bgt.n	1e39a <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e36c:	b34c      	cbz	r4, 1e3c2 <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   1e36e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e372:	429c      	cmp	r4, r3
   1e374:	d030      	beq.n	1e3d8 <z_impl_k_poll+0x1dc>
   1e376:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e378:	2c00      	cmp	r4, #0
   1e37a:	d1ed      	bne.n	1e358 <z_impl_k_poll+0x15c>
   1e37c:	4654      	mov	r4, sl
   1e37e:	e021      	b.n	1e3c4 <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   1e380:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1e384:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e386:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1e38a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e38c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e38e:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   1e392:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   1e394:	f10b 0b01 	add.w	fp, fp, #1
   1e398:	e775      	b.n	1e286 <z_impl_k_poll+0x8a>
   1e39a:	4623      	mov	r3, r4
   1e39c:	4654      	mov	r4, sl
   1e39e:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1e3a0:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1e3a2:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1e3a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e3a6:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1e3aa:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e3ac:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1e3b0:	e7ef      	b.n	1e392 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e3b2:	f04f 0a00 	mov.w	sl, #0
   1e3b6:	4653      	mov	r3, sl
   1e3b8:	46a2      	mov	sl, r4
   1e3ba:	461c      	mov	r4, r3
   1e3bc:	e7cc      	b.n	1e358 <z_impl_k_poll+0x15c>
   1e3be:	4654      	mov	r4, sl
   1e3c0:	e000      	b.n	1e3c4 <z_impl_k_poll+0x1c8>
   1e3c2:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1e3c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1e3c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e3ca:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1e3ce:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e3d0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e3d2:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1e3d6:	e7dc      	b.n	1e392 <z_impl_k_poll+0x196>
   1e3d8:	4654      	mov	r4, sl
   1e3da:	e7f3      	b.n	1e3c4 <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   1e3dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1e3e0:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1e3e4:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e3e8:	4598      	cmp	r8, r3
   1e3ea:	d02b      	beq.n	1e444 <z_impl_k_poll+0x248>
   1e3ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1e3f0:	b343      	cbz	r3, 1e444 <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e3f2:	6898      	ldr	r0, [r3, #8]
   1e3f4:	f009 fcf2 	bl	27ddc <poller_thread>
   1e3f8:	900b      	str	r0, [sp, #44]	; 0x2c
   1e3fa:	4638      	mov	r0, r7
   1e3fc:	f009 fcee 	bl	27ddc <poller_thread>
   1e400:	4601      	mov	r1, r0
   1e402:	900a      	str	r0, [sp, #40]	; 0x28
   1e404:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1e406:	f009 fada 	bl	279be <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1e40a:	2800      	cmp	r0, #0
   1e40c:	dc1a      	bgt.n	1e444 <z_impl_k_poll+0x248>
	return list->head == list;
   1e40e:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e412:	45d0      	cmp	r8, sl
   1e414:	d02c      	beq.n	1e470 <z_impl_k_poll+0x274>
   1e416:	4653      	mov	r3, sl
   1e418:	46a2      	mov	sl, r4
   1e41a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e41c:	b374      	cbz	r4, 1e47c <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   1e41e:	68a0      	ldr	r0, [r4, #8]
   1e420:	f009 fcdc 	bl	27ddc <poller_thread>
   1e424:	4601      	mov	r1, r0
   1e426:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e428:	f009 fac9 	bl	279be <z_sched_prio_cmp>
   1e42c:	2800      	cmp	r0, #0
   1e42e:	dc13      	bgt.n	1e458 <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e430:	b334      	cbz	r4, 1e480 <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   1e432:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e436:	429c      	cmp	r4, r3
   1e438:	d02d      	beq.n	1e496 <z_impl_k_poll+0x29a>
   1e43a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e43c:	2c00      	cmp	r4, #0
   1e43e:	d1ed      	bne.n	1e41c <z_impl_k_poll+0x220>
   1e440:	4654      	mov	r4, sl
   1e442:	e01e      	b.n	1e482 <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   1e444:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1e448:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e44a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1e44e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e450:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e452:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1e456:	e79c      	b.n	1e392 <z_impl_k_poll+0x196>
   1e458:	4623      	mov	r3, r4
   1e45a:	4654      	mov	r4, sl
   1e45c:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1e45e:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1e460:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1e462:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e464:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1e468:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e46a:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1e46e:	e790      	b.n	1e392 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e470:	f04f 0a00 	mov.w	sl, #0
   1e474:	4653      	mov	r3, sl
   1e476:	46a2      	mov	sl, r4
   1e478:	461c      	mov	r4, r3
   1e47a:	e7cf      	b.n	1e41c <z_impl_k_poll+0x220>
   1e47c:	4654      	mov	r4, sl
   1e47e:	e000      	b.n	1e482 <z_impl_k_poll+0x286>
   1e480:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1e482:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1e486:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e488:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1e48c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e48e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e490:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1e494:	e77d      	b.n	1e392 <z_impl_k_poll+0x196>
   1e496:	4654      	mov	r4, sl
   1e498:	e7f3      	b.n	1e482 <z_impl_k_poll+0x286>
   1e49a:	bf00      	nop
   1e49c:	2000613c 	.word	0x2000613c
		add_event(&event->signal->poll_events, event, poller);
   1e4a0:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   1e4a4:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e4a8:	4598      	cmp	r8, r3
   1e4aa:	d02b      	beq.n	1e504 <z_impl_k_poll+0x308>
   1e4ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1e4b0:	b343      	cbz	r3, 1e504 <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e4b2:	6898      	ldr	r0, [r3, #8]
   1e4b4:	f009 fc92 	bl	27ddc <poller_thread>
   1e4b8:	4682      	mov	sl, r0
   1e4ba:	4638      	mov	r0, r7
   1e4bc:	f009 fc8e 	bl	27ddc <poller_thread>
   1e4c0:	4601      	mov	r1, r0
   1e4c2:	900a      	str	r0, [sp, #40]	; 0x28
   1e4c4:	4650      	mov	r0, sl
   1e4c6:	f009 fa7a 	bl	279be <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1e4ca:	2800      	cmp	r0, #0
   1e4cc:	dc1a      	bgt.n	1e504 <z_impl_k_poll+0x308>
	return list->head == list;
   1e4ce:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e4d2:	45d0      	cmp	r8, sl
   1e4d4:	d02c      	beq.n	1e530 <z_impl_k_poll+0x334>
   1e4d6:	4653      	mov	r3, sl
   1e4d8:	46a2      	mov	sl, r4
   1e4da:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e4dc:	b374      	cbz	r4, 1e53c <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   1e4de:	68a0      	ldr	r0, [r4, #8]
   1e4e0:	f009 fc7c 	bl	27ddc <poller_thread>
   1e4e4:	4601      	mov	r1, r0
   1e4e6:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e4e8:	f009 fa69 	bl	279be <z_sched_prio_cmp>
   1e4ec:	2800      	cmp	r0, #0
   1e4ee:	dc13      	bgt.n	1e518 <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e4f0:	b334      	cbz	r4, 1e540 <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   1e4f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e4f6:	429c      	cmp	r4, r3
   1e4f8:	d02d      	beq.n	1e556 <z_impl_k_poll+0x35a>
   1e4fa:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e4fc:	2c00      	cmp	r4, #0
   1e4fe:	d1ed      	bne.n	1e4dc <z_impl_k_poll+0x2e0>
   1e500:	4654      	mov	r4, sl
   1e502:	e01e      	b.n	1e542 <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   1e504:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1e508:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e50a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1e50e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e510:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e512:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1e516:	e73c      	b.n	1e392 <z_impl_k_poll+0x196>
   1e518:	4623      	mov	r3, r4
   1e51a:	4654      	mov	r4, sl
   1e51c:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1e51e:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1e520:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1e522:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e524:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1e528:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e52a:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1e52e:	e730      	b.n	1e392 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e530:	f04f 0a00 	mov.w	sl, #0
   1e534:	4653      	mov	r3, sl
   1e536:	46a2      	mov	sl, r4
   1e538:	461c      	mov	r4, r3
   1e53a:	e7cf      	b.n	1e4dc <z_impl_k_poll+0x2e0>
   1e53c:	4654      	mov	r4, sl
   1e53e:	e000      	b.n	1e542 <z_impl_k_poll+0x346>
   1e540:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1e542:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1e546:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e548:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1e54c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e54e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e550:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1e554:	e71d      	b.n	1e392 <z_impl_k_poll+0x196>
   1e556:	4654      	mov	r4, sl
   1e558:	e7f3      	b.n	1e542 <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   1e55a:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1e55e:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   1e562:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e566:	4598      	cmp	r8, r3
   1e568:	d02b      	beq.n	1e5c2 <z_impl_k_poll+0x3c6>
   1e56a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1e56e:	b343      	cbz	r3, 1e5c2 <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e570:	6898      	ldr	r0, [r3, #8]
   1e572:	f009 fc33 	bl	27ddc <poller_thread>
   1e576:	900b      	str	r0, [sp, #44]	; 0x2c
   1e578:	4638      	mov	r0, r7
   1e57a:	f009 fc2f 	bl	27ddc <poller_thread>
   1e57e:	4601      	mov	r1, r0
   1e580:	900a      	str	r0, [sp, #40]	; 0x28
   1e582:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1e584:	f009 fa1b 	bl	279be <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1e588:	2800      	cmp	r0, #0
   1e58a:	dc1a      	bgt.n	1e5c2 <z_impl_k_poll+0x3c6>
	return list->head == list;
   1e58c:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e590:	45d0      	cmp	r8, sl
   1e592:	d02c      	beq.n	1e5ee <z_impl_k_poll+0x3f2>
   1e594:	4653      	mov	r3, sl
   1e596:	46a2      	mov	sl, r4
   1e598:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e59a:	b374      	cbz	r4, 1e5fa <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1e59c:	68a0      	ldr	r0, [r4, #8]
   1e59e:	f009 fc1d 	bl	27ddc <poller_thread>
   1e5a2:	4601      	mov	r1, r0
   1e5a4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e5a6:	f009 fa0a 	bl	279be <z_sched_prio_cmp>
   1e5aa:	2800      	cmp	r0, #0
   1e5ac:	dc13      	bgt.n	1e5d6 <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e5ae:	b334      	cbz	r4, 1e5fe <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   1e5b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e5b4:	429c      	cmp	r4, r3
   1e5b6:	d02d      	beq.n	1e614 <z_impl_k_poll+0x418>
   1e5b8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e5ba:	2c00      	cmp	r4, #0
   1e5bc:	d1ed      	bne.n	1e59a <z_impl_k_poll+0x39e>
   1e5be:	4654      	mov	r4, sl
   1e5c0:	e01e      	b.n	1e600 <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   1e5c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1e5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e5c8:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1e5cc:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e5ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e5d0:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1e5d4:	e6dd      	b.n	1e392 <z_impl_k_poll+0x196>
   1e5d6:	4623      	mov	r3, r4
   1e5d8:	4654      	mov	r4, sl
   1e5da:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1e5dc:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1e5de:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1e5e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e5e2:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1e5e6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e5e8:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1e5ec:	e6d1      	b.n	1e392 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e5ee:	f04f 0a00 	mov.w	sl, #0
   1e5f2:	4653      	mov	r3, sl
   1e5f4:	46a2      	mov	sl, r4
   1e5f6:	461c      	mov	r4, r3
   1e5f8:	e7cf      	b.n	1e59a <z_impl_k_poll+0x39e>
   1e5fa:	4654      	mov	r4, sl
   1e5fc:	e000      	b.n	1e600 <z_impl_k_poll+0x404>
   1e5fe:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1e600:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1e604:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e606:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1e60a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e60c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e60e:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1e612:	e6be      	b.n	1e392 <z_impl_k_poll+0x196>
   1e614:	4654      	mov	r4, sl
   1e616:	e7f3      	b.n	1e600 <z_impl_k_poll+0x404>
   1e618:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e61c:	f3ef 8111 	mrs	r1, BASEPRI
   1e620:	f383 8812 	msr	BASEPRI_MAX, r3
   1e624:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1e628:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   1e62c:	b1cb      	cbz	r3, 1e662 <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   1e62e:	2300      	movs	r3, #0
   1e630:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e634:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1e638:	4323      	orrs	r3, r4
   1e63a:	d045      	beq.n	1e6c8 <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1e63c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1e640:	e9cd 3400 	strd	r3, r4, [sp]
   1e644:	4a3c      	ldr	r2, [pc, #240]	; (1e738 <z_impl_k_poll+0x53c>)
   1e646:	483d      	ldr	r0, [pc, #244]	; (1e73c <z_impl_k_poll+0x540>)
   1e648:	f7ff fa02 	bl	1da50 <z_pend_curr>
   1e64c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e650:	f3ef 8c11 	mrs	ip, BASEPRI
   1e654:	f383 8812 	msr	BASEPRI_MAX, r3
   1e658:	f3bf 8f6f 	isb	sy
   1e65c:	4661      	mov	r1, ip
	while (num_events--) {
   1e65e:	465b      	mov	r3, fp
   1e660:	e04e      	b.n	1e700 <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   1e662:	4608      	mov	r0, r1
	while (num_events--) {
   1e664:	465b      	mov	r3, fp
   1e666:	e014      	b.n	1e692 <z_impl_k_poll+0x496>
	return node->next != NULL;
   1e668:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1e66a:	b12a      	cbz	r2, 1e678 <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1e66c:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1e66e:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   1e670:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   1e672:	2200      	movs	r2, #0
   1e674:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   1e676:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   1e678:	f380 8811 	msr	BASEPRI, r0
   1e67c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e680:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e684:	f3ef 8011 	mrs	r0, BASEPRI
   1e688:	f383 8812 	msr	BASEPRI_MAX, r3
   1e68c:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1e690:	463b      	mov	r3, r7
   1e692:	1e5f      	subs	r7, r3, #1
   1e694:	b193      	cbz	r3, 1e6bc <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   1e696:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1e69a:	009e      	lsls	r6, r3, #2
   1e69c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1e6a0:	2200      	movs	r2, #0
   1e6a2:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1e6a4:	7b5a      	ldrb	r2, [r3, #13]
   1e6a6:	f002 021f 	and.w	r2, r2, #31
   1e6aa:	2a08      	cmp	r2, #8
   1e6ac:	d8e4      	bhi.n	1e678 <z_impl_k_poll+0x47c>
   1e6ae:	2401      	movs	r4, #1
   1e6b0:	fa04 f202 	lsl.w	r2, r4, r2
   1e6b4:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1e6b8:	d0de      	beq.n	1e678 <z_impl_k_poll+0x47c>
   1e6ba:	e7d5      	b.n	1e668 <z_impl_k_poll+0x46c>
	__asm__ volatile(
   1e6bc:	f381 8811 	msr	BASEPRI, r1
   1e6c0:	f3bf 8f6f 	isb	sy
		return 0;
   1e6c4:	4618      	mov	r0, r3
   1e6c6:	e034      	b.n	1e732 <z_impl_k_poll+0x536>
   1e6c8:	f381 8811 	msr	BASEPRI, r1
   1e6cc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1e6d0:	f06f 000a 	mvn.w	r0, #10
   1e6d4:	e02d      	b.n	1e732 <z_impl_k_poll+0x536>
	return node->next != NULL;
   1e6d6:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1e6d8:	b12a      	cbz	r2, 1e6e6 <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   1e6da:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   1e6dc:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   1e6de:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   1e6e0:	2200      	movs	r2, #0
   1e6e2:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   1e6e4:	605a      	str	r2, [r3, #4]
   1e6e6:	f381 8811 	msr	BASEPRI, r1
   1e6ea:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e6ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e6f2:	f3ef 8111 	mrs	r1, BASEPRI
   1e6f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6fa:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1e6fe:	4623      	mov	r3, r4
   1e700:	1e5c      	subs	r4, r3, #1
   1e702:	b193      	cbz	r3, 1e72a <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   1e704:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e708:	009f      	lsls	r7, r3, #2
   1e70a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1e70e:	2200      	movs	r2, #0
   1e710:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1e712:	7b5a      	ldrb	r2, [r3, #13]
   1e714:	f002 021f 	and.w	r2, r2, #31
   1e718:	2a08      	cmp	r2, #8
   1e71a:	d8e4      	bhi.n	1e6e6 <z_impl_k_poll+0x4ea>
   1e71c:	2601      	movs	r6, #1
   1e71e:	fa06 f202 	lsl.w	r2, r6, r2
   1e722:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1e726:	d0de      	beq.n	1e6e6 <z_impl_k_poll+0x4ea>
   1e728:	e7d5      	b.n	1e6d6 <z_impl_k_poll+0x4da>
	__asm__ volatile(
   1e72a:	f38c 8811 	msr	BASEPRI, ip
   1e72e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1e732:	b00d      	add	sp, #52	; 0x34
   1e734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e738:	200006f8 	.word	0x200006f8
   1e73c:	20006180 	.word	0x20006180

0001e740 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1e740:	b538      	push	{r3, r4, r5, lr}
   1e742:	4603      	mov	r3, r0
	__asm__ volatile(
   1e744:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e748:	f3ef 8511 	mrs	r5, BASEPRI
   1e74c:	f382 8812 	msr	BASEPRI_MAX, r2
   1e750:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1e754:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1e756:	2201      	movs	r2, #1
   1e758:	6082      	str	r2, [r0, #8]
	return list->head == list;
   1e75a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1e75c:	4283      	cmp	r3, r0
   1e75e:	d011      	beq.n	1e784 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   1e760:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1e762:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1e764:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e766:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e768:	2300      	movs	r3, #0
   1e76a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1e76c:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   1e76e:	b148      	cbz	r0, 1e784 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1e770:	2101      	movs	r1, #1
   1e772:	f009 fb83 	bl	27e7c <signal_poll_event>
   1e776:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1e778:	4629      	mov	r1, r5
   1e77a:	4805      	ldr	r0, [pc, #20]	; (1e790 <z_impl_k_poll_signal_raise+0x50>)
   1e77c:	f7ff f804 	bl	1d788 <z_reschedule>
	return rc;
}
   1e780:	4620      	mov	r0, r4
   1e782:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1e784:	f385 8811 	msr	BASEPRI, r5
   1e788:	f3bf 8f6f 	isb	sy
		return 0;
   1e78c:	2400      	movs	r4, #0
   1e78e:	e7f7      	b.n	1e780 <z_impl_k_poll_signal_raise+0x40>
   1e790:	20006180 	.word	0x20006180

0001e794 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1e794:	b538      	push	{r3, r4, r5, lr}
   1e796:	4604      	mov	r4, r0
   1e798:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1e79a:	f008 fe8b 	bl	274b4 <k_is_in_isr>
   1e79e:	b948      	cbnz	r0, 1e7b4 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1e7a0:	4b05      	ldr	r3, [pc, #20]	; (1e7b8 <z_thread_aligned_alloc+0x24>)
   1e7a2:	689b      	ldr	r3, [r3, #8]
   1e7a4:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   1e7a8:	b118      	cbz	r0, 1e7b2 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   1e7aa:	462a      	mov	r2, r5
   1e7ac:	4621      	mov	r1, r4
   1e7ae:	f009 fbae 	bl	27f0e <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1e7b2:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   1e7b4:	2000      	movs	r0, #0
	return ret;
   1e7b6:	e7fc      	b.n	1e7b2 <z_thread_aligned_alloc+0x1e>
   1e7b8:	2000613c 	.word	0x2000613c

0001e7bc <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   1e7bc:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1e7be:	4a03      	ldr	r2, [pc, #12]	; (1e7cc <boot_banner+0x10>)
   1e7c0:	4903      	ldr	r1, [pc, #12]	; (1e7d0 <boot_banner+0x14>)
   1e7c2:	4804      	ldr	r0, [pc, #16]	; (1e7d4 <boot_banner+0x18>)
   1e7c4:	f002 fc9c 	bl	21100 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   1e7c8:	bd08      	pop	{r3, pc}
   1e7ca:	bf00      	nop
   1e7cc:	00028458 	.word	0x00028458
   1e7d0:	00028f58 	.word	0x00028f58
   1e7d4:	00028f64 	.word	0x00028f64

0001e7d8 <nrf_cc3xx_platform_init>:
   1e7d8:	b510      	push	{r4, lr}
   1e7da:	4c0c      	ldr	r4, [pc, #48]	; (1e80c <nrf_cc3xx_platform_init+0x34>)
   1e7dc:	6823      	ldr	r3, [r4, #0]
   1e7de:	b113      	cbz	r3, 1e7e6 <nrf_cc3xx_platform_init+0xe>
   1e7e0:	4b0b      	ldr	r3, [pc, #44]	; (1e810 <nrf_cc3xx_platform_init+0x38>)
   1e7e2:	681b      	ldr	r3, [r3, #0]
   1e7e4:	b92b      	cbnz	r3, 1e7f2 <nrf_cc3xx_platform_init+0x1a>
   1e7e6:	f000 fabd 	bl	1ed64 <CC_LibInit>
   1e7ea:	b930      	cbnz	r0, 1e7fa <nrf_cc3xx_platform_init+0x22>
   1e7ec:	4b08      	ldr	r3, [pc, #32]	; (1e810 <nrf_cc3xx_platform_init+0x38>)
   1e7ee:	2201      	movs	r2, #1
   1e7f0:	601a      	str	r2, [r3, #0]
   1e7f2:	2301      	movs	r3, #1
   1e7f4:	6023      	str	r3, [r4, #0]
   1e7f6:	2000      	movs	r0, #0
   1e7f8:	bd10      	pop	{r4, pc}
   1e7fa:	3801      	subs	r0, #1
   1e7fc:	2806      	cmp	r0, #6
   1e7fe:	d901      	bls.n	1e804 <nrf_cc3xx_platform_init+0x2c>
   1e800:	4804      	ldr	r0, [pc, #16]	; (1e814 <nrf_cc3xx_platform_init+0x3c>)
   1e802:	bd10      	pop	{r4, pc}
   1e804:	4b04      	ldr	r3, [pc, #16]	; (1e818 <nrf_cc3xx_platform_init+0x40>)
   1e806:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1e80a:	bd10      	pop	{r4, pc}
   1e80c:	20006180 	.word	0x20006180
   1e810:	20006184 	.word	0x20006184
   1e814:	ffff8ffe 	.word	0xffff8ffe
   1e818:	00028f8c 	.word	0x00028f8c

0001e81c <nrf_cc3xx_platform_abort>:
   1e81c:	f3bf 8f4f 	dsb	sy
   1e820:	4905      	ldr	r1, [pc, #20]	; (1e838 <nrf_cc3xx_platform_abort+0x1c>)
   1e822:	4b06      	ldr	r3, [pc, #24]	; (1e83c <nrf_cc3xx_platform_abort+0x20>)
   1e824:	68ca      	ldr	r2, [r1, #12]
   1e826:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1e82a:	4313      	orrs	r3, r2
   1e82c:	60cb      	str	r3, [r1, #12]
   1e82e:	f3bf 8f4f 	dsb	sy
   1e832:	bf00      	nop
   1e834:	e7fd      	b.n	1e832 <nrf_cc3xx_platform_abort+0x16>
   1e836:	bf00      	nop
   1e838:	e000ed00 	.word	0xe000ed00
   1e83c:	05fa0004 	.word	0x05fa0004

0001e840 <CC_PalAbort>:
   1e840:	b4f0      	push	{r4, r5, r6, r7}
   1e842:	4f09      	ldr	r7, [pc, #36]	; (1e868 <CC_PalAbort+0x28>)
   1e844:	4e09      	ldr	r6, [pc, #36]	; (1e86c <CC_PalAbort+0x2c>)
   1e846:	4c0a      	ldr	r4, [pc, #40]	; (1e870 <CC_PalAbort+0x30>)
   1e848:	4a0a      	ldr	r2, [pc, #40]	; (1e874 <CC_PalAbort+0x34>)
   1e84a:	4d0b      	ldr	r5, [pc, #44]	; (1e878 <CC_PalAbort+0x38>)
   1e84c:	490b      	ldr	r1, [pc, #44]	; (1e87c <CC_PalAbort+0x3c>)
   1e84e:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1e852:	603b      	str	r3, [r7, #0]
   1e854:	6852      	ldr	r2, [r2, #4]
   1e856:	6033      	str	r3, [r6, #0]
   1e858:	6023      	str	r3, [r4, #0]
   1e85a:	2400      	movs	r4, #0
   1e85c:	602b      	str	r3, [r5, #0]
   1e85e:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   1e862:	bcf0      	pop	{r4, r5, r6, r7}
   1e864:	4710      	bx	r2
   1e866:	bf00      	nop
   1e868:	5002b400 	.word	0x5002b400
   1e86c:	5002b404 	.word	0x5002b404
   1e870:	5002b408 	.word	0x5002b408
   1e874:	20000700 	.word	0x20000700
   1e878:	5002b40c 	.word	0x5002b40c
   1e87c:	5002a000 	.word	0x5002a000

0001e880 <nrf_cc3xx_platform_set_abort>:
   1e880:	e9d0 1200 	ldrd	r1, r2, [r0]
   1e884:	4b01      	ldr	r3, [pc, #4]	; (1e88c <nrf_cc3xx_platform_set_abort+0xc>)
   1e886:	e9c3 1200 	strd	r1, r2, [r3]
   1e88a:	4770      	bx	lr
   1e88c:	20000700 	.word	0x20000700

0001e890 <nrf_cc3xx_platform_ctr_drbg_init>:
   1e890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e894:	4c15      	ldr	r4, [pc, #84]	; (1e8ec <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1e896:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1e8f4 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   1e89a:	2800      	cmp	r0, #0
   1e89c:	bf18      	it	ne
   1e89e:	4604      	movne	r4, r0
   1e8a0:	b083      	sub	sp, #12
   1e8a2:	6820      	ldr	r0, [r4, #0]
   1e8a4:	4540      	cmp	r0, r8
   1e8a6:	d01d      	beq.n	1e8e4 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   1e8a8:	460d      	mov	r5, r1
   1e8aa:	4620      	mov	r0, r4
   1e8ac:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1e8b0:	f104 0904 	add.w	r9, r4, #4
   1e8b4:	4616      	mov	r6, r2
   1e8b6:	f504 778c 	add.w	r7, r4, #280	; 0x118
   1e8ba:	f000 fe9f 	bl	1f5fc <mbedtls_platform_zeroize>
   1e8be:	4648      	mov	r0, r9
   1e8c0:	f000 f940 	bl	1eb44 <cc_mbedtls_entropy_init>
   1e8c4:	4638      	mov	r0, r7
   1e8c6:	f001 fa75 	bl	1fdb4 <cc_mbedtls_ctr_drbg_init>
   1e8ca:	4909      	ldr	r1, [pc, #36]	; (1e8f0 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1e8cc:	9600      	str	r6, [sp, #0]
   1e8ce:	464a      	mov	r2, r9
   1e8d0:	4638      	mov	r0, r7
   1e8d2:	462b      	mov	r3, r5
   1e8d4:	f001 fa80 	bl	1fdd8 <cc_mbedtls_ctr_drbg_seed>
   1e8d8:	b908      	cbnz	r0, 1e8de <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1e8da:	f8c4 8000 	str.w	r8, [r4]
   1e8de:	b003      	add	sp, #12
   1e8e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e8e4:	2000      	movs	r0, #0
   1e8e6:	b003      	add	sp, #12
   1e8e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e8ec:	20006a8c 	.word	0x20006a8c
   1e8f0:	0001ebc1 	.word	0x0001ebc1
   1e8f4:	5ac9bca5 	.word	0x5ac9bca5

0001e8f8 <nrf_cc3xx_platform_ctr_drbg_get>:
   1e8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e8fa:	4c0d      	ldr	r4, [pc, #52]	; (1e930 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1e8fc:	4e0d      	ldr	r6, [pc, #52]	; (1e934 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1e8fe:	2800      	cmp	r0, #0
   1e900:	bf08      	it	eq
   1e902:	4620      	moveq	r0, r4
   1e904:	b083      	sub	sp, #12
   1e906:	6807      	ldr	r7, [r0, #0]
   1e908:	42b7      	cmp	r7, r6
   1e90a:	d10e      	bne.n	1e92a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1e90c:	2600      	movs	r6, #0
   1e90e:	461d      	mov	r5, r3
   1e910:	f500 708c 	add.w	r0, r0, #280	; 0x118
   1e914:	9600      	str	r6, [sp, #0]
   1e916:	4633      	mov	r3, r6
   1e918:	4614      	mov	r4, r2
   1e91a:	f001 faad 	bl	1fe78 <cc_mbedtls_ctr_drbg_random_with_add>
   1e91e:	2800      	cmp	r0, #0
   1e920:	bf18      	it	ne
   1e922:	4634      	movne	r4, r6
   1e924:	602c      	str	r4, [r5, #0]
   1e926:	b003      	add	sp, #12
   1e928:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e92a:	4803      	ldr	r0, [pc, #12]	; (1e938 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1e92c:	e7fb      	b.n	1e926 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1e92e:	bf00      	nop
   1e930:	20006a8c 	.word	0x20006a8c
   1e934:	5ac9bca5 	.word	0x5ac9bca5
   1e938:	ffff8fe8 	.word	0xffff8fe8

0001e93c <mutex_free>:
   1e93c:	b510      	push	{r4, lr}
   1e93e:	4604      	mov	r4, r0
   1e940:	b130      	cbz	r0, 1e950 <mutex_free+0x14>
   1e942:	6863      	ldr	r3, [r4, #4]
   1e944:	06db      	lsls	r3, r3, #27
   1e946:	d502      	bpl.n	1e94e <mutex_free+0x12>
   1e948:	2300      	movs	r3, #0
   1e94a:	6023      	str	r3, [r4, #0]
   1e94c:	6063      	str	r3, [r4, #4]
   1e94e:	bd10      	pop	{r4, pc}
   1e950:	4b02      	ldr	r3, [pc, #8]	; (1e95c <mutex_free+0x20>)
   1e952:	4803      	ldr	r0, [pc, #12]	; (1e960 <mutex_free+0x24>)
   1e954:	685b      	ldr	r3, [r3, #4]
   1e956:	4798      	blx	r3
   1e958:	e7f3      	b.n	1e942 <mutex_free+0x6>
   1e95a:	bf00      	nop
   1e95c:	20000700 	.word	0x20000700
   1e960:	00028fa8 	.word	0x00028fa8

0001e964 <mutex_unlock>:
   1e964:	b168      	cbz	r0, 1e982 <mutex_unlock+0x1e>
   1e966:	6843      	ldr	r3, [r0, #4]
   1e968:	b13b      	cbz	r3, 1e97a <mutex_unlock+0x16>
   1e96a:	06db      	lsls	r3, r3, #27
   1e96c:	d507      	bpl.n	1e97e <mutex_unlock+0x1a>
   1e96e:	f3bf 8f5f 	dmb	sy
   1e972:	2300      	movs	r3, #0
   1e974:	6003      	str	r3, [r0, #0]
   1e976:	4618      	mov	r0, r3
   1e978:	4770      	bx	lr
   1e97a:	4803      	ldr	r0, [pc, #12]	; (1e988 <mutex_unlock+0x24>)
   1e97c:	4770      	bx	lr
   1e97e:	4803      	ldr	r0, [pc, #12]	; (1e98c <mutex_unlock+0x28>)
   1e980:	4770      	bx	lr
   1e982:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1e986:	4770      	bx	lr
   1e988:	ffff8fea 	.word	0xffff8fea
   1e98c:	ffff8fe9 	.word	0xffff8fe9

0001e990 <mutex_init>:
   1e990:	b510      	push	{r4, lr}
   1e992:	4604      	mov	r4, r0
   1e994:	b120      	cbz	r0, 1e9a0 <mutex_init+0x10>
   1e996:	2200      	movs	r2, #0
   1e998:	2311      	movs	r3, #17
   1e99a:	6022      	str	r2, [r4, #0]
   1e99c:	6063      	str	r3, [r4, #4]
   1e99e:	bd10      	pop	{r4, pc}
   1e9a0:	4801      	ldr	r0, [pc, #4]	; (1e9a8 <mutex_init+0x18>)
   1e9a2:	f7ff ff4d 	bl	1e840 <CC_PalAbort>
   1e9a6:	e7f6      	b.n	1e996 <mutex_init+0x6>
   1e9a8:	00028fd0 	.word	0x00028fd0

0001e9ac <mutex_lock>:
   1e9ac:	b1c0      	cbz	r0, 1e9e0 <mutex_lock+0x34>
   1e9ae:	6843      	ldr	r3, [r0, #4]
   1e9b0:	b1a3      	cbz	r3, 1e9dc <mutex_lock+0x30>
   1e9b2:	06db      	lsls	r3, r3, #27
   1e9b4:	d510      	bpl.n	1e9d8 <mutex_lock+0x2c>
   1e9b6:	2201      	movs	r2, #1
   1e9b8:	f3bf 8f5b 	dmb	ish
   1e9bc:	e850 3f00 	ldrex	r3, [r0]
   1e9c0:	e840 2100 	strex	r1, r2, [r0]
   1e9c4:	2900      	cmp	r1, #0
   1e9c6:	d1f9      	bne.n	1e9bc <mutex_lock+0x10>
   1e9c8:	f3bf 8f5b 	dmb	ish
   1e9cc:	2b01      	cmp	r3, #1
   1e9ce:	d0f3      	beq.n	1e9b8 <mutex_lock+0xc>
   1e9d0:	f3bf 8f5f 	dmb	sy
   1e9d4:	2000      	movs	r0, #0
   1e9d6:	4770      	bx	lr
   1e9d8:	4803      	ldr	r0, [pc, #12]	; (1e9e8 <mutex_lock+0x3c>)
   1e9da:	4770      	bx	lr
   1e9dc:	4803      	ldr	r0, [pc, #12]	; (1e9ec <mutex_lock+0x40>)
   1e9de:	4770      	bx	lr
   1e9e0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1e9e4:	4770      	bx	lr
   1e9e6:	bf00      	nop
   1e9e8:	ffff8fe9 	.word	0xffff8fe9
   1e9ec:	ffff8fea 	.word	0xffff8fea

0001e9f0 <nrf_cc3xx_platform_set_mutexes>:
   1e9f0:	b570      	push	{r4, r5, r6, lr}
   1e9f2:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e9f6:	4c13      	ldr	r4, [pc, #76]	; (1ea44 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1e9f8:	4d13      	ldr	r5, [pc, #76]	; (1ea48 <nrf_cc3xx_platform_set_mutexes+0x58>)
   1e9fa:	e9c4 2300 	strd	r2, r3, [r4]
   1e9fe:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   1ea02:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1ea06:	4b11      	ldr	r3, [pc, #68]	; (1ea4c <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1ea08:	6808      	ldr	r0, [r1, #0]
   1ea0a:	6018      	str	r0, [r3, #0]
   1ea0c:	6848      	ldr	r0, [r1, #4]
   1ea0e:	6058      	str	r0, [r3, #4]
   1ea10:	6888      	ldr	r0, [r1, #8]
   1ea12:	6098      	str	r0, [r3, #8]
   1ea14:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   1ea18:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1ea1c:	60de      	str	r6, [r3, #12]
   1ea1e:	6118      	str	r0, [r3, #16]
   1ea20:	06cb      	lsls	r3, r1, #27
   1ea22:	d50d      	bpl.n	1ea40 <nrf_cc3xx_platform_set_mutexes+0x50>
   1ea24:	2300      	movs	r3, #0
   1ea26:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1ea2a:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   1ea2e:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1ea32:	4790      	blx	r2
   1ea34:	6823      	ldr	r3, [r4, #0]
   1ea36:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   1ea3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ea3e:	4718      	bx	r3
   1ea40:	bd70      	pop	{r4, r5, r6, pc}
   1ea42:	bf00      	nop
   1ea44:	20000710 	.word	0x20000710
   1ea48:	20006a8c 	.word	0x20006a8c
   1ea4c:	20000720 	.word	0x20000720

0001ea50 <entropy_update>:
   1ea50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ea54:	2b20      	cmp	r3, #32
   1ea56:	b08b      	sub	sp, #44	; 0x2c
   1ea58:	461d      	mov	r5, r3
   1ea5a:	4606      	mov	r6, r0
   1ea5c:	4689      	mov	r9, r1
   1ea5e:	4690      	mov	r8, r2
   1ea60:	d826      	bhi.n	1eab0 <entropy_update+0x60>
   1ea62:	b2db      	uxtb	r3, r3
   1ea64:	af02      	add	r7, sp, #8
   1ea66:	6831      	ldr	r1, [r6, #0]
   1ea68:	f88d 9004 	strb.w	r9, [sp, #4]
   1ea6c:	f88d 3005 	strb.w	r3, [sp, #5]
   1ea70:	f106 0904 	add.w	r9, r6, #4
   1ea74:	b921      	cbnz	r1, 1ea80 <entropy_update+0x30>
   1ea76:	4648      	mov	r0, r9
   1ea78:	f000 fe62 	bl	1f740 <cc_mbedtls_sha256_starts_ret>
   1ea7c:	4604      	mov	r4, r0
   1ea7e:	b940      	cbnz	r0, 1ea92 <entropy_update+0x42>
   1ea80:	2301      	movs	r3, #1
   1ea82:	6033      	str	r3, [r6, #0]
   1ea84:	2202      	movs	r2, #2
   1ea86:	a901      	add	r1, sp, #4
   1ea88:	4648      	mov	r0, r9
   1ea8a:	f000 fe6d 	bl	1f768 <cc_mbedtls_sha256_update_ret>
   1ea8e:	4604      	mov	r4, r0
   1ea90:	b138      	cbz	r0, 1eaa2 <entropy_update+0x52>
   1ea92:	4638      	mov	r0, r7
   1ea94:	2120      	movs	r1, #32
   1ea96:	f000 fdb1 	bl	1f5fc <mbedtls_platform_zeroize>
   1ea9a:	4620      	mov	r0, r4
   1ea9c:	b00b      	add	sp, #44	; 0x2c
   1ea9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1eaa2:	462a      	mov	r2, r5
   1eaa4:	4641      	mov	r1, r8
   1eaa6:	4648      	mov	r0, r9
   1eaa8:	f000 fe5e 	bl	1f768 <cc_mbedtls_sha256_update_ret>
   1eaac:	4604      	mov	r4, r0
   1eaae:	e7f0      	b.n	1ea92 <entropy_update+0x42>
   1eab0:	af02      	add	r7, sp, #8
   1eab2:	4619      	mov	r1, r3
   1eab4:	4610      	mov	r0, r2
   1eab6:	2300      	movs	r3, #0
   1eab8:	463a      	mov	r2, r7
   1eaba:	f001 fad1 	bl	20060 <cc_mbedtls_sha256_ret>
   1eabe:	4604      	mov	r4, r0
   1eac0:	2800      	cmp	r0, #0
   1eac2:	d1e6      	bne.n	1ea92 <entropy_update+0x42>
   1eac4:	2320      	movs	r3, #32
   1eac6:	461d      	mov	r5, r3
   1eac8:	46b8      	mov	r8, r7
   1eaca:	e7cc      	b.n	1ea66 <entropy_update+0x16>

0001eacc <entropy_gather_internal.part.0>:
   1eacc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eace:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1ead2:	b0a7      	sub	sp, #156	; 0x9c
   1ead4:	2b00      	cmp	r3, #0
   1ead6:	bfd8      	it	le
   1ead8:	ae02      	addle	r6, sp, #8
   1eada:	dd2c      	ble.n	1eb36 <entropy_gather_internal.part.0+0x6a>
   1eadc:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   1eae0:	4605      	mov	r5, r0
   1eae2:	2300      	movs	r3, #0
   1eae4:	ae02      	add	r6, sp, #8
   1eae6:	9301      	str	r3, [sp, #4]
   1eae8:	f1a4 0701 	sub.w	r7, r4, #1
   1eaec:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   1eaf0:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   1eaf4:	4631      	mov	r1, r6
   1eaf6:	ab01      	add	r3, sp, #4
   1eaf8:	2290      	movs	r2, #144	; 0x90
   1eafa:	47a0      	blx	r4
   1eafc:	fab7 f787 	clz	r7, r7
   1eb00:	097f      	lsrs	r7, r7, #5
   1eb02:	4604      	mov	r4, r0
   1eb04:	b910      	cbnz	r0, 1eb0c <entropy_gather_internal.part.0+0x40>
   1eb06:	9b01      	ldr	r3, [sp, #4]
   1eb08:	b93b      	cbnz	r3, 1eb1a <entropy_gather_internal.part.0+0x4e>
   1eb0a:	b1a7      	cbz	r7, 1eb36 <entropy_gather_internal.part.0+0x6a>
   1eb0c:	4630      	mov	r0, r6
   1eb0e:	2190      	movs	r1, #144	; 0x90
   1eb10:	f000 fd74 	bl	1f5fc <mbedtls_platform_zeroize>
   1eb14:	4620      	mov	r0, r4
   1eb16:	b027      	add	sp, #156	; 0x9c
   1eb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eb1a:	4601      	mov	r1, r0
   1eb1c:	4632      	mov	r2, r6
   1eb1e:	4628      	mov	r0, r5
   1eb20:	f7ff ff96 	bl	1ea50 <entropy_update>
   1eb24:	b950      	cbnz	r0, 1eb3c <entropy_gather_internal.part.0+0x70>
   1eb26:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1eb2a:	9a01      	ldr	r2, [sp, #4]
   1eb2c:	4413      	add	r3, r2
   1eb2e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   1eb32:	2f00      	cmp	r7, #0
   1eb34:	d1ea      	bne.n	1eb0c <entropy_gather_internal.part.0+0x40>
   1eb36:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1eb3a:	e7e7      	b.n	1eb0c <entropy_gather_internal.part.0+0x40>
   1eb3c:	4604      	mov	r4, r0
   1eb3e:	4620      	mov	r0, r4
   1eb40:	b027      	add	sp, #156	; 0x9c
   1eb42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001eb44 <cc_mbedtls_entropy_init>:
   1eb44:	b570      	push	{r4, r5, r6, lr}
   1eb46:	2500      	movs	r5, #0
   1eb48:	4604      	mov	r4, r0
   1eb4a:	4629      	mov	r1, r5
   1eb4c:	2214      	movs	r2, #20
   1eb4e:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   1eb52:	30f8      	adds	r0, #248	; 0xf8
   1eb54:	f003 ff8f 	bl	22a76 <memset>
   1eb58:	4b15      	ldr	r3, [pc, #84]	; (1ebb0 <cc_mbedtls_entropy_init+0x6c>)
   1eb5a:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   1eb5e:	681b      	ldr	r3, [r3, #0]
   1eb60:	4630      	mov	r0, r6
   1eb62:	4798      	blx	r3
   1eb64:	4620      	mov	r0, r4
   1eb66:	f840 5b04 	str.w	r5, [r0], #4
   1eb6a:	f000 fdcf 	bl	1f70c <cc_mbedtls_sha256_init>
   1eb6e:	4b11      	ldr	r3, [pc, #68]	; (1ebb4 <cc_mbedtls_entropy_init+0x70>)
   1eb70:	4630      	mov	r0, r6
   1eb72:	681b      	ldr	r3, [r3, #0]
   1eb74:	4798      	blx	r3
   1eb76:	b9c8      	cbnz	r0, 1ebac <cc_mbedtls_entropy_init+0x68>
   1eb78:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1eb7c:	42ab      	cmp	r3, r5
   1eb7e:	dc0f      	bgt.n	1eba0 <cc_mbedtls_entropy_init+0x5c>
   1eb80:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1eb84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1eb88:	490b      	ldr	r1, [pc, #44]	; (1ebb8 <cc_mbedtls_entropy_init+0x74>)
   1eb8a:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1eb8e:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   1eb92:	3301      	adds	r3, #1
   1eb94:	2020      	movs	r0, #32
   1eb96:	2101      	movs	r1, #1
   1eb98:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   1eb9c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   1eba0:	4b06      	ldr	r3, [pc, #24]	; (1ebbc <cc_mbedtls_entropy_init+0x78>)
   1eba2:	4630      	mov	r0, r6
   1eba4:	681b      	ldr	r3, [r3, #0]
   1eba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ebaa:	4718      	bx	r3
   1ebac:	bd70      	pop	{r4, r5, r6, pc}
   1ebae:	bf00      	nop
   1ebb0:	20000764 	.word	0x20000764
   1ebb4:	20000768 	.word	0x20000768
   1ebb8:	0001f611 	.word	0x0001f611
   1ebbc:	2000076c 	.word	0x2000076c

0001ebc0 <cc_mbedtls_entropy_func>:
   1ebc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ebc4:	2a20      	cmp	r2, #32
   1ebc6:	b088      	sub	sp, #32
   1ebc8:	d876      	bhi.n	1ecb8 <cc_mbedtls_entropy_func+0xf8>
   1ebca:	4b3d      	ldr	r3, [pc, #244]	; (1ecc0 <cc_mbedtls_entropy_func+0x100>)
   1ebcc:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   1ebd0:	681b      	ldr	r3, [r3, #0]
   1ebd2:	4604      	mov	r4, r0
   1ebd4:	4648      	mov	r0, r9
   1ebd6:	4617      	mov	r7, r2
   1ebd8:	4688      	mov	r8, r1
   1ebda:	4798      	blx	r3
   1ebdc:	4605      	mov	r5, r0
   1ebde:	bba0      	cbnz	r0, 1ec4a <cc_mbedtls_entropy_func+0x8a>
   1ebe0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1ebe4:	f240 1601 	movw	r6, #257	; 0x101
   1ebe8:	e001      	b.n	1ebee <cc_mbedtls_entropy_func+0x2e>
   1ebea:	3e01      	subs	r6, #1
   1ebec:	d060      	beq.n	1ecb0 <cc_mbedtls_entropy_func+0xf0>
   1ebee:	4620      	mov	r0, r4
   1ebf0:	b37b      	cbz	r3, 1ec52 <cc_mbedtls_entropy_func+0x92>
   1ebf2:	f7ff ff6b 	bl	1eacc <entropy_gather_internal.part.0>
   1ebf6:	4605      	mov	r5, r0
   1ebf8:	bb68      	cbnz	r0, 1ec56 <cc_mbedtls_entropy_func+0x96>
   1ebfa:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1ebfe:	2b00      	cmp	r3, #0
   1ec00:	ddf3      	ble.n	1ebea <cc_mbedtls_entropy_func+0x2a>
   1ec02:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   1ec06:	4290      	cmp	r0, r2
   1ec08:	d3ef      	bcc.n	1ebea <cc_mbedtls_entropy_func+0x2a>
   1ec0a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1ec0e:	2a01      	cmp	r2, #1
   1ec10:	d1eb      	bne.n	1ebea <cc_mbedtls_entropy_func+0x2a>
   1ec12:	281f      	cmp	r0, #31
   1ec14:	d9e9      	bls.n	1ebea <cc_mbedtls_entropy_func+0x2a>
   1ec16:	466e      	mov	r6, sp
   1ec18:	4629      	mov	r1, r5
   1ec1a:	2220      	movs	r2, #32
   1ec1c:	4630      	mov	r0, r6
   1ec1e:	f104 0a04 	add.w	sl, r4, #4
   1ec22:	f003 ff28 	bl	22a76 <memset>
   1ec26:	4631      	mov	r1, r6
   1ec28:	4650      	mov	r0, sl
   1ec2a:	f000 fda5 	bl	1f778 <cc_mbedtls_sha256_finish_ret>
   1ec2e:	4605      	mov	r5, r0
   1ec30:	b198      	cbz	r0, 1ec5a <cc_mbedtls_entropy_func+0x9a>
   1ec32:	4630      	mov	r0, r6
   1ec34:	2120      	movs	r1, #32
   1ec36:	f000 fce1 	bl	1f5fc <mbedtls_platform_zeroize>
   1ec3a:	4b22      	ldr	r3, [pc, #136]	; (1ecc4 <cc_mbedtls_entropy_func+0x104>)
   1ec3c:	4648      	mov	r0, r9
   1ec3e:	681b      	ldr	r3, [r3, #0]
   1ec40:	4798      	blx	r3
   1ec42:	2800      	cmp	r0, #0
   1ec44:	bf18      	it	ne
   1ec46:	f06f 051d 	mvnne.w	r5, #29
   1ec4a:	4628      	mov	r0, r5
   1ec4c:	b008      	add	sp, #32
   1ec4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ec52:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1ec56:	466e      	mov	r6, sp
   1ec58:	e7eb      	b.n	1ec32 <cc_mbedtls_entropy_func+0x72>
   1ec5a:	4650      	mov	r0, sl
   1ec5c:	f000 fd6a 	bl	1f734 <cc_mbedtls_sha256_free>
   1ec60:	4650      	mov	r0, sl
   1ec62:	f000 fd53 	bl	1f70c <cc_mbedtls_sha256_init>
   1ec66:	4629      	mov	r1, r5
   1ec68:	4650      	mov	r0, sl
   1ec6a:	f000 fd69 	bl	1f740 <cc_mbedtls_sha256_starts_ret>
   1ec6e:	4605      	mov	r5, r0
   1ec70:	2800      	cmp	r0, #0
   1ec72:	d1de      	bne.n	1ec32 <cc_mbedtls_entropy_func+0x72>
   1ec74:	4650      	mov	r0, sl
   1ec76:	2220      	movs	r2, #32
   1ec78:	4631      	mov	r1, r6
   1ec7a:	f000 fd75 	bl	1f768 <cc_mbedtls_sha256_update_ret>
   1ec7e:	4605      	mov	r5, r0
   1ec80:	2800      	cmp	r0, #0
   1ec82:	d1d6      	bne.n	1ec32 <cc_mbedtls_entropy_func+0x72>
   1ec84:	4603      	mov	r3, r0
   1ec86:	4632      	mov	r2, r6
   1ec88:	2120      	movs	r1, #32
   1ec8a:	4630      	mov	r0, r6
   1ec8c:	f001 f9e8 	bl	20060 <cc_mbedtls_sha256_ret>
   1ec90:	4605      	mov	r5, r0
   1ec92:	2800      	cmp	r0, #0
   1ec94:	d1cd      	bne.n	1ec32 <cc_mbedtls_entropy_func+0x72>
   1ec96:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1ec9a:	2b00      	cmp	r3, #0
   1ec9c:	bfc4      	itt	gt
   1ec9e:	2300      	movgt	r3, #0
   1eca0:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   1eca4:	463a      	mov	r2, r7
   1eca6:	4640      	mov	r0, r8
   1eca8:	4631      	mov	r1, r6
   1ecaa:	f003 fec0 	bl	22a2e <memcpy>
   1ecae:	e7c0      	b.n	1ec32 <cc_mbedtls_entropy_func+0x72>
   1ecb0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1ecb4:	466e      	mov	r6, sp
   1ecb6:	e7bc      	b.n	1ec32 <cc_mbedtls_entropy_func+0x72>
   1ecb8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1ecbc:	e7c5      	b.n	1ec4a <cc_mbedtls_entropy_func+0x8a>
   1ecbe:	bf00      	nop
   1ecc0:	20000768 	.word	0x20000768
   1ecc4:	2000076c 	.word	0x2000076c

0001ecc8 <RndStartupTest.constprop.0>:
   1ecc8:	b530      	push	{r4, r5, lr}
   1ecca:	b08d      	sub	sp, #52	; 0x34
   1eccc:	2100      	movs	r1, #0
   1ecce:	2228      	movs	r2, #40	; 0x28
   1ecd0:	a802      	add	r0, sp, #8
   1ecd2:	9101      	str	r1, [sp, #4]
   1ecd4:	f003 fecf 	bl	22a76 <memset>
   1ecd8:	a802      	add	r0, sp, #8
   1ecda:	f001 f9e9 	bl	200b0 <RNG_PLAT_SetUserRngParameters>
   1ecde:	4604      	mov	r4, r0
   1ece0:	b110      	cbz	r0, 1ece8 <RndStartupTest.constprop.0+0x20>
   1ece2:	4620      	mov	r0, r4
   1ece4:	b00d      	add	sp, #52	; 0x34
   1ece6:	bd30      	pop	{r4, r5, pc}
   1ece8:	4d18      	ldr	r5, [pc, #96]	; (1ed4c <RndStartupTest.constprop.0+0x84>)
   1ecea:	f04f 31ff 	mov.w	r1, #4294967295
   1ecee:	6828      	ldr	r0, [r5, #0]
   1ecf0:	f000 f93c 	bl	1ef6c <CC_PalMutexLock>
   1ecf4:	4604      	mov	r4, r0
   1ecf6:	b9c0      	cbnz	r0, 1ed2a <RndStartupTest.constprop.0+0x62>
   1ecf8:	2000      	movs	r0, #0
   1ecfa:	f000 f967 	bl	1efcc <CC_PalPowerSaveModeSelect>
   1ecfe:	bb00      	cbnz	r0, 1ed42 <RndStartupTest.constprop.0+0x7a>
   1ed00:	4a13      	ldr	r2, [pc, #76]	; (1ed50 <RndStartupTest.constprop.0+0x88>)
   1ed02:	a902      	add	r1, sp, #8
   1ed04:	a801      	add	r0, sp, #4
   1ed06:	f000 fc6b 	bl	1f5e0 <LLF_RND_RunTrngStartupTest>
   1ed0a:	4604      	mov	r4, r0
   1ed0c:	2001      	movs	r0, #1
   1ed0e:	f000 f95d 	bl	1efcc <CC_PalPowerSaveModeSelect>
   1ed12:	b990      	cbnz	r0, 1ed3a <RndStartupTest.constprop.0+0x72>
   1ed14:	6828      	ldr	r0, [r5, #0]
   1ed16:	f000 f931 	bl	1ef7c <CC_PalMutexUnlock>
   1ed1a:	2800      	cmp	r0, #0
   1ed1c:	d0e1      	beq.n	1ece2 <RndStartupTest.constprop.0+0x1a>
   1ed1e:	480d      	ldr	r0, [pc, #52]	; (1ed54 <RndStartupTest.constprop.0+0x8c>)
   1ed20:	f7ff fd8e 	bl	1e840 <CC_PalAbort>
   1ed24:	4620      	mov	r0, r4
   1ed26:	b00d      	add	sp, #52	; 0x34
   1ed28:	bd30      	pop	{r4, r5, pc}
   1ed2a:	480b      	ldr	r0, [pc, #44]	; (1ed58 <RndStartupTest.constprop.0+0x90>)
   1ed2c:	f7ff fd88 	bl	1e840 <CC_PalAbort>
   1ed30:	2c01      	cmp	r4, #1
   1ed32:	bf08      	it	eq
   1ed34:	2405      	moveq	r4, #5
   1ed36:	d0ed      	beq.n	1ed14 <RndStartupTest.constprop.0+0x4c>
   1ed38:	e7de      	b.n	1ecf8 <RndStartupTest.constprop.0+0x30>
   1ed3a:	4808      	ldr	r0, [pc, #32]	; (1ed5c <RndStartupTest.constprop.0+0x94>)
   1ed3c:	f7ff fd80 	bl	1e840 <CC_PalAbort>
   1ed40:	e7e8      	b.n	1ed14 <RndStartupTest.constprop.0+0x4c>
   1ed42:	4807      	ldr	r0, [pc, #28]	; (1ed60 <RndStartupTest.constprop.0+0x98>)
   1ed44:	f7ff fd7c 	bl	1e840 <CC_PalAbort>
   1ed48:	e7da      	b.n	1ed00 <RndStartupTest.constprop.0+0x38>
   1ed4a:	bf00      	nop
   1ed4c:	20000760 	.word	0x20000760
   1ed50:	20006200 	.word	0x20006200
   1ed54:	0002904c 	.word	0x0002904c
   1ed58:	00028ff4 	.word	0x00028ff4
   1ed5c:	0002902c 	.word	0x0002902c
   1ed60:	0002900c 	.word	0x0002900c

0001ed64 <CC_LibInit>:
   1ed64:	b510      	push	{r4, lr}
   1ed66:	b082      	sub	sp, #8
   1ed68:	f000 f854 	bl	1ee14 <CC_HalInit>
   1ed6c:	b128      	cbz	r0, 1ed7a <CC_LibInit+0x16>
   1ed6e:	f000 f8a3 	bl	1eeb8 <CC_PalTerminate>
   1ed72:	2403      	movs	r4, #3
   1ed74:	4620      	mov	r0, r4
   1ed76:	b002      	add	sp, #8
   1ed78:	bd10      	pop	{r4, pc}
   1ed7a:	f000 f86f 	bl	1ee5c <CC_PalInit>
   1ed7e:	b9d0      	cbnz	r0, 1edb6 <CC_LibInit+0x52>
   1ed80:	f000 f924 	bl	1efcc <CC_PalPowerSaveModeSelect>
   1ed84:	b9d8      	cbnz	r0, 1edbe <CC_LibInit+0x5a>
   1ed86:	4b1e      	ldr	r3, [pc, #120]	; (1ee00 <CC_LibInit+0x9c>)
   1ed88:	681b      	ldr	r3, [r3, #0]
   1ed8a:	0e1b      	lsrs	r3, r3, #24
   1ed8c:	2bf0      	cmp	r3, #240	; 0xf0
   1ed8e:	d10a      	bne.n	1eda6 <CC_LibInit+0x42>
   1ed90:	4a1c      	ldr	r2, [pc, #112]	; (1ee04 <CC_LibInit+0xa0>)
   1ed92:	4b1d      	ldr	r3, [pc, #116]	; (1ee08 <CC_LibInit+0xa4>)
   1ed94:	6812      	ldr	r2, [r2, #0]
   1ed96:	429a      	cmp	r2, r3
   1ed98:	d029      	beq.n	1edee <CC_LibInit+0x8a>
   1ed9a:	f000 f83d 	bl	1ee18 <CC_HalTerminate>
   1ed9e:	2407      	movs	r4, #7
   1eda0:	f000 f88a 	bl	1eeb8 <CC_PalTerminate>
   1eda4:	e7e6      	b.n	1ed74 <CC_LibInit+0x10>
   1eda6:	f000 f837 	bl	1ee18 <CC_HalTerminate>
   1edaa:	f000 f885 	bl	1eeb8 <CC_PalTerminate>
   1edae:	2406      	movs	r4, #6
   1edb0:	4620      	mov	r0, r4
   1edb2:	b002      	add	sp, #8
   1edb4:	bd10      	pop	{r4, pc}
   1edb6:	2404      	movs	r4, #4
   1edb8:	4620      	mov	r0, r4
   1edba:	b002      	add	sp, #8
   1edbc:	bd10      	pop	{r4, pc}
   1edbe:	f000 f82b 	bl	1ee18 <CC_HalTerminate>
   1edc2:	f000 f879 	bl	1eeb8 <CC_PalTerminate>
   1edc6:	f7ff ff7f 	bl	1ecc8 <RndStartupTest.constprop.0>
   1edca:	4604      	mov	r4, r0
   1edcc:	b958      	cbnz	r0, 1ede6 <CC_LibInit+0x82>
   1edce:	4602      	mov	r2, r0
   1edd0:	4601      	mov	r1, r0
   1edd2:	f7ff fd5d 	bl	1e890 <nrf_cc3xx_platform_ctr_drbg_init>
   1edd6:	b930      	cbnz	r0, 1ede6 <CC_LibInit+0x82>
   1edd8:	490c      	ldr	r1, [pc, #48]	; (1ee0c <CC_LibInit+0xa8>)
   1edda:	ab01      	add	r3, sp, #4
   1eddc:	2268      	movs	r2, #104	; 0x68
   1edde:	f7ff fd8b 	bl	1e8f8 <nrf_cc3xx_platform_ctr_drbg_get>
   1ede2:	2800      	cmp	r0, #0
   1ede4:	d0c6      	beq.n	1ed74 <CC_LibInit+0x10>
   1ede6:	2405      	movs	r4, #5
   1ede8:	4620      	mov	r0, r4
   1edea:	b002      	add	sp, #8
   1edec:	bd10      	pop	{r4, pc}
   1edee:	2001      	movs	r0, #1
   1edf0:	f000 f8ec 	bl	1efcc <CC_PalPowerSaveModeSelect>
   1edf4:	2800      	cmp	r0, #0
   1edf6:	d1e2      	bne.n	1edbe <CC_LibInit+0x5a>
   1edf8:	4b05      	ldr	r3, [pc, #20]	; (1ee10 <CC_LibInit+0xac>)
   1edfa:	6018      	str	r0, [r3, #0]
   1edfc:	e7e3      	b.n	1edc6 <CC_LibInit+0x62>
   1edfe:	bf00      	nop
   1ee00:	5002b928 	.word	0x5002b928
   1ee04:	5002ba24 	.word	0x5002ba24
   1ee08:	20e00000 	.word	0x20e00000
   1ee0c:	20006198 	.word	0x20006198
   1ee10:	5002ba0c 	.word	0x5002ba0c

0001ee14 <CC_HalInit>:
   1ee14:	2000      	movs	r0, #0
   1ee16:	4770      	bx	lr

0001ee18 <CC_HalTerminate>:
   1ee18:	2000      	movs	r0, #0
   1ee1a:	4770      	bx	lr

0001ee1c <CC_HalClearInterruptBit>:
   1ee1c:	0543      	lsls	r3, r0, #21
   1ee1e:	d503      	bpl.n	1ee28 <CC_HalClearInterruptBit+0xc>
   1ee20:	4b03      	ldr	r3, [pc, #12]	; (1ee30 <CC_HalClearInterruptBit+0x14>)
   1ee22:	f04f 32ff 	mov.w	r2, #4294967295
   1ee26:	601a      	str	r2, [r3, #0]
   1ee28:	4b02      	ldr	r3, [pc, #8]	; (1ee34 <CC_HalClearInterruptBit+0x18>)
   1ee2a:	6018      	str	r0, [r3, #0]
   1ee2c:	4770      	bx	lr
   1ee2e:	bf00      	nop
   1ee30:	5002b108 	.word	0x5002b108
   1ee34:	5002ba08 	.word	0x5002ba08

0001ee38 <CC_HalMaskInterrupt>:
   1ee38:	4b01      	ldr	r3, [pc, #4]	; (1ee40 <CC_HalMaskInterrupt+0x8>)
   1ee3a:	6018      	str	r0, [r3, #0]
   1ee3c:	4770      	bx	lr
   1ee3e:	bf00      	nop
   1ee40:	5002ba04 	.word	0x5002ba04

0001ee44 <CC_HalWaitInterrupt>:
   1ee44:	b108      	cbz	r0, 1ee4a <CC_HalWaitInterrupt+0x6>
   1ee46:	f000 b86f 	b.w	1ef28 <CC_PalWaitInterrupt>
   1ee4a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1ee4e:	4770      	bx	lr

0001ee50 <CC_HalWaitInterruptRND>:
   1ee50:	b108      	cbz	r0, 1ee56 <CC_HalWaitInterruptRND+0x6>
   1ee52:	f000 b84f 	b.w	1eef4 <CC_PalWaitInterruptRND>
   1ee56:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1ee5a:	4770      	bx	lr

0001ee5c <CC_PalInit>:
   1ee5c:	b510      	push	{r4, lr}
   1ee5e:	4811      	ldr	r0, [pc, #68]	; (1eea4 <CC_PalInit+0x48>)
   1ee60:	f000 f870 	bl	1ef44 <CC_PalMutexCreate>
   1ee64:	b100      	cbz	r0, 1ee68 <CC_PalInit+0xc>
   1ee66:	bd10      	pop	{r4, pc}
   1ee68:	480f      	ldr	r0, [pc, #60]	; (1eea8 <CC_PalInit+0x4c>)
   1ee6a:	f000 f86b 	bl	1ef44 <CC_PalMutexCreate>
   1ee6e:	2800      	cmp	r0, #0
   1ee70:	d1f9      	bne.n	1ee66 <CC_PalInit+0xa>
   1ee72:	4c0e      	ldr	r4, [pc, #56]	; (1eeac <CC_PalInit+0x50>)
   1ee74:	4620      	mov	r0, r4
   1ee76:	f000 f865 	bl	1ef44 <CC_PalMutexCreate>
   1ee7a:	2800      	cmp	r0, #0
   1ee7c:	d1f3      	bne.n	1ee66 <CC_PalInit+0xa>
   1ee7e:	4b0c      	ldr	r3, [pc, #48]	; (1eeb0 <CC_PalInit+0x54>)
   1ee80:	480c      	ldr	r0, [pc, #48]	; (1eeb4 <CC_PalInit+0x58>)
   1ee82:	601c      	str	r4, [r3, #0]
   1ee84:	f000 f85e 	bl	1ef44 <CC_PalMutexCreate>
   1ee88:	4601      	mov	r1, r0
   1ee8a:	2800      	cmp	r0, #0
   1ee8c:	d1eb      	bne.n	1ee66 <CC_PalInit+0xa>
   1ee8e:	f000 f82d 	bl	1eeec <CC_PalDmaInit>
   1ee92:	4604      	mov	r4, r0
   1ee94:	b108      	cbz	r0, 1ee9a <CC_PalInit+0x3e>
   1ee96:	4620      	mov	r0, r4
   1ee98:	bd10      	pop	{r4, pc}
   1ee9a:	f000 f879 	bl	1ef90 <CC_PalPowerSaveModeInit>
   1ee9e:	4620      	mov	r0, r4
   1eea0:	e7fa      	b.n	1ee98 <CC_PalInit+0x3c>
   1eea2:	bf00      	nop
   1eea4:	2000075c 	.word	0x2000075c
   1eea8:	20000750 	.word	0x20000750
   1eeac:	20000758 	.word	0x20000758
   1eeb0:	20000760 	.word	0x20000760
   1eeb4:	20000754 	.word	0x20000754

0001eeb8 <CC_PalTerminate>:
   1eeb8:	b508      	push	{r3, lr}
   1eeba:	4808      	ldr	r0, [pc, #32]	; (1eedc <CC_PalTerminate+0x24>)
   1eebc:	f000 f84c 	bl	1ef58 <CC_PalMutexDestroy>
   1eec0:	4807      	ldr	r0, [pc, #28]	; (1eee0 <CC_PalTerminate+0x28>)
   1eec2:	f000 f849 	bl	1ef58 <CC_PalMutexDestroy>
   1eec6:	4807      	ldr	r0, [pc, #28]	; (1eee4 <CC_PalTerminate+0x2c>)
   1eec8:	f000 f846 	bl	1ef58 <CC_PalMutexDestroy>
   1eecc:	4806      	ldr	r0, [pc, #24]	; (1eee8 <CC_PalTerminate+0x30>)
   1eece:	f000 f843 	bl	1ef58 <CC_PalMutexDestroy>
   1eed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1eed6:	f000 b80b 	b.w	1eef0 <CC_PalDmaTerminate>
   1eeda:	bf00      	nop
   1eedc:	2000075c 	.word	0x2000075c
   1eee0:	20000750 	.word	0x20000750
   1eee4:	20000758 	.word	0x20000758
   1eee8:	20000754 	.word	0x20000754

0001eeec <CC_PalDmaInit>:
   1eeec:	2000      	movs	r0, #0
   1eeee:	4770      	bx	lr

0001eef0 <CC_PalDmaTerminate>:
   1eef0:	4770      	bx	lr
   1eef2:	bf00      	nop

0001eef4 <CC_PalWaitInterruptRND>:
   1eef4:	b410      	push	{r4}
   1eef6:	4c08      	ldr	r4, [pc, #32]	; (1ef18 <CC_PalWaitInterruptRND+0x24>)
   1eef8:	4602      	mov	r2, r0
   1eefa:	6823      	ldr	r3, [r4, #0]
   1eefc:	4213      	tst	r3, r2
   1eefe:	d0fc      	beq.n	1eefa <CC_PalWaitInterruptRND+0x6>
   1ef00:	b121      	cbz	r1, 1ef0c <CC_PalWaitInterruptRND+0x18>
   1ef02:	4b06      	ldr	r3, [pc, #24]	; (1ef1c <CC_PalWaitInterruptRND+0x28>)
   1ef04:	4806      	ldr	r0, [pc, #24]	; (1ef20 <CC_PalWaitInterruptRND+0x2c>)
   1ef06:	681b      	ldr	r3, [r3, #0]
   1ef08:	600b      	str	r3, [r1, #0]
   1ef0a:	6003      	str	r3, [r0, #0]
   1ef0c:	4b05      	ldr	r3, [pc, #20]	; (1ef24 <CC_PalWaitInterruptRND+0x30>)
   1ef0e:	601a      	str	r2, [r3, #0]
   1ef10:	2000      	movs	r0, #0
   1ef12:	bc10      	pop	{r4}
   1ef14:	4770      	bx	lr
   1ef16:	bf00      	nop
   1ef18:	5002ba00 	.word	0x5002ba00
   1ef1c:	5002b104 	.word	0x5002b104
   1ef20:	5002b108 	.word	0x5002b108
   1ef24:	5002ba08 	.word	0x5002ba08

0001ef28 <CC_PalWaitInterrupt>:
   1ef28:	4904      	ldr	r1, [pc, #16]	; (1ef3c <CC_PalWaitInterrupt+0x14>)
   1ef2a:	4602      	mov	r2, r0
   1ef2c:	680b      	ldr	r3, [r1, #0]
   1ef2e:	421a      	tst	r2, r3
   1ef30:	d0fc      	beq.n	1ef2c <CC_PalWaitInterrupt+0x4>
   1ef32:	4b03      	ldr	r3, [pc, #12]	; (1ef40 <CC_PalWaitInterrupt+0x18>)
   1ef34:	2000      	movs	r0, #0
   1ef36:	601a      	str	r2, [r3, #0]
   1ef38:	4770      	bx	lr
   1ef3a:	bf00      	nop
   1ef3c:	5002ba00 	.word	0x5002ba00
   1ef40:	5002ba08 	.word	0x5002ba08

0001ef44 <CC_PalMutexCreate>:
   1ef44:	b508      	push	{r3, lr}
   1ef46:	4b03      	ldr	r3, [pc, #12]	; (1ef54 <CC_PalMutexCreate+0x10>)
   1ef48:	6802      	ldr	r2, [r0, #0]
   1ef4a:	681b      	ldr	r3, [r3, #0]
   1ef4c:	6810      	ldr	r0, [r2, #0]
   1ef4e:	4798      	blx	r3
   1ef50:	2000      	movs	r0, #0
   1ef52:	bd08      	pop	{r3, pc}
   1ef54:	20000710 	.word	0x20000710

0001ef58 <CC_PalMutexDestroy>:
   1ef58:	b508      	push	{r3, lr}
   1ef5a:	4b03      	ldr	r3, [pc, #12]	; (1ef68 <CC_PalMutexDestroy+0x10>)
   1ef5c:	6802      	ldr	r2, [r0, #0]
   1ef5e:	685b      	ldr	r3, [r3, #4]
   1ef60:	6810      	ldr	r0, [r2, #0]
   1ef62:	4798      	blx	r3
   1ef64:	2000      	movs	r0, #0
   1ef66:	bd08      	pop	{r3, pc}
   1ef68:	20000710 	.word	0x20000710

0001ef6c <CC_PalMutexLock>:
   1ef6c:	4b02      	ldr	r3, [pc, #8]	; (1ef78 <CC_PalMutexLock+0xc>)
   1ef6e:	6802      	ldr	r2, [r0, #0]
   1ef70:	689b      	ldr	r3, [r3, #8]
   1ef72:	6810      	ldr	r0, [r2, #0]
   1ef74:	4718      	bx	r3
   1ef76:	bf00      	nop
   1ef78:	20000710 	.word	0x20000710

0001ef7c <CC_PalMutexUnlock>:
   1ef7c:	b508      	push	{r3, lr}
   1ef7e:	4b03      	ldr	r3, [pc, #12]	; (1ef8c <CC_PalMutexUnlock+0x10>)
   1ef80:	6802      	ldr	r2, [r0, #0]
   1ef82:	68db      	ldr	r3, [r3, #12]
   1ef84:	6810      	ldr	r0, [r2, #0]
   1ef86:	4798      	blx	r3
   1ef88:	2000      	movs	r0, #0
   1ef8a:	bd08      	pop	{r3, pc}
   1ef8c:	20000710 	.word	0x20000710

0001ef90 <CC_PalPowerSaveModeInit>:
   1ef90:	b570      	push	{r4, r5, r6, lr}
   1ef92:	4c09      	ldr	r4, [pc, #36]	; (1efb8 <CC_PalPowerSaveModeInit+0x28>)
   1ef94:	4d09      	ldr	r5, [pc, #36]	; (1efbc <CC_PalPowerSaveModeInit+0x2c>)
   1ef96:	6920      	ldr	r0, [r4, #16]
   1ef98:	68ab      	ldr	r3, [r5, #8]
   1ef9a:	4798      	blx	r3
   1ef9c:	b118      	cbz	r0, 1efa6 <CC_PalPowerSaveModeInit+0x16>
   1ef9e:	4b08      	ldr	r3, [pc, #32]	; (1efc0 <CC_PalPowerSaveModeInit+0x30>)
   1efa0:	4808      	ldr	r0, [pc, #32]	; (1efc4 <CC_PalPowerSaveModeInit+0x34>)
   1efa2:	685b      	ldr	r3, [r3, #4]
   1efa4:	4798      	blx	r3
   1efa6:	4a08      	ldr	r2, [pc, #32]	; (1efc8 <CC_PalPowerSaveModeInit+0x38>)
   1efa8:	68eb      	ldr	r3, [r5, #12]
   1efaa:	6920      	ldr	r0, [r4, #16]
   1efac:	2100      	movs	r1, #0
   1efae:	6011      	str	r1, [r2, #0]
   1efb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1efb4:	4718      	bx	r3
   1efb6:	bf00      	nop
   1efb8:	20000720 	.word	0x20000720
   1efbc:	20000710 	.word	0x20000710
   1efc0:	20000700 	.word	0x20000700
   1efc4:	00029064 	.word	0x00029064
   1efc8:	20006420 	.word	0x20006420

0001efcc <CC_PalPowerSaveModeSelect>:
   1efcc:	b570      	push	{r4, r5, r6, lr}
   1efce:	4d1a      	ldr	r5, [pc, #104]	; (1f038 <CC_PalPowerSaveModeSelect+0x6c>)
   1efd0:	4e1a      	ldr	r6, [pc, #104]	; (1f03c <CC_PalPowerSaveModeSelect+0x70>)
   1efd2:	4604      	mov	r4, r0
   1efd4:	68b2      	ldr	r2, [r6, #8]
   1efd6:	6928      	ldr	r0, [r5, #16]
   1efd8:	4790      	blx	r2
   1efda:	b9f0      	cbnz	r0, 1f01a <CC_PalPowerSaveModeSelect+0x4e>
   1efdc:	b15c      	cbz	r4, 1eff6 <CC_PalPowerSaveModeSelect+0x2a>
   1efde:	4c18      	ldr	r4, [pc, #96]	; (1f040 <CC_PalPowerSaveModeSelect+0x74>)
   1efe0:	6823      	ldr	r3, [r4, #0]
   1efe2:	b1ab      	cbz	r3, 1f010 <CC_PalPowerSaveModeSelect+0x44>
   1efe4:	2b01      	cmp	r3, #1
   1efe6:	d01a      	beq.n	1f01e <CC_PalPowerSaveModeSelect+0x52>
   1efe8:	3b01      	subs	r3, #1
   1efea:	6023      	str	r3, [r4, #0]
   1efec:	6928      	ldr	r0, [r5, #16]
   1efee:	68f3      	ldr	r3, [r6, #12]
   1eff0:	4798      	blx	r3
   1eff2:	2000      	movs	r0, #0
   1eff4:	bd70      	pop	{r4, r5, r6, pc}
   1eff6:	4c12      	ldr	r4, [pc, #72]	; (1f040 <CC_PalPowerSaveModeSelect+0x74>)
   1eff8:	6821      	ldr	r1, [r4, #0]
   1effa:	b939      	cbnz	r1, 1f00c <CC_PalPowerSaveModeSelect+0x40>
   1effc:	4b11      	ldr	r3, [pc, #68]	; (1f044 <CC_PalPowerSaveModeSelect+0x78>)
   1effe:	4a12      	ldr	r2, [pc, #72]	; (1f048 <CC_PalPowerSaveModeSelect+0x7c>)
   1f000:	2001      	movs	r0, #1
   1f002:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1f006:	6813      	ldr	r3, [r2, #0]
   1f008:	2b00      	cmp	r3, #0
   1f00a:	d1fc      	bne.n	1f006 <CC_PalPowerSaveModeSelect+0x3a>
   1f00c:	3101      	adds	r1, #1
   1f00e:	6021      	str	r1, [r4, #0]
   1f010:	68f3      	ldr	r3, [r6, #12]
   1f012:	6928      	ldr	r0, [r5, #16]
   1f014:	4798      	blx	r3
   1f016:	2000      	movs	r0, #0
   1f018:	bd70      	pop	{r4, r5, r6, pc}
   1f01a:	480c      	ldr	r0, [pc, #48]	; (1f04c <CC_PalPowerSaveModeSelect+0x80>)
   1f01c:	bd70      	pop	{r4, r5, r6, pc}
   1f01e:	4a0a      	ldr	r2, [pc, #40]	; (1f048 <CC_PalPowerSaveModeSelect+0x7c>)
   1f020:	6813      	ldr	r3, [r2, #0]
   1f022:	2b00      	cmp	r3, #0
   1f024:	d1fc      	bne.n	1f020 <CC_PalPowerSaveModeSelect+0x54>
   1f026:	4a07      	ldr	r2, [pc, #28]	; (1f044 <CC_PalPowerSaveModeSelect+0x78>)
   1f028:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1f02c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1f030:	f7ff ff02 	bl	1ee38 <CC_HalMaskInterrupt>
   1f034:	6823      	ldr	r3, [r4, #0]
   1f036:	e7d7      	b.n	1efe8 <CC_PalPowerSaveModeSelect+0x1c>
   1f038:	20000720 	.word	0x20000720
   1f03c:	20000710 	.word	0x20000710
   1f040:	20006420 	.word	0x20006420
   1f044:	5002a000 	.word	0x5002a000
   1f048:	5002b910 	.word	0x5002b910
   1f04c:	ffff8fe9 	.word	0xffff8fe9

0001f050 <mutex_init>:
   1f050:	4b01      	ldr	r3, [pc, #4]	; (1f058 <mutex_init+0x8>)
   1f052:	681b      	ldr	r3, [r3, #0]
   1f054:	4718      	bx	r3
   1f056:	bf00      	nop
   1f058:	20000710 	.word	0x20000710

0001f05c <mutex_lock>:
   1f05c:	4b01      	ldr	r3, [pc, #4]	; (1f064 <mutex_lock+0x8>)
   1f05e:	689b      	ldr	r3, [r3, #8]
   1f060:	4718      	bx	r3
   1f062:	bf00      	nop
   1f064:	20000710 	.word	0x20000710

0001f068 <mutex_unlock>:
   1f068:	4b01      	ldr	r3, [pc, #4]	; (1f070 <mutex_unlock+0x8>)
   1f06a:	68db      	ldr	r3, [r3, #12]
   1f06c:	4718      	bx	r3
   1f06e:	bf00      	nop
   1f070:	20000710 	.word	0x20000710

0001f074 <startTrngHW>:
   1f074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f078:	2800      	cmp	r0, #0
   1f07a:	d077      	beq.n	1f16c <startTrngHW+0xf8>
   1f07c:	460c      	mov	r4, r1
   1f07e:	2900      	cmp	r1, #0
   1f080:	d074      	beq.n	1f16c <startTrngHW+0xf8>
   1f082:	461d      	mov	r5, r3
   1f084:	2b00      	cmp	r3, #0
   1f086:	d071      	beq.n	1f16c <startTrngHW+0xf8>
   1f088:	4606      	mov	r6, r0
   1f08a:	b11a      	cbz	r2, 1f094 <startTrngHW+0x20>
   1f08c:	2201      	movs	r2, #1
   1f08e:	2300      	movs	r3, #0
   1f090:	602a      	str	r2, [r5, #0]
   1f092:	6003      	str	r3, [r0, #0]
   1f094:	682b      	ldr	r3, [r5, #0]
   1f096:	2b00      	cmp	r3, #0
   1f098:	d064      	beq.n	1f164 <startTrngHW+0xf0>
   1f09a:	4629      	mov	r1, r5
   1f09c:	4620      	mov	r0, r4
   1f09e:	f001 f8cd 	bl	2023c <LLF_RND_GetFastestRosc>
   1f0a2:	4607      	mov	r7, r0
   1f0a4:	2800      	cmp	r0, #0
   1f0a6:	d15e      	bne.n	1f166 <startTrngHW+0xf2>
   1f0a8:	6828      	ldr	r0, [r5, #0]
   1f0aa:	4621      	mov	r1, r4
   1f0ac:	f001 f8a8 	bl	20200 <LLF_RND_GetRoscSampleCnt>
   1f0b0:	4607      	mov	r7, r0
   1f0b2:	2800      	cmp	r0, #0
   1f0b4:	d157      	bne.n	1f166 <startTrngHW+0xf2>
   1f0b6:	682b      	ldr	r3, [r5, #0]
   1f0b8:	2b08      	cmp	r3, #8
   1f0ba:	d066      	beq.n	1f18a <startTrngHW+0x116>
   1f0bc:	2b04      	cmp	r3, #4
   1f0be:	d067      	beq.n	1f190 <startTrngHW+0x11c>
   1f0c0:	f1a3 0802 	sub.w	r8, r3, #2
   1f0c4:	fab8 f888 	clz	r8, r8
   1f0c8:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1f0cc:	4b32      	ldr	r3, [pc, #200]	; (1f198 <startTrngHW+0x124>)
   1f0ce:	4933      	ldr	r1, [pc, #204]	; (1f19c <startTrngHW+0x128>)
   1f0d0:	4a33      	ldr	r2, [pc, #204]	; (1f1a0 <startTrngHW+0x12c>)
   1f0d2:	2001      	movs	r0, #1
   1f0d4:	6018      	str	r0, [r3, #0]
   1f0d6:	469c      	mov	ip, r3
   1f0d8:	6008      	str	r0, [r1, #0]
   1f0da:	f8cc 0000 	str.w	r0, [ip]
   1f0de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f0e0:	6013      	str	r3, [r2, #0]
   1f0e2:	6811      	ldr	r1, [r2, #0]
   1f0e4:	428b      	cmp	r3, r1
   1f0e6:	d1f8      	bne.n	1f0da <startTrngHW+0x66>
   1f0e8:	4b2e      	ldr	r3, [pc, #184]	; (1f1a4 <startTrngHW+0x130>)
   1f0ea:	f04f 0900 	mov.w	r9, #0
   1f0ee:	f8c3 9000 	str.w	r9, [r3]
   1f0f2:	f04f 30ff 	mov.w	r0, #4294967295
   1f0f6:	f7ff fe91 	bl	1ee1c <CC_HalClearInterruptBit>
   1f0fa:	4b2b      	ldr	r3, [pc, #172]	; (1f1a8 <startTrngHW+0x134>)
   1f0fc:	f06f 021b 	mvn.w	r2, #27
   1f100:	601a      	str	r2, [r3, #0]
   1f102:	4648      	mov	r0, r9
   1f104:	f7ff fe98 	bl	1ee38 <CC_HalMaskInterrupt>
   1f108:	4a28      	ldr	r2, [pc, #160]	; (1f1ac <startTrngHW+0x138>)
   1f10a:	4b29      	ldr	r3, [pc, #164]	; (1f1b0 <startTrngHW+0x13c>)
   1f10c:	f8c2 8000 	str.w	r8, [r2]
   1f110:	6818      	ldr	r0, [r3, #0]
   1f112:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1f116:	f7ff fe8f 	bl	1ee38 <CC_HalMaskInterrupt>
   1f11a:	4b26      	ldr	r3, [pc, #152]	; (1f1b4 <startTrngHW+0x140>)
   1f11c:	220a      	movs	r2, #10
   1f11e:	601a      	str	r2, [r3, #0]
   1f120:	9908      	ldr	r1, [sp, #32]
   1f122:	6923      	ldr	r3, [r4, #16]
   1f124:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1f126:	2901      	cmp	r1, #1
   1f128:	d024      	beq.n	1f174 <startTrngHW+0x100>
   1f12a:	4923      	ldr	r1, [pc, #140]	; (1f1b8 <startTrngHW+0x144>)
   1f12c:	fba1 1303 	umull	r1, r3, r1, r3
   1f130:	091b      	lsrs	r3, r3, #4
   1f132:	fb03 f302 	mul.w	r3, r3, r2
   1f136:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f13a:	4920      	ldr	r1, [pc, #128]	; (1f1bc <startTrngHW+0x148>)
   1f13c:	4a19      	ldr	r2, [pc, #100]	; (1f1a4 <startTrngHW+0x130>)
   1f13e:	03db      	lsls	r3, r3, #15
   1f140:	099b      	lsrs	r3, r3, #6
   1f142:	600b      	str	r3, [r1, #0]
   1f144:	2301      	movs	r3, #1
   1f146:	6013      	str	r3, [r2, #0]
   1f148:	6833      	ldr	r3, [r6, #0]
   1f14a:	682a      	ldr	r2, [r5, #0]
   1f14c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f150:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1f154:	6033      	str	r3, [r6, #0]
   1f156:	682a      	ldr	r2, [r5, #0]
   1f158:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f15c:	6033      	str	r3, [r6, #0]
   1f15e:	4638      	mov	r0, r7
   1f160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f164:	4f16      	ldr	r7, [pc, #88]	; (1f1c0 <startTrngHW+0x14c>)
   1f166:	4638      	mov	r0, r7
   1f168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f16c:	4f15      	ldr	r7, [pc, #84]	; (1f1c4 <startTrngHW+0x150>)
   1f16e:	4638      	mov	r0, r7
   1f170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f174:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f178:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   1f17c:	3101      	adds	r1, #1
   1f17e:	d002      	beq.n	1f186 <startTrngHW+0x112>
   1f180:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1f184:	e7d1      	b.n	1f12a <startTrngHW+0xb6>
   1f186:	2316      	movs	r3, #22
   1f188:	e7d3      	b.n	1f132 <startTrngHW+0xbe>
   1f18a:	f04f 0803 	mov.w	r8, #3
   1f18e:	e79d      	b.n	1f0cc <startTrngHW+0x58>
   1f190:	f04f 0802 	mov.w	r8, #2
   1f194:	e79a      	b.n	1f0cc <startTrngHW+0x58>
   1f196:	bf00      	nop
   1f198:	5002b1c4 	.word	0x5002b1c4
   1f19c:	5002b140 	.word	0x5002b140
   1f1a0:	5002b130 	.word	0x5002b130
   1f1a4:	5002b12c 	.word	0x5002b12c
   1f1a8:	5002b100 	.word	0x5002b100
   1f1ac:	5002b10c 	.word	0x5002b10c
   1f1b0:	5002ba04 	.word	0x5002ba04
   1f1b4:	5002b138 	.word	0x5002b138
   1f1b8:	aaaaaaab 	.word	0xaaaaaaab
   1f1bc:	5002b1d8 	.word	0x5002b1d8
   1f1c0:	00f10c31 	.word	0x00f10c31
   1f1c4:	00f10c35 	.word	0x00f10c35

0001f1c8 <LLF_RND_RepetitionCounterTest.part.0>:
   1f1c8:	b4f0      	push	{r4, r5, r6, r7}
   1f1ca:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   1f1ce:	2400      	movs	r4, #0
   1f1d0:	f10c 3cff 	add.w	ip, ip, #4294967295
   1f1d4:	4626      	mov	r6, r4
   1f1d6:	4627      	mov	r7, r4
   1f1d8:	e006      	b.n	1f1e8 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   1f1da:	429f      	cmp	r7, r3
   1f1dc:	d016      	beq.n	1f20c <LLF_RND_RepetitionCounterTest.part.0+0x44>
   1f1de:	2601      	movs	r6, #1
   1f1e0:	4565      	cmp	r5, ip
   1f1e2:	d819      	bhi.n	1f218 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   1f1e4:	462c      	mov	r4, r5
   1f1e6:	461f      	mov	r7, r3
   1f1e8:	0963      	lsrs	r3, r4, #5
   1f1ea:	f004 011f 	and.w	r1, r4, #31
   1f1ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1f1f2:	291f      	cmp	r1, #31
   1f1f4:	fa23 f301 	lsr.w	r3, r3, r1
   1f1f8:	f104 0501 	add.w	r5, r4, #1
   1f1fc:	bf18      	it	ne
   1f1fe:	f003 0301 	andne.w	r3, r3, #1
   1f202:	2c00      	cmp	r4, #0
   1f204:	d1e9      	bne.n	1f1da <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1f206:	2601      	movs	r6, #1
   1f208:	4635      	mov	r5, r6
   1f20a:	e7eb      	b.n	1f1e4 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1f20c:	3601      	adds	r6, #1
   1f20e:	4296      	cmp	r6, r2
   1f210:	d1e6      	bne.n	1f1e0 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1f212:	4803      	ldr	r0, [pc, #12]	; (1f220 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   1f214:	bcf0      	pop	{r4, r5, r6, r7}
   1f216:	4770      	bx	lr
   1f218:	2000      	movs	r0, #0
   1f21a:	bcf0      	pop	{r4, r5, r6, r7}
   1f21c:	4770      	bx	lr
   1f21e:	bf00      	nop
   1f220:	00f10c36 	.word	0x00f10c36

0001f224 <LLF_RND_AdaptiveProportionTest>:
   1f224:	2800      	cmp	r0, #0
   1f226:	d061      	beq.n	1f2ec <LLF_RND_AdaptiveProportionTest+0xc8>
   1f228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f22c:	1e4c      	subs	r4, r1, #1
   1f22e:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1f232:	d227      	bcs.n	1f284 <LLF_RND_AdaptiveProportionTest+0x60>
   1f234:	b333      	cbz	r3, 1f284 <LLF_RND_AdaptiveProportionTest+0x60>
   1f236:	b32a      	cbz	r2, 1f284 <LLF_RND_AdaptiveProportionTest+0x60>
   1f238:	00cd      	lsls	r5, r1, #3
   1f23a:	2b01      	cmp	r3, #1
   1f23c:	f105 3eff 	add.w	lr, r5, #4294967295
   1f240:	d030      	beq.n	1f2a4 <LLF_RND_AdaptiveProportionTest+0x80>
   1f242:	2100      	movs	r1, #0
   1f244:	468c      	mov	ip, r1
   1f246:	460f      	mov	r7, r1
   1f248:	460e      	mov	r6, r1
   1f24a:	f103 38ff 	add.w	r8, r3, #4294967295
   1f24e:	094c      	lsrs	r4, r1, #5
   1f250:	f001 051f 	and.w	r5, r1, #31
   1f254:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1f258:	2d1f      	cmp	r5, #31
   1f25a:	fa24 f405 	lsr.w	r4, r4, r5
   1f25e:	bf18      	it	ne
   1f260:	f004 0401 	andne.w	r4, r4, #1
   1f264:	b921      	cbnz	r1, 1f270 <LLF_RND_AdaptiveProportionTest+0x4c>
   1f266:	2601      	movs	r6, #1
   1f268:	46b4      	mov	ip, r6
   1f26a:	4631      	mov	r1, r6
   1f26c:	4627      	mov	r7, r4
   1f26e:	e7ee      	b.n	1f24e <LLF_RND_AdaptiveProportionTest+0x2a>
   1f270:	42b3      	cmp	r3, r6
   1f272:	d013      	beq.n	1f29c <LLF_RND_AdaptiveProportionTest+0x78>
   1f274:	42a7      	cmp	r7, r4
   1f276:	d101      	bne.n	1f27c <LLF_RND_AdaptiveProportionTest+0x58>
   1f278:	f10c 0c01 	add.w	ip, ip, #1
   1f27c:	4546      	cmp	r6, r8
   1f27e:	d104      	bne.n	1f28a <LLF_RND_AdaptiveProportionTest+0x66>
   1f280:	4562      	cmp	r2, ip
   1f282:	d202      	bcs.n	1f28a <LLF_RND_AdaptiveProportionTest+0x66>
   1f284:	481a      	ldr	r0, [pc, #104]	; (1f2f0 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1f286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f28a:	463c      	mov	r4, r7
   1f28c:	3101      	adds	r1, #1
   1f28e:	458e      	cmp	lr, r1
   1f290:	f106 0601 	add.w	r6, r6, #1
   1f294:	d2ea      	bcs.n	1f26c <LLF_RND_AdaptiveProportionTest+0x48>
   1f296:	2000      	movs	r0, #0
   1f298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f29c:	2600      	movs	r6, #0
   1f29e:	f04f 0c01 	mov.w	ip, #1
   1f2a2:	e7f3      	b.n	1f28c <LLF_RND_AdaptiveProportionTest+0x68>
   1f2a4:	2600      	movs	r6, #0
   1f2a6:	46b4      	mov	ip, r6
   1f2a8:	4637      	mov	r7, r6
   1f2aa:	4634      	mov	r4, r6
   1f2ac:	0961      	lsrs	r1, r4, #5
   1f2ae:	f004 031f 	and.w	r3, r4, #31
   1f2b2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1f2b6:	2b1f      	cmp	r3, #31
   1f2b8:	fa21 f103 	lsr.w	r1, r1, r3
   1f2bc:	bf18      	it	ne
   1f2be:	f001 0101 	andne.w	r1, r1, #1
   1f2c2:	b13c      	cbz	r4, 1f2d4 <LLF_RND_AdaptiveProportionTest+0xb0>
   1f2c4:	b95f      	cbnz	r7, 1f2de <LLF_RND_AdaptiveProportionTest+0xba>
   1f2c6:	458c      	cmp	ip, r1
   1f2c8:	d001      	beq.n	1f2ce <LLF_RND_AdaptiveProportionTest+0xaa>
   1f2ca:	4661      	mov	r1, ip
   1f2cc:	e008      	b.n	1f2e0 <LLF_RND_AdaptiveProportionTest+0xbc>
   1f2ce:	3601      	adds	r6, #1
   1f2d0:	4661      	mov	r1, ip
   1f2d2:	e005      	b.n	1f2e0 <LLF_RND_AdaptiveProportionTest+0xbc>
   1f2d4:	2601      	movs	r6, #1
   1f2d6:	4634      	mov	r4, r6
   1f2d8:	468c      	mov	ip, r1
   1f2da:	2701      	movs	r7, #1
   1f2dc:	e7e6      	b.n	1f2ac <LLF_RND_AdaptiveProportionTest+0x88>
   1f2de:	463e      	mov	r6, r7
   1f2e0:	42b2      	cmp	r2, r6
   1f2e2:	d3cf      	bcc.n	1f284 <LLF_RND_AdaptiveProportionTest+0x60>
   1f2e4:	3401      	adds	r4, #1
   1f2e6:	42ac      	cmp	r4, r5
   1f2e8:	d1f6      	bne.n	1f2d8 <LLF_RND_AdaptiveProportionTest+0xb4>
   1f2ea:	e7d4      	b.n	1f296 <LLF_RND_AdaptiveProportionTest+0x72>
   1f2ec:	4800      	ldr	r0, [pc, #0]	; (1f2f0 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1f2ee:	4770      	bx	lr
   1f2f0:	00f10c37 	.word	0x00f10c37

0001f2f4 <getTrngSource>:
   1f2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2f8:	b08d      	sub	sp, #52	; 0x34
   1f2fa:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   1f2fe:	4607      	mov	r7, r0
   1f300:	460c      	mov	r4, r1
   1f302:	2d00      	cmp	r5, #0
   1f304:	d14c      	bne.n	1f3a0 <getTrngSource+0xac>
   1f306:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1f30a:	601e      	str	r6, [r3, #0]
   1f30c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1f30e:	2100      	movs	r1, #0
   1f310:	6019      	str	r1, [r3, #0]
   1f312:	2a00      	cmp	r2, #0
   1f314:	f000 811f 	beq.w	1f556 <getTrngSource+0x262>
   1f318:	4a9b      	ldr	r2, [pc, #620]	; (1f588 <getTrngSource+0x294>)
   1f31a:	4b9c      	ldr	r3, [pc, #624]	; (1f58c <getTrngSource+0x298>)
   1f31c:	6811      	ldr	r1, [r2, #0]
   1f31e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1f320:	681b      	ldr	r3, [r3, #0]
   1f322:	429a      	cmp	r2, r3
   1f324:	d147      	bne.n	1f3b6 <getTrngSource+0xc2>
   1f326:	290a      	cmp	r1, #10
   1f328:	d145      	bne.n	1f3b6 <getTrngSource+0xc2>
   1f32a:	78fb      	ldrb	r3, [r7, #3]
   1f32c:	9304      	str	r3, [sp, #16]
   1f32e:	4b98      	ldr	r3, [pc, #608]	; (1f590 <getTrngSource+0x29c>)
   1f330:	fba3 230a 	umull	r2, r3, r3, sl
   1f334:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   1f338:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1f33c:	f106 0208 	add.w	r2, r6, #8
   1f340:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   1f344:	2304      	movs	r3, #4
   1f346:	9203      	str	r2, [sp, #12]
   1f348:	9302      	str	r3, [sp, #8]
   1f34a:	46b8      	mov	r8, r7
   1f34c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1f34e:	f8c3 a000 	str.w	sl, [r3]
   1f352:	f1ba 0f00 	cmp.w	sl, #0
   1f356:	f000 80c4 	beq.w	1f4e2 <getTrngSource+0x1ee>
   1f35a:	9e03      	ldr	r6, [sp, #12]
   1f35c:	4655      	mov	r5, sl
   1f35e:	f04f 0900 	mov.w	r9, #0
   1f362:	f000 ff7b 	bl	2025c <LLF_RND_TurnOffTrng>
   1f366:	2300      	movs	r3, #0
   1f368:	9305      	str	r3, [sp, #20]
   1f36a:	f1b8 0f00 	cmp.w	r8, #0
   1f36e:	f000 80e6 	beq.w	1f53e <getTrngSource+0x24a>
   1f372:	2c00      	cmp	r4, #0
   1f374:	f000 80e3 	beq.w	1f53e <getTrngSource+0x24a>
   1f378:	9b04      	ldr	r3, [sp, #16]
   1f37a:	2b00      	cmp	r3, #0
   1f37c:	f000 80dd 	beq.w	1f53a <getTrngSource+0x246>
   1f380:	a904      	add	r1, sp, #16
   1f382:	4620      	mov	r0, r4
   1f384:	f000 ff5a 	bl	2023c <LLF_RND_GetFastestRosc>
   1f388:	b1b8      	cbz	r0, 1f3ba <getTrngSource+0xc6>
   1f38a:	4b82      	ldr	r3, [pc, #520]	; (1f594 <getTrngSource+0x2a0>)
   1f38c:	4298      	cmp	r0, r3
   1f38e:	f040 80a8 	bne.w	1f4e2 <getTrngSource+0x1ee>
   1f392:	9002      	str	r0, [sp, #8]
   1f394:	f000 ff62 	bl	2025c <LLF_RND_TurnOffTrng>
   1f398:	9802      	ldr	r0, [sp, #8]
   1f39a:	b00d      	add	sp, #52	; 0x34
   1f39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1f3a4:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1f3a8:	3001      	adds	r0, #1
   1f3aa:	bf14      	ite	ne
   1f3ac:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   1f3b0:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   1f3b4:	e7a9      	b.n	1f30a <getTrngSource+0x16>
   1f3b6:	4878      	ldr	r0, [pc, #480]	; (1f598 <getTrngSource+0x2a4>)
   1f3b8:	e7eb      	b.n	1f392 <getTrngSource+0x9e>
   1f3ba:	9804      	ldr	r0, [sp, #16]
   1f3bc:	4621      	mov	r1, r4
   1f3be:	f000 ff1f 	bl	20200 <LLF_RND_GetRoscSampleCnt>
   1f3c2:	2800      	cmp	r0, #0
   1f3c4:	d1e1      	bne.n	1f38a <getTrngSource+0x96>
   1f3c6:	9f04      	ldr	r7, [sp, #16]
   1f3c8:	2f08      	cmp	r7, #8
   1f3ca:	f000 80ba 	beq.w	1f542 <getTrngSource+0x24e>
   1f3ce:	2f04      	cmp	r7, #4
   1f3d0:	f000 80b9 	beq.w	1f546 <getTrngSource+0x252>
   1f3d4:	f1a7 0702 	sub.w	r7, r7, #2
   1f3d8:	fab7 f787 	clz	r7, r7
   1f3dc:	097f      	lsrs	r7, r7, #5
   1f3de:	496f      	ldr	r1, [pc, #444]	; (1f59c <getTrngSource+0x2a8>)
   1f3e0:	2301      	movs	r3, #1
   1f3e2:	600b      	str	r3, [r1, #0]
   1f3e4:	f841 3c84 	str.w	r3, [r1, #-132]
   1f3e8:	4619      	mov	r1, r3
   1f3ea:	4b6c      	ldr	r3, [pc, #432]	; (1f59c <getTrngSource+0x2a8>)
   1f3ec:	4867      	ldr	r0, [pc, #412]	; (1f58c <getTrngSource+0x298>)
   1f3ee:	6019      	str	r1, [r3, #0]
   1f3f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f3f2:	6003      	str	r3, [r0, #0]
   1f3f4:	6800      	ldr	r0, [r0, #0]
   1f3f6:	4283      	cmp	r3, r0
   1f3f8:	d1f7      	bne.n	1f3ea <getTrngSource+0xf6>
   1f3fa:	4a69      	ldr	r2, [pc, #420]	; (1f5a0 <getTrngSource+0x2ac>)
   1f3fc:	2300      	movs	r3, #0
   1f3fe:	6013      	str	r3, [r2, #0]
   1f400:	f04f 30ff 	mov.w	r0, #4294967295
   1f404:	f7ff fd0a 	bl	1ee1c <CC_HalClearInterruptBit>
   1f408:	2300      	movs	r3, #0
   1f40a:	4618      	mov	r0, r3
   1f40c:	4b65      	ldr	r3, [pc, #404]	; (1f5a4 <getTrngSource+0x2b0>)
   1f40e:	f06f 011b 	mvn.w	r1, #27
   1f412:	6019      	str	r1, [r3, #0]
   1f414:	f7ff fd10 	bl	1ee38 <CC_HalMaskInterrupt>
   1f418:	4963      	ldr	r1, [pc, #396]	; (1f5a8 <getTrngSource+0x2b4>)
   1f41a:	4b64      	ldr	r3, [pc, #400]	; (1f5ac <getTrngSource+0x2b8>)
   1f41c:	600f      	str	r7, [r1, #0]
   1f41e:	6818      	ldr	r0, [r3, #0]
   1f420:	4f5b      	ldr	r7, [pc, #364]	; (1f590 <getTrngSource+0x29c>)
   1f422:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1f426:	f7ff fd07 	bl	1ee38 <CC_HalMaskInterrupt>
   1f42a:	4b57      	ldr	r3, [pc, #348]	; (1f588 <getTrngSource+0x294>)
   1f42c:	4860      	ldr	r0, [pc, #384]	; (1f5b0 <getTrngSource+0x2bc>)
   1f42e:	210a      	movs	r1, #10
   1f430:	6019      	str	r1, [r3, #0]
   1f432:	6921      	ldr	r1, [r4, #16]
   1f434:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f436:	fba7 c101 	umull	ip, r1, r7, r1
   1f43a:	0909      	lsrs	r1, r1, #4
   1f43c:	fb03 f301 	mul.w	r3, r3, r1
   1f440:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f444:	03db      	lsls	r3, r3, #15
   1f446:	099b      	lsrs	r3, r3, #6
   1f448:	6003      	str	r3, [r0, #0]
   1f44a:	4b55      	ldr	r3, [pc, #340]	; (1f5a0 <getTrngSource+0x2ac>)
   1f44c:	2201      	movs	r2, #1
   1f44e:	601a      	str	r2, [r3, #0]
   1f450:	9904      	ldr	r1, [sp, #16]
   1f452:	f8d8 2000 	ldr.w	r2, [r8]
   1f456:	020b      	lsls	r3, r1, #8
   1f458:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1f45c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1f460:	4313      	orrs	r3, r2
   1f462:	f8c8 3000 	str.w	r3, [r8]
   1f466:	a805      	add	r0, sp, #20
   1f468:	f000 feba 	bl	201e0 <LLF_RND_WaitRngInterrupt>
   1f46c:	9b05      	ldr	r3, [sp, #20]
   1f46e:	f003 031a 	and.w	r3, r3, #26
   1f472:	4303      	orrs	r3, r0
   1f474:	d135      	bne.n	1f4e2 <getTrngSource+0x1ee>
   1f476:	4a4f      	ldr	r2, [pc, #316]	; (1f5b4 <getTrngSource+0x2c0>)
   1f478:	4b4f      	ldr	r3, [pc, #316]	; (1f5b8 <getTrngSource+0x2c4>)
   1f47a:	6812      	ldr	r2, [r2, #0]
   1f47c:	9206      	str	r2, [sp, #24]
   1f47e:	681a      	ldr	r2, [r3, #0]
   1f480:	9207      	str	r2, [sp, #28]
   1f482:	685a      	ldr	r2, [r3, #4]
   1f484:	9208      	str	r2, [sp, #32]
   1f486:	689a      	ldr	r2, [r3, #8]
   1f488:	9209      	str	r2, [sp, #36]	; 0x24
   1f48a:	68da      	ldr	r2, [r3, #12]
   1f48c:	920a      	str	r2, [sp, #40]	; 0x28
   1f48e:	3310      	adds	r3, #16
   1f490:	fba7 2705 	umull	r2, r7, r7, r5
   1f494:	681b      	ldr	r3, [r3, #0]
   1f496:	930b      	str	r3, [sp, #44]	; 0x2c
   1f498:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   1f49c:	d102      	bne.n	1f4a4 <getTrngSource+0x1b0>
   1f49e:	f1bb 0f00 	cmp.w	fp, #0
   1f4a2:	d141      	bne.n	1f528 <getTrngSource+0x234>
   1f4a4:	2218      	movs	r2, #24
   1f4a6:	4630      	mov	r0, r6
   1f4a8:	eb0d 0102 	add.w	r1, sp, r2
   1f4ac:	f000 fe3c 	bl	20128 <CC_PalMemCopyPlat>
   1f4b0:	3d18      	subs	r5, #24
   1f4b2:	3618      	adds	r6, #24
   1f4b4:	f109 0901 	add.w	r9, r9, #1
   1f4b8:	2d00      	cmp	r5, #0
   1f4ba:	f47f af52 	bne.w	1f362 <getTrngSource+0x6e>
   1f4be:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   1f4c2:	d85d      	bhi.n	1f580 <getTrngSource+0x28c>
   1f4c4:	9d03      	ldr	r5, [sp, #12]
   1f4c6:	6962      	ldr	r2, [r4, #20]
   1f4c8:	4651      	mov	r1, sl
   1f4ca:	4628      	mov	r0, r5
   1f4cc:	f7ff fe7c 	bl	1f1c8 <LLF_RND_RepetitionCounterTest.part.0>
   1f4d0:	2800      	cmp	r0, #0
   1f4d2:	d04b      	beq.n	1f56c <getTrngSource+0x278>
   1f4d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1f4d6:	2300      	movs	r3, #0
   1f4d8:	6013      	str	r3, [r2, #0]
   1f4da:	4b2e      	ldr	r3, [pc, #184]	; (1f594 <getTrngSource+0x2a0>)
   1f4dc:	4298      	cmp	r0, r3
   1f4de:	f43f af58 	beq.w	1f392 <getTrngSource+0x9e>
   1f4e2:	9d04      	ldr	r5, [sp, #16]
   1f4e4:	2d08      	cmp	r5, #8
   1f4e6:	d034      	beq.n	1f552 <getTrngSource+0x25e>
   1f4e8:	2200      	movs	r2, #0
   1f4ea:	ab04      	add	r3, sp, #16
   1f4ec:	006d      	lsls	r5, r5, #1
   1f4ee:	9200      	str	r2, [sp, #0]
   1f4f0:	4621      	mov	r1, r4
   1f4f2:	4640      	mov	r0, r8
   1f4f4:	9504      	str	r5, [sp, #16]
   1f4f6:	f7ff fdbd 	bl	1f074 <startTrngHW>
   1f4fa:	4b30      	ldr	r3, [pc, #192]	; (1f5bc <getTrngSource+0x2c8>)
   1f4fc:	4298      	cmp	r0, r3
   1f4fe:	d024      	beq.n	1f54a <getTrngSource+0x256>
   1f500:	2800      	cmp	r0, #0
   1f502:	f47f af46 	bne.w	1f392 <getTrngSource+0x9e>
   1f506:	f8d8 2000 	ldr.w	r2, [r8]
   1f50a:	0a13      	lsrs	r3, r2, #8
   1f50c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1f510:	4313      	orrs	r3, r2
   1f512:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f516:	f8c8 3000 	str.w	r3, [r8]
   1f51a:	9b02      	ldr	r3, [sp, #8]
   1f51c:	3b01      	subs	r3, #1
   1f51e:	9302      	str	r3, [sp, #8]
   1f520:	f47f af14 	bne.w	1f34c <getTrngSource+0x58>
   1f524:	2000      	movs	r0, #0
   1f526:	e734      	b.n	1f392 <getTrngSource+0x9e>
   1f528:	4630      	mov	r0, r6
   1f52a:	465a      	mov	r2, fp
   1f52c:	a906      	add	r1, sp, #24
   1f52e:	f000 fdfb 	bl	20128 <CC_PalMemCopyPlat>
   1f532:	eba5 050b 	sub.w	r5, r5, fp
   1f536:	445e      	add	r6, fp
   1f538:	e7bc      	b.n	1f4b4 <getTrngSource+0x1c0>
   1f53a:	4820      	ldr	r0, [pc, #128]	; (1f5bc <getTrngSource+0x2c8>)
   1f53c:	e725      	b.n	1f38a <getTrngSource+0x96>
   1f53e:	4820      	ldr	r0, [pc, #128]	; (1f5c0 <getTrngSource+0x2cc>)
   1f540:	e723      	b.n	1f38a <getTrngSource+0x96>
   1f542:	2703      	movs	r7, #3
   1f544:	e74b      	b.n	1f3de <getTrngSource+0xea>
   1f546:	2702      	movs	r7, #2
   1f548:	e749      	b.n	1f3de <getTrngSource+0xea>
   1f54a:	6a23      	ldr	r3, [r4, #32]
   1f54c:	2b00      	cmp	r3, #0
   1f54e:	f43f af20 	beq.w	1f392 <getTrngSource+0x9e>
   1f552:	481c      	ldr	r0, [pc, #112]	; (1f5c4 <getTrngSource+0x2d0>)
   1f554:	e71d      	b.n	1f392 <getTrngSource+0x9e>
   1f556:	9500      	str	r5, [sp, #0]
   1f558:	ab04      	add	r3, sp, #16
   1f55a:	2201      	movs	r2, #1
   1f55c:	4621      	mov	r1, r4
   1f55e:	4638      	mov	r0, r7
   1f560:	f7ff fd88 	bl	1f074 <startTrngHW>
   1f564:	2800      	cmp	r0, #0
   1f566:	f43f aee2 	beq.w	1f32e <getTrngSource+0x3a>
   1f56a:	e712      	b.n	1f392 <getTrngSource+0x9e>
   1f56c:	69a2      	ldr	r2, [r4, #24]
   1f56e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1f572:	4651      	mov	r1, sl
   1f574:	4628      	mov	r0, r5
   1f576:	f7ff fe55 	bl	1f224 <LLF_RND_AdaptiveProportionTest>
   1f57a:	2800      	cmp	r0, #0
   1f57c:	d1aa      	bne.n	1f4d4 <getTrngSource+0x1e0>
   1f57e:	e7d1      	b.n	1f524 <getTrngSource+0x230>
   1f580:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1f582:	601d      	str	r5, [r3, #0]
   1f584:	e7ad      	b.n	1f4e2 <getTrngSource+0x1ee>
   1f586:	bf00      	nop
   1f588:	5002b138 	.word	0x5002b138
   1f58c:	5002b130 	.word	0x5002b130
   1f590:	aaaaaaab 	.word	0xaaaaaaab
   1f594:	00f10c02 	.word	0x00f10c02
   1f598:	00f10c30 	.word	0x00f10c30
   1f59c:	5002b1c4 	.word	0x5002b1c4
   1f5a0:	5002b12c 	.word	0x5002b12c
   1f5a4:	5002b100 	.word	0x5002b100
   1f5a8:	5002b10c 	.word	0x5002b10c
   1f5ac:	5002ba04 	.word	0x5002ba04
   1f5b0:	5002b1d8 	.word	0x5002b1d8
   1f5b4:	5002b114 	.word	0x5002b114
   1f5b8:	5002b118 	.word	0x5002b118
   1f5bc:	00f10c31 	.word	0x00f10c31
   1f5c0:	00f10c35 	.word	0x00f10c35
   1f5c4:	00f10c32 	.word	0x00f10c32

0001f5c8 <LLF_RND_GetTrngSource>:
   1f5c8:	b430      	push	{r4, r5}
   1f5ca:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1f5ce:	9d04      	ldr	r5, [sp, #16]
   1f5d0:	9402      	str	r4, [sp, #8]
   1f5d2:	2400      	movs	r4, #0
   1f5d4:	e9cd 5403 	strd	r5, r4, [sp, #12]
   1f5d8:	bc30      	pop	{r4, r5}
   1f5da:	f7ff be8b 	b.w	1f2f4 <getTrngSource>
   1f5de:	bf00      	nop

0001f5e0 <LLF_RND_RunTrngStartupTest>:
   1f5e0:	b510      	push	{r4, lr}
   1f5e2:	b086      	sub	sp, #24
   1f5e4:	ab05      	add	r3, sp, #20
   1f5e6:	2401      	movs	r4, #1
   1f5e8:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1f5ec:	9300      	str	r3, [sp, #0]
   1f5ee:	2200      	movs	r2, #0
   1f5f0:	ab04      	add	r3, sp, #16
   1f5f2:	f7ff fe7f 	bl	1f2f4 <getTrngSource>
   1f5f6:	b006      	add	sp, #24
   1f5f8:	bd10      	pop	{r4, pc}
   1f5fa:	bf00      	nop

0001f5fc <mbedtls_platform_zeroize>:
   1f5fc:	b138      	cbz	r0, 1f60e <mbedtls_platform_zeroize+0x12>
   1f5fe:	b131      	cbz	r1, 1f60e <mbedtls_platform_zeroize+0x12>
   1f600:	4401      	add	r1, r0
   1f602:	2200      	movs	r2, #0
   1f604:	4603      	mov	r3, r0
   1f606:	3001      	adds	r0, #1
   1f608:	4281      	cmp	r1, r0
   1f60a:	701a      	strb	r2, [r3, #0]
   1f60c:	d1fa      	bne.n	1f604 <mbedtls_platform_zeroize+0x8>
   1f60e:	4770      	bx	lr

0001f610 <mbedtls_hardware_poll>:
   1f610:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f612:	b089      	sub	sp, #36	; 0x24
   1f614:	9205      	str	r2, [sp, #20]
   1f616:	2900      	cmp	r1, #0
   1f618:	d064      	beq.n	1f6e4 <mbedtls_hardware_poll+0xd4>
   1f61a:	461c      	mov	r4, r3
   1f61c:	2b00      	cmp	r3, #0
   1f61e:	d061      	beq.n	1f6e4 <mbedtls_hardware_poll+0xd4>
   1f620:	4615      	mov	r5, r2
   1f622:	2a00      	cmp	r2, #0
   1f624:	d05e      	beq.n	1f6e4 <mbedtls_hardware_poll+0xd4>
   1f626:	4f31      	ldr	r7, [pc, #196]	; (1f6ec <mbedtls_hardware_poll+0xdc>)
   1f628:	460e      	mov	r6, r1
   1f62a:	6838      	ldr	r0, [r7, #0]
   1f62c:	f04f 31ff 	mov.w	r1, #4294967295
   1f630:	f7ff fc9c 	bl	1ef6c <CC_PalMutexLock>
   1f634:	2800      	cmp	r0, #0
   1f636:	d14b      	bne.n	1f6d0 <mbedtls_hardware_poll+0xc0>
   1f638:	2000      	movs	r0, #0
   1f63a:	f7ff fcc7 	bl	1efcc <CC_PalPowerSaveModeSelect>
   1f63e:	2800      	cmp	r0, #0
   1f640:	d142      	bne.n	1f6c8 <mbedtls_hardware_poll+0xb8>
   1f642:	482b      	ldr	r0, [pc, #172]	; (1f6f0 <mbedtls_hardware_poll+0xe0>)
   1f644:	f000 fd34 	bl	200b0 <RNG_PLAT_SetUserRngParameters>
   1f648:	b1d8      	cbz	r0, 1f682 <mbedtls_hardware_poll+0x72>
   1f64a:	2001      	movs	r0, #1
   1f64c:	f04f 36ff 	mov.w	r6, #4294967295
   1f650:	f7ff fcbc 	bl	1efcc <CC_PalPowerSaveModeSelect>
   1f654:	2800      	cmp	r0, #0
   1f656:	d133      	bne.n	1f6c0 <mbedtls_hardware_poll+0xb0>
   1f658:	4826      	ldr	r0, [pc, #152]	; (1f6f4 <mbedtls_hardware_poll+0xe4>)
   1f65a:	f44f 7108 	mov.w	r1, #544	; 0x220
   1f65e:	f7ff ffcd 	bl	1f5fc <mbedtls_platform_zeroize>
   1f662:	4825      	ldr	r0, [pc, #148]	; (1f6f8 <mbedtls_hardware_poll+0xe8>)
   1f664:	2104      	movs	r1, #4
   1f666:	f7ff ffc9 	bl	1f5fc <mbedtls_platform_zeroize>
   1f66a:	4821      	ldr	r0, [pc, #132]	; (1f6f0 <mbedtls_hardware_poll+0xe0>)
   1f66c:	2128      	movs	r1, #40	; 0x28
   1f66e:	f7ff ffc5 	bl	1f5fc <mbedtls_platform_zeroize>
   1f672:	6838      	ldr	r0, [r7, #0]
   1f674:	f7ff fc82 	bl	1ef7c <CC_PalMutexUnlock>
   1f678:	2800      	cmp	r0, #0
   1f67a:	d12d      	bne.n	1f6d8 <mbedtls_hardware_poll+0xc8>
   1f67c:	4630      	mov	r0, r6
   1f67e:	b009      	add	sp, #36	; 0x24
   1f680:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f682:	491c      	ldr	r1, [pc, #112]	; (1f6f4 <mbedtls_hardware_poll+0xe4>)
   1f684:	9003      	str	r0, [sp, #12]
   1f686:	ab07      	add	r3, sp, #28
   1f688:	4602      	mov	r2, r0
   1f68a:	9102      	str	r1, [sp, #8]
   1f68c:	9300      	str	r3, [sp, #0]
   1f68e:	4918      	ldr	r1, [pc, #96]	; (1f6f0 <mbedtls_hardware_poll+0xe0>)
   1f690:	4819      	ldr	r0, [pc, #100]	; (1f6f8 <mbedtls_hardware_poll+0xe8>)
   1f692:	9401      	str	r4, [sp, #4]
   1f694:	ab05      	add	r3, sp, #20
   1f696:	f7ff ff97 	bl	1f5c8 <LLF_RND_GetTrngSource>
   1f69a:	4603      	mov	r3, r0
   1f69c:	2800      	cmp	r0, #0
   1f69e:	d1d4      	bne.n	1f64a <mbedtls_hardware_poll+0x3a>
   1f6a0:	6822      	ldr	r2, [r4, #0]
   1f6a2:	42aa      	cmp	r2, r5
   1f6a4:	d3d1      	bcc.n	1f64a <mbedtls_hardware_poll+0x3a>
   1f6a6:	9907      	ldr	r1, [sp, #28]
   1f6a8:	4630      	mov	r0, r6
   1f6aa:	3108      	adds	r1, #8
   1f6ac:	462a      	mov	r2, r5
   1f6ae:	461e      	mov	r6, r3
   1f6b0:	f000 fd3a 	bl	20128 <CC_PalMemCopyPlat>
   1f6b4:	6025      	str	r5, [r4, #0]
   1f6b6:	2001      	movs	r0, #1
   1f6b8:	f7ff fc88 	bl	1efcc <CC_PalPowerSaveModeSelect>
   1f6bc:	2800      	cmp	r0, #0
   1f6be:	d0cb      	beq.n	1f658 <mbedtls_hardware_poll+0x48>
   1f6c0:	480e      	ldr	r0, [pc, #56]	; (1f6fc <mbedtls_hardware_poll+0xec>)
   1f6c2:	f7ff f8bd 	bl	1e840 <CC_PalAbort>
   1f6c6:	e7c7      	b.n	1f658 <mbedtls_hardware_poll+0x48>
   1f6c8:	480d      	ldr	r0, [pc, #52]	; (1f700 <mbedtls_hardware_poll+0xf0>)
   1f6ca:	f7ff f8b9 	bl	1e840 <CC_PalAbort>
   1f6ce:	e7b8      	b.n	1f642 <mbedtls_hardware_poll+0x32>
   1f6d0:	480c      	ldr	r0, [pc, #48]	; (1f704 <mbedtls_hardware_poll+0xf4>)
   1f6d2:	f7ff f8b5 	bl	1e840 <CC_PalAbort>
   1f6d6:	e7af      	b.n	1f638 <mbedtls_hardware_poll+0x28>
   1f6d8:	480b      	ldr	r0, [pc, #44]	; (1f708 <mbedtls_hardware_poll+0xf8>)
   1f6da:	f7ff f8b1 	bl	1e840 <CC_PalAbort>
   1f6de:	4630      	mov	r0, r6
   1f6e0:	b009      	add	sp, #36	; 0x24
   1f6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f6e4:	f04f 36ff 	mov.w	r6, #4294967295
   1f6e8:	e7c8      	b.n	1f67c <mbedtls_hardware_poll+0x6c>
   1f6ea:	bf00      	nop
   1f6ec:	20000760 	.word	0x20000760
   1f6f0:	20006648 	.word	0x20006648
   1f6f4:	20006428 	.word	0x20006428
   1f6f8:	20006424 	.word	0x20006424
   1f6fc:	0002902c 	.word	0x0002902c
   1f700:	0002900c 	.word	0x0002900c
   1f704:	00028ff4 	.word	0x00028ff4
   1f708:	00029084 	.word	0x00029084

0001f70c <cc_mbedtls_sha256_init>:
   1f70c:	b510      	push	{r4, lr}
   1f70e:	4604      	mov	r4, r0
   1f710:	b128      	cbz	r0, 1f71e <cc_mbedtls_sha256_init+0x12>
   1f712:	4620      	mov	r0, r4
   1f714:	21f0      	movs	r1, #240	; 0xf0
   1f716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f71a:	f000 bd09 	b.w	20130 <CC_PalMemSetZeroPlat>
   1f71e:	4804      	ldr	r0, [pc, #16]	; (1f730 <cc_mbedtls_sha256_init+0x24>)
   1f720:	f7ff f88e 	bl	1e840 <CC_PalAbort>
   1f724:	4620      	mov	r0, r4
   1f726:	21f0      	movs	r1, #240	; 0xf0
   1f728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f72c:	f000 bd00 	b.w	20130 <CC_PalMemSetZeroPlat>
   1f730:	0002909c 	.word	0x0002909c

0001f734 <cc_mbedtls_sha256_free>:
   1f734:	b110      	cbz	r0, 1f73c <cc_mbedtls_sha256_free+0x8>
   1f736:	21f0      	movs	r1, #240	; 0xf0
   1f738:	f7ff bf60 	b.w	1f5fc <mbedtls_platform_zeroize>
   1f73c:	4770      	bx	lr
   1f73e:	bf00      	nop

0001f740 <cc_mbedtls_sha256_starts_ret>:
   1f740:	b508      	push	{r3, lr}
   1f742:	b161      	cbz	r1, 1f75e <cc_mbedtls_sha256_starts_ret+0x1e>
   1f744:	2901      	cmp	r1, #1
   1f746:	d107      	bne.n	1f758 <cc_mbedtls_sha256_starts_ret+0x18>
   1f748:	2102      	movs	r1, #2
   1f74a:	f000 f839 	bl	1f7c0 <mbedtls_sha_starts_internal>
   1f74e:	2800      	cmp	r0, #0
   1f750:	bf18      	it	ne
   1f752:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1f756:	bd08      	pop	{r3, pc}
   1f758:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1f75c:	bd08      	pop	{r3, pc}
   1f75e:	2101      	movs	r1, #1
   1f760:	f000 f82e 	bl	1f7c0 <mbedtls_sha_starts_internal>
   1f764:	e7f3      	b.n	1f74e <cc_mbedtls_sha256_starts_ret+0xe>
   1f766:	bf00      	nop

0001f768 <cc_mbedtls_sha256_update_ret>:
   1f768:	b508      	push	{r3, lr}
   1f76a:	f000 f86b 	bl	1f844 <mbedtls_sha_update_internal>
   1f76e:	2800      	cmp	r0, #0
   1f770:	bf18      	it	ne
   1f772:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1f776:	bd08      	pop	{r3, pc}

0001f778 <cc_mbedtls_sha256_finish_ret>:
   1f778:	b570      	push	{r4, r5, r6, lr}
   1f77a:	b1e8      	cbz	r0, 1f7b8 <cc_mbedtls_sha256_finish_ret+0x40>
   1f77c:	460e      	mov	r6, r1
   1f77e:	b1d9      	cbz	r1, 1f7b8 <cc_mbedtls_sha256_finish_ret+0x40>
   1f780:	4604      	mov	r4, r0
   1f782:	f000 f831 	bl	1f7e8 <mbedtls_sha_finish_internal>
   1f786:	4605      	mov	r5, r0
   1f788:	b9b0      	cbnz	r0, 1f7b8 <cc_mbedtls_sha256_finish_ret+0x40>
   1f78a:	6823      	ldr	r3, [r4, #0]
   1f78c:	2b01      	cmp	r3, #1
   1f78e:	d00b      	beq.n	1f7a8 <cc_mbedtls_sha256_finish_ret+0x30>
   1f790:	2b02      	cmp	r3, #2
   1f792:	d001      	beq.n	1f798 <cc_mbedtls_sha256_finish_ret+0x20>
   1f794:	4628      	mov	r0, r5
   1f796:	bd70      	pop	{r4, r5, r6, pc}
   1f798:	f104 0108 	add.w	r1, r4, #8
   1f79c:	4630      	mov	r0, r6
   1f79e:	221c      	movs	r2, #28
   1f7a0:	f000 fcc2 	bl	20128 <CC_PalMemCopyPlat>
   1f7a4:	4628      	mov	r0, r5
   1f7a6:	bd70      	pop	{r4, r5, r6, pc}
   1f7a8:	f104 0108 	add.w	r1, r4, #8
   1f7ac:	4630      	mov	r0, r6
   1f7ae:	2220      	movs	r2, #32
   1f7b0:	f000 fcba 	bl	20128 <CC_PalMemCopyPlat>
   1f7b4:	4628      	mov	r0, r5
   1f7b6:	bd70      	pop	{r4, r5, r6, pc}
   1f7b8:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1f7bc:	e7ea      	b.n	1f794 <cc_mbedtls_sha256_finish_ret+0x1c>
   1f7be:	bf00      	nop

0001f7c0 <mbedtls_sha_starts_internal>:
   1f7c0:	b178      	cbz	r0, 1f7e2 <mbedtls_sha_starts_internal+0x22>
   1f7c2:	b538      	push	{r3, r4, r5, lr}
   1f7c4:	4604      	mov	r4, r0
   1f7c6:	460d      	mov	r5, r1
   1f7c8:	21f0      	movs	r1, #240	; 0xf0
   1f7ca:	f000 fcb1 	bl	20130 <CC_PalMemSetZeroPlat>
   1f7ce:	2340      	movs	r3, #64	; 0x40
   1f7d0:	6025      	str	r5, [r4, #0]
   1f7d2:	65e3      	str	r3, [r4, #92]	; 0x5c
   1f7d4:	4620      	mov	r0, r4
   1f7d6:	f000 fd83 	bl	202e0 <InitHashDrv>
   1f7da:	3800      	subs	r0, #0
   1f7dc:	bf18      	it	ne
   1f7de:	2001      	movne	r0, #1
   1f7e0:	bd38      	pop	{r3, r4, r5, pc}
   1f7e2:	2001      	movs	r0, #1
   1f7e4:	4770      	bx	lr
   1f7e6:	bf00      	nop

0001f7e8 <mbedtls_sha_finish_internal>:
   1f7e8:	b570      	push	{r4, r5, r6, lr}
   1f7ea:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1f7ec:	b0a4      	sub	sp, #144	; 0x90
   1f7ee:	4604      	mov	r4, r0
   1f7f0:	ae04      	add	r6, sp, #16
   1f7f2:	b9e5      	cbnz	r5, 1f82e <mbedtls_sha_finish_internal+0x46>
   1f7f4:	2201      	movs	r2, #1
   1f7f6:	2300      	movs	r3, #0
   1f7f8:	6062      	str	r2, [r4, #4]
   1f7fa:	4630      	mov	r0, r6
   1f7fc:	e9cd 3300 	strd	r3, r3, [sp]
   1f800:	aa02      	add	r2, sp, #8
   1f802:	4629      	mov	r1, r5
   1f804:	f000 fd38 	bl	20278 <SetDataBuffersInfo>
   1f808:	b110      	cbz	r0, 1f810 <mbedtls_sha_finish_internal+0x28>
   1f80a:	2001      	movs	r0, #1
   1f80c:	b024      	add	sp, #144	; 0x90
   1f80e:	bd70      	pop	{r4, r5, r6, pc}
   1f810:	462a      	mov	r2, r5
   1f812:	a902      	add	r1, sp, #8
   1f814:	4620      	mov	r0, r4
   1f816:	f000 fd8d 	bl	20334 <ProcessHashDrv>
   1f81a:	2800      	cmp	r0, #0
   1f81c:	d1f5      	bne.n	1f80a <mbedtls_sha_finish_internal+0x22>
   1f81e:	4620      	mov	r0, r4
   1f820:	f000 feb6 	bl	20590 <FinishHashDrv>
   1f824:	2800      	cmp	r0, #0
   1f826:	d1f0      	bne.n	1f80a <mbedtls_sha_finish_internal+0x22>
   1f828:	6620      	str	r0, [r4, #96]	; 0x60
   1f82a:	b024      	add	sp, #144	; 0x90
   1f82c:	bd70      	pop	{r4, r5, r6, pc}
   1f82e:	2d80      	cmp	r5, #128	; 0x80
   1f830:	462a      	mov	r2, r5
   1f832:	4630      	mov	r0, r6
   1f834:	bf28      	it	cs
   1f836:	2280      	movcs	r2, #128	; 0x80
   1f838:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1f83c:	f000 fc74 	bl	20128 <CC_PalMemCopyPlat>
   1f840:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1f842:	e7d7      	b.n	1f7f4 <mbedtls_sha_finish_internal+0xc>

0001f844 <mbedtls_sha_update_internal>:
   1f844:	2800      	cmp	r0, #0
   1f846:	d054      	beq.n	1f8f2 <mbedtls_sha_update_internal+0xae>
   1f848:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f84a:	4614      	mov	r4, r2
   1f84c:	b0a5      	sub	sp, #148	; 0x94
   1f84e:	b1b2      	cbz	r2, 1f87e <mbedtls_sha_update_internal+0x3a>
   1f850:	460e      	mov	r6, r1
   1f852:	b351      	cbz	r1, 1f8aa <mbedtls_sha_update_internal+0x66>
   1f854:	4605      	mov	r5, r0
   1f856:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1f85a:	1a1a      	subs	r2, r3, r0
   1f85c:	fbb2 f7f3 	udiv	r7, r2, r3
   1f860:	fb03 2717 	mls	r7, r3, r7, r2
   1f864:	42a7      	cmp	r7, r4
   1f866:	bf28      	it	cs
   1f868:	4627      	movcs	r7, r4
   1f86a:	2f00      	cmp	r7, #0
   1f86c:	d143      	bne.n	1f8f6 <mbedtls_sha_update_internal+0xb2>
   1f86e:	4283      	cmp	r3, r0
   1f870:	d008      	beq.n	1f884 <mbedtls_sha_update_internal+0x40>
   1f872:	fbb4 f7f3 	udiv	r7, r4, r3
   1f876:	fb03 f707 	mul.w	r7, r3, r7
   1f87a:	b9cf      	cbnz	r7, 1f8b0 <mbedtls_sha_update_internal+0x6c>
   1f87c:	bb6c      	cbnz	r4, 1f8da <mbedtls_sha_update_internal+0x96>
   1f87e:	2000      	movs	r0, #0
   1f880:	b025      	add	sp, #148	; 0x94
   1f882:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f884:	2b80      	cmp	r3, #128	; 0x80
   1f886:	bf28      	it	cs
   1f888:	2380      	movcs	r3, #128	; 0x80
   1f88a:	461a      	mov	r2, r3
   1f88c:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1f890:	a804      	add	r0, sp, #16
   1f892:	f000 fc49 	bl	20128 <CC_PalMemCopyPlat>
   1f896:	2300      	movs	r3, #0
   1f898:	e9cd 3300 	strd	r3, r3, [sp]
   1f89c:	a804      	add	r0, sp, #16
   1f89e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1f8a0:	aa02      	add	r2, sp, #8
   1f8a2:	f000 fce9 	bl	20278 <SetDataBuffersInfo>
   1f8a6:	2800      	cmp	r0, #0
   1f8a8:	d032      	beq.n	1f910 <mbedtls_sha_update_internal+0xcc>
   1f8aa:	2001      	movs	r0, #1
   1f8ac:	b025      	add	sp, #148	; 0x94
   1f8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f8b0:	2300      	movs	r3, #0
   1f8b2:	e9cd 3300 	strd	r3, r3, [sp]
   1f8b6:	aa02      	add	r2, sp, #8
   1f8b8:	4639      	mov	r1, r7
   1f8ba:	4630      	mov	r0, r6
   1f8bc:	f000 fcdc 	bl	20278 <SetDataBuffersInfo>
   1f8c0:	2800      	cmp	r0, #0
   1f8c2:	d1f2      	bne.n	1f8aa <mbedtls_sha_update_internal+0x66>
   1f8c4:	a902      	add	r1, sp, #8
   1f8c6:	463a      	mov	r2, r7
   1f8c8:	4628      	mov	r0, r5
   1f8ca:	f000 fd33 	bl	20334 <ProcessHashDrv>
   1f8ce:	2800      	cmp	r0, #0
   1f8d0:	d1eb      	bne.n	1f8aa <mbedtls_sha_update_internal+0x66>
   1f8d2:	1be4      	subs	r4, r4, r7
   1f8d4:	443e      	add	r6, r7
   1f8d6:	2c00      	cmp	r4, #0
   1f8d8:	d0d1      	beq.n	1f87e <mbedtls_sha_update_internal+0x3a>
   1f8da:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1f8dc:	3019      	adds	r0, #25
   1f8de:	4622      	mov	r2, r4
   1f8e0:	4631      	mov	r1, r6
   1f8e2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1f8e6:	f000 fc1f 	bl	20128 <CC_PalMemCopyPlat>
   1f8ea:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1f8ec:	4422      	add	r2, r4
   1f8ee:	662a      	str	r2, [r5, #96]	; 0x60
   1f8f0:	e7c5      	b.n	1f87e <mbedtls_sha_update_internal+0x3a>
   1f8f2:	2001      	movs	r0, #1
   1f8f4:	4770      	bx	lr
   1f8f6:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1f8fa:	4418      	add	r0, r3
   1f8fc:	463a      	mov	r2, r7
   1f8fe:	f000 fc13 	bl	20128 <CC_PalMemCopyPlat>
   1f902:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   1f906:	4438      	add	r0, r7
   1f908:	443e      	add	r6, r7
   1f90a:	1be4      	subs	r4, r4, r7
   1f90c:	6628      	str	r0, [r5, #96]	; 0x60
   1f90e:	e7ae      	b.n	1f86e <mbedtls_sha_update_internal+0x2a>
   1f910:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1f912:	a902      	add	r1, sp, #8
   1f914:	4628      	mov	r0, r5
   1f916:	f000 fd0d 	bl	20334 <ProcessHashDrv>
   1f91a:	2800      	cmp	r0, #0
   1f91c:	d1c5      	bne.n	1f8aa <mbedtls_sha_update_internal+0x66>
   1f91e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1f920:	6628      	str	r0, [r5, #96]	; 0x60
   1f922:	e7a6      	b.n	1f872 <mbedtls_sha_update_internal+0x2e>

0001f924 <block_cipher_df>:
   1f924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f928:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1f92c:	b0b1      	sub	sp, #196	; 0xc4
   1f92e:	f200 812e 	bhi.w	1fb8e <block_cipher_df+0x26a>
   1f932:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1fba0 <block_cipher_df+0x27c>
   1f936:	4614      	mov	r4, r2
   1f938:	460d      	mov	r5, r1
   1f93a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1f93e:	2100      	movs	r1, #0
   1f940:	4682      	mov	sl, r0
   1f942:	4648      	mov	r0, r9
   1f944:	f003 f897 	bl	22a76 <memset>
   1f948:	a813      	add	r0, sp, #76	; 0x4c
   1f94a:	f000 fe63 	bl	20614 <cc_mbedtls_aes_init>
   1f94e:	2600      	movs	r6, #0
   1f950:	4629      	mov	r1, r5
   1f952:	2320      	movs	r3, #32
   1f954:	ba65      	rev16	r5, r4
   1f956:	4622      	mov	r2, r4
   1f958:	f109 0018 	add.w	r0, r9, #24
   1f95c:	f8a9 5012 	strh.w	r5, [r9, #18]
   1f960:	f889 3017 	strb.w	r3, [r9, #23]
   1f964:	f8a9 6010 	strh.w	r6, [r9, #16]
   1f968:	f003 f861 	bl	22a2e <memcpy>
   1f96c:	eb09 0304 	add.w	r3, r9, r4
   1f970:	2280      	movs	r2, #128	; 0x80
   1f972:	4d88      	ldr	r5, [pc, #544]	; (1fb94 <block_cipher_df+0x270>)
   1f974:	761a      	strb	r2, [r3, #24]
   1f976:	4b88      	ldr	r3, [pc, #544]	; (1fb98 <block_cipher_df+0x274>)
   1f978:	9503      	str	r5, [sp, #12]
   1f97a:	9304      	str	r3, [sp, #16]
   1f97c:	a813      	add	r0, sp, #76	; 0x4c
   1f97e:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   1f982:	a903      	add	r1, sp, #12
   1f984:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   1f988:	e9cd 5305 	strd	r5, r3, [sp, #20]
   1f98c:	f000 fe58 	bl	20640 <cc_mbedtls_aes_setkey_enc>
   1f990:	4680      	mov	r8, r0
   1f992:	2800      	cmp	r0, #0
   1f994:	f040 80da 	bne.w	1fb4c <block_cipher_df+0x228>
   1f998:	f104 0319 	add.w	r3, r4, #25
   1f99c:	9301      	str	r3, [sp, #4]
   1f99e:	af07      	add	r7, sp, #28
   1f9a0:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1f9a4:	2210      	movs	r2, #16
   1f9a6:	2100      	movs	r1, #0
   1f9a8:	4638      	mov	r0, r7
   1f9aa:	f003 f864 	bl	22a76 <memset>
   1f9ae:	4c7b      	ldr	r4, [pc, #492]	; (1fb9c <block_cipher_df+0x278>)
   1f9b0:	9d01      	ldr	r5, [sp, #4]
   1f9b2:	f89d 601d 	ldrb.w	r6, [sp, #29]
   1f9b6:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   1f9ba:	f89d e01c 	ldrb.w	lr, [sp, #28]
   1f9be:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   1f9c2:	f89d c01f 	ldrb.w	ip, [sp, #31]
   1f9c6:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1f9ca:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   1f9ce:	404e      	eors	r6, r1
   1f9d0:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   1f9d4:	f88d 601d 	strb.w	r6, [sp, #29]
   1f9d8:	ea8e 0303 	eor.w	r3, lr, r3
   1f9dc:	4050      	eors	r0, r2
   1f9de:	ea8c 0101 	eor.w	r1, ip, r1
   1f9e2:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1f9e6:	f88d 301c 	strb.w	r3, [sp, #28]
   1f9ea:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   1f9ee:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   1f9f2:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   1f9f6:	f88d 001e 	strb.w	r0, [sp, #30]
   1f9fa:	f88d 101f 	strb.w	r1, [sp, #31]
   1f9fe:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1fa02:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   1fa06:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   1fa0a:	405a      	eors	r2, r3
   1fa0c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1fa10:	f88d 2020 	strb.w	r2, [sp, #32]
   1fa14:	ea8c 0606 	eor.w	r6, ip, r6
   1fa18:	4048      	eors	r0, r1
   1fa1a:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1fa1e:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1fa22:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   1fa26:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   1fa2a:	ea8e 0303 	eor.w	r3, lr, r3
   1fa2e:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   1fa32:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   1fa36:	ea8c 0101 	eor.w	r1, ip, r1
   1fa3a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1fa3e:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   1fa42:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1fa46:	ea82 020c 	eor.w	r2, r2, ip
   1fa4a:	4073      	eors	r3, r6
   1fa4c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   1fa50:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   1fa54:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1fa58:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   1fa5c:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   1fa60:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   1fa64:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   1fa68:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1fa6c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1fa70:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   1fa74:	ea8e 0202 	eor.w	r2, lr, r2
   1fa78:	4041      	eors	r1, r0
   1fa7a:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   1fa7e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1fa82:	4073      	eors	r3, r6
   1fa84:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   1fa88:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   1fa8c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1fa90:	ea8c 0000 	eor.w	r0, ip, r0
   1fa94:	4056      	eors	r6, r2
   1fa96:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   1fa9a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   1fa9e:	463b      	mov	r3, r7
   1faa0:	463a      	mov	r2, r7
   1faa2:	2101      	movs	r1, #1
   1faa4:	a813      	add	r0, sp, #76	; 0x4c
   1faa6:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   1faaa:	f000 fde3 	bl	20674 <cc_mbedtls_aes_crypt_ecb>
   1faae:	2d10      	cmp	r5, #16
   1fab0:	bf94      	ite	ls
   1fab2:	1b6d      	subls	r5, r5, r5
   1fab4:	3d10      	subhi	r5, #16
   1fab6:	2800      	cmp	r0, #0
   1fab8:	d167      	bne.n	1fb8a <block_cipher_df+0x266>
   1faba:	3410      	adds	r4, #16
   1fabc:	2d00      	cmp	r5, #0
   1fabe:	f47f af78 	bne.w	1f9b2 <block_cipher_df+0x8e>
   1fac2:	eb0b 0008 	add.w	r0, fp, r8
   1fac6:	2210      	movs	r2, #16
   1fac8:	4639      	mov	r1, r7
   1faca:	f002 ffb0 	bl	22a2e <memcpy>
   1face:	f899 3003 	ldrb.w	r3, [r9, #3]
   1fad2:	f108 0810 	add.w	r8, r8, #16
   1fad6:	3301      	adds	r3, #1
   1fad8:	f1b8 0f20 	cmp.w	r8, #32
   1fadc:	f889 3003 	strb.w	r3, [r9, #3]
   1fae0:	f47f af60 	bne.w	1f9a4 <block_cipher_df+0x80>
   1fae4:	2280      	movs	r2, #128	; 0x80
   1fae6:	4659      	mov	r1, fp
   1fae8:	a813      	add	r0, sp, #76	; 0x4c
   1faea:	f000 fda9 	bl	20640 <cc_mbedtls_aes_setkey_enc>
   1faee:	4680      	mov	r8, r0
   1faf0:	bb78      	cbnz	r0, 1fb52 <block_cipher_df+0x22e>
   1faf2:	f10a 0520 	add.w	r5, sl, #32
   1faf6:	4654      	mov	r4, sl
   1faf8:	ab0f      	add	r3, sp, #60	; 0x3c
   1fafa:	461a      	mov	r2, r3
   1fafc:	2101      	movs	r1, #1
   1fafe:	a813      	add	r0, sp, #76	; 0x4c
   1fb00:	f000 fdb8 	bl	20674 <cc_mbedtls_aes_crypt_ecb>
   1fb04:	2210      	movs	r2, #16
   1fb06:	4680      	mov	r8, r0
   1fb08:	a90f      	add	r1, sp, #60	; 0x3c
   1fb0a:	4620      	mov	r0, r4
   1fb0c:	4414      	add	r4, r2
   1fb0e:	f1b8 0f00 	cmp.w	r8, #0
   1fb12:	d11e      	bne.n	1fb52 <block_cipher_df+0x22e>
   1fb14:	f002 ff8b 	bl	22a2e <memcpy>
   1fb18:	42ac      	cmp	r4, r5
   1fb1a:	d1ed      	bne.n	1faf8 <block_cipher_df+0x1d4>
   1fb1c:	a813      	add	r0, sp, #76	; 0x4c
   1fb1e:	f000 fd89 	bl	20634 <cc_mbedtls_aes_free>
   1fb22:	481f      	ldr	r0, [pc, #124]	; (1fba0 <block_cipher_df+0x27c>)
   1fb24:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1fb28:	f7ff fd68 	bl	1f5fc <mbedtls_platform_zeroize>
   1fb2c:	4658      	mov	r0, fp
   1fb2e:	2120      	movs	r1, #32
   1fb30:	f7ff fd64 	bl	1f5fc <mbedtls_platform_zeroize>
   1fb34:	a803      	add	r0, sp, #12
   1fb36:	2110      	movs	r1, #16
   1fb38:	f7ff fd60 	bl	1f5fc <mbedtls_platform_zeroize>
   1fb3c:	4638      	mov	r0, r7
   1fb3e:	2110      	movs	r1, #16
   1fb40:	f7ff fd5c 	bl	1f5fc <mbedtls_platform_zeroize>
   1fb44:	4640      	mov	r0, r8
   1fb46:	b031      	add	sp, #196	; 0xc4
   1fb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb4c:	af07      	add	r7, sp, #28
   1fb4e:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1fb52:	a813      	add	r0, sp, #76	; 0x4c
   1fb54:	f000 fd6e 	bl	20634 <cc_mbedtls_aes_free>
   1fb58:	4811      	ldr	r0, [pc, #68]	; (1fba0 <block_cipher_df+0x27c>)
   1fb5a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1fb5e:	f7ff fd4d 	bl	1f5fc <mbedtls_platform_zeroize>
   1fb62:	4658      	mov	r0, fp
   1fb64:	2120      	movs	r1, #32
   1fb66:	f7ff fd49 	bl	1f5fc <mbedtls_platform_zeroize>
   1fb6a:	a803      	add	r0, sp, #12
   1fb6c:	2110      	movs	r1, #16
   1fb6e:	f7ff fd45 	bl	1f5fc <mbedtls_platform_zeroize>
   1fb72:	4638      	mov	r0, r7
   1fb74:	2110      	movs	r1, #16
   1fb76:	f7ff fd41 	bl	1f5fc <mbedtls_platform_zeroize>
   1fb7a:	4650      	mov	r0, sl
   1fb7c:	2120      	movs	r1, #32
   1fb7e:	f7ff fd3d 	bl	1f5fc <mbedtls_platform_zeroize>
   1fb82:	4640      	mov	r0, r8
   1fb84:	b031      	add	sp, #196	; 0xc4
   1fb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb8a:	4680      	mov	r8, r0
   1fb8c:	e7e1      	b.n	1fb52 <block_cipher_df+0x22e>
   1fb8e:	f06f 0837 	mvn.w	r8, #55	; 0x37
   1fb92:	e7f6      	b.n	1fb82 <block_cipher_df+0x25e>
   1fb94:	03020100 	.word	0x03020100
   1fb98:	07060504 	.word	0x07060504
   1fb9c:	20006680 	.word	0x20006680
   1fba0:	20006670 	.word	0x20006670

0001fba4 <ctr_drbg_update_internal>:
   1fba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fba8:	b088      	sub	sp, #32
   1fbaa:	4604      	mov	r4, r0
   1fbac:	2220      	movs	r2, #32
   1fbae:	460d      	mov	r5, r1
   1fbb0:	4668      	mov	r0, sp
   1fbb2:	2100      	movs	r1, #0
   1fbb4:	eb04 0802 	add.w	r8, r4, r2
   1fbb8:	f002 ff5d 	bl	22a76 <memset>
   1fbbc:	466e      	mov	r6, sp
   1fbbe:	7be2      	ldrb	r2, [r4, #15]
   1fbc0:	3201      	adds	r2, #1
   1fbc2:	b2d2      	uxtb	r2, r2
   1fbc4:	73e2      	strb	r2, [r4, #15]
   1fbc6:	2a00      	cmp	r2, #0
   1fbc8:	d14d      	bne.n	1fc66 <ctr_drbg_update_internal+0xc2>
   1fbca:	7ba2      	ldrb	r2, [r4, #14]
   1fbcc:	3201      	adds	r2, #1
   1fbce:	b2d2      	uxtb	r2, r2
   1fbd0:	73a2      	strb	r2, [r4, #14]
   1fbd2:	2a00      	cmp	r2, #0
   1fbd4:	d147      	bne.n	1fc66 <ctr_drbg_update_internal+0xc2>
   1fbd6:	7b63      	ldrb	r3, [r4, #13]
   1fbd8:	3301      	adds	r3, #1
   1fbda:	b2db      	uxtb	r3, r3
   1fbdc:	7363      	strb	r3, [r4, #13]
   1fbde:	2b00      	cmp	r3, #0
   1fbe0:	d141      	bne.n	1fc66 <ctr_drbg_update_internal+0xc2>
   1fbe2:	7b23      	ldrb	r3, [r4, #12]
   1fbe4:	3301      	adds	r3, #1
   1fbe6:	b2db      	uxtb	r3, r3
   1fbe8:	7323      	strb	r3, [r4, #12]
   1fbea:	2b00      	cmp	r3, #0
   1fbec:	d13b      	bne.n	1fc66 <ctr_drbg_update_internal+0xc2>
   1fbee:	7ae3      	ldrb	r3, [r4, #11]
   1fbf0:	3301      	adds	r3, #1
   1fbf2:	b2db      	uxtb	r3, r3
   1fbf4:	72e3      	strb	r3, [r4, #11]
   1fbf6:	2b00      	cmp	r3, #0
   1fbf8:	d135      	bne.n	1fc66 <ctr_drbg_update_internal+0xc2>
   1fbfa:	7aa3      	ldrb	r3, [r4, #10]
   1fbfc:	3301      	adds	r3, #1
   1fbfe:	b2db      	uxtb	r3, r3
   1fc00:	72a3      	strb	r3, [r4, #10]
   1fc02:	2b00      	cmp	r3, #0
   1fc04:	d12f      	bne.n	1fc66 <ctr_drbg_update_internal+0xc2>
   1fc06:	7a63      	ldrb	r3, [r4, #9]
   1fc08:	3301      	adds	r3, #1
   1fc0a:	b2db      	uxtb	r3, r3
   1fc0c:	7263      	strb	r3, [r4, #9]
   1fc0e:	bb53      	cbnz	r3, 1fc66 <ctr_drbg_update_internal+0xc2>
   1fc10:	7a23      	ldrb	r3, [r4, #8]
   1fc12:	3301      	adds	r3, #1
   1fc14:	b2db      	uxtb	r3, r3
   1fc16:	7223      	strb	r3, [r4, #8]
   1fc18:	bb2b      	cbnz	r3, 1fc66 <ctr_drbg_update_internal+0xc2>
   1fc1a:	79e3      	ldrb	r3, [r4, #7]
   1fc1c:	3301      	adds	r3, #1
   1fc1e:	b2db      	uxtb	r3, r3
   1fc20:	71e3      	strb	r3, [r4, #7]
   1fc22:	bb03      	cbnz	r3, 1fc66 <ctr_drbg_update_internal+0xc2>
   1fc24:	79a3      	ldrb	r3, [r4, #6]
   1fc26:	3301      	adds	r3, #1
   1fc28:	b2db      	uxtb	r3, r3
   1fc2a:	71a3      	strb	r3, [r4, #6]
   1fc2c:	b9db      	cbnz	r3, 1fc66 <ctr_drbg_update_internal+0xc2>
   1fc2e:	7963      	ldrb	r3, [r4, #5]
   1fc30:	3301      	adds	r3, #1
   1fc32:	b2db      	uxtb	r3, r3
   1fc34:	7163      	strb	r3, [r4, #5]
   1fc36:	b9b3      	cbnz	r3, 1fc66 <ctr_drbg_update_internal+0xc2>
   1fc38:	7923      	ldrb	r3, [r4, #4]
   1fc3a:	3301      	adds	r3, #1
   1fc3c:	b2db      	uxtb	r3, r3
   1fc3e:	7123      	strb	r3, [r4, #4]
   1fc40:	b98b      	cbnz	r3, 1fc66 <ctr_drbg_update_internal+0xc2>
   1fc42:	78e3      	ldrb	r3, [r4, #3]
   1fc44:	3301      	adds	r3, #1
   1fc46:	b2db      	uxtb	r3, r3
   1fc48:	70e3      	strb	r3, [r4, #3]
   1fc4a:	b963      	cbnz	r3, 1fc66 <ctr_drbg_update_internal+0xc2>
   1fc4c:	78a3      	ldrb	r3, [r4, #2]
   1fc4e:	3301      	adds	r3, #1
   1fc50:	b2db      	uxtb	r3, r3
   1fc52:	70a3      	strb	r3, [r4, #2]
   1fc54:	b93b      	cbnz	r3, 1fc66 <ctr_drbg_update_internal+0xc2>
   1fc56:	7863      	ldrb	r3, [r4, #1]
   1fc58:	3301      	adds	r3, #1
   1fc5a:	b2db      	uxtb	r3, r3
   1fc5c:	7063      	strb	r3, [r4, #1]
   1fc5e:	b913      	cbnz	r3, 1fc66 <ctr_drbg_update_internal+0xc2>
   1fc60:	7823      	ldrb	r3, [r4, #0]
   1fc62:	3301      	adds	r3, #1
   1fc64:	7023      	strb	r3, [r4, #0]
   1fc66:	4633      	mov	r3, r6
   1fc68:	4622      	mov	r2, r4
   1fc6a:	2101      	movs	r1, #1
   1fc6c:	4640      	mov	r0, r8
   1fc6e:	f000 fd01 	bl	20674 <cc_mbedtls_aes_crypt_ecb>
   1fc72:	4607      	mov	r7, r0
   1fc74:	2800      	cmp	r0, #0
   1fc76:	d12b      	bne.n	1fcd0 <ctr_drbg_update_internal+0x12c>
   1fc78:	3610      	adds	r6, #16
   1fc7a:	ab08      	add	r3, sp, #32
   1fc7c:	429e      	cmp	r6, r3
   1fc7e:	d19e      	bne.n	1fbbe <ctr_drbg_update_internal+0x1a>
   1fc80:	9e01      	ldr	r6, [sp, #4]
   1fc82:	686a      	ldr	r2, [r5, #4]
   1fc84:	9f00      	ldr	r7, [sp, #0]
   1fc86:	6829      	ldr	r1, [r5, #0]
   1fc88:	68ab      	ldr	r3, [r5, #8]
   1fc8a:	4072      	eors	r2, r6
   1fc8c:	9e02      	ldr	r6, [sp, #8]
   1fc8e:	9201      	str	r2, [sp, #4]
   1fc90:	4079      	eors	r1, r7
   1fc92:	4073      	eors	r3, r6
   1fc94:	9100      	str	r1, [sp, #0]
   1fc96:	9e03      	ldr	r6, [sp, #12]
   1fc98:	68e9      	ldr	r1, [r5, #12]
   1fc9a:	692a      	ldr	r2, [r5, #16]
   1fc9c:	9302      	str	r3, [sp, #8]
   1fc9e:	4071      	eors	r1, r6
   1fca0:	9e04      	ldr	r6, [sp, #16]
   1fca2:	696b      	ldr	r3, [r5, #20]
   1fca4:	9103      	str	r1, [sp, #12]
   1fca6:	4056      	eors	r6, r2
   1fca8:	9a05      	ldr	r2, [sp, #20]
   1fcaa:	9604      	str	r6, [sp, #16]
   1fcac:	ea83 0102 	eor.w	r1, r3, r2
   1fcb0:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   1fcb4:	9d06      	ldr	r5, [sp, #24]
   1fcb6:	9105      	str	r1, [sp, #20]
   1fcb8:	4055      	eors	r5, r2
   1fcba:	9a07      	ldr	r2, [sp, #28]
   1fcbc:	4640      	mov	r0, r8
   1fcbe:	4053      	eors	r3, r2
   1fcc0:	4669      	mov	r1, sp
   1fcc2:	2280      	movs	r2, #128	; 0x80
   1fcc4:	e9cd 5306 	strd	r5, r3, [sp, #24]
   1fcc8:	f000 fcba 	bl	20640 <cc_mbedtls_aes_setkey_enc>
   1fccc:	4607      	mov	r7, r0
   1fcce:	b138      	cbz	r0, 1fce0 <ctr_drbg_update_internal+0x13c>
   1fcd0:	4668      	mov	r0, sp
   1fcd2:	2120      	movs	r1, #32
   1fcd4:	f7ff fc92 	bl	1f5fc <mbedtls_platform_zeroize>
   1fcd8:	4638      	mov	r0, r7
   1fcda:	b008      	add	sp, #32
   1fcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fce0:	2210      	movs	r2, #16
   1fce2:	4620      	mov	r0, r4
   1fce4:	eb0d 0102 	add.w	r1, sp, r2
   1fce8:	f002 fea1 	bl	22a2e <memcpy>
   1fcec:	e7f0      	b.n	1fcd0 <ctr_drbg_update_internal+0x12c>
   1fcee:	bf00      	nop

0001fcf0 <mbedtls_ctr_drbg_reseed_internal>:
   1fcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fcf4:	4604      	mov	r4, r0
   1fcf6:	6980      	ldr	r0, [r0, #24]
   1fcf8:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1fcfc:	d851      	bhi.n	1fda2 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1fcfe:	461d      	mov	r5, r3
   1fd00:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1fd04:	42ab      	cmp	r3, r5
   1fd06:	d34c      	bcc.n	1fda2 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1fd08:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1fd0c:	1a18      	subs	r0, r3, r0
   1fd0e:	4290      	cmp	r0, r2
   1fd10:	4616      	mov	r6, r2
   1fd12:	d346      	bcc.n	1fda2 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1fd14:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1fdb0 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1fd18:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1fd1c:	460f      	mov	r7, r1
   1fd1e:	4640      	mov	r0, r8
   1fd20:	2100      	movs	r1, #0
   1fd22:	f002 fea8 	bl	22a76 <memset>
   1fd26:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1fd2a:	69a2      	ldr	r2, [r4, #24]
   1fd2c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1fd30:	4641      	mov	r1, r8
   1fd32:	4798      	blx	r3
   1fd34:	2800      	cmp	r0, #0
   1fd36:	d137      	bne.n	1fda8 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   1fd38:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1fd3c:	b135      	cbz	r5, 1fd4c <mbedtls_ctr_drbg_reseed_internal+0x5c>
   1fd3e:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1fd42:	462a      	mov	r2, r5
   1fd44:	4641      	mov	r1, r8
   1fd46:	4798      	blx	r3
   1fd48:	bb70      	cbnz	r0, 1fda8 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   1fd4a:	44a9      	add	r9, r5
   1fd4c:	b107      	cbz	r7, 1fd50 <mbedtls_ctr_drbg_reseed_internal+0x60>
   1fd4e:	b9c6      	cbnz	r6, 1fd82 <mbedtls_ctr_drbg_reseed_internal+0x92>
   1fd50:	4917      	ldr	r1, [pc, #92]	; (1fdb0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1fd52:	464a      	mov	r2, r9
   1fd54:	4608      	mov	r0, r1
   1fd56:	f7ff fde5 	bl	1f924 <block_cipher_df>
   1fd5a:	4605      	mov	r5, r0
   1fd5c:	b138      	cbz	r0, 1fd6e <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1fd5e:	4814      	ldr	r0, [pc, #80]	; (1fdb0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1fd60:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1fd64:	f7ff fc4a 	bl	1f5fc <mbedtls_platform_zeroize>
   1fd68:	4628      	mov	r0, r5
   1fd6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1fd6e:	4910      	ldr	r1, [pc, #64]	; (1fdb0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1fd70:	4620      	mov	r0, r4
   1fd72:	f7ff ff17 	bl	1fba4 <ctr_drbg_update_internal>
   1fd76:	4605      	mov	r5, r0
   1fd78:	2800      	cmp	r0, #0
   1fd7a:	d1f0      	bne.n	1fd5e <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1fd7c:	2301      	movs	r3, #1
   1fd7e:	6123      	str	r3, [r4, #16]
   1fd80:	e7ed      	b.n	1fd5e <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1fd82:	4639      	mov	r1, r7
   1fd84:	eb08 0009 	add.w	r0, r8, r9
   1fd88:	4632      	mov	r2, r6
   1fd8a:	f002 fe50 	bl	22a2e <memcpy>
   1fd8e:	4908      	ldr	r1, [pc, #32]	; (1fdb0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1fd90:	44b1      	add	r9, r6
   1fd92:	464a      	mov	r2, r9
   1fd94:	4608      	mov	r0, r1
   1fd96:	f7ff fdc5 	bl	1f924 <block_cipher_df>
   1fd9a:	4605      	mov	r5, r0
   1fd9c:	2800      	cmp	r0, #0
   1fd9e:	d1de      	bne.n	1fd5e <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1fda0:	e7e5      	b.n	1fd6e <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1fda2:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1fda6:	e7df      	b.n	1fd68 <mbedtls_ctr_drbg_reseed_internal+0x78>
   1fda8:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1fdac:	e7dc      	b.n	1fd68 <mbedtls_ctr_drbg_reseed_internal+0x78>
   1fdae:	bf00      	nop
   1fdb0:	20006810 	.word	0x20006810

0001fdb4 <cc_mbedtls_ctr_drbg_init>:
   1fdb4:	b510      	push	{r4, lr}
   1fdb6:	22a4      	movs	r2, #164	; 0xa4
   1fdb8:	4604      	mov	r4, r0
   1fdba:	2100      	movs	r1, #0
   1fdbc:	f002 fe5b 	bl	22a76 <memset>
   1fdc0:	4b04      	ldr	r3, [pc, #16]	; (1fdd4 <cc_mbedtls_ctr_drbg_init+0x20>)
   1fdc2:	f04f 32ff 	mov.w	r2, #4294967295
   1fdc6:	6122      	str	r2, [r4, #16]
   1fdc8:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1fdcc:	681b      	ldr	r3, [r3, #0]
   1fdce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fdd2:	4718      	bx	r3
   1fdd4:	20000764 	.word	0x20000764

0001fdd8 <cc_mbedtls_ctr_drbg_seed>:
   1fdd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fddc:	b085      	sub	sp, #20
   1fdde:	4605      	mov	r5, r0
   1fde0:	460f      	mov	r7, r1
   1fde2:	4616      	mov	r6, r2
   1fde4:	4668      	mov	r0, sp
   1fde6:	2210      	movs	r2, #16
   1fde8:	2100      	movs	r1, #0
   1fdea:	4699      	mov	r9, r3
   1fdec:	f002 fe43 	bl	22a76 <memset>
   1fdf0:	4b1f      	ldr	r3, [pc, #124]	; (1fe70 <cc_mbedtls_ctr_drbg_seed+0x98>)
   1fdf2:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1fdf6:	681b      	ldr	r3, [r3, #0]
   1fdf8:	4640      	mov	r0, r8
   1fdfa:	4798      	blx	r3
   1fdfc:	b120      	cbz	r0, 1fe08 <cc_mbedtls_ctr_drbg_seed+0x30>
   1fdfe:	4604      	mov	r4, r0
   1fe00:	4620      	mov	r0, r4
   1fe02:	b005      	add	sp, #20
   1fe04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fe08:	f105 0420 	add.w	r4, r5, #32
   1fe0c:	4620      	mov	r0, r4
   1fe0e:	f000 fc01 	bl	20614 <cc_mbedtls_aes_init>
   1fe12:	69aa      	ldr	r2, [r5, #24]
   1fe14:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1fe18:	692e      	ldr	r6, [r5, #16]
   1fe1a:	b9fa      	cbnz	r2, 1fe5c <cc_mbedtls_ctr_drbg_seed+0x84>
   1fe1c:	2220      	movs	r2, #32
   1fe1e:	2e00      	cmp	r6, #0
   1fe20:	61aa      	str	r2, [r5, #24]
   1fe22:	db22      	blt.n	1fe6a <cc_mbedtls_ctr_drbg_seed+0x92>
   1fe24:	f64f 73f0 	movw	r3, #65520	; 0xfff0
   1fe28:	4620      	mov	r0, r4
   1fe2a:	4669      	mov	r1, sp
   1fe2c:	61eb      	str	r3, [r5, #28]
   1fe2e:	2280      	movs	r2, #128	; 0x80
   1fe30:	f000 fc06 	bl	20640 <cc_mbedtls_aes_setkey_enc>
   1fe34:	4604      	mov	r4, r0
   1fe36:	b930      	cbnz	r0, 1fe46 <cc_mbedtls_ctr_drbg_seed+0x6e>
   1fe38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1fe3a:	4633      	mov	r3, r6
   1fe3c:	4649      	mov	r1, r9
   1fe3e:	4628      	mov	r0, r5
   1fe40:	f7ff ff56 	bl	1fcf0 <mbedtls_ctr_drbg_reseed_internal>
   1fe44:	4604      	mov	r4, r0
   1fe46:	4b0b      	ldr	r3, [pc, #44]	; (1fe74 <cc_mbedtls_ctr_drbg_seed+0x9c>)
   1fe48:	4640      	mov	r0, r8
   1fe4a:	681b      	ldr	r3, [r3, #0]
   1fe4c:	4798      	blx	r3
   1fe4e:	2800      	cmp	r0, #0
   1fe50:	bf18      	it	ne
   1fe52:	4604      	movne	r4, r0
   1fe54:	4620      	mov	r0, r4
   1fe56:	b005      	add	sp, #20
   1fe58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fe5c:	2e00      	cmp	r6, #0
   1fe5e:	dae1      	bge.n	1fe24 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1fe60:	2a17      	cmp	r2, #23
   1fe62:	d802      	bhi.n	1fe6a <cc_mbedtls_ctr_drbg_seed+0x92>
   1fe64:	1c53      	adds	r3, r2, #1
   1fe66:	085e      	lsrs	r6, r3, #1
   1fe68:	e7dc      	b.n	1fe24 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1fe6a:	2600      	movs	r6, #0
   1fe6c:	e7da      	b.n	1fe24 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1fe6e:	bf00      	nop
   1fe70:	20000768 	.word	0x20000768
   1fe74:	2000076c 	.word	0x2000076c

0001fe78 <cc_mbedtls_ctr_drbg_random_with_add>:
   1fe78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe7c:	b08d      	sub	sp, #52	; 0x34
   1fe7e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1fe82:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1fe86:	f200 80e4 	bhi.w	20052 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   1fe8a:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   1fe8e:	f200 80dd 	bhi.w	2004c <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1fe92:	4604      	mov	r4, r0
   1fe94:	4615      	mov	r5, r2
   1fe96:	460e      	mov	r6, r1
   1fe98:	2220      	movs	r2, #32
   1fe9a:	2100      	movs	r1, #0
   1fe9c:	a804      	add	r0, sp, #16
   1fe9e:	461f      	mov	r7, r3
   1fea0:	f002 fde9 	bl	22a76 <memset>
   1fea4:	4b6c      	ldr	r3, [pc, #432]	; (20058 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   1fea6:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1feaa:	681b      	ldr	r3, [r3, #0]
   1feac:	4648      	mov	r0, r9
   1feae:	4798      	blx	r3
   1feb0:	4683      	mov	fp, r0
   1feb2:	2800      	cmp	r0, #0
   1feb4:	f040 8093 	bne.w	1ffde <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1feb8:	6922      	ldr	r2, [r4, #16]
   1feba:	69e3      	ldr	r3, [r4, #28]
   1febc:	429a      	cmp	r2, r3
   1febe:	f300 8092 	bgt.w	1ffe6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1fec2:	6963      	ldr	r3, [r4, #20]
   1fec4:	2b00      	cmp	r3, #0
   1fec6:	f040 808e 	bne.w	1ffe6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1feca:	f1b8 0f00 	cmp.w	r8, #0
   1fece:	f040 80a9 	bne.w	20024 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   1fed2:	f8df a188 	ldr.w	sl, [pc, #392]	; 2005c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1fed6:	466f      	mov	r7, sp
   1fed8:	2d00      	cmp	r5, #0
   1feda:	f000 8098 	beq.w	2000e <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1fede:	f104 0820 	add.w	r8, r4, #32
   1fee2:	466f      	mov	r7, sp
   1fee4:	e00e      	b.n	1ff04 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   1fee6:	2d10      	cmp	r5, #16
   1fee8:	46ab      	mov	fp, r5
   1feea:	bf28      	it	cs
   1feec:	f04f 0b10 	movcs.w	fp, #16
   1fef0:	4630      	mov	r0, r6
   1fef2:	465a      	mov	r2, fp
   1fef4:	4639      	mov	r1, r7
   1fef6:	f002 fd9a 	bl	22a2e <memcpy>
   1fefa:	ebb5 050b 	subs.w	r5, r5, fp
   1fefe:	445e      	add	r6, fp
   1ff00:	f000 8085 	beq.w	2000e <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1ff04:	7be3      	ldrb	r3, [r4, #15]
   1ff06:	3301      	adds	r3, #1
   1ff08:	b2db      	uxtb	r3, r3
   1ff0a:	73e3      	strb	r3, [r4, #15]
   1ff0c:	2b00      	cmp	r3, #0
   1ff0e:	d14d      	bne.n	1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff10:	7ba3      	ldrb	r3, [r4, #14]
   1ff12:	3301      	adds	r3, #1
   1ff14:	b2db      	uxtb	r3, r3
   1ff16:	73a3      	strb	r3, [r4, #14]
   1ff18:	2b00      	cmp	r3, #0
   1ff1a:	d147      	bne.n	1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff1c:	7b63      	ldrb	r3, [r4, #13]
   1ff1e:	3301      	adds	r3, #1
   1ff20:	b2db      	uxtb	r3, r3
   1ff22:	7363      	strb	r3, [r4, #13]
   1ff24:	2b00      	cmp	r3, #0
   1ff26:	d141      	bne.n	1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff28:	7b23      	ldrb	r3, [r4, #12]
   1ff2a:	3301      	adds	r3, #1
   1ff2c:	b2db      	uxtb	r3, r3
   1ff2e:	7323      	strb	r3, [r4, #12]
   1ff30:	2b00      	cmp	r3, #0
   1ff32:	d13b      	bne.n	1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff34:	7ae3      	ldrb	r3, [r4, #11]
   1ff36:	3301      	adds	r3, #1
   1ff38:	b2db      	uxtb	r3, r3
   1ff3a:	72e3      	strb	r3, [r4, #11]
   1ff3c:	2b00      	cmp	r3, #0
   1ff3e:	d135      	bne.n	1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff40:	7aa3      	ldrb	r3, [r4, #10]
   1ff42:	3301      	adds	r3, #1
   1ff44:	b2db      	uxtb	r3, r3
   1ff46:	72a3      	strb	r3, [r4, #10]
   1ff48:	2b00      	cmp	r3, #0
   1ff4a:	d12f      	bne.n	1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff4c:	7a63      	ldrb	r3, [r4, #9]
   1ff4e:	3301      	adds	r3, #1
   1ff50:	b2db      	uxtb	r3, r3
   1ff52:	7263      	strb	r3, [r4, #9]
   1ff54:	bb53      	cbnz	r3, 1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff56:	7a23      	ldrb	r3, [r4, #8]
   1ff58:	3301      	adds	r3, #1
   1ff5a:	b2db      	uxtb	r3, r3
   1ff5c:	7223      	strb	r3, [r4, #8]
   1ff5e:	bb2b      	cbnz	r3, 1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff60:	79e3      	ldrb	r3, [r4, #7]
   1ff62:	3301      	adds	r3, #1
   1ff64:	b2db      	uxtb	r3, r3
   1ff66:	71e3      	strb	r3, [r4, #7]
   1ff68:	bb03      	cbnz	r3, 1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff6a:	79a3      	ldrb	r3, [r4, #6]
   1ff6c:	3301      	adds	r3, #1
   1ff6e:	b2db      	uxtb	r3, r3
   1ff70:	71a3      	strb	r3, [r4, #6]
   1ff72:	b9db      	cbnz	r3, 1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff74:	7963      	ldrb	r3, [r4, #5]
   1ff76:	3301      	adds	r3, #1
   1ff78:	b2db      	uxtb	r3, r3
   1ff7a:	7163      	strb	r3, [r4, #5]
   1ff7c:	b9b3      	cbnz	r3, 1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff7e:	7923      	ldrb	r3, [r4, #4]
   1ff80:	3301      	adds	r3, #1
   1ff82:	b2db      	uxtb	r3, r3
   1ff84:	7123      	strb	r3, [r4, #4]
   1ff86:	b98b      	cbnz	r3, 1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff88:	78e3      	ldrb	r3, [r4, #3]
   1ff8a:	3301      	adds	r3, #1
   1ff8c:	b2db      	uxtb	r3, r3
   1ff8e:	70e3      	strb	r3, [r4, #3]
   1ff90:	b963      	cbnz	r3, 1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff92:	78a3      	ldrb	r3, [r4, #2]
   1ff94:	3301      	adds	r3, #1
   1ff96:	b2db      	uxtb	r3, r3
   1ff98:	70a3      	strb	r3, [r4, #2]
   1ff9a:	b93b      	cbnz	r3, 1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ff9c:	7863      	ldrb	r3, [r4, #1]
   1ff9e:	3301      	adds	r3, #1
   1ffa0:	b2db      	uxtb	r3, r3
   1ffa2:	7063      	strb	r3, [r4, #1]
   1ffa4:	b913      	cbnz	r3, 1ffac <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ffa6:	7823      	ldrb	r3, [r4, #0]
   1ffa8:	3301      	adds	r3, #1
   1ffaa:	7023      	strb	r3, [r4, #0]
   1ffac:	463b      	mov	r3, r7
   1ffae:	4622      	mov	r2, r4
   1ffb0:	2101      	movs	r1, #1
   1ffb2:	4640      	mov	r0, r8
   1ffb4:	f000 fb5e 	bl	20674 <cc_mbedtls_aes_crypt_ecb>
   1ffb8:	4683      	mov	fp, r0
   1ffba:	2800      	cmp	r0, #0
   1ffbc:	d093      	beq.n	1fee6 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   1ffbe:	f8da 3000 	ldr.w	r3, [sl]
   1ffc2:	4648      	mov	r0, r9
   1ffc4:	4798      	blx	r3
   1ffc6:	2120      	movs	r1, #32
   1ffc8:	4603      	mov	r3, r0
   1ffca:	a804      	add	r0, sp, #16
   1ffcc:	2b00      	cmp	r3, #0
   1ffce:	bf18      	it	ne
   1ffd0:	469b      	movne	fp, r3
   1ffd2:	f7ff fb13 	bl	1f5fc <mbedtls_platform_zeroize>
   1ffd6:	4638      	mov	r0, r7
   1ffd8:	2110      	movs	r1, #16
   1ffda:	f7ff fb0f 	bl	1f5fc <mbedtls_platform_zeroize>
   1ffde:	4658      	mov	r0, fp
   1ffe0:	b00d      	add	sp, #52	; 0x34
   1ffe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffe6:	4642      	mov	r2, r8
   1ffe8:	4639      	mov	r1, r7
   1ffea:	2300      	movs	r3, #0
   1ffec:	4620      	mov	r0, r4
   1ffee:	f7ff fe7f 	bl	1fcf0 <mbedtls_ctr_drbg_reseed_internal>
   1fff2:	f8df a068 	ldr.w	sl, [pc, #104]	; 2005c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1fff6:	2800      	cmp	r0, #0
   1fff8:	f43f af6d 	beq.w	1fed6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1fffc:	f8da 3000 	ldr.w	r3, [sl]
   20000:	4648      	mov	r0, r9
   20002:	4798      	blx	r3
   20004:	4683      	mov	fp, r0
   20006:	2800      	cmp	r0, #0
   20008:	f43f af65 	beq.w	1fed6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   2000c:	e7e7      	b.n	1ffde <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   2000e:	a904      	add	r1, sp, #16
   20010:	4620      	mov	r0, r4
   20012:	f7ff fdc7 	bl	1fba4 <ctr_drbg_update_internal>
   20016:	4683      	mov	fp, r0
   20018:	2800      	cmp	r0, #0
   2001a:	d1d0      	bne.n	1ffbe <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   2001c:	6923      	ldr	r3, [r4, #16]
   2001e:	3301      	adds	r3, #1
   20020:	6123      	str	r3, [r4, #16]
   20022:	e7cc      	b.n	1ffbe <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   20024:	4642      	mov	r2, r8
   20026:	4639      	mov	r1, r7
   20028:	a804      	add	r0, sp, #16
   2002a:	f7ff fc7b 	bl	1f924 <block_cipher_df>
   2002e:	4683      	mov	fp, r0
   20030:	b118      	cbz	r0, 2003a <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   20032:	f8df a028 	ldr.w	sl, [pc, #40]	; 2005c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   20036:	466f      	mov	r7, sp
   20038:	e7c1      	b.n	1ffbe <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   2003a:	a904      	add	r1, sp, #16
   2003c:	4620      	mov	r0, r4
   2003e:	f7ff fdb1 	bl	1fba4 <ctr_drbg_update_internal>
   20042:	4683      	mov	fp, r0
   20044:	2800      	cmp	r0, #0
   20046:	f43f af44 	beq.w	1fed2 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   2004a:	e7f2      	b.n	20032 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   2004c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   20050:	e7c5      	b.n	1ffde <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   20052:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   20056:	e7c2      	b.n	1ffde <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   20058:	20000768 	.word	0x20000768
   2005c:	2000076c 	.word	0x2000076c

00020060 <cc_mbedtls_sha256_ret>:
   20060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20062:	461c      	mov	r4, r3
   20064:	4605      	mov	r5, r0
   20066:	4811      	ldr	r0, [pc, #68]	; (200ac <cc_mbedtls_sha256_ret+0x4c>)
   20068:	460e      	mov	r6, r1
   2006a:	4617      	mov	r7, r2
   2006c:	f7ff fb4e 	bl	1f70c <cc_mbedtls_sha256_init>
   20070:	4621      	mov	r1, r4
   20072:	480e      	ldr	r0, [pc, #56]	; (200ac <cc_mbedtls_sha256_ret+0x4c>)
   20074:	f7ff fb64 	bl	1f740 <cc_mbedtls_sha256_starts_ret>
   20078:	4604      	mov	r4, r0
   2007a:	b120      	cbz	r0, 20086 <cc_mbedtls_sha256_ret+0x26>
   2007c:	480b      	ldr	r0, [pc, #44]	; (200ac <cc_mbedtls_sha256_ret+0x4c>)
   2007e:	f7ff fb59 	bl	1f734 <cc_mbedtls_sha256_free>
   20082:	4620      	mov	r0, r4
   20084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20086:	4809      	ldr	r0, [pc, #36]	; (200ac <cc_mbedtls_sha256_ret+0x4c>)
   20088:	4632      	mov	r2, r6
   2008a:	4629      	mov	r1, r5
   2008c:	f7ff fb6c 	bl	1f768 <cc_mbedtls_sha256_update_ret>
   20090:	4604      	mov	r4, r0
   20092:	2800      	cmp	r0, #0
   20094:	d1f2      	bne.n	2007c <cc_mbedtls_sha256_ret+0x1c>
   20096:	4639      	mov	r1, r7
   20098:	4804      	ldr	r0, [pc, #16]	; (200ac <cc_mbedtls_sha256_ret+0x4c>)
   2009a:	f7ff fb6d 	bl	1f778 <cc_mbedtls_sha256_finish_ret>
   2009e:	4604      	mov	r4, r0
   200a0:	4802      	ldr	r0, [pc, #8]	; (200ac <cc_mbedtls_sha256_ret+0x4c>)
   200a2:	f7ff fb47 	bl	1f734 <cc_mbedtls_sha256_free>
   200a6:	4620      	mov	r0, r4
   200a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   200aa:	bf00      	nop
   200ac:	20006990 	.word	0x20006990

000200b0 <RNG_PLAT_SetUserRngParameters>:
   200b0:	b530      	push	{r4, r5, lr}
   200b2:	b083      	sub	sp, #12
   200b4:	231c      	movs	r3, #28
   200b6:	a901      	add	r1, sp, #4
   200b8:	4604      	mov	r4, r0
   200ba:	9301      	str	r3, [sp, #4]
   200bc:	f000 f83c 	bl	20138 <CC_PalTrngParamGet>
   200c0:	4605      	mov	r5, r0
   200c2:	b938      	cbnz	r0, 200d4 <RNG_PLAT_SetUserRngParameters+0x24>
   200c4:	9b01      	ldr	r3, [sp, #4]
   200c6:	2b1c      	cmp	r3, #28
   200c8:	d007      	beq.n	200da <RNG_PLAT_SetUserRngParameters+0x2a>
   200ca:	4d15      	ldr	r5, [pc, #84]	; (20120 <RNG_PLAT_SetUserRngParameters+0x70>)
   200cc:	4620      	mov	r0, r4
   200ce:	211c      	movs	r1, #28
   200d0:	f000 f82e 	bl	20130 <CC_PalMemSetZeroPlat>
   200d4:	4628      	mov	r0, r5
   200d6:	b003      	add	sp, #12
   200d8:	bd30      	pop	{r4, r5, pc}
   200da:	e9d4 3200 	ldrd	r3, r2, [r4]
   200de:	2101      	movs	r1, #1
   200e0:	3b00      	subs	r3, #0
   200e2:	bf18      	it	ne
   200e4:	2301      	movne	r3, #1
   200e6:	61e1      	str	r1, [r4, #28]
   200e8:	b10a      	cbz	r2, 200ee <RNG_PLAT_SetUserRngParameters+0x3e>
   200ea:	f043 0302 	orr.w	r3, r3, #2
   200ee:	68a2      	ldr	r2, [r4, #8]
   200f0:	b932      	cbnz	r2, 20100 <RNG_PLAT_SetUserRngParameters+0x50>
   200f2:	68e2      	ldr	r2, [r4, #12]
   200f4:	b942      	cbnz	r2, 20108 <RNG_PLAT_SetUserRngParameters+0x58>
   200f6:	e9c4 3208 	strd	r3, r2, [r4, #32]
   200fa:	b97b      	cbnz	r3, 2011c <RNG_PLAT_SetUserRngParameters+0x6c>
   200fc:	4d09      	ldr	r5, [pc, #36]	; (20124 <RNG_PLAT_SetUserRngParameters+0x74>)
   200fe:	e7e5      	b.n	200cc <RNG_PLAT_SetUserRngParameters+0x1c>
   20100:	68e2      	ldr	r2, [r4, #12]
   20102:	f043 0304 	orr.w	r3, r3, #4
   20106:	b13a      	cbz	r2, 20118 <RNG_PLAT_SetUserRngParameters+0x68>
   20108:	f043 0308 	orr.w	r3, r3, #8
   2010c:	2200      	movs	r2, #0
   2010e:	4628      	mov	r0, r5
   20110:	e9c4 3208 	strd	r3, r2, [r4, #32]
   20114:	b003      	add	sp, #12
   20116:	bd30      	pop	{r4, r5, pc}
   20118:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2011c:	4615      	mov	r5, r2
   2011e:	e7d9      	b.n	200d4 <RNG_PLAT_SetUserRngParameters+0x24>
   20120:	00f00c37 	.word	0x00f00c37
   20124:	00f00c0e 	.word	0x00f00c0e

00020128 <CC_PalMemCopyPlat>:
   20128:	f002 bc6b 	b.w	22a02 <memmove>

0002012c <CC_PalMemSetPlat>:
   2012c:	f002 bca3 	b.w	22a76 <memset>

00020130 <CC_PalMemSetZeroPlat>:
   20130:	460a      	mov	r2, r1
   20132:	2100      	movs	r1, #0
   20134:	f002 bc9f 	b.w	22a76 <memset>

00020138 <CC_PalTrngParamGet>:
   20138:	b118      	cbz	r0, 20142 <CC_PalTrngParamGet+0xa>
   2013a:	b111      	cbz	r1, 20142 <CC_PalTrngParamGet+0xa>
   2013c:	680b      	ldr	r3, [r1, #0]
   2013e:	2b1c      	cmp	r3, #28
   20140:	d001      	beq.n	20146 <CC_PalTrngParamGet+0xe>
   20142:	2001      	movs	r0, #1
   20144:	4770      	bx	lr
   20146:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2014a:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   2014e:	3201      	adds	r2, #1
   20150:	bf14      	ite	ne
   20152:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   20156:	f241 225c 	movweq	r2, #4700	; 0x125c
   2015a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2015e:	6002      	str	r2, [r0, #0]
   20160:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   20164:	3201      	adds	r2, #1
   20166:	bf14      	ite	ne
   20168:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   2016c:	f641 1264 	movweq	r2, #6500	; 0x1964
   20170:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20174:	6042      	str	r2, [r0, #4]
   20176:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   2017a:	3201      	adds	r2, #1
   2017c:	bf14      	ite	ne
   2017e:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   20182:	f640 62d8 	movweq	r2, #3800	; 0xed8
   20186:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2018a:	6082      	str	r2, [r0, #8]
   2018c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   20190:	3201      	adds	r2, #1
   20192:	bf14      	ite	ne
   20194:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   20198:	f241 3288 	movweq	r2, #5000	; 0x1388
   2019c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   201a0:	60c2      	str	r2, [r0, #12]
   201a2:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   201a6:	3201      	adds	r2, #1
   201a8:	bf14      	ite	ne
   201aa:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   201ae:	2290      	moveq	r2, #144	; 0x90
   201b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   201b4:	6102      	str	r2, [r0, #16]
   201b6:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   201ba:	3201      	adds	r2, #1
   201bc:	bf14      	ite	ne
   201be:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   201c2:	2251      	moveq	r2, #81	; 0x51
   201c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   201c8:	6142      	str	r2, [r0, #20]
   201ca:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   201ce:	3201      	adds	r2, #1
   201d0:	bf14      	ite	ne
   201d2:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   201d6:	f240 3337 	movweq	r3, #823	; 0x337
   201da:	6183      	str	r3, [r0, #24]
   201dc:	2000      	movs	r0, #0
   201de:	4770      	bx	lr

000201e0 <LLF_RND_WaitRngInterrupt>:
   201e0:	b508      	push	{r3, lr}
   201e2:	4601      	mov	r1, r0
   201e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   201e8:	f7fe fe32 	bl	1ee50 <CC_HalWaitInterruptRND>
   201ec:	4902      	ldr	r1, [pc, #8]	; (201f8 <LLF_RND_WaitRngInterrupt+0x18>)
   201ee:	4a03      	ldr	r2, [pc, #12]	; (201fc <LLF_RND_WaitRngInterrupt+0x1c>)
   201f0:	2300      	movs	r3, #0
   201f2:	600b      	str	r3, [r1, #0]
   201f4:	6013      	str	r3, [r2, #0]
   201f6:	bd08      	pop	{r3, pc}
   201f8:	5002b1c8 	.word	0x5002b1c8
   201fc:	5002b12c 	.word	0x5002b12c

00020200 <LLF_RND_GetRoscSampleCnt>:
   20200:	3801      	subs	r0, #1
   20202:	2807      	cmp	r0, #7
   20204:	d805      	bhi.n	20212 <LLF_RND_GetRoscSampleCnt+0x12>
   20206:	e8df f000 	tbb	[pc, r0]
   2020a:	0e0a      	.short	0x0e0a
   2020c:	04041204 	.word	0x04041204
   20210:	0604      	.short	0x0604
   20212:	4809      	ldr	r0, [pc, #36]	; (20238 <LLF_RND_GetRoscSampleCnt+0x38>)
   20214:	4770      	bx	lr
   20216:	68cb      	ldr	r3, [r1, #12]
   20218:	624b      	str	r3, [r1, #36]	; 0x24
   2021a:	2000      	movs	r0, #0
   2021c:	4770      	bx	lr
   2021e:	680b      	ldr	r3, [r1, #0]
   20220:	624b      	str	r3, [r1, #36]	; 0x24
   20222:	2000      	movs	r0, #0
   20224:	4770      	bx	lr
   20226:	684b      	ldr	r3, [r1, #4]
   20228:	624b      	str	r3, [r1, #36]	; 0x24
   2022a:	2000      	movs	r0, #0
   2022c:	4770      	bx	lr
   2022e:	688b      	ldr	r3, [r1, #8]
   20230:	624b      	str	r3, [r1, #36]	; 0x24
   20232:	2000      	movs	r0, #0
   20234:	4770      	bx	lr
   20236:	bf00      	nop
   20238:	00f10c31 	.word	0x00f10c31

0002023c <LLF_RND_GetFastestRosc>:
   2023c:	680b      	ldr	r3, [r1, #0]
   2023e:	e002      	b.n	20246 <LLF_RND_GetFastestRosc+0xa>
   20240:	2b08      	cmp	r3, #8
   20242:	600b      	str	r3, [r1, #0]
   20244:	d806      	bhi.n	20254 <LLF_RND_GetFastestRosc+0x18>
   20246:	6a02      	ldr	r2, [r0, #32]
   20248:	4213      	tst	r3, r2
   2024a:	ea4f 0343 	mov.w	r3, r3, lsl #1
   2024e:	d0f7      	beq.n	20240 <LLF_RND_GetFastestRosc+0x4>
   20250:	2000      	movs	r0, #0
   20252:	4770      	bx	lr
   20254:	4800      	ldr	r0, [pc, #0]	; (20258 <LLF_RND_GetFastestRosc+0x1c>)
   20256:	4770      	bx	lr
   20258:	00f10c31 	.word	0x00f10c31

0002025c <LLF_RND_TurnOffTrng>:
   2025c:	4904      	ldr	r1, [pc, #16]	; (20270 <LLF_RND_TurnOffTrng+0x14>)
   2025e:	4a05      	ldr	r2, [pc, #20]	; (20274 <LLF_RND_TurnOffTrng+0x18>)
   20260:	2300      	movs	r3, #0
   20262:	600b      	str	r3, [r1, #0]
   20264:	f44f 6080 	mov.w	r0, #1024	; 0x400
   20268:	6013      	str	r3, [r2, #0]
   2026a:	f7fe bdd7 	b.w	1ee1c <CC_HalClearInterruptBit>
   2026e:	bf00      	nop
   20270:	5002b12c 	.word	0x5002b12c
   20274:	5002b1c4 	.word	0x5002b1c4

00020278 <SetDataBuffersInfo>:
   20278:	b5f0      	push	{r4, r5, r6, r7, lr}
   2027a:	b083      	sub	sp, #12
   2027c:	2400      	movs	r4, #0
   2027e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   20282:	f88d 4007 	strb.w	r4, [sp, #7]
   20286:	d325      	bcc.n	202d4 <SetDataBuffersInfo+0x5c>
   20288:	460c      	mov	r4, r1
   2028a:	4404      	add	r4, r0
   2028c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   20290:	4605      	mov	r5, r0
   20292:	d81f      	bhi.n	202d4 <SetDataBuffersInfo+0x5c>
   20294:	4617      	mov	r7, r2
   20296:	461e      	mov	r6, r3
   20298:	2201      	movs	r2, #1
   2029a:	f10d 0307 	add.w	r3, sp, #7
   2029e:	f000 fa13 	bl	206c8 <CC_PalDataBufferAttrGet>
   202a2:	4604      	mov	r4, r0
   202a4:	b9b0      	cbnz	r0, 202d4 <SetDataBuffersInfo+0x5c>
   202a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   202a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   202ac:	603d      	str	r5, [r7, #0]
   202ae:	713b      	strb	r3, [r7, #4]
   202b0:	b192      	cbz	r2, 202d8 <SetDataBuffersInfo+0x60>
   202b2:	b14e      	cbz	r6, 202c8 <SetDataBuffersInfo+0x50>
   202b4:	4602      	mov	r2, r0
   202b6:	9908      	ldr	r1, [sp, #32]
   202b8:	f10d 0307 	add.w	r3, sp, #7
   202bc:	4630      	mov	r0, r6
   202be:	f000 fa03 	bl	206c8 <CC_PalDataBufferAttrGet>
   202c2:	b938      	cbnz	r0, 202d4 <SetDataBuffersInfo+0x5c>
   202c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   202c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   202ca:	4620      	mov	r0, r4
   202cc:	6016      	str	r6, [r2, #0]
   202ce:	7113      	strb	r3, [r2, #4]
   202d0:	b003      	add	sp, #12
   202d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   202d4:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   202d8:	4620      	mov	r0, r4
   202da:	b003      	add	sp, #12
   202dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   202de:	bf00      	nop

000202e0 <InitHashDrv>:
   202e0:	b1e8      	cbz	r0, 2031e <InitHashDrv+0x3e>
   202e2:	b510      	push	{r4, lr}
   202e4:	6804      	ldr	r4, [r0, #0]
   202e6:	2c01      	cmp	r4, #1
   202e8:	d004      	beq.n	202f4 <InitHashDrv+0x14>
   202ea:	2c02      	cmp	r4, #2
   202ec:	d010      	beq.n	20310 <InitHashDrv+0x30>
   202ee:	b144      	cbz	r4, 20302 <InitHashDrv+0x22>
   202f0:	480c      	ldr	r0, [pc, #48]	; (20324 <InitHashDrv+0x44>)
   202f2:	bd10      	pop	{r4, pc}
   202f4:	490c      	ldr	r1, [pc, #48]	; (20328 <InitHashDrv+0x48>)
   202f6:	2220      	movs	r2, #32
   202f8:	3008      	adds	r0, #8
   202fa:	f7ff ff15 	bl	20128 <CC_PalMemCopyPlat>
   202fe:	2000      	movs	r0, #0
   20300:	bd10      	pop	{r4, pc}
   20302:	490a      	ldr	r1, [pc, #40]	; (2032c <InitHashDrv+0x4c>)
   20304:	2214      	movs	r2, #20
   20306:	3008      	adds	r0, #8
   20308:	f7ff ff0e 	bl	20128 <CC_PalMemCopyPlat>
   2030c:	4620      	mov	r0, r4
   2030e:	bd10      	pop	{r4, pc}
   20310:	4907      	ldr	r1, [pc, #28]	; (20330 <InitHashDrv+0x50>)
   20312:	2220      	movs	r2, #32
   20314:	3008      	adds	r0, #8
   20316:	f7ff ff07 	bl	20128 <CC_PalMemCopyPlat>
   2031a:	2000      	movs	r0, #0
   2031c:	bd10      	pop	{r4, pc}
   2031e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   20322:	4770      	bx	lr
   20324:	00f30001 	.word	0x00f30001
   20328:	000290e0 	.word	0x000290e0
   2032c:	000290ac 	.word	0x000290ac
   20330:	000290c0 	.word	0x000290c0

00020334 <ProcessHashDrv>:
   20334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20338:	2900      	cmp	r1, #0
   2033a:	f000 80ef 	beq.w	2051c <ProcessHashDrv+0x1e8>
   2033e:	4604      	mov	r4, r0
   20340:	2800      	cmp	r0, #0
   20342:	f000 80ef 	beq.w	20524 <ProcessHashDrv+0x1f0>
   20346:	6803      	ldr	r3, [r0, #0]
   20348:	4617      	mov	r7, r2
   2034a:	460e      	mov	r6, r1
   2034c:	2b00      	cmp	r3, #0
   2034e:	f000 80b9 	beq.w	204c4 <ProcessHashDrv+0x190>
   20352:	3b01      	subs	r3, #1
   20354:	2b01      	cmp	r3, #1
   20356:	f200 80cd 	bhi.w	204f4 <ProcessHashDrv+0x1c0>
   2035a:	4874      	ldr	r0, [pc, #464]	; (2052c <ProcessHashDrv+0x1f8>)
   2035c:	f04f 31ff 	mov.w	r1, #4294967295
   20360:	f04f 0802 	mov.w	r8, #2
   20364:	f7fe fe02 	bl	1ef6c <CC_PalMutexLock>
   20368:	2800      	cmp	r0, #0
   2036a:	f040 80b5 	bne.w	204d8 <ProcessHashDrv+0x1a4>
   2036e:	2000      	movs	r0, #0
   20370:	f7fe fe2c 	bl	1efcc <CC_PalPowerSaveModeSelect>
   20374:	4605      	mov	r5, r0
   20376:	2800      	cmp	r0, #0
   20378:	f040 80b8 	bne.w	204ec <ProcessHashDrv+0x1b8>
   2037c:	4a6c      	ldr	r2, [pc, #432]	; (20530 <ProcessHashDrv+0x1fc>)
   2037e:	6813      	ldr	r3, [r2, #0]
   20380:	2b00      	cmp	r3, #0
   20382:	d1fc      	bne.n	2037e <ProcessHashDrv+0x4a>
   20384:	486b      	ldr	r0, [pc, #428]	; (20534 <ProcessHashDrv+0x200>)
   20386:	6803      	ldr	r3, [r0, #0]
   20388:	2b00      	cmp	r3, #0
   2038a:	d1fc      	bne.n	20386 <ProcessHashDrv+0x52>
   2038c:	f04f 30ff 	mov.w	r0, #4294967295
   20390:	f7fe fd44 	bl	1ee1c <CC_HalClearInterruptBit>
   20394:	4b68      	ldr	r3, [pc, #416]	; (20538 <ProcessHashDrv+0x204>)
   20396:	6818      	ldr	r0, [r3, #0]
   20398:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   2039c:	f7fe fd4c 	bl	1ee38 <CC_HalMaskInterrupt>
   203a0:	4866      	ldr	r0, [pc, #408]	; (2053c <ProcessHashDrv+0x208>)
   203a2:	4a67      	ldr	r2, [pc, #412]	; (20540 <ProcessHashDrv+0x20c>)
   203a4:	4967      	ldr	r1, [pc, #412]	; (20544 <ProcessHashDrv+0x210>)
   203a6:	2301      	movs	r3, #1
   203a8:	6003      	str	r3, [r0, #0]
   203aa:	2007      	movs	r0, #7
   203ac:	6010      	str	r0, [r2, #0]
   203ae:	600b      	str	r3, [r1, #0]
   203b0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   203b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   203b6:	6013      	str	r3, [r2, #0]
   203b8:	4b63      	ldr	r3, [pc, #396]	; (20548 <ProcessHashDrv+0x214>)
   203ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   203bc:	6051      	str	r1, [r2, #4]
   203be:	f8c3 8000 	str.w	r8, [r3]
   203c2:	6823      	ldr	r3, [r4, #0]
   203c4:	b15b      	cbz	r3, 203de <ProcessHashDrv+0xaa>
   203c6:	3b01      	subs	r3, #1
   203c8:	2b01      	cmp	r3, #1
   203ca:	d817      	bhi.n	203fc <ProcessHashDrv+0xc8>
   203cc:	4b5f      	ldr	r3, [pc, #380]	; (2054c <ProcessHashDrv+0x218>)
   203ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
   203d0:	601a      	str	r2, [r3, #0]
   203d2:	6a22      	ldr	r2, [r4, #32]
   203d4:	f843 2c04 	str.w	r2, [r3, #-4]
   203d8:	69e2      	ldr	r2, [r4, #28]
   203da:	f843 2c08 	str.w	r2, [r3, #-8]
   203de:	4b5c      	ldr	r3, [pc, #368]	; (20550 <ProcessHashDrv+0x21c>)
   203e0:	69a2      	ldr	r2, [r4, #24]
   203e2:	601a      	str	r2, [r3, #0]
   203e4:	6962      	ldr	r2, [r4, #20]
   203e6:	f843 2c04 	str.w	r2, [r3, #-4]
   203ea:	6922      	ldr	r2, [r4, #16]
   203ec:	f843 2c08 	str.w	r2, [r3, #-8]
   203f0:	68e2      	ldr	r2, [r4, #12]
   203f2:	f843 2c0c 	str.w	r2, [r3, #-12]
   203f6:	68a2      	ldr	r2, [r4, #8]
   203f8:	f843 2c10 	str.w	r2, [r3, #-16]
   203fc:	4a55      	ldr	r2, [pc, #340]	; (20554 <ProcessHashDrv+0x220>)
   203fe:	6813      	ldr	r3, [r2, #0]
   20400:	2b00      	cmp	r3, #0
   20402:	d1fc      	bne.n	203fe <ProcessHashDrv+0xca>
   20404:	2f00      	cmp	r7, #0
   20406:	d059      	beq.n	204bc <ProcessHashDrv+0x188>
   20408:	6863      	ldr	r3, [r4, #4]
   2040a:	2b01      	cmp	r3, #1
   2040c:	bf04      	itt	eq
   2040e:	4a52      	ldreq	r2, [pc, #328]	; (20558 <ProcessHashDrv+0x224>)
   20410:	6013      	streq	r3, [r2, #0]
   20412:	4a52      	ldr	r2, [pc, #328]	; (2055c <ProcessHashDrv+0x228>)
   20414:	4b52      	ldr	r3, [pc, #328]	; (20560 <ProcessHashDrv+0x22c>)
   20416:	6831      	ldr	r1, [r6, #0]
   20418:	6011      	str	r1, [r2, #0]
   2041a:	2040      	movs	r0, #64	; 0x40
   2041c:	601f      	str	r7, [r3, #0]
   2041e:	f7fe fd11 	bl	1ee44 <CC_HalWaitInterrupt>
   20422:	4605      	mov	r5, r0
   20424:	4a4b      	ldr	r2, [pc, #300]	; (20554 <ProcessHashDrv+0x220>)
   20426:	6813      	ldr	r3, [r2, #0]
   20428:	2b00      	cmp	r3, #0
   2042a:	d1fc      	bne.n	20426 <ProcessHashDrv+0xf2>
   2042c:	4a41      	ldr	r2, [pc, #260]	; (20534 <ProcessHashDrv+0x200>)
   2042e:	6813      	ldr	r3, [r2, #0]
   20430:	2b00      	cmp	r3, #0
   20432:	d1fc      	bne.n	2042e <ProcessHashDrv+0xfa>
   20434:	6823      	ldr	r3, [r4, #0]
   20436:	b15b      	cbz	r3, 20450 <ProcessHashDrv+0x11c>
   20438:	3b01      	subs	r3, #1
   2043a:	2b01      	cmp	r3, #1
   2043c:	d817      	bhi.n	2046e <ProcessHashDrv+0x13a>
   2043e:	4a43      	ldr	r2, [pc, #268]	; (2054c <ProcessHashDrv+0x218>)
   20440:	4b48      	ldr	r3, [pc, #288]	; (20564 <ProcessHashDrv+0x230>)
   20442:	6812      	ldr	r2, [r2, #0]
   20444:	6262      	str	r2, [r4, #36]	; 0x24
   20446:	681a      	ldr	r2, [r3, #0]
   20448:	6222      	str	r2, [r4, #32]
   2044a:	3b04      	subs	r3, #4
   2044c:	681b      	ldr	r3, [r3, #0]
   2044e:	61e3      	str	r3, [r4, #28]
   20450:	4a3f      	ldr	r2, [pc, #252]	; (20550 <ProcessHashDrv+0x21c>)
   20452:	4b45      	ldr	r3, [pc, #276]	; (20568 <ProcessHashDrv+0x234>)
   20454:	6812      	ldr	r2, [r2, #0]
   20456:	61a2      	str	r2, [r4, #24]
   20458:	681a      	ldr	r2, [r3, #0]
   2045a:	6162      	str	r2, [r4, #20]
   2045c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   20460:	6122      	str	r2, [r4, #16]
   20462:	f853 2c08 	ldr.w	r2, [r3, #-8]
   20466:	60e2      	str	r2, [r4, #12]
   20468:	3b0c      	subs	r3, #12
   2046a:	681b      	ldr	r3, [r3, #0]
   2046c:	60a3      	str	r3, [r4, #8]
   2046e:	4b3f      	ldr	r3, [pc, #252]	; (2056c <ProcessHashDrv+0x238>)
   20470:	4a3f      	ldr	r2, [pc, #252]	; (20570 <ProcessHashDrv+0x23c>)
   20472:	681b      	ldr	r3, [r3, #0]
   20474:	64a3      	str	r3, [r4, #72]	; 0x48
   20476:	6812      	ldr	r2, [r2, #0]
   20478:	4b32      	ldr	r3, [pc, #200]	; (20544 <ProcessHashDrv+0x210>)
   2047a:	64e2      	str	r2, [r4, #76]	; 0x4c
   2047c:	4836      	ldr	r0, [pc, #216]	; (20558 <ProcessHashDrv+0x224>)
   2047e:	493d      	ldr	r1, [pc, #244]	; (20574 <ProcessHashDrv+0x240>)
   20480:	2201      	movs	r2, #1
   20482:	601a      	str	r2, [r3, #0]
   20484:	2300      	movs	r3, #0
   20486:	4a33      	ldr	r2, [pc, #204]	; (20554 <ProcessHashDrv+0x220>)
   20488:	6003      	str	r3, [r0, #0]
   2048a:	600b      	str	r3, [r1, #0]
   2048c:	6813      	ldr	r3, [r2, #0]
   2048e:	2b00      	cmp	r3, #0
   20490:	d1fc      	bne.n	2048c <ProcessHashDrv+0x158>
   20492:	4a2a      	ldr	r2, [pc, #168]	; (2053c <ProcessHashDrv+0x208>)
   20494:	6013      	str	r3, [r2, #0]
   20496:	2d00      	cmp	r5, #0
   20498:	d13a      	bne.n	20510 <ProcessHashDrv+0x1dc>
   2049a:	4b27      	ldr	r3, [pc, #156]	; (20538 <ProcessHashDrv+0x204>)
   2049c:	6818      	ldr	r0, [r3, #0]
   2049e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   204a2:	f7fe fcc9 	bl	1ee38 <CC_HalMaskInterrupt>
   204a6:	2001      	movs	r0, #1
   204a8:	f7fe fd90 	bl	1efcc <CC_PalPowerSaveModeSelect>
   204ac:	bb60      	cbnz	r0, 20508 <ProcessHashDrv+0x1d4>
   204ae:	481f      	ldr	r0, [pc, #124]	; (2052c <ProcessHashDrv+0x1f8>)
   204b0:	f7fe fd64 	bl	1ef7c <CC_PalMutexUnlock>
   204b4:	bb10      	cbnz	r0, 204fc <ProcessHashDrv+0x1c8>
   204b6:	4628      	mov	r0, r5
   204b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   204bc:	4b2d      	ldr	r3, [pc, #180]	; (20574 <ProcessHashDrv+0x240>)
   204be:	2204      	movs	r2, #4
   204c0:	601a      	str	r2, [r3, #0]
   204c2:	e7af      	b.n	20424 <ProcessHashDrv+0xf0>
   204c4:	4819      	ldr	r0, [pc, #100]	; (2052c <ProcessHashDrv+0x1f8>)
   204c6:	f04f 31ff 	mov.w	r1, #4294967295
   204ca:	f04f 0801 	mov.w	r8, #1
   204ce:	f7fe fd4d 	bl	1ef6c <CC_PalMutexLock>
   204d2:	2800      	cmp	r0, #0
   204d4:	f43f af4b 	beq.w	2036e <ProcessHashDrv+0x3a>
   204d8:	4827      	ldr	r0, [pc, #156]	; (20578 <ProcessHashDrv+0x244>)
   204da:	f7fe f9b1 	bl	1e840 <CC_PalAbort>
   204de:	2000      	movs	r0, #0
   204e0:	f7fe fd74 	bl	1efcc <CC_PalPowerSaveModeSelect>
   204e4:	4605      	mov	r5, r0
   204e6:	2800      	cmp	r0, #0
   204e8:	f43f af48 	beq.w	2037c <ProcessHashDrv+0x48>
   204ec:	4823      	ldr	r0, [pc, #140]	; (2057c <ProcessHashDrv+0x248>)
   204ee:	f7fe f9a7 	bl	1e840 <CC_PalAbort>
   204f2:	e743      	b.n	2037c <ProcessHashDrv+0x48>
   204f4:	4d22      	ldr	r5, [pc, #136]	; (20580 <ProcessHashDrv+0x24c>)
   204f6:	4628      	mov	r0, r5
   204f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   204fc:	4821      	ldr	r0, [pc, #132]	; (20584 <ProcessHashDrv+0x250>)
   204fe:	f7fe f99f 	bl	1e840 <CC_PalAbort>
   20502:	4628      	mov	r0, r5
   20504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20508:	481f      	ldr	r0, [pc, #124]	; (20588 <ProcessHashDrv+0x254>)
   2050a:	f7fe f999 	bl	1e840 <CC_PalAbort>
   2050e:	e7ce      	b.n	204ae <ProcessHashDrv+0x17a>
   20510:	f104 0008 	add.w	r0, r4, #8
   20514:	2110      	movs	r1, #16
   20516:	f7ff fe0b 	bl	20130 <CC_PalMemSetZeroPlat>
   2051a:	e7be      	b.n	2049a <ProcessHashDrv+0x166>
   2051c:	4d1b      	ldr	r5, [pc, #108]	; (2058c <ProcessHashDrv+0x258>)
   2051e:	4628      	mov	r0, r5
   20520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20524:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   20528:	e7c5      	b.n	204b6 <ProcessHashDrv+0x182>
   2052a:	bf00      	nop
   2052c:	2000075c 	.word	0x2000075c
   20530:	5002b91c 	.word	0x5002b91c
   20534:	5002bc20 	.word	0x5002bc20
   20538:	5002ba04 	.word	0x5002ba04
   2053c:	5002b818 	.word	0x5002b818
   20540:	5002b900 	.word	0x5002b900
   20544:	5002b7c4 	.word	0x5002b7c4
   20548:	5002b7c0 	.word	0x5002b7c0
   2054c:	5002b65c 	.word	0x5002b65c
   20550:	5002b650 	.word	0x5002b650
   20554:	5002b910 	.word	0x5002b910
   20558:	5002b684 	.word	0x5002b684
   2055c:	5002bc28 	.word	0x5002bc28
   20560:	5002bc2c 	.word	0x5002bc2c
   20564:	5002b658 	.word	0x5002b658
   20568:	5002b64c 	.word	0x5002b64c
   2056c:	5002b7cc 	.word	0x5002b7cc
   20570:	5002b7d0 	.word	0x5002b7d0
   20574:	5002b7c8 	.word	0x5002b7c8
   20578:	00028ff4 	.word	0x00028ff4
   2057c:	0002900c 	.word	0x0002900c
   20580:	00f30001 	.word	0x00f30001
   20584:	0002904c 	.word	0x0002904c
   20588:	0002902c 	.word	0x0002902c
   2058c:	00f30003 	.word	0x00f30003

00020590 <FinishHashDrv>:
   20590:	2800      	cmp	r0, #0
   20592:	d03b      	beq.n	2060c <FinishHashDrv+0x7c>
   20594:	b4f0      	push	{r4, r5, r6, r7}
   20596:	b082      	sub	sp, #8
   20598:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2059a:	9301      	str	r3, [sp, #4]
   2059c:	6883      	ldr	r3, [r0, #8]
   2059e:	fa93 fc83 	rev.w	ip, r3
   205a2:	9b01      	ldr	r3, [sp, #4]
   205a4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   205a8:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   205ac:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   205b0:	ba1b      	rev	r3, r3
   205b2:	6243      	str	r3, [r0, #36]	; 0x24
   205b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
   205b6:	9301      	str	r3, [sp, #4]
   205b8:	ba09      	rev	r1, r1
   205ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
   205bc:	61c1      	str	r1, [r0, #28]
   205be:	ba12      	rev	r2, r2
   205c0:	6202      	str	r2, [r0, #32]
   205c2:	ba3f      	rev	r7, r7
   205c4:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   205c8:	ba36      	rev	r6, r6
   205ca:	ba2d      	rev	r5, r5
   205cc:	ba24      	rev	r4, r4
   205ce:	e9c0 c702 	strd	ip, r7, [r0, #8]
   205d2:	e9c0 6504 	strd	r6, r5, [r0, #16]
   205d6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   205d8:	6b06      	ldr	r6, [r0, #48]	; 0x30
   205da:	6b45      	ldr	r5, [r0, #52]	; 0x34
   205dc:	6184      	str	r4, [r0, #24]
   205de:	fa93 fc83 	rev.w	ip, r3
   205e2:	6b84      	ldr	r4, [r0, #56]	; 0x38
   205e4:	9b01      	ldr	r3, [sp, #4]
   205e6:	ba3f      	rev	r7, r7
   205e8:	ba36      	rev	r6, r6
   205ea:	ba2d      	rev	r5, r5
   205ec:	ba24      	rev	r4, r4
   205ee:	ba09      	rev	r1, r1
   205f0:	ba12      	rev	r2, r2
   205f2:	ba1b      	rev	r3, r3
   205f4:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   205f8:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   205fc:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   20600:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   20604:	2000      	movs	r0, #0
   20606:	b002      	add	sp, #8
   20608:	bcf0      	pop	{r4, r5, r6, r7}
   2060a:	4770      	bx	lr
   2060c:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   20610:	4770      	bx	lr
   20612:	bf00      	nop

00020614 <cc_mbedtls_aes_init>:
   20614:	b510      	push	{r4, lr}
   20616:	4604      	mov	r4, r0
   20618:	b130      	cbz	r0, 20628 <cc_mbedtls_aes_init+0x14>
   2061a:	2200      	movs	r2, #0
   2061c:	2301      	movs	r3, #1
   2061e:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   20622:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   20626:	bd10      	pop	{r4, pc}
   20628:	4801      	ldr	r0, [pc, #4]	; (20630 <cc_mbedtls_aes_init+0x1c>)
   2062a:	f7fe f909 	bl	1e840 <CC_PalAbort>
   2062e:	e7f4      	b.n	2061a <cc_mbedtls_aes_init+0x6>
   20630:	00029100 	.word	0x00029100

00020634 <cc_mbedtls_aes_free>:
   20634:	b118      	cbz	r0, 2063e <cc_mbedtls_aes_free+0xa>
   20636:	2274      	movs	r2, #116	; 0x74
   20638:	2100      	movs	r1, #0
   2063a:	f7ff bd77 	b.w	2012c <CC_PalMemSetPlat>
   2063e:	4770      	bx	lr

00020640 <cc_mbedtls_aes_setkey_enc>:
   20640:	b190      	cbz	r0, 20668 <cc_mbedtls_aes_setkey_enc+0x28>
   20642:	b1a1      	cbz	r1, 2066e <cc_mbedtls_aes_setkey_enc+0x2e>
   20644:	b510      	push	{r4, lr}
   20646:	2a80      	cmp	r2, #128	; 0x80
   20648:	f04f 0400 	mov.w	r4, #0
   2064c:	6384      	str	r4, [r0, #56]	; 0x38
   2064e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   20652:	d106      	bne.n	20662 <cc_mbedtls_aes_setkey_enc+0x22>
   20654:	6304      	str	r4, [r0, #48]	; 0x30
   20656:	2210      	movs	r2, #16
   20658:	3010      	adds	r0, #16
   2065a:	f7ff fd65 	bl	20128 <CC_PalMemCopyPlat>
   2065e:	4620      	mov	r0, r4
   20660:	bd10      	pop	{r4, pc}
   20662:	f06f 001f 	mvn.w	r0, #31
   20666:	bd10      	pop	{r4, pc}
   20668:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2066c:	4770      	bx	lr
   2066e:	f06f 001f 	mvn.w	r0, #31
   20672:	4770      	bx	lr

00020674 <cc_mbedtls_aes_crypt_ecb>:
   20674:	b320      	cbz	r0, 206c0 <cc_mbedtls_aes_crypt_ecb+0x4c>
   20676:	b31a      	cbz	r2, 206c0 <cc_mbedtls_aes_crypt_ecb+0x4c>
   20678:	b313      	cbz	r3, 206c0 <cc_mbedtls_aes_crypt_ecb+0x4c>
   2067a:	2901      	cmp	r1, #1
   2067c:	d820      	bhi.n	206c0 <cc_mbedtls_aes_crypt_ecb+0x4c>
   2067e:	b570      	push	{r4, r5, r6, lr}
   20680:	4604      	mov	r4, r0
   20682:	6b81      	ldr	r1, [r0, #56]	; 0x38
   20684:	b086      	sub	sp, #24
   20686:	d016      	beq.n	206b6 <cc_mbedtls_aes_crypt_ecb+0x42>
   20688:	2901      	cmp	r1, #1
   2068a:	d116      	bne.n	206ba <cc_mbedtls_aes_crypt_ecb+0x46>
   2068c:	2100      	movs	r1, #0
   2068e:	2510      	movs	r5, #16
   20690:	ae04      	add	r6, sp, #16
   20692:	6361      	str	r1, [r4, #52]	; 0x34
   20694:	4610      	mov	r0, r2
   20696:	e9cd 5600 	strd	r5, r6, [sp]
   2069a:	aa02      	add	r2, sp, #8
   2069c:	4629      	mov	r1, r5
   2069e:	f7ff fdeb 	bl	20278 <SetDataBuffersInfo>
   206a2:	b950      	cbnz	r0, 206ba <cc_mbedtls_aes_crypt_ecb+0x46>
   206a4:	462b      	mov	r3, r5
   206a6:	4632      	mov	r2, r6
   206a8:	a902      	add	r1, sp, #8
   206aa:	4620      	mov	r0, r4
   206ac:	f000 f8d6 	bl	2085c <ProcessAesDrv>
   206b0:	b918      	cbnz	r0, 206ba <cc_mbedtls_aes_crypt_ecb+0x46>
   206b2:	b006      	add	sp, #24
   206b4:	bd70      	pop	{r4, r5, r6, pc}
   206b6:	2900      	cmp	r1, #0
   206b8:	d0e8      	beq.n	2068c <cc_mbedtls_aes_crypt_ecb+0x18>
   206ba:	f06f 0021 	mvn.w	r0, #33	; 0x21
   206be:	e7f8      	b.n	206b2 <cc_mbedtls_aes_crypt_ecb+0x3e>
   206c0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   206c4:	4770      	bx	lr
   206c6:	bf00      	nop

000206c8 <CC_PalDataBufferAttrGet>:
   206c8:	2000      	movs	r0, #0
   206ca:	7018      	strb	r0, [r3, #0]
   206cc:	4770      	bx	lr
   206ce:	bf00      	nop

000206d0 <LoadAesKey>:
   206d0:	2800      	cmp	r0, #0
   206d2:	d03b      	beq.n	2074c <LoadAesKey+0x7c>
   206d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   206d8:	2b00      	cmp	r3, #0
   206da:	d02c      	beq.n	20736 <LoadAesKey+0x66>
   206dc:	2b03      	cmp	r3, #3
   206de:	b510      	push	{r4, lr}
   206e0:	d00f      	beq.n	20702 <LoadAesKey+0x32>
   206e2:	481c      	ldr	r0, [pc, #112]	; (20754 <LoadAesKey+0x84>)
   206e4:	4c1c      	ldr	r4, [pc, #112]	; (20758 <LoadAesKey+0x88>)
   206e6:	6822      	ldr	r2, [r4, #0]
   206e8:	4b1c      	ldr	r3, [pc, #112]	; (2075c <LoadAesKey+0x8c>)
   206ea:	6812      	ldr	r2, [r2, #0]
   206ec:	601a      	str	r2, [r3, #0]
   206ee:	6822      	ldr	r2, [r4, #0]
   206f0:	6852      	ldr	r2, [r2, #4]
   206f2:	605a      	str	r2, [r3, #4]
   206f4:	6822      	ldr	r2, [r4, #0]
   206f6:	6892      	ldr	r2, [r2, #8]
   206f8:	609a      	str	r2, [r3, #8]
   206fa:	6822      	ldr	r2, [r4, #0]
   206fc:	68d2      	ldr	r2, [r2, #12]
   206fe:	60da      	str	r2, [r3, #12]
   20700:	bd10      	pop	{r4, pc}
   20702:	6b01      	ldr	r1, [r0, #48]	; 0x30
   20704:	6c00      	ldr	r0, [r0, #64]	; 0x40
   20706:	4c14      	ldr	r4, [pc, #80]	; (20758 <LoadAesKey+0x88>)
   20708:	f000 fba4 	bl	20e54 <kmu_validate_kdr_slot_and_size>
   2070c:	2800      	cmp	r0, #0
   2070e:	d1ea      	bne.n	206e6 <LoadAesKey+0x16>
   20710:	6821      	ldr	r1, [r4, #0]
   20712:	4a12      	ldr	r2, [pc, #72]	; (2075c <LoadAesKey+0x8c>)
   20714:	6809      	ldr	r1, [r1, #0]
   20716:	6011      	str	r1, [r2, #0]
   20718:	6821      	ldr	r1, [r4, #0]
   2071a:	4b11      	ldr	r3, [pc, #68]	; (20760 <LoadAesKey+0x90>)
   2071c:	6849      	ldr	r1, [r1, #4]
   2071e:	6019      	str	r1, [r3, #0]
   20720:	6821      	ldr	r1, [r4, #0]
   20722:	6889      	ldr	r1, [r1, #8]
   20724:	6091      	str	r1, [r2, #8]
   20726:	6822      	ldr	r2, [r4, #0]
   20728:	68d2      	ldr	r2, [r2, #12]
   2072a:	609a      	str	r2, [r3, #8]
   2072c:	f000 fb9e 	bl	20e6c <kmu_use_kdr_key>
   20730:	2800      	cmp	r0, #0
   20732:	d1d8      	bne.n	206e6 <LoadAesKey+0x16>
   20734:	bd10      	pop	{r4, pc}
   20736:	4a09      	ldr	r2, [pc, #36]	; (2075c <LoadAesKey+0x8c>)
   20738:	6901      	ldr	r1, [r0, #16]
   2073a:	6011      	str	r1, [r2, #0]
   2073c:	6941      	ldr	r1, [r0, #20]
   2073e:	6051      	str	r1, [r2, #4]
   20740:	6981      	ldr	r1, [r0, #24]
   20742:	6091      	str	r1, [r2, #8]
   20744:	69c1      	ldr	r1, [r0, #28]
   20746:	60d1      	str	r1, [r2, #12]
   20748:	4618      	mov	r0, r3
   2074a:	4770      	bx	lr
   2074c:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   20750:	4770      	bx	lr
   20752:	bf00      	nop
   20754:	00f10009 	.word	0x00f10009
   20758:	2000074c 	.word	0x2000074c
   2075c:	5002b400 	.word	0x5002b400
   20760:	5002b404 	.word	0x5002b404

00020764 <InitAes.part.0>:
   20764:	4a32      	ldr	r2, [pc, #200]	; (20830 <InitAes.part.0+0xcc>)
   20766:	b510      	push	{r4, lr}
   20768:	4604      	mov	r4, r0
   2076a:	6813      	ldr	r3, [r2, #0]
   2076c:	2b00      	cmp	r3, #0
   2076e:	d1fc      	bne.n	2076a <InitAes.part.0+0x6>
   20770:	4a30      	ldr	r2, [pc, #192]	; (20834 <InitAes.part.0+0xd0>)
   20772:	6813      	ldr	r3, [r2, #0]
   20774:	2b00      	cmp	r3, #0
   20776:	d1fc      	bne.n	20772 <InitAes.part.0+0xe>
   20778:	4a2f      	ldr	r2, [pc, #188]	; (20838 <InitAes.part.0+0xd4>)
   2077a:	6813      	ldr	r3, [r2, #0]
   2077c:	2b00      	cmp	r3, #0
   2077e:	d1fc      	bne.n	2077a <InitAes.part.0+0x16>
   20780:	4a2e      	ldr	r2, [pc, #184]	; (2083c <InitAes.part.0+0xd8>)
   20782:	6813      	ldr	r3, [r2, #0]
   20784:	2b00      	cmp	r3, #0
   20786:	d1fc      	bne.n	20782 <InitAes.part.0+0x1e>
   20788:	4a2d      	ldr	r2, [pc, #180]	; (20840 <InitAes.part.0+0xdc>)
   2078a:	6813      	ldr	r3, [r2, #0]
   2078c:	2b00      	cmp	r3, #0
   2078e:	d1fc      	bne.n	2078a <InitAes.part.0+0x26>
   20790:	4a2c      	ldr	r2, [pc, #176]	; (20844 <InitAes.part.0+0xe0>)
   20792:	6813      	ldr	r3, [r2, #0]
   20794:	2b00      	cmp	r3, #0
   20796:	d1fc      	bne.n	20792 <InitAes.part.0+0x2e>
   20798:	f04f 30ff 	mov.w	r0, #4294967295
   2079c:	f7fe fb3e 	bl	1ee1c <CC_HalClearInterruptBit>
   207a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   207a2:	f023 0304 	bic.w	r3, r3, #4
   207a6:	2b03      	cmp	r3, #3
   207a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   207aa:	d036      	beq.n	2081a <InitAes.part.0+0xb6>
   207ac:	2b01      	cmp	r3, #1
   207ae:	4b26      	ldr	r3, [pc, #152]	; (20848 <InitAes.part.0+0xe4>)
   207b0:	6818      	ldr	r0, [r3, #0]
   207b2:	bf0c      	ite	eq
   207b4:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   207b8:	f020 0020 	bicne.w	r0, r0, #32
   207bc:	f7fe fb3c 	bl	1ee38 <CC_HalMaskInterrupt>
   207c0:	4b22      	ldr	r3, [pc, #136]	; (2084c <InitAes.part.0+0xe8>)
   207c2:	4a1b      	ldr	r2, [pc, #108]	; (20830 <InitAes.part.0+0xcc>)
   207c4:	2101      	movs	r1, #1
   207c6:	6019      	str	r1, [r3, #0]
   207c8:	6813      	ldr	r3, [r2, #0]
   207ca:	2b00      	cmp	r3, #0
   207cc:	d1fc      	bne.n	207c8 <InitAes.part.0+0x64>
   207ce:	4a19      	ldr	r2, [pc, #100]	; (20834 <InitAes.part.0+0xd0>)
   207d0:	6813      	ldr	r3, [r2, #0]
   207d2:	2b00      	cmp	r3, #0
   207d4:	d1fc      	bne.n	207d0 <InitAes.part.0+0x6c>
   207d6:	491e      	ldr	r1, [pc, #120]	; (20850 <InitAes.part.0+0xec>)
   207d8:	4a15      	ldr	r2, [pc, #84]	; (20830 <InitAes.part.0+0xcc>)
   207da:	600b      	str	r3, [r1, #0]
   207dc:	6813      	ldr	r3, [r2, #0]
   207de:	2b00      	cmp	r3, #0
   207e0:	d1fc      	bne.n	207dc <InitAes.part.0+0x78>
   207e2:	4a14      	ldr	r2, [pc, #80]	; (20834 <InitAes.part.0+0xd0>)
   207e4:	6813      	ldr	r3, [r2, #0]
   207e6:	2b00      	cmp	r3, #0
   207e8:	d1fc      	bne.n	207e4 <InitAes.part.0+0x80>
   207ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
   207ec:	f022 0104 	bic.w	r1, r2, #4
   207f0:	2903      	cmp	r1, #3
   207f2:	bf18      	it	ne
   207f4:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   207f6:	4917      	ldr	r1, [pc, #92]	; (20854 <InitAes.part.0+0xf0>)
   207f8:	ea4f 0282 	mov.w	r2, r2, lsl #2
   207fc:	bf18      	it	ne
   207fe:	f003 0301 	andne.w	r3, r3, #1
   20802:	f002 021c 	and.w	r2, r2, #28
   20806:	4313      	orrs	r3, r2
   20808:	600b      	str	r3, [r1, #0]
   2080a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2080c:	2b07      	cmp	r3, #7
   2080e:	d102      	bne.n	20816 <InitAes.part.0+0xb2>
   20810:	4b11      	ldr	r3, [pc, #68]	; (20858 <InitAes.part.0+0xf4>)
   20812:	2201      	movs	r2, #1
   20814:	601a      	str	r2, [r3, #0]
   20816:	2000      	movs	r0, #0
   20818:	bd10      	pop	{r4, pc}
   2081a:	2b01      	cmp	r3, #1
   2081c:	4b0a      	ldr	r3, [pc, #40]	; (20848 <InitAes.part.0+0xe4>)
   2081e:	6818      	ldr	r0, [r3, #0]
   20820:	bf0c      	ite	eq
   20822:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   20826:	f020 0010 	bicne.w	r0, r0, #16
   2082a:	f7fe fb05 	bl	1ee38 <CC_HalMaskInterrupt>
   2082e:	e7c7      	b.n	207c0 <InitAes.part.0+0x5c>
   20830:	5002b910 	.word	0x5002b910
   20834:	5002b470 	.word	0x5002b470
   20838:	5002bd20 	.word	0x5002bd20
   2083c:	5002bc20 	.word	0x5002bc20
   20840:	5002bd38 	.word	0x5002bd38
   20844:	5002bc38 	.word	0x5002bc38
   20848:	5002ba04 	.word	0x5002ba04
   2084c:	5002b900 	.word	0x5002b900
   20850:	5002b4bc 	.word	0x5002b4bc
   20854:	5002b4c0 	.word	0x5002b4c0
   20858:	5002b47c 	.word	0x5002b47c

0002085c <ProcessAesDrv>:
   2085c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20860:	b087      	sub	sp, #28
   20862:	2900      	cmp	r1, #0
   20864:	f000 80a5 	beq.w	209b2 <ProcessAesDrv+0x156>
   20868:	4616      	mov	r6, r2
   2086a:	2a00      	cmp	r2, #0
   2086c:	f000 80a1 	beq.w	209b2 <ProcessAesDrv+0x156>
   20870:	4604      	mov	r4, r0
   20872:	2800      	cmp	r0, #0
   20874:	f000 813f 	beq.w	20af6 <ProcessAesDrv+0x29a>
   20878:	461f      	mov	r7, r3
   2087a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2087c:	460d      	mov	r5, r1
   2087e:	2b00      	cmp	r3, #0
   20880:	d150      	bne.n	20924 <ProcessAesDrv+0xc8>
   20882:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   20886:	d252      	bcs.n	2092e <ProcessAesDrv+0xd2>
   20888:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2088c:	2b04      	cmp	r3, #4
   2088e:	f000 8109 	beq.w	20aa4 <ProcessAesDrv+0x248>
   20892:	f04f 0800 	mov.w	r8, #0
   20896:	48aa      	ldr	r0, [pc, #680]	; (20b40 <ProcessAesDrv+0x2e4>)
   20898:	f04f 31ff 	mov.w	r1, #4294967295
   2089c:	f7fe fb66 	bl	1ef6c <CC_PalMutexLock>
   208a0:	2800      	cmp	r0, #0
   208a2:	f040 80de 	bne.w	20a62 <ProcessAesDrv+0x206>
   208a6:	2000      	movs	r0, #0
   208a8:	f7fe fb90 	bl	1efcc <CC_PalPowerSaveModeSelect>
   208ac:	2800      	cmp	r0, #0
   208ae:	f040 80e1 	bne.w	20a74 <ProcessAesDrv+0x218>
   208b2:	4ba4      	ldr	r3, [pc, #656]	; (20b44 <ProcessAesDrv+0x2e8>)
   208b4:	4aa4      	ldr	r2, [pc, #656]	; (20b48 <ProcessAesDrv+0x2ec>)
   208b6:	2101      	movs	r1, #1
   208b8:	6019      	str	r1, [r3, #0]
   208ba:	6813      	ldr	r3, [r2, #0]
   208bc:	2b00      	cmp	r3, #0
   208be:	d1fc      	bne.n	208ba <ProcessAesDrv+0x5e>
   208c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   208c2:	2b03      	cmp	r3, #3
   208c4:	dc39      	bgt.n	2093a <ProcessAesDrv+0xde>
   208c6:	2b00      	cmp	r3, #0
   208c8:	da3a      	bge.n	20940 <ProcessAesDrv+0xe4>
   208ca:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 20b94 <ProcessAesDrv+0x338>
   208ce:	4a9e      	ldr	r2, [pc, #632]	; (20b48 <ProcessAesDrv+0x2ec>)
   208d0:	6813      	ldr	r3, [r2, #0]
   208d2:	2b00      	cmp	r3, #0
   208d4:	d1fc      	bne.n	208d0 <ProcessAesDrv+0x74>
   208d6:	f1b8 0f00 	cmp.w	r8, #0
   208da:	f040 80da 	bne.w	20a92 <ProcessAesDrv+0x236>
   208de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   208e0:	f023 0304 	bic.w	r3, r3, #4
   208e4:	2b03      	cmp	r3, #3
   208e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   208e8:	d058      	beq.n	2099c <ProcessAesDrv+0x140>
   208ea:	2b01      	cmp	r3, #1
   208ec:	4b97      	ldr	r3, [pc, #604]	; (20b4c <ProcessAesDrv+0x2f0>)
   208ee:	6818      	ldr	r0, [r3, #0]
   208f0:	bf0c      	ite	eq
   208f2:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   208f6:	f040 0020 	orrne.w	r0, r0, #32
   208fa:	f7fe fa9d 	bl	1ee38 <CC_HalMaskInterrupt>
   208fe:	4b91      	ldr	r3, [pc, #580]	; (20b44 <ProcessAesDrv+0x2e8>)
   20900:	2200      	movs	r2, #0
   20902:	601a      	str	r2, [r3, #0]
   20904:	2001      	movs	r0, #1
   20906:	f7fe fb61 	bl	1efcc <CC_PalPowerSaveModeSelect>
   2090a:	2800      	cmp	r0, #0
   2090c:	f040 80bd 	bne.w	20a8a <ProcessAesDrv+0x22e>
   20910:	488b      	ldr	r0, [pc, #556]	; (20b40 <ProcessAesDrv+0x2e4>)
   20912:	f7fe fb33 	bl	1ef7c <CC_PalMutexUnlock>
   20916:	2800      	cmp	r0, #0
   20918:	f040 80b0 	bne.w	20a7c <ProcessAesDrv+0x220>
   2091c:	4648      	mov	r0, r9
   2091e:	b007      	add	sp, #28
   20920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20924:	2b01      	cmp	r3, #1
   20926:	d1af      	bne.n	20888 <ProcessAesDrv+0x2c>
   20928:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   2092c:	d3ac      	bcc.n	20888 <ProcessAesDrv+0x2c>
   2092e:	f8df 9268 	ldr.w	r9, [pc, #616]	; 20b98 <ProcessAesDrv+0x33c>
   20932:	4648      	mov	r0, r9
   20934:	b007      	add	sp, #28
   20936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2093a:	3b06      	subs	r3, #6
   2093c:	2b01      	cmp	r3, #1
   2093e:	d8c4      	bhi.n	208ca <ProcessAesDrv+0x6e>
   20940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   20942:	2b01      	cmp	r3, #1
   20944:	f200 80d4 	bhi.w	20af0 <ProcessAesDrv+0x294>
   20948:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2094a:	2b01      	cmp	r3, #1
   2094c:	d837      	bhi.n	209be <ProcessAesDrv+0x162>
   2094e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   20950:	2b01      	cmp	r3, #1
   20952:	f200 8131 	bhi.w	20bb8 <ProcessAesDrv+0x35c>
   20956:	4620      	mov	r0, r4
   20958:	f7ff ff04 	bl	20764 <InitAes.part.0>
   2095c:	4681      	mov	r9, r0
   2095e:	2800      	cmp	r0, #0
   20960:	d1b5      	bne.n	208ce <ProcessAesDrv+0x72>
   20962:	4620      	mov	r0, r4
   20964:	f7ff feb4 	bl	206d0 <LoadAesKey>
   20968:	4681      	mov	r9, r0
   2096a:	2800      	cmp	r0, #0
   2096c:	d1af      	bne.n	208ce <ProcessAesDrv+0x72>
   2096e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20970:	2b07      	cmp	r3, #7
   20972:	d8aa      	bhi.n	208ca <ProcessAesDrv+0x6e>
   20974:	a201      	add	r2, pc, #4	; (adr r2, 2097c <ProcessAesDrv+0x120>)
   20976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2097a:	bf00      	nop
   2097c:	000209d9 	.word	0x000209d9
   20980:	000209c5 	.word	0x000209c5
   20984:	00020b35 	.word	0x00020b35
   20988:	000209c5 	.word	0x000209c5
   2098c:	000208cb 	.word	0x000208cb
   20990:	000208cb 	.word	0x000208cb
   20994:	00020b35 	.word	0x00020b35
   20998:	000209c5 	.word	0x000209c5
   2099c:	2b01      	cmp	r3, #1
   2099e:	4b6b      	ldr	r3, [pc, #428]	; (20b4c <ProcessAesDrv+0x2f0>)
   209a0:	6818      	ldr	r0, [r3, #0]
   209a2:	bf0c      	ite	eq
   209a4:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   209a8:	f040 0010 	orrne.w	r0, r0, #16
   209ac:	f7fe fa44 	bl	1ee38 <CC_HalMaskInterrupt>
   209b0:	e7a5      	b.n	208fe <ProcessAesDrv+0xa2>
   209b2:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 20b9c <ProcessAesDrv+0x340>
   209b6:	4648      	mov	r0, r9
   209b8:	b007      	add	sp, #28
   209ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209be:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 20ba0 <ProcessAesDrv+0x344>
   209c2:	e784      	b.n	208ce <ProcessAesDrv+0x72>
   209c4:	4b62      	ldr	r3, [pc, #392]	; (20b50 <ProcessAesDrv+0x2f4>)
   209c6:	6822      	ldr	r2, [r4, #0]
   209c8:	601a      	str	r2, [r3, #0]
   209ca:	6862      	ldr	r2, [r4, #4]
   209cc:	605a      	str	r2, [r3, #4]
   209ce:	68a2      	ldr	r2, [r4, #8]
   209d0:	609a      	str	r2, [r3, #8]
   209d2:	68e2      	ldr	r2, [r4, #12]
   209d4:	60da      	str	r2, [r3, #12]
   209d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   209d8:	682a      	ldr	r2, [r5, #0]
   209da:	f023 0304 	bic.w	r3, r3, #4
   209de:	2b03      	cmp	r3, #3
   209e0:	d009      	beq.n	209f6 <ProcessAesDrv+0x19a>
   209e2:	6e21      	ldr	r1, [r4, #96]	; 0x60
   209e4:	6833      	ldr	r3, [r6, #0]
   209e6:	2901      	cmp	r1, #1
   209e8:	bf07      	ittee	eq
   209ea:	485a      	ldreq	r0, [pc, #360]	; (20b54 <ProcessAesDrv+0x2f8>)
   209ec:	495a      	ldreq	r1, [pc, #360]	; (20b58 <ProcessAesDrv+0x2fc>)
   209ee:	485b      	ldrne	r0, [pc, #364]	; (20b5c <ProcessAesDrv+0x300>)
   209f0:	495b      	ldrne	r1, [pc, #364]	; (20b60 <ProcessAesDrv+0x304>)
   209f2:	6003      	str	r3, [r0, #0]
   209f4:	600f      	str	r7, [r1, #0]
   209f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   209f8:	2b01      	cmp	r3, #1
   209fa:	bf0b      	itete	eq
   209fc:	4b59      	ldreq	r3, [pc, #356]	; (20b64 <ProcessAesDrv+0x308>)
   209fe:	4b5a      	ldrne	r3, [pc, #360]	; (20b68 <ProcessAesDrv+0x30c>)
   20a00:	495a      	ldreq	r1, [pc, #360]	; (20b6c <ProcessAesDrv+0x310>)
   20a02:	495b      	ldrne	r1, [pc, #364]	; (20b70 <ProcessAesDrv+0x314>)
   20a04:	600a      	str	r2, [r1, #0]
   20a06:	601f      	str	r7, [r3, #0]
   20a08:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20a0a:	f023 0304 	bic.w	r3, r3, #4
   20a0e:	2b03      	cmp	r3, #3
   20a10:	d074      	beq.n	20afc <ProcessAesDrv+0x2a0>
   20a12:	6e23      	ldr	r3, [r4, #96]	; 0x60
   20a14:	2b01      	cmp	r3, #1
   20a16:	bf0c      	ite	eq
   20a18:	2080      	moveq	r0, #128	; 0x80
   20a1a:	2020      	movne	r0, #32
   20a1c:	f7fe fa12 	bl	1ee44 <CC_HalWaitInterrupt>
   20a20:	4681      	mov	r9, r0
   20a22:	2800      	cmp	r0, #0
   20a24:	f47f af53 	bne.w	208ce <ProcessAesDrv+0x72>
   20a28:	4b47      	ldr	r3, [pc, #284]	; (20b48 <ProcessAesDrv+0x2ec>)
   20a2a:	681a      	ldr	r2, [r3, #0]
   20a2c:	2a00      	cmp	r2, #0
   20a2e:	d1fc      	bne.n	20a2a <ProcessAesDrv+0x1ce>
   20a30:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20a32:	3b01      	subs	r3, #1
   20a34:	4691      	mov	r9, r2
   20a36:	2b06      	cmp	r3, #6
   20a38:	d810      	bhi.n	20a5c <ProcessAesDrv+0x200>
   20a3a:	e8df f003 	tbb	[pc, r3]
   20a3e:	7d04      	.short	0x7d04
   20a40:	7d0f0f04 	.word	0x7d0f0f04
   20a44:	04          	.byte	0x04
   20a45:	00          	.byte	0x00
   20a46:	4a42      	ldr	r2, [pc, #264]	; (20b50 <ProcessAesDrv+0x2f4>)
   20a48:	4b4a      	ldr	r3, [pc, #296]	; (20b74 <ProcessAesDrv+0x318>)
   20a4a:	6812      	ldr	r2, [r2, #0]
   20a4c:	6022      	str	r2, [r4, #0]
   20a4e:	681a      	ldr	r2, [r3, #0]
   20a50:	6062      	str	r2, [r4, #4]
   20a52:	685a      	ldr	r2, [r3, #4]
   20a54:	60a2      	str	r2, [r4, #8]
   20a56:	3308      	adds	r3, #8
   20a58:	681b      	ldr	r3, [r3, #0]
   20a5a:	60e3      	str	r3, [r4, #12]
   20a5c:	2301      	movs	r3, #1
   20a5e:	65a3      	str	r3, [r4, #88]	; 0x58
   20a60:	e735      	b.n	208ce <ProcessAesDrv+0x72>
   20a62:	4845      	ldr	r0, [pc, #276]	; (20b78 <ProcessAesDrv+0x31c>)
   20a64:	f7fd feec 	bl	1e840 <CC_PalAbort>
   20a68:	2000      	movs	r0, #0
   20a6a:	f7fe faaf 	bl	1efcc <CC_PalPowerSaveModeSelect>
   20a6e:	2800      	cmp	r0, #0
   20a70:	f43f af1f 	beq.w	208b2 <ProcessAesDrv+0x56>
   20a74:	4841      	ldr	r0, [pc, #260]	; (20b7c <ProcessAesDrv+0x320>)
   20a76:	f7fd fee3 	bl	1e840 <CC_PalAbort>
   20a7a:	e71a      	b.n	208b2 <ProcessAesDrv+0x56>
   20a7c:	4840      	ldr	r0, [pc, #256]	; (20b80 <ProcessAesDrv+0x324>)
   20a7e:	f7fd fedf 	bl	1e840 <CC_PalAbort>
   20a82:	4648      	mov	r0, r9
   20a84:	b007      	add	sp, #28
   20a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a8a:	483e      	ldr	r0, [pc, #248]	; (20b84 <ProcessAesDrv+0x328>)
   20a8c:	f7fd fed8 	bl	1e840 <CC_PalAbort>
   20a90:	e73e      	b.n	20910 <ProcessAesDrv+0xb4>
   20a92:	2304      	movs	r3, #4
   20a94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   20a98:	2120      	movs	r1, #32
   20a9a:	f104 0010 	add.w	r0, r4, #16
   20a9e:	f7ff fb47 	bl	20130 <CC_PalMemSetZeroPlat>
   20aa2:	e71c      	b.n	208de <ProcessAesDrv+0x82>
   20aa4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   20aa6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   20aa8:	f000 f9c8 	bl	20e3c <kmu_validate_slot_and_size>
   20aac:	b9e8      	cbnz	r0, 20aea <ProcessAesDrv+0x28e>
   20aae:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 20ba4 <ProcessAesDrv+0x348>
   20ab2:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 20ba8 <ProcessAesDrv+0x34c>
   20ab6:	f8d8 3000 	ldr.w	r3, [r8]
   20aba:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 20bac <ProcessAesDrv+0x350>
   20abe:	681b      	ldr	r3, [r3, #0]
   20ac0:	f8cb 3000 	str.w	r3, [fp]
   20ac4:	f8d8 3000 	ldr.w	r3, [r8]
   20ac8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 20bb0 <ProcessAesDrv+0x354>
   20acc:	685b      	ldr	r3, [r3, #4]
   20ace:	f8ca 3000 	str.w	r3, [sl]
   20ad2:	f8d8 3000 	ldr.w	r3, [r8]
   20ad6:	4a2c      	ldr	r2, [pc, #176]	; (20b88 <ProcessAesDrv+0x32c>)
   20ad8:	689b      	ldr	r3, [r3, #8]
   20ada:	f8c9 3000 	str.w	r3, [r9]
   20ade:	f8d8 3000 	ldr.w	r3, [r8]
   20ae2:	68db      	ldr	r3, [r3, #12]
   20ae4:	6013      	str	r3, [r2, #0]
   20ae6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   20ae8:	b171      	cbz	r1, 20b08 <ProcessAesDrv+0x2ac>
   20aea:	f04f 0801 	mov.w	r8, #1
   20aee:	e6d2      	b.n	20896 <ProcessAesDrv+0x3a>
   20af0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 20bb4 <ProcessAesDrv+0x358>
   20af4:	e6eb      	b.n	208ce <ProcessAesDrv+0x72>
   20af6:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   20afa:	e70f      	b.n	2091c <ProcessAesDrv+0xc0>
   20afc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   20afe:	2b01      	cmp	r3, #1
   20b00:	bf0c      	ite	eq
   20b02:	2040      	moveq	r0, #64	; 0x40
   20b04:	2010      	movne	r0, #16
   20b06:	e789      	b.n	20a1c <ProcessAesDrv+0x1c0>
   20b08:	f104 0310 	add.w	r3, r4, #16
   20b0c:	4618      	mov	r0, r3
   20b0e:	9305      	str	r3, [sp, #20]
   20b10:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   20b14:	e9cd 3200 	strd	r3, r2, [sp]
   20b18:	9002      	str	r0, [sp, #8]
   20b1a:	2010      	movs	r0, #16
   20b1c:	9003      	str	r0, [sp, #12]
   20b1e:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   20b22:	6c20      	ldr	r0, [r4, #64]	; 0x40
   20b24:	f000 f9ae 	bl	20e84 <kmu_derive_cmac>
   20b28:	2800      	cmp	r0, #0
   20b2a:	d148      	bne.n	20bbe <ProcessAesDrv+0x362>
   20b2c:	2300      	movs	r3, #0
   20b2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   20b32:	e7da      	b.n	20aea <ProcessAesDrv+0x28e>
   20b34:	4b15      	ldr	r3, [pc, #84]	; (20b8c <ProcessAesDrv+0x330>)
   20b36:	e746      	b.n	209c6 <ProcessAesDrv+0x16a>
   20b38:	4a14      	ldr	r2, [pc, #80]	; (20b8c <ProcessAesDrv+0x330>)
   20b3a:	4b15      	ldr	r3, [pc, #84]	; (20b90 <ProcessAesDrv+0x334>)
   20b3c:	e785      	b.n	20a4a <ProcessAesDrv+0x1ee>
   20b3e:	bf00      	nop
   20b40:	2000075c 	.word	0x2000075c
   20b44:	5002b810 	.word	0x5002b810
   20b48:	5002b910 	.word	0x5002b910
   20b4c:	5002ba04 	.word	0x5002ba04
   20b50:	5002b440 	.word	0x5002b440
   20b54:	5002bd28 	.word	0x5002bd28
   20b58:	5002bd2c 	.word	0x5002bd2c
   20b5c:	5002bd30 	.word	0x5002bd30
   20b60:	5002bd34 	.word	0x5002bd34
   20b64:	5002bc2c 	.word	0x5002bc2c
   20b68:	5002bc34 	.word	0x5002bc34
   20b6c:	5002bc28 	.word	0x5002bc28
   20b70:	5002bc30 	.word	0x5002bc30
   20b74:	5002b444 	.word	0x5002b444
   20b78:	00028ff4 	.word	0x00028ff4
   20b7c:	0002900c 	.word	0x0002900c
   20b80:	0002904c 	.word	0x0002904c
   20b84:	0002902c 	.word	0x0002902c
   20b88:	5002b40c 	.word	0x5002b40c
   20b8c:	5002b460 	.word	0x5002b460
   20b90:	5002b464 	.word	0x5002b464
   20b94:	00f10001 	.word	0x00f10001
   20b98:	00f10005 	.word	0x00f10005
   20b9c:	00f1000b 	.word	0x00f1000b
   20ba0:	00f10003 	.word	0x00f10003
   20ba4:	2000074c 	.word	0x2000074c
   20ba8:	5002b400 	.word	0x5002b400
   20bac:	5002b404 	.word	0x5002b404
   20bb0:	5002b408 	.word	0x5002b408
   20bb4:	00f10002 	.word	0x00f10002
   20bb8:	f8df 9038 	ldr.w	r9, [pc, #56]	; 20bf4 <ProcessAesDrv+0x398>
   20bbc:	e687      	b.n	208ce <ProcessAesDrv+0x72>
   20bbe:	f8d8 3000 	ldr.w	r3, [r8]
   20bc2:	4a0b      	ldr	r2, [pc, #44]	; (20bf0 <ProcessAesDrv+0x394>)
   20bc4:	681b      	ldr	r3, [r3, #0]
   20bc6:	f8cb 3000 	str.w	r3, [fp]
   20bca:	f8d8 3000 	ldr.w	r3, [r8]
   20bce:	685b      	ldr	r3, [r3, #4]
   20bd0:	f8ca 3000 	str.w	r3, [sl]
   20bd4:	f8d8 3000 	ldr.w	r3, [r8]
   20bd8:	689b      	ldr	r3, [r3, #8]
   20bda:	f8c9 3000 	str.w	r3, [r9]
   20bde:	f8d8 3000 	ldr.w	r3, [r8]
   20be2:	68db      	ldr	r3, [r3, #12]
   20be4:	6013      	str	r3, [r2, #0]
   20be6:	9805      	ldr	r0, [sp, #20]
   20be8:	2110      	movs	r1, #16
   20bea:	f7ff faa1 	bl	20130 <CC_PalMemSetZeroPlat>
   20bee:	e79d      	b.n	20b2c <ProcessAesDrv+0x2d0>
   20bf0:	5002b40c 	.word	0x5002b40c
   20bf4:	00f10004 	.word	0x00f10004

00020bf8 <FinishAesDrv>:
   20bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20bfc:	b301      	cbz	r1, 20c40 <FinishAesDrv+0x48>
   20bfe:	b1fa      	cbz	r2, 20c40 <FinishAesDrv+0x48>
   20c00:	4604      	mov	r4, r0
   20c02:	2800      	cmp	r0, #0
   20c04:	d07a      	beq.n	20cfc <FinishAesDrv+0x104>
   20c06:	461d      	mov	r5, r3
   20c08:	6b43      	ldr	r3, [r0, #52]	; 0x34
   20c0a:	2b07      	cmp	r3, #7
   20c0c:	460e      	mov	r6, r1
   20c0e:	d01b      	beq.n	20c48 <FinishAesDrv+0x50>
   20c10:	b95d      	cbnz	r5, 20c2a <FinishAesDrv+0x32>
   20c12:	2b03      	cmp	r3, #3
   20c14:	d110      	bne.n	20c38 <FinishAesDrv+0x40>
   20c16:	6d83      	ldr	r3, [r0, #88]	; 0x58
   20c18:	b973      	cbnz	r3, 20c38 <FinishAesDrv+0x40>
   20c1a:	f100 0364 	add.w	r3, r0, #100	; 0x64
   20c1e:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   20c22:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   20c26:	600b      	str	r3, [r1, #0]
   20c28:	2510      	movs	r5, #16
   20c2a:	462b      	mov	r3, r5
   20c2c:	4631      	mov	r1, r6
   20c2e:	4620      	mov	r0, r4
   20c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20c34:	f7ff be12 	b.w	2085c <ProcessAesDrv>
   20c38:	462f      	mov	r7, r5
   20c3a:	4638      	mov	r0, r7
   20c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20c40:	4f66      	ldr	r7, [pc, #408]	; (20ddc <FinishAesDrv+0x1e4>)
   20c42:	4638      	mov	r0, r7
   20c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20c48:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   20c4a:	2b00      	cmp	r3, #0
   20c4c:	d159      	bne.n	20d02 <FinishAesDrv+0x10a>
   20c4e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   20c52:	d25b      	bcs.n	20d0c <FinishAesDrv+0x114>
   20c54:	b915      	cbnz	r5, 20c5c <FinishAesDrv+0x64>
   20c56:	6da3      	ldr	r3, [r4, #88]	; 0x58
   20c58:	2b00      	cmp	r3, #0
   20c5a:	d157      	bne.n	20d0c <FinishAesDrv+0x114>
   20c5c:	4860      	ldr	r0, [pc, #384]	; (20de0 <FinishAesDrv+0x1e8>)
   20c5e:	f04f 31ff 	mov.w	r1, #4294967295
   20c62:	f7fe f983 	bl	1ef6c <CC_PalMutexLock>
   20c66:	2800      	cmp	r0, #0
   20c68:	f040 8097 	bne.w	20d9a <FinishAesDrv+0x1a2>
   20c6c:	2000      	movs	r0, #0
   20c6e:	f7fe f9ad 	bl	1efcc <CC_PalPowerSaveModeSelect>
   20c72:	2800      	cmp	r0, #0
   20c74:	f040 808d 	bne.w	20d92 <FinishAesDrv+0x19a>
   20c78:	4b5a      	ldr	r3, [pc, #360]	; (20de4 <FinishAesDrv+0x1ec>)
   20c7a:	4a5b      	ldr	r2, [pc, #364]	; (20de8 <FinishAesDrv+0x1f0>)
   20c7c:	2101      	movs	r1, #1
   20c7e:	6019      	str	r1, [r3, #0]
   20c80:	6813      	ldr	r3, [r2, #0]
   20c82:	2b00      	cmp	r3, #0
   20c84:	d1fc      	bne.n	20c80 <FinishAesDrv+0x88>
   20c86:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20c88:	2b03      	cmp	r3, #3
   20c8a:	dd20      	ble.n	20cce <FinishAesDrv+0xd6>
   20c8c:	3b06      	subs	r3, #6
   20c8e:	2b01      	cmp	r3, #1
   20c90:	d81f      	bhi.n	20cd2 <FinishAesDrv+0xda>
   20c92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   20c94:	2b01      	cmp	r3, #1
   20c96:	d83b      	bhi.n	20d10 <FinishAesDrv+0x118>
   20c98:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   20c9a:	2b01      	cmp	r3, #1
   20c9c:	f200 8085 	bhi.w	20daa <FinishAesDrv+0x1b2>
   20ca0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   20ca2:	2b01      	cmp	r3, #1
   20ca4:	f200 8083 	bhi.w	20dae <FinishAesDrv+0x1b6>
   20ca8:	4620      	mov	r0, r4
   20caa:	f7ff fd5b 	bl	20764 <InitAes.part.0>
   20cae:	4607      	mov	r7, r0
   20cb0:	b980      	cbnz	r0, 20cd4 <FinishAesDrv+0xdc>
   20cb2:	4620      	mov	r0, r4
   20cb4:	f7ff fd0c 	bl	206d0 <LoadAesKey>
   20cb8:	4607      	mov	r7, r0
   20cba:	b958      	cbnz	r0, 20cd4 <FinishAesDrv+0xdc>
   20cbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20cbe:	2b07      	cmp	r3, #7
   20cc0:	d807      	bhi.n	20cd2 <FinishAesDrv+0xda>
   20cc2:	e8df f003 	tbb	[pc, r3]
   20cc6:	2730      	.short	0x2730
   20cc8:	06062755 	.word	0x06062755
   20ccc:	2755      	.short	0x2755
   20cce:	2b00      	cmp	r3, #0
   20cd0:	dadf      	bge.n	20c92 <FinishAesDrv+0x9a>
   20cd2:	4f46      	ldr	r7, [pc, #280]	; (20dec <FinishAesDrv+0x1f4>)
   20cd4:	4a44      	ldr	r2, [pc, #272]	; (20de8 <FinishAesDrv+0x1f0>)
   20cd6:	6813      	ldr	r3, [r2, #0]
   20cd8:	2b00      	cmp	r3, #0
   20cda:	d1fc      	bne.n	20cd6 <FinishAesDrv+0xde>
   20cdc:	4a41      	ldr	r2, [pc, #260]	; (20de4 <FinishAesDrv+0x1ec>)
   20cde:	2001      	movs	r0, #1
   20ce0:	6013      	str	r3, [r2, #0]
   20ce2:	f7fe f973 	bl	1efcc <CC_PalPowerSaveModeSelect>
   20ce6:	2800      	cmp	r0, #0
   20ce8:	d15b      	bne.n	20da2 <FinishAesDrv+0x1aa>
   20cea:	483d      	ldr	r0, [pc, #244]	; (20de0 <FinishAesDrv+0x1e8>)
   20cec:	f7fe f946 	bl	1ef7c <CC_PalMutexUnlock>
   20cf0:	2800      	cmp	r0, #0
   20cf2:	d0a2      	beq.n	20c3a <FinishAesDrv+0x42>
   20cf4:	483e      	ldr	r0, [pc, #248]	; (20df0 <FinishAesDrv+0x1f8>)
   20cf6:	f7fd fda3 	bl	1e840 <CC_PalAbort>
   20cfa:	e79e      	b.n	20c3a <FinishAesDrv+0x42>
   20cfc:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   20d00:	e79b      	b.n	20c3a <FinishAesDrv+0x42>
   20d02:	2b01      	cmp	r3, #1
   20d04:	d1a6      	bne.n	20c54 <FinishAesDrv+0x5c>
   20d06:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   20d0a:	d3a3      	bcc.n	20c54 <FinishAesDrv+0x5c>
   20d0c:	4f39      	ldr	r7, [pc, #228]	; (20df4 <FinishAesDrv+0x1fc>)
   20d0e:	e794      	b.n	20c3a <FinishAesDrv+0x42>
   20d10:	4f39      	ldr	r7, [pc, #228]	; (20df8 <FinishAesDrv+0x200>)
   20d12:	e7df      	b.n	20cd4 <FinishAesDrv+0xdc>
   20d14:	4b39      	ldr	r3, [pc, #228]	; (20dfc <FinishAesDrv+0x204>)
   20d16:	6822      	ldr	r2, [r4, #0]
   20d18:	601a      	str	r2, [r3, #0]
   20d1a:	6862      	ldr	r2, [r4, #4]
   20d1c:	605a      	str	r2, [r3, #4]
   20d1e:	68a2      	ldr	r2, [r4, #8]
   20d20:	609a      	str	r2, [r3, #8]
   20d22:	68e2      	ldr	r2, [r4, #12]
   20d24:	60da      	str	r2, [r3, #12]
   20d26:	4936      	ldr	r1, [pc, #216]	; (20e00 <FinishAesDrv+0x208>)
   20d28:	4a36      	ldr	r2, [pc, #216]	; (20e04 <FinishAesDrv+0x20c>)
   20d2a:	2301      	movs	r3, #1
   20d2c:	600b      	str	r3, [r1, #0]
   20d2e:	6015      	str	r5, [r2, #0]
   20d30:	2d00      	cmp	r5, #0
   20d32:	d13e      	bne.n	20db2 <FinishAesDrv+0x1ba>
   20d34:	6da2      	ldr	r2, [r4, #88]	; 0x58
   20d36:	b90a      	cbnz	r2, 20d3c <FinishAesDrv+0x144>
   20d38:	4a33      	ldr	r2, [pc, #204]	; (20e08 <FinishAesDrv+0x210>)
   20d3a:	6013      	str	r3, [r2, #0]
   20d3c:	4b2a      	ldr	r3, [pc, #168]	; (20de8 <FinishAesDrv+0x1f0>)
   20d3e:	681f      	ldr	r7, [r3, #0]
   20d40:	2f00      	cmp	r7, #0
   20d42:	d1fc      	bne.n	20d3e <FinishAesDrv+0x146>
   20d44:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20d46:	3b01      	subs	r3, #1
   20d48:	2b06      	cmp	r3, #6
   20d4a:	d8c3      	bhi.n	20cd4 <FinishAesDrv+0xdc>
   20d4c:	a201      	add	r2, pc, #4	; (adr r2, 20d54 <FinishAesDrv+0x15c>)
   20d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20d52:	bf00      	nop
   20d54:	00020d75 	.word	0x00020d75
   20d58:	00020d8d 	.word	0x00020d8d
   20d5c:	00020d75 	.word	0x00020d75
   20d60:	00020cd5 	.word	0x00020cd5
   20d64:	00020cd5 	.word	0x00020cd5
   20d68:	00020d8d 	.word	0x00020d8d
   20d6c:	00020d75 	.word	0x00020d75
   20d70:	4b26      	ldr	r3, [pc, #152]	; (20e0c <FinishAesDrv+0x214>)
   20d72:	e7d0      	b.n	20d16 <FinishAesDrv+0x11e>
   20d74:	4a21      	ldr	r2, [pc, #132]	; (20dfc <FinishAesDrv+0x204>)
   20d76:	4b26      	ldr	r3, [pc, #152]	; (20e10 <FinishAesDrv+0x218>)
   20d78:	6812      	ldr	r2, [r2, #0]
   20d7a:	6022      	str	r2, [r4, #0]
   20d7c:	681a      	ldr	r2, [r3, #0]
   20d7e:	6062      	str	r2, [r4, #4]
   20d80:	685a      	ldr	r2, [r3, #4]
   20d82:	60a2      	str	r2, [r4, #8]
   20d84:	3308      	adds	r3, #8
   20d86:	681b      	ldr	r3, [r3, #0]
   20d88:	60e3      	str	r3, [r4, #12]
   20d8a:	e7a3      	b.n	20cd4 <FinishAesDrv+0xdc>
   20d8c:	4a1f      	ldr	r2, [pc, #124]	; (20e0c <FinishAesDrv+0x214>)
   20d8e:	4b21      	ldr	r3, [pc, #132]	; (20e14 <FinishAesDrv+0x21c>)
   20d90:	e7f2      	b.n	20d78 <FinishAesDrv+0x180>
   20d92:	4821      	ldr	r0, [pc, #132]	; (20e18 <FinishAesDrv+0x220>)
   20d94:	f7fd fd54 	bl	1e840 <CC_PalAbort>
   20d98:	e76e      	b.n	20c78 <FinishAesDrv+0x80>
   20d9a:	4820      	ldr	r0, [pc, #128]	; (20e1c <FinishAesDrv+0x224>)
   20d9c:	f7fd fd50 	bl	1e840 <CC_PalAbort>
   20da0:	e764      	b.n	20c6c <FinishAesDrv+0x74>
   20da2:	481f      	ldr	r0, [pc, #124]	; (20e20 <FinishAesDrv+0x228>)
   20da4:	f7fd fd4c 	bl	1e840 <CC_PalAbort>
   20da8:	e79f      	b.n	20cea <FinishAesDrv+0xf2>
   20daa:	4f1e      	ldr	r7, [pc, #120]	; (20e24 <FinishAesDrv+0x22c>)
   20dac:	e792      	b.n	20cd4 <FinishAesDrv+0xdc>
   20dae:	4f1e      	ldr	r7, [pc, #120]	; (20e28 <FinishAesDrv+0x230>)
   20db0:	e790      	b.n	20cd4 <FinishAesDrv+0xdc>
   20db2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   20db4:	6833      	ldr	r3, [r6, #0]
   20db6:	2a01      	cmp	r2, #1
   20db8:	d00a      	beq.n	20dd0 <FinishAesDrv+0x1d8>
   20dba:	491c      	ldr	r1, [pc, #112]	; (20e2c <FinishAesDrv+0x234>)
   20dbc:	4a1c      	ldr	r2, [pc, #112]	; (20e30 <FinishAesDrv+0x238>)
   20dbe:	600b      	str	r3, [r1, #0]
   20dc0:	2010      	movs	r0, #16
   20dc2:	6015      	str	r5, [r2, #0]
   20dc4:	f7fe f83e 	bl	1ee44 <CC_HalWaitInterrupt>
   20dc8:	4607      	mov	r7, r0
   20dca:	2800      	cmp	r0, #0
   20dcc:	d0b6      	beq.n	20d3c <FinishAesDrv+0x144>
   20dce:	e781      	b.n	20cd4 <FinishAesDrv+0xdc>
   20dd0:	4918      	ldr	r1, [pc, #96]	; (20e34 <FinishAesDrv+0x23c>)
   20dd2:	4a19      	ldr	r2, [pc, #100]	; (20e38 <FinishAesDrv+0x240>)
   20dd4:	600b      	str	r3, [r1, #0]
   20dd6:	2040      	movs	r0, #64	; 0x40
   20dd8:	6015      	str	r5, [r2, #0]
   20dda:	e7f3      	b.n	20dc4 <FinishAesDrv+0x1cc>
   20ddc:	00f1000b 	.word	0x00f1000b
   20de0:	2000075c 	.word	0x2000075c
   20de4:	5002b810 	.word	0x5002b810
   20de8:	5002b910 	.word	0x5002b910
   20dec:	00f10001 	.word	0x00f10001
   20df0:	0002904c 	.word	0x0002904c
   20df4:	00f10005 	.word	0x00f10005
   20df8:	00f10002 	.word	0x00f10002
   20dfc:	5002b440 	.word	0x5002b440
   20e00:	5002b47c 	.word	0x5002b47c
   20e04:	5002b4bc 	.word	0x5002b4bc
   20e08:	5002b524 	.word	0x5002b524
   20e0c:	5002b460 	.word	0x5002b460
   20e10:	5002b444 	.word	0x5002b444
   20e14:	5002b464 	.word	0x5002b464
   20e18:	0002900c 	.word	0x0002900c
   20e1c:	00028ff4 	.word	0x00028ff4
   20e20:	0002902c 	.word	0x0002902c
   20e24:	00f10003 	.word	0x00f10003
   20e28:	00f10004 	.word	0x00f10004
   20e2c:	5002bc30 	.word	0x5002bc30
   20e30:	5002bc34 	.word	0x5002bc34
   20e34:	5002bc28 	.word	0x5002bc28
   20e38:	5002bc2c 	.word	0x5002bc2c

00020e3c <kmu_validate_slot_and_size>:
   20e3c:	b921      	cbnz	r1, 20e48 <kmu_validate_slot_and_size+0xc>
   20e3e:	4b03      	ldr	r3, [pc, #12]	; (20e4c <kmu_validate_slot_and_size+0x10>)
   20e40:	2800      	cmp	r0, #0
   20e42:	bf18      	it	ne
   20e44:	4618      	movne	r0, r3
   20e46:	4770      	bx	lr
   20e48:	4801      	ldr	r0, [pc, #4]	; (20e50 <kmu_validate_slot_and_size+0x14>)
   20e4a:	4770      	bx	lr
   20e4c:	00f70001 	.word	0x00f70001
   20e50:	00f70003 	.word	0x00f70003

00020e54 <kmu_validate_kdr_slot_and_size>:
   20e54:	b921      	cbnz	r1, 20e60 <kmu_validate_kdr_slot_and_size+0xc>
   20e56:	4b03      	ldr	r3, [pc, #12]	; (20e64 <kmu_validate_kdr_slot_and_size+0x10>)
   20e58:	2800      	cmp	r0, #0
   20e5a:	bf18      	it	ne
   20e5c:	4618      	movne	r0, r3
   20e5e:	4770      	bx	lr
   20e60:	4801      	ldr	r0, [pc, #4]	; (20e68 <kmu_validate_kdr_slot_and_size+0x14>)
   20e62:	4770      	bx	lr
   20e64:	00f70001 	.word	0x00f70001
   20e68:	00f70003 	.word	0x00f70003

00020e6c <kmu_use_kdr_key>:
   20e6c:	4903      	ldr	r1, [pc, #12]	; (20e7c <kmu_use_kdr_key+0x10>)
   20e6e:	4b04      	ldr	r3, [pc, #16]	; (20e80 <kmu_use_kdr_key+0x14>)
   20e70:	2000      	movs	r0, #0
   20e72:	2201      	movs	r2, #1
   20e74:	6008      	str	r0, [r1, #0]
   20e76:	601a      	str	r2, [r3, #0]
   20e78:	4770      	bx	lr
   20e7a:	bf00      	nop
   20e7c:	5002ba38 	.word	0x5002ba38
   20e80:	5002b478 	.word	0x5002b478

00020e84 <kmu_derive_cmac>:
   20e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e88:	b0cd      	sub	sp, #308	; 0x134
   20e8a:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   20e8e:	460f      	mov	r7, r1
   20e90:	2100      	movs	r1, #0
   20e92:	460c      	mov	r4, r1
   20e94:	4681      	mov	r9, r0
   20e96:	4616      	mov	r6, r2
   20e98:	a80e      	add	r0, sp, #56	; 0x38
   20e9a:	2274      	movs	r2, #116	; 0x74
   20e9c:	469b      	mov	fp, r3
   20e9e:	f001 fdea 	bl	22a76 <memset>
   20ea2:	4621      	mov	r1, r4
   20ea4:	2280      	movs	r2, #128	; 0x80
   20ea6:	a82c      	add	r0, sp, #176	; 0xb0
   20ea8:	942b      	str	r4, [sp, #172]	; 0xac
   20eaa:	f001 fde4 	bl	22a76 <memset>
   20eae:	2384      	movs	r3, #132	; 0x84
   20eb0:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   20eb4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   20eb8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   20ebc:	9305      	str	r3, [sp, #20]
   20ebe:	d860      	bhi.n	20f82 <kmu_derive_cmac+0xfe>
   20ec0:	ab05      	add	r3, sp, #20
   20ec2:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   20ec6:	9301      	str	r3, [sp, #4]
   20ec8:	9502      	str	r5, [sp, #8]
   20eca:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   20ece:	4659      	mov	r1, fp
   20ed0:	4630      	mov	r0, r6
   20ed2:	f8cd a000 	str.w	sl, [sp]
   20ed6:	f000 f865 	bl	20fa4 <UtilCmacBuildDataForDerivation>
   20eda:	2800      	cmp	r0, #0
   20edc:	d14c      	bne.n	20f78 <kmu_derive_cmac+0xf4>
   20ede:	2303      	movs	r3, #3
   20ee0:	f88d 3013 	strb.w	r3, [sp, #19]
   20ee4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   20ee8:	901c      	str	r0, [sp, #112]	; 0x70
   20eea:	2200      	movs	r2, #0
   20eec:	2110      	movs	r1, #16
   20eee:	a80e      	add	r0, sp, #56	; 0x38
   20ef0:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   20ef4:	2607      	movs	r6, #7
   20ef6:	2301      	movs	r3, #1
   20ef8:	2401      	movs	r4, #1
   20efa:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   20efe:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   20f02:	971a      	str	r7, [sp, #104]	; 0x68
   20f04:	961b      	str	r6, [sp, #108]	; 0x6c
   20f06:	9426      	str	r4, [sp, #152]	; 0x98
   20f08:	f10d 0920 	add.w	r9, sp, #32
   20f0c:	f7ff f910 	bl	20130 <CC_PalMemSetZeroPlat>
   20f10:	2110      	movs	r1, #16
   20f12:	e9cd 1900 	strd	r1, r9, [sp]
   20f16:	ab0a      	add	r3, sp, #40	; 0x28
   20f18:	9905      	ldr	r1, [sp, #20]
   20f1a:	4650      	mov	r0, sl
   20f1c:	aa06      	add	r2, sp, #24
   20f1e:	f7ff f9ab 	bl	20278 <SetDataBuffersInfo>
   20f22:	4607      	mov	r7, r0
   20f24:	b150      	cbz	r0, 20f3c <kmu_derive_cmac+0xb8>
   20f26:	e01e      	b.n	20f66 <kmu_derive_cmac+0xe2>
   20f28:	f7ff f8fe 	bl	20128 <CC_PalMemCopyPlat>
   20f2c:	2110      	movs	r1, #16
   20f2e:	a80e      	add	r0, sp, #56	; 0x38
   20f30:	f7ff f8fe 	bl	20130 <CC_PalMemSetZeroPlat>
   20f34:	3401      	adds	r4, #1
   20f36:	1bad      	subs	r5, r5, r6
   20f38:	b2e4      	uxtb	r4, r4
   20f3a:	d027      	beq.n	20f8c <kmu_derive_cmac+0x108>
   20f3c:	9b05      	ldr	r3, [sp, #20]
   20f3e:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   20f42:	2d10      	cmp	r5, #16
   20f44:	464a      	mov	r2, r9
   20f46:	a906      	add	r1, sp, #24
   20f48:	a80e      	add	r0, sp, #56	; 0x38
   20f4a:	462e      	mov	r6, r5
   20f4c:	bf28      	it	cs
   20f4e:	2610      	movcs	r6, #16
   20f50:	f7ff fe52 	bl	20bf8 <FinishAesDrv>
   20f54:	4603      	mov	r3, r0
   20f56:	4632      	mov	r2, r6
   20f58:	eb08 0007 	add.w	r0, r8, r7
   20f5c:	a90e      	add	r1, sp, #56	; 0x38
   20f5e:	4437      	add	r7, r6
   20f60:	2b00      	cmp	r3, #0
   20f62:	d0e1      	beq.n	20f28 <kmu_derive_cmac+0xa4>
   20f64:	461f      	mov	r7, r3
   20f66:	a80e      	add	r0, sp, #56	; 0x38
   20f68:	2274      	movs	r2, #116	; 0x74
   20f6a:	2100      	movs	r1, #0
   20f6c:	f7ff f8de 	bl	2012c <CC_PalMemSetPlat>
   20f70:	4638      	mov	r0, r7
   20f72:	b04d      	add	sp, #308	; 0x134
   20f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f78:	4f08      	ldr	r7, [pc, #32]	; (20f9c <kmu_derive_cmac+0x118>)
   20f7a:	4638      	mov	r0, r7
   20f7c:	b04d      	add	sp, #308	; 0x134
   20f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f82:	4f07      	ldr	r7, [pc, #28]	; (20fa0 <kmu_derive_cmac+0x11c>)
   20f84:	4638      	mov	r0, r7
   20f86:	b04d      	add	sp, #308	; 0x134
   20f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f8c:	a80e      	add	r0, sp, #56	; 0x38
   20f8e:	2274      	movs	r2, #116	; 0x74
   20f90:	2100      	movs	r1, #0
   20f92:	462f      	mov	r7, r5
   20f94:	f7ff f8ca 	bl	2012c <CC_PalMemSetPlat>
   20f98:	e7ea      	b.n	20f70 <kmu_derive_cmac+0xec>
   20f9a:	bf00      	nop
   20f9c:	00f1000e 	.word	0x00f1000e
   20fa0:	00f1000f 	.word	0x00f1000f

00020fa4 <UtilCmacBuildDataForDerivation>:
   20fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20fa8:	b082      	sub	sp, #8
   20faa:	2600      	movs	r6, #0
   20fac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   20fae:	9601      	str	r6, [sp, #4]
   20fb0:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   20fb4:	d83c      	bhi.n	21030 <UtilCmacBuildDataForDerivation+0x8c>
   20fb6:	00ee      	lsls	r6, r5, #3
   20fb8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   20fbc:	f101 35ff 	add.w	r5, r1, #4294967295
   20fc0:	461f      	mov	r7, r3
   20fc2:	bf34      	ite	cc
   20fc4:	2303      	movcc	r3, #3
   20fc6:	2304      	movcs	r3, #4
   20fc8:	2d3f      	cmp	r5, #63	; 0x3f
   20fca:	460c      	mov	r4, r1
   20fcc:	9300      	str	r3, [sp, #0]
   20fce:	d82f      	bhi.n	21030 <UtilCmacBuildDataForDerivation+0x8c>
   20fd0:	b370      	cbz	r0, 21030 <UtilCmacBuildDataForDerivation+0x8c>
   20fd2:	4690      	mov	r8, r2
   20fd4:	b117      	cbz	r7, 20fdc <UtilCmacBuildDataForDerivation+0x38>
   20fd6:	b35a      	cbz	r2, 21030 <UtilCmacBuildDataForDerivation+0x8c>
   20fd8:	2f40      	cmp	r7, #64	; 0x40
   20fda:	d829      	bhi.n	21030 <UtilCmacBuildDataForDerivation+0x8c>
   20fdc:	9a08      	ldr	r2, [sp, #32]
   20fde:	b33a      	cbz	r2, 21030 <UtilCmacBuildDataForDerivation+0x8c>
   20fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20fe2:	6811      	ldr	r1, [r2, #0]
   20fe4:	b321      	cbz	r1, 21030 <UtilCmacBuildDataForDerivation+0x8c>
   20fe6:	19e2      	adds	r2, r4, r7
   20fe8:	4413      	add	r3, r2
   20fea:	4299      	cmp	r1, r3
   20fec:	d320      	bcc.n	21030 <UtilCmacBuildDataForDerivation+0x8c>
   20fee:	9b08      	ldr	r3, [sp, #32]
   20ff0:	4622      	mov	r2, r4
   20ff2:	4601      	mov	r1, r0
   20ff4:	1c58      	adds	r0, r3, #1
   20ff6:	f7ff f897 	bl	20128 <CC_PalMemCopyPlat>
   20ffa:	9b08      	ldr	r3, [sp, #32]
   20ffc:	4423      	add	r3, r4
   20ffe:	2200      	movs	r2, #0
   21000:	3402      	adds	r4, #2
   21002:	705a      	strb	r2, [r3, #1]
   21004:	bb07      	cbnz	r7, 21048 <UtilCmacBuildDataForDerivation+0xa4>
   21006:	2eff      	cmp	r6, #255	; 0xff
   21008:	9600      	str	r6, [sp, #0]
   2100a:	d915      	bls.n	21038 <UtilCmacBuildDataForDerivation+0x94>
   2100c:	9b08      	ldr	r3, [sp, #32]
   2100e:	0235      	lsls	r5, r6, #8
   21010:	b2ad      	uxth	r5, r5
   21012:	1918      	adds	r0, r3, r4
   21014:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   21018:	2202      	movs	r2, #2
   2101a:	a901      	add	r1, sp, #4
   2101c:	9501      	str	r5, [sp, #4]
   2101e:	f7ff f883 	bl	20128 <CC_PalMemCopyPlat>
   21022:	3402      	adds	r4, #2
   21024:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21026:	2000      	movs	r0, #0
   21028:	601c      	str	r4, [r3, #0]
   2102a:	b002      	add	sp, #8
   2102c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21030:	4809      	ldr	r0, [pc, #36]	; (21058 <UtilCmacBuildDataForDerivation+0xb4>)
   21032:	b002      	add	sp, #8
   21034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21038:	9b08      	ldr	r3, [sp, #32]
   2103a:	2201      	movs	r2, #1
   2103c:	1918      	adds	r0, r3, r4
   2103e:	4669      	mov	r1, sp
   21040:	f7ff f872 	bl	20128 <CC_PalMemCopyPlat>
   21044:	3401      	adds	r4, #1
   21046:	e7ed      	b.n	21024 <UtilCmacBuildDataForDerivation+0x80>
   21048:	9b08      	ldr	r3, [sp, #32]
   2104a:	4641      	mov	r1, r8
   2104c:	1918      	adds	r0, r3, r4
   2104e:	463a      	mov	r2, r7
   21050:	f7ff f86a 	bl	20128 <CC_PalMemCopyPlat>
   21054:	443c      	add	r4, r7
   21056:	e7d6      	b.n	21006 <UtilCmacBuildDataForDerivation+0x62>
   21058:	80000006 	.word	0x80000006

0002105c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2105c:	4602      	mov	r2, r0
   2105e:	b1b0      	cbz	r0, 2108e <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21060:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21062:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   21066:	2b02      	cmp	r3, #2
   21068:	d00b      	beq.n	21082 <sys_notify_validate+0x26>
   2106a:	2b03      	cmp	r3, #3
   2106c:	d004      	beq.n	21078 <sys_notify_validate+0x1c>
   2106e:	2b01      	cmp	r3, #1
   21070:	d004      	beq.n	2107c <sys_notify_validate+0x20>
   21072:	f06f 0015 	mvn.w	r0, #21
   21076:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   21078:	6803      	ldr	r3, [r0, #0]
   2107a:	b15b      	cbz	r3, 21094 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   2107c:	2000      	movs	r0, #0
   2107e:	6090      	str	r0, [r2, #8]
   21080:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   21082:	6803      	ldr	r3, [r0, #0]
   21084:	2b00      	cmp	r3, #0
   21086:	d1f9      	bne.n	2107c <sys_notify_validate+0x20>
			rv = -EINVAL;
   21088:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   2108c:	4770      	bx	lr
		return -EINVAL;
   2108e:	f06f 0015 	mvn.w	r0, #21
   21092:	4770      	bx	lr
			rv = -EINVAL;
   21094:	f06f 0015 	mvn.w	r0, #21
   21098:	4770      	bx	lr

0002109a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   2109a:	b510      	push	{r4, lr}
   2109c:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2109e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   210a0:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   210a4:	6081      	str	r1, [r0, #8]
	switch (method) {
   210a6:	2a02      	cmp	r2, #2
   210a8:	d004      	beq.n	210b4 <sys_notify_finalize+0x1a>
   210aa:	2a03      	cmp	r2, #3
   210ac:	d105      	bne.n	210ba <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   210ae:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   210b0:	2000      	movs	r0, #0
		break;
   210b2:	e004      	b.n	210be <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   210b4:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   210b6:	2400      	movs	r4, #0
		break;
   210b8:	e001      	b.n	210be <sys_notify_finalize+0x24>
	switch (method) {
   210ba:	2400      	movs	r4, #0
   210bc:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   210be:	2200      	movs	r2, #0
   210c0:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   210c2:	b108      	cbz	r0, 210c8 <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   210c4:	f7fd fb3c 	bl	1e740 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   210c8:	4620      	mov	r0, r4
   210ca:	bd10      	pop	{r4, pc}

000210cc <arch_printk_char_out>:
}
   210cc:	2000      	movs	r0, #0
   210ce:	4770      	bx	lr

000210d0 <str_out>:
{
   210d0:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   210d2:	680c      	ldr	r4, [r1, #0]
   210d4:	b154      	cbz	r4, 210ec <str_out+0x1c>
   210d6:	688a      	ldr	r2, [r1, #8]
   210d8:	684b      	ldr	r3, [r1, #4]
   210da:	429a      	cmp	r2, r3
   210dc:	da06      	bge.n	210ec <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   210de:	3b01      	subs	r3, #1
   210e0:	429a      	cmp	r2, r3
   210e2:	d008      	beq.n	210f6 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   210e4:	1c53      	adds	r3, r2, #1
   210e6:	608b      	str	r3, [r1, #8]
   210e8:	54a0      	strb	r0, [r4, r2]
   210ea:	e002      	b.n	210f2 <str_out+0x22>
		ctx->count++;
   210ec:	688b      	ldr	r3, [r1, #8]
   210ee:	3301      	adds	r3, #1
   210f0:	608b      	str	r3, [r1, #8]
}
   210f2:	bc10      	pop	{r4}
   210f4:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   210f6:	1c53      	adds	r3, r2, #1
   210f8:	608b      	str	r3, [r1, #8]
   210fa:	2300      	movs	r3, #0
   210fc:	54a3      	strb	r3, [r4, r2]
   210fe:	e7f8      	b.n	210f2 <str_out+0x22>

00021100 <printk>:
{
   21100:	b40f      	push	{r0, r1, r2, r3}
   21102:	b500      	push	{lr}
   21104:	b083      	sub	sp, #12
   21106:	a904      	add	r1, sp, #16
   21108:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2110c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2110e:	f7ef fe91 	bl	10e34 <vprintk>
}
   21112:	b003      	add	sp, #12
   21114:	f85d eb04 	ldr.w	lr, [sp], #4
   21118:	b004      	add	sp, #16
   2111a:	4770      	bx	lr

0002111c <snprintk>:
{
   2111c:	b40c      	push	{r2, r3}
   2111e:	b500      	push	{lr}
   21120:	b083      	sub	sp, #12
   21122:	ab04      	add	r3, sp, #16
   21124:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   21128:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2112a:	f7ef fe93 	bl	10e54 <vsnprintk>
}
   2112e:	b003      	add	sp, #12
   21130:	f85d eb04 	ldr.w	lr, [sp], #4
   21134:	b002      	add	sp, #8
   21136:	4770      	bx	lr

00021138 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   21138:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2113c:	8b01      	ldrh	r1, [r0, #24]
   2113e:	f021 0107 	bic.w	r1, r1, #7
   21142:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   21144:	8301      	strh	r1, [r0, #24]
}
   21146:	4770      	bx	lr

00021148 <notify_monitors>:
{
   21148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2114c:	4606      	mov	r6, r0
   2114e:	460f      	mov	r7, r1
   21150:	4690      	mov	r8, r2
	return list->head;
   21152:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   21154:	b119      	cbz	r1, 2115e <notify_monitors+0x16>
   21156:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   21158:	b131      	cbz	r1, 21168 <notify_monitors+0x20>
	return node->next;
   2115a:	680c      	ldr	r4, [r1, #0]
   2115c:	e004      	b.n	21168 <notify_monitors+0x20>
   2115e:	460c      	mov	r4, r1
   21160:	e002      	b.n	21168 <notify_monitors+0x20>
   21162:	4623      	mov	r3, r4
   21164:	4621      	mov	r1, r4
   21166:	461c      	mov	r4, r3
   21168:	b159      	cbz	r1, 21182 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   2116a:	684d      	ldr	r5, [r1, #4]
   2116c:	4643      	mov	r3, r8
   2116e:	463a      	mov	r2, r7
   21170:	4630      	mov	r0, r6
   21172:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   21174:	2c00      	cmp	r4, #0
   21176:	d0f4      	beq.n	21162 <notify_monitors+0x1a>
   21178:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   2117a:	2c00      	cmp	r4, #0
   2117c:	d0f2      	beq.n	21164 <notify_monitors+0x1c>
	return node->next;
   2117e:	6823      	ldr	r3, [r4, #0]
   21180:	e7f0      	b.n	21164 <notify_monitors+0x1c>
}
   21182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021186 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21186:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   21188:	f013 0307 	ands.w	r3, r3, #7
   2118c:	d103      	bne.n	21196 <process_recheck+0x10>
	return list->head;
   2118e:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   21190:	b10a      	cbz	r2, 21196 <process_recheck+0x10>
		evt = EVT_START;
   21192:	2003      	movs	r0, #3
   21194:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   21196:	2b02      	cmp	r3, #2
   21198:	d003      	beq.n	211a2 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   2119a:	2b01      	cmp	r3, #1
   2119c:	d006      	beq.n	211ac <process_recheck+0x26>
	int evt = EVT_NOP;
   2119e:	2000      	movs	r0, #0
   211a0:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   211a2:	8b42      	ldrh	r2, [r0, #26]
   211a4:	2a00      	cmp	r2, #0
   211a6:	d1f8      	bne.n	2119a <process_recheck+0x14>
		evt = EVT_STOP;
   211a8:	2004      	movs	r0, #4
   211aa:	4770      	bx	lr
   211ac:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   211ae:	b10b      	cbz	r3, 211b4 <process_recheck+0x2e>
		evt = EVT_RESET;
   211b0:	2005      	movs	r0, #5
}
   211b2:	4770      	bx	lr
	int evt = EVT_NOP;
   211b4:	2000      	movs	r0, #0
   211b6:	4770      	bx	lr

000211b8 <process_complete>:
{
   211b8:	b538      	push	{r3, r4, r5, lr}
   211ba:	4604      	mov	r4, r0
   211bc:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   211be:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   211c0:	2a00      	cmp	r2, #0
   211c2:	db07      	blt.n	211d4 <process_complete+0x1c>
   211c4:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   211c8:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   211ca:	2a01      	cmp	r2, #1
   211cc:	d90e      	bls.n	211ec <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   211ce:	2b04      	cmp	r3, #4
   211d0:	d032      	beq.n	21238 <process_complete+0x80>
}
   211d2:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   211d4:	e9d0 0100 	ldrd	r0, r1, [r0]
   211d8:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   211dc:	2300      	movs	r3, #0
   211de:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   211e0:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   211e2:	2101      	movs	r1, #1
   211e4:	4620      	mov	r0, r4
   211e6:	f7ff ffa7 	bl	21138 <set_state>
   211ea:	e7f2      	b.n	211d2 <process_complete+0x1a>
		*clients = mgr->clients;
   211ec:	e9d0 0100 	ldrd	r0, r1, [r0]
   211f0:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   211f4:	2200      	movs	r2, #0
   211f6:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   211f8:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   211fa:	2b06      	cmp	r3, #6
   211fc:	d117      	bne.n	2122e <process_complete+0x76>
	return list->head;
   211fe:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   21200:	b13b      	cbz	r3, 21212 <process_complete+0x5a>
				mgr->refs += 1U;
   21202:	8b62      	ldrh	r2, [r4, #26]
   21204:	3201      	adds	r2, #1
   21206:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   21208:	2b00      	cmp	r3, #0
   2120a:	d0f9      	beq.n	21200 <process_complete+0x48>
	return node->next;
   2120c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2120e:	2b00      	cmp	r3, #0
   21210:	d1f6      	bne.n	21200 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   21212:	2102      	movs	r1, #2
   21214:	4620      	mov	r0, r4
   21216:	f7ff ff8f 	bl	21138 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   2121a:	4620      	mov	r0, r4
   2121c:	f7ff ffb3 	bl	21186 <process_recheck>
   21220:	2800      	cmp	r0, #0
   21222:	d0d6      	beq.n	211d2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   21224:	8b23      	ldrh	r3, [r4, #24]
   21226:	f043 0320 	orr.w	r3, r3, #32
   2122a:	8323      	strh	r3, [r4, #24]
   2122c:	e7d1      	b.n	211d2 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   2122e:	2100      	movs	r1, #0
   21230:	4620      	mov	r0, r4
   21232:	f7ff ff81 	bl	21138 <set_state>
   21236:	e7f0      	b.n	2121a <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   21238:	2100      	movs	r1, #0
   2123a:	f7ff ff7d 	bl	21138 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   2123e:	4620      	mov	r0, r4
   21240:	f7ff ffa1 	bl	21186 <process_recheck>
   21244:	2800      	cmp	r0, #0
   21246:	d0c4      	beq.n	211d2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   21248:	8b23      	ldrh	r3, [r4, #24]
   2124a:	f043 0320 	orr.w	r3, r3, #32
   2124e:	8323      	strh	r3, [r4, #24]
}
   21250:	e7bf      	b.n	211d2 <process_complete+0x1a>

00021252 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   21252:	b158      	cbz	r0, 2126c <validate_args+0x1a>
{
   21254:	b510      	push	{r4, lr}
   21256:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   21258:	b159      	cbz	r1, 21272 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   2125a:	1d08      	adds	r0, r1, #4
   2125c:	f7ff fefe 	bl	2105c <sys_notify_validate>
	if ((rv == 0)
   21260:	b918      	cbnz	r0, 2126a <validate_args+0x18>
	    && ((cli->notify.flags
   21262:	68a3      	ldr	r3, [r4, #8]
   21264:	f033 0303 	bics.w	r3, r3, #3
   21268:	d106      	bne.n	21278 <validate_args+0x26>
}
   2126a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2126c:	f06f 0015 	mvn.w	r0, #21
}
   21270:	4770      	bx	lr
		return -EINVAL;
   21272:	f06f 0015 	mvn.w	r0, #21
   21276:	e7f8      	b.n	2126a <validate_args+0x18>
		rv = -EINVAL;
   21278:	f06f 0015 	mvn.w	r0, #21
   2127c:	e7f5      	b.n	2126a <validate_args+0x18>

0002127e <notify_one>:
{
   2127e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21282:	4607      	mov	r7, r0
   21284:	460c      	mov	r4, r1
   21286:	4616      	mov	r6, r2
   21288:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2128a:	4619      	mov	r1, r3
   2128c:	1d20      	adds	r0, r4, #4
   2128e:	f7ff ff04 	bl	2109a <sys_notify_finalize>
	if (cb) {
   21292:	b128      	cbz	r0, 212a0 <notify_one+0x22>
   21294:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   21296:	462b      	mov	r3, r5
   21298:	4632      	mov	r2, r6
   2129a:	4621      	mov	r1, r4
   2129c:	4638      	mov	r0, r7
   2129e:	47c0      	blx	r8
}
   212a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000212a4 <notify_all>:
{
   212a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   212a8:	4681      	mov	r9, r0
   212aa:	460c      	mov	r4, r1
   212ac:	4690      	mov	r8, r2
   212ae:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   212b0:	e005      	b.n	212be <notify_all+0x1a>
	list->tail = node;
   212b2:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   212b4:	463b      	mov	r3, r7
   212b6:	4642      	mov	r2, r8
   212b8:	4648      	mov	r0, r9
   212ba:	f7ff ffe0 	bl	2127e <notify_one>
	return list->head;
   212be:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   212c0:	b129      	cbz	r1, 212ce <notify_all+0x2a>
	return node->next;
   212c2:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   212c4:	6025      	str	r5, [r4, #0]
	return list->tail;
   212c6:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   212c8:	428e      	cmp	r6, r1
   212ca:	d1f3      	bne.n	212b4 <notify_all+0x10>
   212cc:	e7f1      	b.n	212b2 <notify_all+0xe>
}
   212ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000212d2 <transition_complete>:
{
   212d2:	b510      	push	{r4, lr}
	__asm__ volatile(
   212d4:	f04f 0440 	mov.w	r4, #64	; 0x40
   212d8:	f3ef 8211 	mrs	r2, BASEPRI
   212dc:	f384 8812 	msr	BASEPRI_MAX, r4
   212e0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   212e4:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   212e6:	2101      	movs	r1, #1
   212e8:	f7ef fdca 	bl	10e80 <process_event>
}
   212ec:	bd10      	pop	{r4, pc}

000212ee <onoff_manager_init>:
	if ((mgr == NULL)
   212ee:	4603      	mov	r3, r0
   212f0:	b168      	cbz	r0, 2130e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   212f2:	b179      	cbz	r1, 21314 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   212f4:	680a      	ldr	r2, [r1, #0]
   212f6:	b182      	cbz	r2, 2131a <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   212f8:	684a      	ldr	r2, [r1, #4]
   212fa:	b18a      	cbz	r2, 21320 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   212fc:	2000      	movs	r0, #0
   212fe:	6018      	str	r0, [r3, #0]
   21300:	6058      	str	r0, [r3, #4]
   21302:	6098      	str	r0, [r3, #8]
   21304:	60d8      	str	r0, [r3, #12]
   21306:	6158      	str	r0, [r3, #20]
   21308:	6198      	str	r0, [r3, #24]
   2130a:	6119      	str	r1, [r3, #16]
	return 0;
   2130c:	4770      	bx	lr
		return -EINVAL;
   2130e:	f06f 0015 	mvn.w	r0, #21
   21312:	4770      	bx	lr
   21314:	f06f 0015 	mvn.w	r0, #21
   21318:	4770      	bx	lr
   2131a:	f06f 0015 	mvn.w	r0, #21
   2131e:	4770      	bx	lr
   21320:	f06f 0015 	mvn.w	r0, #21
}
   21324:	4770      	bx	lr

00021326 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   21326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21328:	4604      	mov	r4, r0
   2132a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2132c:	f7ff ff91 	bl	21252 <validate_args>

	if (rv < 0) {
   21330:	1e06      	subs	r6, r0, #0
   21332:	db37      	blt.n	213a4 <onoff_request+0x7e>
   21334:	f04f 0340 	mov.w	r3, #64	; 0x40
   21338:	f3ef 8211 	mrs	r2, BASEPRI
   2133c:	f383 8812 	msr	BASEPRI_MAX, r3
   21340:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21344:	8b25      	ldrh	r5, [r4, #24]
   21346:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2134a:	8b63      	ldrh	r3, [r4, #26]
   2134c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21350:	428b      	cmp	r3, r1
   21352:	d02f      	beq.n	213b4 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   21354:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   21356:	2d02      	cmp	r5, #2
   21358:	d00c      	beq.n	21374 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   2135a:	b18d      	cbz	r5, 21380 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   2135c:	2d04      	cmp	r5, #4
   2135e:	d00f      	beq.n	21380 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   21360:	2d06      	cmp	r5, #6
   21362:	d00d      	beq.n	21380 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   21364:	2d05      	cmp	r5, #5
   21366:	d01f      	beq.n	213a8 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   21368:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   2136c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   2136e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   21370:	4608      	mov	r0, r1
   21372:	e00a      	b.n	2138a <onoff_request+0x64>
		mgr->refs += 1U;
   21374:	3301      	adds	r3, #1
   21376:	8363      	strh	r3, [r4, #26]
		notify = true;
   21378:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   2137a:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   2137c:	4618      	mov	r0, r3
   2137e:	e004      	b.n	2138a <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   21380:	fab5 f385 	clz	r3, r5
   21384:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   21386:	2100      	movs	r1, #0
		add_client = true;
   21388:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   2138a:	b128      	cbz	r0, 21398 <onoff_request+0x72>
	parent->next = child;
   2138c:	2000      	movs	r0, #0
   2138e:	6038      	str	r0, [r7, #0]
	return list->tail;
   21390:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   21392:	b1a8      	cbz	r0, 213c0 <onoff_request+0x9a>
	parent->next = child;
   21394:	6007      	str	r7, [r0, #0]
	list->tail = node;
   21396:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   21398:	b9ab      	cbnz	r3, 213c6 <onoff_request+0xa0>
	__asm__ volatile(
   2139a:	f382 8811 	msr	BASEPRI, r2
   2139e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   213a2:	b9a9      	cbnz	r1, 213d0 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   213a4:	4630      	mov	r0, r6
   213a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   213a8:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   213ac:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   213ae:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   213b0:	4608      	mov	r0, r1
   213b2:	e7ea      	b.n	2138a <onoff_request+0x64>
		rv = -EAGAIN;
   213b4:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   213b8:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   213ba:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   213bc:	4608      	mov	r0, r1
   213be:	e7e4      	b.n	2138a <onoff_request+0x64>
   213c0:	6067      	str	r7, [r4, #4]
	list->head = node;
   213c2:	6027      	str	r7, [r4, #0]
}
   213c4:	e7e8      	b.n	21398 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   213c6:	2102      	movs	r1, #2
   213c8:	4620      	mov	r0, r4
   213ca:	f7ef fd59 	bl	10e80 <process_event>
   213ce:	e7e9      	b.n	213a4 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   213d0:	2300      	movs	r3, #0
   213d2:	462a      	mov	r2, r5
   213d4:	4639      	mov	r1, r7
   213d6:	4620      	mov	r0, r4
   213d8:	f7ff ff51 	bl	2127e <notify_one>
   213dc:	e7e2      	b.n	213a4 <onoff_request+0x7e>

000213de <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   213de:	b510      	push	{r4, lr}
	__asm__ volatile(
   213e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   213e4:	f3ef 8211 	mrs	r2, BASEPRI
   213e8:	f383 8812 	msr	BASEPRI_MAX, r3
   213ec:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   213f0:	8b03      	ldrh	r3, [r0, #24]
   213f2:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   213f6:	2b02      	cmp	r3, #2
   213f8:	d007      	beq.n	2140a <onoff_release+0x2c>
		if (state == ONOFF_STATE_ERROR) {
   213fa:	2b01      	cmp	r3, #1
   213fc:	d002      	beq.n	21404 <onoff_release+0x26>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   213fe:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
   21402:	e008      	b.n	21416 <onoff_release+0x38>
			rv = -EIO;
   21404:	f06f 0404 	mvn.w	r4, #4
   21408:	e005      	b.n	21416 <onoff_release+0x38>
   2140a:	461c      	mov	r4, r3
	mgr->refs -= 1U;
   2140c:	8b43      	ldrh	r3, [r0, #26]
   2140e:	3b01      	subs	r3, #1
   21410:	b29b      	uxth	r3, r3
   21412:	8343      	strh	r3, [r0, #26]
	if (stop) {
   21414:	b12b      	cbz	r3, 21422 <onoff_release+0x44>
	__asm__ volatile(
   21416:	f382 8811 	msr	BASEPRI, r2
   2141a:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
   2141e:	4620      	mov	r0, r4
   21420:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
   21422:	2102      	movs	r1, #2
   21424:	f7ef fd2c 	bl	10e80 <process_event>
   21428:	e7f9      	b.n	2141e <onoff_release+0x40>

0002142a <onoff_cancel>:
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
	if ((mgr == NULL) || (cli == NULL)) {
   2142a:	2800      	cmp	r0, #0
   2142c:	d031      	beq.n	21492 <onoff_cancel+0x68>
{
   2142e:	b470      	push	{r4, r5, r6}
   21430:	4605      	mov	r5, r0
	if ((mgr == NULL) || (cli == NULL)) {
   21432:	2900      	cmp	r1, #0
   21434:	d030      	beq.n	21498 <onoff_cancel+0x6e>
	__asm__ volatile(
   21436:	f04f 0340 	mov.w	r3, #64	; 0x40
   2143a:	f3ef 8611 	mrs	r6, BASEPRI
   2143e:	f383 8812 	msr	BASEPRI_MAX, r3
   21442:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21446:	8b00      	ldrh	r0, [r0, #24]
   21448:	f000 0007 	and.w	r0, r0, #7

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   2144c:	460c      	mov	r4, r1
	return list->head;
   2144e:	682b      	ldr	r3, [r5, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21450:	2200      	movs	r2, #0
   21452:	b1b3      	cbz	r3, 21482 <onoff_cancel+0x58>
   21454:	429c      	cmp	r4, r3
   21456:	d002      	beq.n	2145e <onoff_cancel+0x34>
   21458:	461a      	mov	r2, r3
   2145a:	681b      	ldr	r3, [r3, #0]
   2145c:	e7f9      	b.n	21452 <onoff_cancel+0x28>
Z_GENLIST_REMOVE(slist, snode)
   2145e:	b13a      	cbz	r2, 21470 <onoff_cancel+0x46>
	return node->next;
   21460:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   21462:	6013      	str	r3, [r2, #0]
	return list->tail;
   21464:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   21466:	4299      	cmp	r1, r3
   21468:	d009      	beq.n	2147e <onoff_cancel+0x54>
	parent->next = child;
   2146a:	2300      	movs	r3, #0
   2146c:	600b      	str	r3, [r1, #0]
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   2146e:	e00a      	b.n	21486 <onoff_cancel+0x5c>
	return node->next;
   21470:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   21472:	602b      	str	r3, [r5, #0]
	return list->tail;
   21474:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   21476:	4291      	cmp	r1, r2
   21478:	d1f7      	bne.n	2146a <onoff_cancel+0x40>
	list->tail = node;
   2147a:	606b      	str	r3, [r5, #4]
}
   2147c:	e7f5      	b.n	2146a <onoff_cancel+0x40>
	list->tail = node;
   2147e:	606a      	str	r2, [r5, #4]
}
   21480:	e7f3      	b.n	2146a <onoff_cancel+0x40>
	int rv = -EALREADY;
   21482:	f06f 0077 	mvn.w	r0, #119	; 0x77
	__asm__ volatile(
   21486:	f386 8811 	msr	BASEPRI, r6
   2148a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   2148e:	bc70      	pop	{r4, r5, r6}
   21490:	4770      	bx	lr
		return -EINVAL;
   21492:	f06f 0015 	mvn.w	r0, #21
}
   21496:	4770      	bx	lr
		return -EINVAL;
   21498:	f06f 0015 	mvn.w	r0, #21
   2149c:	e7f7      	b.n	2148e <onoff_cancel+0x64>

0002149e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2149e:	b508      	push	{r3, lr}
   214a0:	4604      	mov	r4, r0
   214a2:	4608      	mov	r0, r1
   214a4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   214a6:	461a      	mov	r2, r3
   214a8:	47a0      	blx	r4
	return z_impl_z_current_get();
   214aa:	f7fc fcc9 	bl	1de40 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   214ae:	f7f2 ff7f 	bl	143b0 <z_impl_k_thread_abort>

000214b2 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   214b2:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
   214b4:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   214b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   214ba:	d303      	bcc.n	214c4 <chunk_mem+0x12>
   214bc:	2308      	movs	r3, #8
   214be:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   214c0:	4408      	add	r0, r1
   214c2:	4770      	bx	lr
   214c4:	2304      	movs	r3, #4
   214c6:	e7fa      	b.n	214be <chunk_mem+0xc>

000214c8 <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   214c8:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   214ca:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   214ce:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   214d0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   214d4:	d317      	bcc.n	21506 <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
   214d6:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   214d8:	4299      	cmp	r1, r3
   214da:	d016      	beq.n	2150a <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
   214dc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   214e0:	d320      	bcc.n	21524 <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
   214e2:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   214e4:	3204      	adds	r2, #4
   214e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   214ea:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   214ee:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   214f2:	d319      	bcc.n	21528 <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
   214f4:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
   214f6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   214fa:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   214fc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   21500:	d314      	bcc.n	2152c <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
   21502:	6099      	str	r1, [r3, #8]
   21504:	e00c      	b.n	21520 <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
   21506:	88eb      	ldrh	r3, [r5, #6]
   21508:	e7e6      	b.n	214d8 <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
   2150a:	2301      	movs	r3, #1
   2150c:	fa03 f102 	lsl.w	r1, r3, r2
   21510:	68c3      	ldr	r3, [r0, #12]
   21512:	ea23 0301 	bic.w	r3, r3, r1
   21516:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   21518:	3204      	adds	r2, #4
   2151a:	2300      	movs	r3, #0
   2151c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   21520:	bc30      	pop	{r4, r5}
   21522:	4770      	bx	lr
   21524:	88a9      	ldrh	r1, [r5, #4]
   21526:	e7dd      	b.n	214e4 <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
   21528:	80d3      	strh	r3, [r2, #6]
   2152a:	e7e4      	b.n	214f6 <free_list_remove_bidx+0x2e>
   2152c:	8099      	strh	r1, [r3, #4]
   2152e:	e7f7      	b.n	21520 <free_list_remove_bidx+0x58>

00021530 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   21530:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   21532:	1d13      	adds	r3, r2, #4
   21534:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   21538:	b9d3      	cbnz	r3, 21570 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   2153a:	2301      	movs	r3, #1
   2153c:	fa03 f402 	lsl.w	r4, r3, r2
   21540:	68c3      	ldr	r3, [r0, #12]
   21542:	4323      	orrs	r3, r4
   21544:	60c3      	str	r3, [r0, #12]
		b->next = c;
   21546:	3204      	adds	r2, #4
   21548:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   2154c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   21550:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   21552:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   21556:	d307      	bcc.n	21568 <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
   21558:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   2155a:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   2155c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   21560:	d304      	bcc.n	2156c <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   21562:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   21564:	bc70      	pop	{r4, r5, r6}
   21566:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
   21568:	8099      	strh	r1, [r3, #4]
   2156a:	e7f6      	b.n	2155a <free_list_add_bidx+0x2a>
   2156c:	80d9      	strh	r1, [r3, #6]
   2156e:	e7f9      	b.n	21564 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   21570:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   21574:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   21576:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2157a:	d318      	bcc.n	215ae <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   2157c:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   2157e:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   21582:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   21586:	d314      	bcc.n	215b2 <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   21588:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   2158a:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   2158c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   21590:	d311      	bcc.n	215b6 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   21592:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   21594:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   21598:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   2159a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2159e:	d30c      	bcc.n	215ba <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   215a0:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   215a2:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   215a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   215a8:	d309      	bcc.n	215be <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   215aa:	60a1      	str	r1, [r4, #8]
   215ac:	e7da      	b.n	21564 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   215ae:	88a2      	ldrh	r2, [r4, #4]
   215b0:	e7e5      	b.n	2157e <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   215b2:	80aa      	strh	r2, [r5, #4]
   215b4:	e7e9      	b.n	2158a <free_list_add_bidx+0x5a>
   215b6:	80eb      	strh	r3, [r5, #6]
   215b8:	e7ec      	b.n	21594 <free_list_add_bidx+0x64>
   215ba:	80d1      	strh	r1, [r2, #6]
   215bc:	e7f1      	b.n	215a2 <free_list_add_bidx+0x72>
   215be:	80a1      	strh	r1, [r4, #4]
   215c0:	e7d0      	b.n	21564 <free_list_add_bidx+0x34>

000215c2 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   215c2:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   215c4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   215c8:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   215ca:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   215ce:	d325      	bcc.n	2161c <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
   215d0:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   215d2:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
   215d4:	1a89      	subs	r1, r1, r2
   215d6:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   215da:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   215dc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   215e0:	d31e      	bcc.n	21620 <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
   215e2:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   215e4:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
   215e6:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   215ea:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   215ec:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   215f0:	d318      	bcc.n	21624 <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
   215f2:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   215f4:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   215f6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   215fa:	d315      	bcc.n	21628 <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
   215fc:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
   21600:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   21602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21606:	d312      	bcc.n	2162e <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
   21608:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
   2160a:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   2160e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21612:	d30e      	bcc.n	21632 <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
   21614:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   21618:	bc70      	pop	{r4, r5, r6}
   2161a:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   2161c:	8866      	ldrh	r6, [r4, #2]
   2161e:	e7d8      	b.n	215d2 <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
   21620:	8066      	strh	r6, [r4, #2]
   21622:	e7df      	b.n	215e4 <split_chunks+0x22>
   21624:	8065      	strh	r5, [r4, #2]
   21626:	e7e5      	b.n	215f4 <split_chunks+0x32>
   21628:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   2162c:	e7e8      	b.n	21600 <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
   2162e:	8864      	ldrh	r4, [r4, #2]
   21630:	e7eb      	b.n	2160a <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
   21632:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
   21636:	e7ef      	b.n	21618 <split_chunks+0x56>

00021638 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   21638:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   2163a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   2163e:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   21640:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   21644:	d31c      	bcc.n	21680 <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
   21646:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   21648:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
   2164a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
   2164e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   21652:	d317      	bcc.n	21684 <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
   21654:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   21656:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2165a:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   2165c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   21660:	d312      	bcc.n	21688 <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
   21662:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
   21664:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
   21666:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   2166a:	d30f      	bcc.n	2168c <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
   2166c:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
   2166e:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   21672:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   21676:	d30b      	bcc.n	21690 <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
   21678:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   2167c:	bc70      	pop	{r4, r5, r6}
   2167e:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   21680:	884b      	ldrh	r3, [r1, #2]
   21682:	e7e1      	b.n	21648 <merge_chunks+0x10>
   21684:	886e      	ldrh	r6, [r5, #2]
   21686:	e7e6      	b.n	21656 <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
   21688:	804e      	strh	r6, [r1, #2]
   2168a:	e7eb      	b.n	21664 <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
   2168c:	886c      	ldrh	r4, [r5, #2]
   2168e:	e7ee      	b.n	2166e <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
   21690:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   21694:	e7f2      	b.n	2167c <merge_chunks+0x44>

00021696 <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
   21696:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
   21698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2169c:	d304      	bcc.n	216a8 <mem_to_chunkid+0x12>
   2169e:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   216a0:	1ac9      	subs	r1, r1, r3
   216a2:	1a08      	subs	r0, r1, r0
}
   216a4:	08c0      	lsrs	r0, r0, #3
   216a6:	4770      	bx	lr
   216a8:	2304      	movs	r3, #4
   216aa:	e7f9      	b.n	216a0 <mem_to_chunkid+0xa>

000216ac <free_list_remove>:
{
   216ac:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   216ae:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   216b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   216b4:	d307      	bcc.n	216c6 <free_list_remove+0x1a>
	void *cmem = &buf[c];
   216b6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   216ba:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   216bc:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   216be:	2a01      	cmp	r2, #1
   216c0:	d002      	beq.n	216c8 <free_list_remove+0x1c>
   216c2:	2200      	movs	r2, #0
   216c4:	e000      	b.n	216c8 <free_list_remove+0x1c>
   216c6:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   216c8:	b9a2      	cbnz	r2, 216f4 <free_list_remove+0x48>
	void *cmem = &buf[c];
   216ca:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   216ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   216d2:	d310      	bcc.n	216f6 <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
   216d4:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   216d6:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   216d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   216dc:	d30d      	bcc.n	216fa <free_list_remove+0x4e>
   216de:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   216e0:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   216e2:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   216e6:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   216e8:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   216ec:	f1c2 021f 	rsb	r2, r2, #31
   216f0:	f7ff feea 	bl	214c8 <free_list_remove_bidx>
}
   216f4:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   216f6:	8852      	ldrh	r2, [r2, #2]
   216f8:	e7ed      	b.n	216d6 <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
   216fa:	2304      	movs	r3, #4
   216fc:	e7f0      	b.n	216e0 <free_list_remove+0x34>

000216fe <free_list_add>:
{
   216fe:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   21700:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   21702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21706:	d307      	bcc.n	21718 <free_list_add+0x1a>
	void *cmem = &buf[c];
   21708:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   2170c:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2170e:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   21710:	2a01      	cmp	r2, #1
   21712:	d002      	beq.n	2171a <free_list_add+0x1c>
   21714:	2200      	movs	r2, #0
   21716:	e000      	b.n	2171a <free_list_add+0x1c>
   21718:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   2171a:	b9a2      	cbnz	r2, 21746 <free_list_add+0x48>
	void *cmem = &buf[c];
   2171c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   21720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21724:	d310      	bcc.n	21748 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   21726:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   21728:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   2172a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2172e:	d30d      	bcc.n	2174c <free_list_add+0x4e>
   21730:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21732:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   21734:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   21738:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   2173a:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   2173e:	f1c2 021f 	rsb	r2, r2, #31
   21742:	f7ff fef5 	bl	21530 <free_list_add_bidx>
}
   21746:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   21748:	8852      	ldrh	r2, [r2, #2]
   2174a:	e7ed      	b.n	21728 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   2174c:	2304      	movs	r3, #4
   2174e:	e7f0      	b.n	21732 <free_list_add+0x34>

00021750 <free_chunk>:
{
   21750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21752:	4604      	mov	r4, r0
   21754:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   21756:	00ce      	lsls	r6, r1, #3
   21758:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   2175c:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   2175e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21762:	d31f      	bcc.n	217a4 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
   21764:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
   21766:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
   2176a:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   2176e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21772:	d319      	bcc.n	217a8 <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
   21774:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
   21776:	f013 0f01 	tst.w	r3, #1
   2177a:	d017      	beq.n	217ac <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
   2177c:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   2177e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21782:	d324      	bcc.n	217ce <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
   21784:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   21786:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
   21788:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   2178c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21790:	d31f      	bcc.n	217d2 <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
   21792:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
   21794:	f013 0f01 	tst.w	r3, #1
   21798:	d01d      	beq.n	217d6 <free_chunk+0x86>
	free_list_add(h, c);
   2179a:	4629      	mov	r1, r5
   2179c:	4620      	mov	r0, r4
   2179e:	f7ff ffae 	bl	216fe <free_list_add>
}
   217a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
   217a4:	8879      	ldrh	r1, [r7, #2]
   217a6:	e7de      	b.n	21766 <free_chunk+0x16>
   217a8:	8853      	ldrh	r3, [r2, #2]
   217aa:	e7e4      	b.n	21776 <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
   217ac:	4620      	mov	r0, r4
   217ae:	f7ff ff7d 	bl	216ac <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   217b2:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   217b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   217b8:	d307      	bcc.n	217ca <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
   217ba:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
   217bc:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   217c0:	4629      	mov	r1, r5
   217c2:	4620      	mov	r0, r4
   217c4:	f7ff ff38 	bl	21638 <merge_chunks>
   217c8:	e7d8      	b.n	2177c <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
   217ca:	887a      	ldrh	r2, [r7, #2]
   217cc:	e7f6      	b.n	217bc <free_chunk+0x6c>
   217ce:	5ba1      	ldrh	r1, [r4, r6]
   217d0:	e7d9      	b.n	21786 <free_chunk+0x36>
   217d2:	8853      	ldrh	r3, [r2, #2]
   217d4:	e7de      	b.n	21794 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
   217d6:	4620      	mov	r0, r4
   217d8:	f7ff ff68 	bl	216ac <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   217dc:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   217de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   217e2:	d30c      	bcc.n	217fe <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
   217e4:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   217e6:	462a      	mov	r2, r5
   217e8:	1a69      	subs	r1, r5, r1
   217ea:	4620      	mov	r0, r4
   217ec:	f7ff ff24 	bl	21638 <merge_chunks>
	return big_heap_chunks(h->end_chunk);
   217f0:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   217f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   217f6:	d304      	bcc.n	21802 <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
   217f8:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   217fa:	1aed      	subs	r5, r5, r3
   217fc:	e7cd      	b.n	2179a <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
   217fe:	5ba1      	ldrh	r1, [r4, r6]
   21800:	e7f1      	b.n	217e6 <free_chunk+0x96>
   21802:	5ba3      	ldrh	r3, [r4, r6]
   21804:	e7f9      	b.n	217fa <free_chunk+0xaa>

00021806 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   21806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
   21808:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
   2180a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2180e:	d311      	bcc.n	21834 <alloc_chunk+0x2e>
   21810:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21812:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   21814:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
   21818:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   2181a:	fab3 f383 	clz	r3, r3
   2181e:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   21822:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   21826:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
   2182a:	f1bc 0f00 	cmp.w	ip, #0
   2182e:	d024      	beq.n	2187a <alloc_chunk+0x74>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   21830:	2603      	movs	r6, #3
   21832:	e010      	b.n	21856 <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
   21834:	2304      	movs	r3, #4
   21836:	e7ec      	b.n	21812 <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
   21838:	f8b7 e002 	ldrh.w	lr, [r7, #2]
   2183c:	e015      	b.n	2186a <alloc_chunk+0x64>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
   2183e:	4621      	mov	r1, r4
   21840:	f7ff fe42 	bl	214c8 <free_list_remove_bidx>
				return c;
   21844:	e021      	b.n	2188a <alloc_chunk+0x84>
   21846:	88fc      	ldrh	r4, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
   21848:	1d17      	adds	r7, r2, #4
   2184a:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   2184e:	3e01      	subs	r6, #1
   21850:	d013      	beq.n	2187a <alloc_chunk+0x74>
   21852:	45a4      	cmp	ip, r4
   21854:	d011      	beq.n	2187a <alloc_chunk+0x74>
			chunkid_t c = b->next;
   21856:	1d14      	adds	r4, r2, #4
   21858:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   2185c:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
   21860:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   21864:	d3e8      	bcc.n	21838 <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
   21866:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
   2186a:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
   2186e:	d9e6      	bls.n	2183e <alloc_chunk+0x38>
	if (big_heap(h)) {
   21870:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   21874:	d3e7      	bcc.n	21846 <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
   21876:	68fc      	ldr	r4, [r7, #12]
   21878:	e7e6      	b.n	21848 <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2187a:	68c4      	ldr	r4, [r0, #12]
   2187c:	f1c3 0220 	rsb	r2, r3, #32
   21880:	2301      	movs	r3, #1
   21882:	4093      	lsls	r3, r2
   21884:	425b      	negs	r3, r3

	if (bmask != 0U) {
   21886:	401c      	ands	r4, r3
   21888:	d101      	bne.n	2188e <alloc_chunk+0x88>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2188a:	4620      	mov	r0, r4
   2188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
   2188e:	fa94 f2a4 	rbit	r2, r4
   21892:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   21896:	1d13      	adds	r3, r2, #4
   21898:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2189c:	4621      	mov	r1, r4
   2189e:	f7ff fe13 	bl	214c8 <free_list_remove_bidx>
		return c;
   218a2:	e7f2      	b.n	2188a <alloc_chunk+0x84>

000218a4 <sys_heap_free>:
	if (mem == NULL) {
   218a4:	b1c1      	cbz	r1, 218d8 <sys_heap_free+0x34>
{
   218a6:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   218a8:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   218aa:	4620      	mov	r0, r4
   218ac:	f7ff fef3 	bl	21696 <mem_to_chunkid>
   218b0:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   218b2:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   218b6:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   218b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   218bc:	d307      	bcc.n	218ce <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   218be:	685a      	ldr	r2, [r3, #4]
   218c0:	f022 0201 	bic.w	r2, r2, #1
   218c4:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
   218c6:	4620      	mov	r0, r4
   218c8:	f7ff ff42 	bl	21750 <free_chunk>
}
   218cc:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   218ce:	885a      	ldrh	r2, [r3, #2]
   218d0:	f022 0201 	bic.w	r2, r2, #1
   218d4:	805a      	strh	r2, [r3, #2]
   218d6:	e7f6      	b.n	218c6 <sys_heap_free+0x22>
   218d8:	4770      	bx	lr

000218da <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   218da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   218dc:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   218de:	2900      	cmp	r1, #0
   218e0:	d03c      	beq.n	2195c <sys_heap_alloc+0x82>
   218e2:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   218e4:	68aa      	ldr	r2, [r5, #8]
   218e6:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   218ea:	d939      	bls.n	21960 <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
   218ec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   218f0:	d320      	bcc.n	21934 <sys_heap_alloc+0x5a>
   218f2:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   218f4:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   218f6:	3407      	adds	r4, #7
   218f8:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   218fa:	4621      	mov	r1, r4
   218fc:	4628      	mov	r0, r5
   218fe:	f7ff ff82 	bl	21806 <alloc_chunk>
	if (c == 0U) {
   21902:	4607      	mov	r7, r0
   21904:	b370      	cbz	r0, 21964 <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
   21906:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   2190a:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   2190c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21910:	d312      	bcc.n	21938 <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
   21912:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   21914:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   21918:	d310      	bcc.n	2193c <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
   2191a:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   2191c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21920:	d317      	bcc.n	21952 <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21922:	6873      	ldr	r3, [r6, #4]
   21924:	f043 0301 	orr.w	r3, r3, #1
   21928:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
   2192a:	4639      	mov	r1, r7
   2192c:	4628      	mov	r0, r5
   2192e:	f7ff fdc0 	bl	214b2 <chunk_mem>
}
   21932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
   21934:	2404      	movs	r4, #4
   21936:	e7dd      	b.n	218f4 <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
   21938:	8873      	ldrh	r3, [r6, #2]
   2193a:	e7eb      	b.n	21914 <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
   2193c:	443c      	add	r4, r7
   2193e:	4622      	mov	r2, r4
   21940:	4639      	mov	r1, r7
   21942:	4628      	mov	r0, r5
   21944:	f7ff fe3d 	bl	215c2 <split_chunks>
		free_list_add(h, c + chunk_sz);
   21948:	4621      	mov	r1, r4
   2194a:	4628      	mov	r0, r5
   2194c:	f7ff fed7 	bl	216fe <free_list_add>
   21950:	e7e3      	b.n	2191a <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21952:	8873      	ldrh	r3, [r6, #2]
   21954:	f043 0301 	orr.w	r3, r3, #1
   21958:	8073      	strh	r3, [r6, #2]
   2195a:	e7e6      	b.n	2192a <sys_heap_alloc+0x50>
		return NULL;
   2195c:	2000      	movs	r0, #0
   2195e:	e7e8      	b.n	21932 <sys_heap_alloc+0x58>
   21960:	2000      	movs	r0, #0
   21962:	e7e6      	b.n	21932 <sys_heap_alloc+0x58>
		return NULL;
   21964:	2000      	movs	r0, #0
   21966:	e7e4      	b.n	21932 <sys_heap_alloc+0x58>

00021968 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   21968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2196c:	460d      	mov	r5, r1
   2196e:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   21970:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   21972:	424b      	negs	r3, r1
   21974:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   21978:	ea31 0303 	bics.w	r3, r1, r3
   2197c:	d04e      	beq.n	21a1c <sys_heap_aligned_alloc+0xb4>
		align -= rew;
   2197e:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
   21982:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   21984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21988:	d346      	bcc.n	21a18 <sys_heap_aligned_alloc+0xb0>
   2198a:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
   2198c:	4598      	cmp	r8, r3
   2198e:	d200      	bcs.n	21992 <sys_heap_aligned_alloc+0x2a>
   21990:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   21992:	2c00      	cmp	r4, #0
   21994:	d070      	beq.n	21a78 <sys_heap_aligned_alloc+0x110>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   21996:	68b2      	ldr	r2, [r6, #8]
   21998:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   2199c:	d96e      	bls.n	21a7c <sys_heap_aligned_alloc+0x114>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   2199e:	1929      	adds	r1, r5, r4
   219a0:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
   219a2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   219a6:	d34a      	bcc.n	21a3e <sys_heap_aligned_alloc+0xd6>
   219a8:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   219aa:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   219ac:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   219ae:	08c9      	lsrs	r1, r1, #3
   219b0:	4630      	mov	r0, r6
   219b2:	f7ff ff28 	bl	21806 <alloc_chunk>

	if (c0 == 0) {
   219b6:	4607      	mov	r7, r0
   219b8:	2800      	cmp	r0, #0
   219ba:	d061      	beq.n	21a80 <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   219bc:	4601      	mov	r1, r0
   219be:	4630      	mov	r0, r6
   219c0:	f7ff fd77 	bl	214b2 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   219c4:	4440      	add	r0, r8
   219c6:	4428      	add	r0, r5
   219c8:	3801      	subs	r0, #1
   219ca:	426d      	negs	r5, r5
   219cc:	4005      	ands	r5, r0
   219ce:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   219d2:	442c      	add	r4, r5
   219d4:	3407      	adds	r4, #7
   219d6:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   219da:	4629      	mov	r1, r5
   219dc:	4630      	mov	r0, r6
   219de:	f7ff fe5a 	bl	21696 <mem_to_chunkid>
   219e2:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   219e4:	1ba4      	subs	r4, r4, r6
   219e6:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   219e8:	4287      	cmp	r7, r0
   219ea:	d32a      	bcc.n	21a42 <sys_heap_aligned_alloc+0xda>
	void *cmem = &buf[c];
   219ec:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
   219f0:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   219f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   219f6:	d32e      	bcc.n	21a56 <sys_heap_aligned_alloc+0xee>
		return ((uint32_t *)cmem)[f];
   219f8:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
   219fa:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   219fe:	429c      	cmp	r4, r3
   21a00:	d32b      	bcc.n	21a5a <sys_heap_aligned_alloc+0xf2>
	return big_heap_chunks(h->end_chunk);
   21a02:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   21a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21a08:	d331      	bcc.n	21a6e <sys_heap_aligned_alloc+0x106>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21a0a:	687b      	ldr	r3, [r7, #4]
   21a0c:	f043 0301 	orr.w	r3, r3, #1
   21a10:	607b      	str	r3, [r7, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   21a12:	4628      	mov	r0, r5
   21a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
   21a18:	2304      	movs	r3, #4
   21a1a:	e7b7      	b.n	2198c <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
   21a1c:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   21a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21a22:	d305      	bcc.n	21a30 <sys_heap_aligned_alloc+0xc8>
   21a24:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
   21a26:	429d      	cmp	r5, r3
   21a28:	d904      	bls.n	21a34 <sys_heap_aligned_alloc+0xcc>
		rew = 0;
   21a2a:	f04f 0800 	mov.w	r8, #0
   21a2e:	e7b0      	b.n	21992 <sys_heap_aligned_alloc+0x2a>
   21a30:	2304      	movs	r3, #4
   21a32:	e7f8      	b.n	21a26 <sys_heap_aligned_alloc+0xbe>
			return sys_heap_alloc(heap, bytes);
   21a34:	4621      	mov	r1, r4
   21a36:	f7ff ff50 	bl	218da <sys_heap_alloc>
   21a3a:	4605      	mov	r5, r0
   21a3c:	e7e9      	b.n	21a12 <sys_heap_aligned_alloc+0xaa>
   21a3e:	2304      	movs	r3, #4
   21a40:	e7b3      	b.n	219aa <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
   21a42:	4602      	mov	r2, r0
   21a44:	4639      	mov	r1, r7
   21a46:	4630      	mov	r0, r6
   21a48:	f7ff fdbb 	bl	215c2 <split_chunks>
		free_list_add(h, c0);
   21a4c:	4639      	mov	r1, r7
   21a4e:	4630      	mov	r0, r6
   21a50:	f7ff fe55 	bl	216fe <free_list_add>
   21a54:	e7ca      	b.n	219ec <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
   21a56:	887b      	ldrh	r3, [r7, #2]
   21a58:	e7cf      	b.n	219fa <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
   21a5a:	4622      	mov	r2, r4
   21a5c:	4641      	mov	r1, r8
   21a5e:	4630      	mov	r0, r6
   21a60:	f7ff fdaf 	bl	215c2 <split_chunks>
		free_list_add(h, c_end);
   21a64:	4621      	mov	r1, r4
   21a66:	4630      	mov	r0, r6
   21a68:	f7ff fe49 	bl	216fe <free_list_add>
   21a6c:	e7c9      	b.n	21a02 <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21a6e:	887b      	ldrh	r3, [r7, #2]
   21a70:	f043 0301 	orr.w	r3, r3, #1
   21a74:	807b      	strh	r3, [r7, #2]
   21a76:	e7cc      	b.n	21a12 <sys_heap_aligned_alloc+0xaa>
		return NULL;
   21a78:	2500      	movs	r5, #0
   21a7a:	e7ca      	b.n	21a12 <sys_heap_aligned_alloc+0xaa>
   21a7c:	2500      	movs	r5, #0
   21a7e:	e7c8      	b.n	21a12 <sys_heap_aligned_alloc+0xaa>
		return NULL;
   21a80:	2500      	movs	r5, #0
   21a82:	e7c6      	b.n	21a12 <sys_heap_aligned_alloc+0xaa>

00021a84 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   21a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21a86:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   21a88:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   21a8c:	d32a      	bcc.n	21ae4 <sys_heap_init+0x60>
   21a8e:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   21a90:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21a92:	1dc8      	adds	r0, r1, #7
   21a94:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21a98:	440d      	add	r5, r1
   21a9a:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   21a9e:	1a2d      	subs	r5, r5, r0
   21aa0:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   21aa2:	4606      	mov	r6, r0
	heap->heap = h;
   21aa4:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   21aa6:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   21aa8:	2300      	movs	r3, #0
   21aaa:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   21aac:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   21ab0:	d31a      	bcc.n	21ae8 <sys_heap_init+0x64>
   21ab2:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21ab4:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   21ab6:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   21aba:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   21abc:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   21ac0:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   21ac4:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   21ac8:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21aca:	f103 0e07 	add.w	lr, r3, #7
   21ace:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   21ad2:	2300      	movs	r3, #0
   21ad4:	4563      	cmp	r3, ip
   21ad6:	da09      	bge.n	21aec <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   21ad8:	1d1a      	adds	r2, r3, #4
   21ada:	2400      	movs	r4, #0
   21adc:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   21ae0:	3301      	adds	r3, #1
   21ae2:	e7f7      	b.n	21ad4 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   21ae4:	2504      	movs	r5, #4
   21ae6:	e7d3      	b.n	21a90 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   21ae8:	2304      	movs	r3, #4
   21aea:	e7e3      	b.n	21ab4 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21aec:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   21aee:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   21af2:	d333      	bcc.n	21b5c <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   21af4:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   21af6:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   21afa:	d331      	bcc.n	21b60 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   21afc:	2300      	movs	r3, #0
   21afe:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   21b00:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   21b04:	d32f      	bcc.n	21b66 <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21b06:	6843      	ldr	r3, [r0, #4]
   21b08:	f043 0301 	orr.w	r3, r3, #1
   21b0c:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   21b0e:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21b10:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   21b12:	f02e 0307 	bic.w	r3, lr, #7
   21b16:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   21b18:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   21b1c:	d328      	bcc.n	21b70 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   21b1e:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   21b20:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   21b22:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   21b26:	d325      	bcc.n	21b74 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   21b28:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   21b2a:	f025 0307 	bic.w	r3, r5, #7
   21b2e:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   21b30:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   21b32:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   21b36:	d31f      	bcc.n	21b78 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   21b38:	2400      	movs	r4, #0
   21b3a:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   21b3c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   21b3e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   21b42:	d31c      	bcc.n	21b7e <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   21b44:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   21b46:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   21b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21b4c:	d319      	bcc.n	21b82 <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21b4e:	686b      	ldr	r3, [r5, #4]
   21b50:	f043 0301 	orr.w	r3, r3, #1
   21b54:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   21b56:	f7ff fdd2 	bl	216fe <free_list_add>
}
   21b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   21b5c:	8043      	strh	r3, [r0, #2]
   21b5e:	e7ca      	b.n	21af6 <sys_heap_init+0x72>
   21b60:	2300      	movs	r3, #0
   21b62:	8003      	strh	r3, [r0, #0]
   21b64:	e7cc      	b.n	21b00 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21b66:	8843      	ldrh	r3, [r0, #2]
   21b68:	f043 0301 	orr.w	r3, r3, #1
   21b6c:	8043      	strh	r3, [r0, #2]
   21b6e:	e7ce      	b.n	21b0e <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   21b70:	8066      	strh	r6, [r4, #2]
   21b72:	e7d5      	b.n	21b20 <sys_heap_init+0x9c>
   21b74:	52c1      	strh	r1, [r0, r3]
   21b76:	e7d8      	b.n	21b2a <sys_heap_init+0xa6>
   21b78:	2400      	movs	r4, #0
   21b7a:	806c      	strh	r4, [r5, #2]
   21b7c:	e7de      	b.n	21b3c <sys_heap_init+0xb8>
   21b7e:	52c2      	strh	r2, [r0, r3]
   21b80:	e7e1      	b.n	21b46 <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21b82:	886b      	ldrh	r3, [r5, #2]
   21b84:	f043 0301 	orr.w	r3, r3, #1
   21b88:	806b      	strh	r3, [r5, #2]
   21b8a:	e7e4      	b.n	21b56 <sys_heap_init+0xd2>

00021b8c <extract_decimal>:
{
   21b8c:	b410      	push	{r4}
   21b8e:	4604      	mov	r4, r0
	const char *sp = *str;
   21b90:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   21b92:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   21b94:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   21b96:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   21b9a:	2909      	cmp	r1, #9
   21b9c:	d806      	bhi.n	21bac <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   21b9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21ba2:	3201      	adds	r2, #1
   21ba4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   21ba8:	3830      	subs	r0, #48	; 0x30
   21baa:	e7f3      	b.n	21b94 <extract_decimal+0x8>
	*str = sp;
   21bac:	6022      	str	r2, [r4, #0]
}
   21bae:	bc10      	pop	{r4}
   21bb0:	4770      	bx	lr

00021bb2 <encode_uint>:
{
   21bb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21bb6:	b083      	sub	sp, #12
   21bb8:	4604      	mov	r4, r0
   21bba:	460d      	mov	r5, r1
   21bbc:	9201      	str	r2, [sp, #4]
   21bbe:	469a      	mov	sl, r3
   21bc0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   21bc4:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   21bc6:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   21bca:	2b6f      	cmp	r3, #111	; 0x6f
   21bcc:	d00f      	beq.n	21bee <encode_uint+0x3c>
   21bce:	d906      	bls.n	21bde <encode_uint+0x2c>
   21bd0:	2b70      	cmp	r3, #112	; 0x70
   21bd2:	d00f      	beq.n	21bf4 <encode_uint+0x42>
   21bd4:	2b78      	cmp	r3, #120	; 0x78
   21bd6:	d110      	bne.n	21bfa <encode_uint+0x48>
		return 16;
   21bd8:	f04f 0910 	mov.w	r9, #16
   21bdc:	e026      	b.n	21c2c <encode_uint+0x7a>
	switch (specifier) {
   21bde:	2b58      	cmp	r3, #88	; 0x58
   21be0:	d002      	beq.n	21be8 <encode_uint+0x36>
   21be2:	f04f 090a 	mov.w	r9, #10
   21be6:	e021      	b.n	21c2c <encode_uint+0x7a>
		return 16;
   21be8:	f04f 0910 	mov.w	r9, #16
   21bec:	e01e      	b.n	21c2c <encode_uint+0x7a>
		return 8;
   21bee:	f04f 0908 	mov.w	r9, #8
   21bf2:	e01b      	b.n	21c2c <encode_uint+0x7a>
		return 16;
   21bf4:	f04f 0910 	mov.w	r9, #16
   21bf8:	e018      	b.n	21c2c <encode_uint+0x7a>
	switch (specifier) {
   21bfa:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   21bfe:	e015      	b.n	21c2c <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21c00:	f1bb 0f19 	cmp.w	fp, #25
   21c04:	d820      	bhi.n	21c48 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   21c06:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21c08:	3237      	adds	r2, #55	; 0x37
   21c0a:	b2d2      	uxtb	r2, r2
   21c0c:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   21c10:	4632      	mov	r2, r6
   21c12:	463b      	mov	r3, r7
   21c14:	4620      	mov	r0, r4
   21c16:	4629      	mov	r1, r5
   21c18:	f7df fa72 	bl	1100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   21c1c:	42bd      	cmp	r5, r7
   21c1e:	bf08      	it	eq
   21c20:	42b4      	cmpeq	r4, r6
   21c22:	d315      	bcc.n	21c50 <encode_uint+0x9e>
   21c24:	45d0      	cmp	r8, sl
   21c26:	d913      	bls.n	21c50 <encode_uint+0x9e>
		value /= radix;
   21c28:	4604      	mov	r4, r0
   21c2a:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   21c2c:	464e      	mov	r6, r9
   21c2e:	2700      	movs	r7, #0
   21c30:	464a      	mov	r2, r9
   21c32:	463b      	mov	r3, r7
   21c34:	4620      	mov	r0, r4
   21c36:	4629      	mov	r1, r5
   21c38:	f7df fa62 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21c3c:	2a09      	cmp	r2, #9
   21c3e:	d8df      	bhi.n	21c00 <encode_uint+0x4e>
   21c40:	b2d2      	uxtb	r2, r2
   21c42:	3230      	adds	r2, #48	; 0x30
   21c44:	b2d2      	uxtb	r2, r2
   21c46:	e7e1      	b.n	21c0c <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   21c48:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21c4a:	3257      	adds	r2, #87	; 0x57
   21c4c:	b2d2      	uxtb	r2, r2
   21c4e:	e7dd      	b.n	21c0c <encode_uint+0x5a>
	if (conv->flag_hash) {
   21c50:	9b01      	ldr	r3, [sp, #4]
   21c52:	781b      	ldrb	r3, [r3, #0]
   21c54:	f013 0f20 	tst.w	r3, #32
   21c58:	d005      	beq.n	21c66 <encode_uint+0xb4>
		if (radix == 8) {
   21c5a:	f1b9 0f08 	cmp.w	r9, #8
   21c5e:	d006      	beq.n	21c6e <encode_uint+0xbc>
		} else if (radix == 16) {
   21c60:	f1b9 0f10 	cmp.w	r9, #16
   21c64:	d009      	beq.n	21c7a <encode_uint+0xc8>
}
   21c66:	4640      	mov	r0, r8
   21c68:	b003      	add	sp, #12
   21c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   21c6e:	9a01      	ldr	r2, [sp, #4]
   21c70:	7893      	ldrb	r3, [r2, #2]
   21c72:	f043 0308 	orr.w	r3, r3, #8
   21c76:	7093      	strb	r3, [r2, #2]
   21c78:	e7f5      	b.n	21c66 <encode_uint+0xb4>
			conv->altform_0c = true;
   21c7a:	9a01      	ldr	r2, [sp, #4]
   21c7c:	7893      	ldrb	r3, [r2, #2]
   21c7e:	f043 0310 	orr.w	r3, r3, #16
   21c82:	7093      	strb	r3, [r2, #2]
   21c84:	e7ef      	b.n	21c66 <encode_uint+0xb4>

00021c86 <outs>:
{
   21c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c8a:	4607      	mov	r7, r0
   21c8c:	460e      	mov	r6, r1
   21c8e:	4614      	mov	r4, r2
   21c90:	4698      	mov	r8, r3
	size_t count = 0;
   21c92:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   21c94:	e006      	b.n	21ca4 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   21c96:	4631      	mov	r1, r6
   21c98:	f814 0b01 	ldrb.w	r0, [r4], #1
   21c9c:	47b8      	blx	r7
		if (rc < 0) {
   21c9e:	2800      	cmp	r0, #0
   21ca0:	db09      	blt.n	21cb6 <outs+0x30>
		++count;
   21ca2:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   21ca4:	4544      	cmp	r4, r8
   21ca6:	d3f6      	bcc.n	21c96 <outs+0x10>
   21ca8:	f1b8 0f00 	cmp.w	r8, #0
   21cac:	d102      	bne.n	21cb4 <outs+0x2e>
   21cae:	7823      	ldrb	r3, [r4, #0]
   21cb0:	2b00      	cmp	r3, #0
   21cb2:	d1f0      	bne.n	21c96 <outs+0x10>
	return (int)count;
   21cb4:	4628      	mov	r0, r5
}
   21cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021cba <get_rewind_value>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
}

static uint32_t get_rewind_value(uint32_t buf_size, uint32_t threshold)
{
	return buf_size * (threshold / buf_size);
   21cba:	fbb1 f1f0 	udiv	r1, r1, r0
}
   21cbe:	fb00 f001 	mul.w	r0, r0, r1
   21cc2:	4770      	bx	lr

00021cc4 <mod>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   21cc4:	6983      	ldr	r3, [r0, #24]
   21cc6:	b113      	cbz	r3, 21cce <mod+0xa>
   21cc8:	ea03 0001 	and.w	r0, r3, r1
   21ccc:	4770      	bx	lr
   21cce:	6900      	ldr	r0, [r0, #16]
   21cd0:	fbb1 f3f0 	udiv	r3, r1, r0
   21cd4:	fb00 1013 	mls	r0, r0, r3, r1
}
   21cd8:	4770      	bx	lr

00021cda <ring_buf_get_rewind_threshold>:
}
   21cda:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   21cde:	4770      	bx	lr

00021ce0 <ring_buf_is_empty>:

int ring_buf_is_empty(struct ring_buf *buf)
{
   21ce0:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
   21ce2:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
   21ce4:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
   21ce6:	42ac      	cmp	r4, r5
   21ce8:	d304      	bcc.n	21cf4 <ring_buf_is_empty+0x14>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
   21cea:	42ac      	cmp	r4, r5
   21cec:	bf14      	ite	ne
   21cee:	2000      	movne	r0, #0
   21cf0:	2001      	moveq	r0, #1
   21cf2:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
   21cf4:	6906      	ldr	r6, [r0, #16]
   21cf6:	f7ff fff0 	bl	21cda <ring_buf_get_rewind_threshold>
   21cfa:	4601      	mov	r1, r0
   21cfc:	4630      	mov	r0, r6
   21cfe:	f7ff ffdc 	bl	21cba <get_rewind_value>
   21d02:	4404      	add	r4, r0
   21d04:	e7f1      	b.n	21cea <ring_buf_is_empty+0xa>

00021d06 <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   21d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d0a:	4604      	mov	r4, r0
   21d0c:	460e      	mov	r6, r1
   21d0e:	4617      	mov	r7, r2
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   21d10:	f8d0 8008 	ldr.w	r8, [r0, #8]
   21d14:	4641      	mov	r1, r8
   21d16:	f7ff ffd5 	bl	21cc4 <mod>
   21d1a:	4601      	mov	r1, r0
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   21d1c:	6825      	ldr	r5, [r4, #0]
   21d1e:	6920      	ldr	r0, [r4, #16]
   21d20:	4405      	add	r5, r0
   21d22:	eba5 0208 	sub.w	r2, r5, r8
	trail_size = buf->size - tmp_trail_mod;
   21d26:	1a40      	subs	r0, r0, r1

	/* Limit requested size to available size. */
	size = MIN(size, space);
   21d28:	42ba      	cmp	r2, r7
   21d2a:	bf28      	it	cs
   21d2c:	463a      	movcs	r2, r7

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   21d2e:	4290      	cmp	r0, r2
   21d30:	bf28      	it	cs
   21d32:	4610      	movcs	r0, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
   21d34:	6963      	ldr	r3, [r4, #20]
   21d36:	4419      	add	r1, r3
   21d38:	6031      	str	r1, [r6, #0]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   21d3a:	68a3      	ldr	r3, [r4, #8]
   21d3c:	4403      	add	r3, r0
	buf->misc.byte_mode.tmp_tail =
   21d3e:	60a3      	str	r3, [r4, #8]

	return allocated;
}
   21d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021d44 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   21d44:	b570      	push	{r4, r5, r6, lr}
   21d46:	4604      	mov	r4, r0
   21d48:	460d      	mov	r5, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
   21d4a:	f7ff ffc6 	bl	21cda <ring_buf_get_rewind_threshold>
   21d4e:	4601      	mov	r1, r0

	if ((buf->tail + size) > (buf->head + buf->size)) {
   21d50:	6866      	ldr	r6, [r4, #4]
   21d52:	1972      	adds	r2, r6, r5
   21d54:	6823      	ldr	r3, [r4, #0]
   21d56:	6920      	ldr	r0, [r4, #16]
   21d58:	4403      	add	r3, r0
   21d5a:	429a      	cmp	r2, r3
   21d5c:	d80b      	bhi.n	21d76 <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
   21d5e:	428e      	cmp	r6, r1
   21d60:	d907      	bls.n	21d72 <ring_buf_put_finish+0x2e>
		rew = get_rewind_value(buf->size, threshold);
   21d62:	f7ff ffaa 	bl	21cba <get_rewind_value>
	} else {
		rew = 0;
	}

	buf->tail += (size - rew);
   21d66:	1a2d      	subs	r5, r5, r0
   21d68:	442e      	add	r6, r5
   21d6a:	6066      	str	r6, [r4, #4]
	buf->misc.byte_mode.tmp_tail = buf->tail;
   21d6c:	60a6      	str	r6, [r4, #8]

	return 0;
   21d6e:	2000      	movs	r0, #0
}
   21d70:	bd70      	pop	{r4, r5, r6, pc}
		rew = 0;
   21d72:	2000      	movs	r0, #0
   21d74:	e7f7      	b.n	21d66 <ring_buf_put_finish+0x22>
		return -EINVAL;
   21d76:	f06f 0015 	mvn.w	r0, #21
   21d7a:	e7f9      	b.n	21d70 <ring_buf_put_finish+0x2c>

00021d7c <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   21d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d80:	b082      	sub	sp, #8
   21d82:	4680      	mov	r8, r0
   21d84:	460e      	mov	r6, r1
   21d86:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   21d88:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   21d8a:	462a      	mov	r2, r5
   21d8c:	a901      	add	r1, sp, #4
   21d8e:	4640      	mov	r0, r8
   21d90:	f7ff ffb9 	bl	21d06 <ring_buf_put_claim>
   21d94:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   21d96:	4602      	mov	r2, r0
   21d98:	4631      	mov	r1, r6
   21d9a:	9801      	ldr	r0, [sp, #4]
   21d9c:	f000 fe47 	bl	22a2e <memcpy>
		total_size += partial_size;
   21da0:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
   21da2:	4426      	add	r6, r4
	} while (size && partial_size);
   21da4:	1b2d      	subs	r5, r5, r4
   21da6:	d001      	beq.n	21dac <ring_buf_put+0x30>
   21da8:	2c00      	cmp	r4, #0
   21daa:	d1ee      	bne.n	21d8a <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
   21dac:	4639      	mov	r1, r7
   21dae:	4640      	mov	r0, r8
   21db0:	f7ff ffc8 	bl	21d44 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   21db4:	4638      	mov	r0, r7
   21db6:	b002      	add	sp, #8
   21db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021dbc <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   21dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21dc0:	4604      	mov	r4, r0
   21dc2:	460e      	mov	r6, r1
   21dc4:	4617      	mov	r7, r2
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;
   21dc6:	6845      	ldr	r5, [r0, #4]

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   21dc8:	68c3      	ldr	r3, [r0, #12]
   21dca:	42ab      	cmp	r3, r5
   21dcc:	d818      	bhi.n	21e00 <ring_buf_get_claim+0x44>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   21dce:	f8d4 800c 	ldr.w	r8, [r4, #12]
   21dd2:	4641      	mov	r1, r8
   21dd4:	4620      	mov	r0, r4
   21dd6:	f7ff ff75 	bl	21cc4 <mod>
   21dda:	4601      	mov	r1, r0
	space = tail - buf->misc.byte_mode.tmp_head;
   21ddc:	eba5 0508 	sub.w	r5, r5, r8
	trail_size = buf->size - tmp_head_mod;
   21de0:	6923      	ldr	r3, [r4, #16]
   21de2:	1a18      	subs	r0, r3, r0

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   21de4:	42bd      	cmp	r5, r7
   21de6:	bf28      	it	cs
   21de8:	463d      	movcs	r5, r7

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   21dea:	42a8      	cmp	r0, r5
   21dec:	bf28      	it	cs
   21dee:	4628      	movcs	r0, r5

	*data = &buf->buf.buf8[tmp_head_mod];
   21df0:	6963      	ldr	r3, [r4, #20]
   21df2:	4419      	add	r1, r3
   21df4:	6031      	str	r1, [r6, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   21df6:	68e3      	ldr	r3, [r4, #12]
   21df8:	4403      	add	r3, r0
   21dfa:	60e3      	str	r3, [r4, #12]

	return granted_size;
}
   21dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tail += get_rewind_value(buf->size,
   21e00:	f8d0 8010 	ldr.w	r8, [r0, #16]
   21e04:	f7ff ff69 	bl	21cda <ring_buf_get_rewind_threshold>
   21e08:	4601      	mov	r1, r0
   21e0a:	4640      	mov	r0, r8
   21e0c:	f7ff ff55 	bl	21cba <get_rewind_value>
   21e10:	4405      	add	r5, r0
   21e12:	e7dc      	b.n	21dce <ring_buf_get_claim+0x12>

00021e14 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   21e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e16:	4604      	mov	r4, r0
   21e18:	460d      	mov	r5, r1
	uint32_t tail = buf->tail;
   21e1a:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   21e1c:	68c3      	ldr	r3, [r0, #12]
   21e1e:	42b3      	cmp	r3, r6
   21e20:	d80a      	bhi.n	21e38 <ring_buf_get_finish+0x24>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
				       ring_buf_get_rewind_threshold());
		tail += rew;
	} else {
		rew = 0;
   21e22:	2000      	movs	r0, #0
	}

	if ((buf->head + size) > tail) {
   21e24:	6823      	ldr	r3, [r4, #0]
   21e26:	195a      	adds	r2, r3, r5
   21e28:	42b2      	cmp	r2, r6
   21e2a:	d80e      	bhi.n	21e4a <ring_buf_get_finish+0x36>
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
   21e2c:	1a2d      	subs	r5, r5, r0
   21e2e:	442b      	add	r3, r5
   21e30:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   21e32:	60e3      	str	r3, [r4, #12]

	return 0;
   21e34:	2000      	movs	r0, #0
}
   21e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = get_rewind_value(buf->size,
   21e38:	6907      	ldr	r7, [r0, #16]
   21e3a:	f7ff ff4e 	bl	21cda <ring_buf_get_rewind_threshold>
   21e3e:	4601      	mov	r1, r0
   21e40:	4638      	mov	r0, r7
   21e42:	f7ff ff3a 	bl	21cba <get_rewind_value>
		tail += rew;
   21e46:	4406      	add	r6, r0
   21e48:	e7ec      	b.n	21e24 <ring_buf_get_finish+0x10>
		return -EINVAL;
   21e4a:	f06f 0015 	mvn.w	r0, #21
   21e4e:	e7f2      	b.n	21e36 <ring_buf_get_finish+0x22>

00021e50 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   21e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21e54:	b082      	sub	sp, #8
   21e56:	4680      	mov	r8, r0
   21e58:	460e      	mov	r6, r1
   21e5a:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   21e5c:	2700      	movs	r7, #0
   21e5e:	e009      	b.n	21e74 <ring_buf_get+0x24>
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
   21e60:	4602      	mov	r2, r0
   21e62:	9901      	ldr	r1, [sp, #4]
   21e64:	4630      	mov	r0, r6
   21e66:	f000 fde2 	bl	22a2e <memcpy>
			data += partial_size;
   21e6a:	4426      	add	r6, r4
		}
		total_size += partial_size;
   21e6c:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
   21e6e:	1b2d      	subs	r5, r5, r4
   21e70:	d009      	beq.n	21e86 <ring_buf_get+0x36>
   21e72:	b144      	cbz	r4, 21e86 <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
   21e74:	462a      	mov	r2, r5
   21e76:	a901      	add	r1, sp, #4
   21e78:	4640      	mov	r0, r8
   21e7a:	f7ff ff9f 	bl	21dbc <ring_buf_get_claim>
   21e7e:	4604      	mov	r4, r0
		if (data) {
   21e80:	2e00      	cmp	r6, #0
   21e82:	d1ed      	bne.n	21e60 <ring_buf_get+0x10>
   21e84:	e7f2      	b.n	21e6c <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
   21e86:	4639      	mov	r1, r7
   21e88:	4640      	mov	r0, r8
   21e8a:	f7ff ffc3 	bl	21e14 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   21e8e:	4638      	mov	r0, r7
   21e90:	b002      	add	sp, #8
   21e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021e96 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   21e96:	4770      	bx	lr

00021e98 <usb_get_status>:
	uint8_t *data = *data_buf;
   21e98:	6813      	ldr	r3, [r2, #0]
	data[1] = 0U;
   21e9a:	2200      	movs	r2, #0
   21e9c:	705a      	strb	r2, [r3, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   21e9e:	2001      	movs	r0, #1
   21ea0:	7018      	strb	r0, [r3, #0]
	*len = 2;
   21ea2:	2302      	movs	r3, #2
   21ea4:	600b      	str	r3, [r1, #0]
}
   21ea6:	4770      	bx	lr

00021ea8 <usb_vbus_set>:
}
   21ea8:	2000      	movs	r0, #0
   21eaa:	4770      	bx	lr

00021eac <reset_endpoint>:
{
   21eac:	b510      	push	{r4, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   21eae:	7884      	ldrb	r4, [r0, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   21eb0:	4620      	mov	r0, r4
   21eb2:	f7f0 fcc1 	bl	12838 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
   21eb6:	4620      	mov	r0, r4
   21eb8:	f7f6 fe86 	bl	18bc8 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   21ebc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   21ec0:	d002      	beq.n	21ec8 <reset_endpoint+0x1c>
	} else if (ret) {
   21ec2:	b918      	cbnz	r0, 21ecc <reset_endpoint+0x20>
	return true;
   21ec4:	2001      	movs	r0, #1
}
   21ec6:	bd10      	pop	{r4, pc}
	return true;
   21ec8:	2001      	movs	r0, #1
   21eca:	e7fc      	b.n	21ec6 <reset_endpoint+0x1a>
		return false;
   21ecc:	2000      	movs	r0, #0
   21ece:	e7fa      	b.n	21ec6 <reset_endpoint+0x1a>

00021ed0 <usb_eps_reconfigure>:
{
   21ed0:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
   21ed2:	4291      	cmp	r1, r2
   21ed4:	d002      	beq.n	21edc <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
   21ed6:	f7ff ffe9 	bl	21eac <reset_endpoint>
}
   21eda:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
   21edc:	f7ef ff5e 	bl	11d9c <set_endpoint>
   21ee0:	e7fb      	b.n	21eda <usb_eps_reconfigure+0xa>

00021ee2 <usb_handle_std_interface_req>:
{
   21ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ee4:	4604      	mov	r4, r0
   21ee6:	460e      	mov	r6, r1
   21ee8:	4615      	mov	r5, r2
	uint8_t *data = *data_buf;
   21eea:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
   21eec:	f7ef fdfc 	bl	11ae8 <is_device_configured>
   21ef0:	b900      	cbnz	r0, 21ef4 <usb_handle_std_interface_req+0x12>
}
   21ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   21ef4:	7920      	ldrb	r0, [r4, #4]
   21ef6:	f7ef fe01 	bl	11afc <is_interface_valid>
	if (!is_device_configured() ||
   21efa:	2800      	cmp	r0, #0
   21efc:	d0f9      	beq.n	21ef2 <usb_handle_std_interface_req+0x10>
	if (usb_reqtype_is_to_host(setup)) {
   21efe:	f994 3000 	ldrsb.w	r3, [r4]
   21f02:	2b00      	cmp	r3, #0
   21f04:	db04      	blt.n	21f10 <usb_handle_std_interface_req+0x2e>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   21f06:	7863      	ldrb	r3, [r4, #1]
   21f08:	2b0b      	cmp	r3, #11
   21f0a:	d013      	beq.n	21f34 <usb_handle_std_interface_req+0x52>
	return false;
   21f0c:	2000      	movs	r0, #0
   21f0e:	e7f0      	b.n	21ef2 <usb_handle_std_interface_req+0x10>
		switch (setup->bRequest) {
   21f10:	7863      	ldrb	r3, [r4, #1]
   21f12:	b11b      	cbz	r3, 21f1c <usb_handle_std_interface_req+0x3a>
   21f14:	2b0a      	cmp	r3, #10
   21f16:	d007      	beq.n	21f28 <usb_handle_std_interface_req+0x46>
   21f18:	2000      	movs	r0, #0
   21f1a:	e7ea      	b.n	21ef2 <usb_handle_std_interface_req+0x10>
			data[0] = 0U;
   21f1c:	2300      	movs	r3, #0
   21f1e:	703b      	strb	r3, [r7, #0]
			data[1] = 0U;
   21f20:	707b      	strb	r3, [r7, #1]
			*len = 2;
   21f22:	2302      	movs	r3, #2
   21f24:	6033      	str	r3, [r6, #0]
			return true;
   21f26:	e7e4      	b.n	21ef2 <usb_handle_std_interface_req+0x10>
			return usb_get_interface(setup, len, data_buf);
   21f28:	462a      	mov	r2, r5
   21f2a:	4631      	mov	r1, r6
   21f2c:	4620      	mov	r0, r4
   21f2e:	f7ef fdbd 	bl	11aac <usb_get_interface>
   21f32:	e7de      	b.n	21ef2 <usb_handle_std_interface_req+0x10>
			return usb_set_interface(setup);
   21f34:	4620      	mov	r0, r4
   21f36:	f7ef ffe1 	bl	11efc <usb_set_interface>
   21f3a:	e7da      	b.n	21ef2 <usb_handle_std_interface_req+0x10>

00021f3c <disable_interface_ep>:
{
   21f3c:	b508      	push	{r3, lr}
	return usb_dc_ep_disable(ep_data->ep_addr);
   21f3e:	7900      	ldrb	r0, [r0, #4]
   21f40:	f7f6 fe42 	bl	18bc8 <usb_dc_ep_disable>
}
   21f44:	bd08      	pop	{r3, pc}

00021f46 <usb_get_status_endpoint>:
{
   21f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f48:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
   21f4a:	7904      	ldrb	r4, [r0, #4]
	uint8_t *data = *data_buf;
   21f4c:	6817      	ldr	r7, [r2, #0]
	if (!is_ep_valid(ep)) {
   21f4e:	4620      	mov	r0, r4
   21f50:	f7ef fde6 	bl	11b20 <is_ep_valid>
   21f54:	4605      	mov	r5, r0
   21f56:	b130      	cbz	r0, 21f66 <usb_get_status_endpoint+0x20>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   21f58:	f034 0380 	bics.w	r3, r4, #128	; 0x80
   21f5c:	d005      	beq.n	21f6a <usb_get_status_endpoint+0x24>
   21f5e:	f7ef fdc3 	bl	11ae8 <is_device_configured>
   21f62:	b910      	cbnz	r0, 21f6a <usb_get_status_endpoint+0x24>
	return false;
   21f64:	4605      	mov	r5, r0
}
   21f66:	4628      	mov	r0, r5
   21f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
   21f6a:	4639      	mov	r1, r7
   21f6c:	4620      	mov	r0, r4
   21f6e:	f7f6 fdd9 	bl	18b24 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   21f72:	2300      	movs	r3, #0
   21f74:	707b      	strb	r3, [r7, #1]
		*len = 2;
   21f76:	2302      	movs	r3, #2
   21f78:	6033      	str	r3, [r6, #0]
		return true;
   21f7a:	e7f4      	b.n	21f66 <usb_get_status_endpoint+0x20>

00021f7c <usb_handle_std_endpoint_req>:
{
   21f7c:	b508      	push	{r3, lr}
	if (usb_reqtype_is_to_host(setup)) {
   21f7e:	f990 3000 	ldrsb.w	r3, [r0]
   21f82:	2b00      	cmp	r3, #0
   21f84:	db06      	blt.n	21f94 <usb_handle_std_endpoint_req+0x18>
		switch (setup->bRequest) {
   21f86:	7843      	ldrb	r3, [r0, #1]
   21f88:	2b01      	cmp	r3, #1
   21f8a:	d00a      	beq.n	21fa2 <usb_handle_std_endpoint_req+0x26>
   21f8c:	2b03      	cmp	r3, #3
   21f8e:	d010      	beq.n	21fb2 <usb_handle_std_endpoint_req+0x36>
   21f90:	2000      	movs	r0, #0
   21f92:	e002      	b.n	21f9a <usb_handle_std_endpoint_req+0x1e>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   21f94:	7843      	ldrb	r3, [r0, #1]
   21f96:	b10b      	cbz	r3, 21f9c <usb_handle_std_endpoint_req+0x20>
	return false;
   21f98:	2000      	movs	r0, #0
}
   21f9a:	bd08      	pop	{r3, pc}
			return usb_get_status_endpoint(setup, len, data_buf);
   21f9c:	f7ff ffd3 	bl	21f46 <usb_get_status_endpoint>
   21fa0:	e7fb      	b.n	21f9a <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   21fa2:	8843      	ldrh	r3, [r0, #2]
   21fa4:	b10b      	cbz	r3, 21faa <usb_handle_std_endpoint_req+0x2e>
	return false;
   21fa6:	2000      	movs	r0, #0
   21fa8:	e7f7      	b.n	21f9a <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, false);
   21faa:	2100      	movs	r1, #0
   21fac:	f7ef fec6 	bl	11d3c <usb_halt_endpoint_req>
   21fb0:	e7f3      	b.n	21f9a <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   21fb2:	8843      	ldrh	r3, [r0, #2]
   21fb4:	b10b      	cbz	r3, 21fba <usb_handle_std_endpoint_req+0x3e>
	return false;
   21fb6:	2000      	movs	r0, #0
   21fb8:	e7ef      	b.n	21f9a <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, true);
   21fba:	2101      	movs	r1, #1
   21fbc:	f7ef febe 	bl	11d3c <usb_halt_endpoint_req>
   21fc0:	e7eb      	b.n	21f9a <usb_handle_std_endpoint_req+0x1e>

00021fc2 <usb_write>:
{
   21fc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21fc6:	4681      	mov	r9, r0
   21fc8:	4688      	mov	r8, r1
   21fca:	4617      	mov	r7, r2
   21fcc:	461e      	mov	r6, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
   21fce:	2503      	movs	r5, #3
   21fd0:	e000      	b.n	21fd4 <usb_write+0x12>
	} while (ret == -EAGAIN && tries--);
   21fd2:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   21fd4:	4633      	mov	r3, r6
   21fd6:	463a      	mov	r2, r7
   21fd8:	4641      	mov	r1, r8
   21fda:	4648      	mov	r0, r9
   21fdc:	f7f6 fe1e 	bl	18c1c <usb_dc_ep_write>
   21fe0:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   21fe2:	f110 0f0b 	cmn.w	r0, #11
   21fe6:	d008      	beq.n	21ffa <usb_write+0x38>
	} while (ret == -EAGAIN && tries--);
   21fe8:	f114 0f0b 	cmn.w	r4, #11
   21fec:	d102      	bne.n	21ff4 <usb_write+0x32>
   21fee:	1e6b      	subs	r3, r5, #1
   21ff0:	2d00      	cmp	r5, #0
   21ff2:	d1ee      	bne.n	21fd2 <usb_write+0x10>
}
   21ff4:	4620      	mov	r0, r4
   21ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_impl_k_yield();
   21ffa:	f7fb fe61 	bl	1dcc0 <z_impl_k_yield>
}
   21ffe:	e7f3      	b.n	21fe8 <usb_write+0x26>

00022000 <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   22000:	f810 2b02 	ldrb.w	r2, [r0], #2
   22004:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
   22006:	0852      	lsrs	r2, r2, #1
   22008:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
   2200a:	2b00      	cmp	r3, #0
   2200c:	db0b      	blt.n	22026 <ascii7_to_utf16le+0x26>
{
   2200e:	b410      	push	{r4}
		buf[i] = 0U;
   22010:	2100      	movs	r1, #0
   22012:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
   22014:	1e59      	subs	r1, r3, #1
   22016:	5c84      	ldrb	r4, [r0, r2]
   22018:	5444      	strb	r4, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
   2201a:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
   2201c:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
   2201e:	2b00      	cmp	r3, #0
   22020:	daf6      	bge.n	22010 <ascii7_to_utf16le+0x10>
}
   22022:	bc10      	pop	{r4}
   22024:	4770      	bx	lr
   22026:	4770      	bx	lr

00022028 <usb_validate_ep_cfg_data>:
{
   22028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2202c:	b083      	sub	sp, #12
   2202e:	4605      	mov	r5, r0
   22030:	4689      	mov	r9, r1
   22032:	4690      	mov	r8, r2
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   22034:	2700      	movs	r7, #0
   22036:	e04a      	b.n	220ce <usb_validate_ep_cfg_data+0xa6>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   22038:	f8d8 2000 	ldr.w	r2, [r8]
   2203c:	f104 0110 	add.w	r1, r4, #16
   22040:	2301      	movs	r3, #1
   22042:	408b      	lsls	r3, r1
   22044:	421a      	tst	r2, r3
   22046:	d108      	bne.n	2205a <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   22048:	f064 037f 	orn	r3, r4, #127	; 0x7f
   2204c:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   22050:	4668      	mov	r0, sp
   22052:	f003 ffab 	bl	25fac <usb_dc_ep_check_cap>
   22056:	4603      	mov	r3, r0
   22058:	b1d0      	cbz	r0, 22090 <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   2205a:	3401      	adds	r4, #1
   2205c:	b2e4      	uxtb	r4, r4
   2205e:	2c0f      	cmp	r4, #15
   22060:	d834      	bhi.n	220cc <usb_validate_ep_cfg_data+0xa4>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   22062:	78eb      	ldrb	r3, [r5, #3]
   22064:	f003 0303 	and.w	r3, r3, #3
   22068:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   2206c:	88ab      	ldrh	r3, [r5, #4]
   2206e:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
   22072:	78ab      	ldrb	r3, [r5, #2]
   22074:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   22078:	f013 0f80 	tst.w	r3, #128	; 0x80
   2207c:	d1dc      	bne.n	22038 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1U << (idx)))) {
   2207e:	f8d8 2000 	ldr.w	r2, [r8]
   22082:	2301      	movs	r3, #1
   22084:	40a3      	lsls	r3, r4
   22086:	421a      	tst	r2, r3
   22088:	d1e7      	bne.n	2205a <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
   2208a:	f88d 4000 	strb.w	r4, [sp]
   2208e:	e7df      	b.n	22050 <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   22090:	f89d 2000 	ldrb.w	r2, [sp]
   22094:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   22096:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   22098:	f012 0f80 	tst.w	r2, #128	; 0x80
   2209c:	d10b      	bne.n	220b6 <usb_validate_ep_cfg_data+0x8e>
					*requested_ep |= (1U << idx);
   2209e:	2201      	movs	r2, #1
   220a0:	fa02 f404 	lsl.w	r4, r2, r4
   220a4:	f8d8 2000 	ldr.w	r2, [r8]
   220a8:	4322      	orrs	r2, r4
   220aa:	f8c8 2000 	str.w	r2, [r8]
}
   220ae:	4618      	mov	r0, r3
   220b0:	b003      	add	sp, #12
   220b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1U << (idx + 16U));
   220b6:	f104 0110 	add.w	r1, r4, #16
   220ba:	2201      	movs	r2, #1
   220bc:	fa02 f101 	lsl.w	r1, r2, r1
   220c0:	f8d8 2000 	ldr.w	r2, [r8]
   220c4:	430a      	orrs	r2, r1
   220c6:	f8c8 2000 	str.w	r2, [r8]
   220ca:	e7f0      	b.n	220ae <usb_validate_ep_cfg_data+0x86>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   220cc:	3701      	adds	r7, #1
   220ce:	f899 301c 	ldrb.w	r3, [r9, #28]
   220d2:	429f      	cmp	r7, r3
   220d4:	d209      	bcs.n	220ea <usb_validate_ep_cfg_data+0xc2>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
   220d6:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   220da:	78aa      	ldrb	r2, [r5, #2]
   220dc:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   220e0:	7933      	ldrb	r3, [r6, #4]
   220e2:	429a      	cmp	r2, r3
   220e4:	d1f2      	bne.n	220cc <usb_validate_ep_cfg_data+0xa4>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   220e6:	2401      	movs	r4, #1
   220e8:	e7b9      	b.n	2205e <usb_validate_ep_cfg_data+0x36>
	return -1;
   220ea:	f04f 33ff 	mov.w	r3, #4294967295
   220ee:	e7de      	b.n	220ae <usb_validate_ep_cfg_data+0x86>

000220f0 <usb_get_dev_data_by_cfg>:
	return list->head;
   220f0:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   220f2:	b110      	cbz	r0, 220fa <usb_get_dev_data_by_cfg+0xa>
   220f4:	3804      	subs	r0, #4
   220f6:	e000      	b.n	220fa <usb_get_dev_data_by_cfg+0xa>
   220f8:	3804      	subs	r0, #4
   220fa:	b140      	cbz	r0, 2210e <usb_get_dev_data_by_cfg+0x1e>
		const struct device *dev = dev_data->dev;
   220fc:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
   220fe:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
   22100:	4299      	cmp	r1, r3
   22102:	d004      	beq.n	2210e <usb_get_dev_data_by_cfg+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22104:	1d03      	adds	r3, r0, #4
   22106:	d003      	beq.n	22110 <usb_get_dev_data_by_cfg+0x20>
	return node->next;
   22108:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2210a:	2800      	cmp	r0, #0
   2210c:	d1f4      	bne.n	220f8 <usb_get_dev_data_by_cfg+0x8>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   2210e:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   22110:	4618      	mov	r0, r3
   22112:	e7f2      	b.n	220fa <usb_get_dev_data_by_cfg+0xa>

00022114 <usb_get_dev_data_by_iface>:
	return list->head;
   22114:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   22116:	b110      	cbz	r0, 2211e <usb_get_dev_data_by_iface+0xa>
   22118:	3804      	subs	r0, #4
   2211a:	e000      	b.n	2211e <usb_get_dev_data_by_iface+0xa>
   2211c:	3804      	subs	r0, #4
   2211e:	b150      	cbz	r0, 22136 <usb_get_dev_data_by_iface+0x22>
		const struct device *dev = dev_data->dev;
   22120:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   22122:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
   22124:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   22126:	789b      	ldrb	r3, [r3, #2]
   22128:	428b      	cmp	r3, r1
   2212a:	d004      	beq.n	22136 <usb_get_dev_data_by_iface+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2212c:	1d03      	adds	r3, r0, #4
   2212e:	d003      	beq.n	22138 <usb_get_dev_data_by_iface+0x24>
	return node->next;
   22130:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   22132:	2800      	cmp	r0, #0
   22134:	d1f2      	bne.n	2211c <usb_get_dev_data_by_iface+0x8>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   22136:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   22138:	4618      	mov	r0, r3
   2213a:	e7f0      	b.n	2211e <usb_get_dev_data_by_iface+0xa>

0002213c <usb_get_dev_data_by_ep>:
	return list->head;
   2213c:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2213e:	b100      	cbz	r0, 22142 <usb_get_dev_data_by_ep+0x6>
   22140:	3804      	subs	r0, #4
   22142:	b1d0      	cbz	r0, 2217a <usb_get_dev_data_by_ep+0x3e>
{
   22144:	b430      	push	{r4, r5}
   22146:	e005      	b.n	22154 <usb_get_dev_data_by_ep+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22148:	1d03      	adds	r3, r0, #4
   2214a:	d012      	beq.n	22172 <usb_get_dev_data_by_ep+0x36>
	return node->next;
   2214c:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2214e:	b190      	cbz	r0, 22176 <usb_get_dev_data_by_ep+0x3a>
   22150:	3804      	subs	r0, #4
   22152:	b180      	cbz	r0, 22176 <usb_get_dev_data_by_ep+0x3a>
		const struct device *dev = dev_data->dev;
   22154:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   22156:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   22158:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2215a:	2300      	movs	r3, #0
   2215c:	7f22      	ldrb	r2, [r4, #28]
   2215e:	429a      	cmp	r2, r3
   22160:	d9f2      	bls.n	22148 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
   22162:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   22166:	7912      	ldrb	r2, [r2, #4]
   22168:	428a      	cmp	r2, r1
   2216a:	d004      	beq.n	22176 <usb_get_dev_data_by_ep+0x3a>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2216c:	3301      	adds	r3, #1
   2216e:	b2db      	uxtb	r3, r3
   22170:	e7f4      	b.n	2215c <usb_get_dev_data_by_ep+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   22172:	4618      	mov	r0, r3
   22174:	e7ed      	b.n	22152 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   22176:	bc30      	pop	{r4, r5}
   22178:	4770      	bx	lr
   2217a:	4770      	bx	lr

0002217c <usb_transfer_is_busy>:
{
   2217c:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   2217e:	f7f0 fa01 	bl	12584 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   22182:	b128      	cbz	r0, 22190 <usb_transfer_is_busy+0x14>
   22184:	6843      	ldr	r3, [r0, #4]
   22186:	f113 0f10 	cmn.w	r3, #16
   2218a:	d003      	beq.n	22194 <usb_transfer_is_busy+0x18>
	return false;
   2218c:	2000      	movs	r0, #0
}
   2218e:	bd08      	pop	{r3, pc}
	return false;
   22190:	2000      	movs	r0, #0
   22192:	e7fc      	b.n	2218e <usb_transfer_is_busy+0x12>
		return true;
   22194:	2001      	movs	r0, #1
   22196:	e7fa      	b.n	2218e <usb_transfer_is_busy+0x12>

00022198 <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   22198:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   2219a:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   2219c:	1c4b      	adds	r3, r1, #1
   2219e:	b2db      	uxtb	r3, r3
   221a0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   221a4:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   221a6:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   221aa:	4770      	bx	lr

000221ac <cdc_acm_irq_callback_work_handler>:
{
   221ac:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   221ae:	f850 3c08 	ldr.w	r3, [r0, #-8]
   221b2:	f850 1c04 	ldr.w	r1, [r0, #-4]
   221b6:	6f80      	ldr	r0, [r0, #120]	; 0x78
   221b8:	4798      	blx	r3
}
   221ba:	bd08      	pop	{r3, pc}

000221bc <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   221bc:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
   221be:	2200      	movs	r2, #0
   221c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
   221c4:	4770      	bx	lr

000221c6 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   221c6:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   221c8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   221cc:	b122      	cbz	r2, 221d8 <cdc_acm_irq_tx_ready+0x12>
   221ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   221d2:	b91b      	cbnz	r3, 221dc <cdc_acm_irq_tx_ready+0x16>
	return 0;
   221d4:	2000      	movs	r0, #0
   221d6:	4770      	bx	lr
   221d8:	2000      	movs	r0, #0
   221da:	4770      	bx	lr
		return 1;
   221dc:	2001      	movs	r0, #1
}
   221de:	4770      	bx	lr

000221e0 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   221e0:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
   221e2:	2200      	movs	r2, #0
   221e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   221e8:	4770      	bx	lr

000221ea <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   221ea:	6903      	ldr	r3, [r0, #16]
	if (dev_data->rx_ready) {
   221ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   221f0:	b90b      	cbnz	r3, 221f6 <cdc_acm_irq_rx_ready+0xc>
	return 0;
   221f2:	2000      	movs	r0, #0
   221f4:	4770      	bx	lr
		return 1;
   221f6:	2001      	movs	r0, #1
}
   221f8:	4770      	bx	lr

000221fa <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   221fa:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   221fc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   22200:	b112      	cbz	r2, 22208 <cdc_acm_irq_is_pending+0xe>
   22202:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   22206:	b93a      	cbnz	r2, 22218 <cdc_acm_irq_is_pending+0x1e>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   22208:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   2220c:	b132      	cbz	r2, 2221c <cdc_acm_irq_is_pending+0x22>
   2220e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   22212:	b92b      	cbnz	r3, 22220 <cdc_acm_irq_is_pending+0x26>
		return 0;
   22214:	2000      	movs	r0, #0
   22216:	4770      	bx	lr
		return 1;
   22218:	2001      	movs	r0, #1
   2221a:	4770      	bx	lr
		return 0;
   2221c:	2000      	movs	r0, #0
   2221e:	4770      	bx	lr
		return 1;
   22220:	2001      	movs	r0, #1
}
   22222:	4770      	bx	lr

00022224 <cdc_acm_irq_update>:
}
   22224:	2001      	movs	r0, #1
   22226:	4770      	bx	lr

00022228 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   22228:	6903      	ldr	r3, [r0, #16]
	dev_data->cb = cb;
   2222a:	6019      	str	r1, [r3, #0]
	dev_data->cb_data = cb_data;
   2222c:	605a      	str	r2, [r3, #4]
}
   2222e:	4770      	bx	lr

00022230 <cdc_acm_baudrate_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   22230:	6903      	ldr	r3, [r0, #16]
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   22232:	6759      	str	r1, [r3, #116]	; 0x74
}
   22234:	4770      	bx	lr

00022236 <cdc_acm_line_ctrl_get>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   22236:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   22238:	2902      	cmp	r1, #2
   2223a:	d00a      	beq.n	22252 <cdc_acm_line_ctrl_get+0x1c>
   2223c:	2904      	cmp	r1, #4
   2223e:	d00f      	beq.n	22260 <cdc_acm_line_ctrl_get+0x2a>
   22240:	2901      	cmp	r1, #1
   22242:	d002      	beq.n	2224a <cdc_acm_line_ctrl_get+0x14>
   22244:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   22248:	4770      	bx	lr
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   2224a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   2224c:	6013      	str	r3, [r2, #0]
		return 0;
   2224e:	2000      	movs	r0, #0
   22250:	4770      	bx	lr
		*val = (dev_data->line_state &
   22252:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   22256:	f3c3 0340 	ubfx	r3, r3, #1, #1
		*val = (dev_data->line_state &
   2225a:	6013      	str	r3, [r2, #0]
		return 0;
   2225c:	2000      	movs	r0, #0
   2225e:	4770      	bx	lr
		*val = (dev_data->line_state &
   22260:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   22264:	f003 0301 	and.w	r3, r3, #1
		*val = (dev_data->line_state &
   22268:	6013      	str	r3, [r2, #0]
		return 0;
   2226a:	2000      	movs	r0, #0
   2226c:	4770      	bx	lr

0002226e <cdc_acm_line_ctrl_set>:
{
   2226e:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   22270:	6904      	ldr	r4, [r0, #16]
	switch (ctrl) {
   22272:	2940      	cmp	r1, #64	; 0x40
   22274:	f000 8081 	beq.w	2237a <cdc_acm_line_ctrl_set+0x10c>
   22278:	d81b      	bhi.n	222b2 <cdc_acm_line_ctrl_set+0x44>
   2227a:	2920      	cmp	r1, #32
   2227c:	f200 809f 	bhi.w	223be <cdc_acm_line_ctrl_set+0x150>
   22280:	2900      	cmp	r1, #0
   22282:	f000 809f 	beq.w	223c4 <cdc_acm_line_ctrl_set+0x156>
   22286:	1e4b      	subs	r3, r1, #1
   22288:	2b1f      	cmp	r3, #31
   2228a:	f200 809e 	bhi.w	223ca <cdc_acm_line_ctrl_set+0x15c>
   2228e:	e8df f003 	tbb	[pc, r3]
   22292:	9c3d      	.short	0x9c3d
   22294:	9c9c9c9c 	.word	0x9c9c9c9c
   22298:	9c9c429c 	.word	0x9c9c429c
   2229c:	9c9c9c9c 	.word	0x9c9c9c9c
   222a0:	9c9c529c 	.word	0x9c9c529c
   222a4:	9c9c9c9c 	.word	0x9c9c9c9c
   222a8:	9c9c9c9c 	.word	0x9c9c9c9c
   222ac:	9c9c9c9c 	.word	0x9c9c9c9c
   222b0:	639c      	.short	0x639c
   222b2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   222b6:	d071      	beq.n	2239c <cdc_acm_line_ctrl_set+0x12e>
   222b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   222bc:	d110      	bne.n	222e0 <cdc_acm_line_ctrl_set+0x72>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   222be:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   222c2:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
   222c6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   222ca:	b11a      	cbz	r2, 222d4 <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   222cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   222d0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   222d4:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   222d8:	f7f0 fc48 	bl	12b6c <cdc_acm_send_notification>
		return 0;
   222dc:	2000      	movs	r0, #0
   222de:	e019      	b.n	22314 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   222e0:	2980      	cmp	r1, #128	; 0x80
   222e2:	d110      	bne.n	22306 <cdc_acm_line_ctrl_set+0x98>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   222e4:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   222e8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   222ec:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   222f0:	b11a      	cbz	r2, 222fa <cdc_acm_line_ctrl_set+0x8c>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   222f2:	f043 0310 	orr.w	r3, r3, #16
   222f6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   222fa:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   222fe:	f7f0 fc35 	bl	12b6c <cdc_acm_send_notification>
		return 0;
   22302:	2000      	movs	r0, #0
   22304:	e006      	b.n	22314 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   22306:	f06f 0012 	mvn.w	r0, #18
   2230a:	e003      	b.n	22314 <cdc_acm_line_ctrl_set+0xa6>
		cdc_acm_baudrate_set(dev, val);
   2230c:	4611      	mov	r1, r2
   2230e:	f7ff ff8f 	bl	22230 <cdc_acm_baudrate_set>
		return 0;
   22312:	2000      	movs	r0, #0
}
   22314:	bd10      	pop	{r4, pc}
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   22316:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   2231a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   2231e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   22322:	b11a      	cbz	r2, 2232c <cdc_acm_line_ctrl_set+0xbe>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   22324:	f043 0301 	orr.w	r3, r3, #1
   22328:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   2232c:	2101      	movs	r1, #1
   2232e:	f7f0 fc1d 	bl	12b6c <cdc_acm_send_notification>
		return 0;
   22332:	2000      	movs	r0, #0
   22334:	e7ee      	b.n	22314 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   22336:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   2233a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   2233e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   22342:	b11a      	cbz	r2, 2234c <cdc_acm_line_ctrl_set+0xde>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   22344:	f043 0302 	orr.w	r3, r3, #2
   22348:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   2234c:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   22350:	f7f0 fc0c 	bl	12b6c <cdc_acm_send_notification>
		return 0;
   22354:	2000      	movs	r0, #0
   22356:	e7dd      	b.n	22314 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   22358:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   2235c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   22360:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   22364:	b11a      	cbz	r2, 2236e <cdc_acm_line_ctrl_set+0x100>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   22366:	f043 0304 	orr.w	r3, r3, #4
   2236a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   2236e:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   22372:	f7f0 fbfb 	bl	12b6c <cdc_acm_send_notification>
		return 0;
   22376:	2000      	movs	r0, #0
   22378:	e7cc      	b.n	22314 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   2237a:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   2237e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   22382:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   22386:	b11a      	cbz	r2, 22390 <cdc_acm_line_ctrl_set+0x122>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   22388:	f043 0308 	orr.w	r3, r3, #8
   2238c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   22390:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   22394:	f7f0 fbea 	bl	12b6c <cdc_acm_send_notification>
		return 0;
   22398:	2000      	movs	r0, #0
   2239a:	e7bb      	b.n	22314 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   2239c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   223a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   223a4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   223a8:	b11a      	cbz	r2, 223b2 <cdc_acm_line_ctrl_set+0x144>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   223aa:	f043 0320 	orr.w	r3, r3, #32
   223ae:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   223b2:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   223b6:	f7f0 fbd9 	bl	12b6c <cdc_acm_send_notification>
		return 0;
   223ba:	2000      	movs	r0, #0
   223bc:	e7aa      	b.n	22314 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   223be:	f06f 0012 	mvn.w	r0, #18
   223c2:	e7a7      	b.n	22314 <cdc_acm_line_ctrl_set+0xa6>
   223c4:	f06f 0012 	mvn.w	r0, #18
   223c8:	e7a4      	b.n	22314 <cdc_acm_line_ctrl_set+0xa6>
   223ca:	f06f 0012 	mvn.w	r0, #18
   223ce:	e7a1      	b.n	22314 <cdc_acm_line_ctrl_set+0xa6>

000223d0 <cdc_acm_fifo_read>:
{
   223d0:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   223d2:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   223d4:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   223d6:	f7ff fd3b 	bl	21e50 <ring_buf_get>
   223da:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   223dc:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   223de:	f7ff fc7f 	bl	21ce0 <ring_buf_is_empty>
   223e2:	b110      	cbz	r0, 223ea <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
   223e4:	2300      	movs	r3, #0
   223e6:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
   223ea:	4620      	mov	r0, r4
   223ec:	bd38      	pop	{r3, r4, r5, pc}

000223ee <cdc_acm_poll_in>:
{
   223ee:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   223f0:	2201      	movs	r2, #1
   223f2:	f7ff ffed 	bl	223d0 <cdc_acm_fifo_read>
	return ret == 1 ? 0 : -1;
   223f6:	2801      	cmp	r0, #1
   223f8:	d101      	bne.n	223fe <cdc_acm_poll_in+0x10>
   223fa:	2000      	movs	r0, #0
}
   223fc:	bd08      	pop	{r3, pc}
	return ret == 1 ? 0 : -1;
   223fe:	f04f 30ff 	mov.w	r0, #4294967295
   22402:	e7fb      	b.n	223fc <cdc_acm_poll_in+0xe>

00022404 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   22404:	2200      	movs	r2, #0
   22406:	6002      	str	r2, [r0, #0]
   22408:	6042      	str	r2, [r0, #4]
   2240a:	6082      	str	r2, [r0, #8]
}
   2240c:	4770      	bx	lr

0002240e <scan_device_filter_check>:
}
   2240e:	2001      	movs	r0, #1
   22410:	4770      	bx	lr

00022412 <is_addr_filter_enabled>:
}
   22412:	2000      	movs	r0, #0
   22414:	4770      	bx	lr

00022416 <scan_addr_filter_add>:
}
   22416:	f06f 000b 	mvn.w	r0, #11
   2241a:	4770      	bx	lr

0002241c <scan_name_filter_add>:
}
   2241c:	f06f 000b 	mvn.w	r0, #11
   22420:	4770      	bx	lr

00022422 <scan_short_name_filter_add>:
}
   22422:	f06f 000b 	mvn.w	r0, #11
   22426:	4770      	bx	lr

00022428 <scan_appearance_filter_add>:
}
   22428:	f06f 000b 	mvn.w	r0, #11
   2242c:	4770      	bx	lr

0002242e <scan_manufacturer_data_filter_add>:
}
   2242e:	f06f 000b 	mvn.w	r0, #11
   22432:	4770      	bx	lr

00022434 <check_filter_mode>:
}
   22434:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
   22438:	bf18      	it	ne
   2243a:	2001      	movne	r0, #1
   2243c:	4770      	bx	lr

0002243e <check_enabled_filters>:
{
   2243e:	b510      	push	{r4, lr}
   22440:	4604      	mov	r4, r0
	control->filter_cnt = 0;
   22442:	2300      	movs	r3, #0
   22444:	7003      	strb	r3, [r0, #0]
	if (is_addr_filter_enabled()) {
   22446:	f7ff ffe4 	bl	22412 <is_addr_filter_enabled>
   2244a:	b108      	cbz	r0, 22450 <check_enabled_filters+0x12>
		control->filter_cnt++;
   2244c:	2301      	movs	r3, #1
   2244e:	7023      	strb	r3, [r4, #0]
	if (is_uuid_filter_enabled()) {
   22450:	f7f0 fd88 	bl	12f64 <is_uuid_filter_enabled>
   22454:	b110      	cbz	r0, 2245c <check_enabled_filters+0x1e>
		control->filter_cnt++;
   22456:	7823      	ldrb	r3, [r4, #0]
   22458:	3301      	adds	r3, #1
   2245a:	7023      	strb	r3, [r4, #0]
}
   2245c:	bd10      	pop	{r4, pc}

0002245e <find_uuid>:
{
   2245e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22462:	b087      	sub	sp, #28
   22464:	4607      	mov	r7, r0
   22466:	460e      	mov	r6, r1
   22468:	4698      	mov	r8, r3
	switch (uuid_type) {
   2246a:	2a01      	cmp	r2, #1
   2246c:	d00b      	beq.n	22486 <find_uuid+0x28>
   2246e:	2a02      	cmp	r2, #2
   22470:	d00b      	beq.n	2248a <find_uuid+0x2c>
   22472:	b12a      	cbz	r2, 22480 <find_uuid+0x22>
   22474:	f04f 0900 	mov.w	r9, #0
}
   22478:	4648      	mov	r0, r9
   2247a:	b007      	add	sp, #28
   2247c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (uuid_type) {
   22480:	2502      	movs	r5, #2
	for (size_t i = 0; i < data_len; i += uuid_len) {
   22482:	2400      	movs	r4, #0
   22484:	e004      	b.n	22490 <find_uuid+0x32>
		uuid_len = sizeof(uint32_t);
   22486:	2504      	movs	r5, #4
   22488:	e7fb      	b.n	22482 <find_uuid+0x24>
		uuid_len = BT_SCAN_UUID_128_SIZE * sizeof(uint8_t);
   2248a:	2510      	movs	r5, #16
   2248c:	e7f9      	b.n	22482 <find_uuid+0x24>
	for (size_t i = 0; i < data_len; i += uuid_len) {
   2248e:	442c      	add	r4, r5
   22490:	42a6      	cmp	r6, r4
   22492:	d90f      	bls.n	224b4 <find_uuid+0x56>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
   22494:	462a      	mov	r2, r5
   22496:	1939      	adds	r1, r7, r4
   22498:	a801      	add	r0, sp, #4
   2249a:	f000 fb5b 	bl	22b54 <bt_uuid_create>
   2249e:	4681      	mov	r9, r0
   224a0:	2800      	cmp	r0, #0
   224a2:	d0e9      	beq.n	22478 <find_uuid+0x1a>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
   224a4:	f8d8 1000 	ldr.w	r1, [r8]
   224a8:	a801      	add	r0, sp, #4
   224aa:	f000 fb35 	bl	22b18 <bt_uuid_cmp>
   224ae:	2800      	cmp	r0, #0
   224b0:	d1ed      	bne.n	2248e <find_uuid+0x30>
   224b2:	e7e1      	b.n	22478 <find_uuid+0x1a>
	return false;
   224b4:	f04f 0900 	mov.w	r9, #0
   224b8:	e7de      	b.n	22478 <find_uuid+0x1a>

000224ba <uuid_check>:
{
   224ba:	b570      	push	{r4, r5, r6, lr}
   224bc:	4606      	mov	r6, r0
   224be:	460c      	mov	r4, r1
   224c0:	4615      	mov	r5, r2
	if (is_uuid_filter_enabled()) {
   224c2:	f7f0 fd4f 	bl	12f64 <is_uuid_filter_enabled>
   224c6:	b900      	cbnz	r0, 224ca <uuid_check+0x10>
}
   224c8:	bd70      	pop	{r4, r5, r6, pc}
		if (adv_uuid_compare(data, type, control)) {
   224ca:	4632      	mov	r2, r6
   224cc:	4629      	mov	r1, r5
   224ce:	4620      	mov	r0, r4
   224d0:	f7f0 fdca 	bl	13068 <adv_uuid_compare>
   224d4:	2800      	cmp	r0, #0
   224d6:	d0f7      	beq.n	224c8 <uuid_check+0xe>
			control->filter_match_cnt++;
   224d8:	7873      	ldrb	r3, [r6, #1]
   224da:	3301      	adds	r3, #1
   224dc:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
   224de:	2301      	movs	r3, #1
   224e0:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
   224e4:	70b3      	strb	r3, [r6, #2]
}
   224e6:	e7ef      	b.n	224c8 <uuid_check+0xe>

000224e8 <adv_data_found>:
{
   224e8:	b510      	push	{r4, lr}
   224ea:	4604      	mov	r4, r0
   224ec:	4608      	mov	r0, r1
	switch (data->type) {
   224ee:	7823      	ldrb	r3, [r4, #0]
   224f0:	2b05      	cmp	r3, #5
   224f2:	d80b      	bhi.n	2250c <adv_data_found+0x24>
   224f4:	2b04      	cmp	r3, #4
   224f6:	d212      	bcs.n	2251e <adv_data_found+0x36>
   224f8:	3b02      	subs	r3, #2
   224fa:	b2db      	uxtb	r3, r3
   224fc:	2b01      	cmp	r3, #1
   224fe:	d803      	bhi.n	22508 <adv_data_found+0x20>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
   22500:	2200      	movs	r2, #0
   22502:	4621      	mov	r1, r4
   22504:	f7ff ffd9 	bl	224ba <uuid_check>
}
   22508:	2001      	movs	r0, #1
   2250a:	bd10      	pop	{r4, pc}
	switch (data->type) {
   2250c:	3b06      	subs	r3, #6
   2250e:	b2db      	uxtb	r3, r3
   22510:	2b01      	cmp	r3, #1
   22512:	d8f9      	bhi.n	22508 <adv_data_found+0x20>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   22514:	2202      	movs	r2, #2
   22516:	4621      	mov	r1, r4
   22518:	f7ff ffcf 	bl	224ba <uuid_check>
		break;
   2251c:	e7f4      	b.n	22508 <adv_data_found+0x20>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
   2251e:	2201      	movs	r2, #1
   22520:	4621      	mov	r1, r4
   22522:	f7ff ffca 	bl	224ba <uuid_check>
		break;
   22526:	e7ef      	b.n	22508 <adv_data_found+0x20>

00022528 <check_addr>:
{
   22528:	b538      	push	{r3, r4, r5, lr}
   2252a:	4604      	mov	r4, r0
   2252c:	460d      	mov	r5, r1
	if (is_addr_filter_enabled()) {
   2252e:	f7ff ff70 	bl	22412 <is_addr_filter_enabled>
   22532:	b900      	cbnz	r0, 22536 <check_addr+0xe>
}
   22534:	bd38      	pop	{r3, r4, r5, pc}
		if (adv_addr_compare(addr, control)) {
   22536:	4621      	mov	r1, r4
   22538:	4628      	mov	r0, r5
   2253a:	f7f0 fdd5 	bl	130e8 <adv_addr_compare>
   2253e:	2800      	cmp	r0, #0
   22540:	d0f8      	beq.n	22534 <check_addr+0xc>
			control->filter_match_cnt++;
   22542:	7863      	ldrb	r3, [r4, #1]
   22544:	3301      	adds	r3, #1
   22546:	7063      	strb	r3, [r4, #1]
			control->filter_status.addr.match = true;
   22548:	2301      	movs	r3, #1
   2254a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			control->filter_match = true;
   2254e:	70a3      	strb	r3, [r4, #2]
}
   22550:	e7f0      	b.n	22534 <check_addr+0xc>

00022552 <bt_scan_stop>:
{
   22552:	b508      	push	{r3, lr}
	return bt_le_scan_stop();
   22554:	f7f3 fd32 	bl	15fbc <bt_le_scan_stop>
}
   22558:	bd08      	pop	{r3, pc}

0002255a <filter_state_check>:
{
   2255a:	b538      	push	{r3, r4, r5, lr}
   2255c:	4604      	mov	r4, r0
   2255e:	460d      	mov	r5, r1
	if (!scan_device_filter_check(addr)) {
   22560:	4608      	mov	r0, r1
   22562:	f7ff ff54 	bl	2240e <scan_device_filter_check>
   22566:	b168      	cbz	r0, 22584 <filter_state_check+0x2a>
	if (control->all_mode &&
   22568:	78e3      	ldrb	r3, [r4, #3]
   2256a:	b11b      	cbz	r3, 22574 <filter_state_check+0x1a>
	    (control->filter_match_cnt == control->filter_cnt)) {
   2256c:	7861      	ldrb	r1, [r4, #1]
   2256e:	7822      	ldrb	r2, [r4, #0]
	if (control->all_mode &&
   22570:	4291      	cmp	r1, r2
   22572:	d008      	beq.n	22586 <filter_state_check+0x2c>
	else if ((!control->all_mode) && control->filter_match) {
   22574:	b90b      	cbnz	r3, 2257a <filter_state_check+0x20>
   22576:	78a3      	ldrb	r3, [r4, #2]
   22578:	b98b      	cbnz	r3, 2259e <filter_state_check+0x44>
		notify_filter_no_match(&control->device_info,
   2257a:	7921      	ldrb	r1, [r4, #4]
   2257c:	f104 0008 	add.w	r0, r4, #8
   22580:	f7f0 fc9e 	bl	12ec0 <notify_filter_no_match>
}
   22584:	bd38      	pop	{r3, r4, r5, pc}
		notify_filter_matched(&control->device_info,
   22586:	7922      	ldrb	r2, [r4, #4]
   22588:	f104 0114 	add.w	r1, r4, #20
   2258c:	f104 0008 	add.w	r0, r4, #8
   22590:	f7f0 fc78 	bl	12e84 <notify_filter_matched>
		scan_connect_with_target(control, addr);
   22594:	4629      	mov	r1, r5
   22596:	4620      	mov	r0, r4
   22598:	f7f0 fe5c 	bl	13254 <scan_connect_with_target>
   2259c:	e7f2      	b.n	22584 <filter_state_check+0x2a>
		notify_filter_matched(&control->device_info,
   2259e:	7922      	ldrb	r2, [r4, #4]
   225a0:	f104 0114 	add.w	r1, r4, #20
   225a4:	f104 0008 	add.w	r0, r4, #8
   225a8:	f7f0 fc6c 	bl	12e84 <notify_filter_matched>
		scan_connect_with_target(control, addr);
   225ac:	4629      	mov	r1, r5
   225ae:	4620      	mov	r0, r4
   225b0:	f7f0 fe50 	bl	13254 <scan_connect_with_target>
   225b4:	e7e6      	b.n	22584 <filter_state_check+0x2a>

000225b6 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   225b6:	428b      	cmp	r3, r1
   225b8:	d901      	bls.n	225be <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   225ba:	2000      	movs	r0, #0
	}
}
   225bc:	4770      	bx	lr
{
   225be:	b538      	push	{r3, r4, r5, lr}
   225c0:	4615      	mov	r5, r2
   225c2:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   225c4:	461a      	mov	r2, r3
   225c6:	4629      	mov	r1, r5
   225c8:	f000 fa31 	bl	22a2e <memcpy>
		return from_len;
   225cc:	4620      	mov	r0, r4
}
   225ce:	bd38      	pop	{r3, r4, r5, pc}

000225d0 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   225d0:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   225d2:	f000 fa50 	bl	22a76 <memset>
}
   225d6:	bd08      	pop	{r3, pc}

000225d8 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   225d8:	09c3      	lsrs	r3, r0, #7
   225da:	005a      	lsls	r2, r3, #1
   225dc:	4413      	add	r3, r2
   225de:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   225e2:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   225e6:	b2c0      	uxtb	r0, r0
   225e8:	4770      	bx	lr

000225ea <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   225ea:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   225ec:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   225ee:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   225f2:	2a00      	cmp	r2, #0
   225f4:	db03      	blt.n	225fe <gf_double+0x14>
   225f6:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   225f8:	f100 020f 	add.w	r2, r0, #15
   225fc:	e004      	b.n	22608 <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   225fe:	2487      	movs	r4, #135	; 0x87
   22600:	e7fa      	b.n	225f8 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   22602:	f813 0901 	ldrb.w	r0, [r3], #-1
   22606:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
   22608:	7818      	ldrb	r0, [r3, #0]
   2260a:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
   2260e:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   22612:	428b      	cmp	r3, r1
   22614:	d1f5      	bne.n	22602 <gf_double+0x18>
	}
}
   22616:	bc10      	pop	{r4}
   22618:	4770      	bx	lr

0002261a <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   2261a:	b130      	cbz	r0, 2262a <tc_cmac_erase+0x10>
{
   2261c:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2261e:	2258      	movs	r2, #88	; 0x58
   22620:	2100      	movs	r1, #0
   22622:	f7ff ffd5 	bl	225d0 <_set>

	return TC_CRYPTO_SUCCESS;
   22626:	2001      	movs	r0, #1
}
   22628:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   2262a:	2000      	movs	r0, #0
}
   2262c:	4770      	bx	lr

0002262e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2262e:	b1a0      	cbz	r0, 2265a <tc_cmac_init+0x2c>
{
   22630:	b510      	push	{r4, lr}
   22632:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   22634:	2210      	movs	r2, #16
   22636:	2100      	movs	r1, #0
   22638:	f7ff ffca 	bl	225d0 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2263c:	2210      	movs	r2, #16
   2263e:	2100      	movs	r1, #0
   22640:	f104 0030 	add.w	r0, r4, #48	; 0x30
   22644:	f7ff ffc4 	bl	225d0 <_set>
	s->leftover_offset = 0;
   22648:	2300      	movs	r3, #0
   2264a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2264c:	2200      	movs	r2, #0
   2264e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22652:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   22656:	2001      	movs	r0, #1
}
   22658:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   2265a:	2000      	movs	r0, #0
}
   2265c:	4770      	bx	lr

0002265e <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   2265e:	b338      	cbz	r0, 226b0 <tc_cmac_setup+0x52>
{
   22660:	b570      	push	{r4, r5, r6, lr}
   22662:	460d      	mov	r5, r1
   22664:	4616      	mov	r6, r2
   22666:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   22668:	b321      	cbz	r1, 226b4 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   2266a:	2258      	movs	r2, #88	; 0x58
   2266c:	2100      	movs	r1, #0
   2266e:	f7ff ffaf 	bl	225d0 <_set>
	s->sched = sched;
   22672:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   22674:	4629      	mov	r1, r5
   22676:	4630      	mov	r0, r6
   22678:	f7f0 fea0 	bl	133bc <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2267c:	2210      	movs	r2, #16
   2267e:	2100      	movs	r1, #0
   22680:	4620      	mov	r0, r4
   22682:	f7ff ffa5 	bl	225d0 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   22686:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22688:	4621      	mov	r1, r4
   2268a:	4620      	mov	r0, r4
   2268c:	f7f0 fef4 	bl	13478 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   22690:	f104 0510 	add.w	r5, r4, #16
   22694:	4621      	mov	r1, r4
   22696:	4628      	mov	r0, r5
   22698:	f7ff ffa7 	bl	225ea <gf_double>
	gf_double (s->K2, s->K1);
   2269c:	4629      	mov	r1, r5
   2269e:	f104 0020 	add.w	r0, r4, #32
   226a2:	f7ff ffa2 	bl	225ea <gf_double>
	tc_cmac_init(s);
   226a6:	4620      	mov	r0, r4
   226a8:	f7ff ffc1 	bl	2262e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   226ac:	2001      	movs	r0, #1
}
   226ae:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   226b0:	2000      	movs	r0, #0
}
   226b2:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   226b4:	2000      	movs	r0, #0
   226b6:	e7fa      	b.n	226ae <tc_cmac_setup+0x50>

000226b8 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   226b8:	2800      	cmp	r0, #0
   226ba:	d062      	beq.n	22782 <tc_cmac_update+0xca>
{
   226bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   226c0:	460e      	mov	r6, r1
   226c2:	4617      	mov	r7, r2
   226c4:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   226c6:	2a00      	cmp	r2, #0
   226c8:	d05d      	beq.n	22786 <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   226ca:	2900      	cmp	r1, #0
   226cc:	d05e      	beq.n	2278c <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   226ce:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   226d2:	ea50 0301 	orrs.w	r3, r0, r1
   226d6:	d05b      	beq.n	22790 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   226d8:	f110 32ff 	adds.w	r2, r0, #4294967295
   226dc:	f141 33ff 	adc.w	r3, r1, #4294967295
   226e0:	6522      	str	r2, [r4, #80]	; 0x50
   226e2:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
   226e4:	6c65      	ldr	r5, [r4, #68]	; 0x44
   226e6:	b3a5      	cbz	r5, 22752 <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   226e8:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
   226ec:	4547      	cmp	r7, r8
   226ee:	d30d      	bcc.n	2270c <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   226f0:	f105 0030 	add.w	r0, r5, #48	; 0x30
   226f4:	4643      	mov	r3, r8
   226f6:	4632      	mov	r2, r6
   226f8:	4641      	mov	r1, r8
   226fa:	4420      	add	r0, r4
   226fc:	f7ff ff5b 	bl	225b6 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   22700:	3d10      	subs	r5, #16
   22702:	442f      	add	r7, r5
		data += remaining_space;
   22704:	4446      	add	r6, r8
		s->leftover_offset = 0;
   22706:	2300      	movs	r3, #0
   22708:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2270a:	e013      	b.n	22734 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2270c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   22710:	463b      	mov	r3, r7
   22712:	4632      	mov	r2, r6
   22714:	4639      	mov	r1, r7
   22716:	4420      	add	r0, r4
   22718:	f7ff ff4d 	bl	225b6 <_copy>
			s->leftover_offset += data_length;
   2271c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2271e:	443b      	add	r3, r7
   22720:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   22722:	2001      	movs	r0, #1
   22724:	e030      	b.n	22788 <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
   22726:	18e2      	adds	r2, r4, r3
   22728:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2272c:	5ce1      	ldrb	r1, [r4, r3]
   2272e:	404a      	eors	r2, r1
   22730:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22732:	3301      	adds	r3, #1
   22734:	2b0f      	cmp	r3, #15
   22736:	d9f6      	bls.n	22726 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   22738:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2273a:	4621      	mov	r1, r4
   2273c:	4620      	mov	r0, r4
   2273e:	f7f0 fe9b 	bl	13478 <tc_aes_encrypt>
   22742:	e006      	b.n	22752 <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   22744:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22746:	4621      	mov	r1, r4
   22748:	4620      	mov	r0, r4
   2274a:	f7f0 fe95 	bl	13478 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2274e:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   22750:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   22752:	2f10      	cmp	r7, #16
   22754:	d908      	bls.n	22768 <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22756:	2300      	movs	r3, #0
   22758:	2b0f      	cmp	r3, #15
   2275a:	d8f3      	bhi.n	22744 <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
   2275c:	5cf0      	ldrb	r0, [r6, r3]
   2275e:	5ce5      	ldrb	r5, [r4, r3]
   22760:	4068      	eors	r0, r5
   22762:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22764:	3301      	adds	r3, #1
   22766:	e7f7      	b.n	22758 <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
   22768:	b90f      	cbnz	r7, 2276e <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2276a:	2001      	movs	r0, #1
   2276c:	e00c      	b.n	22788 <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
   2276e:	463b      	mov	r3, r7
   22770:	4632      	mov	r2, r6
   22772:	4639      	mov	r1, r7
   22774:	f104 0030 	add.w	r0, r4, #48	; 0x30
   22778:	f7ff ff1d 	bl	225b6 <_copy>
		s->leftover_offset = data_length;
   2277c:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   2277e:	2001      	movs	r0, #1
   22780:	e002      	b.n	22788 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   22782:	2000      	movs	r0, #0
}
   22784:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   22786:	2001      	movs	r0, #1
}
   22788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   2278c:	2000      	movs	r0, #0
   2278e:	e7fb      	b.n	22788 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   22790:	2000      	movs	r0, #0
   22792:	e7f9      	b.n	22788 <tc_cmac_update+0xd0>

00022794 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   22794:	b370      	cbz	r0, 227f4 <tc_cmac_final+0x60>
{
   22796:	b538      	push	{r3, r4, r5, lr}
   22798:	460c      	mov	r4, r1
   2279a:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   2279c:	b361      	cbz	r1, 227f8 <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2279e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   227a0:	2a10      	cmp	r2, #16
   227a2:	d10d      	bne.n	227c0 <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   227a4:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   227a6:	2300      	movs	r3, #0
   227a8:	2b0f      	cmp	r3, #15
   227aa:	d819      	bhi.n	227e0 <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   227ac:	18e2      	adds	r2, r4, r3
   227ae:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   227b2:	5cc8      	ldrb	r0, [r1, r3]
   227b4:	4050      	eors	r0, r2
   227b6:	5ce2      	ldrb	r2, [r4, r3]
   227b8:	4042      	eors	r2, r0
   227ba:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   227bc:	3301      	adds	r3, #1
   227be:	e7f3      	b.n	227a8 <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   227c0:	f102 0030 	add.w	r0, r2, #48	; 0x30
   227c4:	f1c2 0210 	rsb	r2, r2, #16
   227c8:	2100      	movs	r1, #0
   227ca:	4420      	add	r0, r4
   227cc:	f7ff ff00 	bl	225d0 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   227d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   227d2:	4423      	add	r3, r4
   227d4:	2280      	movs	r2, #128	; 0x80
   227d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   227da:	f104 0120 	add.w	r1, r4, #32
   227de:	e7e2      	b.n	227a6 <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   227e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   227e2:	4621      	mov	r1, r4
   227e4:	4628      	mov	r0, r5
   227e6:	f7f0 fe47 	bl	13478 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   227ea:	4620      	mov	r0, r4
   227ec:	f7ff ff15 	bl	2261a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   227f0:	2001      	movs	r0, #1
}
   227f2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   227f4:	2000      	movs	r0, #0
}
   227f6:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   227f8:	2000      	movs	r0, #0
   227fa:	e7fa      	b.n	227f2 <tc_cmac_final+0x5e>

000227fc <abort_function>:
{
   227fc:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   227fe:	2000      	movs	r0, #0
   22800:	f7ef f8d4 	bl	119ac <sys_reboot>

00022804 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22804:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   22806:	f004 fd68 	bl	272da <z_fatal_error>
}
   2280a:	bd08      	pop	{r3, pc}

0002280c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2280c:	b508      	push	{r3, lr}
   2280e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   22810:	6800      	ldr	r0, [r0, #0]
   22812:	f7ff fff7 	bl	22804 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   22816:	bd08      	pop	{r3, pc}

00022818 <z_irq_spurious>:
{
   22818:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2281a:	2100      	movs	r1, #0
   2281c:	2001      	movs	r0, #1
   2281e:	f7ff fff1 	bl	22804 <z_arm_fatal_error>
}
   22822:	bd08      	pop	{r3, pc}

00022824 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   22824:	b508      	push	{r3, lr}
	handler();
   22826:	f7f1 fb19 	bl	13e5c <z_SysNmiOnReset>
	z_arm_int_exit();
   2282a:	f7f1 fc15 	bl	14058 <z_arm_exc_exit>
}
   2282e:	bd08      	pop	{r3, pc}

00022830 <memory_fault_recoverable>:
}
   22830:	2000      	movs	r0, #0
   22832:	4770      	bx	lr

00022834 <debug_monitor>:
	*recoverable = false;
   22834:	2300      	movs	r3, #0
   22836:	700b      	strb	r3, [r1, #0]
}
   22838:	4770      	bx	lr

0002283a <fault_handle>:
{
   2283a:	b508      	push	{r3, lr}
	*recoverable = false;
   2283c:	2300      	movs	r3, #0
   2283e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   22840:	1ecb      	subs	r3, r1, #3
   22842:	2b09      	cmp	r3, #9
   22844:	d81a      	bhi.n	2287c <fault_handle+0x42>
   22846:	e8df f003 	tbb	[pc, r3]
   2284a:	0905      	.short	0x0905
   2284c:	1919110d 	.word	0x1919110d
   22850:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   22854:	4611      	mov	r1, r2
   22856:	f7f1 fc8f 	bl	14178 <hard_fault>
		break;
   2285a:	e010      	b.n	2287e <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   2285c:	2100      	movs	r1, #0
   2285e:	f7f1 fc45 	bl	140ec <mem_manage_fault>
		break;
   22862:	e00c      	b.n	2287e <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   22864:	2100      	movs	r1, #0
   22866:	f7f1 fc05 	bl	14074 <bus_fault>
		break;
   2286a:	e008      	b.n	2287e <fault_handle+0x44>
		reason = usage_fault(esf);
   2286c:	f7f1 fc2c 	bl	140c8 <usage_fault>
		break;
   22870:	e005      	b.n	2287e <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   22872:	4611      	mov	r1, r2
   22874:	f7ff ffde 	bl	22834 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   22878:	2000      	movs	r0, #0
		break;
   2287a:	e000      	b.n	2287e <fault_handle+0x44>
	*recoverable = false;
   2287c:	2000      	movs	r0, #0
}
   2287e:	bd08      	pop	{r3, pc}

00022880 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   22880:	6843      	ldr	r3, [r0, #4]
   22882:	1e5a      	subs	r2, r3, #1
		&&
   22884:	4213      	tst	r3, r2
   22886:	d106      	bne.n	22896 <mpu_partition_is_valid+0x16>
		&&
   22888:	2b1f      	cmp	r3, #31
   2288a:	d906      	bls.n	2289a <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   2288c:	6803      	ldr	r3, [r0, #0]
		&&
   2288e:	421a      	tst	r2, r3
   22890:	d005      	beq.n	2289e <mpu_partition_is_valid+0x1e>
   22892:	2000      	movs	r0, #0
   22894:	4770      	bx	lr
   22896:	2000      	movs	r0, #0
   22898:	4770      	bx	lr
   2289a:	2000      	movs	r0, #0
   2289c:	4770      	bx	lr
   2289e:	2001      	movs	r0, #1
}
   228a0:	4770      	bx	lr

000228a2 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   228a2:	2807      	cmp	r0, #7
   228a4:	d805      	bhi.n	228b2 <region_allocate_and_init+0x10>
{
   228a6:	b510      	push	{r4, lr}
   228a8:	4604      	mov	r4, r0
	region_init(index, region_conf);
   228aa:	f7f1 fdb7 	bl	1441c <region_init>
	return index;
   228ae:	4620      	mov	r0, r4
}
   228b0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   228b2:	f06f 0015 	mvn.w	r0, #21
}
   228b6:	4770      	bx	lr

000228b8 <mpu_configure_region>:
{
   228b8:	b500      	push	{lr}
   228ba:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   228bc:	680b      	ldr	r3, [r1, #0]
   228be:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   228c0:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   228c2:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   228c4:	2b20      	cmp	r3, #32
   228c6:	d912      	bls.n	228ee <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   228c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   228cc:	d811      	bhi.n	228f2 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   228ce:	3b01      	subs	r3, #1
   228d0:	fab3 f383 	clz	r3, r3
   228d4:	f1c3 031f 	rsb	r3, r3, #31
   228d8:	005b      	lsls	r3, r3, #1
   228da:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   228de:	4313      	orrs	r3, r2
   228e0:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   228e2:	a901      	add	r1, sp, #4
   228e4:	f7ff ffdd 	bl	228a2 <region_allocate_and_init>
}
   228e8:	b005      	add	sp, #20
   228ea:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   228ee:	2308      	movs	r3, #8
   228f0:	e7f5      	b.n	228de <mpu_configure_region+0x26>
		return REGION_4G;
   228f2:	233e      	movs	r3, #62	; 0x3e
   228f4:	e7f3      	b.n	228de <mpu_configure_region+0x26>

000228f6 <mpu_configure_regions>:
{
   228f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   228fa:	4680      	mov	r8, r0
   228fc:	460f      	mov	r7, r1
   228fe:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
   22900:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
   22902:	2500      	movs	r5, #0
   22904:	e009      	b.n	2291a <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   22906:	4621      	mov	r1, r4
   22908:	b2f0      	uxtb	r0, r6
   2290a:	f7ff ffd5 	bl	228b8 <mpu_configure_region>
   2290e:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
   22910:	f110 0f16 	cmn.w	r0, #22
   22914:	d014      	beq.n	22940 <mpu_configure_regions+0x4a>
		reg_index++;
   22916:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   22918:	3501      	adds	r5, #1
   2291a:	42bd      	cmp	r5, r7
   2291c:	da10      	bge.n	22940 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   2291e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   22922:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   22926:	6862      	ldr	r2, [r4, #4]
   22928:	2a00      	cmp	r2, #0
   2292a:	d0f5      	beq.n	22918 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   2292c:	f1b9 0f00 	cmp.w	r9, #0
   22930:	d0e9      	beq.n	22906 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   22932:	4620      	mov	r0, r4
   22934:	f7ff ffa4 	bl	22880 <mpu_partition_is_valid>
		if (do_sanity_check &&
   22938:	2800      	cmp	r0, #0
   2293a:	d1e4      	bne.n	22906 <mpu_configure_regions+0x10>
			return -EINVAL;
   2293c:	f06f 0615 	mvn.w	r6, #21
}
   22940:	4630      	mov	r0, r6
   22942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00022946 <arm_core_mpu_configure_static_mpu_regions>:
{
   22946:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   22948:	f7f1 fd78 	bl	1443c <mpu_configure_static_mpu_regions>
}
   2294c:	bd08      	pop	{r3, pc}

0002294e <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   2294e:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   22950:	f7f1 fd7e 	bl	14450 <mpu_configure_dynamic_mpu_regions>
}
   22954:	bd08      	pop	{r3, pc}

00022956 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   22956:	4602      	mov	r2, r0
   22958:	780b      	ldrb	r3, [r1, #0]
   2295a:	b11b      	cbz	r3, 22964 <strcpy+0xe>
		*d = *s;
   2295c:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   22960:	3101      	adds	r1, #1
   22962:	e7f9      	b.n	22958 <strcpy+0x2>
	}

	*d = '\0';
   22964:	7013      	strb	r3, [r2, #0]

	return dest;
}
   22966:	4770      	bx	lr

00022968 <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   22968:	4603      	mov	r3, r0
   2296a:	b1a2      	cbz	r2, 22996 <strncpy+0x2e>
{
   2296c:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   2296e:	780c      	ldrb	r4, [r1, #0]
   22970:	b12c      	cbz	r4, 2297e <strncpy+0x16>
		*d = *s;
   22972:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   22976:	3101      	adds	r1, #1
		d++;
		n--;
   22978:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   2297a:	2a00      	cmp	r2, #0
   2297c:	d1f7      	bne.n	2296e <strncpy+0x6>
	}

	while (n > 0) {
   2297e:	b122      	cbz	r2, 2298a <strncpy+0x22>
		*d = '\0';
   22980:	2100      	movs	r1, #0
   22982:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   22986:	3a01      	subs	r2, #1
   22988:	e7f9      	b.n	2297e <strncpy+0x16>
	}

	return dest;
}
   2298a:	bc10      	pop	{r4}
   2298c:	4770      	bx	lr
		*d = '\0';
   2298e:	2100      	movs	r1, #0
   22990:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   22994:	3a01      	subs	r2, #1
	while (n > 0) {
   22996:	2a00      	cmp	r2, #0
   22998:	d1f9      	bne.n	2298e <strncpy+0x26>
   2299a:	4770      	bx	lr

0002299c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2299c:	4603      	mov	r3, r0
	size_t n = 0;
   2299e:	2000      	movs	r0, #0

	while (*s != '\0') {
   229a0:	781a      	ldrb	r2, [r3, #0]
   229a2:	b112      	cbz	r2, 229aa <strlen+0xe>
		s++;
   229a4:	3301      	adds	r3, #1
		n++;
   229a6:	3001      	adds	r0, #1
   229a8:	e7fa      	b.n	229a0 <strlen+0x4>
	}

	return n;
}
   229aa:	4770      	bx	lr

000229ac <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   229ac:	4603      	mov	r3, r0
	size_t n = 0;
   229ae:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   229b0:	781a      	ldrb	r2, [r3, #0]
   229b2:	b122      	cbz	r2, 229be <strnlen+0x12>
   229b4:	4288      	cmp	r0, r1
   229b6:	d202      	bcs.n	229be <strnlen+0x12>
		s++;
   229b8:	3301      	adds	r3, #1
		n++;
   229ba:	3001      	adds	r0, #1
   229bc:	e7f8      	b.n	229b0 <strnlen+0x4>
	}

	return n;
}
   229be:	4770      	bx	lr

000229c0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   229c0:	7803      	ldrb	r3, [r0, #0]
   229c2:	780a      	ldrb	r2, [r1, #0]
   229c4:	4293      	cmp	r3, r2
   229c6:	d103      	bne.n	229d0 <strcmp+0x10>
   229c8:	b113      	cbz	r3, 229d0 <strcmp+0x10>
		s1++;
   229ca:	3001      	adds	r0, #1
		s2++;
   229cc:	3101      	adds	r1, #1
   229ce:	e7f7      	b.n	229c0 <strcmp>
	}

	return *s1 - *s2;
}
   229d0:	1a98      	subs	r0, r3, r2
   229d2:	4770      	bx	lr

000229d4 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   229d4:	b17a      	cbz	r2, 229f6 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   229d6:	1e53      	subs	r3, r2, #1
   229d8:	d00f      	beq.n	229fa <memcmp+0x26>
{
   229da:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   229dc:	7804      	ldrb	r4, [r0, #0]
   229de:	780a      	ldrb	r2, [r1, #0]
   229e0:	4294      	cmp	r4, r2
   229e2:	d103      	bne.n	229ec <memcmp+0x18>
		c1++;
   229e4:	3001      	adds	r0, #1
		c2++;
   229e6:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   229e8:	3b01      	subs	r3, #1
   229ea:	d1f7      	bne.n	229dc <memcmp+0x8>
	}

	return *c1 - *c2;
   229ec:	7800      	ldrb	r0, [r0, #0]
   229ee:	780b      	ldrb	r3, [r1, #0]
   229f0:	1ac0      	subs	r0, r0, r3
}
   229f2:	bc10      	pop	{r4}
   229f4:	4770      	bx	lr
		return 0;
   229f6:	2000      	movs	r0, #0
   229f8:	4770      	bx	lr
	return *c1 - *c2;
   229fa:	7800      	ldrb	r0, [r0, #0]
   229fc:	780b      	ldrb	r3, [r1, #0]
   229fe:	1ac0      	subs	r0, r0, r3
}
   22a00:	4770      	bx	lr

00022a02 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   22a02:	1a43      	subs	r3, r0, r1
   22a04:	4293      	cmp	r3, r2
   22a06:	d30b      	bcc.n	22a20 <memmove+0x1e>
	char *dest = d;
   22a08:	4603      	mov	r3, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   22a0a:	b17a      	cbz	r2, 22a2c <memmove+0x2a>
{
   22a0c:	b410      	push	{r4}
			*dest = *src;
   22a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   22a12:	f803 4b01 	strb.w	r4, [r3], #1
			dest++;
			src++;
			n--;
   22a16:	3a01      	subs	r2, #1
		while (n > 0) {
   22a18:	2a00      	cmp	r2, #0
   22a1a:	d1f8      	bne.n	22a0e <memmove+0xc>
		}
	}

	return d;
}
   22a1c:	bc10      	pop	{r4}
   22a1e:	4770      	bx	lr
		while (n > 0) {
   22a20:	b11a      	cbz	r2, 22a2a <memmove+0x28>
			n--;
   22a22:	3a01      	subs	r2, #1
			dest[n] = src[n];
   22a24:	5c8b      	ldrb	r3, [r1, r2]
   22a26:	5483      	strb	r3, [r0, r2]
   22a28:	e7fa      	b.n	22a20 <memmove+0x1e>
   22a2a:	4770      	bx	lr
   22a2c:	4770      	bx	lr

00022a2e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   22a2e:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   22a30:	ea80 0301 	eor.w	r3, r0, r1
   22a34:	f013 0f03 	tst.w	r3, #3
   22a38:	d001      	beq.n	22a3e <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   22a3a:	4603      	mov	r3, r0
   22a3c:	e017      	b.n	22a6e <memcpy+0x40>
   22a3e:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   22a40:	f013 0f03 	tst.w	r3, #3
   22a44:	d00b      	beq.n	22a5e <memcpy+0x30>
			if (n == 0) {
   22a46:	b1a2      	cbz	r2, 22a72 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   22a48:	f811 4b01 	ldrb.w	r4, [r1], #1
   22a4c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   22a50:	3a01      	subs	r2, #1
   22a52:	e7f5      	b.n	22a40 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   22a54:	f851 4b04 	ldr.w	r4, [r1], #4
   22a58:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   22a5c:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   22a5e:	2a03      	cmp	r2, #3
   22a60:	d8f8      	bhi.n	22a54 <memcpy+0x26>
   22a62:	e004      	b.n	22a6e <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   22a64:	f811 4b01 	ldrb.w	r4, [r1], #1
   22a68:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   22a6c:	3a01      	subs	r2, #1
	while (n > 0) {
   22a6e:	2a00      	cmp	r2, #0
   22a70:	d1f8      	bne.n	22a64 <memcpy+0x36>
	}

	return d;
}
   22a72:	bc10      	pop	{r4}
   22a74:	4770      	bx	lr

00022a76 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   22a76:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   22a78:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   22a7a:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   22a7c:	f013 0f03 	tst.w	r3, #3
   22a80:	d004      	beq.n	22a8c <memset+0x16>
		if (n == 0) {
   22a82:	b19a      	cbz	r2, 22aac <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   22a84:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   22a88:	3a01      	subs	r2, #1
   22a8a:	e7f7      	b.n	22a7c <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   22a8c:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   22a8e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   22a92:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   22a96:	2a03      	cmp	r2, #3
   22a98:	d906      	bls.n	22aa8 <memset+0x32>
		*(d_word++) = c_word;
   22a9a:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   22a9e:	3a04      	subs	r2, #4
   22aa0:	e7f9      	b.n	22a96 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   22aa2:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   22aa6:	3a01      	subs	r2, #1
	while (n > 0) {
   22aa8:	2a00      	cmp	r2, #0
   22aaa:	d1fa      	bne.n	22aa2 <memset+0x2c>
	}

	return buf;
}
   22aac:	bc10      	pop	{r4}
   22aae:	4770      	bx	lr

00022ab0 <_stdout_hook_default>:
}
   22ab0:	f04f 30ff 	mov.w	r0, #4294967295
   22ab4:	4770      	bx	lr

00022ab6 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   22ab6:	b084      	sub	sp, #16
   22ab8:	ab04      	add	r3, sp, #16
   22aba:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   22abe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   22ac2:	2b06      	cmp	r3, #6
   22ac4:	d001      	beq.n	22aca <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   22ac6:	b004      	add	sp, #16
   22ac8:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   22aca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22ace:	2201      	movs	r2, #1
   22ad0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   22ad4:	f3bf 8f4f 	dsb	sy
        __WFE();
   22ad8:	bf20      	wfe
    while (true)
   22ada:	e7fd      	b.n	22ad8 <pm_power_state_set+0x22>

00022adc <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   22adc:	b084      	sub	sp, #16
   22ade:	ab04      	add	r3, sp, #16
   22ae0:	e903 0007 	stmdb	r3, {r0, r1, r2}
   22ae4:	2300      	movs	r3, #0
   22ae6:	f383 8811 	msr	BASEPRI, r3
   22aea:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   22aee:	b004      	add	sp, #16
   22af0:	4770      	bx	lr

00022af2 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   22af2:	b510      	push	{r4, lr}
   22af4:	b08a      	sub	sp, #40	; 0x28
   22af6:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   22af8:	a905      	add	r1, sp, #20
   22afa:	f7f1 fd75 	bl	145e8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   22afe:	4669      	mov	r1, sp
   22b00:	4620      	mov	r0, r4
   22b02:	f7f1 fd71 	bl	145e8 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   22b06:	2210      	movs	r2, #16
   22b08:	f10d 0101 	add.w	r1, sp, #1
   22b0c:	f10d 0015 	add.w	r0, sp, #21
   22b10:	f7ff ff60 	bl	229d4 <memcmp>
}
   22b14:	b00a      	add	sp, #40	; 0x28
   22b16:	bd10      	pop	{r4, pc}

00022b18 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   22b18:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   22b1a:	7803      	ldrb	r3, [r0, #0]
   22b1c:	780a      	ldrb	r2, [r1, #0]
   22b1e:	4293      	cmp	r3, r2
   22b20:	d107      	bne.n	22b32 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   22b22:	2b01      	cmp	r3, #1
   22b24:	d00c      	beq.n	22b40 <bt_uuid_cmp+0x28>
   22b26:	2b02      	cmp	r3, #2
   22b28:	d00e      	beq.n	22b48 <bt_uuid_cmp+0x30>
   22b2a:	b12b      	cbz	r3, 22b38 <bt_uuid_cmp+0x20>
   22b2c:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   22b30:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   22b32:	f7ff ffde 	bl	22af2 <uuid128_cmp>
   22b36:	e7fb      	b.n	22b30 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   22b38:	8840      	ldrh	r0, [r0, #2]
   22b3a:	884b      	ldrh	r3, [r1, #2]
   22b3c:	1ac0      	subs	r0, r0, r3
   22b3e:	e7f7      	b.n	22b30 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   22b40:	6840      	ldr	r0, [r0, #4]
   22b42:	684b      	ldr	r3, [r1, #4]
   22b44:	1ac0      	subs	r0, r0, r3
   22b46:	e7f3      	b.n	22b30 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   22b48:	2210      	movs	r2, #16
   22b4a:	3101      	adds	r1, #1
   22b4c:	3001      	adds	r0, #1
   22b4e:	f7ff ff41 	bl	229d4 <memcmp>
   22b52:	e7ed      	b.n	22b30 <bt_uuid_cmp+0x18>

00022b54 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   22b54:	b538      	push	{r3, r4, r5, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   22b56:	2a04      	cmp	r2, #4
   22b58:	d00e      	beq.n	22b78 <bt_uuid_create+0x24>
   22b5a:	2a10      	cmp	r2, #16
   22b5c:	d01b      	beq.n	22b96 <bt_uuid_create+0x42>
   22b5e:	2a02      	cmp	r2, #2
   22b60:	d001      	beq.n	22b66 <bt_uuid_create+0x12>
   22b62:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   22b64:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_16;
   22b66:	2300      	movs	r3, #0
   22b68:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   22b6a:	784a      	ldrb	r2, [r1, #1]
   22b6c:	780b      	ldrb	r3, [r1, #0]
   22b6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   22b72:	8043      	strh	r3, [r0, #2]
	return true;
   22b74:	2001      	movs	r0, #1
		break;
   22b76:	e7f5      	b.n	22b64 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   22b78:	2301      	movs	r3, #1
   22b7a:	7003      	strb	r3, [r0, #0]
   22b7c:	78cc      	ldrb	r4, [r1, #3]
   22b7e:	788a      	ldrb	r2, [r1, #2]
   22b80:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
   22b84:	784d      	ldrb	r5, [r1, #1]
   22b86:	780a      	ldrb	r2, [r1, #0]
   22b88:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   22b8c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   22b90:	6042      	str	r2, [r0, #4]
	return true;
   22b92:	4618      	mov	r0, r3
		break;
   22b94:	e7e6      	b.n	22b64 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   22b96:	2302      	movs	r3, #2
   22b98:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   22b9c:	2210      	movs	r2, #16
   22b9e:	f7ff ff46 	bl	22a2e <memcpy>
	return true;
   22ba2:	2001      	movs	r0, #1
		break;
   22ba4:	e7de      	b.n	22b64 <bt_uuid_create+0x10>

00022ba6 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   22ba6:	b510      	push	{r4, lr}
   22ba8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   22baa:	2301      	movs	r3, #1
   22bac:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   22bb0:	2106      	movs	r1, #6
   22bb2:	f7f7 fd15 	bl	1a5e0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   22bb6:	b918      	cbnz	r0, 22bc0 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   22bb8:	79a3      	ldrb	r3, [r4, #6]
   22bba:	f063 033f 	orn	r3, r3, #63	; 0x3f
   22bbe:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   22bc0:	bd10      	pop	{r4, pc}

00022bc2 <hci_data_buf_overflow>:
}
   22bc2:	4770      	bx	lr

00022bc4 <hci_vendor_event>:
}
   22bc4:	4770      	bx	lr

00022bc6 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   22bc6:	b108      	cbz	r0, 22bcc <find_pending_connect+0x6>
	return NULL;
   22bc8:	2000      	movs	r0, #0
}
   22bca:	4770      	bx	lr
{
   22bcc:	b508      	push	{r3, lr}
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   22bce:	2206      	movs	r2, #6
   22bd0:	f7f3 fc9e 	bl	16510 <bt_conn_lookup_state_le>
}
   22bd4:	bd08      	pop	{r3, pc}

00022bd6 <le_conn_complete_cancel>:
{
   22bd6:	b510      	push	{r4, lr}
	conn = find_pending_connect(BT_HCI_ROLE_CENTRAL, NULL);
   22bd8:	2100      	movs	r1, #0
   22bda:	4608      	mov	r0, r1
   22bdc:	f7ff fff3 	bl	22bc6 <find_pending_connect>
	if (!conn) {
   22be0:	b180      	cbz	r0, 22c04 <le_conn_complete_cancel+0x2e>
   22be2:	4604      	mov	r4, r0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   22be4:	2302      	movs	r3, #2
   22be6:	7243      	strb	r3, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   22be8:	2100      	movs	r1, #0
   22bea:	f7f3 fb0f 	bl	1620c <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22bee:	f3bf 8f5b 	dmb	ish
   22bf2:	6863      	ldr	r3, [r4, #4]
   22bf4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   22bf8:	f013 0f01 	tst.w	r3, #1
   22bfc:	d103      	bne.n	22c06 <le_conn_complete_cancel+0x30>
	bt_conn_unref(conn);
   22bfe:	4620      	mov	r0, r4
   22c00:	f000 fdee 	bl	237e0 <bt_conn_unref>
}
   22c04:	bd10      	pop	{r4, pc}
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   22c06:	2102      	movs	r1, #2
   22c08:	4620      	mov	r0, r4
   22c0a:	f7f3 faff 	bl	1620c <bt_conn_set_state>
   22c0e:	e7f6      	b.n	22bfe <le_conn_complete_cancel+0x28>

00022c10 <hci_disconn_complete_prio>:
{
   22c10:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   22c12:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   22c14:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   22c18:	781b      	ldrb	r3, [r3, #0]
   22c1a:	b103      	cbz	r3, 22c1e <hci_disconn_complete_prio+0xe>
}
   22c1c:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   22c1e:	4620      	mov	r0, r4
   22c20:	f7f3 faea 	bl	161f8 <bt_conn_lookup_handle>
	if (!conn) {
   22c24:	4605      	mov	r5, r0
   22c26:	b130      	cbz	r0, 22c36 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   22c28:	2101      	movs	r1, #1
   22c2a:	f7f3 faef 	bl	1620c <bt_conn_set_state>
	bt_conn_unref(conn);
   22c2e:	4628      	mov	r0, r5
   22c30:	f000 fdd6 	bl	237e0 <bt_conn_unref>
   22c34:	e7f2      	b.n	22c1c <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   22c36:	4620      	mov	r0, r4
   22c38:	f7f1 fd64 	bl	14704 <conn_handle_disconnected>
		return;
   22c3c:	e7ee      	b.n	22c1c <hci_disconn_complete_prio+0xc>

00022c3e <hci_disconn_complete>:
{
   22c3e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   22c40:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   22c42:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	if (evt->status) {
   22c46:	7823      	ldrb	r3, [r4, #0]
   22c48:	b103      	cbz	r3, 22c4c <hci_disconn_complete+0xe>
}
   22c4a:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   22c4c:	f7f3 fad4 	bl	161f8 <bt_conn_lookup_handle>
	if (!conn) {
   22c50:	4605      	mov	r5, r0
   22c52:	2800      	cmp	r0, #0
   22c54:	d0f9      	beq.n	22c4a <hci_disconn_complete+0xc>
	conn->err = evt->reason;
   22c56:	78e3      	ldrb	r3, [r4, #3]
   22c58:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   22c5a:	2100      	movs	r1, #0
   22c5c:	f7f3 fad6 	bl	1620c <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   22c60:	78ab      	ldrb	r3, [r5, #2]
   22c62:	2b01      	cmp	r3, #1
   22c64:	d003      	beq.n	22c6e <hci_disconn_complete+0x30>
		bt_conn_unref(conn);
   22c66:	4628      	mov	r0, r5
   22c68:	f000 fdba 	bl	237e0 <bt_conn_unref>
		return;
   22c6c:	e7ed      	b.n	22c4a <hci_disconn_complete+0xc>
   22c6e:	f3bf 8f5b 	dmb	ish
   22c72:	686b      	ldr	r3, [r5, #4]
   22c74:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   22c78:	f013 0f01 	tst.w	r3, #1
   22c7c:	d103      	bne.n	22c86 <hci_disconn_complete+0x48>
	bt_conn_unref(conn);
   22c7e:	4628      	mov	r0, r5
   22c80:	f000 fdae 	bl	237e0 <bt_conn_unref>
   22c84:	e7e1      	b.n	22c4a <hci_disconn_complete+0xc>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   22c86:	2102      	movs	r1, #2
   22c88:	4628      	mov	r0, r5
   22c8a:	f7f3 fabf 	bl	1620c <bt_conn_set_state>
		bt_le_scan_update(false);
   22c8e:	2000      	movs	r0, #0
   22c90:	f7f2 ffd4 	bl	15c3c <bt_le_scan_update>
   22c94:	e7f3      	b.n	22c7e <hci_disconn_complete+0x40>

00022c96 <le_data_len_change>:
{
   22c96:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   22c98:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   22c9a:	8818      	ldrh	r0, [r3, #0]
   22c9c:	f7f3 faac 	bl	161f8 <bt_conn_lookup_handle>
	if (!conn) {
   22ca0:	b108      	cbz	r0, 22ca6 <le_data_len_change+0x10>
	bt_conn_unref(conn);
   22ca2:	f000 fd9d 	bl	237e0 <bt_conn_unref>
}
   22ca6:	bd08      	pop	{r3, pc}

00022ca8 <hci_num_completed_packets>:
{
   22ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   22cac:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   22cb0:	2700      	movs	r7, #0
   22cb2:	e04f      	b.n	22d54 <hci_num_completed_packets+0xac>
				conn->pending_no_cb--;
   22cb4:	3b01      	subs	r3, #1
   22cb6:	61e3      	str	r3, [r4, #28]
   22cb8:	f382 8811 	msr	BASEPRI, r2
   22cbc:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   22cc0:	4620      	mov	r0, r4
   22cc2:	f7f3 fa35 	bl	16130 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   22cc6:	f7fa fadd 	bl	1d284 <z_impl_k_sem_give>
				continue;
   22cca:	e024      	b.n	22d16 <hci_num_completed_packets+0x6e>
	list->tail = node;
   22ccc:	61a1      	str	r1, [r4, #24]
   22cce:	f382 8811 	msr	BASEPRI, r2
   22cd2:	f3bf 8f6f 	isb	sy
			if (!node) {
   22cd6:	2b00      	cmp	r3, #0
   22cd8:	d038      	beq.n	22d4c <hci_num_completed_packets+0xa4>
	__asm__ volatile(
   22cda:	f04f 0240 	mov.w	r2, #64	; 0x40
   22cde:	f3ef 8111 	mrs	r1, BASEPRI
   22ce2:	f382 8812 	msr	BASEPRI_MAX, r2
   22ce6:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   22cea:	68da      	ldr	r2, [r3, #12]
   22cec:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   22cee:	2200      	movs	r2, #0
   22cf0:	60da      	str	r2, [r3, #12]
	parent->next = child;
   22cf2:	601a      	str	r2, [r3, #0]
	return list->tail;
   22cf4:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   22cf6:	b332      	cbz	r2, 22d46 <hci_num_completed_packets+0x9e>
	parent->next = child;
   22cf8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   22cfa:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   22cfc:	f381 8811 	msr	BASEPRI, r1
   22d00:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   22d04:	f104 0028 	add.w	r0, r4, #40	; 0x28
   22d08:	f7fa fc86 	bl	1d618 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   22d0c:	4620      	mov	r0, r4
   22d0e:	f7f3 fa0f 	bl	16130 <bt_conn_get_pkts>
   22d12:	f7fa fab7 	bl	1d284 <z_impl_k_sem_give>
{
   22d16:	462e      	mov	r6, r5
		while (count--) {
   22d18:	1e75      	subs	r5, r6, #1
   22d1a:	b2ad      	uxth	r5, r5
   22d1c:	b1b6      	cbz	r6, 22d4c <hci_num_completed_packets+0xa4>
	__asm__ volatile(
   22d1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d22:	f3ef 8211 	mrs	r2, BASEPRI
   22d26:	f383 8812 	msr	BASEPRI_MAX, r3
   22d2a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   22d2e:	69e3      	ldr	r3, [r4, #28]
   22d30:	2b00      	cmp	r3, #0
   22d32:	d1bf      	bne.n	22cb4 <hci_num_completed_packets+0xc>
	return list->head;
   22d34:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   22d36:	2b00      	cmp	r3, #0
   22d38:	d0c9      	beq.n	22cce <hci_num_completed_packets+0x26>
	return node->next;
   22d3a:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   22d3c:	6161      	str	r1, [r4, #20]
	return list->tail;
   22d3e:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22d40:	4298      	cmp	r0, r3
   22d42:	d1c4      	bne.n	22cce <hci_num_completed_packets+0x26>
   22d44:	e7c2      	b.n	22ccc <hci_num_completed_packets+0x24>
	list->tail = node;
   22d46:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   22d48:	6223      	str	r3, [r4, #32]
}
   22d4a:	e7d7      	b.n	22cfc <hci_num_completed_packets+0x54>
		bt_conn_unref(conn);
   22d4c:	4620      	mov	r0, r4
   22d4e:	f000 fd47 	bl	237e0 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   22d52:	3701      	adds	r7, #1
   22d54:	f898 3000 	ldrb.w	r3, [r8]
   22d58:	429f      	cmp	r7, r3
   22d5a:	da0b      	bge.n	22d74 <hci_num_completed_packets+0xcc>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   22d5c:	eb08 0387 	add.w	r3, r8, r7, lsl #2
		count = sys_le16_to_cpu(evt->h[i].count);
   22d60:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   22d64:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   22d68:	f7f3 fa46 	bl	161f8 <bt_conn_lookup_handle>
		if (!conn) {
   22d6c:	4604      	mov	r4, r0
   22d6e:	2800      	cmp	r0, #0
   22d70:	d1d2      	bne.n	22d18 <hci_num_completed_packets+0x70>
   22d72:	e7ee      	b.n	22d52 <hci_num_completed_packets+0xaa>
}
   22d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022d78 <hci_hardware_error>:
{
   22d78:	b508      	push	{r3, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
   22d7a:	2101      	movs	r1, #1
   22d7c:	3008      	adds	r0, #8
   22d7e:	f003 f853 	bl	25e28 <net_buf_simple_pull_mem>
}
   22d82:	bd08      	pop	{r3, pc}

00022d84 <le_conn_update_complete>:
{
   22d84:	b530      	push	{r4, r5, lr}
   22d86:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   22d88:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   22d8a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   22d8e:	f7f3 fa33 	bl	161f8 <bt_conn_lookup_handle>
	if (!conn) {
   22d92:	b138      	cbz	r0, 22da4 <le_conn_update_complete+0x20>
   22d94:	4605      	mov	r5, r0
	if (!evt->status) {
   22d96:	7823      	ldrb	r3, [r4, #0]
   22d98:	b133      	cbz	r3, 22da8 <le_conn_update_complete+0x24>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   22d9a:	2b1a      	cmp	r3, #26
   22d9c:	d013      	beq.n	22dc6 <le_conn_update_complete+0x42>
	bt_conn_unref(conn);
   22d9e:	4628      	mov	r0, r5
   22da0:	f000 fd1e 	bl	237e0 <bt_conn_unref>
}
   22da4:	b003      	add	sp, #12
   22da6:	bd30      	pop	{r4, r5, pc}
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   22da8:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   22dac:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   22db0:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   22db4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   22db8:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   22dbc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   22dc0:	f7f3 faf4 	bl	163ac <notify_le_param_updated>
   22dc4:	e7eb      	b.n	22d9e <le_conn_update_complete+0x1a>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   22dc6:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   22dc8:	2b01      	cmp	r3, #1
   22dca:	d1e8      	bne.n	22d9e <le_conn_update_complete+0x1a>
		   !atomic_test_and_set_bit(conn->flags,
   22dcc:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22dce:	f3bf 8f5b 	dmb	ish
   22dd2:	e853 2f00 	ldrex	r2, [r3]
   22dd6:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   22dda:	e843 1000 	strex	r0, r1, [r3]
   22dde:	2800      	cmp	r0, #0
   22de0:	d1f7      	bne.n	22dd2 <le_conn_update_complete+0x4e>
   22de2:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   22de6:	f412 6f80 	tst.w	r2, #1024	; 0x400
   22dea:	d1d8      	bne.n	22d9e <le_conn_update_complete+0x1a>
		param.interval_min = conn->le.interval_min;
   22dec:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   22df0:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   22df4:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   22df8:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   22dfc:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   22e00:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   22e04:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   22e08:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   22e0c:	4669      	mov	r1, sp
   22e0e:	4628      	mov	r0, r5
   22e10:	f000 ff84 	bl	23d1c <bt_l2cap_update_conn_param>
   22e14:	e7c3      	b.n	22d9e <le_conn_update_complete+0x1a>

00022e16 <hci_le_read_max_data_len>:
{
   22e16:	b570      	push	{r4, r5, r6, lr}
   22e18:	b082      	sub	sp, #8
   22e1a:	4605      	mov	r5, r0
   22e1c:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   22e1e:	aa01      	add	r2, sp, #4
   22e20:	2100      	movs	r1, #0
   22e22:	f242 002f 	movw	r0, #8239	; 0x202f
   22e26:	f7f1 ff03 	bl	14c30 <bt_hci_cmd_send_sync>
	if (err) {
   22e2a:	4606      	mov	r6, r0
   22e2c:	b110      	cbz	r0, 22e34 <hci_le_read_max_data_len+0x1e>
}
   22e2e:	4630      	mov	r0, r6
   22e30:	b002      	add	sp, #8
   22e32:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   22e34:	9801      	ldr	r0, [sp, #4]
   22e36:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   22e38:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   22e3c:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   22e3e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   22e42:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   22e44:	f002 ff7c 	bl	25d40 <net_buf_unref>
	return 0;
   22e48:	e7f1      	b.n	22e2e <hci_le_read_max_data_len+0x18>

00022e4a <set_event_mask>:
{
   22e4a:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   22e4c:	2108      	movs	r1, #8
   22e4e:	f640 4001 	movw	r0, #3073	; 0xc01
   22e52:	f7f1 feb1 	bl	14bb8 <bt_hci_cmd_create>
	if (!buf) {
   22e56:	b1b8      	cbz	r0, 22e88 <set_event_mask+0x3e>
   22e58:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   22e5a:	2108      	movs	r1, #8
   22e5c:	4408      	add	r0, r1
   22e5e:	f002 ffb9 	bl	25dd4 <net_buf_simple_add>
	dst[0] = val;
   22e62:	2310      	movs	r3, #16
   22e64:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   22e66:	2388      	movs	r3, #136	; 0x88
   22e68:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   22e6a:	2200      	movs	r2, #0
   22e6c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   22e6e:	2302      	movs	r3, #2
   22e70:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   22e72:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   22e74:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   22e76:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   22e78:	2320      	movs	r3, #32
   22e7a:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   22e7c:	4621      	mov	r1, r4
   22e7e:	f640 4001 	movw	r0, #3073	; 0xc01
   22e82:	f7f1 fed5 	bl	14c30 <bt_hci_cmd_send_sync>
}
   22e86:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   22e88:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22e8c:	e7fb      	b.n	22e86 <set_event_mask+0x3c>

00022e8e <bt_le_create_conn>:
{
   22e8e:	b508      	push	{r3, lr}
	return bt_le_create_conn_legacy(conn);
   22e90:	f7f2 f8d4 	bl	1503c <bt_le_create_conn_legacy>
}
   22e94:	bd08      	pop	{r3, pc}

00022e96 <bt_hci_disconnect>:
{
   22e96:	b570      	push	{r4, r5, r6, lr}
   22e98:	4605      	mov	r5, r0
   22e9a:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   22e9c:	2103      	movs	r1, #3
   22e9e:	f240 4006 	movw	r0, #1030	; 0x406
   22ea2:	f7f1 fe89 	bl	14bb8 <bt_hci_cmd_create>
	if (!buf) {
   22ea6:	b168      	cbz	r0, 22ec4 <bt_hci_disconnect+0x2e>
   22ea8:	4606      	mov	r6, r0
   22eaa:	2103      	movs	r1, #3
   22eac:	3008      	adds	r0, #8
   22eae:	f002 ff91 	bl	25dd4 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   22eb2:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   22eb4:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   22eb6:	2200      	movs	r2, #0
   22eb8:	4631      	mov	r1, r6
   22eba:	f240 4006 	movw	r0, #1030	; 0x406
   22ebe:	f7f1 feb7 	bl	14c30 <bt_hci_cmd_send_sync>
}
   22ec2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   22ec4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22ec8:	e7fb      	b.n	22ec2 <bt_hci_disconnect+0x2c>

00022eca <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   22eca:	8802      	ldrh	r2, [r0, #0]
   22ecc:	8843      	ldrh	r3, [r0, #2]
   22ece:	429a      	cmp	r2, r3
   22ed0:	d819      	bhi.n	22f06 <bt_le_conn_params_valid+0x3c>
   22ed2:	2a05      	cmp	r2, #5
   22ed4:	d919      	bls.n	22f0a <bt_le_conn_params_valid+0x40>
	    param->interval_min < 6 || param->interval_max > 3200) {
   22ed6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   22eda:	d818      	bhi.n	22f0e <bt_le_conn_params_valid+0x44>
	if (param->latency > 499) {
   22edc:	8881      	ldrh	r1, [r0, #4]
   22ede:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   22ee2:	d216      	bcs.n	22f12 <bt_le_conn_params_valid+0x48>
{
   22ee4:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
   22ee6:	88c0      	ldrh	r0, [r0, #6]
   22ee8:	f1a0 020a 	sub.w	r2, r0, #10
   22eec:	b292      	uxth	r2, r2
   22eee:	f640 4476 	movw	r4, #3190	; 0xc76
   22ef2:	42a2      	cmp	r2, r4
   22ef4:	d80f      	bhi.n	22f16 <bt_le_conn_params_valid+0x4c>
	     ((1U + param->latency) * param->interval_max))) {
   22ef6:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   22efa:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   22efe:	d20c      	bcs.n	22f1a <bt_le_conn_params_valid+0x50>
	return true;
   22f00:	2001      	movs	r0, #1
}
   22f02:	bc10      	pop	{r4}
   22f04:	4770      	bx	lr
		return false;
   22f06:	2000      	movs	r0, #0
   22f08:	4770      	bx	lr
   22f0a:	2000      	movs	r0, #0
   22f0c:	4770      	bx	lr
   22f0e:	2000      	movs	r0, #0
   22f10:	4770      	bx	lr
		return false;
   22f12:	2000      	movs	r0, #0
}
   22f14:	4770      	bx	lr
		return false;
   22f16:	2000      	movs	r0, #0
   22f18:	e7f3      	b.n	22f02 <bt_le_conn_params_valid+0x38>
   22f1a:	2000      	movs	r0, #0
   22f1c:	e7f1      	b.n	22f02 <bt_le_conn_params_valid+0x38>

00022f1e <bt_le_set_data_len>:
{
   22f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22f20:	4606      	mov	r6, r0
   22f22:	460f      	mov	r7, r1
   22f24:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   22f26:	2106      	movs	r1, #6
   22f28:	f242 0022 	movw	r0, #8226	; 0x2022
   22f2c:	f7f1 fe44 	bl	14bb8 <bt_hci_cmd_create>
	if (!buf) {
   22f30:	b170      	cbz	r0, 22f50 <bt_le_set_data_len+0x32>
   22f32:	4605      	mov	r5, r0
   22f34:	2106      	movs	r1, #6
   22f36:	3008      	adds	r0, #8
   22f38:	f002 ff4c 	bl	25dd4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22f3c:	8833      	ldrh	r3, [r6, #0]
   22f3e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   22f40:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   22f42:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   22f44:	4629      	mov	r1, r5
   22f46:	f242 0022 	movw	r0, #8226	; 0x2022
   22f4a:	f7f2 f8eb 	bl	15124 <bt_hci_cmd_send>
}
   22f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   22f50:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22f54:	e7fb      	b.n	22f4e <bt_le_set_data_len+0x30>

00022f56 <bt_le_set_phy>:
{
   22f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f5a:	4607      	mov	r7, r0
   22f5c:	460e      	mov	r6, r1
   22f5e:	4615      	mov	r5, r2
   22f60:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   22f62:	2107      	movs	r1, #7
   22f64:	f242 0032 	movw	r0, #8242	; 0x2032
   22f68:	f7f1 fe26 	bl	14bb8 <bt_hci_cmd_create>
	if (!buf) {
   22f6c:	b1a0      	cbz	r0, 22f98 <bt_le_set_phy+0x42>
   22f6e:	4680      	mov	r8, r0
   22f70:	2107      	movs	r1, #7
   22f72:	3008      	adds	r0, #8
   22f74:	f002 ff2e 	bl	25dd4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22f78:	883b      	ldrh	r3, [r7, #0]
   22f7a:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   22f7c:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   22f7e:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   22f80:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   22f82:	f89d 3018 	ldrb.w	r3, [sp, #24]
   22f86:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   22f8a:	4641      	mov	r1, r8
   22f8c:	f242 0032 	movw	r0, #8242	; 0x2032
   22f90:	f7f2 f8c8 	bl	15124 <bt_hci_cmd_send>
}
   22f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   22f98:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22f9c:	e7fa      	b.n	22f94 <bt_le_set_phy+0x3e>

00022f9e <hci_le_read_remote_features>:
{
   22f9e:	b538      	push	{r3, r4, r5, lr}
   22fa0:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   22fa2:	2102      	movs	r1, #2
   22fa4:	f242 0016 	movw	r0, #8214	; 0x2016
   22fa8:	f7f1 fe06 	bl	14bb8 <bt_hci_cmd_create>
	if (!buf) {
   22fac:	b168      	cbz	r0, 22fca <hci_le_read_remote_features+0x2c>
   22fae:	4605      	mov	r5, r0
   22fb0:	2102      	movs	r1, #2
   22fb2:	3008      	adds	r0, #8
   22fb4:	f002 ff0e 	bl	25dd4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22fb8:	8823      	ldrh	r3, [r4, #0]
   22fba:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   22fbc:	4629      	mov	r1, r5
   22fbe:	f242 0016 	movw	r0, #8214	; 0x2016
   22fc2:	f7f2 f8af 	bl	15124 <bt_hci_cmd_send>
	return 0;
   22fc6:	2000      	movs	r0, #0
}
   22fc8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   22fca:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22fce:	e7fb      	b.n	22fc8 <hci_le_read_remote_features+0x2a>

00022fd0 <enh_conn_complete>:
{
   22fd0:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   22fd2:	f7f2 f92b 	bl	1522c <bt_hci_le_enh_conn_complete>
}
   22fd6:	bd08      	pop	{r3, pc}

00022fd8 <le_enh_conn_complete>:
{
   22fd8:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   22fda:	6880      	ldr	r0, [r0, #8]
   22fdc:	f7ff fff8 	bl	22fd0 <enh_conn_complete>
}
   22fe0:	bd08      	pop	{r3, pc}

00022fe2 <le_legacy_conn_complete>:
{
   22fe2:	b510      	push	{r4, lr}
   22fe4:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   22fe6:	6881      	ldr	r1, [r0, #8]
	enh.status         = evt->status;
   22fe8:	780b      	ldrb	r3, [r1, #0]
   22fea:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   22fee:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   22ff2:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   22ff6:	78cb      	ldrb	r3, [r1, #3]
   22ff8:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   22ffc:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   23000:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   23004:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   23008:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   2300c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   23010:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   23014:	7c4b      	ldrb	r3, [r1, #17]
   23016:	f88d 301d 	strb.w	r3, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   2301a:	2207      	movs	r2, #7
   2301c:	3104      	adds	r1, #4
   2301e:	a801      	add	r0, sp, #4
   23020:	f7ff fd05 	bl	22a2e <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   23024:	2400      	movs	r4, #0
   23026:	940a      	str	r4, [sp, #40]	; 0x28
   23028:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	memcpy(dst, src, sizeof(*dst));
   2302c:	2206      	movs	r2, #6
   2302e:	a90a      	add	r1, sp, #40	; 0x28
   23030:	f10d 000b 	add.w	r0, sp, #11
   23034:	f7ff fcfb 	bl	22a2e <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   23038:	9408      	str	r4, [sp, #32]
   2303a:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   2303e:	2206      	movs	r2, #6
   23040:	a908      	add	r1, sp, #32
   23042:	f10d 0011 	add.w	r0, sp, #17
   23046:	f7ff fcf2 	bl	22a2e <memcpy>
	enh_conn_complete(&enh);
   2304a:	4668      	mov	r0, sp
   2304c:	f7ff ffc0 	bl	22fd0 <enh_conn_complete>
}
   23050:	b00c      	add	sp, #48	; 0x30
   23052:	bd10      	pop	{r4, pc}

00023054 <le_phy_update_complete>:
{
   23054:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   23056:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   23058:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   2305c:	f7f3 f8cc 	bl	161f8 <bt_conn_lookup_handle>
	if (!conn) {
   23060:	b198      	cbz	r0, 2308a <le_phy_update_complete+0x36>
   23062:	4604      	mov	r4, r0
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   23064:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23066:	f3bf 8f5b 	dmb	ish
   2306a:	e853 2f00 	ldrex	r2, [r3]
   2306e:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   23072:	e843 1000 	strex	r0, r1, [r3]
   23076:	2800      	cmp	r0, #0
   23078:	d1f7      	bne.n	2306a <le_phy_update_complete+0x16>
   2307a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   2307e:	f012 0f80 	tst.w	r2, #128	; 0x80
   23082:	d103      	bne.n	2308c <le_phy_update_complete+0x38>
	bt_conn_unref(conn);
   23084:	4620      	mov	r0, r4
   23086:	f000 fbab 	bl	237e0 <bt_conn_unref>
}
   2308a:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2308c:	f3bf 8f5b 	dmb	ish
   23090:	e853 2f00 	ldrex	r2, [r3]
   23094:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   23098:	e843 2100 	strex	r1, r2, [r3]
   2309c:	2900      	cmp	r1, #0
   2309e:	d1f7      	bne.n	23090 <le_phy_update_complete+0x3c>
   230a0:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   230a4:	4620      	mov	r0, r4
   230a6:	f7f2 f861 	bl	1516c <conn_auto_initiate>
   230aa:	e7eb      	b.n	23084 <le_phy_update_complete+0x30>

000230ac <le_remote_feat_complete>:
{
   230ac:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   230ae:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   230b0:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   230b4:	f7f3 f8a0 	bl	161f8 <bt_conn_lookup_handle>
	if (!conn) {
   230b8:	b1a8      	cbz	r0, 230e6 <le_remote_feat_complete+0x3a>
   230ba:	4604      	mov	r4, r0
	if (!evt->status) {
   230bc:	782b      	ldrb	r3, [r5, #0]
   230be:	b19b      	cbz	r3, 230e8 <le_remote_feat_complete+0x3c>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   230c0:	1d23      	adds	r3, r4, #4
   230c2:	f3bf 8f5b 	dmb	ish
   230c6:	e853 2f00 	ldrex	r2, [r3]
   230ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   230ce:	e843 2100 	strex	r1, r2, [r3]
   230d2:	2900      	cmp	r1, #0
   230d4:	d1f7      	bne.n	230c6 <le_remote_feat_complete+0x1a>
   230d6:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   230da:	4620      	mov	r0, r4
   230dc:	f7f2 f846 	bl	1516c <conn_auto_initiate>
	bt_conn_unref(conn);
   230e0:	4620      	mov	r0, r4
   230e2:	f000 fb7d 	bl	237e0 <bt_conn_unref>
}
   230e6:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(conn->le.features, evt->features,
   230e8:	2208      	movs	r2, #8
   230ea:	1ce9      	adds	r1, r5, #3
   230ec:	30ac      	adds	r0, #172	; 0xac
   230ee:	f7ff fc9e 	bl	22a2e <memcpy>
   230f2:	e7e5      	b.n	230c0 <le_remote_feat_complete+0x14>

000230f4 <le_conn_param_neg_reply>:
{
   230f4:	b570      	push	{r4, r5, r6, lr}
   230f6:	4605      	mov	r5, r0
   230f8:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   230fa:	2103      	movs	r1, #3
   230fc:	f242 0021 	movw	r0, #8225	; 0x2021
   23100:	f7f1 fd5a 	bl	14bb8 <bt_hci_cmd_create>
	if (!buf) {
   23104:	b158      	cbz	r0, 2311e <le_conn_param_neg_reply+0x2a>
   23106:	4606      	mov	r6, r0
   23108:	2103      	movs	r1, #3
   2310a:	3008      	adds	r0, #8
   2310c:	f002 fe62 	bl	25dd4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   23110:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   23112:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   23114:	4631      	mov	r1, r6
   23116:	f242 0021 	movw	r0, #8225	; 0x2021
   2311a:	f7f2 f803 	bl	15124 <bt_hci_cmd_send>
}
   2311e:	bd70      	pop	{r4, r5, r6, pc}

00023120 <le_conn_param_req_reply>:
{
   23120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23122:	4606      	mov	r6, r0
   23124:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   23126:	210e      	movs	r1, #14
   23128:	f242 0020 	movw	r0, #8224	; 0x2020
   2312c:	f7f1 fd44 	bl	14bb8 <bt_hci_cmd_create>
	if (!buf) {
   23130:	b1c0      	cbz	r0, 23164 <le_conn_param_req_reply+0x44>
   23132:	4607      	mov	r7, r0
   23134:	210e      	movs	r1, #14
   23136:	3008      	adds	r0, #8
   23138:	f002 fe4c 	bl	25dd4 <net_buf_simple_add>
   2313c:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   2313e:	220e      	movs	r2, #14
   23140:	2100      	movs	r1, #0
   23142:	f7ff fc98 	bl	22a76 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   23146:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   23148:	882b      	ldrh	r3, [r5, #0]
   2314a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   2314c:	886b      	ldrh	r3, [r5, #2]
   2314e:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   23150:	88ab      	ldrh	r3, [r5, #4]
   23152:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   23154:	88eb      	ldrh	r3, [r5, #6]
   23156:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   23158:	4639      	mov	r1, r7
   2315a:	f242 0020 	movw	r0, #8224	; 0x2020
   2315e:	f7f1 ffe1 	bl	15124 <bt_hci_cmd_send>
}
   23162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   23164:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23168:	e7fb      	b.n	23162 <le_conn_param_req_reply+0x42>

0002316a <le_conn_param_req>:
{
   2316a:	b530      	push	{r4, r5, lr}
   2316c:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   2316e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   23170:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   23172:	885a      	ldrh	r2, [r3, #2]
   23174:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   23178:	889a      	ldrh	r2, [r3, #4]
   2317a:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   2317e:	88da      	ldrh	r2, [r3, #6]
   23180:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   23184:	891b      	ldrh	r3, [r3, #8]
   23186:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   2318a:	4620      	mov	r0, r4
   2318c:	f7f3 f834 	bl	161f8 <bt_conn_lookup_handle>
	if (!conn) {
   23190:	b168      	cbz	r0, 231ae <le_conn_param_req+0x44>
   23192:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   23194:	4669      	mov	r1, sp
   23196:	f7f3 f95b 	bl	16450 <le_param_req>
   2319a:	b968      	cbnz	r0, 231b8 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   2319c:	211e      	movs	r1, #30
   2319e:	4620      	mov	r0, r4
   231a0:	f7ff ffa8 	bl	230f4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   231a4:	4628      	mov	r0, r5
   231a6:	f000 fb1b 	bl	237e0 <bt_conn_unref>
}
   231aa:	b003      	add	sp, #12
   231ac:	bd30      	pop	{r4, r5, pc}
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   231ae:	2102      	movs	r1, #2
   231b0:	4620      	mov	r0, r4
   231b2:	f7ff ff9f 	bl	230f4 <le_conn_param_neg_reply>
		return;
   231b6:	e7f8      	b.n	231aa <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   231b8:	4669      	mov	r1, sp
   231ba:	4620      	mov	r0, r4
   231bc:	f7ff ffb0 	bl	23120 <le_conn_param_req_reply>
   231c0:	e7f0      	b.n	231a4 <le_conn_param_req+0x3a>

000231c2 <process_events>:
{
   231c2:	b538      	push	{r3, r4, r5, lr}
   231c4:	4604      	mov	r4, r0
   231c6:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   231c8:	e003      	b.n	231d2 <process_events+0x10>
				send_cmd();
   231ca:	f7f2 f8db 	bl	15384 <send_cmd>
	for (; count; ev++, count--) {
   231ce:	3414      	adds	r4, #20
   231d0:	3d01      	subs	r5, #1
   231d2:	b175      	cbz	r5, 231f2 <process_events+0x30>
		switch (ev->state) {
   231d4:	68e3      	ldr	r3, [r4, #12]
   231d6:	f3c3 3345 	ubfx	r3, r3, #13, #6
   231da:	2b04      	cmp	r3, #4
   231dc:	d1f7      	bne.n	231ce <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   231de:	7b23      	ldrb	r3, [r4, #12]
   231e0:	2b00      	cmp	r3, #0
   231e2:	d0f2      	beq.n	231ca <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   231e4:	2b01      	cmp	r3, #1
   231e6:	d1f2      	bne.n	231ce <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
   231e8:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   231ea:	3838      	subs	r0, #56	; 0x38
   231ec:	f7f3 fb0a 	bl	16804 <bt_conn_process_tx>
   231f0:	e7ed      	b.n	231ce <process_events+0xc>
}
   231f2:	bd38      	pop	{r3, r4, r5, pc}

000231f4 <bt_init>:
{
   231f4:	b510      	push	{r4, lr}
	err = hci_init();
   231f6:	f7f1 fefd 	bl	14ff4 <hci_init>
	if (err) {
   231fa:	4604      	mov	r4, r0
   231fc:	b108      	cbz	r0, 23202 <bt_init+0xe>
}
   231fe:	4620      	mov	r0, r4
   23200:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   23202:	f7f3 fb3d 	bl	16880 <bt_conn_init>
		if (err) {
   23206:	4604      	mov	r4, r0
   23208:	2800      	cmp	r0, #0
   2320a:	d1f8      	bne.n	231fe <bt_init+0xa>
	bt_finalize_init();
   2320c:	f7f2 fa14 	bl	15638 <bt_finalize_init>
	return 0;
   23210:	e7f5      	b.n	231fe <bt_init+0xa>

00023212 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   23212:	2000      	movs	r0, #0
   23214:	4770      	bx	lr

00023216 <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   23216:	b5f0      	push	{r4, r5, r6, r7, lr}
   23218:	b083      	sub	sp, #12
   2321a:	4604      	mov	r4, r0
   2321c:	460f      	mov	r7, r1
   2321e:	4616      	mov	r6, r2
	while (ad->len > 1) {
   23220:	e003      	b.n	2322a <bt_data_parse+0x14>

		if (!func(&data, user_data)) {
			return;
		}

		net_buf_simple_pull(ad, len - 1);
   23222:	1e69      	subs	r1, r5, #1
   23224:	4620      	mov	r0, r4
   23226:	f002 fdf7 	bl	25e18 <net_buf_simple_pull>
	while (ad->len > 1) {
   2322a:	88a3      	ldrh	r3, [r4, #4]
   2322c:	2b01      	cmp	r3, #1
   2322e:	d917      	bls.n	23260 <bt_data_parse+0x4a>
		len = net_buf_simple_pull_u8(ad);
   23230:	4620      	mov	r0, r4
   23232:	f002 fe01 	bl	25e38 <net_buf_simple_pull_u8>
		if (len == 0U) {
   23236:	4605      	mov	r5, r0
   23238:	b190      	cbz	r0, 23260 <bt_data_parse+0x4a>
		if (len > ad->len) {
   2323a:	b283      	uxth	r3, r0
   2323c:	88a2      	ldrh	r2, [r4, #4]
   2323e:	4293      	cmp	r3, r2
   23240:	d80e      	bhi.n	23260 <bt_data_parse+0x4a>
		data.type = net_buf_simple_pull_u8(ad);
   23242:	4620      	mov	r0, r4
   23244:	f002 fdf8 	bl	25e38 <net_buf_simple_pull_u8>
   23248:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
   2324c:	1e6b      	subs	r3, r5, #1
   2324e:	f88d 3001 	strb.w	r3, [sp, #1]
		data.data = ad->data;
   23252:	6823      	ldr	r3, [r4, #0]
   23254:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   23256:	4631      	mov	r1, r6
   23258:	4668      	mov	r0, sp
   2325a:	47b8      	blx	r7
   2325c:	2800      	cmp	r0, #0
   2325e:	d1e0      	bne.n	23222 <bt_data_parse+0xc>
	}
}
   23260:	b003      	add	sp, #12
   23262:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023264 <is_adv_using_rand_addr>:
}
   23264:	2000      	movs	r0, #0
   23266:	4770      	bx	lr

00023268 <bt_lookup_id_addr>:
}
   23268:	4608      	mov	r0, r1
   2326a:	4770      	bx	lr

0002326c <bt_id_set_private_addr>:
{
   2326c:	b500      	push	{lr}
   2326e:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   23270:	2106      	movs	r1, #6
   23272:	4668      	mov	r0, sp
   23274:	f7f7 f9b4 	bl	1a5e0 <bt_rand>
	if (err) {
   23278:	b110      	cbz	r0, 23280 <bt_id_set_private_addr+0x14>
}
   2327a:	b003      	add	sp, #12
   2327c:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   23280:	f89d 3005 	ldrb.w	r3, [sp, #5]
   23284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23288:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2328c:	4668      	mov	r0, sp
   2328e:	f7f2 fa8b 	bl	157a8 <set_random_address>
	if (err)  {
   23292:	e7f2      	b.n	2327a <bt_id_set_private_addr+0xe>

00023294 <bt_id_scan_random_addr_check>:
}
   23294:	2001      	movs	r0, #1
   23296:	4770      	bx	lr

00023298 <get_adv_props>:
	switch (evt_type) {
   23298:	2804      	cmp	r0, #4
   2329a:	d80a      	bhi.n	232b2 <get_adv_props+0x1a>
   2329c:	e8df f000 	tbb	[pc, r0]
   232a0:	050c0b03 	.word	0x050c0b03
   232a4:	07          	.byte	0x07
   232a5:	00          	.byte	0x00
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   232a6:	2003      	movs	r0, #3
   232a8:	4770      	bx	lr
		return 0;
   232aa:	2000      	movs	r0, #0
   232ac:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   232ae:	200a      	movs	r0, #10
   232b0:	4770      	bx	lr
		return 0;
   232b2:	2000      	movs	r0, #0
   232b4:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   232b6:	2005      	movs	r0, #5
}
   232b8:	4770      	bx	lr

000232ba <valid_le_scan_param>:
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   232ba:	7803      	ldrb	r3, [r0, #0]
   232bc:	2b01      	cmp	r3, #1
   232be:	d815      	bhi.n	232ec <valid_le_scan_param+0x32>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   232c0:	6843      	ldr	r3, [r0, #4]
   232c2:	f033 030f 	bics.w	r3, r3, #15
   232c6:	d113      	bne.n	232f0 <valid_le_scan_param+0x36>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   232c8:	8902      	ldrh	r2, [r0, #8]
   232ca:	1f13      	subs	r3, r2, #4
   232cc:	b29b      	uxth	r3, r3
   232ce:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   232d2:	428b      	cmp	r3, r1
   232d4:	d80e      	bhi.n	232f4 <valid_le_scan_param+0x3a>
	if (param->window < 0x0004 || param->window > 0x4000) {
   232d6:	8941      	ldrh	r1, [r0, #10]
   232d8:	1f0b      	subs	r3, r1, #4
   232da:	b29b      	uxth	r3, r3
   232dc:	f643 70fc 	movw	r0, #16380	; 0x3ffc
   232e0:	4283      	cmp	r3, r0
   232e2:	d809      	bhi.n	232f8 <valid_le_scan_param+0x3e>
	if (param->window > param->interval) {
   232e4:	428a      	cmp	r2, r1
   232e6:	d309      	bcc.n	232fc <valid_le_scan_param+0x42>
	return true;
   232e8:	2001      	movs	r0, #1
   232ea:	4770      	bx	lr
		return false;
   232ec:	2000      	movs	r0, #0
   232ee:	4770      	bx	lr
		return false;
   232f0:	2000      	movs	r0, #0
   232f2:	4770      	bx	lr
		return false;
   232f4:	2000      	movs	r0, #0
   232f6:	4770      	bx	lr
		return false;
   232f8:	2000      	movs	r0, #0
   232fa:	4770      	bx	lr
		return false;
   232fc:	2000      	movs	r0, #0
}
   232fe:	4770      	bx	lr

00023300 <bt_le_scan_set_enable>:
{
   23300:	b508      	push	{r3, lr}
	return bt_le_scan_set_enable_legacy(enable);
   23302:	f7f2 fc05 	bl	15b10 <bt_le_scan_set_enable_legacy>
}
   23306:	bd08      	pop	{r3, pc}

00023308 <start_passive_scan>:
{
   23308:	b508      	push	{r3, lr}
	if (fast_scan) {
   2330a:	b128      	cbz	r0, 23318 <start_passive_scan+0x10>
		window = BT_GAP_SCAN_FAST_WINDOW;
   2330c:	2230      	movs	r2, #48	; 0x30
		interval = BT_GAP_SCAN_FAST_INTERVAL;
   2330e:	2160      	movs	r1, #96	; 0x60
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   23310:	2000      	movs	r0, #0
   23312:	f7f2 fc39 	bl	15b88 <start_le_scan_legacy>
}
   23316:	bd08      	pop	{r3, pc}
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   23318:	2212      	movs	r2, #18
		interval = CONFIG_BT_BACKGROUND_SCAN_INTERVAL;
   2331a:	f44f 6100 	mov.w	r1, #2048	; 0x800
   2331e:	e7f7      	b.n	23310 <start_passive_scan+0x8>

00023320 <bt_hci_le_adv_report>:
{
   23320:	b5f0      	push	{r4, r5, r6, r7, lr}
   23322:	b085      	sub	sp, #20
   23324:	4606      	mov	r6, r0
	return net_buf_simple_pull_u8(&buf->b);
   23326:	f100 0708 	add.w	r7, r0, #8
   2332a:	4638      	mov	r0, r7
   2332c:	f002 fd84 	bl	25e38 <net_buf_simple_pull_u8>
	while (num_reports--) {
   23330:	1e45      	subs	r5, r0, #1
   23332:	b2ed      	uxtb	r5, r5
   23334:	b378      	cbz	r0, 23396 <bt_hci_le_adv_report+0x76>
		if (buf->len < sizeof(*evt)) {
   23336:	89b3      	ldrh	r3, [r6, #12]
   23338:	2b08      	cmp	r3, #8
   2333a:	d92c      	bls.n	23396 <bt_hci_le_adv_report+0x76>
	return net_buf_simple_pull_mem(&buf->b, len);
   2333c:	2109      	movs	r1, #9
   2333e:	4638      	mov	r0, r7
   23340:	f002 fd72 	bl	25e28 <net_buf_simple_pull_mem>
   23344:	4604      	mov	r4, r0
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   23346:	2301      	movs	r3, #1
   23348:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   2334c:	2200      	movs	r2, #0
   2334e:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   23352:	237f      	movs	r3, #127	; 0x7f
   23354:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   23358:	7a03      	ldrb	r3, [r0, #8]
   2335a:	4403      	add	r3, r0
   2335c:	f993 3009 	ldrsb.w	r3, [r3, #9]
   23360:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   23364:	23ff      	movs	r3, #255	; 0xff
   23366:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   2336a:	f8ad 200a 	strh.w	r2, [sp, #10]
		adv_info.adv_type = evt->evt_type;
   2336e:	7800      	ldrb	r0, [r0, #0]
   23370:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props(evt->evt_type);
   23374:	f7ff ff90 	bl	23298 <get_adv_props>
   23378:	f8ad 0008 	strh.w	r0, [sp, #8]
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
   2337c:	7a23      	ldrb	r3, [r4, #8]
   2337e:	4632      	mov	r2, r6
   23380:	4669      	mov	r1, sp
   23382:	1c60      	adds	r0, r4, #1
   23384:	f7f2 fce8 	bl	15d58 <le_adv_recv>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   23388:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   2338a:	3101      	adds	r1, #1
   2338c:	4638      	mov	r0, r7
   2338e:	f002 fd43 	bl	25e18 <net_buf_simple_pull>
	while (num_reports--) {
   23392:	4628      	mov	r0, r5
   23394:	e7cc      	b.n	23330 <bt_hci_le_adv_report+0x10>
}
   23396:	b005      	add	sp, #20
   23398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002339a <bt_conn_set_param_le>:
	conn->le.interval_min = param->interval_min;
   2339a:	880b      	ldrh	r3, [r1, #0]
   2339c:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   233a0:	884b      	ldrh	r3, [r1, #2]
   233a2:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   233a6:	888b      	ldrh	r3, [r1, #4]
   233a8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   233ac:	88cb      	ldrh	r3, [r1, #6]
   233ae:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
}
   233b2:	4770      	bx	lr

000233b4 <create_param_validate>:
}
   233b4:	2001      	movs	r0, #1
   233b6:	4770      	bx	lr

000233b8 <tx_notify>:
{
   233b8:	b570      	push	{r4, r5, r6, lr}
   233ba:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   233bc:	e010      	b.n	233e0 <tx_notify+0x28>
	__asm__ volatile(
   233be:	f383 8811 	msr	BASEPRI, r3
   233c2:	f3bf 8f6f 	isb	sy
}
   233c6:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   233c8:	6262      	str	r2, [r4, #36]	; 0x24
   233ca:	f383 8811 	msr	BASEPRI, r3
   233ce:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
   233d2:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   233d4:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   233d6:	f7f2 fe5f 	bl	16098 <tx_free>
		cb(conn, user_data);
   233da:	4631      	mov	r1, r6
   233dc:	4620      	mov	r0, r4
   233de:	47a8      	blx	r5
	__asm__ volatile(
   233e0:	f04f 0240 	mov.w	r2, #64	; 0x40
   233e4:	f3ef 8311 	mrs	r3, BASEPRI
   233e8:	f382 8812 	msr	BASEPRI_MAX, r2
   233ec:	f3bf 8f6f 	isb	sy
	return list->head;
   233f0:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   233f2:	2800      	cmp	r0, #0
   233f4:	d0e3      	beq.n	233be <tx_notify+0x6>
	return node->next;
   233f6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   233f8:	6222      	str	r2, [r4, #32]
	return list->tail;
   233fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   233fc:	4281      	cmp	r1, r0
   233fe:	d1e4      	bne.n	233ca <tx_notify+0x12>
   23400:	e7e2      	b.n	233c8 <tx_notify+0x10>

00023402 <tx_complete_work>:
{
   23402:	b508      	push	{r3, lr}
	tx_notify(conn);
   23404:	3828      	subs	r0, #40	; 0x28
   23406:	f7ff ffd7 	bl	233b8 <tx_notify>
}
   2340a:	bd08      	pop	{r3, pc}

0002340c <send_acl>:
{
   2340c:	b570      	push	{r4, r5, r6, lr}
   2340e:	4605      	mov	r5, r0
   23410:	460c      	mov	r4, r1
	switch (flags) {
   23412:	2a03      	cmp	r2, #3
   23414:	d819      	bhi.n	2344a <send_acl+0x3e>
   23416:	e8df f002 	tbb	[pc, r2]
   2341a:	1602      	.short	0x1602
   2341c:	1602      	.short	0x1602
		flags = BT_ACL_CONT;
   2341e:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   23420:	2104      	movs	r1, #4
   23422:	f104 0008 	add.w	r0, r4, #8
   23426:	f002 fcef 	bl	25e08 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2342a:	f9b5 3000 	ldrsh.w	r3, [r5]
   2342e:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   23432:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   23434:	89a3      	ldrh	r3, [r4, #12]
   23436:	3b04      	subs	r3, #4
   23438:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2343a:	2302      	movs	r3, #2
   2343c:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   2343e:	4620      	mov	r0, r4
   23440:	f7f1 fe66 	bl	15110 <bt_send>
}
   23444:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   23446:	2601      	movs	r6, #1
   23448:	e7ea      	b.n	23420 <send_acl+0x14>
   2344a:	f06f 0015 	mvn.w	r0, #21
   2344e:	e7f9      	b.n	23444 <send_acl+0x38>

00023450 <send_frag>:
{
   23450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23454:	4605      	mov	r5, r0
   23456:	460e      	mov	r6, r1
   23458:	4691      	mov	r9, r2
   2345a:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   2345c:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   2345e:	f7f2 fe67 	bl	16130 <bt_conn_get_pkts>
   23462:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   23464:	f04f 32ff 	mov.w	r2, #4294967295
   23468:	f04f 33ff 	mov.w	r3, #4294967295
   2346c:	f7f9 ff32 	bl	1d2d4 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   23470:	7aab      	ldrb	r3, [r5, #10]
   23472:	2b07      	cmp	r3, #7
   23474:	d148      	bne.n	23508 <send_frag+0xb8>
   23476:	f04f 0240 	mov.w	r2, #64	; 0x40
   2347a:	f3ef 8311 	mrs	r3, BASEPRI
   2347e:	f382 8812 	msr	BASEPRI_MAX, r2
   23482:	f3bf 8f6f 	isb	sy
	if (tx) {
   23486:	b1a7      	cbz	r7, 234b2 <send_frag+0x62>
	parent->next = child;
   23488:	2200      	movs	r2, #0
   2348a:	603a      	str	r2, [r7, #0]
	return list->tail;
   2348c:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   2348e:	b16a      	cbz	r2, 234ac <send_frag+0x5c>
	parent->next = child;
   23490:	6017      	str	r7, [r2, #0]
	list->tail = node;
   23492:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   23494:	f383 8811 	msr	BASEPRI, r3
   23498:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   2349c:	464a      	mov	r2, r9
   2349e:	4631      	mov	r1, r6
   234a0:	4628      	mov	r0, r5
   234a2:	f7ff ffb3 	bl	2340c <send_acl>
	if (err) {
   234a6:	b988      	cbnz	r0, 234cc <send_frag+0x7c>
	return true;
   234a8:	2001      	movs	r0, #1
   234aa:	e036      	b.n	2351a <send_frag+0xca>
   234ac:	61af      	str	r7, [r5, #24]
	list->head = node;
   234ae:	616f      	str	r7, [r5, #20]
}
   234b0:	e7f0      	b.n	23494 <send_frag+0x44>
	return list->tail;
   234b2:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   234b4:	b13a      	cbz	r2, 234c6 <send_frag+0x76>
			pending_no_cb = &tail_tx->pending_no_cb;
   234b6:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   234ba:	f8da 2000 	ldr.w	r2, [sl]
   234be:	3201      	adds	r2, #1
   234c0:	f8ca 2000 	str.w	r2, [sl]
   234c4:	e7e6      	b.n	23494 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   234c6:	f105 0a1c 	add.w	sl, r5, #28
   234ca:	e7f6      	b.n	234ba <send_frag+0x6a>
	__asm__ volatile(
   234cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   234d0:	f3ef 8011 	mrs	r0, BASEPRI
   234d4:	f383 8812 	msr	BASEPRI_MAX, r3
   234d8:	f3bf 8f6f 	isb	sy
		if (tx) {
   234dc:	b347      	cbz	r7, 23530 <send_frag+0xe0>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   234de:	4639      	mov	r1, r7
	return list->head;
   234e0:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   234e2:	2200      	movs	r2, #0
   234e4:	b163      	cbz	r3, 23500 <send_frag+0xb0>
   234e6:	428b      	cmp	r3, r1
   234e8:	d002      	beq.n	234f0 <send_frag+0xa0>
   234ea:	461a      	mov	r2, r3
   234ec:	681b      	ldr	r3, [r3, #0]
   234ee:	e7f9      	b.n	234e4 <send_frag+0x94>
Z_GENLIST_REMOVE(slist, snode)
   234f0:	b1aa      	cbz	r2, 2351e <send_frag+0xce>
	return node->next;
   234f2:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   234f4:	6013      	str	r3, [r2, #0]
	return list->tail;
   234f6:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   234f8:	42bb      	cmp	r3, r7
   234fa:	d017      	beq.n	2352c <send_frag+0xdc>
	parent->next = child;
   234fc:	2300      	movs	r3, #0
   234fe:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
   23500:	f380 8811 	msr	BASEPRI, r0
   23504:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   23508:	4640      	mov	r0, r8
   2350a:	f7f9 febb 	bl	1d284 <z_impl_k_sem_give>
	if (tx) {
   2350e:	b117      	cbz	r7, 23516 <send_frag+0xc6>
		tx_free(tx);
   23510:	4638      	mov	r0, r7
   23512:	f7f2 fdc1 	bl	16098 <tx_free>
	if (always_consume) {
   23516:	b98c      	cbnz	r4, 2353c <send_frag+0xec>
	return false;
   23518:	4620      	mov	r0, r4
}
   2351a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
   2351e:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   23520:	616b      	str	r3, [r5, #20]
	return list->tail;
   23522:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   23524:	42ba      	cmp	r2, r7
   23526:	d1e9      	bne.n	234fc <send_frag+0xac>
	list->tail = node;
   23528:	61ab      	str	r3, [r5, #24]
}
   2352a:	e7e7      	b.n	234fc <send_frag+0xac>
	list->tail = node;
   2352c:	61aa      	str	r2, [r5, #24]
}
   2352e:	e7e5      	b.n	234fc <send_frag+0xac>
			(*pending_no_cb)--;
   23530:	f8da 3000 	ldr.w	r3, [sl]
   23534:	3b01      	subs	r3, #1
   23536:	f8ca 3000 	str.w	r3, [sl]
   2353a:	e7e1      	b.n	23500 <send_frag+0xb0>
		net_buf_unref(buf);
   2353c:	4630      	mov	r0, r6
   2353e:	f002 fbff 	bl	25d40 <net_buf_unref>
	return false;
   23542:	2000      	movs	r0, #0
   23544:	e7e9      	b.n	2351a <send_frag+0xca>

00023546 <process_unack_tx>:
{
   23546:	b510      	push	{r4, lr}
   23548:	4604      	mov	r4, r0
   2354a:	e028      	b.n	2359e <process_unack_tx+0x58>
			conn->pending_no_cb--;
   2354c:	3b01      	subs	r3, #1
   2354e:	61e3      	str	r3, [r4, #28]
   23550:	f382 8811 	msr	BASEPRI, r2
   23554:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   23558:	4620      	mov	r0, r4
   2355a:	f7f2 fde9 	bl	16130 <bt_conn_get_pkts>
   2355e:	f7f9 fe91 	bl	1d284 <z_impl_k_sem_give>
			continue;
   23562:	e01c      	b.n	2359e <process_unack_tx+0x58>
	list->tail = node;
   23564:	61a3      	str	r3, [r4, #24]
   23566:	f382 8811 	msr	BASEPRI, r2
   2356a:	f3bf 8f6f 	isb	sy
		if (!node) {
   2356e:	b350      	cbz	r0, 235c6 <process_unack_tx+0x80>
	__asm__ volatile(
   23570:	f04f 0240 	mov.w	r2, #64	; 0x40
   23574:	f3ef 8311 	mrs	r3, BASEPRI
   23578:	f382 8812 	msr	BASEPRI_MAX, r2
   2357c:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   23580:	68c2      	ldr	r2, [r0, #12]
   23582:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   23584:	2200      	movs	r2, #0
   23586:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
   23588:	f383 8811 	msr	BASEPRI, r3
   2358c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   23590:	f7f2 fd82 	bl	16098 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
   23594:	4620      	mov	r0, r4
   23596:	f7f2 fdcb 	bl	16130 <bt_conn_get_pkts>
   2359a:	f7f9 fe73 	bl	1d284 <z_impl_k_sem_give>
	__asm__ volatile(
   2359e:	f04f 0340 	mov.w	r3, #64	; 0x40
   235a2:	f3ef 8211 	mrs	r2, BASEPRI
   235a6:	f383 8812 	msr	BASEPRI_MAX, r3
   235aa:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   235ae:	69e3      	ldr	r3, [r4, #28]
   235b0:	2b00      	cmp	r3, #0
   235b2:	d1cb      	bne.n	2354c <process_unack_tx+0x6>
	return list->head;
   235b4:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   235b6:	2800      	cmp	r0, #0
   235b8:	d0d5      	beq.n	23566 <process_unack_tx+0x20>
	return node->next;
   235ba:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   235bc:	6163      	str	r3, [r4, #20]
	return list->tail;
   235be:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   235c0:	4288      	cmp	r0, r1
   235c2:	d1d0      	bne.n	23566 <process_unack_tx+0x20>
   235c4:	e7ce      	b.n	23564 <process_unack_tx+0x1e>
}
   235c6:	bd10      	pop	{r4, pc}

000235c8 <bt_conn_reset_rx_state>:
{
   235c8:	b510      	push	{r4, lr}
   235ca:	4604      	mov	r4, r0
	if (!conn->rx) {
   235cc:	6900      	ldr	r0, [r0, #16]
   235ce:	b118      	cbz	r0, 235d8 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   235d0:	f002 fbb6 	bl	25d40 <net_buf_unref>
	conn->rx = NULL;
   235d4:	2300      	movs	r3, #0
   235d6:	6123      	str	r3, [r4, #16]
}
   235d8:	bd10      	pop	{r4, pc}

000235da <bt_acl_recv>:
{
   235da:	b570      	push	{r4, r5, r6, lr}
   235dc:	4604      	mov	r4, r0
   235de:	460d      	mov	r5, r1
	switch (flags) {
   235e0:	2a01      	cmp	r2, #1
   235e2:	d01b      	beq.n	2361c <bt_acl_recv+0x42>
   235e4:	2a02      	cmp	r2, #2
   235e6:	d142      	bne.n	2366e <bt_acl_recv+0x94>
		if (conn->rx) {
   235e8:	6903      	ldr	r3, [r0, #16]
   235ea:	b10b      	cbz	r3, 235f0 <bt_acl_recv+0x16>
			bt_conn_reset_rx_state(conn);
   235ec:	f7ff ffec 	bl	235c8 <bt_conn_reset_rx_state>
		conn->rx = buf;
   235f0:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   235f2:	6921      	ldr	r1, [r4, #16]
   235f4:	898a      	ldrh	r2, [r1, #12]
   235f6:	2a01      	cmp	r2, #1
   235f8:	d93e      	bls.n	23678 <bt_acl_recv+0x9e>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   235fa:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   235fc:	7845      	ldrb	r5, [r0, #1]
   235fe:	7803      	ldrb	r3, [r0, #0]
   23600:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   23604:	3304      	adds	r3, #4
   23606:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   23608:	429a      	cmp	r2, r3
   2360a:	d335      	bcc.n	23678 <bt_acl_recv+0x9e>
	if (conn->rx->len > acl_total_len) {
   2360c:	d835      	bhi.n	2367a <bt_acl_recv+0xa0>
	conn->rx = NULL;
   2360e:	2300      	movs	r3, #0
   23610:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   23612:	2201      	movs	r2, #1
   23614:	4620      	mov	r0, r4
   23616:	f000 fb63 	bl	23ce0 <bt_l2cap_recv>
   2361a:	e02d      	b.n	23678 <bt_acl_recv+0x9e>
		if (!conn->rx) {
   2361c:	6900      	ldr	r0, [r0, #16]
   2361e:	b180      	cbz	r0, 23642 <bt_acl_recv+0x68>
		if (!buf->len) {
   23620:	898e      	ldrh	r6, [r1, #12]
   23622:	b1ae      	cbz	r6, 23650 <bt_acl_recv+0x76>
	return net_buf_simple_tailroom(&buf->b);
   23624:	3008      	adds	r0, #8
   23626:	f002 fc1b 	bl	25e60 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   2362a:	4286      	cmp	r6, r0
   2362c:	d814      	bhi.n	23658 <bt_acl_recv+0x7e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   2362e:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   23630:	89aa      	ldrh	r2, [r5, #12]
   23632:	68a9      	ldr	r1, [r5, #8]
   23634:	3008      	adds	r0, #8
   23636:	f002 fbd3 	bl	25de0 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   2363a:	4628      	mov	r0, r5
   2363c:	f002 fb80 	bl	25d40 <net_buf_unref>
		break;
   23640:	e7d7      	b.n	235f2 <bt_acl_recv+0x18>
			bt_conn_reset_rx_state(conn);
   23642:	4620      	mov	r0, r4
   23644:	f7ff ffc0 	bl	235c8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   23648:	4628      	mov	r0, r5
   2364a:	f002 fb79 	bl	25d40 <net_buf_unref>
			return;
   2364e:	e013      	b.n	23678 <bt_acl_recv+0x9e>
			net_buf_unref(buf);
   23650:	4608      	mov	r0, r1
   23652:	f002 fb75 	bl	25d40 <net_buf_unref>
			return;
   23656:	e00f      	b.n	23678 <bt_acl_recv+0x9e>
			bt_l2cap_recv(conn, conn->rx, false);
   23658:	2200      	movs	r2, #0
   2365a:	6921      	ldr	r1, [r4, #16]
   2365c:	4620      	mov	r0, r4
   2365e:	f000 fb3f 	bl	23ce0 <bt_l2cap_recv>
			conn->rx = NULL;
   23662:	2300      	movs	r3, #0
   23664:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   23666:	4628      	mov	r0, r5
   23668:	f002 fb6a 	bl	25d40 <net_buf_unref>
			return;
   2366c:	e004      	b.n	23678 <bt_acl_recv+0x9e>
		bt_conn_reset_rx_state(conn);
   2366e:	f7ff ffab 	bl	235c8 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   23672:	4628      	mov	r0, r5
   23674:	f002 fb64 	bl	25d40 <net_buf_unref>
}
   23678:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_reset_rx_state(conn);
   2367a:	4620      	mov	r0, r4
   2367c:	f7ff ffa4 	bl	235c8 <bt_conn_reset_rx_state>
		return;
   23680:	e7fa      	b.n	23678 <bt_acl_recv+0x9e>

00023682 <conn_cleanup>:
{
   23682:	b538      	push	{r3, r4, r5, lr}
   23684:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   23686:	e004      	b.n	23692 <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
   23688:	f7f2 fd06 	bl	16098 <tx_free>
		net_buf_unref(buf);
   2368c:	4620      	mov	r0, r4
   2368e:	f002 fb57 	bl	25d40 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   23692:	2200      	movs	r2, #0
   23694:	2300      	movs	r3, #0
   23696:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2369a:	f002 fb1f 	bl	25cdc <net_buf_get>
   2369e:	4604      	mov	r4, r0
   236a0:	b118      	cbz	r0, 236aa <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
   236a2:	6960      	ldr	r0, [r4, #20]
   236a4:	2800      	cmp	r0, #0
   236a6:	d1ef      	bne.n	23688 <conn_cleanup+0x6>
   236a8:	e7f0      	b.n	2368c <conn_cleanup+0xa>
	bt_conn_reset_rx_state(conn);
   236aa:	4628      	mov	r0, r5
   236ac:	f7ff ff8c 	bl	235c8 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   236b0:	2200      	movs	r2, #0
   236b2:	2300      	movs	r3, #0
   236b4:	f105 0058 	add.w	r0, r5, #88	; 0x58
   236b8:	f7f9 fffc 	bl	1d6b4 <k_work_reschedule>
}
   236bc:	bd38      	pop	{r3, r4, r5, pc}

000236be <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   236be:	f3bf 8f5b 	dmb	ish
   236c2:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   236c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   236ca:	b33b      	cbz	r3, 2371c <conn_prepare_events+0x5e>
{
   236cc:	b510      	push	{r4, lr}
   236ce:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   236d0:	7a83      	ldrb	r3, [r0, #10]
   236d2:	b983      	cbnz	r3, 236f6 <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   236d4:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   236d6:	f3bf 8f5b 	dmb	ish
   236da:	e853 2f00 	ldrex	r2, [r3]
   236de:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   236e2:	e843 1c00 	strex	ip, r1, [r3]
   236e6:	f1bc 0f00 	cmp.w	ip, #0
   236ea:	d1f6      	bne.n	236da <conn_prepare_events+0x1c>
   236ec:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   236f0:	f012 0f40 	tst.w	r2, #64	; 0x40
   236f4:	d10d      	bne.n	23712 <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   236f6:	7a83      	ldrb	r3, [r0, #10]
   236f8:	2b07      	cmp	r3, #7
   236fa:	d112      	bne.n	23722 <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   236fc:	f100 0338 	add.w	r3, r0, #56	; 0x38
   23700:	2200      	movs	r2, #0
   23702:	2104      	movs	r1, #4
   23704:	4620      	mov	r0, r4
   23706:	f004 fbdb 	bl	27ec0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2370a:	2301      	movs	r3, #1
   2370c:	7323      	strb	r3, [r4, #12]
	return 0;
   2370e:	2000      	movs	r0, #0
}
   23710:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   23712:	f7ff ffb6 	bl	23682 <conn_cleanup>
		return -ENOTCONN;
   23716:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2371a:	e7f9      	b.n	23710 <conn_prepare_events+0x52>
		return -ENOTCONN;
   2371c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   23720:	4770      	bx	lr
		return -ENOTCONN;
   23722:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   23726:	e7f3      	b.n	23710 <conn_prepare_events+0x52>

00023728 <bt_conn_recv>:
{
   23728:	b570      	push	{r4, r5, r6, lr}
   2372a:	4604      	mov	r4, r0
   2372c:	460d      	mov	r5, r1
   2372e:	4616      	mov	r6, r2
	tx_notify(conn);
   23730:	f7ff fe42 	bl	233b8 <tx_notify>
		bt_acl_recv(conn, buf, flags);
   23734:	4632      	mov	r2, r6
   23736:	4629      	mov	r1, r5
   23738:	4620      	mov	r0, r4
   2373a:	f7ff ff4e 	bl	235da <bt_acl_recv>
}
   2373e:	bd70      	pop	{r4, r5, r6, pc}

00023740 <bt_conn_send_cb>:
{
   23740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23742:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   23744:	7a83      	ldrb	r3, [r0, #10]
   23746:	2b07      	cmp	r3, #7
   23748:	d11d      	bne.n	23786 <bt_conn_send_cb+0x46>
   2374a:	4604      	mov	r4, r0
   2374c:	460d      	mov	r5, r1
   2374e:	4616      	mov	r6, r2
	if (cb) {
   23750:	b1b2      	cbz	r2, 23780 <bt_conn_send_cb+0x40>
		tx = conn_tx_alloc();
   23752:	f7f2 fcad 	bl	160b0 <conn_tx_alloc>
		if (!tx) {
   23756:	b1c8      	cbz	r0, 2378c <bt_conn_send_cb+0x4c>
		if (conn->state != BT_CONN_CONNECTED) {
   23758:	7aa2      	ldrb	r2, [r4, #10]
   2375a:	2a07      	cmp	r2, #7
   2375c:	d10b      	bne.n	23776 <bt_conn_send_cb+0x36>
		tx->cb = cb;
   2375e:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   23760:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   23762:	2200      	movs	r2, #0
   23764:	60c2      	str	r2, [r0, #12]
		tx_data(buf)->tx = tx;
   23766:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   23768:	4629      	mov	r1, r5
   2376a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2376e:	f002 fada 	bl	25d26 <net_buf_put>
	return 0;
   23772:	2000      	movs	r0, #0
}
   23774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			tx_free(tx);
   23776:	f7f2 fc8f 	bl	16098 <tx_free>
			return -ENOTCONN;
   2377a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2377e:	e7f9      	b.n	23774 <bt_conn_send_cb+0x34>
		tx_data(buf)->tx = NULL;
   23780:	2300      	movs	r3, #0
   23782:	614b      	str	r3, [r1, #20]
   23784:	e7f0      	b.n	23768 <bt_conn_send_cb+0x28>
		return -ENOTCONN;
   23786:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2378a:	e7f3      	b.n	23774 <bt_conn_send_cb+0x34>
			return -ENOBUFS;
   2378c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23790:	e7f0      	b.n	23774 <bt_conn_send_cb+0x34>

00023792 <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23792:	f3bf 8f5b 	dmb	ish
   23796:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2379a:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2379e:	b1eb      	cbz	r3, 237dc <bt_conn_ref+0x4a>
{
   237a0:	b410      	push	{r4}
   237a2:	e006      	b.n	237b2 <bt_conn_ref+0x20>
   237a4:	f3bf 8f5b 	dmb	ish
   237a8:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   237ac:	f3bf 8f5b 	dmb	ish
		if (!old) {
   237b0:	b193      	cbz	r3, 237d8 <bt_conn_ref+0x46>
   237b2:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	} while (!atomic_cas(&conn->ref, old, old + 1));
   237b6:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   237b8:	f3bf 8f5b 	dmb	ish
   237bc:	e852 4f00 	ldrex	r4, [r2]
   237c0:	429c      	cmp	r4, r3
   237c2:	d104      	bne.n	237ce <bt_conn_ref+0x3c>
   237c4:	e842 1c00 	strex	ip, r1, [r2]
   237c8:	f1bc 0f00 	cmp.w	ip, #0
   237cc:	d1f6      	bne.n	237bc <bt_conn_ref+0x2a>
   237ce:	f3bf 8f5b 	dmb	ish
   237d2:	d1e7      	bne.n	237a4 <bt_conn_ref+0x12>
}
   237d4:	bc10      	pop	{r4}
   237d6:	4770      	bx	lr
			return NULL;
   237d8:	2000      	movs	r0, #0
   237da:	e7fb      	b.n	237d4 <bt_conn_ref+0x42>
   237dc:	2000      	movs	r0, #0
}
   237de:	4770      	bx	lr

000237e0 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   237e0:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   237e2:	f3bf 8f5b 	dmb	ish
   237e6:	e850 3f00 	ldrex	r3, [r0]
   237ea:	3b01      	subs	r3, #1
   237ec:	e840 3200 	strex	r2, r3, [r0]
   237f0:	2a00      	cmp	r2, #0
   237f2:	d1f8      	bne.n	237e6 <bt_conn_unref+0x6>
   237f4:	f3bf 8f5b 	dmb	ish
}
   237f8:	4770      	bx	lr

000237fa <conn_lookup_handle>:
{
   237fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   237fe:	4607      	mov	r7, r0
   23800:	460e      	mov	r6, r1
   23802:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   23804:	2400      	movs	r4, #0
   23806:	e003      	b.n	23810 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   23808:	4628      	mov	r0, r5
   2380a:	f7ff ffe9 	bl	237e0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2380e:	3401      	adds	r4, #1
   23810:	42b4      	cmp	r4, r6
   23812:	d21c      	bcs.n	2384e <conn_lookup_handle+0x54>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   23814:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   23818:	eb07 1080 	add.w	r0, r7, r0, lsl #6
   2381c:	f7ff ffb9 	bl	23792 <bt_conn_ref>
		if (!conn) {
   23820:	4605      	mov	r5, r0
   23822:	2800      	cmp	r0, #0
   23824:	d0f3      	beq.n	2380e <conn_lookup_handle+0x14>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   23826:	7a83      	ldrb	r3, [r0, #10]
   23828:	2b01      	cmp	r3, #1
   2382a:	d006      	beq.n	2383a <conn_lookup_handle+0x40>
   2382c:	b25a      	sxtb	r2, r3
   2382e:	2a00      	cmp	r2, #0
   23830:	d0ea      	beq.n	23808 <conn_lookup_handle+0xe>
   23832:	3b07      	subs	r3, #7
   23834:	b2db      	uxtb	r3, r3
   23836:	2b01      	cmp	r3, #1
   23838:	d8e6      	bhi.n	23808 <conn_lookup_handle+0xe>
		if (conn->handle != handle) {
   2383a:	882b      	ldrh	r3, [r5, #0]
   2383c:	4543      	cmp	r3, r8
   2383e:	d102      	bne.n	23846 <conn_lookup_handle+0x4c>
}
   23840:	4628      	mov	r0, r5
   23842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_conn_unref(conn);
   23846:	4628      	mov	r0, r5
   23848:	f7ff ffca 	bl	237e0 <bt_conn_unref>
			continue;
   2384c:	e7df      	b.n	2380e <conn_lookup_handle+0x14>
	return NULL;
   2384e:	2500      	movs	r5, #0
   23850:	e7f6      	b.n	23840 <conn_lookup_handle+0x46>

00023852 <bt_conn_connected>:
{
   23852:	b510      	push	{r4, lr}
   23854:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   23856:	f7f3 f89b 	bl	16990 <bt_l2cap_connected>
	notify_connected(conn);
   2385a:	4620      	mov	r0, r4
   2385c:	f7f2 fc40 	bl	160e0 <notify_connected>
}
   23860:	bd10      	pop	{r4, pc}

00023862 <bt_conn_get_security>:
}
   23862:	2001      	movs	r0, #1
   23864:	4770      	bx	lr

00023866 <bt_conn_add_le>:
{
   23866:	b570      	push	{r4, r5, r6, lr}
   23868:	4606      	mov	r6, r0
   2386a:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   2386c:	f7f2 fc98 	bl	161a0 <acl_conn_new>
	if (!conn) {
   23870:	4604      	mov	r4, r0
   23872:	b168      	cbz	r0, 23890 <bt_conn_add_le+0x2a>
	conn->id = id;
   23874:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   23876:	2207      	movs	r2, #7
   23878:	4629      	mov	r1, r5
   2387a:	3088      	adds	r0, #136	; 0x88
   2387c:	f7ff f8d7 	bl	22a2e <memcpy>
	conn->type = BT_CONN_TYPE_LE;
   23880:	2301      	movs	r3, #1
   23882:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   23884:	2318      	movs	r3, #24
   23886:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   2388a:	2328      	movs	r3, #40	; 0x28
   2388c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
   23890:	4620      	mov	r0, r4
   23892:	bd70      	pop	{r4, r5, r6, pc}

00023894 <bt_conn_is_peer_addr_le>:
{
   23894:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   23896:	7a03      	ldrb	r3, [r0, #8]
   23898:	428b      	cmp	r3, r1
   2389a:	d001      	beq.n	238a0 <bt_conn_is_peer_addr_le+0xc>
		return false;
   2389c:	2000      	movs	r0, #0
}
   2389e:	bd38      	pop	{r3, r4, r5, pc}
   238a0:	4604      	mov	r4, r0
   238a2:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   238a4:	2207      	movs	r2, #7
   238a6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   238aa:	4628      	mov	r0, r5
   238ac:	f7ff f892 	bl	229d4 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   238b0:	b1a8      	cbz	r0, 238de <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   238b2:	78e3      	ldrb	r3, [r4, #3]
   238b4:	b14b      	cbz	r3, 238ca <bt_conn_is_peer_addr_le+0x36>
   238b6:	2207      	movs	r2, #7
   238b8:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   238bc:	4628      	mov	r0, r5
   238be:	f7ff f889 	bl	229d4 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   238c2:	fab0 f080 	clz	r0, r0
   238c6:	0940      	lsrs	r0, r0, #5
   238c8:	e7e9      	b.n	2389e <bt_conn_is_peer_addr_le+0xa>
   238ca:	2207      	movs	r2, #7
   238cc:	f104 0196 	add.w	r1, r4, #150	; 0x96
   238d0:	4628      	mov	r0, r5
   238d2:	f7ff f87f 	bl	229d4 <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   238d6:	fab0 f080 	clz	r0, r0
   238da:	0940      	lsrs	r0, r0, #5
   238dc:	e7df      	b.n	2389e <bt_conn_is_peer_addr_le+0xa>
		return true;
   238de:	2001      	movs	r0, #1
   238e0:	e7dd      	b.n	2389e <bt_conn_is_peer_addr_le+0xa>

000238e2 <bt_conn_exists_le>:
{
   238e2:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   238e4:	f7f2 fdee 	bl	164c4 <bt_conn_lookup_addr_le>
	if (conn) {
   238e8:	b908      	cbnz	r0, 238ee <bt_conn_exists_le+0xc>
	return false;
   238ea:	2000      	movs	r0, #0
}
   238ec:	bd08      	pop	{r3, pc}
		bt_conn_unref(conn);
   238ee:	f7ff ff77 	bl	237e0 <bt_conn_unref>
		return true;
   238f2:	2001      	movs	r0, #1
   238f4:	e7fa      	b.n	238ec <bt_conn_exists_le+0xa>

000238f6 <bt_conn_get_dst>:
}
   238f6:	3088      	adds	r0, #136	; 0x88
   238f8:	4770      	bx	lr

000238fa <bt_conn_le_conn_update>:
{
   238fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   238fc:	4606      	mov	r6, r0
   238fe:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   23900:	210e      	movs	r1, #14
   23902:	f242 0013 	movw	r0, #8211	; 0x2013
   23906:	f7f1 f957 	bl	14bb8 <bt_hci_cmd_create>
	if (!buf) {
   2390a:	b1d0      	cbz	r0, 23942 <bt_conn_le_conn_update+0x48>
   2390c:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   2390e:	210e      	movs	r1, #14
   23910:	3008      	adds	r0, #8
   23912:	f002 fa5f 	bl	25dd4 <net_buf_simple_add>
   23916:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   23918:	220e      	movs	r2, #14
   2391a:	2100      	movs	r1, #0
   2391c:	f7ff f8ab 	bl	22a76 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   23920:	8833      	ldrh	r3, [r6, #0]
   23922:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   23924:	882b      	ldrh	r3, [r5, #0]
   23926:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   23928:	886b      	ldrh	r3, [r5, #2]
   2392a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2392c:	88ab      	ldrh	r3, [r5, #4]
   2392e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   23930:	88eb      	ldrh	r3, [r5, #6]
   23932:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   23934:	2200      	movs	r2, #0
   23936:	4639      	mov	r1, r7
   23938:	f242 0013 	movw	r0, #8211	; 0x2013
   2393c:	f7f1 f978 	bl	14c30 <bt_hci_cmd_send_sync>
}
   23940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   23942:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23946:	e7fb      	b.n	23940 <bt_conn_le_conn_update+0x46>

00023948 <deferred_work>:
{
   23948:	b530      	push	{r4, r5, lr}
   2394a:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   2394c:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   23950:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
   23954:	b32b      	cbz	r3, 239a2 <deferred_work+0x5a>
	if (conn->type != BT_CONN_TYPE_LE) {
   23956:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   2395a:	2b01      	cmp	r3, #1
   2395c:	d11f      	bne.n	2399e <deferred_work+0x56>
	    conn->role == BT_CONN_ROLE_CENTRAL) {
   2395e:	f810 3c55 	ldrb.w	r3, [r0, #-85]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   23962:	b343      	cbz	r3, 239b6 <deferred_work+0x6e>
	if (atomic_test_and_clear_bit(conn->flags,
   23964:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23968:	f3bf 8f5b 	dmb	ish
   2396c:	e855 3f00 	ldrex	r3, [r5]
   23970:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   23974:	e845 2100 	strex	r1, r2, [r5]
   23978:	2900      	cmp	r1, #0
   2397a:	d1f7      	bne.n	2396c <deferred_work+0x24>
   2397c:	f3bf 8f5b 	dmb	ish
   23980:	f413 7f00 	tst.w	r3, #512	; 0x200
   23984:	d11a      	bne.n	239bc <deferred_work+0x74>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23986:	f3bf 8f5b 	dmb	ish
   2398a:	e855 3f00 	ldrex	r3, [r5]
   2398e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23992:	e845 3200 	strex	r2, r3, [r5]
   23996:	2a00      	cmp	r2, #0
   23998:	d1f7      	bne.n	2398a <deferred_work+0x42>
   2399a:	f3bf 8f5b 	dmb	ish
}
   2399e:	b003      	add	sp, #12
   239a0:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
   239a2:	4620      	mov	r0, r4
   239a4:	f000 f884 	bl	23ab0 <bt_l2cap_disconnected>
		notify_disconnected(conn);
   239a8:	4620      	mov	r0, r4
   239aa:	f7f2 fb37 	bl	1601c <notify_disconnected>
		bt_conn_unref(conn);
   239ae:	4620      	mov	r0, r4
   239b0:	f7ff ff16 	bl	237e0 <bt_conn_unref>
		return;
   239b4:	e7f3      	b.n	2399e <deferred_work+0x56>
		bt_le_create_conn_cancel();
   239b6:	f7f1 fb91 	bl	150dc <bt_le_create_conn_cancel>
		return;
   239ba:	e7f0      	b.n	2399e <deferred_work+0x56>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   239bc:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   239c0:	f8ad 3000 	strh.w	r3, [sp]
   239c4:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   239c8:	f8ad 3002 	strh.w	r3, [sp, #2]
   239cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   239d0:	f8ad 3004 	strh.w	r3, [sp, #4]
   239d4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   239d8:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   239dc:	4669      	mov	r1, sp
   239de:	4620      	mov	r0, r4
   239e0:	f7f2 fe5c 	bl	1669c <send_conn_le_param_update>
   239e4:	e7cf      	b.n	23986 <deferred_work+0x3e>

000239e6 <l2cap_connected>:
}
   239e6:	4770      	bx	lr

000239e8 <l2cap_chan_recv>:
{
   239e8:	b510      	push	{r4, lr}
   239ea:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   239ec:	6843      	ldr	r3, [r0, #4]
   239ee:	691b      	ldr	r3, [r3, #16]
   239f0:	4798      	blx	r3
	net_buf_unref(buf);
   239f2:	4620      	mov	r0, r4
   239f4:	f002 f9a4 	bl	25d40 <net_buf_unref>
}
   239f8:	bd10      	pop	{r4, pc}

000239fa <l2cap_disconnected>:
{
   239fa:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&chan->rtx_work);
   239fc:	3010      	adds	r0, #16
   239fe:	f003 ff9b 	bl	27938 <k_work_cancel_delayable>
}
   23a02:	bd08      	pop	{r3, pc}

00023a04 <bt_l2cap_chan_remove>:
	return list->head;
   23a04:	6d03      	ldr	r3, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23a06:	b103      	cbz	r3, 23a0a <bt_l2cap_chan_remove+0x6>
   23a08:	3b08      	subs	r3, #8
   23a0a:	2200      	movs	r2, #0
   23a0c:	e016      	b.n	23a3c <bt_l2cap_chan_remove+0x38>
{
   23a0e:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   23a10:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
   23a14:	b142      	cbz	r2, 23a28 <bt_l2cap_chan_remove+0x24>
	return node->next;
   23a16:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
   23a18:	6014      	str	r4, [r2, #0]
	return list->tail;
   23a1a:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   23a1c:	42a1      	cmp	r1, r4
   23a1e:	d00a      	beq.n	23a36 <bt_l2cap_chan_remove+0x32>
	parent->next = child;
   23a20:	2200      	movs	r2, #0
   23a22:	609a      	str	r2, [r3, #8]
}
   23a24:	bc10      	pop	{r4}
   23a26:	4770      	bx	lr
	return node->next;
   23a28:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   23a2a:	6502      	str	r2, [r0, #80]	; 0x50
	return list->tail;
   23a2c:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   23a2e:	42a1      	cmp	r1, r4
   23a30:	d1f6      	bne.n	23a20 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   23a32:	6542      	str	r2, [r0, #84]	; 0x54
}
   23a34:	e7f4      	b.n	23a20 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   23a36:	6542      	str	r2, [r0, #84]	; 0x54
}
   23a38:	e7f2      	b.n	23a20 <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23a3a:	4613      	mov	r3, r2
   23a3c:	b14b      	cbz	r3, 23a52 <bt_l2cap_chan_remove+0x4e>
		if (chan == ch) {
   23a3e:	428b      	cmp	r3, r1
   23a40:	d0e5      	beq.n	23a0e <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23a42:	f113 0208 	adds.w	r2, r3, #8
   23a46:	d0f8      	beq.n	23a3a <bt_l2cap_chan_remove+0x36>
	return node->next;
   23a48:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23a4a:	2b00      	cmp	r3, #0
   23a4c:	d0f6      	beq.n	23a3c <bt_l2cap_chan_remove+0x38>
   23a4e:	3b08      	subs	r3, #8
   23a50:	e7f4      	b.n	23a3c <bt_l2cap_chan_remove+0x38>
   23a52:	4770      	bx	lr

00023a54 <bt_l2cap_chan_del>:
{
   23a54:	b538      	push	{r3, r4, r5, lr}
   23a56:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   23a58:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   23a5a:	6803      	ldr	r3, [r0, #0]
   23a5c:	b123      	cbz	r3, 23a68 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   23a5e:	686b      	ldr	r3, [r5, #4]
   23a60:	b103      	cbz	r3, 23a64 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   23a62:	4798      	blx	r3
	chan->conn = NULL;
   23a64:	2300      	movs	r3, #0
   23a66:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   23a68:	68e3      	ldr	r3, [r4, #12]
   23a6a:	b10b      	cbz	r3, 23a70 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   23a6c:	4620      	mov	r0, r4
   23a6e:	4798      	blx	r3
	if (ops->released) {
   23a70:	69eb      	ldr	r3, [r5, #28]
   23a72:	b10b      	cbz	r3, 23a78 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   23a74:	4620      	mov	r0, r4
   23a76:	4798      	blx	r3
}
   23a78:	bd38      	pop	{r3, r4, r5, pc}

00023a7a <l2cap_rtx_timeout>:
{
   23a7a:	b510      	push	{r4, lr}
	struct bt_conn *conn = chan->chan.conn;
   23a7c:	4604      	mov	r4, r0
   23a7e:	f854 0d10 	ldr.w	r0, [r4, #-16]!
	bt_l2cap_chan_remove(conn, &chan->chan);
   23a82:	4621      	mov	r1, r4
   23a84:	f7ff ffbe 	bl	23a04 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   23a88:	4620      	mov	r0, r4
   23a8a:	f7ff ffe3 	bl	23a54 <bt_l2cap_chan_del>
}
   23a8e:	bd10      	pop	{r4, pc}

00023a90 <bt_l2cap_chan_add>:
{
   23a90:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   23a92:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   23a96:	2400      	movs	r4, #0
   23a98:	608c      	str	r4, [r1, #8]
	return list->tail;
   23a9a:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   23a9c:	b12c      	cbz	r4, 23aaa <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   23a9e:	6023      	str	r3, [r4, #0]
	list->tail = node;
   23aa0:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   23aa2:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   23aa4:	60ca      	str	r2, [r1, #12]
}
   23aa6:	bc10      	pop	{r4}
   23aa8:	4770      	bx	lr
   23aaa:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   23aac:	6503      	str	r3, [r0, #80]	; 0x50
}
   23aae:	e7f8      	b.n	23aa2 <bt_l2cap_chan_add+0x12>

00023ab0 <bt_l2cap_disconnected>:
{
   23ab0:	b510      	push	{r4, lr}
	return list->head;
   23ab2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23ab4:	b140      	cbz	r0, 23ac8 <bt_l2cap_disconnected+0x18>
   23ab6:	3808      	subs	r0, #8
   23ab8:	d008      	beq.n	23acc <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23aba:	f110 0408 	adds.w	r4, r0, #8
   23abe:	d00a      	beq.n	23ad6 <bt_l2cap_disconnected+0x26>
	return node->next;
   23ac0:	6884      	ldr	r4, [r0, #8]
   23ac2:	b144      	cbz	r4, 23ad6 <bt_l2cap_disconnected+0x26>
   23ac4:	3c08      	subs	r4, #8
   23ac6:	e006      	b.n	23ad6 <bt_l2cap_disconnected+0x26>
   23ac8:	4604      	mov	r4, r0
   23aca:	e004      	b.n	23ad6 <bt_l2cap_disconnected+0x26>
   23acc:	4604      	mov	r4, r0
   23ace:	e002      	b.n	23ad6 <bt_l2cap_disconnected+0x26>
   23ad0:	4623      	mov	r3, r4
   23ad2:	4620      	mov	r0, r4
   23ad4:	461c      	mov	r4, r3
   23ad6:	b158      	cbz	r0, 23af0 <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
   23ad8:	f7ff ffbc 	bl	23a54 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23adc:	2c00      	cmp	r4, #0
   23ade:	d0f7      	beq.n	23ad0 <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23ae0:	f114 0308 	adds.w	r3, r4, #8
   23ae4:	d0f5      	beq.n	23ad2 <bt_l2cap_disconnected+0x22>
	return node->next;
   23ae6:	68a3      	ldr	r3, [r4, #8]
   23ae8:	2b00      	cmp	r3, #0
   23aea:	d0f2      	beq.n	23ad2 <bt_l2cap_disconnected+0x22>
   23aec:	3b08      	subs	r3, #8
   23aee:	e7f0      	b.n	23ad2 <bt_l2cap_disconnected+0x22>
}
   23af0:	bd10      	pop	{r4, pc}

00023af2 <bt_l2cap_create_pdu_timeout>:
{
   23af2:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   23af4:	3104      	adds	r1, #4
   23af6:	f7f2 fc45 	bl	16384 <bt_conn_create_pdu_timeout>
}
   23afa:	bd08      	pop	{r3, pc}

00023afc <l2cap_create_le_sig_pdu>:
{
   23afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23afe:	460e      	mov	r6, r1
   23b00:	4615      	mov	r5, r2
   23b02:	461c      	mov	r4, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   23b04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   23b08:	2300      	movs	r3, #0
   23b0a:	2100      	movs	r1, #0
   23b0c:	4608      	mov	r0, r1
   23b0e:	f7ff fff0 	bl	23af2 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   23b12:	4607      	mov	r7, r0
   23b14:	b130      	cbz	r0, 23b24 <l2cap_create_le_sig_pdu+0x28>
   23b16:	2104      	movs	r1, #4
   23b18:	3008      	adds	r0, #8
   23b1a:	f002 f95b 	bl	25dd4 <net_buf_simple_add>
	hdr->code = code;
   23b1e:	7006      	strb	r6, [r0, #0]
	hdr->ident = ident;
   23b20:	7045      	strb	r5, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   23b22:	8044      	strh	r4, [r0, #2]
}
   23b24:	4638      	mov	r0, r7
   23b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023b28 <bt_l2cap_send_cb>:
{
   23b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23b2a:	4605      	mov	r5, r0
   23b2c:	460f      	mov	r7, r1
   23b2e:	4614      	mov	r4, r2
   23b30:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   23b32:	2104      	movs	r1, #4
   23b34:	f102 0008 	add.w	r0, r2, #8
   23b38:	f002 f966 	bl	25e08 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   23b3c:	89a3      	ldrh	r3, [r4, #12]
   23b3e:	3b04      	subs	r3, #4
   23b40:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   23b42:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   23b44:	9b06      	ldr	r3, [sp, #24]
   23b46:	4632      	mov	r2, r6
   23b48:	4621      	mov	r1, r4
   23b4a:	4628      	mov	r0, r5
   23b4c:	f7ff fdf8 	bl	23740 <bt_conn_send_cb>
}
   23b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023b52 <l2cap_send_reject>:
{
   23b52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23b56:	b083      	sub	sp, #12
   23b58:	4605      	mov	r5, r0
   23b5a:	4690      	mov	r8, r2
   23b5c:	461c      	mov	r4, r3
   23b5e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   23b62:	1cbb      	adds	r3, r7, #2
   23b64:	460a      	mov	r2, r1
   23b66:	2101      	movs	r1, #1
   23b68:	2000      	movs	r0, #0
   23b6a:	f7ff ffc7 	bl	23afc <l2cap_create_le_sig_pdu>
	if (!buf) {
   23b6e:	b1b0      	cbz	r0, 23b9e <l2cap_send_reject+0x4c>
   23b70:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   23b72:	f100 0908 	add.w	r9, r0, #8
   23b76:	2102      	movs	r1, #2
   23b78:	4648      	mov	r0, r9
   23b7a:	f002 f92b 	bl	25dd4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   23b7e:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   23b82:	b124      	cbz	r4, 23b8e <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   23b84:	463a      	mov	r2, r7
   23b86:	4621      	mov	r1, r4
   23b88:	4648      	mov	r0, r9
   23b8a:	f002 f929 	bl	25de0 <net_buf_simple_add_mem>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   23b8e:	2300      	movs	r3, #0
   23b90:	9300      	str	r3, [sp, #0]
   23b92:	4632      	mov	r2, r6
   23b94:	2105      	movs	r1, #5
   23b96:	4628      	mov	r0, r5
   23b98:	f7ff ffc6 	bl	23b28 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   23b9c:	b910      	cbnz	r0, 23ba4 <l2cap_send_reject+0x52>
}
   23b9e:	b003      	add	sp, #12
   23ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   23ba4:	4630      	mov	r0, r6
   23ba6:	f002 f8cb 	bl	25d40 <net_buf_unref>
}
   23baa:	e7f8      	b.n	23b9e <l2cap_send_reject+0x4c>

00023bac <le_conn_param_update_req>:
{
   23bac:	b570      	push	{r4, r5, r6, lr}
   23bae:	b084      	sub	sp, #16
   23bb0:	4614      	mov	r4, r2
	struct bt_conn *conn = l2cap->chan.chan.conn;
   23bb2:	6805      	ldr	r5, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   23bb4:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
   23bb6:	8992      	ldrh	r2, [r2, #12]
   23bb8:	2a07      	cmp	r2, #7
   23bba:	d937      	bls.n	23c2c <le_conn_param_update_req+0x80>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   23bbc:	78ea      	ldrb	r2, [r5, #3]
   23bbe:	bb7a      	cbnz	r2, 23c20 <le_conn_param_update_req+0x74>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   23bc0:	881a      	ldrh	r2, [r3, #0]
   23bc2:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   23bc6:	885a      	ldrh	r2, [r3, #2]
   23bc8:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   23bcc:	889a      	ldrh	r2, [r3, #4]
   23bce:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   23bd2:	88db      	ldrh	r3, [r3, #6]
   23bd4:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   23bd8:	2302      	movs	r3, #2
   23bda:	460a      	mov	r2, r1
   23bdc:	2113      	movs	r1, #19
   23bde:	4620      	mov	r0, r4
   23be0:	f7ff ff8c 	bl	23afc <l2cap_create_le_sig_pdu>
	if (!buf) {
   23be4:	4606      	mov	r6, r0
   23be6:	b308      	cbz	r0, 23c2c <le_conn_param_update_req+0x80>
	accepted = le_param_req(conn, &param);
   23be8:	a902      	add	r1, sp, #8
   23bea:	4628      	mov	r0, r5
   23bec:	f7f2 fc30 	bl	16450 <le_param_req>
   23bf0:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   23bf2:	2102      	movs	r1, #2
   23bf4:	f106 0008 	add.w	r0, r6, #8
   23bf8:	f002 f8ec 	bl	25dd4 <net_buf_simple_add>
	if (accepted) {
   23bfc:	b1c4      	cbz	r4, 23c30 <le_conn_param_update_req+0x84>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   23bfe:	2300      	movs	r3, #0
   23c00:	7003      	strb	r3, [r0, #0]
   23c02:	7043      	strb	r3, [r0, #1]
   23c04:	2300      	movs	r3, #0
   23c06:	9300      	str	r3, [sp, #0]
   23c08:	4632      	mov	r2, r6
   23c0a:	2105      	movs	r1, #5
   23c0c:	4628      	mov	r0, r5
   23c0e:	f7ff ff8b 	bl	23b28 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   23c12:	b990      	cbnz	r0, 23c3a <le_conn_param_update_req+0x8e>
	if (accepted) {
   23c14:	b154      	cbz	r4, 23c2c <le_conn_param_update_req+0x80>
		bt_conn_le_conn_update(conn, &param);
   23c16:	a902      	add	r1, sp, #8
   23c18:	4628      	mov	r0, r5
   23c1a:	f7ff fe6e 	bl	238fa <bt_conn_le_conn_update>
   23c1e:	e005      	b.n	23c2c <le_conn_param_update_req+0x80>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   23c20:	2200      	movs	r2, #0
   23c22:	9200      	str	r2, [sp, #0]
   23c24:	4613      	mov	r3, r2
   23c26:	4628      	mov	r0, r5
   23c28:	f7ff ff93 	bl	23b52 <l2cap_send_reject>
}
   23c2c:	b004      	add	sp, #16
   23c2e:	bd70      	pop	{r4, r5, r6, pc}
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
   23c30:	2301      	movs	r3, #1
   23c32:	7003      	strb	r3, [r0, #0]
   23c34:	2300      	movs	r3, #0
   23c36:	7043      	strb	r3, [r0, #1]
   23c38:	e7e4      	b.n	23c04 <le_conn_param_update_req+0x58>
		net_buf_unref(buf);
   23c3a:	4630      	mov	r0, r6
   23c3c:	f002 f880 	bl	25d40 <net_buf_unref>
   23c40:	e7e8      	b.n	23c14 <le_conn_param_update_req+0x68>

00023c42 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   23c42:	898b      	ldrh	r3, [r1, #12]
   23c44:	2b03      	cmp	r3, #3
   23c46:	d801      	bhi.n	23c4c <l2cap_recv+0xa>
}
   23c48:	2000      	movs	r0, #0
   23c4a:	4770      	bx	lr
{
   23c4c:	b530      	push	{r4, r5, lr}
   23c4e:	b083      	sub	sp, #12
   23c50:	4605      	mov	r5, r0
   23c52:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   23c54:	2104      	movs	r1, #4
   23c56:	f104 0008 	add.w	r0, r4, #8
   23c5a:	f002 f8e5 	bl	25e28 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   23c5e:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   23c60:	89a1      	ldrh	r1, [r4, #12]
   23c62:	4291      	cmp	r1, r2
   23c64:	d113      	bne.n	23c8e <l2cap_recv+0x4c>
	if (!hdr->ident) {
   23c66:	7841      	ldrb	r1, [r0, #1]
   23c68:	b189      	cbz	r1, 23c8e <l2cap_recv+0x4c>
	switch (hdr->code) {
   23c6a:	7803      	ldrb	r3, [r0, #0]
   23c6c:	2b12      	cmp	r3, #18
   23c6e:	d00a      	beq.n	23c86 <l2cap_recv+0x44>
   23c70:	2b13      	cmp	r3, #19
   23c72:	d00c      	beq.n	23c8e <l2cap_recv+0x4c>
   23c74:	2b01      	cmp	r3, #1
   23c76:	d00a      	beq.n	23c8e <l2cap_recv+0x4c>
		l2cap_send_reject(chan->conn, hdr->ident,
   23c78:	2200      	movs	r2, #0
   23c7a:	9200      	str	r2, [sp, #0]
   23c7c:	4613      	mov	r3, r2
   23c7e:	6828      	ldr	r0, [r5, #0]
   23c80:	f7ff ff67 	bl	23b52 <l2cap_send_reject>
		break;
   23c84:	e003      	b.n	23c8e <l2cap_recv+0x4c>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   23c86:	4622      	mov	r2, r4
   23c88:	4628      	mov	r0, r5
   23c8a:	f7ff ff8f 	bl	23bac <le_conn_param_update_req>
}
   23c8e:	2000      	movs	r0, #0
   23c90:	b003      	add	sp, #12
   23c92:	bd30      	pop	{r4, r5, pc}

00023c94 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   23c94:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23c96:	b110      	cbz	r0, 23c9e <bt_l2cap_le_lookup_tx_cid+0xa>
   23c98:	3808      	subs	r0, #8
   23c9a:	e000      	b.n	23c9e <bt_l2cap_le_lookup_tx_cid+0xa>
   23c9c:	3808      	subs	r0, #8
   23c9e:	b148      	cbz	r0, 23cb4 <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   23ca0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   23ca4:	428b      	cmp	r3, r1
   23ca6:	d005      	beq.n	23cb4 <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23ca8:	f110 0308 	adds.w	r3, r0, #8
   23cac:	d003      	beq.n	23cb6 <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
   23cae:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23cb0:	2800      	cmp	r0, #0
   23cb2:	d1f3      	bne.n	23c9c <bt_l2cap_le_lookup_tx_cid+0x8>
}
   23cb4:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23cb6:	4618      	mov	r0, r3
   23cb8:	e7f1      	b.n	23c9e <bt_l2cap_le_lookup_tx_cid+0xa>

00023cba <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   23cba:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23cbc:	b110      	cbz	r0, 23cc4 <bt_l2cap_le_lookup_rx_cid+0xa>
   23cbe:	3808      	subs	r0, #8
   23cc0:	e000      	b.n	23cc4 <bt_l2cap_le_lookup_rx_cid+0xa>
   23cc2:	3808      	subs	r0, #8
   23cc4:	b148      	cbz	r0, 23cda <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   23cc6:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   23cca:	428b      	cmp	r3, r1
   23ccc:	d005      	beq.n	23cda <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23cce:	f110 0308 	adds.w	r3, r0, #8
   23cd2:	d003      	beq.n	23cdc <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
   23cd4:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23cd6:	2800      	cmp	r0, #0
   23cd8:	d1f3      	bne.n	23cc2 <bt_l2cap_le_lookup_rx_cid+0x8>
}
   23cda:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23cdc:	4618      	mov	r0, r3
   23cde:	e7f1      	b.n	23cc4 <bt_l2cap_le_lookup_rx_cid+0xa>

00023ce0 <bt_l2cap_recv>:
{
   23ce0:	b570      	push	{r4, r5, r6, lr}
   23ce2:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   23ce4:	898b      	ldrh	r3, [r1, #12]
   23ce6:	2b03      	cmp	r3, #3
   23ce8:	d910      	bls.n	23d0c <bt_l2cap_recv+0x2c>
   23cea:	4605      	mov	r5, r0
   23cec:	4616      	mov	r6, r2
   23cee:	2104      	movs	r1, #4
   23cf0:	f104 0008 	add.w	r0, r4, #8
   23cf4:	f002 f898 	bl	25e28 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   23cf8:	8841      	ldrh	r1, [r0, #2]
   23cfa:	4628      	mov	r0, r5
   23cfc:	f7ff ffdd 	bl	23cba <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   23d00:	b140      	cbz	r0, 23d14 <bt_l2cap_recv+0x34>
	l2cap_chan_recv(chan, buf, complete);
   23d02:	4632      	mov	r2, r6
   23d04:	4621      	mov	r1, r4
   23d06:	f7ff fe6f 	bl	239e8 <l2cap_chan_recv>
}
   23d0a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   23d0c:	4608      	mov	r0, r1
   23d0e:	f002 f817 	bl	25d40 <net_buf_unref>
		return;
   23d12:	e7fa      	b.n	23d0a <bt_l2cap_recv+0x2a>
		net_buf_unref(buf);
   23d14:	4620      	mov	r0, r4
   23d16:	f002 f813 	bl	25d40 <net_buf_unref>
		return;
   23d1a:	e7f6      	b.n	23d0a <bt_l2cap_recv+0x2a>

00023d1c <bt_l2cap_update_conn_param>:
{
   23d1c:	b570      	push	{r4, r5, r6, lr}
   23d1e:	b082      	sub	sp, #8
   23d20:	4605      	mov	r5, r0
   23d22:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   23d24:	f7f2 fde8 	bl	168f8 <get_ident>
   23d28:	4602      	mov	r2, r0
   23d2a:	2308      	movs	r3, #8
   23d2c:	2112      	movs	r1, #18
   23d2e:	2000      	movs	r0, #0
   23d30:	f7ff fee4 	bl	23afc <l2cap_create_le_sig_pdu>
	if (!buf) {
   23d34:	b1e0      	cbz	r0, 23d70 <bt_l2cap_update_conn_param+0x54>
   23d36:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   23d38:	2108      	movs	r1, #8
   23d3a:	4408      	add	r0, r1
   23d3c:	f002 f84a 	bl	25dd4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   23d40:	8823      	ldrh	r3, [r4, #0]
   23d42:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   23d44:	8863      	ldrh	r3, [r4, #2]
   23d46:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   23d48:	88a3      	ldrh	r3, [r4, #4]
   23d4a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   23d4c:	88e3      	ldrh	r3, [r4, #6]
   23d4e:	80c3      	strh	r3, [r0, #6]
   23d50:	2300      	movs	r3, #0
   23d52:	9300      	str	r3, [sp, #0]
   23d54:	4632      	mov	r2, r6
   23d56:	2105      	movs	r1, #5
   23d58:	4628      	mov	r0, r5
   23d5a:	f7ff fee5 	bl	23b28 <bt_l2cap_send_cb>
	if (err) {
   23d5e:	4604      	mov	r4, r0
   23d60:	b910      	cbnz	r0, 23d68 <bt_l2cap_update_conn_param+0x4c>
}
   23d62:	4620      	mov	r0, r4
   23d64:	b002      	add	sp, #8
   23d66:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   23d68:	4630      	mov	r0, r6
   23d6a:	f001 ffe9 	bl	25d40 <net_buf_unref>
		return err;
   23d6e:	e7f8      	b.n	23d62 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   23d70:	f06f 040b 	mvn.w	r4, #11
   23d74:	e7f5      	b.n	23d62 <bt_l2cap_update_conn_param+0x46>

00023d76 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   23d76:	4770      	bx	lr

00023d78 <att_sent>:
{
   23d78:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
   23d7a:	684b      	ldr	r3, [r1, #4]
   23d7c:	695b      	ldr	r3, [r3, #20]
   23d7e:	b10b      	cbz	r3, 23d84 <att_sent+0xc>
   23d80:	4608      	mov	r0, r1
		chan->ops->sent(chan);
   23d82:	4798      	blx	r3
}
   23d84:	bd08      	pop	{r3, pc}

00023d86 <range_is_valid>:
	if (!start || !end) {
   23d86:	b120      	cbz	r0, 23d92 <range_is_valid+0xc>
   23d88:	b119      	cbz	r1, 23d92 <range_is_valid+0xc>
	if (start > end) {
   23d8a:	4288      	cmp	r0, r1
   23d8c:	d806      	bhi.n	23d9c <range_is_valid+0x16>
	return true;
   23d8e:	2001      	movs	r0, #1
}
   23d90:	4770      	bx	lr
		if (err) {
   23d92:	b10a      	cbz	r2, 23d98 <range_is_valid+0x12>
			*err = 0U;
   23d94:	2300      	movs	r3, #0
   23d96:	8013      	strh	r3, [r2, #0]
		return false;
   23d98:	2000      	movs	r0, #0
   23d9a:	4770      	bx	lr
		if (err) {
   23d9c:	b102      	cbz	r2, 23da0 <range_is_valid+0x1a>
			*err = start;
   23d9e:	8010      	strh	r0, [r2, #0]
		return false;
   23da0:	2000      	movs	r0, #0
   23da2:	4770      	bx	lr

00023da4 <err_to_att>:
	if (err < 0 && err >= -0xff) {
   23da4:	f110 0fff 	cmn.w	r0, #255	; 0xff
   23da8:	d201      	bcs.n	23dae <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   23daa:	200e      	movs	r0, #14
}
   23dac:	4770      	bx	lr
		return -err;
   23dae:	4240      	negs	r0, r0
   23db0:	b2c0      	uxtb	r0, r0
   23db2:	4770      	bx	lr

00023db4 <attr_read_type_cb>:
{
   23db4:	b410      	push	{r4}
	if (!data->rsp->len) {
   23db6:	68d4      	ldr	r4, [r2, #12]
   23db8:	7823      	ldrb	r3, [r4, #0]
   23dba:	b923      	cbnz	r3, 23dc6 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   23dbc:	3102      	adds	r1, #2
   23dbe:	7021      	strb	r1, [r4, #0]
	return true;
   23dc0:	2001      	movs	r0, #1
}
   23dc2:	bc10      	pop	{r4}
   23dc4:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   23dc6:	3102      	adds	r1, #2
   23dc8:	428b      	cmp	r3, r1
   23dca:	d005      	beq.n	23dd8 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   23dcc:	8983      	ldrh	r3, [r0, #12]
   23dce:	3b02      	subs	r3, #2
   23dd0:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   23dd2:	2000      	movs	r0, #0
   23dd4:	6110      	str	r0, [r2, #16]
		return false;
   23dd6:	e7f4      	b.n	23dc2 <attr_read_type_cb+0xe>
	return true;
   23dd8:	2001      	movs	r0, #1
   23dda:	e7f2      	b.n	23dc2 <attr_read_type_cb+0xe>

00023ddc <attr_read_group_cb>:
	if (!data->rsp->len) {
   23ddc:	68d0      	ldr	r0, [r2, #12]
   23dde:	7803      	ldrb	r3, [r0, #0]
   23de0:	b91b      	cbnz	r3, 23dea <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   23de2:	3104      	adds	r1, #4
   23de4:	7001      	strb	r1, [r0, #0]
	return true;
   23de6:	2001      	movs	r0, #1
   23de8:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   23dea:	3104      	adds	r1, #4
   23dec:	428b      	cmp	r3, r1
   23dee:	d006      	beq.n	23dfe <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   23df0:	6891      	ldr	r1, [r2, #8]
   23df2:	898b      	ldrh	r3, [r1, #12]
   23df4:	3b04      	subs	r3, #4
   23df6:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   23df8:	2000      	movs	r0, #0
   23dfa:	6110      	str	r0, [r2, #16]
		return false;
   23dfc:	4770      	bx	lr
	return true;
   23dfe:	2001      	movs	r0, #1
}
   23e00:	4770      	bx	lr

00023e02 <att_prepare_write_req>:
}
   23e02:	2006      	movs	r0, #6
   23e04:	4770      	bx	lr

00023e06 <att_exec_write_req>:
}
   23e06:	2006      	movs	r0, #6
   23e08:	4770      	bx	lr

00023e0a <att_op_get_type>:
	switch (op) {
   23e0a:	1e43      	subs	r3, r0, #1
   23e0c:	2bd1      	cmp	r3, #209	; 0xd1
   23e0e:	d874      	bhi.n	23efa <att_op_get_type+0xf0>
   23e10:	e8df f003 	tbb	[pc, r3]
   23e14:	696d696d 	.word	0x696d696d
   23e18:	696d696d 	.word	0x696d696d
   23e1c:	696d696d 	.word	0x696d696d
   23e20:	696d696d 	.word	0x696d696d
   23e24:	736d696d 	.word	0x736d696d
   23e28:	696d6973 	.word	0x696d6973
   23e2c:	736f736d 	.word	0x736f736d
   23e30:	73737871 	.word	0x73737871
   23e34:	73737373 	.word	0x73737373
   23e38:	73737373 	.word	0x73737373
   23e3c:	73737373 	.word	0x73737373
   23e40:	73737373 	.word	0x73737373
   23e44:	73737373 	.word	0x73737373
   23e48:	73737373 	.word	0x73737373
   23e4c:	73737373 	.word	0x73737373
   23e50:	73737373 	.word	0x73737373
   23e54:	73737373 	.word	0x73737373
   23e58:	73737373 	.word	0x73737373
   23e5c:	73737373 	.word	0x73737373
   23e60:	73737373 	.word	0x73737373
   23e64:	73736b73 	.word	0x73736b73
   23e68:	73737373 	.word	0x73737373
   23e6c:	73737373 	.word	0x73737373
   23e70:	73737373 	.word	0x73737373
   23e74:	73737373 	.word	0x73737373
   23e78:	73737373 	.word	0x73737373
   23e7c:	73737373 	.word	0x73737373
   23e80:	73737373 	.word	0x73737373
   23e84:	73737373 	.word	0x73737373
   23e88:	73737373 	.word	0x73737373
   23e8c:	73737373 	.word	0x73737373
   23e90:	73737373 	.word	0x73737373
   23e94:	73737373 	.word	0x73737373
   23e98:	73737373 	.word	0x73737373
   23e9c:	73737373 	.word	0x73737373
   23ea0:	73737373 	.word	0x73737373
   23ea4:	73737373 	.word	0x73737373
   23ea8:	73737373 	.word	0x73737373
   23eac:	73737373 	.word	0x73737373
   23eb0:	73737373 	.word	0x73737373
   23eb4:	73737373 	.word	0x73737373
   23eb8:	73737373 	.word	0x73737373
   23ebc:	73737373 	.word	0x73737373
   23ec0:	73737373 	.word	0x73737373
   23ec4:	73737373 	.word	0x73737373
   23ec8:	73737373 	.word	0x73737373
   23ecc:	73737373 	.word	0x73737373
   23ed0:	73737373 	.word	0x73737373
   23ed4:	73737373 	.word	0x73737373
   23ed8:	73737373 	.word	0x73737373
   23edc:	73737373 	.word	0x73737373
   23ee0:	73737373 	.word	0x73737373
   23ee4:	6b73      	.short	0x6b73
{
   23ee6:	2001      	movs	r0, #1
   23ee8:	4770      	bx	lr
		return ATT_COMMAND;
   23eea:	2000      	movs	r0, #0
   23eec:	4770      	bx	lr
		return ATT_RESPONSE;
   23eee:	2002      	movs	r0, #2
   23ef0:	4770      	bx	lr
		return ATT_NOTIFICATION;
   23ef2:	2003      	movs	r0, #3
   23ef4:	4770      	bx	lr
		return ATT_INDICATION;
   23ef6:	2005      	movs	r0, #5
   23ef8:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   23efa:	f010 0f40 	tst.w	r0, #64	; 0x40
   23efe:	d103      	bne.n	23f08 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   23f00:	2006      	movs	r0, #6
   23f02:	4770      	bx	lr
		return ATT_CONFIRMATION;
   23f04:	2004      	movs	r0, #4
   23f06:	4770      	bx	lr
		return ATT_COMMAND;
   23f08:	2000      	movs	r0, #0
}
   23f0a:	4770      	bx	lr

00023f0c <att_get>:
{
   23f0c:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   23f0e:	7a83      	ldrb	r3, [r0, #10]
   23f10:	2b07      	cmp	r3, #7
   23f12:	d10f      	bne.n	23f34 <att_get+0x28>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   23f14:	2104      	movs	r1, #4
   23f16:	f7ff fed0 	bl	23cba <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   23f1a:	b160      	cbz	r0, 23f36 <att_get+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23f1c:	f3bf 8f5b 	dmb	ish
   23f20:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   23f24:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   23f28:	f013 0f04 	tst.w	r3, #4
   23f2c:	d104      	bne.n	23f38 <att_get+0x2c>
	return att_chan->att;
   23f2e:	f850 0c08 	ldr.w	r0, [r0, #-8]
   23f32:	e000      	b.n	23f36 <att_get+0x2a>
		return NULL;
   23f34:	2000      	movs	r0, #0
}
   23f36:	bd08      	pop	{r3, pc}
		return NULL;
   23f38:	2000      	movs	r0, #0
   23f3a:	e7fc      	b.n	23f36 <att_get+0x2a>

00023f3c <att_chan_attach>:
{
   23f3c:	b538      	push	{r3, r4, r5, lr}
   23f3e:	4604      	mov	r4, r0
   23f40:	460d      	mov	r5, r1
	return list->head;
   23f42:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   23f44:	b143      	cbz	r3, 23f58 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   23f46:	f505 73a2 	add.w	r3, r5, #324	; 0x144
   23f4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   23f4c:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
	list->head = node;
   23f50:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   23f52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   23f54:	b122      	cbz	r2, 23f60 <att_chan_attach+0x24>
}
   23f56:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   23f58:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   23f5a:	f003 fb93 	bl	27684 <z_impl_k_queue_init>
}
   23f5e:	e7f2      	b.n	23f46 <att_chan_attach+0xa>
	list->tail = node;
   23f60:	62a3      	str	r3, [r4, #40]	; 0x28
}
   23f62:	e7f8      	b.n	23f56 <att_chan_attach+0x1a>

00023f64 <chan_send>:
{
   23f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23f68:	b083      	sub	sp, #12
   23f6a:	4604      	mov	r4, r0
   23f6c:	460d      	mov	r5, r1
   23f6e:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
   23f70:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   23f72:	781b      	ldrb	r3, [r3, #0]
   23f74:	2bd2      	cmp	r3, #210	; 0xd2
   23f76:	d021      	beq.n	23fbc <chan_send+0x58>
	state->offset = net_buf_simple_headroom(buf);
   23f78:	f105 0008 	add.w	r0, r5, #8
   23f7c:	f001 ff6c 	bl	25e58 <net_buf_simple_headroom>
   23f80:	b287      	uxth	r7, r0
	state->len = buf->len;
   23f82:	f8b5 900c 	ldrh.w	r9, [r5, #12]
	chan->sent = cb ? cb : chan_cb(buf);
   23f86:	b326      	cbz	r6, 23fd2 <chan_send+0x6e>
   23f88:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   23f8c:	f854 8b08 	ldr.w	r8, [r4], #8
   23f90:	4630      	mov	r0, r6
   23f92:	f7f2 fd57 	bl	16a44 <att_cb>
   23f96:	4603      	mov	r3, r0
   23f98:	f8d8 0000 	ldr.w	r0, [r8]
   23f9c:	9400      	str	r4, [sp, #0]
   23f9e:	462a      	mov	r2, r5
   23fa0:	2104      	movs	r1, #4
   23fa2:	f7ff fdc1 	bl	23b28 <bt_l2cap_send_cb>
	if (err) {
   23fa6:	4680      	mov	r8, r0
   23fa8:	b120      	cbz	r0, 23fb4 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   23faa:	6928      	ldr	r0, [r5, #16]
   23fac:	4438      	add	r0, r7
   23fae:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
   23fb0:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   23fb4:	4640      	mov	r0, r8
   23fb6:	b003      	add	sp, #12
   23fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   23fbc:	6803      	ldr	r3, [r0, #0]
   23fbe:	6818      	ldr	r0, [r3, #0]
   23fc0:	f001 fdb8 	bl	25b34 <bt_smp_sign>
		if (err) {
   23fc4:	4680      	mov	r8, r0
   23fc6:	2800      	cmp	r0, #0
   23fc8:	d0d6      	beq.n	23f78 <chan_send+0x14>
			net_buf_unref(buf);
   23fca:	4628      	mov	r0, r5
   23fcc:	f001 feb8 	bl	25d40 <net_buf_unref>
			return err;
   23fd0:	e7f0      	b.n	23fb4 <chan_send+0x50>
	chan->sent = cb ? cb : chan_cb(buf);
   23fd2:	4628      	mov	r0, r5
   23fd4:	f7f2 fd56 	bl	16a84 <chan_cb>
   23fd8:	4606      	mov	r6, r0
   23fda:	e7d5      	b.n	23f88 <chan_send+0x24>

00023fdc <chan_req_send>:
{
   23fdc:	b538      	push	{r3, r4, r5, lr}
   23fde:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   23fe0:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   23fe4:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   23fe6:	2200      	movs	r2, #0
	while (buf) {
   23fe8:	b11b      	cbz	r3, 23ff2 <chan_req_send+0x16>
		bytes += buf->len;
   23fea:	899c      	ldrh	r4, [r3, #12]
   23fec:	4422      	add	r2, r4
		buf = buf->frags;
   23fee:	681b      	ldr	r3, [r3, #0]
   23ff0:	e7fa      	b.n	23fe8 <chan_req_send+0xc>
   23ff2:	4291      	cmp	r1, r2
   23ff4:	d30a      	bcc.n	2400c <chan_req_send+0x30>
	chan->req = req;
   23ff6:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
	buf = req->buf;
   23ffa:	68ac      	ldr	r4, [r5, #8]
	req->buf = NULL;
   23ffc:	2200      	movs	r2, #0
   23ffe:	60aa      	str	r2, [r5, #8]
	err = chan_send(chan, buf, NULL);
   24000:	4621      	mov	r1, r4
   24002:	f7ff ffaf 	bl	23f64 <chan_send>
	if (err) {
   24006:	b100      	cbz	r0, 2400a <chan_req_send+0x2e>
		req->buf = buf;
   24008:	60ac      	str	r4, [r5, #8]
}
   2400a:	bd38      	pop	{r3, r4, r5, pc}
		return -EMSGSIZE;
   2400c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   24010:	e7fb      	b.n	2400a <chan_req_send+0x2e>

00024012 <bt_att_chan_req_send>:
{
   24012:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   24014:	f7ff ffe2 	bl	23fdc <chan_req_send>
}
   24018:	bd08      	pop	{r3, pc}

0002401a <bt_att_status>:
{
   2401a:	b538      	push	{r3, r4, r5, lr}
   2401c:	f3bf 8f5b 	dmb	ish
   24020:	680b      	ldr	r3, [r1, #0]
   24022:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   24026:	f013 0f01 	tst.w	r3, #1
   2402a:	d007      	beq.n	2403c <bt_att_status+0x22>
   2402c:	4604      	mov	r4, r0
   2402e:	3808      	subs	r0, #8
	if (!chan->att) {
   24030:	f854 3c08 	ldr.w	r3, [r4, #-8]
   24034:	b113      	cbz	r3, 2403c <bt_att_status+0x22>
	if (chan->req) {
   24036:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   2403a:	b102      	cbz	r2, 2403e <bt_att_status+0x24>
}
   2403c:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   2403e:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   24040:	2d00      	cmp	r5, #0
   24042:	d0fb      	beq.n	2403c <bt_att_status+0x22>
	return node->next;
   24044:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   24046:	605a      	str	r2, [r3, #4]
	return list->tail;
   24048:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2404a:	42a9      	cmp	r1, r5
   2404c:	d00e      	beq.n	2406c <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2404e:	4629      	mov	r1, r5
   24050:	f7ff ffdf 	bl	24012 <bt_att_chan_req_send>
   24054:	2800      	cmp	r0, #0
   24056:	daf1      	bge.n	2403c <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   24058:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
   2405c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2405e:	602a      	str	r2, [r5, #0]
	list->head = node;
   24060:	605d      	str	r5, [r3, #4]
	return list->tail;
   24062:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   24064:	2a00      	cmp	r2, #0
   24066:	d1e9      	bne.n	2403c <bt_att_status+0x22>
	list->tail = node;
   24068:	609d      	str	r5, [r3, #8]
}
   2406a:	e7e7      	b.n	2403c <bt_att_status+0x22>
	list->tail = node;
   2406c:	609a      	str	r2, [r3, #8]
}
   2406e:	e7ee      	b.n	2404e <bt_att_status+0x34>

00024070 <att_req_send_process>:
{
   24070:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   24072:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
   24074:	2e00      	cmp	r6, #0
   24076:	d038      	beq.n	240ea <att_req_send_process+0x7a>
   24078:	4605      	mov	r5, r0
	return node->next;
   2407a:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   2407c:	6043      	str	r3, [r0, #4]
	return list->tail;
   2407e:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24080:	4296      	cmp	r6, r2
   24082:	d00d      	beq.n	240a0 <att_req_send_process+0x30>
	return list->head;
   24084:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24086:	b198      	cbz	r0, 240b0 <att_req_send_process+0x40>
   24088:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   2408c:	d012      	beq.n	240b4 <att_req_send_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2408e:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   24092:	d014      	beq.n	240be <att_req_send_process+0x4e>
	return node->next;
   24094:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   24098:	b18c      	cbz	r4, 240be <att_req_send_process+0x4e>
   2409a:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   2409e:	e00e      	b.n	240be <att_req_send_process+0x4e>
	list->tail = node;
   240a0:	6083      	str	r3, [r0, #8]
}
   240a2:	e7ef      	b.n	24084 <att_req_send_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   240a4:	4631      	mov	r1, r6
   240a6:	f7ff ffb4 	bl	24012 <bt_att_chan_req_send>
   240aa:	2800      	cmp	r0, #0
   240ac:	db0c      	blt.n	240c8 <att_req_send_process+0x58>
   240ae:	e01c      	b.n	240ea <att_req_send_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   240b0:	4604      	mov	r4, r0
   240b2:	e004      	b.n	240be <att_req_send_process+0x4e>
   240b4:	4604      	mov	r4, r0
   240b6:	e002      	b.n	240be <att_req_send_process+0x4e>
   240b8:	4623      	mov	r3, r4
   240ba:	4620      	mov	r0, r4
   240bc:	461c      	mov	r4, r3
   240be:	b178      	cbz	r0, 240e0 <att_req_send_process+0x70>
		if (!chan->req) {
   240c0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   240c4:	2b00      	cmp	r3, #0
   240c6:	d0ed      	beq.n	240a4 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   240c8:	2c00      	cmp	r4, #0
   240ca:	d0f5      	beq.n	240b8 <att_req_send_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   240cc:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   240d0:	d0f3      	beq.n	240ba <att_req_send_process+0x4a>
	return node->next;
   240d2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   240d6:	2b00      	cmp	r3, #0
   240d8:	d0ef      	beq.n	240ba <att_req_send_process+0x4a>
   240da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   240de:	e7ec      	b.n	240ba <att_req_send_process+0x4a>
	return list->head;
   240e0:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   240e2:	6033      	str	r3, [r6, #0]
	list->head = node;
   240e4:	606e      	str	r6, [r5, #4]
	return list->tail;
   240e6:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   240e8:	b103      	cbz	r3, 240ec <att_req_send_process+0x7c>
}
   240ea:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   240ec:	60ae      	str	r6, [r5, #8]
}
   240ee:	e7fc      	b.n	240ea <att_req_send_process+0x7a>

000240f0 <bt_att_chan_send>:
{
   240f0:	b508      	push	{r3, lr}
	return chan_send(chan, buf, cb);
   240f2:	f7ff ff37 	bl	23f64 <chan_send>
}
   240f6:	bd08      	pop	{r3, pc}

000240f8 <chan_req_sent>:
{
   240f8:	b508      	push	{r3, lr}
	if (chan->req) {
   240fa:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   240fe:	b133      	cbz	r3, 2410e <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   24100:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   24104:	2300      	movs	r3, #0
   24106:	f500 7088 	add.w	r0, r0, #272	; 0x110
   2410a:	f7f9 fad3 	bl	1d6b4 <k_work_reschedule>
}
   2410e:	bd08      	pop	{r3, pc}

00024110 <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   24110:	30f0      	adds	r0, #240	; 0xf0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24112:	f3bf 8f5b 	dmb	ish
   24116:	e850 3f00 	ldrex	r3, [r0]
   2411a:	f023 0302 	bic.w	r3, r3, #2
   2411e:	e840 3200 	strex	r2, r3, [r0]
   24122:	2a00      	cmp	r2, #0
   24124:	d1f7      	bne.n	24116 <chan_cfm_sent+0x6>
   24126:	f3bf 8f5b 	dmb	ish
}
   2412a:	4770      	bx	lr

0002412c <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2412c:	30f0      	adds	r0, #240	; 0xf0
   2412e:	f3bf 8f5b 	dmb	ish
   24132:	e850 3f00 	ldrex	r3, [r0]
   24136:	f023 0301 	bic.w	r3, r3, #1
   2413a:	e840 3200 	strex	r2, r3, [r0]
   2413e:	2a00      	cmp	r2, #0
   24140:	d1f7      	bne.n	24132 <chan_rsp_sent+0x6>
   24142:	f3bf 8f5b 	dmb	ish
}
   24146:	4770      	bx	lr

00024148 <process_queue>:
{
   24148:	b570      	push	{r4, r5, r6, lr}
   2414a:	4605      	mov	r5, r0
   2414c:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2414e:	2200      	movs	r2, #0
   24150:	2300      	movs	r3, #0
   24152:	4608      	mov	r0, r1
   24154:	f001 fdc2 	bl	25cdc <net_buf_get>
	if (buf) {
   24158:	b170      	cbz	r0, 24178 <process_queue+0x30>
   2415a:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
   2415c:	2200      	movs	r2, #0
   2415e:	4601      	mov	r1, r0
   24160:	4628      	mov	r0, r5
   24162:	f7ff feff 	bl	23f64 <chan_send>
		if (err) {
   24166:	4605      	mov	r5, r0
   24168:	b908      	cbnz	r0, 2416e <process_queue+0x26>
}
   2416a:	4628      	mov	r0, r5
   2416c:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   2416e:	4631      	mov	r1, r6
   24170:	4620      	mov	r0, r4
   24172:	f003 fa9f 	bl	276b4 <k_queue_prepend>
			return err;
   24176:	e7f8      	b.n	2416a <process_queue+0x22>
	return -ENOENT;
   24178:	f06f 0501 	mvn.w	r5, #1
   2417c:	e7f5      	b.n	2416a <process_queue+0x22>

0002417e <bt_att_sent>:
{
   2417e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24180:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   24182:	f1a0 0608 	sub.w	r6, r0, #8
	struct bt_att *att = chan->att;
   24186:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (chan->sent) {
   2418a:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   2418e:	b10b      	cbz	r3, 24194 <bt_att_sent+0x16>
		chan->sent(chan);
   24190:	4630      	mov	r0, r6
   24192:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   24194:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
   24198:	f3bf 8f5b 	dmb	ish
   2419c:	e853 2f00 	ldrex	r2, [r3]
   241a0:	f022 0210 	bic.w	r2, r2, #16
   241a4:	e843 2100 	strex	r1, r2, [r3]
   241a8:	2900      	cmp	r1, #0
   241aa:	d1f7      	bne.n	2419c <bt_att_sent+0x1e>
   241ac:	f3bf 8f5b 	dmb	ish
	if (!att) {
   241b0:	b145      	cbz	r5, 241c4 <bt_att_sent+0x46>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   241b2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   241b6:	b133      	cbz	r3, 241c6 <bt_att_sent+0x48>
	err = process_queue(chan, &chan->tx_queue);
   241b8:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   241bc:	4630      	mov	r0, r6
   241be:	f7ff ffc3 	bl	24148 <process_queue>
	if (!err) {
   241c2:	b9c0      	cbnz	r0, 241f6 <bt_att_sent+0x78>
}
   241c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   241c6:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   241c8:	2f00      	cmp	r7, #0
   241ca:	d0f5      	beq.n	241b8 <bt_att_sent+0x3a>
	return node->next;
   241cc:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   241ce:	606b      	str	r3, [r5, #4]
	return list->tail;
   241d0:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   241d2:	42ba      	cmp	r2, r7
   241d4:	d00d      	beq.n	241f2 <bt_att_sent+0x74>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   241d6:	4639      	mov	r1, r7
   241d8:	4630      	mov	r0, r6
   241da:	f7ff feff 	bl	23fdc <chan_req_send>
   241de:	2800      	cmp	r0, #0
   241e0:	daf0      	bge.n	241c4 <bt_att_sent+0x46>
	return list->head;
   241e2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   241e4:	603b      	str	r3, [r7, #0]
	list->head = node;
   241e6:	606f      	str	r7, [r5, #4]
	return list->tail;
   241e8:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   241ea:	2b00      	cmp	r3, #0
   241ec:	d1e4      	bne.n	241b8 <bt_att_sent+0x3a>
	list->tail = node;
   241ee:	60af      	str	r7, [r5, #8]
}
   241f0:	e7e2      	b.n	241b8 <bt_att_sent+0x3a>
	list->tail = node;
   241f2:	60ab      	str	r3, [r5, #8]
}
   241f4:	e7ef      	b.n	241d6 <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   241f6:	f105 010c 	add.w	r1, r5, #12
   241fa:	4630      	mov	r0, r6
   241fc:	f7ff ffa4 	bl	24148 <process_queue>
   24200:	e7e0      	b.n	241c4 <bt_att_sent+0x46>

00024202 <att_send_process>:
{
   24202:	b570      	push	{r4, r5, r6, lr}
   24204:	4606      	mov	r6, r0
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   24206:	2200      	movs	r2, #0
   24208:	2300      	movs	r3, #0
   2420a:	300c      	adds	r0, #12
   2420c:	f001 fd66 	bl	25cdc <net_buf_get>
	if (!buf) {
   24210:	b360      	cbz	r0, 2426c <att_send_process+0x6a>
   24212:	4605      	mov	r5, r0
	return list->head;
   24214:	6a70      	ldr	r0, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24216:	b158      	cbz	r0, 24230 <att_send_process+0x2e>
   24218:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   2421c:	d00c      	beq.n	24238 <att_send_process+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2421e:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   24222:	d006      	beq.n	24232 <att_send_process+0x30>
	return node->next;
   24224:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   24228:	b11c      	cbz	r4, 24232 <att_send_process+0x30>
   2422a:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   2422e:	e000      	b.n	24232 <att_send_process+0x30>
   24230:	4604      	mov	r4, r0
   24232:	f06f 0301 	mvn.w	r3, #1
   24236:	e004      	b.n	24242 <att_send_process+0x40>
   24238:	4604      	mov	r4, r0
   2423a:	e7fa      	b.n	24232 <att_send_process+0x30>
   2423c:	4622      	mov	r2, r4
   2423e:	4620      	mov	r0, r4
   24240:	4614      	mov	r4, r2
   24242:	b188      	cbz	r0, 24268 <att_send_process+0x66>
		err = bt_att_chan_send(chan, buf, NULL);
   24244:	2200      	movs	r2, #0
   24246:	4629      	mov	r1, r5
   24248:	f7ff ff52 	bl	240f0 <bt_att_chan_send>
		if (err >= 0) {
   2424c:	1e03      	subs	r3, r0, #0
   2424e:	da0b      	bge.n	24268 <att_send_process+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24250:	2c00      	cmp	r4, #0
   24252:	d0f3      	beq.n	2423c <att_send_process+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24254:	f514 72a2 	adds.w	r2, r4, #324	; 0x144
   24258:	d0f1      	beq.n	2423e <att_send_process+0x3c>
	return node->next;
   2425a:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   2425e:	2a00      	cmp	r2, #0
   24260:	d0ed      	beq.n	2423e <att_send_process+0x3c>
   24262:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
   24266:	e7ea      	b.n	2423e <att_send_process+0x3c>
	if (err < 0) {
   24268:	2b00      	cmp	r3, #0
   2426a:	db00      	blt.n	2426e <att_send_process+0x6c>
}
   2426c:	bd70      	pop	{r4, r5, r6, pc}
		k_queue_prepend(&att->tx_queue._queue, buf);
   2426e:	4629      	mov	r1, r5
   24270:	f106 000c 	add.w	r0, r6, #12
   24274:	f003 fa1e 	bl	276b4 <k_queue_prepend>
   24278:	e7f8      	b.n	2426c <att_send_process+0x6a>

0002427a <att_notify_mult>:
{
   2427a:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2427c:	6803      	ldr	r3, [r0, #0]
   2427e:	898a      	ldrh	r2, [r1, #12]
   24280:	6889      	ldr	r1, [r1, #8]
   24282:	6818      	ldr	r0, [r3, #0]
   24284:	f001 fb89 	bl	2599a <bt_gatt_mult_notification>
}
   24288:	2000      	movs	r0, #0
   2428a:	bd08      	pop	{r3, pc}

0002428c <att_notify>:
{
   2428c:	b538      	push	{r3, r4, r5, lr}
   2428e:	4605      	mov	r5, r0
   24290:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   24292:	f101 0008 	add.w	r0, r1, #8
   24296:	f001 fdd7 	bl	25e48 <net_buf_simple_pull_le16>
   2429a:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2429c:	682d      	ldr	r5, [r5, #0]
   2429e:	89a3      	ldrh	r3, [r4, #12]
   242a0:	68a2      	ldr	r2, [r4, #8]
   242a2:	6828      	ldr	r0, [r5, #0]
   242a4:	f001 fb43 	bl	2592e <bt_gatt_notification>
}
   242a8:	2000      	movs	r0, #0
   242aa:	bd38      	pop	{r3, r4, r5, pc}

000242ac <bt_att_chan_send_rsp>:
{
   242ac:	b538      	push	{r3, r4, r5, lr}
   242ae:	4604      	mov	r4, r0
   242b0:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   242b2:	f7ff ff1d 	bl	240f0 <bt_att_chan_send>
	if (err) {
   242b6:	b900      	cbnz	r0, 242ba <bt_att_chan_send_rsp+0xe>
}
   242b8:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   242ba:	4629      	mov	r1, r5
   242bc:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   242c0:	f001 fd31 	bl	25d26 <net_buf_put>
}
   242c4:	e7f8      	b.n	242b8 <bt_att_chan_send_rsp+0xc>

000242c6 <att_chan_mtu_updated>:
{
   242c6:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   242c8:	6806      	ldr	r6, [r0, #0]
	return list->head;
   242ca:	6a74      	ldr	r4, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   242cc:	b15c      	cbz	r4, 242e6 <att_chan_mtu_updated+0x20>
   242ce:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   242d2:	d00c      	beq.n	242ee <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   242d4:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   242d8:	d006      	beq.n	242e8 <att_chan_mtu_updated+0x22>
	return node->next;
   242da:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   242de:	b11b      	cbz	r3, 242e8 <att_chan_mtu_updated+0x22>
   242e0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   242e4:	e000      	b.n	242e8 <att_chan_mtu_updated+0x22>
   242e6:	4623      	mov	r3, r4
   242e8:	2200      	movs	r2, #0
   242ea:	4611      	mov	r1, r2
   242ec:	e004      	b.n	242f8 <att_chan_mtu_updated+0x32>
   242ee:	4623      	mov	r3, r4
   242f0:	e7fa      	b.n	242e8 <att_chan_mtu_updated+0x22>
   242f2:	461d      	mov	r5, r3
   242f4:	461c      	mov	r4, r3
   242f6:	462b      	mov	r3, r5
   242f8:	b1bc      	cbz	r4, 2432a <att_chan_mtu_updated+0x64>
		if (chan == updated_chan) {
   242fa:	4284      	cmp	r4, r0
   242fc:	d009      	beq.n	24312 <att_chan_mtu_updated+0x4c>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   242fe:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
   24302:	42a9      	cmp	r1, r5
   24304:	bf38      	it	cc
   24306:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   24308:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
   2430c:	42a2      	cmp	r2, r4
   2430e:	bf38      	it	cc
   24310:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24312:	2b00      	cmp	r3, #0
   24314:	d0ed      	beq.n	242f2 <att_chan_mtu_updated+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24316:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   2431a:	d0eb      	beq.n	242f4 <att_chan_mtu_updated+0x2e>
	return node->next;
   2431c:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   24320:	2d00      	cmp	r5, #0
   24322:	d0e7      	beq.n	242f4 <att_chan_mtu_updated+0x2e>
   24324:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
   24328:	e7e4      	b.n	242f4 <att_chan_mtu_updated+0x2e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2432a:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   2432e:	428b      	cmp	r3, r1
   24330:	d803      	bhi.n	2433a <att_chan_mtu_updated+0x74>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   24332:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   24336:	4294      	cmp	r4, r2
   24338:	d90a      	bls.n	24350 <att_chan_mtu_updated+0x8a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   2433a:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2433e:	4282      	cmp	r2, r0
   24340:	bf38      	it	cc
   24342:	4602      	movcc	r2, r0
   24344:	4299      	cmp	r1, r3
   24346:	bf38      	it	cc
   24348:	4619      	movcc	r1, r3
   2434a:	6830      	ldr	r0, [r6, #0]
   2434c:	f7f3 fd6e 	bl	17e2c <bt_gatt_att_max_mtu_changed>
}
   24350:	bd70      	pop	{r4, r5, r6, pc}

00024352 <write_cb>:
{
   24352:	b5f0      	push	{r4, r5, r6, r7, lr}
   24354:	b083      	sub	sp, #12
   24356:	4606      	mov	r6, r0
   24358:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2435a:	222a      	movs	r2, #42	; 0x2a
   2435c:	4601      	mov	r1, r0
   2435e:	6820      	ldr	r0, [r4, #0]
   24360:	f001 fa00 	bl	25764 <bt_gatt_check_perm>
   24364:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   24366:	b9e8      	cbnz	r0, 243a4 <write_cb+0x52>
   24368:	4605      	mov	r5, r0
	if (!data->req) {
   2436a:	7a23      	ldrb	r3, [r4, #8]
   2436c:	b1a3      	cbz	r3, 24398 <write_cb+0x46>
	uint8_t flags = 0U;
   2436e:	4603      	mov	r3, r0
	write = attr->write(data->conn, attr, data->value, data->len,
   24370:	68b7      	ldr	r7, [r6, #8]
   24372:	9301      	str	r3, [sp, #4]
   24374:	8a63      	ldrh	r3, [r4, #18]
   24376:	9300      	str	r3, [sp, #0]
   24378:	8a23      	ldrh	r3, [r4, #16]
   2437a:	68e2      	ldr	r2, [r4, #12]
   2437c:	4631      	mov	r1, r6
   2437e:	6820      	ldr	r0, [r4, #0]
   24380:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   24382:	2800      	cmp	r0, #0
   24384:	db02      	blt.n	2438c <write_cb+0x3a>
   24386:	8a23      	ldrh	r3, [r4, #16]
   24388:	4298      	cmp	r0, r3
   2438a:	d007      	beq.n	2439c <write_cb+0x4a>
		data->err = err_to_att(write);
   2438c:	f7ff fd0a 	bl	23da4 <err_to_att>
   24390:	7520      	strb	r0, [r4, #20]
}
   24392:	4628      	mov	r0, r5
   24394:	b003      	add	sp, #12
   24396:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_CMD;
   24398:	2302      	movs	r3, #2
   2439a:	e7e9      	b.n	24370 <write_cb+0x1e>
	data->err = 0U;
   2439c:	2300      	movs	r3, #0
   2439e:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   243a0:	2501      	movs	r5, #1
   243a2:	e7f6      	b.n	24392 <write_cb+0x40>
		return BT_GATT_ITER_STOP;
   243a4:	2500      	movs	r5, #0
   243a6:	e7f4      	b.n	24392 <write_cb+0x40>

000243a8 <att_chan_read>:
{
   243a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   243ac:	b085      	sub	sp, #20
   243ae:	4680      	mov	r8, r0
   243b0:	4689      	mov	r9, r1
   243b2:	9202      	str	r2, [sp, #8]
   243b4:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   243b6:	6881      	ldr	r1, [r0, #8]
   243b8:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   243ba:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
	while (buf) {
   243be:	4613      	mov	r3, r2
	size_t bytes = 0;
   243c0:	2200      	movs	r2, #0
	while (buf) {
   243c2:	b11b      	cbz	r3, 243cc <att_chan_read+0x24>
		bytes += buf->len;
   243c4:	8999      	ldrh	r1, [r3, #12]
   243c6:	440a      	add	r2, r1
		buf = buf->frags;
   243c8:	681b      	ldr	r3, [r3, #0]
   243ca:	e7fa      	b.n	243c2 <att_chan_read+0x1a>
   243cc:	4290      	cmp	r0, r2
   243ce:	d804      	bhi.n	243da <att_chan_read+0x32>
		return 0;
   243d0:	2400      	movs	r4, #0
}
   243d2:	4620      	mov	r0, r4
   243d4:	b005      	add	sp, #20
   243d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   243da:	9802      	ldr	r0, [sp, #8]
   243dc:	f001 fcda 	bl	25d94 <net_buf_frag_last>
   243e0:	4607      	mov	r7, r0
	size_t len, total = 0;
   243e2:	f04f 0a00 	mov.w	sl, #0
   243e6:	e083      	b.n	244f0 <att_chan_read+0x148>
		bytes += buf->len;
   243e8:	8999      	ldrh	r1, [r3, #12]
   243ea:	440a      	add	r2, r1
		buf = buf->frags;
   243ec:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   243ee:	2b00      	cmp	r3, #0
   243f0:	d1fa      	bne.n	243e8 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   243f2:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   243f4:	f107 0608 	add.w	r6, r7, #8
   243f8:	4630      	mov	r0, r6
   243fa:	f001 fd31 	bl	25e60 <net_buf_simple_tailroom>
   243fe:	4284      	cmp	r4, r0
   24400:	d32c      	bcc.n	2445c <att_chan_read+0xb4>
   24402:	4630      	mov	r0, r6
   24404:	f001 fd2c 	bl	25e60 <net_buf_simple_tailroom>
   24408:	4606      	mov	r6, r0
		if (!len) {
   2440a:	2e00      	cmp	r6, #0
   2440c:	d032      	beq.n	24474 <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2440e:	f8d9 4004 	ldr.w	r4, [r9, #4]
   24412:	68b9      	ldr	r1, [r7, #8]
   24414:	89ba      	ldrh	r2, [r7, #12]
   24416:	9500      	str	r5, [sp, #0]
   24418:	b2b3      	uxth	r3, r6
   2441a:	440a      	add	r2, r1
   2441c:	4649      	mov	r1, r9
   2441e:	9803      	ldr	r0, [sp, #12]
   24420:	47a0      	blx	r4
		if (read < 0) {
   24422:	1e04      	subs	r4, r0, #0
   24424:	db5a      	blt.n	244dc <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
   24426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24428:	b12b      	cbz	r3, 24436 <att_chan_read+0x8e>
   2442a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2442c:	4621      	mov	r1, r4
   2442e:	4638      	mov	r0, r7
   24430:	4798      	blx	r3
   24432:	2800      	cmp	r0, #0
   24434:	d061      	beq.n	244fa <att_chan_read+0x152>
		net_buf_add(frag, read);
   24436:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   24438:	4621      	mov	r1, r4
   2443a:	f107 0008 	add.w	r0, r7, #8
   2443e:	f001 fcc9 	bl	25dd4 <net_buf_simple_add>
		total += read;
   24442:	44a2      	add	sl, r4
		offset += read;
   24444:	4425      	add	r5, r4
   24446:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   24448:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   2444c:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2444e:	2200      	movs	r2, #0
	while (buf) {
   24450:	2b00      	cmp	r3, #0
   24452:	d049      	beq.n	244e8 <att_chan_read+0x140>
		bytes += buf->len;
   24454:	8999      	ldrh	r1, [r3, #12]
   24456:	440a      	add	r2, r1
		buf = buf->frags;
   24458:	681b      	ldr	r3, [r3, #0]
   2445a:	e7f9      	b.n	24450 <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2445c:	f8b8 608a 	ldrh.w	r6, [r8, #138]	; 0x8a
	while (buf) {
   24460:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   24462:	2200      	movs	r2, #0
	while (buf) {
   24464:	e002      	b.n	2446c <att_chan_read+0xc4>
		bytes += buf->len;
   24466:	8999      	ldrh	r1, [r3, #12]
   24468:	440a      	add	r2, r1
		buf = buf->frags;
   2446a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2446c:	2b00      	cmp	r3, #0
   2446e:	d1fa      	bne.n	24466 <att_chan_read+0xbe>
   24470:	1ab6      	subs	r6, r6, r2
   24472:	e7ca      	b.n	2440a <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   24474:	9b02      	ldr	r3, [sp, #8]
   24476:	7998      	ldrb	r0, [r3, #6]
   24478:	f7f3 fd64 	bl	17f44 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2447c:	2200      	movs	r2, #0
   2447e:	2300      	movs	r3, #0
   24480:	f001 fc25 	bl	25cce <net_buf_alloc_fixed>
			if (!frag) {
   24484:	4607      	mov	r7, r0
   24486:	b150      	cbz	r0, 2449e <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
   24488:	4601      	mov	r1, r0
   2448a:	f8dd b008 	ldr.w	fp, [sp, #8]
   2448e:	4658      	mov	r0, fp
   24490:	f001 fc91 	bl	25db6 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   24494:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	size_t bytes = 0;
   24498:	4632      	mov	r2, r6
	while (buf) {
   2449a:	465b      	mov	r3, fp
   2449c:	e004      	b.n	244a8 <att_chan_read+0x100>
				return total;
   2449e:	4654      	mov	r4, sl
   244a0:	e797      	b.n	243d2 <att_chan_read+0x2a>
		bytes += buf->len;
   244a2:	8999      	ldrh	r1, [r3, #12]
   244a4:	440a      	add	r2, r1
		buf = buf->frags;
   244a6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   244a8:	2b00      	cmp	r3, #0
   244aa:	d1fa      	bne.n	244a2 <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   244ac:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   244ae:	f107 0b08 	add.w	fp, r7, #8
   244b2:	4658      	mov	r0, fp
   244b4:	f001 fcd4 	bl	25e60 <net_buf_simple_tailroom>
   244b8:	4284      	cmp	r4, r0
   244ba:	d304      	bcc.n	244c6 <att_chan_read+0x11e>
   244bc:	4658      	mov	r0, fp
   244be:	f001 fccf 	bl	25e60 <net_buf_simple_tailroom>
   244c2:	4606      	mov	r6, r0
   244c4:	e7a3      	b.n	2440e <att_chan_read+0x66>
   244c6:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
	while (buf) {
   244ca:	9b02      	ldr	r3, [sp, #8]
   244cc:	e002      	b.n	244d4 <att_chan_read+0x12c>
		bytes += buf->len;
   244ce:	899a      	ldrh	r2, [r3, #12]
   244d0:	4416      	add	r6, r2
		buf = buf->frags;
   244d2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   244d4:	2b00      	cmp	r3, #0
   244d6:	d1fa      	bne.n	244ce <att_chan_read+0x126>
   244d8:	1b8e      	subs	r6, r1, r6
   244da:	e798      	b.n	2440e <att_chan_read+0x66>
			if (total) {
   244dc:	f1ba 0f00 	cmp.w	sl, #0
   244e0:	f43f af77 	beq.w	243d2 <att_chan_read+0x2a>
				return total;
   244e4:	4654      	mov	r4, sl
   244e6:	e774      	b.n	243d2 <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   244e8:	4290      	cmp	r0, r2
   244ea:	d906      	bls.n	244fa <att_chan_read+0x152>
   244ec:	45b3      	cmp	fp, r6
   244ee:	d104      	bne.n	244fa <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   244f0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   244f4:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   244f6:	2200      	movs	r2, #0
	while (buf) {
   244f8:	e779      	b.n	243ee <att_chan_read+0x46>
	return total;
   244fa:	4654      	mov	r4, sl
   244fc:	e769      	b.n	243d2 <att_chan_read+0x2a>

000244fe <read_cb>:
{
   244fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   24500:	b083      	sub	sp, #12
   24502:	4606      	mov	r6, r0
   24504:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   24506:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   24508:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   2450a:	2300      	movs	r3, #0
   2450c:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2450e:	2215      	movs	r2, #21
   24510:	4631      	mov	r1, r6
   24512:	f001 f927 	bl	25764 <bt_gatt_check_perm>
   24516:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   24518:	b118      	cbz	r0, 24522 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   2451a:	2500      	movs	r5, #0
}
   2451c:	4628      	mov	r0, r5
   2451e:	b003      	add	sp, #12
   24520:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24522:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   24524:	2300      	movs	r3, #0
   24526:	9301      	str	r3, [sp, #4]
   24528:	9300      	str	r3, [sp, #0]
   2452a:	88a3      	ldrh	r3, [r4, #4]
   2452c:	68a2      	ldr	r2, [r4, #8]
   2452e:	4631      	mov	r1, r6
   24530:	4638      	mov	r0, r7
   24532:	f7ff ff39 	bl	243a8 <att_chan_read>
	if (ret < 0) {
   24536:	2800      	cmp	r0, #0
   24538:	db01      	blt.n	2453e <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   2453a:	2501      	movs	r5, #1
   2453c:	e7ee      	b.n	2451c <read_cb+0x1e>
		data->err = err_to_att(ret);
   2453e:	f7ff fc31 	bl	23da4 <err_to_att>
   24542:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   24544:	e7ea      	b.n	2451c <read_cb+0x1e>

00024546 <find_type_cb>:
{
   24546:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2454a:	b093      	sub	sp, #76	; 0x4c
   2454c:	4606      	mov	r6, r0
   2454e:	460f      	mov	r7, r1
   24550:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
   24552:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   24556:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2455a:	2300      	movs	r3, #0
   2455c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   24560:	f642 0301 	movw	r3, #10241	; 0x2801
   24564:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   24568:	a910      	add	r1, sp, #64	; 0x40
   2456a:	6800      	ldr	r0, [r0, #0]
   2456c:	f7fe fad4 	bl	22b18 <bt_uuid_cmp>
   24570:	b928      	cbnz	r0, 2457e <find_type_cb+0x38>
	data->group = NULL;
   24572:	2300      	movs	r3, #0
   24574:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
   24576:	2001      	movs	r0, #1
}
   24578:	b013      	add	sp, #76	; 0x4c
   2457a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   2457e:	2300      	movs	r3, #0
   24580:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   24584:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   24588:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   2458c:	a911      	add	r1, sp, #68	; 0x44
   2458e:	6830      	ldr	r0, [r6, #0]
   24590:	f7fe fac2 	bl	22b18 <bt_uuid_cmp>
   24594:	b928      	cbnz	r0, 245a2 <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   24596:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
   2459a:	6868      	ldr	r0, [r5, #4]
   2459c:	4603      	mov	r3, r0
	size_t bytes = 0;
   2459e:	2400      	movs	r4, #0
	while (buf) {
   245a0:	e00a      	b.n	245b8 <find_type_cb+0x72>
		if (data->group &&
   245a2:	68ab      	ldr	r3, [r5, #8]
   245a4:	b11b      	cbz	r3, 245ae <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   245a6:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   245a8:	42ba      	cmp	r2, r7
   245aa:	d200      	bcs.n	245ae <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
   245ac:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   245ae:	2001      	movs	r0, #1
   245b0:	e7e2      	b.n	24578 <find_type_cb+0x32>
		bytes += buf->len;
   245b2:	899a      	ldrh	r2, [r3, #12]
   245b4:	4414      	add	r4, r2
		buf = buf->frags;
   245b6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   245b8:	2b00      	cmp	r3, #0
   245ba:	d1fa      	bne.n	245b2 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   245bc:	1b0c      	subs	r4, r1, r4
   245be:	2c03      	cmp	r4, #3
   245c0:	d801      	bhi.n	245c6 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   245c2:	2000      	movs	r0, #0
   245c4:	e7d8      	b.n	24578 <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
   245c6:	f001 fbe5 	bl	25d94 <net_buf_frag_last>
   245ca:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   245cc:	f8b8 a08a 	ldrh.w	sl, [r8, #138]	; 0x8a
   245d0:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   245d2:	2200      	movs	r2, #0
	while (buf) {
   245d4:	b11b      	cbz	r3, 245de <find_type_cb+0x98>
		bytes += buf->len;
   245d6:	8999      	ldrh	r1, [r3, #12]
   245d8:	440a      	add	r2, r1
		buf = buf->frags;
   245da:	681b      	ldr	r3, [r3, #0]
   245dc:	e7fa      	b.n	245d4 <find_type_cb+0x8e>
   245de:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   245e2:	f104 0b08 	add.w	fp, r4, #8
   245e6:	4658      	mov	r0, fp
   245e8:	f001 fc3a 	bl	25e60 <net_buf_simple_tailroom>
   245ec:	4582      	cmp	sl, r0
   245ee:	d22c      	bcs.n	2464a <find_type_cb+0x104>
   245f0:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   245f4:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   245f6:	2200      	movs	r2, #0
	while (buf) {
   245f8:	e002      	b.n	24600 <find_type_cb+0xba>
		bytes += buf->len;
   245fa:	8999      	ldrh	r1, [r3, #12]
   245fc:	440a      	add	r2, r1
		buf = buf->frags;
   245fe:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   24600:	2b00      	cmp	r3, #0
   24602:	d1fa      	bne.n	245fa <find_type_cb+0xb4>
   24604:	1a80      	subs	r0, r0, r2
	if (!len) {
   24606:	b320      	cbz	r0, 24652 <find_type_cb+0x10c>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   24608:	f8d6 8004 	ldr.w	r8, [r6, #4]
   2460c:	2300      	movs	r3, #0
   2460e:	9300      	str	r3, [sp, #0]
   24610:	2310      	movs	r3, #16
   24612:	aa0c      	add	r2, sp, #48	; 0x30
   24614:	4631      	mov	r1, r6
   24616:	4648      	mov	r0, r9
   24618:	47c0      	blx	r8
	if (read < 0) {
   2461a:	1e06      	subs	r6, r0, #0
   2461c:	dba9      	blt.n	24572 <find_type_cb+0x2c>
	if (read != data->value_len) {
   2461e:	7c2a      	ldrb	r2, [r5, #16]
   24620:	42b2      	cmp	r2, r6
   24622:	d026      	beq.n	24672 <find_type_cb+0x12c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   24624:	68e9      	ldr	r1, [r5, #12]
   24626:	a807      	add	r0, sp, #28
   24628:	f7fe fa94 	bl	22b54 <bt_uuid_create>
   2462c:	2800      	cmp	r0, #0
   2462e:	d0a0      	beq.n	24572 <find_type_cb+0x2c>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   24630:	b2f2      	uxtb	r2, r6
   24632:	a90c      	add	r1, sp, #48	; 0x30
   24634:	a802      	add	r0, sp, #8
   24636:	f7fe fa8d 	bl	22b54 <bt_uuid_create>
   2463a:	2800      	cmp	r0, #0
   2463c:	d099      	beq.n	24572 <find_type_cb+0x2c>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   2463e:	a902      	add	r1, sp, #8
   24640:	a807      	add	r0, sp, #28
   24642:	f7fe fa69 	bl	22b18 <bt_uuid_cmp>
   24646:	b1e0      	cbz	r0, 24682 <find_type_cb+0x13c>
   24648:	e793      	b.n	24572 <find_type_cb+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   2464a:	4658      	mov	r0, fp
   2464c:	f001 fc08 	bl	25e60 <net_buf_simple_tailroom>
   24650:	e7d9      	b.n	24606 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   24652:	686b      	ldr	r3, [r5, #4]
   24654:	7998      	ldrb	r0, [r3, #6]
   24656:	f7f3 fc75 	bl	17f44 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2465a:	2200      	movs	r2, #0
   2465c:	2300      	movs	r3, #0
   2465e:	f001 fb36 	bl	25cce <net_buf_alloc_fixed>
		if (!frag) {
   24662:	4604      	mov	r4, r0
   24664:	2800      	cmp	r0, #0
   24666:	d087      	beq.n	24578 <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
   24668:	4601      	mov	r1, r0
   2466a:	6868      	ldr	r0, [r5, #4]
   2466c:	f001 fba3 	bl	25db6 <net_buf_frag_add>
   24670:	e7ca      	b.n	24608 <find_type_cb+0xc2>
	} else if (memcmp(data->value, uuid, read)) {
   24672:	4632      	mov	r2, r6
   24674:	a90c      	add	r1, sp, #48	; 0x30
   24676:	68e8      	ldr	r0, [r5, #12]
   24678:	f7fe f9ac 	bl	229d4 <memcmp>
   2467c:	2800      	cmp	r0, #0
   2467e:	f47f af78 	bne.w	24572 <find_type_cb+0x2c>
	data->err = 0x00;
   24682:	2300      	movs	r3, #0
   24684:	746b      	strb	r3, [r5, #17]
	return net_buf_simple_add(&buf->b, len);
   24686:	2104      	movs	r1, #4
   24688:	f104 0008 	add.w	r0, r4, #8
   2468c:	f001 fba2 	bl	25dd4 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   24690:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   24692:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   24694:	68ab      	ldr	r3, [r5, #8]
   24696:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   24698:	2001      	movs	r0, #1
   2469a:	e76d      	b.n	24578 <find_type_cb+0x32>

0002469c <find_info_cb>:
{
   2469c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   246a0:	4606      	mov	r6, r0
   246a2:	460f      	mov	r7, r1
   246a4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   246a6:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   246aa:	6893      	ldr	r3, [r2, #8]
   246ac:	b14b      	cbz	r3, 246c2 <find_info_cb+0x26>
	switch (data->rsp->format) {
   246ae:	68a3      	ldr	r3, [r4, #8]
   246b0:	781d      	ldrb	r5, [r3, #0]
   246b2:	2d01      	cmp	r5, #1
   246b4:	d013      	beq.n	246de <find_info_cb+0x42>
   246b6:	2d02      	cmp	r5, #2
   246b8:	d02d      	beq.n	24716 <find_info_cb+0x7a>
   246ba:	2500      	movs	r5, #0
}
   246bc:	4628      	mov	r0, r5
   246be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   246c2:	6850      	ldr	r0, [r2, #4]
   246c4:	2101      	movs	r1, #1
   246c6:	3008      	adds	r0, #8
   246c8:	f001 fb84 	bl	25dd4 <net_buf_simple_add>
   246cc:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   246ce:	6833      	ldr	r3, [r6, #0]
   246d0:	781b      	ldrb	r3, [r3, #0]
   246d2:	b913      	cbnz	r3, 246da <find_info_cb+0x3e>
   246d4:	2301      	movs	r3, #1
   246d6:	7003      	strb	r3, [r0, #0]
   246d8:	e7e9      	b.n	246ae <find_info_cb+0x12>
   246da:	2302      	movs	r3, #2
   246dc:	e7fb      	b.n	246d6 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   246de:	6833      	ldr	r3, [r6, #0]
   246e0:	f893 9000 	ldrb.w	r9, [r3]
   246e4:	f1b9 0f00 	cmp.w	r9, #0
   246e8:	d001      	beq.n	246ee <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   246ea:	2500      	movs	r5, #0
   246ec:	e7e6      	b.n	246bc <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   246ee:	6860      	ldr	r0, [r4, #4]
   246f0:	2104      	movs	r1, #4
   246f2:	3008      	adds	r0, #8
   246f4:	f001 fb6e 	bl	25dd4 <net_buf_simple_add>
   246f8:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   246fa:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   246fc:	6832      	ldr	r2, [r6, #0]
   246fe:	68e3      	ldr	r3, [r4, #12]
   24700:	8852      	ldrh	r2, [r2, #2]
   24702:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   24704:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   24708:	6862      	ldr	r2, [r4, #4]
   2470a:	8992      	ldrh	r2, [r2, #12]
   2470c:	1a9b      	subs	r3, r3, r2
   2470e:	2b04      	cmp	r3, #4
   24710:	d8d4      	bhi.n	246bc <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   24712:	464d      	mov	r5, r9
   24714:	e7d2      	b.n	246bc <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   24716:	6833      	ldr	r3, [r6, #0]
   24718:	781b      	ldrb	r3, [r3, #0]
   2471a:	2b02      	cmp	r3, #2
   2471c:	d001      	beq.n	24722 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   2471e:	2500      	movs	r5, #0
   24720:	e7cc      	b.n	246bc <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   24722:	6860      	ldr	r0, [r4, #4]
   24724:	2112      	movs	r1, #18
   24726:	3008      	adds	r0, #8
   24728:	f001 fb54 	bl	25dd4 <net_buf_simple_add>
   2472c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2472e:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24730:	68e0      	ldr	r0, [r4, #12]
   24732:	6831      	ldr	r1, [r6, #0]
   24734:	2210      	movs	r2, #16
   24736:	3101      	adds	r1, #1
   24738:	3002      	adds	r0, #2
   2473a:	f7fe f978 	bl	22a2e <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2473e:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   24742:	6862      	ldr	r2, [r4, #4]
   24744:	8992      	ldrh	r2, [r2, #12]
   24746:	1a9b      	subs	r3, r3, r2
   24748:	2b12      	cmp	r3, #18
   2474a:	d801      	bhi.n	24750 <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   2474c:	2500      	movs	r5, #0
   2474e:	e7b5      	b.n	246bc <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   24750:	2501      	movs	r5, #1
   24752:	e7b3      	b.n	246bc <find_info_cb+0x20>

00024754 <att_get_fixed_chan>:
{
   24754:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   24756:	2104      	movs	r1, #4
   24758:	f7ff fa9c 	bl	23c94 <bt_l2cap_le_lookup_tx_cid>
}
   2475c:	3808      	subs	r0, #8
   2475e:	bd08      	pop	{r3, pc}

00024760 <bt_att_chan_create_pdu>:
{
   24760:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   24762:	3201      	adds	r2, #1
   24764:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   24768:	429a      	cmp	r2, r3
   2476a:	d822      	bhi.n	247b2 <bt_att_chan_create_pdu+0x52>
   2476c:	460d      	mov	r5, r1
	switch (att_op_get_type(op)) {
   2476e:	4608      	mov	r0, r1
   24770:	f7ff fb4b 	bl	23e0a <att_op_get_type>
   24774:	2802      	cmp	r0, #2
   24776:	d00b      	beq.n	24790 <bt_att_chan_create_pdu+0x30>
   24778:	2804      	cmp	r0, #4
   2477a:	d009      	beq.n	24790 <bt_att_chan_create_pdu+0x30>
		buf = bt_l2cap_create_pdu(NULL, 0);
   2477c:	f04f 32ff 	mov.w	r2, #4294967295
   24780:	f04f 33ff 	mov.w	r3, #4294967295
   24784:	2100      	movs	r1, #0
   24786:	4608      	mov	r0, r1
   24788:	f7ff f9b3 	bl	23af2 <bt_l2cap_create_pdu_timeout>
   2478c:	4604      	mov	r4, r0
   2478e:	e007      	b.n	247a0 <bt_att_chan_create_pdu+0x40>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   24790:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   24794:	2300      	movs	r3, #0
   24796:	2100      	movs	r1, #0
   24798:	4608      	mov	r0, r1
   2479a:	f7ff f9aa 	bl	23af2 <bt_l2cap_create_pdu_timeout>
   2479e:	4604      	mov	r4, r0
	if (!buf) {
   247a0:	b12c      	cbz	r4, 247ae <bt_att_chan_create_pdu+0x4e>
   247a2:	2101      	movs	r1, #1
   247a4:	f104 0008 	add.w	r0, r4, #8
   247a8:	f001 fb14 	bl	25dd4 <net_buf_simple_add>
	hdr->code = op;
   247ac:	7005      	strb	r5, [r0, #0]
}
   247ae:	4620      	mov	r0, r4
   247b0:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   247b2:	2400      	movs	r4, #0
   247b4:	e7fb      	b.n	247ae <bt_att_chan_create_pdu+0x4e>

000247b6 <att_write_cmd>:
{
   247b6:	b530      	push	{r4, r5, lr}
   247b8:	b085      	sub	sp, #20
   247ba:	4605      	mov	r5, r0
   247bc:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   247be:	f101 0008 	add.w	r0, r1, #8
   247c2:	f001 fb41 	bl	25e48 <net_buf_simple_pull_le16>
   247c6:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   247c8:	68a2      	ldr	r2, [r4, #8]
   247ca:	89a1      	ldrh	r1, [r4, #12]
   247cc:	9102      	str	r1, [sp, #8]
   247ce:	9201      	str	r2, [sp, #4]
   247d0:	2100      	movs	r1, #0
   247d2:	9100      	str	r1, [sp, #0]
   247d4:	460a      	mov	r2, r1
   247d6:	4628      	mov	r0, r5
   247d8:	f7f2 fb7a 	bl	16ed0 <att_write_rsp>
}
   247dc:	b005      	add	sp, #20
   247de:	bd30      	pop	{r4, r5, pc}

000247e0 <att_write_req>:
{
   247e0:	b530      	push	{r4, r5, lr}
   247e2:	b085      	sub	sp, #20
   247e4:	4605      	mov	r5, r0
   247e6:	460c      	mov	r4, r1
   247e8:	f101 0008 	add.w	r0, r1, #8
   247ec:	f001 fb2c 	bl	25e48 <net_buf_simple_pull_le16>
   247f0:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   247f2:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   247f4:	89a1      	ldrh	r1, [r4, #12]
   247f6:	9102      	str	r1, [sp, #8]
   247f8:	9201      	str	r2, [sp, #4]
   247fa:	2200      	movs	r2, #0
   247fc:	9200      	str	r2, [sp, #0]
   247fe:	2213      	movs	r2, #19
   24800:	2112      	movs	r1, #18
   24802:	4628      	mov	r0, r5
   24804:	f7f2 fb64 	bl	16ed0 <att_write_rsp>
}
   24808:	b005      	add	sp, #20
   2480a:	bd30      	pop	{r4, r5, pc}

0002480c <bt_att_create_pdu>:
{
   2480c:	b570      	push	{r4, r5, r6, lr}
   2480e:	460e      	mov	r6, r1
   24810:	4615      	mov	r5, r2
	att = att_get(conn);
   24812:	f7ff fb7b 	bl	23f0c <att_get>
	if (!att) {
   24816:	b350      	cbz	r0, 2486e <bt_att_create_pdu+0x62>
	return list->head;
   24818:	6a40      	ldr	r0, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2481a:	b158      	cbz	r0, 24834 <bt_att_create_pdu+0x28>
   2481c:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   24820:	d00a      	beq.n	24838 <bt_att_create_pdu+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24822:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   24826:	d00c      	beq.n	24842 <bt_att_create_pdu+0x36>
	return node->next;
   24828:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   2482c:	b14c      	cbz	r4, 24842 <bt_att_create_pdu+0x36>
   2482e:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   24832:	e006      	b.n	24842 <bt_att_create_pdu+0x36>
   24834:	4604      	mov	r4, r0
   24836:	e004      	b.n	24842 <bt_att_create_pdu+0x36>
   24838:	4604      	mov	r4, r0
   2483a:	e002      	b.n	24842 <bt_att_create_pdu+0x36>
   2483c:	4623      	mov	r3, r4
   2483e:	4620      	mov	r0, r4
   24840:	461c      	mov	r4, r3
   24842:	b1a0      	cbz	r0, 2486e <bt_att_create_pdu+0x62>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   24844:	1c6b      	adds	r3, r5, #1
   24846:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
   2484a:	4293      	cmp	r3, r2
   2484c:	d90b      	bls.n	24866 <bt_att_create_pdu+0x5a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2484e:	2c00      	cmp	r4, #0
   24850:	d0f4      	beq.n	2483c <bt_att_create_pdu+0x30>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24852:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   24856:	d0f2      	beq.n	2483e <bt_att_create_pdu+0x32>
	return node->next;
   24858:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   2485c:	2b00      	cmp	r3, #0
   2485e:	d0ee      	beq.n	2483e <bt_att_create_pdu+0x32>
   24860:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   24864:	e7eb      	b.n	2483e <bt_att_create_pdu+0x32>
		return bt_att_chan_create_pdu(chan, op, len);
   24866:	462a      	mov	r2, r5
   24868:	4631      	mov	r1, r6
   2486a:	f7ff ff79 	bl	24760 <bt_att_chan_create_pdu>
}
   2486e:	bd70      	pop	{r4, r5, r6, pc}

00024870 <att_read_group_req>:
{
   24870:	b5f0      	push	{r4, r5, r6, r7, lr}
   24872:	b089      	sub	sp, #36	; 0x24
   24874:	4605      	mov	r5, r0
   24876:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   24878:	7b0c      	ldrb	r4, [r1, #12]
   2487a:	3c04      	subs	r4, #4
   2487c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2487e:	2c02      	cmp	r4, #2
   24880:	d001      	beq.n	24886 <att_read_group_req+0x16>
   24882:	2c10      	cmp	r4, #16
   24884:	d142      	bne.n	2490c <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   24886:	2104      	movs	r1, #4
   24888:	3008      	adds	r0, #8
   2488a:	f001 facd 	bl	25e28 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2488e:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   24890:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   24892:	4622      	mov	r2, r4
   24894:	1d01      	adds	r1, r0, #4
   24896:	a801      	add	r0, sp, #4
   24898:	f7fe f95c 	bl	22b54 <bt_uuid_create>
   2489c:	b3c8      	cbz	r0, 24912 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2489e:	f10d 0216 	add.w	r2, sp, #22
   248a2:	4639      	mov	r1, r7
   248a4:	4630      	mov	r0, r6
   248a6:	f7ff fa6e 	bl	23d86 <range_is_valid>
   248aa:	b1f0      	cbz	r0, 248ea <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   248ac:	2300      	movs	r3, #0
   248ae:	f88d 3018 	strb.w	r3, [sp, #24]
   248b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   248b6:	f8ad 301a 	strh.w	r3, [sp, #26]
   248ba:	a906      	add	r1, sp, #24
   248bc:	a801      	add	r0, sp, #4
   248be:	f7fe f92b 	bl	22b18 <bt_uuid_cmp>
   248c2:	b158      	cbz	r0, 248dc <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   248c4:	2300      	movs	r3, #0
   248c6:	f88d 301c 	strb.w	r3, [sp, #28]
   248ca:	f642 0301 	movw	r3, #10241	; 0x2801
   248ce:	f8ad 301e 	strh.w	r3, [sp, #30]
   248d2:	a907      	add	r1, sp, #28
   248d4:	a801      	add	r0, sp, #4
   248d6:	f7fe f91f 	bl	22b18 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   248da:	b978      	cbnz	r0, 248fc <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   248dc:	463b      	mov	r3, r7
   248de:	4632      	mov	r2, r6
   248e0:	a901      	add	r1, sp, #4
   248e2:	4628      	mov	r0, r5
   248e4:	f7f2 fb5c 	bl	16fa0 <att_read_group_rsp>
   248e8:	e011      	b.n	2490e <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   248ea:	2301      	movs	r3, #1
   248ec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   248f0:	2110      	movs	r1, #16
   248f2:	4628      	mov	r0, r5
   248f4:	f7f2 fa56 	bl	16da4 <send_err_rsp>
		return 0;
   248f8:	2000      	movs	r0, #0
   248fa:	e008      	b.n	2490e <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   248fc:	2310      	movs	r3, #16
   248fe:	4632      	mov	r2, r6
   24900:	4619      	mov	r1, r3
   24902:	4628      	mov	r0, r5
   24904:	f7f2 fa4e 	bl	16da4 <send_err_rsp>
		return 0;
   24908:	2000      	movs	r0, #0
   2490a:	e000      	b.n	2490e <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   2490c:	2004      	movs	r0, #4
}
   2490e:	b009      	add	sp, #36	; 0x24
   24910:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   24912:	200e      	movs	r0, #14
   24914:	e7fb      	b.n	2490e <att_read_group_req+0x9e>

00024916 <att_read_blob_req>:
{
   24916:	b500      	push	{lr}
   24918:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2491a:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2491c:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   2491e:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   24920:	9200      	str	r2, [sp, #0]
   24922:	220d      	movs	r2, #13
   24924:	210c      	movs	r1, #12
   24926:	f7f2 fbd1 	bl	170cc <att_read_rsp>
}
   2492a:	b003      	add	sp, #12
   2492c:	f85d fb04 	ldr.w	pc, [sp], #4

00024930 <att_read_req>:
{
   24930:	b500      	push	{lr}
   24932:	b083      	sub	sp, #12
	req = (void *)buf->data;
   24934:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   24936:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   24938:	2200      	movs	r2, #0
   2493a:	9200      	str	r2, [sp, #0]
   2493c:	220b      	movs	r2, #11
   2493e:	210a      	movs	r1, #10
   24940:	f7f2 fbc4 	bl	170cc <att_read_rsp>
}
   24944:	b003      	add	sp, #12
   24946:	f85d fb04 	ldr.w	pc, [sp], #4

0002494a <att_read_type_req>:
{
   2494a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2494c:	b087      	sub	sp, #28
   2494e:	4605      	mov	r5, r0
   24950:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   24952:	7b0c      	ldrb	r4, [r1, #12]
   24954:	3c04      	subs	r4, #4
   24956:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   24958:	2c02      	cmp	r4, #2
   2495a:	d001      	beq.n	24960 <att_read_type_req+0x16>
   2495c:	2c10      	cmp	r4, #16
   2495e:	d123      	bne.n	249a8 <att_read_type_req+0x5e>
   24960:	2104      	movs	r1, #4
   24962:	3008      	adds	r0, #8
   24964:	f001 fa60 	bl	25e28 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   24968:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2496a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2496c:	4622      	mov	r2, r4
   2496e:	1d01      	adds	r1, r0, #4
   24970:	a801      	add	r0, sp, #4
   24972:	f7fe f8ef 	bl	22b54 <bt_uuid_create>
   24976:	b1c8      	cbz	r0, 249ac <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   24978:	f10d 0216 	add.w	r2, sp, #22
   2497c:	4639      	mov	r1, r7
   2497e:	4630      	mov	r0, r6
   24980:	f7ff fa01 	bl	23d86 <range_is_valid>
   24984:	b138      	cbz	r0, 24996 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   24986:	463b      	mov	r3, r7
   24988:	4632      	mov	r2, r6
   2498a:	a901      	add	r1, sp, #4
   2498c:	4628      	mov	r0, r5
   2498e:	f7f2 fbef 	bl	17170 <att_read_type_rsp>
}
   24992:	b007      	add	sp, #28
   24994:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   24996:	2301      	movs	r3, #1
   24998:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2499c:	2108      	movs	r1, #8
   2499e:	4628      	mov	r0, r5
   249a0:	f7f2 fa00 	bl	16da4 <send_err_rsp>
		return 0;
   249a4:	2000      	movs	r0, #0
   249a6:	e7f4      	b.n	24992 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   249a8:	2004      	movs	r0, #4
   249aa:	e7f2      	b.n	24992 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   249ac:	200e      	movs	r0, #14
   249ae:	e7f0      	b.n	24992 <att_read_type_req+0x48>

000249b0 <att_find_type_req>:
{
   249b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   249b4:	b087      	sub	sp, #28
   249b6:	4607      	mov	r7, r0
   249b8:	460c      	mov	r4, r1
   249ba:	2106      	movs	r1, #6
   249bc:	f104 0008 	add.w	r0, r4, #8
   249c0:	f001 fa32 	bl	25e28 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   249c4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   249c6:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   249c8:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   249cc:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   249d0:	f10d 020e 	add.w	r2, sp, #14
   249d4:	4631      	mov	r1, r6
   249d6:	4628      	mov	r0, r5
   249d8:	f7ff f9d5 	bl	23d86 <range_is_valid>
   249dc:	b1d0      	cbz	r0, 24a14 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   249de:	2300      	movs	r3, #0
   249e0:	f88d 3010 	strb.w	r3, [sp, #16]
   249e4:	f8ad 8012 	strh.w	r8, [sp, #18]
   249e8:	f88d 3014 	strb.w	r3, [sp, #20]
   249ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   249f0:	f8ad 3016 	strh.w	r3, [sp, #22]
   249f4:	a905      	add	r1, sp, #20
   249f6:	a804      	add	r0, sp, #16
   249f8:	f7fe f88e 	bl	22b18 <bt_uuid_cmp>
   249fc:	b998      	cbnz	r0, 24a26 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   249fe:	7b23      	ldrb	r3, [r4, #12]
   24a00:	9300      	str	r3, [sp, #0]
   24a02:	464b      	mov	r3, r9
   24a04:	4632      	mov	r2, r6
   24a06:	4629      	mov	r1, r5
   24a08:	4638      	mov	r0, r7
   24a0a:	f7f2 fbfb 	bl	17204 <att_find_type_rsp>
}
   24a0e:	b007      	add	sp, #28
   24a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   24a14:	2301      	movs	r3, #1
   24a16:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   24a1a:	2106      	movs	r1, #6
   24a1c:	4638      	mov	r0, r7
   24a1e:	f7f2 f9c1 	bl	16da4 <send_err_rsp>
		return 0;
   24a22:	2000      	movs	r0, #0
   24a24:	e7f3      	b.n	24a0e <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   24a26:	230a      	movs	r3, #10
   24a28:	462a      	mov	r2, r5
   24a2a:	2106      	movs	r1, #6
   24a2c:	4638      	mov	r0, r7
   24a2e:	f7f2 f9b9 	bl	16da4 <send_err_rsp>
		return 0;
   24a32:	2000      	movs	r0, #0
   24a34:	e7eb      	b.n	24a0e <att_find_type_req+0x5e>

00024a36 <att_find_info_req>:
{
   24a36:	b570      	push	{r4, r5, r6, lr}
   24a38:	b082      	sub	sp, #8
   24a3a:	4604      	mov	r4, r0
	req = (void *)buf->data;
   24a3c:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   24a3e:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   24a40:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   24a42:	f10d 0206 	add.w	r2, sp, #6
   24a46:	4631      	mov	r1, r6
   24a48:	4628      	mov	r0, r5
   24a4a:	f7ff f99c 	bl	23d86 <range_is_valid>
   24a4e:	b130      	cbz	r0, 24a5e <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   24a50:	4632      	mov	r2, r6
   24a52:	4629      	mov	r1, r5
   24a54:	4620      	mov	r0, r4
   24a56:	f7f2 fc1f 	bl	17298 <att_find_info_rsp>
}
   24a5a:	b002      	add	sp, #8
   24a5c:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   24a5e:	2301      	movs	r3, #1
   24a60:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   24a64:	2104      	movs	r1, #4
   24a66:	4620      	mov	r0, r4
   24a68:	f7f2 f99c 	bl	16da4 <send_err_rsp>
		return 0;
   24a6c:	2000      	movs	r0, #0
   24a6e:	e7f4      	b.n	24a5a <att_find_info_req+0x24>

00024a70 <bt_att_init>:
{
   24a70:	b508      	push	{r3, lr}
	bt_gatt_init();
   24a72:	f7f2 fe95 	bl	177a0 <bt_gatt_init>
}
   24a76:	bd08      	pop	{r3, pc}

00024a78 <bt_att_get_mtu>:
{
   24a78:	b508      	push	{r3, lr}
	att = att_get(conn);
   24a7a:	f7ff fa47 	bl	23f0c <att_get>
	if (!att) {
   24a7e:	b338      	cbz	r0, 24ad0 <bt_att_get_mtu+0x58>
	return list->head;
   24a80:	6a41      	ldr	r1, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24a82:	b159      	cbz	r1, 24a9c <bt_att_get_mtu+0x24>
   24a84:	f5b1 71a2 	subs.w	r1, r1, #324	; 0x144
   24a88:	d00b      	beq.n	24aa2 <bt_att_get_mtu+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24a8a:	f511 73a2 	adds.w	r3, r1, #324	; 0x144
   24a8e:	d006      	beq.n	24a9e <bt_att_get_mtu+0x26>
	return node->next;
   24a90:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
   24a94:	b11b      	cbz	r3, 24a9e <bt_att_get_mtu+0x26>
   24a96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   24a9a:	e000      	b.n	24a9e <bt_att_get_mtu+0x26>
   24a9c:	460b      	mov	r3, r1
   24a9e:	2000      	movs	r0, #0
   24aa0:	e004      	b.n	24aac <bt_att_get_mtu+0x34>
   24aa2:	460b      	mov	r3, r1
   24aa4:	e7fb      	b.n	24a9e <bt_att_get_mtu+0x26>
   24aa6:	461a      	mov	r2, r3
   24aa8:	4619      	mov	r1, r3
   24aaa:	4613      	mov	r3, r2
   24aac:	b189      	cbz	r1, 24ad2 <bt_att_get_mtu+0x5a>
		if (chan->chan.tx.mtu > mtu) {
   24aae:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   24ab2:	4282      	cmp	r2, r0
   24ab4:	d900      	bls.n	24ab8 <bt_att_get_mtu+0x40>
			mtu = chan->chan.tx.mtu;
   24ab6:	4610      	mov	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24ab8:	2b00      	cmp	r3, #0
   24aba:	d0f4      	beq.n	24aa6 <bt_att_get_mtu+0x2e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24abc:	f513 72a2 	adds.w	r2, r3, #324	; 0x144
   24ac0:	d0f2      	beq.n	24aa8 <bt_att_get_mtu+0x30>
	return node->next;
   24ac2:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   24ac6:	2a00      	cmp	r2, #0
   24ac8:	d0ee      	beq.n	24aa8 <bt_att_get_mtu+0x30>
   24aca:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
   24ace:	e7eb      	b.n	24aa8 <bt_att_get_mtu+0x30>
		return 0;
   24ad0:	2000      	movs	r0, #0
}
   24ad2:	bd08      	pop	{r3, pc}

00024ad4 <att_handle_exec_write_rsp>:
{
   24ad4:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24ad6:	2300      	movs	r3, #0
   24ad8:	898a      	ldrh	r2, [r1, #12]
   24ada:	6889      	ldr	r1, [r1, #8]
   24adc:	f7f2 fc7c 	bl	173d8 <att_handle_rsp>
}
   24ae0:	bd08      	pop	{r3, pc}

00024ae2 <att_handle_prepare_write_rsp>:
{
   24ae2:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24ae4:	2300      	movs	r3, #0
   24ae6:	898a      	ldrh	r2, [r1, #12]
   24ae8:	6889      	ldr	r1, [r1, #8]
   24aea:	f7f2 fc75 	bl	173d8 <att_handle_rsp>
}
   24aee:	bd08      	pop	{r3, pc}

00024af0 <att_handle_write_rsp>:
{
   24af0:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24af2:	2300      	movs	r3, #0
   24af4:	898a      	ldrh	r2, [r1, #12]
   24af6:	6889      	ldr	r1, [r1, #8]
   24af8:	f7f2 fc6e 	bl	173d8 <att_handle_rsp>
}
   24afc:	bd08      	pop	{r3, pc}

00024afe <att_handle_read_group_rsp>:
{
   24afe:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24b00:	2300      	movs	r3, #0
   24b02:	898a      	ldrh	r2, [r1, #12]
   24b04:	6889      	ldr	r1, [r1, #8]
   24b06:	f7f2 fc67 	bl	173d8 <att_handle_rsp>
}
   24b0a:	bd08      	pop	{r3, pc}

00024b0c <att_handle_read_mult_rsp>:
{
   24b0c:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24b0e:	2300      	movs	r3, #0
   24b10:	898a      	ldrh	r2, [r1, #12]
   24b12:	6889      	ldr	r1, [r1, #8]
   24b14:	f7f2 fc60 	bl	173d8 <att_handle_rsp>
}
   24b18:	bd08      	pop	{r3, pc}

00024b1a <att_handle_read_blob_rsp>:
{
   24b1a:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24b1c:	2300      	movs	r3, #0
   24b1e:	898a      	ldrh	r2, [r1, #12]
   24b20:	6889      	ldr	r1, [r1, #8]
   24b22:	f7f2 fc59 	bl	173d8 <att_handle_rsp>
}
   24b26:	bd08      	pop	{r3, pc}

00024b28 <att_handle_read_rsp>:
{
   24b28:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24b2a:	2300      	movs	r3, #0
   24b2c:	898a      	ldrh	r2, [r1, #12]
   24b2e:	6889      	ldr	r1, [r1, #8]
   24b30:	f7f2 fc52 	bl	173d8 <att_handle_rsp>
}
   24b34:	bd08      	pop	{r3, pc}

00024b36 <att_handle_read_type_rsp>:
{
   24b36:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24b38:	2300      	movs	r3, #0
   24b3a:	898a      	ldrh	r2, [r1, #12]
   24b3c:	6889      	ldr	r1, [r1, #8]
   24b3e:	f7f2 fc4b 	bl	173d8 <att_handle_rsp>
}
   24b42:	bd08      	pop	{r3, pc}

00024b44 <att_handle_find_type_rsp>:
{
   24b44:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24b46:	2300      	movs	r3, #0
   24b48:	898a      	ldrh	r2, [r1, #12]
   24b4a:	6889      	ldr	r1, [r1, #8]
   24b4c:	f7f2 fc44 	bl	173d8 <att_handle_rsp>
}
   24b50:	bd08      	pop	{r3, pc}

00024b52 <att_handle_find_info_rsp>:
{
   24b52:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24b54:	2300      	movs	r3, #0
   24b56:	898a      	ldrh	r2, [r1, #12]
   24b58:	6889      	ldr	r1, [r1, #8]
   24b5a:	f7f2 fc3d 	bl	173d8 <att_handle_rsp>
}
   24b5e:	bd08      	pop	{r3, pc}

00024b60 <att_mtu_rsp>:
{
   24b60:	b570      	push	{r4, r5, r6, lr}
   24b62:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
   24b64:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   24b66:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   24b68:	2b16      	cmp	r3, #22
   24b6a:	d910      	bls.n	24b8e <att_mtu_rsp+0x2e>
   24b6c:	460d      	mov	r5, r1
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   24b6e:	2bf7      	cmp	r3, #247	; 0xf7
   24b70:	bf28      	it	cs
   24b72:	23f7      	movcs	r3, #247	; 0xf7
   24b74:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   24b78:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   24b7c:	f7ff fba3 	bl	242c6 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   24b80:	2300      	movs	r3, #0
   24b82:	89aa      	ldrh	r2, [r5, #12]
   24b84:	4631      	mov	r1, r6
   24b86:	4620      	mov	r0, r4
   24b88:	f7f2 fc26 	bl	173d8 <att_handle_rsp>
}
   24b8c:	bd70      	pop	{r4, r5, r6, pc}
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   24b8e:	2304      	movs	r3, #4
   24b90:	2200      	movs	r2, #0
   24b92:	4611      	mov	r1, r2
   24b94:	f7f2 fc20 	bl	173d8 <att_handle_rsp>
   24b98:	e7f8      	b.n	24b8c <att_mtu_rsp+0x2c>

00024b9a <att_confirm>:
{
   24b9a:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24b9c:	2300      	movs	r3, #0
   24b9e:	898a      	ldrh	r2, [r1, #12]
   24ba0:	6889      	ldr	r1, [r1, #8]
   24ba2:	f7f2 fc19 	bl	173d8 <att_handle_rsp>
}
   24ba6:	bd08      	pop	{r3, pc}

00024ba8 <att_chan_detach>:
{
   24ba8:	b510      	push	{r4, lr}
   24baa:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   24bac:	6800      	ldr	r0, [r0, #0]
   24bae:	f504 72a2 	add.w	r2, r4, #324	; 0x144
	return list->head;
   24bb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24bb4:	2100      	movs	r1, #0
   24bb6:	b1e3      	cbz	r3, 24bf2 <att_chan_detach+0x4a>
   24bb8:	4293      	cmp	r3, r2
   24bba:	d002      	beq.n	24bc2 <att_chan_detach+0x1a>
   24bbc:	4619      	mov	r1, r3
   24bbe:	681b      	ldr	r3, [r3, #0]
   24bc0:	e7f9      	b.n	24bb6 <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
   24bc2:	b149      	cbz	r1, 24bd8 <att_chan_detach+0x30>
	return node->next;
   24bc4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	parent->next = child;
   24bc8:	600b      	str	r3, [r1, #0]
	return list->tail;
   24bca:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   24bcc:	4293      	cmp	r3, r2
   24bce:	d00b      	beq.n	24be8 <att_chan_detach+0x40>
	parent->next = child;
   24bd0:	2300      	movs	r3, #0
   24bd2:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24bd6:	e00c      	b.n	24bf2 <att_chan_detach+0x4a>
	return node->next;
   24bd8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	list->head = node;
   24bdc:	6243      	str	r3, [r0, #36]	; 0x24
	return list->tail;
   24bde:	6a81      	ldr	r1, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   24be0:	4291      	cmp	r1, r2
   24be2:	d1f5      	bne.n	24bd0 <att_chan_detach+0x28>
	list->tail = node;
   24be4:	6283      	str	r3, [r0, #40]	; 0x28
}
   24be6:	e7f3      	b.n	24bd0 <att_chan_detach+0x28>
	list->tail = node;
   24be8:	6281      	str	r1, [r0, #40]	; 0x28
}
   24bea:	e7f1      	b.n	24bd0 <att_chan_detach+0x28>
		net_buf_unref(buf);
   24bec:	4618      	mov	r0, r3
   24bee:	f001 f8a7 	bl	25d40 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   24bf2:	2200      	movs	r2, #0
   24bf4:	2300      	movs	r3, #0
   24bf6:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   24bfa:	f001 f86f 	bl	25cdc <net_buf_get>
   24bfe:	4603      	mov	r3, r0
   24c00:	2800      	cmp	r0, #0
   24c02:	d1f3      	bne.n	24bec <att_chan_detach+0x44>
	if (chan->req) {
   24c04:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   24c08:	b12b      	cbz	r3, 24c16 <att_chan_detach+0x6e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   24c0a:	230e      	movs	r3, #14
   24c0c:	2200      	movs	r2, #0
   24c0e:	4611      	mov	r1, r2
   24c10:	4620      	mov	r0, r4
   24c12:	f7f2 fbe1 	bl	173d8 <att_handle_rsp>
	chan->att = NULL;
   24c16:	2300      	movs	r3, #0
   24c18:	6023      	str	r3, [r4, #0]
}
   24c1a:	bd10      	pop	{r4, pc}

00024c1c <bt_att_disconnected>:
{
   24c1c:	b538      	push	{r3, r4, r5, lr}
   24c1e:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   24c20:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (!att_chan->att) {
   24c24:	b125      	cbz	r5, 24c30 <bt_att_disconnected+0x14>
   24c26:	3808      	subs	r0, #8
	att_chan_detach(att_chan);
   24c28:	f7ff ffbe 	bl	24ba8 <att_chan_detach>
	return list->head;
   24c2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   24c2e:	b103      	cbz	r3, 24c32 <bt_att_disconnected+0x16>
}
   24c30:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   24c32:	4628      	mov	r0, r5
   24c34:	f7f2 fc1a 	bl	1746c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   24c38:	6820      	ldr	r0, [r4, #0]
   24c3a:	f7f3 f943 	bl	17ec4 <bt_gatt_disconnected>
   24c3e:	e7f7      	b.n	24c30 <bt_att_disconnected+0x14>

00024c40 <att_timeout>:
{
   24c40:	b508      	push	{r3, lr}
	bt_att_disconnected(&chan->chan.chan);
   24c42:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   24c46:	f7ff ffe9 	bl	24c1c <bt_att_disconnected>
}
   24c4a:	bd08      	pop	{r3, pc}

00024c4c <bt_att_send>:
{
   24c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24c50:	b082      	sub	sp, #8
   24c52:	4607      	mov	r7, r0
   24c54:	460d      	mov	r5, r1
   24c56:	4614      	mov	r4, r2
   24c58:	461e      	mov	r6, r3
	att = att_get(conn);
   24c5a:	f7ff f957 	bl	23f0c <att_get>
	if (!att) {
   24c5e:	b158      	cbz	r0, 24c78 <bt_att_send+0x2c>
   24c60:	4680      	mov	r8, r0
	if (cb) {
   24c62:	b17c      	cbz	r4, 24c84 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   24c64:	9600      	str	r6, [sp, #0]
   24c66:	4623      	mov	r3, r4
   24c68:	462a      	mov	r2, r5
   24c6a:	2104      	movs	r1, #4
   24c6c:	4638      	mov	r0, r7
   24c6e:	f7fe ff5b 	bl	23b28 <bt_l2cap_send_cb>
}
   24c72:	b002      	add	sp, #8
   24c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   24c78:	4628      	mov	r0, r5
   24c7a:	f001 f861 	bl	25d40 <net_buf_unref>
		return -ENOTCONN;
   24c7e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   24c82:	e7f6      	b.n	24c72 <bt_att_send+0x26>
	net_buf_put(&att->tx_queue, buf);
   24c84:	4629      	mov	r1, r5
   24c86:	300c      	adds	r0, #12
   24c88:	f001 f84d 	bl	25d26 <net_buf_put>
	att_send_process(att);
   24c8c:	4640      	mov	r0, r8
   24c8e:	f7ff fab8 	bl	24202 <att_send_process>
	return 0;
   24c92:	2000      	movs	r0, #0
   24c94:	e7ed      	b.n	24c72 <bt_att_send+0x26>

00024c96 <bt_att_req_send>:
{
   24c96:	b510      	push	{r4, lr}
   24c98:	460c      	mov	r4, r1
	att = att_get(conn);
   24c9a:	f7ff f937 	bl	23f0c <att_get>
	if (!att) {
   24c9e:	b170      	cbz	r0, 24cbe <bt_att_req_send+0x28>
   24ca0:	4603      	mov	r3, r0
	parent->next = child;
   24ca2:	2200      	movs	r2, #0
   24ca4:	6022      	str	r2, [r4, #0]
	return list->tail;
   24ca6:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   24ca8:	b132      	cbz	r2, 24cb8 <bt_att_req_send+0x22>
	parent->next = child;
   24caa:	6014      	str	r4, [r2, #0]
	list->tail = node;
   24cac:	6084      	str	r4, [r0, #8]
	att_req_send_process(att);
   24cae:	4618      	mov	r0, r3
   24cb0:	f7ff f9de 	bl	24070 <att_req_send_process>
	return 0;
   24cb4:	2000      	movs	r0, #0
}
   24cb6:	bd10      	pop	{r4, pc}
   24cb8:	6084      	str	r4, [r0, #8]
	list->head = node;
   24cba:	6044      	str	r4, [r0, #4]
}
   24cbc:	e7f7      	b.n	24cae <bt_att_req_send+0x18>
		return -ENOTCONN;
   24cbe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   24cc2:	e7f8      	b.n	24cb6 <bt_att_req_send+0x20>

00024cc4 <bt_att_req_cancel>:
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   24cc4:	2800      	cmp	r0, #0
   24cc6:	d04b      	beq.n	24d60 <bt_att_req_cancel+0x9c>
{
   24cc8:	b570      	push	{r4, r5, r6, lr}
   24cca:	460d      	mov	r5, r1
	if (!conn || !req) {
   24ccc:	2900      	cmp	r1, #0
   24cce:	d03d      	beq.n	24d4c <bt_att_req_cancel+0x88>
		return;
	}

	att = att_get(conn);
   24cd0:	f7ff f91c 	bl	23f0c <att_get>
	if (!att) {
   24cd4:	4606      	mov	r6, r0
   24cd6:	2800      	cmp	r0, #0
   24cd8:	d038      	beq.n	24d4c <bt_att_req_cancel+0x88>
	return list->head;
   24cda:	6a40      	ldr	r0, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24cdc:	b158      	cbz	r0, 24cf6 <bt_att_req_cancel+0x32>
   24cde:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   24ce2:	d00a      	beq.n	24cfa <bt_att_req_cancel+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24ce4:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   24ce8:	d00c      	beq.n	24d04 <bt_att_req_cancel+0x40>
	return node->next;
   24cea:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   24cee:	b14c      	cbz	r4, 24d04 <bt_att_req_cancel+0x40>
   24cf0:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   24cf4:	e006      	b.n	24d04 <bt_att_req_cancel+0x40>
   24cf6:	4604      	mov	r4, r0
   24cf8:	e004      	b.n	24d04 <bt_att_req_cancel+0x40>
   24cfa:	4604      	mov	r4, r0
   24cfc:	e002      	b.n	24d04 <bt_att_req_cancel+0x40>
   24cfe:	4623      	mov	r3, r4
   24d00:	4620      	mov	r0, r4
   24d02:	461c      	mov	r4, r3
   24d04:	b178      	cbz	r0, 24d26 <bt_att_req_cancel+0x62>
		/* Check if request is outstanding */
		if (bt_att_chan_req_cancel(chan, req)) {
   24d06:	4629      	mov	r1, r5
   24d08:	f7f2 fbea 	bl	174e0 <bt_att_chan_req_cancel>
   24d0c:	b9f0      	cbnz	r0, 24d4c <bt_att_req_cancel+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24d0e:	2c00      	cmp	r4, #0
   24d10:	d0f5      	beq.n	24cfe <bt_att_req_cancel+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24d12:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   24d16:	d0f3      	beq.n	24d00 <bt_att_req_cancel+0x3c>
	return node->next;
   24d18:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   24d1c:	2b00      	cmp	r3, #0
   24d1e:	d0ef      	beq.n	24d00 <bt_att_req_cancel+0x3c>
   24d20:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   24d24:	e7ec      	b.n	24d00 <bt_att_req_cancel+0x3c>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   24d26:	462a      	mov	r2, r5
	return list->head;
   24d28:	6873      	ldr	r3, [r6, #4]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24d2a:	b163      	cbz	r3, 24d46 <bt_att_req_cancel+0x82>
   24d2c:	4293      	cmp	r3, r2
   24d2e:	d002      	beq.n	24d36 <bt_att_req_cancel+0x72>
   24d30:	4618      	mov	r0, r3
   24d32:	681b      	ldr	r3, [r3, #0]
   24d34:	e7f9      	b.n	24d2a <bt_att_req_cancel+0x66>
Z_GENLIST_REMOVE(slist, snode)
   24d36:	b150      	cbz	r0, 24d4e <bt_att_req_cancel+0x8a>
	return node->next;
   24d38:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
   24d3a:	6003      	str	r3, [r0, #0]
	return list->tail;
   24d3c:	68b3      	ldr	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   24d3e:	42ab      	cmp	r3, r5
   24d40:	d00c      	beq.n	24d5c <bt_att_req_cancel+0x98>
	parent->next = child;
   24d42:	2300      	movs	r3, #0
   24d44:	602b      	str	r3, [r5, #0]

	bt_att_req_free(req);
   24d46:	4628      	mov	r0, r5
   24d48:	f7f2 fb32 	bl	173b0 <bt_att_req_free>
}
   24d4c:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   24d4e:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   24d50:	6073      	str	r3, [r6, #4]
	return list->tail;
   24d52:	68b2      	ldr	r2, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   24d54:	42aa      	cmp	r2, r5
   24d56:	d1f4      	bne.n	24d42 <bt_att_req_cancel+0x7e>
	list->tail = node;
   24d58:	60b3      	str	r3, [r6, #8]
}
   24d5a:	e7f2      	b.n	24d42 <bt_att_req_cancel+0x7e>
	list->tail = node;
   24d5c:	60b0      	str	r0, [r6, #8]
}
   24d5e:	e7f0      	b.n	24d42 <bt_att_req_cancel+0x7e>
   24d60:	4770      	bx	lr

00024d62 <update_range>:
{
   24d62:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
   24d64:	8804      	ldrh	r4, [r0, #0]
   24d66:	42a2      	cmp	r2, r4
   24d68:	d302      	bcc.n	24d70 <update_range+0xe>
   24d6a:	880d      	ldrh	r5, [r1, #0]
   24d6c:	42ab      	cmp	r3, r5
   24d6e:	d908      	bls.n	24d82 <update_range+0x20>
	if (*start > new_start) {
   24d70:	42a2      	cmp	r2, r4
   24d72:	d200      	bcs.n	24d76 <update_range+0x14>
		*start = new_start;
   24d74:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   24d76:	880a      	ldrh	r2, [r1, #0]
   24d78:	4293      	cmp	r3, r2
   24d7a:	d904      	bls.n	24d86 <update_range+0x24>
		*end = new_end;
   24d7c:	800b      	strh	r3, [r1, #0]
	return true;
   24d7e:	2001      	movs	r0, #1
   24d80:	e002      	b.n	24d88 <update_range+0x26>
		return false;
   24d82:	2000      	movs	r0, #0
   24d84:	e000      	b.n	24d88 <update_range+0x26>
	return true;
   24d86:	2001      	movs	r0, #1
}
   24d88:	bc30      	pop	{r4, r5}
   24d8a:	4770      	bx	lr

00024d8c <cf_set_value>:
{
   24d8c:	b470      	push	{r4, r5, r6}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   24d8e:	2300      	movs	r3, #0
   24d90:	e001      	b.n	24d96 <cf_set_value+0xa>
   24d92:	3301      	adds	r3, #1
   24d94:	b29b      	uxth	r3, r3
   24d96:	2b02      	cmp	r3, #2
   24d98:	d824      	bhi.n	24de4 <cf_set_value+0x58>
   24d9a:	08dd      	lsrs	r5, r3, #3
   24d9c:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   24da0:	d90f      	bls.n	24dc2 <cf_set_value+0x36>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   24da2:	1944      	adds	r4, r0, r5
   24da4:	7a24      	ldrb	r4, [r4, #8]
   24da6:	f003 0607 	and.w	r6, r3, #7
   24daa:	40f4      	lsrs	r4, r6
   24dac:	f014 0f01 	tst.w	r4, #1
   24db0:	d0ef      	beq.n	24d92 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   24db2:	5d4c      	ldrb	r4, [r1, r5]
   24db4:	fa24 f606 	lsr.w	r6, r4, r6
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   24db8:	f016 0f01 	tst.w	r6, #1
   24dbc:	d1e9      	bne.n	24d92 <cf_set_value+0x6>
			return false;
   24dbe:	2000      	movs	r0, #0
   24dc0:	e013      	b.n	24dea <cf_set_value+0x5e>
   24dc2:	2300      	movs	r3, #0
   24dc4:	e008      	b.n	24dd8 <cf_set_value+0x4c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   24dc6:	5ccc      	ldrb	r4, [r1, r3]
   24dc8:	f004 0407 	and.w	r4, r4, #7
   24dcc:	18c5      	adds	r5, r0, r3
   24dce:	7a2e      	ldrb	r6, [r5, #8]
   24dd0:	4334      	orrs	r4, r6
   24dd2:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   24dd4:	3301      	adds	r3, #1
   24dd6:	b29b      	uxth	r3, r3
   24dd8:	4293      	cmp	r3, r2
   24dda:	d205      	bcs.n	24de8 <cf_set_value+0x5c>
   24ddc:	2b00      	cmp	r3, #0
   24dde:	d0f2      	beq.n	24dc6 <cf_set_value+0x3a>
	return true;
   24de0:	2001      	movs	r0, #1
   24de2:	e002      	b.n	24dea <cf_set_value+0x5e>
   24de4:	2300      	movs	r3, #0
   24de6:	e7f7      	b.n	24dd8 <cf_set_value+0x4c>
   24de8:	2001      	movs	r0, #1
}
   24dea:	bc70      	pop	{r4, r5, r6}
   24dec:	4770      	bx	lr

00024dee <gatt_ccc_changed>:
{
   24dee:	b510      	push	{r4, lr}
   24df0:	460c      	mov	r4, r1
	uint16_t value = 0x0000;
   24df2:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   24df4:	460b      	mov	r3, r1
   24df6:	e000      	b.n	24dfa <gatt_ccc_changed+0xc>
   24df8:	3301      	adds	r3, #1
   24dfa:	2b03      	cmp	r3, #3
   24dfc:	dc08      	bgt.n	24e10 <gatt_ccc_changed+0x22>
		if (ccc->cfg[i].value > value) {
   24dfe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   24e02:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   24e06:	8912      	ldrh	r2, [r2, #8]
   24e08:	428a      	cmp	r2, r1
   24e0a:	d9f5      	bls.n	24df8 <gatt_ccc_changed+0xa>
			value = ccc->cfg[i].value;
   24e0c:	4611      	mov	r1, r2
   24e0e:	e7f3      	b.n	24df8 <gatt_ccc_changed+0xa>
	if (value != ccc->value) {
   24e10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   24e12:	4299      	cmp	r1, r3
   24e14:	d003      	beq.n	24e1e <gatt_ccc_changed+0x30>
		ccc->value = value;
   24e16:	8521      	strh	r1, [r4, #40]	; 0x28
		if (ccc->cfg_changed) {
   24e18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24e1a:	b103      	cbz	r3, 24e1e <gatt_ccc_changed+0x30>
			ccc->cfg_changed(attr, value);
   24e1c:	4798      	blx	r3
}
   24e1e:	bd10      	pop	{r4, pc}

00024e20 <gatt_indicate_rsp>:
{
   24e20:	b510      	push	{r4, lr}
   24e22:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   24e24:	68a3      	ldr	r3, [r4, #8]
   24e26:	b113      	cbz	r3, 24e2e <gatt_indicate_rsp+0xe>
   24e28:	460a      	mov	r2, r1
		params->func(conn, params, err);
   24e2a:	4621      	mov	r1, r4
   24e2c:	4798      	blx	r3
	params->_ref--;
   24e2e:	7da3      	ldrb	r3, [r4, #22]
   24e30:	3b01      	subs	r3, #1
   24e32:	b2db      	uxtb	r3, r3
   24e34:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   24e36:	68e2      	ldr	r2, [r4, #12]
   24e38:	b112      	cbz	r2, 24e40 <gatt_indicate_rsp+0x20>
   24e3a:	b90b      	cbnz	r3, 24e40 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   24e3c:	4620      	mov	r0, r4
   24e3e:	4790      	blx	r2
}
   24e40:	bd10      	pop	{r4, pc}

00024e42 <match_uuid>:
	data->attr = attr;
   24e42:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   24e44:	8091      	strh	r1, [r2, #4]
}
   24e46:	2000      	movs	r0, #0
   24e48:	4770      	bx	lr

00024e4a <gatt_sub_is_empty>:
	return list->head;
   24e4a:	6880      	ldr	r0, [r0, #8]
}
   24e4c:	fab0 f080 	clz	r0, r0
   24e50:	0940      	lsrs	r0, r0, #5
   24e52:	4770      	bx	lr

00024e54 <gatt_mtu_rsp>:
{
   24e54:	b508      	push	{r3, lr}
   24e56:	9a02      	ldr	r2, [sp, #8]
	params->func(conn, err, params);
   24e58:	6813      	ldr	r3, [r2, #0]
   24e5a:	4798      	blx	r3
}
   24e5c:	bd08      	pop	{r3, pc}

00024e5e <gen_hash_m>:
{
   24e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
   24e60:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   24e62:	6806      	ldr	r6, [r0, #0]
   24e64:	7835      	ldrb	r5, [r6, #0]
   24e66:	2d00      	cmp	r5, #0
   24e68:	d161      	bne.n	24f2e <gen_hash_m+0xd0>
   24e6a:	4607      	mov	r7, r0
   24e6c:	4614      	mov	r4, r2
	switch (u16->val) {
   24e6e:	8873      	ldrh	r3, [r6, #2]
   24e70:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   24e74:	d019      	beq.n	24eaa <gen_hash_m+0x4c>
   24e76:	d913      	bls.n	24ea0 <gen_hash_m+0x42>
   24e78:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   24e7c:	33ff      	adds	r3, #255	; 0xff
   24e7e:	b29b      	uxth	r3, r3
   24e80:	2b04      	cmp	r3, #4
   24e82:	d85a      	bhi.n	24f3a <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
   24e84:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24e88:	2202      	movs	r2, #2
   24e8a:	f10d 010e 	add.w	r1, sp, #14
   24e8e:	4620      	mov	r0, r4
   24e90:	f7fd fc12 	bl	226b8 <tc_cmac_update>
   24e94:	2800      	cmp	r0, #0
   24e96:	d13a      	bne.n	24f0e <gen_hash_m+0xb0>
			state->err = -EINVAL;
   24e98:	f06f 0315 	mvn.w	r3, #21
   24e9c:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   24e9e:	e047      	b.n	24f30 <gen_hash_m+0xd2>
	switch (u16->val) {
   24ea0:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   24ea4:	b29b      	uxth	r3, r3
   24ea6:	2b03      	cmp	r3, #3
   24ea8:	d845      	bhi.n	24f36 <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
   24eaa:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24eae:	2202      	movs	r2, #2
   24eb0:	f10d 010e 	add.w	r1, sp, #14
   24eb4:	4620      	mov	r0, r4
   24eb6:	f7fd fbff 	bl	226b8 <tc_cmac_update>
   24eba:	b918      	cbnz	r0, 24ec4 <gen_hash_m+0x66>
			state->err = -EINVAL;
   24ebc:	f06f 0315 	mvn.w	r3, #21
   24ec0:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   24ec2:	e035      	b.n	24f30 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   24ec4:	8873      	ldrh	r3, [r6, #2]
   24ec6:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24eca:	2202      	movs	r2, #2
   24ecc:	f10d 010e 	add.w	r1, sp, #14
   24ed0:	4620      	mov	r0, r4
   24ed2:	f7fd fbf1 	bl	226b8 <tc_cmac_update>
   24ed6:	b180      	cbz	r0, 24efa <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   24ed8:	687e      	ldr	r6, [r7, #4]
   24eda:	2000      	movs	r0, #0
   24edc:	9000      	str	r0, [sp, #0]
   24ede:	2310      	movs	r3, #16
   24ee0:	eb0d 0203 	add.w	r2, sp, r3
   24ee4:	4639      	mov	r1, r7
   24ee6:	47b0      	blx	r6
		if (len < 0) {
   24ee8:	1e02      	subs	r2, r0, #0
   24eea:	db0a      	blt.n	24f02 <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
   24eec:	a904      	add	r1, sp, #16
   24eee:	4620      	mov	r0, r4
   24ef0:	f7fd fbe2 	bl	226b8 <tc_cmac_update>
   24ef4:	b138      	cbz	r0, 24f06 <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
   24ef6:	2501      	movs	r5, #1
   24ef8:	e01a      	b.n	24f30 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   24efa:	f06f 0315 	mvn.w	r3, #21
   24efe:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   24f00:	e016      	b.n	24f30 <gen_hash_m+0xd2>
			state->err = len;
   24f02:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   24f04:	e014      	b.n	24f30 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   24f06:	f06f 0315 	mvn.w	r3, #21
   24f0a:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   24f0c:	e010      	b.n	24f30 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   24f0e:	8873      	ldrh	r3, [r6, #2]
   24f10:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24f14:	2202      	movs	r2, #2
   24f16:	f10d 010e 	add.w	r1, sp, #14
   24f1a:	4620      	mov	r0, r4
   24f1c:	f7fd fbcc 	bl	226b8 <tc_cmac_update>
   24f20:	b108      	cbz	r0, 24f26 <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
   24f22:	2501      	movs	r5, #1
   24f24:	e004      	b.n	24f30 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   24f26:	f06f 0315 	mvn.w	r3, #21
   24f2a:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   24f2c:	e000      	b.n	24f30 <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
   24f2e:	2501      	movs	r5, #1
}
   24f30:	4628      	mov	r0, r5
   24f32:	b009      	add	sp, #36	; 0x24
   24f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   24f36:	2501      	movs	r5, #1
   24f38:	e7fa      	b.n	24f30 <gen_hash_m+0xd2>
   24f3a:	2501      	movs	r5, #1
   24f3c:	e7f8      	b.n	24f30 <gen_hash_m+0xd2>

00024f3e <sc_restore_rsp>:
{
   24f3e:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   24f40:	f7f2 fb04 	bl	1754c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   24f44:	b188      	cbz	r0, 24f6a <sc_restore_rsp+0x2c>
   24f46:	4603      	mov	r3, r0
   24f48:	7a02      	ldrb	r2, [r0, #8]
   24f4a:	f012 0f01 	tst.w	r2, #1
   24f4e:	d00c      	beq.n	24f6a <sc_restore_rsp+0x2c>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   24f50:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24f52:	f3bf 8f5b 	dmb	ish
   24f56:	e853 2f00 	ldrex	r2, [r3]
   24f5a:	f042 0201 	orr.w	r2, r2, #1
   24f5e:	e843 2100 	strex	r1, r2, [r3]
   24f62:	2900      	cmp	r1, #0
   24f64:	d1f7      	bne.n	24f56 <sc_restore_rsp+0x18>
   24f66:	f3bf 8f5b 	dmb	ish
}
   24f6a:	bd08      	pop	{r3, pc}

00024f6c <find_ccc_cfg>:
{
   24f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   24f6e:	b083      	sub	sp, #12
   24f70:	4607      	mov	r7, r0
   24f72:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   24f74:	2400      	movs	r4, #0
   24f76:	e00e      	b.n	24f96 <find_ccc_cfg+0x2a>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   24f78:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   24f7c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   24f80:	2300      	movs	r3, #0
   24f82:	9300      	str	r3, [sp, #0]
   24f84:	f8cd 3003 	str.w	r3, [sp, #3]
   24f88:	2207      	movs	r2, #7
   24f8a:	4669      	mov	r1, sp
   24f8c:	3001      	adds	r0, #1
   24f8e:	f7fd fd21 	bl	229d4 <memcmp>
   24f92:	b198      	cbz	r0, 24fbc <find_ccc_cfg+0x50>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   24f94:	3401      	adds	r4, #1
   24f96:	2c03      	cmp	r4, #3
   24f98:	d80f      	bhi.n	24fba <find_ccc_cfg+0x4e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   24f9a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   24f9e:	eb05 0643 	add.w	r6, r5, r3, lsl #1
		if (conn) {
   24fa2:	2f00      	cmp	r7, #0
   24fa4:	d0e8      	beq.n	24f78 <find_ccc_cfg+0xc>
						    &cfg->peer)) {
   24fa6:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   24fa8:	3201      	adds	r2, #1
   24faa:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   24fae:	4638      	mov	r0, r7
   24fb0:	f7fe fc70 	bl	23894 <bt_conn_is_peer_addr_le>
   24fb4:	2800      	cmp	r0, #0
   24fb6:	d0ed      	beq.n	24f94 <find_ccc_cfg+0x28>
   24fb8:	e000      	b.n	24fbc <find_ccc_cfg+0x50>
	return NULL;
   24fba:	2600      	movs	r6, #0
}
   24fbc:	4630      	mov	r0, r6
   24fbe:	b003      	add	sp, #12
   24fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024fc2 <cf_write>:
{
   24fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24fc6:	461d      	mov	r5, r3
   24fc8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   24fcc:	2b01      	cmp	r3, #1
   24fce:	d82c      	bhi.n	2502a <cf_write+0x68>
   24fd0:	4606      	mov	r6, r0
   24fd2:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
   24fd4:	462f      	mov	r7, r5
   24fd6:	442b      	add	r3, r5
   24fd8:	2b01      	cmp	r3, #1
   24fda:	d829      	bhi.n	25030 <cf_write+0x6e>
	cfg = find_cf_cfg(conn);
   24fdc:	f7f2 fab6 	bl	1754c <find_cf_cfg>
	if (!cfg) {
   24fe0:	4604      	mov	r4, r0
   24fe2:	b1f0      	cbz	r0, 25022 <cf_write+0x60>
	if (!cfg) {
   24fe4:	b33c      	cbz	r4, 25036 <cf_write+0x74>
	if (!cf_set_value(cfg, value, len)) {
   24fe6:	462a      	mov	r2, r5
   24fe8:	4641      	mov	r1, r8
   24fea:	4620      	mov	r0, r4
   24fec:	f7ff fece 	bl	24d8c <cf_set_value>
   24ff0:	b320      	cbz	r0, 2503c <cf_write+0x7a>
	memcpy(dst, src, sizeof(*dst));
   24ff2:	2207      	movs	r2, #7
   24ff4:	f106 0188 	add.w	r1, r6, #136	; 0x88
   24ff8:	1c60      	adds	r0, r4, #1
   24ffa:	f7fd fd18 	bl	22a2e <memcpy>
	cfg->id = conn->id;
   24ffe:	7a33      	ldrb	r3, [r6, #8]
   25000:	f804 3b0c 	strb.w	r3, [r4], #12
   25004:	f3bf 8f5b 	dmb	ish
   25008:	e854 3f00 	ldrex	r3, [r4]
   2500c:	f043 0301 	orr.w	r3, r3, #1
   25010:	e844 3200 	strex	r2, r3, [r4]
   25014:	2a00      	cmp	r2, #0
   25016:	d1f7      	bne.n	25008 <cf_write+0x46>
   25018:	f3bf 8f5b 	dmb	ish
}
   2501c:	4638      	mov	r0, r7
   2501e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   25022:	f7f2 fa93 	bl	1754c <find_cf_cfg>
   25026:	4604      	mov	r4, r0
   25028:	e7dc      	b.n	24fe4 <cf_write+0x22>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2502a:	f06f 0706 	mvn.w	r7, #6
   2502e:	e7f5      	b.n	2501c <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   25030:	f06f 070c 	mvn.w	r7, #12
   25034:	e7f2      	b.n	2501c <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   25036:	f06f 0710 	mvn.w	r7, #16
   2503a:	e7ef      	b.n	2501c <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   2503c:	f06f 0712 	mvn.w	r7, #18
   25040:	e7ec      	b.n	2501c <cf_write+0x5a>

00025042 <sc_save>:
{
   25042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25046:	b082      	sub	sp, #8
   25048:	4607      	mov	r7, r0
   2504a:	4688      	mov	r8, r1
   2504c:	4616      	mov	r6, r2
   2504e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   25050:	f7f2 faa6 	bl	175a0 <find_sc_cfg>
	if (!cfg) {
   25054:	4604      	mov	r4, r0
   25056:	b170      	cbz	r0, 25076 <sc_save+0x34>
	if (!(cfg->data.start || cfg->data.end)) {
   25058:	8923      	ldrh	r3, [r4, #8]
   2505a:	b90b      	cbnz	r3, 25060 <sc_save+0x1e>
   2505c:	8963      	ldrh	r3, [r4, #10]
   2505e:	b1d3      	cbz	r3, 25096 <sc_save+0x54>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   25060:	462b      	mov	r3, r5
   25062:	4632      	mov	r2, r6
   25064:	f104 010a 	add.w	r1, r4, #10
   25068:	f104 0008 	add.w	r0, r4, #8
   2506c:	f7ff fe79 	bl	24d62 <update_range>
}
   25070:	b002      	add	sp, #8
   25072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   25076:	9000      	str	r0, [sp, #0]
   25078:	f8cd 0003 	str.w	r0, [sp, #3]
   2507c:	4669      	mov	r1, sp
   2507e:	f7f2 fa8f 	bl	175a0 <find_sc_cfg>
		if (!cfg) {
   25082:	4604      	mov	r4, r0
   25084:	2800      	cmp	r0, #0
   25086:	d0f3      	beq.n	25070 <sc_save+0x2e>
		cfg->id = id;
   25088:	f800 7b01 	strb.w	r7, [r0], #1
   2508c:	2207      	movs	r2, #7
   2508e:	4641      	mov	r1, r8
   25090:	f7fd fccd 	bl	22a2e <memcpy>
   25094:	e7e0      	b.n	25058 <sc_save+0x16>
		cfg->data.start = start;
   25096:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   25098:	8165      	strh	r5, [r4, #10]
		goto done;
   2509a:	e7e9      	b.n	25070 <sc_save+0x2e>

0002509c <clear_ccc_cfg>:
{
   2509c:	b530      	push	{r4, r5, lr}
   2509e:	b083      	sub	sp, #12
   250a0:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   250a2:	2500      	movs	r5, #0
   250a4:	9500      	str	r5, [sp, #0]
   250a6:	f8cd 5003 	str.w	r5, [sp, #3]
   250aa:	2207      	movs	r2, #7
   250ac:	4669      	mov	r1, sp
   250ae:	3001      	adds	r0, #1
   250b0:	f7fd fcbd 	bl	22a2e <memcpy>
	cfg->id = 0U;
   250b4:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   250b6:	8125      	strh	r5, [r4, #8]
}
   250b8:	b003      	add	sp, #12
   250ba:	bd30      	pop	{r4, r5, pc}

000250bc <bt_gatt_attr_write_ccc>:
{
   250bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   250c0:	461c      	mov	r4, r3
   250c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   250c6:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
   250c8:	2b00      	cmp	r3, #0
   250ca:	d144      	bne.n	25156 <bt_gatt_attr_write_ccc+0x9a>
   250cc:	4681      	mov	r9, r0
   250ce:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
   250d0:	1e63      	subs	r3, r4, #1
   250d2:	b29b      	uxth	r3, r3
   250d4:	2b01      	cmp	r3, #1
   250d6:	d841      	bhi.n	2515c <bt_gatt_attr_write_ccc+0xa0>
	if (len < sizeof(uint16_t)) {
   250d8:	2c01      	cmp	r4, #1
   250da:	d91d      	bls.n	25118 <bt_gatt_attr_write_ccc+0x5c>
   250dc:	7853      	ldrb	r3, [r2, #1]
   250de:	7815      	ldrb	r5, [r2, #0]
   250e0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   250e4:	4639      	mov	r1, r7
   250e6:	4648      	mov	r0, r9
   250e8:	f7ff ff40 	bl	24f6c <find_ccc_cfg>
	if (!cfg) {
   250ec:	4680      	mov	r8, r0
   250ee:	b1a8      	cbz	r0, 2511c <bt_gatt_attr_write_ccc+0x60>
	if (ccc->cfg_write) {
   250f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   250f2:	b143      	cbz	r3, 25106 <bt_gatt_attr_write_ccc+0x4a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   250f4:	462a      	mov	r2, r5
   250f6:	4631      	mov	r1, r6
   250f8:	4648      	mov	r0, r9
   250fa:	4798      	blx	r3
		if (write < 0) {
   250fc:	2800      	cmp	r0, #0
   250fe:	db09      	blt.n	25114 <bt_gatt_attr_write_ccc+0x58>
		if (write != sizeof(value) && write != 1) {
   25100:	3801      	subs	r0, #1
   25102:	2801      	cmp	r0, #1
   25104:	d830      	bhi.n	25168 <bt_gatt_attr_write_ccc+0xac>
	cfg->value = value;
   25106:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
   2510a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   2510c:	429d      	cmp	r5, r3
   2510e:	d119      	bne.n	25144 <bt_gatt_attr_write_ccc+0x88>
	if (!value) {
   25110:	b1ed      	cbz	r5, 2514e <bt_gatt_attr_write_ccc+0x92>
	return len;
   25112:	4620      	mov	r0, r4
}
   25114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   25118:	7815      	ldrb	r5, [r2, #0]
   2511a:	e7e3      	b.n	250e4 <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
   2511c:	b90d      	cbnz	r5, 25122 <bt_gatt_attr_write_ccc+0x66>
			return len;
   2511e:	4620      	mov	r0, r4
   25120:	e7f8      	b.n	25114 <bt_gatt_attr_write_ccc+0x58>
		cfg = find_ccc_cfg(NULL, ccc);
   25122:	4639      	mov	r1, r7
   25124:	2000      	movs	r0, #0
   25126:	f7ff ff21 	bl	24f6c <find_ccc_cfg>
		if (!cfg) {
   2512a:	4680      	mov	r8, r0
   2512c:	b1c8      	cbz	r0, 25162 <bt_gatt_attr_write_ccc+0xa6>
   2512e:	2207      	movs	r2, #7
   25130:	f109 0188 	add.w	r1, r9, #136	; 0x88
   25134:	3001      	adds	r0, #1
   25136:	f7fd fc7a 	bl	22a2e <memcpy>
		cfg->id = conn->id;
   2513a:	f899 3008 	ldrb.w	r3, [r9, #8]
   2513e:	f888 3000 	strb.w	r3, [r8]
   25142:	e7d5      	b.n	250f0 <bt_gatt_attr_write_ccc+0x34>
		gatt_ccc_changed(attr, ccc);
   25144:	4639      	mov	r1, r7
   25146:	4630      	mov	r0, r6
   25148:	f7ff fe51 	bl	24dee <gatt_ccc_changed>
   2514c:	e7e0      	b.n	25110 <bt_gatt_attr_write_ccc+0x54>
		clear_ccc_cfg(cfg);
   2514e:	4640      	mov	r0, r8
   25150:	f7ff ffa4 	bl	2509c <clear_ccc_cfg>
   25154:	e7dd      	b.n	25112 <bt_gatt_attr_write_ccc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25156:	f06f 0006 	mvn.w	r0, #6
   2515a:	e7db      	b.n	25114 <bt_gatt_attr_write_ccc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2515c:	f06f 000c 	mvn.w	r0, #12
   25160:	e7d8      	b.n	25114 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   25162:	f06f 0010 	mvn.w	r0, #16
   25166:	e7d5      	b.n	25114 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   25168:	f06f 000d 	mvn.w	r0, #13
   2516c:	e7d2      	b.n	25114 <bt_gatt_attr_write_ccc+0x58>

0002516e <gatt_sub_free>:
{
   2516e:	b500      	push	{lr}
   25170:	b083      	sub	sp, #12
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   25172:	2300      	movs	r3, #0
   25174:	9300      	str	r3, [sp, #0]
   25176:	f8cd 3003 	str.w	r3, [sp, #3]
   2517a:	2207      	movs	r2, #7
   2517c:	4669      	mov	r1, sp
   2517e:	3001      	adds	r0, #1
   25180:	f7fd fc55 	bl	22a2e <memcpy>
}
   25184:	b003      	add	sp, #12
   25186:	f85d fb04 	ldr.w	pc, [sp], #4

0002518a <gatt_sub_remove>:
{
   2518a:	b538      	push	{r3, r4, r5, lr}
   2518c:	460c      	mov	r4, r1
	if (params) {
   2518e:	b163      	cbz	r3, 251aa <gatt_sub_remove+0x20>
   25190:	4619      	mov	r1, r3
		sys_slist_remove(&sub->list, prev, &params->node);
   25192:	3314      	adds	r3, #20
Z_GENLIST_REMOVE(slist, snode)
   25194:	b172      	cbz	r2, 251b4 <gatt_sub_remove+0x2a>
	return node->next;
   25196:	694d      	ldr	r5, [r1, #20]
	parent->next = child;
   25198:	6015      	str	r5, [r2, #0]
	return list->tail;
   2519a:	68e5      	ldr	r5, [r4, #12]
Z_GENLIST_REMOVE(slist, snode)
   2519c:	42ab      	cmp	r3, r5
   2519e:	d010      	beq.n	251c2 <gatt_sub_remove+0x38>
	parent->next = child;
   251a0:	2200      	movs	r2, #0
   251a2:	614a      	str	r2, [r1, #20]
		params->notify(conn, params, NULL, 0);
   251a4:	680d      	ldr	r5, [r1, #0]
   251a6:	4613      	mov	r3, r2
   251a8:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   251aa:	4620      	mov	r0, r4
   251ac:	f7ff fe4d 	bl	24e4a <gatt_sub_is_empty>
   251b0:	b948      	cbnz	r0, 251c6 <gatt_sub_remove+0x3c>
}
   251b2:	bd38      	pop	{r3, r4, r5, pc}
	return node->next;
   251b4:	694a      	ldr	r2, [r1, #20]
	list->head = node;
   251b6:	60a2      	str	r2, [r4, #8]
	return list->tail;
   251b8:	68e5      	ldr	r5, [r4, #12]
Z_GENLIST_REMOVE(slist, snode)
   251ba:	42ab      	cmp	r3, r5
   251bc:	d1f0      	bne.n	251a0 <gatt_sub_remove+0x16>
	list->tail = node;
   251be:	60e2      	str	r2, [r4, #12]
}
   251c0:	e7ee      	b.n	251a0 <gatt_sub_remove+0x16>
	list->tail = node;
   251c2:	60e2      	str	r2, [r4, #12]
}
   251c4:	e7ec      	b.n	251a0 <gatt_sub_remove+0x16>
		gatt_sub_free(sub);
   251c6:	4620      	mov	r0, r4
   251c8:	f7ff ffd1 	bl	2516e <gatt_sub_free>
}
   251cc:	e7f1      	b.n	251b2 <gatt_sub_remove+0x28>

000251ce <gatt_sub_update>:
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   251ce:	784a      	ldrb	r2, [r1, #1]
   251d0:	b902      	cbnz	r2, 251d4 <gatt_sub_update+0x6>
   251d2:	4770      	bx	lr
{
   251d4:	b508      	push	{r3, lr}
   251d6:	460b      	mov	r3, r1
   251d8:	2207      	movs	r2, #7
   251da:	f100 0188 	add.w	r1, r0, #136	; 0x88
   251de:	1c58      	adds	r0, r3, #1
   251e0:	f7fd fc25 	bl	22a2e <memcpy>
}
   251e4:	bd08      	pop	{r3, pc}

000251e6 <remove_subscriptions>:
{
   251e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   251ea:	4606      	mov	r6, r0
	sub = gatt_sub_find(conn);
   251ec:	f7f2 f9fc 	bl	175e8 <gatt_sub_find>
	if (!sub) {
   251f0:	2800      	cmp	r0, #0
   251f2:	d03b      	beq.n	2526c <remove_subscriptions+0x86>
   251f4:	4607      	mov	r7, r0
	return list->head;
   251f6:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   251f8:	b385      	cbz	r5, 2525c <remove_subscriptions+0x76>
   251fa:	3d14      	subs	r5, #20
   251fc:	d032      	beq.n	25264 <remove_subscriptions+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   251fe:	f115 0414 	adds.w	r4, r5, #20
   25202:	d02c      	beq.n	2525e <remove_subscriptions+0x78>
	return node->next;
   25204:	696c      	ldr	r4, [r5, #20]
   25206:	b354      	cbz	r4, 2525e <remove_subscriptions+0x78>
   25208:	3c14      	subs	r4, #20
   2520a:	e028      	b.n	2525e <remove_subscriptions+0x78>
			params->value = 0U;
   2520c:	2300      	movs	r3, #0
   2520e:	81ab      	strh	r3, [r5, #12]
			gatt_sub_remove(conn, sub, prev, params);
   25210:	462b      	mov	r3, r5
   25212:	4642      	mov	r2, r8
   25214:	4639      	mov	r1, r7
   25216:	4630      	mov	r0, r6
   25218:	f7ff ffb7 	bl	2518a <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2521c:	b324      	cbz	r4, 25268 <remove_subscriptions+0x82>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2521e:	f114 0314 	adds.w	r3, r4, #20
   25222:	d002      	beq.n	2522a <remove_subscriptions+0x44>
	return node->next;
   25224:	6963      	ldr	r3, [r4, #20]
   25226:	b103      	cbz	r3, 2522a <remove_subscriptions+0x44>
   25228:	3b14      	subs	r3, #20
   2522a:	4625      	mov	r5, r4
   2522c:	461c      	mov	r4, r3
   2522e:	b1ed      	cbz	r5, 2526c <remove_subscriptions+0x86>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   25230:	f106 0188 	add.w	r1, r6, #136	; 0x88
   25234:	7a30      	ldrb	r0, [r6, #8]
   25236:	f7fd ffec 	bl	23212 <bt_addr_le_is_bonded>
   2523a:	2800      	cmp	r0, #0
   2523c:	d0e6      	beq.n	2520c <remove_subscriptions+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2523e:	f3bf 8f5b 	dmb	ish
   25242:	692b      	ldr	r3, [r5, #16]
   25244:	f3bf 8f5b 	dmb	ish
   25248:	f013 0f01 	tst.w	r3, #1
   2524c:	d1de      	bne.n	2520c <remove_subscriptions+0x26>
			gatt_sub_update(conn, sub);
   2524e:	4639      	mov	r1, r7
   25250:	4630      	mov	r0, r6
   25252:	f7ff ffbc 	bl	251ce <gatt_sub_update>
			prev = &params->node;
   25256:	f105 0814 	add.w	r8, r5, #20
   2525a:	e7df      	b.n	2521c <remove_subscriptions+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2525c:	462c      	mov	r4, r5
   2525e:	f04f 0800 	mov.w	r8, #0
   25262:	e7e4      	b.n	2522e <remove_subscriptions+0x48>
   25264:	462c      	mov	r4, r5
   25266:	e7fa      	b.n	2525e <remove_subscriptions+0x78>
   25268:	4623      	mov	r3, r4
   2526a:	e7de      	b.n	2522a <remove_subscriptions+0x44>
}
   2526c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025270 <clear_sc_cfg>:
{
   25270:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   25272:	220c      	movs	r2, #12
   25274:	2100      	movs	r1, #0
   25276:	f7fd fbfe 	bl	22a76 <memset>
}
   2527a:	bd08      	pop	{r3, pc}

0002527c <bt_gatt_clear_sc>:
{
   2527c:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2527e:	f7f2 f98f 	bl	175a0 <find_sc_cfg>
	if (!cfg) {
   25282:	b108      	cbz	r0, 25288 <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   25284:	f7ff fff4 	bl	25270 <clear_sc_cfg>
}
   25288:	2000      	movs	r0, #0
   2528a:	bd08      	pop	{r3, pc}

0002528c <sc_clear>:
{
   2528c:	b538      	push	{r3, r4, r5, lr}
   2528e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25290:	f100 0588 	add.w	r5, r0, #136	; 0x88
   25294:	4629      	mov	r1, r5
   25296:	7a00      	ldrb	r0, [r0, #8]
   25298:	f7fd ffbb 	bl	23212 <bt_addr_le_is_bonded>
   2529c:	b120      	cbz	r0, 252a8 <sc_clear+0x1c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   2529e:	4629      	mov	r1, r5
   252a0:	7a20      	ldrb	r0, [r4, #8]
   252a2:	f7ff ffeb 	bl	2527c <bt_gatt_clear_sc>
}
   252a6:	bd38      	pop	{r3, r4, r5, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   252a8:	4629      	mov	r1, r5
   252aa:	7a20      	ldrb	r0, [r4, #8]
   252ac:	f7f2 f978 	bl	175a0 <find_sc_cfg>
		if (cfg) {
   252b0:	2800      	cmp	r0, #0
   252b2:	d0f8      	beq.n	252a6 <sc_clear+0x1a>
			clear_sc_cfg(cfg);
   252b4:	f7ff ffdc 	bl	25270 <clear_sc_cfg>
}
   252b8:	e7f5      	b.n	252a6 <sc_clear+0x1a>

000252ba <sc_ccc_cfg_write>:
{
   252ba:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   252bc:	2a02      	cmp	r2, #2
   252be:	d003      	beq.n	252c8 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   252c0:	f7ff ffe4 	bl	2528c <sc_clear>
}
   252c4:	2002      	movs	r0, #2
   252c6:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   252c8:	2300      	movs	r3, #0
   252ca:	461a      	mov	r2, r3
   252cc:	f100 0188 	add.w	r1, r0, #136	; 0x88
   252d0:	7a00      	ldrb	r0, [r0, #8]
   252d2:	f7ff feb6 	bl	25042 <sc_save>
   252d6:	e7f5      	b.n	252c4 <sc_ccc_cfg_write+0xa>

000252d8 <sc_reset>:
{
   252d8:	b508      	push	{r3, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   252da:	2204      	movs	r2, #4
   252dc:	2100      	movs	r1, #0
   252de:	3008      	adds	r0, #8
   252e0:	f7fd fbc9 	bl	22a76 <memset>
}
   252e4:	bd08      	pop	{r3, pc}

000252e6 <gatt_write_ccc_rsp>:
{
   252e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   252e8:	4607      	mov	r7, r0
   252ea:	460e      	mov	r6, r1
   252ec:	9c06      	ldr	r4, [sp, #24]
	atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   252ee:	f104 0310 	add.w	r3, r4, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   252f2:	f3bf 8f5b 	dmb	ish
   252f6:	e853 2f00 	ldrex	r2, [r3]
   252fa:	f022 0204 	bic.w	r2, r2, #4
   252fe:	e843 2100 	strex	r1, r2, [r3]
   25302:	2900      	cmp	r1, #0
   25304:	d1f7      	bne.n	252f6 <gatt_write_ccc_rsp+0x10>
   25306:	f3bf 8f5b 	dmb	ish
	if (err) {
   2530a:	b96e      	cbnz	r6, 25328 <gatt_write_ccc_rsp+0x42>
	} else if (!params->value) {
   2530c:	89a3      	ldrh	r3, [r4, #12]
   2530e:	b923      	cbnz	r3, 2531a <gatt_write_ccc_rsp+0x34>
		params->notify(conn, params, NULL, 0);
   25310:	6825      	ldr	r5, [r4, #0]
   25312:	461a      	mov	r2, r3
   25314:	4621      	mov	r1, r4
   25316:	4638      	mov	r0, r7
   25318:	47a8      	blx	r5
	if (params->write) {
   2531a:	6863      	ldr	r3, [r4, #4]
   2531c:	b11b      	cbz	r3, 25326 <gatt_write_ccc_rsp+0x40>
		params->write(conn, err, NULL);
   2531e:	2200      	movs	r2, #0
   25320:	4631      	mov	r1, r6
   25322:	4638      	mov	r0, r7
   25324:	4798      	blx	r3
}
   25326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sub = gatt_sub_find(conn);
   25328:	4638      	mov	r0, r7
   2532a:	f7f2 f95d 	bl	175e8 <gatt_sub_find>
		if (!sub) {
   2532e:	4601      	mov	r1, r0
   25330:	2800      	cmp	r0, #0
   25332:	d0f8      	beq.n	25326 <gatt_write_ccc_rsp+0x40>
	return list->head;
   25334:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   25336:	b10b      	cbz	r3, 2533c <gatt_write_ccc_rsp+0x56>
	return node->next;
   25338:	681a      	ldr	r2, [r3, #0]
   2533a:	e009      	b.n	25350 <gatt_write_ccc_rsp+0x6a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2533c:	461a      	mov	r2, r3
   2533e:	e007      	b.n	25350 <gatt_write_ccc_rsp+0x6a>
				gatt_sub_remove(conn, sub, tmp, params);
   25340:	4623      	mov	r3, r4
   25342:	4638      	mov	r0, r7
   25344:	f7ff ff21 	bl	2518a <gatt_sub_remove>
				break;
   25348:	e7e7      	b.n	2531a <gatt_write_ccc_rsp+0x34>
   2534a:	4615      	mov	r5, r2
   2534c:	4613      	mov	r3, r2
   2534e:	462a      	mov	r2, r5
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   25350:	2b00      	cmp	r3, #0
   25352:	d0e2      	beq.n	2531a <gatt_write_ccc_rsp+0x34>
			if (node == &params->node) {
   25354:	f104 0514 	add.w	r5, r4, #20
   25358:	42ab      	cmp	r3, r5
   2535a:	d0f1      	beq.n	25340 <gatt_write_ccc_rsp+0x5a>
   2535c:	2a00      	cmp	r2, #0
   2535e:	d0f4      	beq.n	2534a <gatt_write_ccc_rsp+0x64>
	return node->next;
   25360:	6815      	ldr	r5, [r2, #0]
   25362:	e7f3      	b.n	2534c <gatt_write_ccc_rsp+0x66>

00025364 <gatt_foreach_iter>:
	if (handle > end_handle) {
   25364:	4299      	cmp	r1, r3
   25366:	d822      	bhi.n	253ae <gatt_foreach_iter+0x4a>
{
   25368:	b538      	push	{r3, r4, r5, lr}
   2536a:	4605      	mov	r5, r0
   2536c:	460c      	mov	r4, r1
	if (handle < start_handle) {
   2536e:	4291      	cmp	r1, r2
   25370:	d31f      	bcc.n	253b2 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   25372:	9b04      	ldr	r3, [sp, #16]
   25374:	b123      	cbz	r3, 25380 <gatt_foreach_iter+0x1c>
   25376:	6801      	ldr	r1, [r0, #0]
   25378:	4618      	mov	r0, r3
   2537a:	f7fd fbcd 	bl	22b18 <bt_uuid_cmp>
   2537e:	b9d0      	cbnz	r0, 253b6 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   25380:	9b05      	ldr	r3, [sp, #20]
   25382:	b12b      	cbz	r3, 25390 <gatt_foreach_iter+0x2c>
   25384:	68eb      	ldr	r3, [r5, #12]
   25386:	9a05      	ldr	r2, [sp, #20]
   25388:	4293      	cmp	r3, r2
   2538a:	d001      	beq.n	25390 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   2538c:	2001      	movs	r0, #1
   2538e:	e011      	b.n	253b4 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   25390:	9b06      	ldr	r3, [sp, #24]
   25392:	881b      	ldrh	r3, [r3, #0]
   25394:	3b01      	subs	r3, #1
   25396:	9a06      	ldr	r2, [sp, #24]
   25398:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   2539a:	9a08      	ldr	r2, [sp, #32]
   2539c:	4621      	mov	r1, r4
   2539e:	4628      	mov	r0, r5
   253a0:	9b07      	ldr	r3, [sp, #28]
   253a2:	4798      	blx	r3
	if (!*num_matches) {
   253a4:	9b06      	ldr	r3, [sp, #24]
   253a6:	881b      	ldrh	r3, [r3, #0]
   253a8:	b923      	cbnz	r3, 253b4 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   253aa:	2000      	movs	r0, #0
   253ac:	e002      	b.n	253b4 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   253ae:	2000      	movs	r0, #0
}
   253b0:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   253b2:	2001      	movs	r0, #1
}
   253b4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   253b6:	2001      	movs	r0, #1
   253b8:	e7fc      	b.n	253b4 <gatt_foreach_iter+0x50>

000253ba <gatt_req_alloc>:
{
   253ba:	b538      	push	{r3, r4, r5, lr}
   253bc:	4605      	mov	r5, r0
   253be:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   253c0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   253c4:	2100      	movs	r1, #0
   253c6:	f7f1 ffdb 	bl	17380 <bt_att_req_alloc>
	if (!req) {
   253ca:	4603      	mov	r3, r0
   253cc:	b108      	cbz	r0, 253d2 <gatt_req_alloc+0x18>
	req->func = func;
   253ce:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   253d0:	60c4      	str	r4, [r0, #12]
}
   253d2:	4618      	mov	r0, r3
   253d4:	bd38      	pop	{r3, r4, r5, pc}

000253d6 <gatt_req_send>:
{
   253d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   253da:	b083      	sub	sp, #12
   253dc:	4606      	mov	r6, r0
   253de:	4608      	mov	r0, r1
   253e0:	4615      	mov	r5, r2
   253e2:	461c      	mov	r4, r3
   253e4:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   253e8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	req = gatt_req_alloc(func, params, encode, op, len);
   253ea:	9700      	str	r7, [sp, #0]
   253ec:	464b      	mov	r3, r9
   253ee:	4622      	mov	r2, r4
   253f0:	4629      	mov	r1, r5
   253f2:	f7ff ffe2 	bl	253ba <gatt_req_alloc>
	if (!req) {
   253f6:	b328      	cbz	r0, 25444 <gatt_req_send+0x6e>
   253f8:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, op, len);
   253fa:	463a      	mov	r2, r7
   253fc:	4649      	mov	r1, r9
   253fe:	4630      	mov	r0, r6
   25400:	f7ff fa04 	bl	2480c <bt_att_create_pdu>
	if (!buf) {
   25404:	b180      	cbz	r0, 25428 <gatt_req_send+0x52>
	req->buf = buf;
   25406:	f8c8 0008 	str.w	r0, [r8, #8]
	err = encode(buf, len, params);
   2540a:	462a      	mov	r2, r5
   2540c:	4639      	mov	r1, r7
   2540e:	47a0      	blx	r4
	if (err) {
   25410:	4604      	mov	r4, r0
   25412:	b978      	cbnz	r0, 25434 <gatt_req_send+0x5e>
	err = bt_att_req_send(conn, req);
   25414:	4641      	mov	r1, r8
   25416:	4630      	mov	r0, r6
   25418:	f7ff fc3d 	bl	24c96 <bt_att_req_send>
	if (err) {
   2541c:	4604      	mov	r4, r0
   2541e:	b968      	cbnz	r0, 2543c <gatt_req_send+0x66>
}
   25420:	4620      	mov	r0, r4
   25422:	b003      	add	sp, #12
   25424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_att_req_free(req);
   25428:	4640      	mov	r0, r8
   2542a:	f7f1 ffc1 	bl	173b0 <bt_att_req_free>
		return -ENOMEM;
   2542e:	f06f 040b 	mvn.w	r4, #11
   25432:	e7f5      	b.n	25420 <gatt_req_send+0x4a>
		bt_att_req_free(req);
   25434:	4640      	mov	r0, r8
   25436:	f7f1 ffbb 	bl	173b0 <bt_att_req_free>
		return err;
   2543a:	e7f1      	b.n	25420 <gatt_req_send+0x4a>
		bt_att_req_free(req);
   2543c:	4640      	mov	r0, r8
   2543e:	f7f1 ffb7 	bl	173b0 <bt_att_req_free>
   25442:	e7ed      	b.n	25420 <gatt_req_send+0x4a>
		return -ENOMEM;
   25444:	f06f 040b 	mvn.w	r4, #11
   25448:	e7ea      	b.n	25420 <gatt_req_send+0x4a>

0002544a <add_subscriptions>:
{
   2544a:	b538      	push	{r3, r4, r5, lr}
   2544c:	4605      	mov	r5, r0
	sub = gatt_sub_find(conn);
   2544e:	f7f2 f8cb 	bl	175e8 <gatt_sub_find>
	if (!sub) {
   25452:	b300      	cbz	r0, 25496 <add_subscriptions+0x4c>
	return list->head;
   25454:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   25456:	b15c      	cbz	r4, 25470 <add_subscriptions+0x26>
   25458:	3c14      	subs	r4, #20
   2545a:	e009      	b.n	25470 <add_subscriptions+0x26>
			gatt_write_ccc(conn, params);
   2545c:	4621      	mov	r1, r4
   2545e:	4628      	mov	r0, r5
   25460:	f7f2 f98c 	bl	1777c <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25464:	f114 0314 	adds.w	r3, r4, #20
   25468:	d013      	beq.n	25492 <add_subscriptions+0x48>
	return node->next;
   2546a:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   2546c:	b19c      	cbz	r4, 25496 <add_subscriptions+0x4c>
   2546e:	3c14      	subs	r4, #20
   25470:	b18c      	cbz	r4, 25496 <add_subscriptions+0x4c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   25472:	f105 0188 	add.w	r1, r5, #136	; 0x88
   25476:	7a28      	ldrb	r0, [r5, #8]
   25478:	f7fd fecb 	bl	23212 <bt_addr_le_is_bonded>
   2547c:	2800      	cmp	r0, #0
   2547e:	d0f1      	beq.n	25464 <add_subscriptions+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25480:	f3bf 8f5b 	dmb	ish
   25484:	6923      	ldr	r3, [r4, #16]
   25486:	f3bf 8f5b 	dmb	ish
   2548a:	f013 0f02 	tst.w	r3, #2
   2548e:	d1e9      	bne.n	25464 <add_subscriptions+0x1a>
   25490:	e7e4      	b.n	2545c <add_subscriptions+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   25492:	461c      	mov	r4, r3
   25494:	e7ec      	b.n	25470 <add_subscriptions+0x26>
}
   25496:	bd38      	pop	{r3, r4, r5, pc}

00025498 <gatt_exchange_mtu_encode>:
{
   25498:	b508      	push	{r3, lr}
	return net_buf_simple_add(&buf->b, len);
   2549a:	2102      	movs	r1, #2
   2549c:	3008      	adds	r0, #8
   2549e:	f000 fc99 	bl	25dd4 <net_buf_simple_add>
   254a2:	4603      	mov	r3, r0
	req->mtu = sys_cpu_to_le16(mtu);
   254a4:	2000      	movs	r0, #0
   254a6:	f06f 0208 	mvn.w	r2, #8
   254aa:	701a      	strb	r2, [r3, #0]
   254ac:	7058      	strb	r0, [r3, #1]
}
   254ae:	bd08      	pop	{r3, pc}

000254b0 <gatt_write_ccc_buf>:
{
   254b0:	b538      	push	{r3, r4, r5, lr}
   254b2:	4614      	mov	r4, r2
   254b4:	f100 0508 	add.w	r5, r0, #8
   254b8:	2102      	movs	r1, #2
   254ba:	4628      	mov	r0, r5
   254bc:	f000 fc8a 	bl	25dd4 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   254c0:	8963      	ldrh	r3, [r4, #10]
   254c2:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   254c4:	89a1      	ldrh	r1, [r4, #12]
   254c6:	4628      	mov	r0, r5
   254c8:	f000 fc95 	bl	25df6 <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   254cc:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   254ce:	f3bf 8f5b 	dmb	ish
   254d2:	e854 3f00 	ldrex	r3, [r4]
   254d6:	f043 0304 	orr.w	r3, r3, #4
   254da:	e844 3200 	strex	r2, r3, [r4]
   254de:	2a00      	cmp	r2, #0
   254e0:	d1f7      	bne.n	254d2 <gatt_write_ccc_buf+0x22>
   254e2:	f3bf 8f5b 	dmb	ish
}
   254e6:	2000      	movs	r0, #0
   254e8:	bd38      	pop	{r3, r4, r5, pc}

000254ea <clear_cf_cfg>:
{
   254ea:	b530      	push	{r4, r5, lr}
   254ec:	b083      	sub	sp, #12
   254ee:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   254f0:	2500      	movs	r5, #0
   254f2:	9500      	str	r5, [sp, #0]
   254f4:	f8cd 5003 	str.w	r5, [sp, #3]
   254f8:	2207      	movs	r2, #7
   254fa:	4669      	mov	r1, sp
   254fc:	3001      	adds	r0, #1
   254fe:	f7fd fa96 	bl	22a2e <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   25502:	2201      	movs	r2, #1
   25504:	4629      	mov	r1, r5
   25506:	f104 0008 	add.w	r0, r4, #8
   2550a:	f7fd fab4 	bl	22a76 <memset>
	atomic_set(cfg->flags, 0);
   2550e:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25510:	f3bf 8f5b 	dmb	ish
   25514:	e854 3f00 	ldrex	r3, [r4]
   25518:	e844 5200 	strex	r2, r5, [r4]
   2551c:	2a00      	cmp	r2, #0
   2551e:	d1f9      	bne.n	25514 <clear_cf_cfg+0x2a>
   25520:	f3bf 8f5b 	dmb	ish
}
   25524:	b003      	add	sp, #12
   25526:	bd30      	pop	{r4, r5, pc}

00025528 <remove_cf_cfg>:
{
   25528:	b570      	push	{r4, r5, r6, lr}
   2552a:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   2552c:	f7f2 f80e 	bl	1754c <find_cf_cfg>
	if (!cfg) {
   25530:	b1e8      	cbz	r0, 2556e <remove_cf_cfg+0x46>
   25532:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25534:	f104 0688 	add.w	r6, r4, #136	; 0x88
   25538:	4631      	mov	r1, r6
   2553a:	7a20      	ldrb	r0, [r4, #8]
   2553c:	f7fd fe69 	bl	23212 <bt_addr_le_is_bonded>
   25540:	b918      	cbnz	r0, 2554a <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   25542:	4628      	mov	r0, r5
   25544:	f7ff ffd1 	bl	254ea <clear_cf_cfg>
   25548:	e011      	b.n	2556e <remove_cf_cfg+0x46>
   2554a:	2207      	movs	r2, #7
   2554c:	4631      	mov	r1, r6
   2554e:	1c68      	adds	r0, r5, #1
   25550:	f7fd fa6d 	bl	22a2e <memcpy>
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
   25554:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25556:	f3bf 8f5b 	dmb	ish
   2555a:	e855 3f00 	ldrex	r3, [r5]
   2555e:	f023 0302 	bic.w	r3, r3, #2
   25562:	e845 3200 	strex	r2, r3, [r5]
   25566:	2a00      	cmp	r2, #0
   25568:	d1f7      	bne.n	2555a <remove_cf_cfg+0x32>
   2556a:	f3bf 8f5b 	dmb	ish
}
   2556e:	bd70      	pop	{r4, r5, r6, pc}

00025570 <bt_gatt_attr_read>:
{
   25570:	b510      	push	{r4, lr}
   25572:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   25576:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2557a:	42a1      	cmp	r1, r4
   2557c:	d80c      	bhi.n	25598 <bt_gatt_attr_read+0x28>
   2557e:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   25580:	1a64      	subs	r4, r4, r1
   25582:	42a3      	cmp	r3, r4
   25584:	bfa8      	it	ge
   25586:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25588:	b29c      	uxth	r4, r3
   2558a:	4622      	mov	r2, r4
   2558c:	9b03      	ldr	r3, [sp, #12]
   2558e:	4419      	add	r1, r3
   25590:	f7fd fa4d 	bl	22a2e <memcpy>
}
   25594:	4620      	mov	r0, r4
   25596:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25598:	f06f 0406 	mvn.w	r4, #6
   2559c:	e7fa      	b.n	25594 <bt_gatt_attr_read+0x24>

0002559e <read_appearance>:
{
   2559e:	b510      	push	{r4, lr}
   255a0:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   255a2:	2400      	movs	r4, #0
   255a4:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   255a8:	2402      	movs	r4, #2
   255aa:	9402      	str	r4, [sp, #8]
   255ac:	f10d 0416 	add.w	r4, sp, #22
   255b0:	9401      	str	r4, [sp, #4]
   255b2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   255b6:	9400      	str	r4, [sp, #0]
   255b8:	f7ff ffda 	bl	25570 <bt_gatt_attr_read>
}
   255bc:	b006      	add	sp, #24
   255be:	bd10      	pop	{r4, pc}

000255c0 <read_name>:
{
   255c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   255c4:	b084      	sub	sp, #16
   255c6:	4604      	mov	r4, r0
   255c8:	460d      	mov	r5, r1
   255ca:	4616      	mov	r6, r2
   255cc:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   255ce:	f7f0 f8cd 	bl	1576c <bt_get_name>
   255d2:	4680      	mov	r8, r0
				 strlen(name));
   255d4:	f7fd f9e2 	bl	2299c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   255d8:	b280      	uxth	r0, r0
   255da:	9002      	str	r0, [sp, #8]
   255dc:	f8cd 8004 	str.w	r8, [sp, #4]
   255e0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   255e4:	9300      	str	r3, [sp, #0]
   255e6:	463b      	mov	r3, r7
   255e8:	4632      	mov	r2, r6
   255ea:	4629      	mov	r1, r5
   255ec:	4620      	mov	r0, r4
   255ee:	f7ff ffbf 	bl	25570 <bt_gatt_attr_read>
}
   255f2:	b004      	add	sp, #16
   255f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000255f8 <cf_read>:
{
   255f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   255fa:	b087      	sub	sp, #28
   255fc:	4604      	mov	r4, r0
   255fe:	460d      	mov	r5, r1
   25600:	4616      	mov	r6, r2
   25602:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   25604:	2300      	movs	r3, #0
   25606:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   2560a:	f7f1 ff9f 	bl	1754c <find_cf_cfg>
	if (cfg) {
   2560e:	b128      	cbz	r0, 2561c <cf_read+0x24>
   25610:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   25612:	2201      	movs	r2, #1
   25614:	3108      	adds	r1, #8
   25616:	a805      	add	r0, sp, #20
   25618:	f7fd fa09 	bl	22a2e <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2561c:	2301      	movs	r3, #1
   2561e:	9302      	str	r3, [sp, #8]
   25620:	ab05      	add	r3, sp, #20
   25622:	9301      	str	r3, [sp, #4]
   25624:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   25628:	9300      	str	r3, [sp, #0]
   2562a:	463b      	mov	r3, r7
   2562c:	4632      	mov	r2, r6
   2562e:	4629      	mov	r1, r5
   25630:	4620      	mov	r0, r4
   25632:	f7ff ff9d 	bl	25570 <bt_gatt_attr_read>
}
   25636:	b007      	add	sp, #28
   25638:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002563a <bt_gatt_attr_read_service>:
{
   2563a:	b570      	push	{r4, r5, r6, lr}
   2563c:	b086      	sub	sp, #24
   2563e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   25642:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   25644:	7826      	ldrb	r6, [r4, #0]
   25646:	b146      	cbz	r6, 2565a <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   25648:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2564a:	2610      	movs	r6, #16
   2564c:	9602      	str	r6, [sp, #8]
   2564e:	9401      	str	r4, [sp, #4]
   25650:	9500      	str	r5, [sp, #0]
   25652:	f7ff ff8d 	bl	25570 <bt_gatt_attr_read>
}
   25656:	b006      	add	sp, #24
   25658:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2565a:	8864      	ldrh	r4, [r4, #2]
   2565c:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   25660:	2402      	movs	r4, #2
   25662:	9402      	str	r4, [sp, #8]
   25664:	f10d 0416 	add.w	r4, sp, #22
   25668:	9401      	str	r4, [sp, #4]
   2566a:	9500      	str	r5, [sp, #0]
   2566c:	f7ff ff80 	bl	25570 <bt_gatt_attr_read>
   25670:	e7f1      	b.n	25656 <bt_gatt_attr_read_service+0x1c>

00025672 <bt_gatt_attr_read_ccc>:
{
   25672:	b5f0      	push	{r4, r5, r6, r7, lr}
   25674:	b087      	sub	sp, #28
   25676:	4605      	mov	r5, r0
   25678:	460c      	mov	r4, r1
   2567a:	4616      	mov	r6, r2
   2567c:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2567e:	68c9      	ldr	r1, [r1, #12]
   25680:	f7ff fc74 	bl	24f6c <find_ccc_cfg>
	if (cfg) {
   25684:	b190      	cbz	r0, 256ac <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   25686:	8903      	ldrh	r3, [r0, #8]
   25688:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2568c:	2302      	movs	r3, #2
   2568e:	9302      	str	r3, [sp, #8]
   25690:	f10d 0316 	add.w	r3, sp, #22
   25694:	9301      	str	r3, [sp, #4]
   25696:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2569a:	9300      	str	r3, [sp, #0]
   2569c:	463b      	mov	r3, r7
   2569e:	4632      	mov	r2, r6
   256a0:	4621      	mov	r1, r4
   256a2:	4628      	mov	r0, r5
   256a4:	f7ff ff64 	bl	25570 <bt_gatt_attr_read>
}
   256a8:	b007      	add	sp, #28
   256aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   256ac:	2300      	movs	r3, #0
   256ae:	f8ad 3016 	strh.w	r3, [sp, #22]
   256b2:	e7eb      	b.n	2568c <bt_gatt_attr_read_ccc+0x1a>

000256b4 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   256b4:	b1b8      	cbz	r0, 256e6 <bt_gatt_attr_value_handle+0x32>
{
   256b6:	b510      	push	{r4, lr}
   256b8:	b082      	sub	sp, #8
   256ba:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   256bc:	2300      	movs	r3, #0
   256be:	f88d 3004 	strb.w	r3, [sp, #4]
   256c2:	f642 0303 	movw	r3, #10243	; 0x2803
   256c6:	f8ad 3006 	strh.w	r3, [sp, #6]
   256ca:	a901      	add	r1, sp, #4
   256cc:	6800      	ldr	r0, [r0, #0]
   256ce:	f7fd fa23 	bl	22b18 <bt_uuid_cmp>
   256d2:	b950      	cbnz	r0, 256ea <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   256d4:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   256d6:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   256d8:	b940      	cbnz	r0, 256ec <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   256da:	4620      	mov	r0, r4
   256dc:	f7f2 f894 	bl	17808 <bt_gatt_attr_get_handle>
   256e0:	3001      	adds	r0, #1
   256e2:	b280      	uxth	r0, r0
   256e4:	e002      	b.n	256ec <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   256e6:	2000      	movs	r0, #0
}
   256e8:	4770      	bx	lr
	uint16_t handle = 0;
   256ea:	2000      	movs	r0, #0
}
   256ec:	b002      	add	sp, #8
   256ee:	bd10      	pop	{r4, pc}

000256f0 <bt_gatt_attr_read_chrc>:
{
   256f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   256f4:	b08a      	sub	sp, #40	; 0x28
   256f6:	4605      	mov	r5, r0
   256f8:	460c      	mov	r4, r1
   256fa:	4616      	mov	r6, r2
   256fc:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   256fe:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   25702:	f898 3006 	ldrb.w	r3, [r8, #6]
   25706:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2570a:	4608      	mov	r0, r1
   2570c:	f7ff ffd2 	bl	256b4 <bt_gatt_attr_value_handle>
   25710:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25714:	f8d8 1000 	ldr.w	r1, [r8]
   25718:	780b      	ldrb	r3, [r1, #0]
   2571a:	b993      	cbnz	r3, 25742 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2571c:	884b      	ldrh	r3, [r1, #2]
   2571e:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   25722:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   25724:	9302      	str	r3, [sp, #8]
   25726:	ab05      	add	r3, sp, #20
   25728:	9301      	str	r3, [sp, #4]
   2572a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2572e:	9300      	str	r3, [sp, #0]
   25730:	463b      	mov	r3, r7
   25732:	4632      	mov	r2, r6
   25734:	4621      	mov	r1, r4
   25736:	4628      	mov	r0, r5
   25738:	f7ff ff1a 	bl	25570 <bt_gatt_attr_read>
}
   2573c:	b00a      	add	sp, #40	; 0x28
   2573e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   25742:	2210      	movs	r2, #16
   25744:	3101      	adds	r1, #1
   25746:	f10d 0017 	add.w	r0, sp, #23
   2574a:	f7fd f970 	bl	22a2e <memcpy>
		value_len += 16U;
   2574e:	2313      	movs	r3, #19
   25750:	e7e8      	b.n	25724 <bt_gatt_attr_read_chrc+0x34>

00025752 <db_hash_process>:
{
   25752:	b508      	push	{r3, lr}
	db_hash_gen(true);
   25754:	2001      	movs	r0, #1
   25756:	f7f2 f8d1 	bl	178fc <db_hash_gen>
}
   2575a:	bd08      	pop	{r3, pc}

0002575c <bt_gatt_get_mtu>:
{
   2575c:	b508      	push	{r3, lr}
	return bt_att_get_mtu(conn);
   2575e:	f7ff f98b 	bl	24a78 <bt_att_get_mtu>
}
   25762:	bd08      	pop	{r3, pc}

00025764 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   25764:	f012 0f01 	tst.w	r2, #1
   25768:	d005      	beq.n	25776 <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2576a:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2576c:	f013 0f15 	tst.w	r3, #21
   25770:	d01a      	beq.n	257a8 <bt_gatt_check_perm+0x44>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25772:	684b      	ldr	r3, [r1, #4]
   25774:	b1d3      	cbz	r3, 257ac <bt_gatt_check_perm+0x48>
	if ((mask & BT_GATT_PERM_WRITE) &&
   25776:	f012 0f02 	tst.w	r2, #2
   2577a:	d005      	beq.n	25788 <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2577c:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   2577e:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   25782:	d015      	beq.n	257b0 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   25784:	688b      	ldr	r3, [r1, #8]
   25786:	b1ab      	cbz	r3, 257b4 <bt_gatt_check_perm+0x50>
{
   25788:	b510      	push	{r4, lr}
	mask &= attr->perm;
   2578a:	7c8c      	ldrb	r4, [r1, #18]
   2578c:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2578e:	f014 0f30 	tst.w	r4, #48	; 0x30
   25792:	d103      	bne.n	2579c <bt_gatt_check_perm+0x38>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   25794:	f014 000c 	ands.w	r0, r4, #12
   25798:	d10e      	bne.n	257b8 <bt_gatt_check_perm+0x54>
}
   2579a:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2579c:	f7fe f861 	bl	23862 <bt_conn_get_security>
   257a0:	2802      	cmp	r0, #2
   257a2:	d8f7      	bhi.n	25794 <bt_gatt_check_perm+0x30>
			return BT_ATT_ERR_AUTHENTICATION;
   257a4:	2005      	movs	r0, #5
   257a6:	e7f8      	b.n	2579a <bt_gatt_check_perm+0x36>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   257a8:	2002      	movs	r0, #2
   257aa:	4770      	bx	lr
   257ac:	2002      	movs	r0, #2
   257ae:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   257b0:	2003      	movs	r0, #3
   257b2:	4770      	bx	lr
   257b4:	2003      	movs	r0, #3
}
   257b6:	4770      	bx	lr
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   257b8:	200f      	movs	r0, #15
   257ba:	e7ee      	b.n	2579a <bt_gatt_check_perm+0x36>

000257bc <gatt_notify>:
{
   257bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   257c0:	4606      	mov	r6, r0
   257c2:	460f      	mov	r7, r1
   257c4:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   257c6:	2214      	movs	r2, #20
   257c8:	6861      	ldr	r1, [r4, #4]
   257ca:	f7ff ffcb 	bl	25764 <bt_gatt_check_perm>
   257ce:	bb08      	cbnz	r0, 25814 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   257d0:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   257d2:	3202      	adds	r2, #2
   257d4:	211b      	movs	r1, #27
   257d6:	4630      	mov	r0, r6
   257d8:	f7ff f818 	bl	2480c <bt_att_create_pdu>
	if (!buf) {
   257dc:	4680      	mov	r8, r0
   257de:	b1e0      	cbz	r0, 2581a <gatt_notify+0x5e>
	return net_buf_simple_add(&buf->b, len);
   257e0:	f100 0908 	add.w	r9, r0, #8
   257e4:	2102      	movs	r1, #2
   257e6:	4648      	mov	r0, r9
   257e8:	f000 faf4 	bl	25dd4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   257ec:	4605      	mov	r5, r0
   257ee:	f825 7b02 	strh.w	r7, [r5], #2
   257f2:	89a1      	ldrh	r1, [r4, #12]
   257f4:	4648      	mov	r0, r9
   257f6:	f000 faed 	bl	25dd4 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   257fa:	89a2      	ldrh	r2, [r4, #12]
   257fc:	68a1      	ldr	r1, [r4, #8]
   257fe:	4628      	mov	r0, r5
   25800:	f7fd f915 	bl	22a2e <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   25804:	6963      	ldr	r3, [r4, #20]
   25806:	6922      	ldr	r2, [r4, #16]
   25808:	4641      	mov	r1, r8
   2580a:	4630      	mov	r0, r6
   2580c:	f7ff fa1e 	bl	24c4c <bt_att_send>
}
   25810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EPERM;
   25814:	f04f 30ff 	mov.w	r0, #4294967295
   25818:	e7fa      	b.n	25810 <gatt_notify+0x54>
		return -ENOMEM;
   2581a:	f06f 000b 	mvn.w	r0, #11
   2581e:	e7f7      	b.n	25810 <gatt_notify+0x54>

00025820 <bt_gatt_cancel>:
{
   25820:	b508      	push	{r3, lr}
	bt_att_req_cancel(conn, params);
   25822:	f7ff fa4f 	bl	24cc4 <bt_att_req_cancel>
}
   25826:	bd08      	pop	{r3, pc}

00025828 <bt_gatt_unsubscribe>:
{
   25828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2582c:	7a83      	ldrb	r3, [r0, #10]
   2582e:	2b07      	cmp	r3, #7
   25830:	d174      	bne.n	2591c <bt_gatt_unsubscribe+0xf4>
   25832:	4607      	mov	r7, r0
   25834:	460d      	mov	r5, r1
	sub = gatt_sub_find(conn);
   25836:	f7f1 fed7 	bl	175e8 <gatt_sub_find>
	if (!sub) {
   2583a:	4680      	mov	r8, r0
   2583c:	2800      	cmp	r0, #0
   2583e:	d070      	beq.n	25922 <bt_gatt_unsubscribe+0xfa>
	return list->head;
   25840:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   25842:	b393      	cbz	r3, 258aa <bt_gatt_unsubscribe+0x82>
   25844:	3b14      	subs	r3, #20
   25846:	d035      	beq.n	258b4 <bt_gatt_unsubscribe+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25848:	f113 0414 	adds.w	r4, r3, #20
   2584c:	d02e      	beq.n	258ac <bt_gatt_unsubscribe+0x84>
	return node->next;
   2584e:	695c      	ldr	r4, [r3, #20]
   25850:	b364      	cbz	r4, 258ac <bt_gatt_unsubscribe+0x84>
   25852:	3c14      	subs	r4, #20
   25854:	e02a      	b.n	258ac <bt_gatt_unsubscribe+0x84>
			sys_slist_remove(&sub->list, prev, &tmp->node);
   25856:	f103 0214 	add.w	r2, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   2585a:	b18e      	cbz	r6, 25880 <bt_gatt_unsubscribe+0x58>
	return node->next;
   2585c:	6959      	ldr	r1, [r3, #20]
	parent->next = child;
   2585e:	6031      	str	r1, [r6, #0]
	return list->tail;
   25860:	f8d8 100c 	ldr.w	r1, [r8, #12]
Z_GENLIST_REMOVE(slist, snode)
   25864:	428a      	cmp	r2, r1
   25866:	d015      	beq.n	25894 <bt_gatt_unsubscribe+0x6c>
	parent->next = child;
   25868:	2200      	movs	r2, #0
   2586a:	615a      	str	r2, [r3, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2586c:	f3bf 8f5b 	dmb	ish
   25870:	692b      	ldr	r3, [r5, #16]
   25872:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(params->flags,
   25876:	f013 0f04 	tst.w	r3, #4
   2587a:	d10e      	bne.n	2589a <bt_gatt_unsubscribe+0x72>
			found = true;
   2587c:	2101      	movs	r1, #1
			continue;
   2587e:	e027      	b.n	258d0 <bt_gatt_unsubscribe+0xa8>
	return node->next;
   25880:	6959      	ldr	r1, [r3, #20]
	list->head = node;
   25882:	f8c8 1008 	str.w	r1, [r8, #8]
	return list->tail;
   25886:	f8d8 000c 	ldr.w	r0, [r8, #12]
Z_GENLIST_REMOVE(slist, snode)
   2588a:	4282      	cmp	r2, r0
   2588c:	d1ec      	bne.n	25868 <bt_gatt_unsubscribe+0x40>
	list->tail = node;
   2588e:	f8c8 100c 	str.w	r1, [r8, #12]
}
   25892:	e7e9      	b.n	25868 <bt_gatt_unsubscribe+0x40>
	list->tail = node;
   25894:	f8c8 600c 	str.w	r6, [r8, #12]
}
   25898:	e7e6      	b.n	25868 <bt_gatt_unsubscribe+0x40>
				bt_gatt_cancel(conn, params);
   2589a:	4629      	mov	r1, r5
   2589c:	4638      	mov	r0, r7
   2589e:	f7ff ffbf 	bl	25820 <bt_gatt_cancel>
   258a2:	e7eb      	b.n	2587c <bt_gatt_unsubscribe+0x54>
			has_subscription = true;
   258a4:	f04f 0901 	mov.w	r9, #1
   258a8:	e012      	b.n	258d0 <bt_gatt_unsubscribe+0xa8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   258aa:	461c      	mov	r4, r3
   258ac:	2600      	movs	r6, #0
   258ae:	4631      	mov	r1, r6
   258b0:	46b1      	mov	r9, r6
   258b2:	e004      	b.n	258be <bt_gatt_unsubscribe+0x96>
   258b4:	461c      	mov	r4, r3
   258b6:	e7f9      	b.n	258ac <bt_gatt_unsubscribe+0x84>
   258b8:	4622      	mov	r2, r4
   258ba:	4623      	mov	r3, r4
   258bc:	4614      	mov	r4, r2
   258be:	b18b      	cbz	r3, 258e4 <bt_gatt_unsubscribe+0xbc>
		if (params == tmp) {
   258c0:	42ab      	cmp	r3, r5
   258c2:	d0c8      	beq.n	25856 <bt_gatt_unsubscribe+0x2e>
			prev = &tmp->node;
   258c4:	f103 0614 	add.w	r6, r3, #20
		if (tmp->value_handle == params->value_handle) {
   258c8:	891a      	ldrh	r2, [r3, #8]
   258ca:	892b      	ldrh	r3, [r5, #8]
   258cc:	429a      	cmp	r2, r3
   258ce:	d0e9      	beq.n	258a4 <bt_gatt_unsubscribe+0x7c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   258d0:	2c00      	cmp	r4, #0
   258d2:	d0f1      	beq.n	258b8 <bt_gatt_unsubscribe+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   258d4:	f114 0214 	adds.w	r2, r4, #20
   258d8:	d0ef      	beq.n	258ba <bt_gatt_unsubscribe+0x92>
	return node->next;
   258da:	6962      	ldr	r2, [r4, #20]
   258dc:	2a00      	cmp	r2, #0
   258de:	d0ec      	beq.n	258ba <bt_gatt_unsubscribe+0x92>
   258e0:	3a14      	subs	r2, #20
   258e2:	e7ea      	b.n	258ba <bt_gatt_unsubscribe+0x92>
	if (!found) {
   258e4:	b301      	cbz	r1, 25928 <bt_gatt_unsubscribe+0x100>
	if (gatt_sub_is_empty(sub)) {
   258e6:	4640      	mov	r0, r8
   258e8:	f7ff faaf 	bl	24e4a <gatt_sub_is_empty>
   258ec:	b958      	cbnz	r0, 25906 <bt_gatt_unsubscribe+0xde>
	if (has_subscription) {
   258ee:	f1b9 0f00 	cmp.w	r9, #0
   258f2:	d00c      	beq.n	2590e <bt_gatt_unsubscribe+0xe6>
		params->notify(conn, params, NULL, 0);
   258f4:	682c      	ldr	r4, [r5, #0]
   258f6:	2300      	movs	r3, #0
   258f8:	461a      	mov	r2, r3
   258fa:	4629      	mov	r1, r5
   258fc:	4638      	mov	r0, r7
   258fe:	47a0      	blx	r4
		return 0;
   25900:	2000      	movs	r0, #0
}
   25902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		gatt_sub_free(sub);
   25906:	4640      	mov	r0, r8
   25908:	f7ff fc31 	bl	2516e <gatt_sub_free>
   2590c:	e7ef      	b.n	258ee <bt_gatt_unsubscribe+0xc6>
	params->value = 0x0000;
   2590e:	2300      	movs	r3, #0
   25910:	81ab      	strh	r3, [r5, #12]
	return gatt_write_ccc(conn, params);
   25912:	4629      	mov	r1, r5
   25914:	4638      	mov	r0, r7
   25916:	f7f1 ff31 	bl	1777c <gatt_write_ccc>
   2591a:	e7f2      	b.n	25902 <bt_gatt_unsubscribe+0xda>
		return -ENOTCONN;
   2591c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25920:	e7ef      	b.n	25902 <bt_gatt_unsubscribe+0xda>
		return -EINVAL;
   25922:	f06f 0015 	mvn.w	r0, #21
   25926:	e7ec      	b.n	25902 <bt_gatt_unsubscribe+0xda>
		return -EINVAL;
   25928:	f06f 0015 	mvn.w	r0, #21
   2592c:	e7e9      	b.n	25902 <bt_gatt_unsubscribe+0xda>

0002592e <bt_gatt_notification>:
{
   2592e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25932:	4680      	mov	r8, r0
   25934:	460f      	mov	r7, r1
   25936:	4691      	mov	r9, r2
   25938:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   2593a:	f7f1 fe55 	bl	175e8 <gatt_sub_find>
	if (!sub) {
   2593e:	b350      	cbz	r0, 25996 <bt_gatt_notification+0x68>
	return list->head;
   25940:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   25942:	b145      	cbz	r5, 25956 <bt_gatt_notification+0x28>
   25944:	3d14      	subs	r5, #20
   25946:	d008      	beq.n	2595a <bt_gatt_notification+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25948:	f115 0414 	adds.w	r4, r5, #20
   2594c:	d014      	beq.n	25978 <bt_gatt_notification+0x4a>
	return node->next;
   2594e:	696c      	ldr	r4, [r5, #20]
   25950:	b194      	cbz	r4, 25978 <bt_gatt_notification+0x4a>
   25952:	3c14      	subs	r4, #20
   25954:	e010      	b.n	25978 <bt_gatt_notification+0x4a>
   25956:	462c      	mov	r4, r5
   25958:	e00e      	b.n	25978 <bt_gatt_notification+0x4a>
   2595a:	462c      	mov	r4, r5
   2595c:	e00c      	b.n	25978 <bt_gatt_notification+0x4a>
			bt_gatt_unsubscribe(conn, params);
   2595e:	4629      	mov	r1, r5
   25960:	4640      	mov	r0, r8
   25962:	f7ff ff61 	bl	25828 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   25966:	b1a4      	cbz	r4, 25992 <bt_gatt_notification+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25968:	f114 0614 	adds.w	r6, r4, #20
   2596c:	d002      	beq.n	25974 <bt_gatt_notification+0x46>
	return node->next;
   2596e:	6966      	ldr	r6, [r4, #20]
   25970:	b106      	cbz	r6, 25974 <bt_gatt_notification+0x46>
   25972:	3e14      	subs	r6, #20
   25974:	4625      	mov	r5, r4
   25976:	4634      	mov	r4, r6
   25978:	b16d      	cbz	r5, 25996 <bt_gatt_notification+0x68>
		if (handle != params->value_handle) {
   2597a:	892b      	ldrh	r3, [r5, #8]
   2597c:	429f      	cmp	r7, r3
   2597e:	d1f2      	bne.n	25966 <bt_gatt_notification+0x38>
		if (params->notify(conn, params, data, length) ==
   25980:	682e      	ldr	r6, [r5, #0]
   25982:	4653      	mov	r3, sl
   25984:	464a      	mov	r2, r9
   25986:	4629      	mov	r1, r5
   25988:	4640      	mov	r0, r8
   2598a:	47b0      	blx	r6
   2598c:	2800      	cmp	r0, #0
   2598e:	d1ea      	bne.n	25966 <bt_gatt_notification+0x38>
   25990:	e7e5      	b.n	2595e <bt_gatt_notification+0x30>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   25992:	4626      	mov	r6, r4
   25994:	e7ee      	b.n	25974 <bt_gatt_notification+0x46>
}
   25996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002599a <bt_gatt_mult_notification>:
{
   2599a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2599e:	b085      	sub	sp, #20
   259a0:	4682      	mov	sl, r0
   259a2:	460c      	mov	r4, r1
   259a4:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   259a6:	f7f1 fe1f 	bl	175e8 <gatt_sub_find>
	if (!sub) {
   259aa:	2800      	cmp	r0, #0
   259ac:	d04a      	beq.n	25a44 <bt_gatt_mult_notification+0xaa>
   259ae:	4683      	mov	fp, r0
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   259b0:	462a      	mov	r2, r5
   259b2:	4621      	mov	r1, r4
   259b4:	a801      	add	r0, sp, #4
   259b6:	f000 f9ac 	bl	25d12 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   259ba:	e023      	b.n	25a04 <bt_gatt_mult_notification+0x6a>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   259bc:	462c      	mov	r4, r5
   259be:	e00e      	b.n	259de <bt_gatt_mult_notification+0x44>
   259c0:	462c      	mov	r4, r5
   259c2:	e00c      	b.n	259de <bt_gatt_mult_notification+0x44>
				bt_gatt_unsubscribe(conn, params);
   259c4:	4629      	mov	r1, r5
   259c6:	4650      	mov	r0, sl
   259c8:	f7ff ff2e 	bl	25828 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   259cc:	b1a4      	cbz	r4, 259f8 <bt_gatt_mult_notification+0x5e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   259ce:	f114 0314 	adds.w	r3, r4, #20
   259d2:	d002      	beq.n	259da <bt_gatt_mult_notification+0x40>
	return node->next;
   259d4:	6963      	ldr	r3, [r4, #20]
   259d6:	b103      	cbz	r3, 259da <bt_gatt_mult_notification+0x40>
   259d8:	3b14      	subs	r3, #20
   259da:	4625      	mov	r5, r4
   259dc:	461c      	mov	r4, r3
   259de:	b16d      	cbz	r5, 259fc <bt_gatt_mult_notification+0x62>
			if (handle != params->value_handle) {
   259e0:	892b      	ldrh	r3, [r5, #8]
   259e2:	4598      	cmp	r8, r3
   259e4:	d1f2      	bne.n	259cc <bt_gatt_mult_notification+0x32>
			if (params->notify(conn, params, nfy->value, len) ==
   259e6:	682f      	ldr	r7, [r5, #0]
   259e8:	464b      	mov	r3, r9
   259ea:	1d32      	adds	r2, r6, #4
   259ec:	4629      	mov	r1, r5
   259ee:	4650      	mov	r0, sl
   259f0:	47b8      	blx	r7
   259f2:	2800      	cmp	r0, #0
   259f4:	d1ea      	bne.n	259cc <bt_gatt_mult_notification+0x32>
   259f6:	e7e5      	b.n	259c4 <bt_gatt_mult_notification+0x2a>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   259f8:	4623      	mov	r3, r4
   259fa:	e7ee      	b.n	259da <bt_gatt_mult_notification+0x40>
		net_buf_simple_pull_mem(&buf, len);
   259fc:	4649      	mov	r1, r9
   259fe:	a801      	add	r0, sp, #4
   25a00:	f000 fa12 	bl	25e28 <net_buf_simple_pull_mem>
	while (buf.len > sizeof(*nfy)) {
   25a04:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   25a08:	2b04      	cmp	r3, #4
   25a0a:	d91b      	bls.n	25a44 <bt_gatt_mult_notification+0xaa>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   25a0c:	2104      	movs	r1, #4
   25a0e:	eb0d 0001 	add.w	r0, sp, r1
   25a12:	f000 fa09 	bl	25e28 <net_buf_simple_pull_mem>
   25a16:	4606      	mov	r6, r0
		handle = sys_cpu_to_le16(nfy->handle);
   25a18:	f8b0 8000 	ldrh.w	r8, [r0]
		len = sys_cpu_to_le16(nfy->len);
   25a1c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
		if (len > buf.len) {
   25a20:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   25a24:	454b      	cmp	r3, r9
   25a26:	d30d      	bcc.n	25a44 <bt_gatt_mult_notification+0xaa>
	return list->head;
   25a28:	f8db 5008 	ldr.w	r5, [fp, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   25a2c:	2d00      	cmp	r5, #0
   25a2e:	d0c5      	beq.n	259bc <bt_gatt_mult_notification+0x22>
   25a30:	3d14      	subs	r5, #20
   25a32:	d0c5      	beq.n	259c0 <bt_gatt_mult_notification+0x26>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25a34:	f115 0414 	adds.w	r4, r5, #20
   25a38:	d0d1      	beq.n	259de <bt_gatt_mult_notification+0x44>
	return node->next;
   25a3a:	696c      	ldr	r4, [r5, #20]
   25a3c:	2c00      	cmp	r4, #0
   25a3e:	d0ce      	beq.n	259de <bt_gatt_mult_notification+0x44>
   25a40:	3c14      	subs	r4, #20
   25a42:	e7cc      	b.n	259de <bt_gatt_mult_notification+0x44>
}
   25a44:	b005      	add	sp, #20
   25a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025a4a <bt_gatt_change_aware>:
{
   25a4a:	b510      	push	{r4, lr}
   25a4c:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   25a4e:	f7f1 fd7d 	bl	1754c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25a52:	2800      	cmp	r0, #0
   25a54:	d042      	beq.n	25adc <bt_gatt_change_aware+0x92>
   25a56:	7a02      	ldrb	r2, [r0, #8]
   25a58:	f012 0f01 	tst.w	r2, #1
   25a5c:	d101      	bne.n	25a62 <bt_gatt_change_aware+0x18>
		return true;
   25a5e:	2001      	movs	r0, #1
}
   25a60:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   25a62:	f100 010c 	add.w	r1, r0, #12
   25a66:	f3bf 8f5b 	dmb	ish
   25a6a:	68c2      	ldr	r2, [r0, #12]
   25a6c:	f3bf 8f5b 	dmb	ish
   25a70:	f012 0f01 	tst.w	r2, #1
   25a74:	d134      	bne.n	25ae0 <bt_gatt_change_aware+0x96>
	if (!req) {
   25a76:	b90c      	cbnz	r4, 25a7c <bt_gatt_change_aware+0x32>
		return false;
   25a78:	4620      	mov	r0, r4
   25a7a:	e7f1      	b.n	25a60 <bt_gatt_change_aware+0x16>
   25a7c:	f3bf 8f5b 	dmb	ish
   25a80:	68c3      	ldr	r3, [r0, #12]
   25a82:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   25a86:	f013 0f02 	tst.w	r3, #2
   25a8a:	d10d      	bne.n	25aa8 <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25a8c:	f3bf 8f5b 	dmb	ish
   25a90:	e851 3f00 	ldrex	r3, [r1]
   25a94:	f043 0302 	orr.w	r3, r3, #2
   25a98:	e841 3200 	strex	r2, r3, [r1]
   25a9c:	2a00      	cmp	r2, #0
   25a9e:	d1f7      	bne.n	25a90 <bt_gatt_change_aware+0x46>
   25aa0:	f3bf 8f5b 	dmb	ish
	return false;
   25aa4:	2000      	movs	r0, #0
   25aa6:	e7db      	b.n	25a60 <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25aa8:	f3bf 8f5b 	dmb	ish
   25aac:	e851 3f00 	ldrex	r3, [r1]
   25ab0:	f023 0302 	bic.w	r3, r3, #2
   25ab4:	e841 3200 	strex	r2, r3, [r1]
   25ab8:	2a00      	cmp	r2, #0
   25aba:	d1f7      	bne.n	25aac <bt_gatt_change_aware+0x62>
   25abc:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25ac0:	f3bf 8f5b 	dmb	ish
   25ac4:	e851 3f00 	ldrex	r3, [r1]
   25ac8:	f043 0301 	orr.w	r3, r3, #1
   25acc:	e841 3200 	strex	r2, r3, [r1]
   25ad0:	2a00      	cmp	r2, #0
   25ad2:	d1f7      	bne.n	25ac4 <bt_gatt_change_aware+0x7a>
   25ad4:	f3bf 8f5b 	dmb	ish
		return true;
   25ad8:	4620      	mov	r0, r4
   25ada:	e7c1      	b.n	25a60 <bt_gatt_change_aware+0x16>
		return true;
   25adc:	2001      	movs	r0, #1
   25ade:	e7bf      	b.n	25a60 <bt_gatt_change_aware+0x16>
		return true;
   25ae0:	2001      	movs	r0, #1
   25ae2:	e7bd      	b.n	25a60 <bt_gatt_change_aware+0x16>

00025ae4 <bt_smp_recv>:
{
   25ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ae6:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   25ae8:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   25aea:	f04f 32ff 	mov.w	r2, #4294967295
   25aee:	f04f 33ff 	mov.w	r3, #4294967295
   25af2:	2100      	movs	r1, #0
   25af4:	4608      	mov	r0, r1
   25af6:	f7fd fffc 	bl	23af2 <bt_l2cap_create_pdu_timeout>
   25afa:	4604      	mov	r4, r0
   25afc:	f100 0608 	add.w	r6, r0, #8
   25b00:	2101      	movs	r1, #1
   25b02:	4630      	mov	r0, r6
   25b04:	f000 f966 	bl	25dd4 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   25b08:	2505      	movs	r5, #5
   25b0a:	7005      	strb	r5, [r0, #0]
   25b0c:	2101      	movs	r1, #1
   25b0e:	4630      	mov	r0, r6
   25b10:	f000 f960 	bl	25dd4 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   25b14:	7005      	strb	r5, [r0, #0]
   25b16:	2300      	movs	r3, #0
   25b18:	9300      	str	r3, [sp, #0]
   25b1a:	4622      	mov	r2, r4
   25b1c:	2106      	movs	r1, #6
   25b1e:	4638      	mov	r0, r7
   25b20:	f7fe f802 	bl	23b28 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   25b24:	b910      	cbnz	r0, 25b2c <bt_smp_recv+0x48>
}
   25b26:	2000      	movs	r0, #0
   25b28:	b003      	add	sp, #12
   25b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   25b2c:	4620      	mov	r0, r4
   25b2e:	f000 f907 	bl	25d40 <net_buf_unref>
   25b32:	e7f8      	b.n	25b26 <bt_smp_recv+0x42>

00025b34 <bt_smp_sign>:
}
   25b34:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25b38:	4770      	bx	lr

00025b3a <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   25b3a:	2000      	movs	r0, #0
   25b3c:	4770      	bx	lr

00025b3e <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   25b3e:	4770      	bx	lr

00025b40 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   25b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b44:	4604      	mov	r4, r0
   25b46:	460d      	mov	r5, r1
   25b48:	4617      	mov	r7, r2
   25b4a:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   25b4c:	7980      	ldrb	r0, [r0, #6]
   25b4e:	f7f2 f9f9 	bl	17f44 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   25b52:	6a03      	ldr	r3, [r0, #32]
   25b54:	681b      	ldr	r3, [r3, #0]
   25b56:	f8d3 8000 	ldr.w	r8, [r3]
   25b5a:	463a      	mov	r2, r7
   25b5c:	4633      	mov	r3, r6
   25b5e:	4629      	mov	r1, r5
   25b60:	4620      	mov	r0, r4
   25b62:	47c0      	blx	r8
}
   25b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025b68 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   25b68:	b538      	push	{r3, r4, r5, lr}
   25b6a:	4604      	mov	r4, r0
   25b6c:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   25b6e:	7980      	ldrb	r0, [r0, #6]
   25b70:	f7f2 f9e8 	bl	17f44 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   25b74:	7963      	ldrb	r3, [r4, #5]
   25b76:	f013 0f02 	tst.w	r3, #2
   25b7a:	d105      	bne.n	25b88 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   25b7c:	6a03      	ldr	r3, [r0, #32]
   25b7e:	681b      	ldr	r3, [r3, #0]
   25b80:	689b      	ldr	r3, [r3, #8]
   25b82:	4629      	mov	r1, r5
   25b84:	4620      	mov	r0, r4
   25b86:	4798      	blx	r3
}
   25b88:	bd38      	pop	{r3, r4, r5, pc}

00025b8a <fixed_data_alloc>:
{
   25b8a:	b570      	push	{r4, r5, r6, lr}
   25b8c:	4604      	mov	r4, r0
   25b8e:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   25b90:	7980      	ldrb	r0, [r0, #6]
   25b92:	f7f2 f9d7 	bl	17f44 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   25b96:	6a03      	ldr	r3, [r0, #32]
   25b98:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   25b9a:	682a      	ldr	r2, [r5, #0]
   25b9c:	6819      	ldr	r1, [r3, #0]
   25b9e:	428a      	cmp	r2, r1
   25ba0:	bf28      	it	cs
   25ba2:	460a      	movcs	r2, r1
   25ba4:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   25ba6:	685d      	ldr	r5, [r3, #4]
   25ba8:	681e      	ldr	r6, [r3, #0]
   25baa:	4620      	mov	r0, r4
   25bac:	f7f2 f9d2 	bl	17f54 <net_buf_id>
}
   25bb0:	fb00 5006 	mla	r0, r0, r6, r5
   25bb4:	bd70      	pop	{r4, r5, r6, pc}

00025bb6 <net_buf_reset>:
	buf->len  = 0U;
   25bb6:	2300      	movs	r3, #0
   25bb8:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   25bba:	6903      	ldr	r3, [r0, #16]
   25bbc:	6083      	str	r3, [r0, #8]
}
   25bbe:	4770      	bx	lr

00025bc0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   25bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25bc4:	b083      	sub	sp, #12
   25bc6:	4605      	mov	r5, r0
   25bc8:	9101      	str	r1, [sp, #4]
   25bca:	4616      	mov	r6, r2
   25bcc:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   25bce:	4610      	mov	r0, r2
   25bd0:	4619      	mov	r1, r3
   25bd2:	f002 f8d3 	bl	27d7c <sys_clock_timeout_end_calc>
   25bd6:	4682      	mov	sl, r0
   25bd8:	9100      	str	r1, [sp, #0]
   25bda:	f04f 0340 	mov.w	r3, #64	; 0x40
   25bde:	f3ef 8b11 	mrs	fp, BASEPRI
   25be2:	f383 8812 	msr	BASEPRI_MAX, r3
   25be6:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   25bea:	8b6b      	ldrh	r3, [r5, #26]
   25bec:	2b00      	cmp	r3, #0
   25bee:	d03f      	beq.n	25c70 <net_buf_alloc_len+0xb0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   25bf0:	8b2a      	ldrh	r2, [r5, #24]
   25bf2:	4293      	cmp	r3, r2
   25bf4:	d32f      	bcc.n	25c56 <net_buf_alloc_len+0x96>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   25bf6:	8b6a      	ldrh	r2, [r5, #26]
   25bf8:	1e53      	subs	r3, r2, #1
   25bfa:	836b      	strh	r3, [r5, #26]
	__asm__ volatile(
   25bfc:	f38b 8811 	msr	BASEPRI, fp
   25c00:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   25c04:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   25c06:	8b2b      	ldrh	r3, [r5, #24]
   25c08:	1a9b      	subs	r3, r3, r2
   25c0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25c0e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	buf->pool_id = pool_id(pool);
   25c12:	4628      	mov	r0, r5
   25c14:	f7f2 f98a 	bl	17f2c <pool_id>
   25c18:	71a0      	strb	r0, [r4, #6]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   25c1a:	9b01      	ldr	r3, [sp, #4]
   25c1c:	2b00      	cmp	r3, #0
   25c1e:	d046      	beq.n	25cae <net_buf_alloc_len+0xee>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   25c20:	ea56 0307 	orrs.w	r3, r6, r7
   25c24:	d005      	beq.n	25c32 <net_buf_alloc_len+0x72>
   25c26:	f1b7 3fff 	cmp.w	r7, #4294967295
   25c2a:	bf08      	it	eq
   25c2c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   25c30:	d12b      	bne.n	25c8a <net_buf_alloc_len+0xca>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   25c32:	4632      	mov	r2, r6
   25c34:	463b      	mov	r3, r7
   25c36:	a901      	add	r1, sp, #4
   25c38:	4620      	mov	r0, r4
   25c3a:	f7ff ff81 	bl	25b40 <data_alloc>
   25c3e:	4605      	mov	r5, r0
   25c40:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   25c42:	2800      	cmp	r0, #0
   25c44:	d135      	bne.n	25cb2 <net_buf_alloc_len+0xf2>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   25c46:	79a0      	ldrb	r0, [r4, #6]
   25c48:	f7f2 f97c 	bl	17f44 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   25c4c:	4621      	mov	r1, r4
   25c4e:	f001 fd31 	bl	276b4 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   25c52:	462c      	mov	r4, r5
}
   25c54:	e037      	b.n	25cc6 <net_buf_alloc_len+0x106>
	return z_impl_k_queue_get(queue, timeout);
   25c56:	2200      	movs	r2, #0
   25c58:	2300      	movs	r3, #0
   25c5a:	4628      	mov	r0, r5
   25c5c:	f7f7 fad6 	bl	1d20c <z_impl_k_queue_get>
			if (buf) {
   25c60:	4604      	mov	r4, r0
   25c62:	2800      	cmp	r0, #0
   25c64:	d0c7      	beq.n	25bf6 <net_buf_alloc_len+0x36>
   25c66:	f38b 8811 	msr	BASEPRI, fp
   25c6a:	f3bf 8f6f 	isb	sy
				goto success;
   25c6e:	e7d4      	b.n	25c1a <net_buf_alloc_len+0x5a>
   25c70:	f38b 8811 	msr	BASEPRI, fp
   25c74:	f3bf 8f6f 	isb	sy
   25c78:	4632      	mov	r2, r6
   25c7a:	463b      	mov	r3, r7
   25c7c:	4628      	mov	r0, r5
   25c7e:	f7f7 fac5 	bl	1d20c <z_impl_k_queue_get>
	if (!buf) {
   25c82:	4604      	mov	r4, r0
   25c84:	2800      	cmp	r0, #0
   25c86:	d1c8      	bne.n	25c1a <net_buf_alloc_len+0x5a>
   25c88:	e01d      	b.n	25cc6 <net_buf_alloc_len+0x106>
			int64_t remaining = end - sys_clock_tick_get();
   25c8a:	f7f8 fa97 	bl	1e1bc <sys_clock_tick_get>
   25c8e:	ebba 0800 	subs.w	r8, sl, r0
   25c92:	9b00      	ldr	r3, [sp, #0]
   25c94:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
   25c98:	f1b8 0f01 	cmp.w	r8, #1
   25c9c:	f179 0300 	sbcs.w	r3, r9, #0
   25ca0:	db02      	blt.n	25ca8 <net_buf_alloc_len+0xe8>
				timeout = Z_TIMEOUT_TICKS(remaining);
   25ca2:	4646      	mov	r6, r8
   25ca4:	464f      	mov	r7, r9
   25ca6:	e7c4      	b.n	25c32 <net_buf_alloc_len+0x72>
				timeout = K_NO_WAIT;
   25ca8:	2600      	movs	r6, #0
   25caa:	2700      	movs	r7, #0
   25cac:	e7c1      	b.n	25c32 <net_buf_alloc_len+0x72>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   25cae:	2300      	movs	r3, #0
   25cb0:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   25cb2:	2301      	movs	r3, #1
   25cb4:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   25cb6:	2300      	movs	r3, #0
   25cb8:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   25cba:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   25cbc:	9b01      	ldr	r3, [sp, #4]
   25cbe:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   25cc0:	4620      	mov	r0, r4
   25cc2:	f7ff ff78 	bl	25bb6 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   25cc6:	4620      	mov	r0, r4
   25cc8:	b003      	add	sp, #12
   25cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025cce <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   25cce:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   25cd0:	6a01      	ldr	r1, [r0, #32]
   25cd2:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   25cd4:	6809      	ldr	r1, [r1, #0]
   25cd6:	f7ff ff73 	bl	25bc0 <net_buf_alloc_len>
}
   25cda:	bd08      	pop	{r3, pc}

00025cdc <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   25cdc:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   25cde:	4605      	mov	r5, r0
   25ce0:	f7f7 fa94 	bl	1d20c <z_impl_k_queue_get>
	if (!buf) {
   25ce4:	4606      	mov	r6, r0
   25ce6:	b190      	cbz	r0, 25d0e <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   25ce8:	4604      	mov	r4, r0
   25cea:	e00a      	b.n	25d02 <net_buf_get+0x26>
   25cec:	2200      	movs	r2, #0
   25cee:	2300      	movs	r3, #0
   25cf0:	4628      	mov	r0, r5
   25cf2:	f7f7 fa8b 	bl	1d20c <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   25cf6:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   25cf8:	7963      	ldrb	r3, [r4, #5]
   25cfa:	f023 0301 	bic.w	r3, r3, #1
   25cfe:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   25d00:	4604      	mov	r4, r0
   25d02:	7963      	ldrb	r3, [r4, #5]
   25d04:	f013 0f01 	tst.w	r3, #1
   25d08:	d1f0      	bne.n	25cec <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   25d0a:	2300      	movs	r3, #0
   25d0c:	6023      	str	r3, [r4, #0]

	return buf;
}
   25d0e:	4630      	mov	r0, r6
   25d10:	bd70      	pop	{r4, r5, r6, pc}

00025d12 <net_buf_simple_init_with_data>:

void net_buf_simple_init_with_data(struct net_buf_simple *buf,
				   void *data, size_t size)
{
	buf->__buf = data;
   25d12:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   25d14:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   25d16:	b292      	uxth	r2, r2
   25d18:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   25d1a:	8082      	strh	r2, [r0, #4]
}
   25d1c:	4770      	bx	lr

00025d1e <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   25d1e:	6883      	ldr	r3, [r0, #8]
   25d20:	440b      	add	r3, r1
   25d22:	6003      	str	r3, [r0, #0]
}
   25d24:	4770      	bx	lr

00025d26 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   25d26:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   25d28:	460a      	mov	r2, r1
   25d2a:	6814      	ldr	r4, [r2, #0]
   25d2c:	b12c      	cbz	r4, 25d3a <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
   25d2e:	7953      	ldrb	r3, [r2, #5]
   25d30:	f043 0301 	orr.w	r3, r3, #1
   25d34:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   25d36:	4622      	mov	r2, r4
   25d38:	e7f7      	b.n	25d2a <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
   25d3a:	f001 fcc6 	bl	276ca <k_queue_append_list>
}
   25d3e:	bd10      	pop	{r4, pc}

00025d40 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   25d40:	b538      	push	{r3, r4, r5, lr}
   25d42:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   25d44:	e00f      	b.n	25d66 <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   25d46:	4620      	mov	r0, r4
   25d48:	f7ff ff0e 	bl	25b68 <data_unref>
			buf->__buf = NULL;
   25d4c:	2300      	movs	r3, #0
   25d4e:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   25d50:	2300      	movs	r3, #0
   25d52:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   25d54:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   25d56:	79a0      	ldrb	r0, [r4, #6]
   25d58:	f7f2 f8f4 	bl	17f44 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   25d5c:	69c3      	ldr	r3, [r0, #28]
   25d5e:	b16b      	cbz	r3, 25d7c <net_buf_unref+0x3c>
			pool->destroy(buf);
   25d60:	4620      	mov	r0, r4
   25d62:	4798      	blx	r3
{
   25d64:	462c      	mov	r4, r5
	while (buf) {
   25d66:	b184      	cbz	r4, 25d8a <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   25d68:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   25d6a:	7923      	ldrb	r3, [r4, #4]
   25d6c:	3b01      	subs	r3, #1
   25d6e:	b2db      	uxtb	r3, r3
   25d70:	7123      	strb	r3, [r4, #4]
   25d72:	b953      	cbnz	r3, 25d8a <net_buf_unref+0x4a>
		if (buf->__buf) {
   25d74:	6921      	ldr	r1, [r4, #16]
   25d76:	2900      	cmp	r1, #0
   25d78:	d1e5      	bne.n	25d46 <net_buf_unref+0x6>
   25d7a:	e7e9      	b.n	25d50 <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   25d7c:	79a0      	ldrb	r0, [r4, #6]
   25d7e:	f7f2 f8e1 	bl	17f44 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   25d82:	4621      	mov	r1, r4
   25d84:	f001 fc96 	bl	276b4 <k_queue_prepend>
}
   25d88:	e7ec      	b.n	25d64 <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   25d8a:	bd38      	pop	{r3, r4, r5, pc}

00025d8c <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   25d8c:	7902      	ldrb	r2, [r0, #4]
   25d8e:	3201      	adds	r2, #1
   25d90:	7102      	strb	r2, [r0, #4]
	return buf;
}
   25d92:	4770      	bx	lr

00025d94 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   25d94:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   25d96:	4618      	mov	r0, r3
   25d98:	681b      	ldr	r3, [r3, #0]
   25d9a:	2b00      	cmp	r3, #0
   25d9c:	d1fb      	bne.n	25d96 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   25d9e:	4770      	bx	lr

00025da0 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   25da0:	b570      	push	{r4, r5, r6, lr}
   25da2:	4604      	mov	r4, r0
   25da4:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   25da6:	6806      	ldr	r6, [r0, #0]
   25da8:	b11e      	cbz	r6, 25db2 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   25daa:	4608      	mov	r0, r1
   25dac:	f7ff fff2 	bl	25d94 <net_buf_frag_last>
   25db0:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   25db2:	6025      	str	r5, [r4, #0]
}
   25db4:	bd70      	pop	{r4, r5, r6, pc}

00025db6 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   25db6:	b538      	push	{r3, r4, r5, lr}
   25db8:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   25dba:	b138      	cbz	r0, 25dcc <net_buf_frag_add+0x16>
   25dbc:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   25dbe:	f7ff ffe9 	bl	25d94 <net_buf_frag_last>
   25dc2:	4629      	mov	r1, r5
   25dc4:	f7ff ffec 	bl	25da0 <net_buf_frag_insert>

	return head;
   25dc8:	4620      	mov	r0, r4
}
   25dca:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   25dcc:	4608      	mov	r0, r1
   25dce:	f7ff ffdd 	bl	25d8c <net_buf_ref>
   25dd2:	e7fa      	b.n	25dca <net_buf_frag_add+0x14>

00025dd4 <net_buf_simple_add>:
	return buf->data + buf->len;
   25dd4:	6802      	ldr	r2, [r0, #0]
   25dd6:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   25dd8:	4419      	add	r1, r3
   25dda:	8081      	strh	r1, [r0, #4]
	return tail;
}
   25ddc:	18d0      	adds	r0, r2, r3
   25dde:	4770      	bx	lr

00025de0 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   25de0:	b538      	push	{r3, r4, r5, lr}
   25de2:	460d      	mov	r5, r1
   25de4:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   25de6:	4611      	mov	r1, r2
   25de8:	f7ff fff4 	bl	25dd4 <net_buf_simple_add>
   25dec:	4622      	mov	r2, r4
   25dee:	4629      	mov	r1, r5
   25df0:	f7fc fe1d 	bl	22a2e <memcpy>
}
   25df4:	bd38      	pop	{r3, r4, r5, pc}

00025df6 <net_buf_simple_add_le16>:

	return u8;
}

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   25df6:	b510      	push	{r4, lr}
   25df8:	460c      	mov	r4, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   25dfa:	2102      	movs	r1, #2
   25dfc:	f7ff ffea 	bl	25dd4 <net_buf_simple_add>
	dst[0] = val;
   25e00:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   25e02:	0a24      	lsrs	r4, r4, #8
   25e04:	7044      	strb	r4, [r0, #1]
}
   25e06:	bd10      	pop	{r4, pc}

00025e08 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   25e08:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   25e0a:	6800      	ldr	r0, [r0, #0]
   25e0c:	1a40      	subs	r0, r0, r1
   25e0e:	6018      	str	r0, [r3, #0]
	buf->len += len;
   25e10:	889a      	ldrh	r2, [r3, #4]
   25e12:	4411      	add	r1, r2
   25e14:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   25e16:	4770      	bx	lr

00025e18 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   25e18:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   25e1a:	8882      	ldrh	r2, [r0, #4]
   25e1c:	1a52      	subs	r2, r2, r1
   25e1e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   25e20:	6800      	ldr	r0, [r0, #0]
   25e22:	4408      	add	r0, r1
   25e24:	6018      	str	r0, [r3, #0]
}
   25e26:	4770      	bx	lr

00025e28 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   25e28:	4603      	mov	r3, r0
	void *data = buf->data;
   25e2a:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   25e2c:	889a      	ldrh	r2, [r3, #4]
   25e2e:	1a52      	subs	r2, r2, r1
   25e30:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   25e32:	4401      	add	r1, r0
   25e34:	6019      	str	r1, [r3, #0]

	return data;
}
   25e36:	4770      	bx	lr

00025e38 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   25e38:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   25e3a:	6803      	ldr	r3, [r0, #0]
   25e3c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   25e3e:	2101      	movs	r1, #1
   25e40:	f7ff ffea 	bl	25e18 <net_buf_simple_pull>

	return val;
}
   25e44:	4620      	mov	r0, r4
   25e46:	bd10      	pop	{r4, pc}

00025e48 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   25e48:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   25e4a:	6803      	ldr	r3, [r0, #0]
   25e4c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   25e4e:	2102      	movs	r1, #2
   25e50:	f7ff ffe2 	bl	25e18 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   25e54:	4620      	mov	r0, r4
   25e56:	bd10      	pop	{r4, pc}

00025e58 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   25e58:	6802      	ldr	r2, [r0, #0]
   25e5a:	6880      	ldr	r0, [r0, #8]
}
   25e5c:	1a10      	subs	r0, r2, r0
   25e5e:	4770      	bx	lr

00025e60 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   25e60:	b538      	push	{r3, r4, r5, lr}
   25e62:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   25e64:	88c5      	ldrh	r5, [r0, #6]
   25e66:	f7ff fff7 	bl	25e58 <net_buf_simple_headroom>
   25e6a:	1a2d      	subs	r5, r5, r0
   25e6c:	88a0      	ldrh	r0, [r4, #4]
}
   25e6e:	1a28      	subs	r0, r5, r0
   25e70:	bd38      	pop	{r3, r4, r5, pc}

00025e72 <in_endpoint_ctx>:
{
   25e72:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   25e74:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   25e78:	f7f2 f87a 	bl	17f70 <endpoint_ctx>
}
   25e7c:	bd08      	pop	{r3, pc}

00025e7e <out_endpoint_ctx>:
{
   25e7e:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   25e80:	f7f2 f876 	bl	17f70 <endpoint_ctx>
}
   25e84:	bd08      	pop	{r3, pc}

00025e86 <ep_ctx_reset>:
{
   25e86:	b510      	push	{r4, lr}
   25e88:	4604      	mov	r4, r0
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   25e8a:	6903      	ldr	r3, [r0, #16]
   25e8c:	6143      	str	r3, [r0, #20]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   25e8e:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
   25e90:	2300      	movs	r3, #0
   25e92:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   25e94:	7f83      	ldrb	r3, [r0, #30]
   25e96:	b933      	cbnz	r3, 25ea6 <ep_ctx_reset+0x20>
	ep_ctx->read_complete = true;
   25e98:	2301      	movs	r3, #1
   25e9a:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   25e9c:	2300      	movs	r3, #0
   25e9e:	7763      	strb	r3, [r4, #29]
	ep_ctx->write_in_progress = false;
   25ea0:	77a3      	strb	r3, [r4, #30]
	ep_ctx->trans_zlp = false;
   25ea2:	77e3      	strb	r3, [r4, #31]
}
   25ea4:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   25ea6:	7a40      	ldrb	r0, [r0, #9]
   25ea8:	f7f6 fce2 	bl	1c870 <nrfx_usbd_ep_abort>
   25eac:	e7f4      	b.n	25e98 <ep_ctx_reset+0x12>

00025eae <hfxo_stop>:
{
   25eae:	b510      	push	{r4, lr}
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   25eb0:	f100 0320 	add.w	r3, r0, #32
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   25eb4:	2200      	movs	r2, #0
   25eb6:	f3bf 8f5b 	dmb	ish
   25eba:	e853 1f00 	ldrex	r1, [r3]
   25ebe:	2901      	cmp	r1, #1
   25ec0:	d103      	bne.n	25eca <hfxo_stop+0x1c>
   25ec2:	e843 2400 	strex	r4, r2, [r3]
   25ec6:	2c00      	cmp	r4, #0
   25ec8:	d1f7      	bne.n	25eba <hfxo_stop+0xc>
   25eca:	f3bf 8f5b 	dmb	ish
   25ece:	d10d      	bne.n	25eec <hfxo_stop+0x3e>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   25ed0:	69c4      	ldr	r4, [r0, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   25ed2:	f100 010c 	add.w	r1, r0, #12
   25ed6:	4620      	mov	r0, r4
   25ed8:	f7fb faa7 	bl	2142a <onoff_cancel>

	if (rv == -EALREADY) {
   25edc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   25ee0:	d000      	beq.n	25ee4 <hfxo_stop+0x36>
}
   25ee2:	bd10      	pop	{r4, pc}
		rv = onoff_release(mgr);
   25ee4:	4620      	mov	r0, r4
   25ee6:	f7fb fa7a 	bl	213de <onoff_release>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   25eea:	e7fa      	b.n	25ee2 <hfxo_stop+0x34>
	return 0;
   25eec:	2000      	movs	r0, #0
   25eee:	e7f8      	b.n	25ee2 <hfxo_stop+0x34>

00025ef0 <usbd_enable_endpoints>:
{
   25ef0:	b510      	push	{r4, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   25ef2:	2400      	movs	r4, #0
   25ef4:	e003      	b.n	25efe <usbd_enable_endpoints+0xe>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   25ef6:	7a40      	ldrb	r0, [r0, #9]
   25ef8:	f7f6 fb14 	bl	1c524 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   25efc:	3401      	adds	r4, #1
   25efe:	2c07      	cmp	r4, #7
   25f00:	dc06      	bgt.n	25f10 <usbd_enable_endpoints+0x20>
		ep_ctx = in_endpoint_ctx(i);
   25f02:	b2e0      	uxtb	r0, r4
   25f04:	f7ff ffb5 	bl	25e72 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   25f08:	7a03      	ldrb	r3, [r0, #8]
   25f0a:	2b00      	cmp	r3, #0
   25f0c:	d0f6      	beq.n	25efc <usbd_enable_endpoints+0xc>
   25f0e:	e7f2      	b.n	25ef6 <usbd_enable_endpoints+0x6>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   25f10:	2088      	movs	r0, #136	; 0x88
   25f12:	f7ff ffae 	bl	25e72 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   25f16:	7a03      	ldrb	r3, [r0, #8]
   25f18:	b90b      	cbnz	r3, 25f1e <usbd_enable_endpoints+0x2e>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   25f1a:	2400      	movs	r4, #0
   25f1c:	e007      	b.n	25f2e <usbd_enable_endpoints+0x3e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   25f1e:	7a40      	ldrb	r0, [r0, #9]
   25f20:	f7f6 fb00 	bl	1c524 <nrfx_usbd_ep_enable>
   25f24:	e7f9      	b.n	25f1a <usbd_enable_endpoints+0x2a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   25f26:	7a40      	ldrb	r0, [r0, #9]
   25f28:	f7f6 fafc 	bl	1c524 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   25f2c:	3401      	adds	r4, #1
   25f2e:	2c07      	cmp	r4, #7
   25f30:	dc06      	bgt.n	25f40 <usbd_enable_endpoints+0x50>
		ep_ctx = out_endpoint_ctx(i);
   25f32:	b2e0      	uxtb	r0, r4
   25f34:	f7ff ffa3 	bl	25e7e <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   25f38:	7a03      	ldrb	r3, [r0, #8]
   25f3a:	2b00      	cmp	r3, #0
   25f3c:	d0f6      	beq.n	25f2c <usbd_enable_endpoints+0x3c>
   25f3e:	e7f2      	b.n	25f26 <usbd_enable_endpoints+0x36>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   25f40:	2008      	movs	r0, #8
   25f42:	f7ff ff9c 	bl	25e7e <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   25f46:	7a03      	ldrb	r3, [r0, #8]
   25f48:	b903      	cbnz	r3, 25f4c <usbd_enable_endpoints+0x5c>
}
   25f4a:	bd10      	pop	{r4, pc}
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   25f4c:	7a40      	ldrb	r0, [r0, #9]
   25f4e:	f7f6 fae9 	bl	1c524 <nrfx_usbd_ep_enable>
}
   25f52:	e7fa      	b.n	25f4a <usbd_enable_endpoints+0x5a>

00025f54 <hfxo_start>:
{
   25f54:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   25f56:	f100 0320 	add.w	r3, r0, #32
   25f5a:	2201      	movs	r2, #1
   25f5c:	f3bf 8f5b 	dmb	ish
   25f60:	e853 1f00 	ldrex	r1, [r3]
   25f64:	2900      	cmp	r1, #0
   25f66:	d104      	bne.n	25f72 <hfxo_start+0x1e>
   25f68:	e843 2c00 	strex	ip, r2, [r3]
   25f6c:	f1bc 0f00 	cmp.w	ip, #0
   25f70:	d1f6      	bne.n	25f60 <hfxo_start+0xc>
   25f72:	f3bf 8f5b 	dmb	ish
   25f76:	d10a      	bne.n	25f8e <hfxo_start+0x3a>
	*notify = (struct sys_notify){
   25f78:	2300      	movs	r3, #0
   25f7a:	6103      	str	r3, [r0, #16]
   25f7c:	6183      	str	r3, [r0, #24]
   25f7e:	2301      	movs	r3, #1
   25f80:	6143      	str	r3, [r0, #20]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   25f82:	f100 010c 	add.w	r1, r0, #12
   25f86:	69c0      	ldr	r0, [r0, #28]
   25f88:	f7fb f9cd 	bl	21326 <onoff_request>
}
   25f8c:	bd08      	pop	{r3, pc}
	return 0;
   25f8e:	2000      	movs	r0, #0
   25f90:	e7fc      	b.n	25f8c <hfxo_start+0x38>

00025f92 <usb_dc_power_event_handler>:
	switch (event) {
   25f92:	2801      	cmp	r0, #1
   25f94:	d008      	beq.n	25fa8 <usb_dc_power_event_handler+0x16>
   25f96:	2802      	cmp	r0, #2
   25f98:	d002      	beq.n	25fa0 <usb_dc_power_event_handler+0xe>
   25f9a:	b100      	cbz	r0, 25f9e <usb_dc_power_event_handler+0xc>
   25f9c:	4770      	bx	lr
   25f9e:	2001      	movs	r0, #1
{
   25fa0:	b508      	push	{r3, lr}
	submit_dc_power_event(new_state);
   25fa2:	f7f2 f871 	bl	18088 <submit_dc_power_event>
}
   25fa6:	bd08      	pop	{r3, pc}
		new_state = USBD_DETACHED;
   25fa8:	2000      	movs	r0, #0
   25faa:	e7f9      	b.n	25fa0 <usb_dc_power_event_handler+0xe>

00025fac <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   25fac:	7801      	ldrb	r1, [r0, #0]
   25fae:	f001 020f 	and.w	r2, r1, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   25fb2:	7903      	ldrb	r3, [r0, #4]
   25fb4:	b903      	cbnz	r3, 25fb8 <usb_dc_ep_check_cap+0xc>
   25fb6:	b952      	cbnz	r2, 25fce <usb_dc_ep_check_cap+0x22>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   25fb8:	2a08      	cmp	r2, #8
   25fba:	d80b      	bhi.n	25fd4 <usb_dc_ep_check_cap+0x28>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   25fbc:	2b01      	cmp	r3, #1
   25fbe:	d001      	beq.n	25fc4 <usb_dc_ep_check_cap+0x18>
	return 0;
   25fc0:	2000      	movs	r0, #0
   25fc2:	4770      	bx	lr
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   25fc4:	f011 0f08 	tst.w	r1, #8
   25fc8:	d007      	beq.n	25fda <usb_dc_ep_check_cap+0x2e>
	return 0;
   25fca:	2000      	movs	r0, #0
   25fcc:	4770      	bx	lr
		return -1;
   25fce:	f04f 30ff 	mov.w	r0, #4294967295
   25fd2:	4770      	bx	lr
		return -1;
   25fd4:	f04f 30ff 	mov.w	r0, #4294967295
   25fd8:	4770      	bx	lr
		return -1;
   25fda:	f04f 30ff 	mov.w	r0, #4294967295
}
   25fde:	4770      	bx	lr

00025fe0 <usb_dc_ep_read>:
{
   25fe0:	b570      	push	{r4, r5, r6, lr}
   25fe2:	4605      	mov	r5, r0
   25fe4:	460c      	mov	r4, r1
   25fe6:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   25fe8:	f7f2 fe9c 	bl	18d24 <usb_dc_ep_read_wait>
	if (ret) {
   25fec:	b918      	cbnz	r0, 25ff6 <usb_dc_ep_read+0x16>
	if (!data && !max_data_len) {
   25fee:	b11c      	cbz	r4, 25ff8 <usb_dc_ep_read+0x18>
	ret = usb_dc_ep_read_continue(ep);
   25ff0:	4628      	mov	r0, r5
   25ff2:	f7f2 fef5 	bl	18de0 <usb_dc_ep_read_continue>
}
   25ff6:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
   25ff8:	2e00      	cmp	r6, #0
   25ffa:	d1f9      	bne.n	25ff0 <usb_dc_ep_read+0x10>
   25ffc:	e7fb      	b.n	25ff6 <usb_dc_ep_read+0x16>

00025ffe <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   25ffe:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   26000:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   26004:	0089      	lsls	r1, r1, #2
   26006:	3138      	adds	r1, #56	; 0x38
}
   26008:	4408      	add	r0, r1
   2600a:	4770      	bx	lr

0002600c <get_sub_config>:
	const struct nrf_clock_control_config *config =
   2600c:	6840      	ldr	r0, [r0, #4]
}
   2600e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   26012:	4770      	bx	lr

00026014 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   26014:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   26016:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   2601a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2601e:	4770      	bx	lr

00026020 <get_status>:
{
   26020:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   26022:	b2c9      	uxtb	r1, r1
   26024:	f7ff ffeb 	bl	25ffe <get_sub_data>
   26028:	6880      	ldr	r0, [r0, #8]
}
   2602a:	f000 0007 	and.w	r0, r0, #7
   2602e:	bd08      	pop	{r3, pc}

00026030 <set_off_state>:
	__asm__ volatile(
   26030:	f04f 0340 	mov.w	r3, #64	; 0x40
   26034:	f3ef 8211 	mrs	r2, BASEPRI
   26038:	f383 8812 	msr	BASEPRI_MAX, r3
   2603c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   26040:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   26042:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   26046:	d001      	beq.n	2604c <set_off_state+0x1c>
   26048:	428b      	cmp	r3, r1
   2604a:	d107      	bne.n	2605c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2604c:	2301      	movs	r3, #1
   2604e:	6003      	str	r3, [r0, #0]
	int err = 0;
   26050:	2000      	movs	r0, #0
	__asm__ volatile(
   26052:	f382 8811 	msr	BASEPRI, r2
   26056:	f3bf 8f6f 	isb	sy
}
   2605a:	4770      	bx	lr
		err = -EPERM;
   2605c:	f04f 30ff 	mov.w	r0, #4294967295
   26060:	e7f7      	b.n	26052 <set_off_state+0x22>

00026062 <set_starting_state>:
{
   26062:	b410      	push	{r4}
	__asm__ volatile(
   26064:	f04f 0340 	mov.w	r3, #64	; 0x40
   26068:	f3ef 8211 	mrs	r2, BASEPRI
   2606c:	f383 8812 	msr	BASEPRI_MAX, r3
   26070:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   26074:	6803      	ldr	r3, [r0, #0]
   26076:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2607a:	f003 0307 	and.w	r3, r3, #7
   2607e:	2b01      	cmp	r3, #1
   26080:	d009      	beq.n	26096 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   26082:	428c      	cmp	r4, r1
   26084:	d00a      	beq.n	2609c <set_starting_state+0x3a>
		err = -EPERM;
   26086:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   2608a:	f382 8811 	msr	BASEPRI, r2
   2608e:	f3bf 8f6f 	isb	sy
}
   26092:	bc10      	pop	{r4}
   26094:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   26096:	6001      	str	r1, [r0, #0]
	int err = 0;
   26098:	2000      	movs	r0, #0
   2609a:	e7f6      	b.n	2608a <set_starting_state+0x28>
		err = -EALREADY;
   2609c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   260a0:	e7f3      	b.n	2608a <set_starting_state+0x28>

000260a2 <set_on_state>:
	__asm__ volatile(
   260a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   260a6:	f3ef 8211 	mrs	r2, BASEPRI
   260aa:	f383 8812 	msr	BASEPRI_MAX, r3
   260ae:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   260b2:	6803      	ldr	r3, [r0, #0]
   260b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   260b8:	f043 0302 	orr.w	r3, r3, #2
   260bc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   260be:	f382 8811 	msr	BASEPRI, r2
   260c2:	f3bf 8f6f 	isb	sy
}
   260c6:	4770      	bx	lr

000260c8 <clkstarted_handle>:
{
   260c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   260ca:	4606      	mov	r6, r0
   260cc:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   260ce:	f7ff ff96 	bl	25ffe <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   260d2:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   260d4:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   260d6:	2300      	movs	r3, #0
   260d8:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   260dc:	f7ff ffe1 	bl	260a2 <set_on_state>
	if (callback) {
   260e0:	b11d      	cbz	r5, 260ea <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   260e2:	463a      	mov	r2, r7
   260e4:	4621      	mov	r1, r4
   260e6:	4630      	mov	r0, r6
   260e8:	47a8      	blx	r5
}
   260ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000260ec <stop>:
{
   260ec:	b570      	push	{r4, r5, r6, lr}
   260ee:	4606      	mov	r6, r0
   260f0:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   260f2:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   260f4:	4621      	mov	r1, r4
   260f6:	f7ff ff82 	bl	25ffe <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   260fa:	4629      	mov	r1, r5
   260fc:	3008      	adds	r0, #8
   260fe:	f7ff ff97 	bl	26030 <set_off_state>
	if (err < 0) {
   26102:	2800      	cmp	r0, #0
   26104:	db06      	blt.n	26114 <stop+0x28>
	get_sub_config(dev, type)->stop();
   26106:	4621      	mov	r1, r4
   26108:	4630      	mov	r0, r6
   2610a:	f7ff ff7f 	bl	2600c <get_sub_config>
   2610e:	6843      	ldr	r3, [r0, #4]
   26110:	4798      	blx	r3
	return 0;
   26112:	2000      	movs	r0, #0
}
   26114:	bd70      	pop	{r4, r5, r6, pc}

00026116 <api_stop>:
{
   26116:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   26118:	2280      	movs	r2, #128	; 0x80
   2611a:	f7ff ffe7 	bl	260ec <stop>
}
   2611e:	bd08      	pop	{r3, pc}

00026120 <async_start>:
{
   26120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26124:	4606      	mov	r6, r0
   26126:	4690      	mov	r8, r2
   26128:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2612a:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2612c:	4629      	mov	r1, r5
   2612e:	f7ff ff66 	bl	25ffe <get_sub_data>
   26132:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   26134:	9906      	ldr	r1, [sp, #24]
   26136:	3008      	adds	r0, #8
   26138:	f7ff ff93 	bl	26062 <set_starting_state>
	if (err < 0) {
   2613c:	2800      	cmp	r0, #0
   2613e:	db09      	blt.n	26154 <async_start+0x34>
	subdata->cb = cb;
   26140:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   26144:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   26146:	4629      	mov	r1, r5
   26148:	4630      	mov	r0, r6
   2614a:	f7ff ff5f 	bl	2600c <get_sub_config>
   2614e:	6803      	ldr	r3, [r0, #0]
   26150:	4798      	blx	r3
	return 0;
   26152:	2000      	movs	r0, #0
}
   26154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026158 <api_start>:
{
   26158:	b510      	push	{r4, lr}
   2615a:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2615c:	2480      	movs	r4, #128	; 0x80
   2615e:	9400      	str	r4, [sp, #0]
   26160:	f7ff ffde 	bl	26120 <async_start>
}
   26164:	b002      	add	sp, #8
   26166:	bd10      	pop	{r4, pc}

00026168 <onoff_started_callback>:
{
   26168:	b510      	push	{r4, lr}
   2616a:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2616c:	b2c9      	uxtb	r1, r1
   2616e:	f7ff ff51 	bl	26014 <get_onoff_manager>
	notify(mgr, 0);
   26172:	2100      	movs	r1, #0
   26174:	47a0      	blx	r4
}
   26176:	bd10      	pop	{r4, pc}

00026178 <hfclk_start>:
{
   26178:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2617a:	2001      	movs	r0, #1
   2617c:	f7f4 fac8 	bl	1a710 <nrfx_clock_start>
}
   26180:	bd08      	pop	{r3, pc}

00026182 <lfclk_start>:
{
   26182:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   26184:	2000      	movs	r0, #0
   26186:	f7f4 fac3 	bl	1a710 <nrfx_clock_start>
}
   2618a:	bd08      	pop	{r3, pc}

0002618c <hfclk_stop>:
{
   2618c:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2618e:	2001      	movs	r0, #1
   26190:	f000 ffcc 	bl	2712c <nrfx_clock_stop>
}
   26194:	bd08      	pop	{r3, pc}

00026196 <lfclk_stop>:
{
   26196:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   26198:	2000      	movs	r0, #0
   2619a:	f000 ffc7 	bl	2712c <nrfx_clock_stop>
}
   2619e:	bd08      	pop	{r3, pc}

000261a0 <blocking_start_callback>:
{
   261a0:	b508      	push	{r3, lr}
   261a2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   261a4:	f7f7 f86e 	bl	1d284 <z_impl_k_sem_give>
}
   261a8:	bd08      	pop	{r3, pc}

000261aa <gpio_nrfx_port_get_raw>:
	return port->config;
   261aa:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   261ac:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   261ae:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   261b2:	600b      	str	r3, [r1, #0]
}
   261b4:	2000      	movs	r0, #0
   261b6:	4770      	bx	lr

000261b8 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   261b8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   261ba:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   261bc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   261c0:	4042      	eors	r2, r0
   261c2:	400a      	ands	r2, r1
   261c4:	4042      	eors	r2, r0
    p_reg->OUT = value;
   261c6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   261ca:	2000      	movs	r0, #0
   261cc:	4770      	bx	lr

000261ce <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   261ce:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   261d0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   261d2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   261d6:	2000      	movs	r0, #0
   261d8:	4770      	bx	lr

000261da <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   261da:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   261dc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   261de:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   261e2:	2000      	movs	r0, #0
   261e4:	4770      	bx	lr

000261e6 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   261e6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   261e8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   261ea:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   261ee:	404b      	eors	r3, r1
    p_reg->OUT = value;
   261f0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   261f4:	2000      	movs	r0, #0
   261f6:	4770      	bx	lr

000261f8 <gpio_nrfx_manage_callback>:
{
   261f8:	b470      	push	{r4, r5, r6}
	return port->data;
   261fa:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   261fc:	1d05      	adds	r5, r0, #4
	return list->head;
   261fe:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   26200:	b1db      	cbz	r3, 2623a <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   26202:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26204:	2400      	movs	r4, #0
   26206:	e00a      	b.n	2621e <gpio_nrfx_manage_callback+0x26>
	return node->next;
   26208:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   2620a:	6043      	str	r3, [r0, #4]
	return list->tail;
   2620c:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   2620e:	42a1      	cmp	r1, r4
   26210:	d10f      	bne.n	26232 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   26212:	606b      	str	r3, [r5, #4]
}
   26214:	e00d      	b.n	26232 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   26216:	606c      	str	r4, [r5, #4]
}
   26218:	e00b      	b.n	26232 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2621a:	461c      	mov	r4, r3
   2621c:	681b      	ldr	r3, [r3, #0]
   2621e:	b15b      	cbz	r3, 26238 <gpio_nrfx_manage_callback+0x40>
   26220:	429e      	cmp	r6, r3
   26222:	d1fa      	bne.n	2621a <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   26224:	2c00      	cmp	r4, #0
   26226:	d0ef      	beq.n	26208 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   26228:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   2622a:	6023      	str	r3, [r4, #0]
	return list->tail;
   2622c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   2622e:	4299      	cmp	r1, r3
   26230:	d0f1      	beq.n	26216 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   26232:	2300      	movs	r3, #0
   26234:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26236:	e000      	b.n	2623a <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   26238:	b152      	cbz	r2, 26250 <gpio_nrfx_manage_callback+0x58>
	if (set) {
   2623a:	b162      	cbz	r2, 26256 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   2623c:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   2623e:	600b      	str	r3, [r1, #0]
	list->head = node;
   26240:	6041      	str	r1, [r0, #4]
	return list->tail;
   26242:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   26244:	b10b      	cbz	r3, 2624a <gpio_nrfx_manage_callback+0x52>
	return 0;
   26246:	2000      	movs	r0, #0
   26248:	e006      	b.n	26258 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   2624a:	6069      	str	r1, [r5, #4]
   2624c:	2000      	movs	r0, #0
}
   2624e:	e003      	b.n	26258 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   26250:	f06f 0015 	mvn.w	r0, #21
   26254:	e000      	b.n	26258 <gpio_nrfx_manage_callback+0x60>
	return 0;
   26256:	2000      	movs	r0, #0
}
   26258:	bc70      	pop	{r4, r5, r6}
   2625a:	4770      	bx	lr

0002625c <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   2625c:	b510      	push	{r4, lr}
   2625e:	b082      	sub	sp, #8
   26260:	460c      	mov	r4, r1
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   26262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   26266:	6e51      	ldr	r1, [r2, #100]	; 0x64
   26268:	6e53      	ldr	r3, [r2, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   2626a:	0a1b      	lsrs	r3, r3, #8
   2626c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   26270:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   26274:	6e51      	ldr	r1, [r2, #100]	; 0x64
   26276:	0209      	lsls	r1, r1, #8
   26278:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   2627c:	430b      	orrs	r3, r1
   2627e:	6e51      	ldr	r1, [r2, #100]	; 0x64
   26280:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   26284:	9300      	str	r3, [sp, #0]
   26286:	6e11      	ldr	r1, [r2, #96]	; 0x60
   26288:	6e13      	ldr	r3, [r2, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   2628a:	0a1b      	lsrs	r3, r3, #8
   2628c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   26290:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   26294:	6e11      	ldr	r1, [r2, #96]	; 0x60
   26296:	0209      	lsls	r1, r1, #8
   26298:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   2629c:	430b      	orrs	r3, r1
   2629e:	6e12      	ldr	r2, [r2, #96]	; 0x60
   262a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   262a4:	9301      	str	r3, [sp, #4]

	if (length > sizeof(dev_id.id)) {
   262a6:	2c08      	cmp	r4, #8
   262a8:	d900      	bls.n	262ac <z_impl_hwinfo_get_device_id+0x50>
		length = sizeof(dev_id.id);
   262aa:	2408      	movs	r4, #8
	}

	memcpy(buffer, dev_id.id, length);
   262ac:	4622      	mov	r2, r4
   262ae:	4669      	mov	r1, sp
   262b0:	f7fc fbbd 	bl	22a2e <memcpy>

	return length;
}
   262b4:	4620      	mov	r0, r4
   262b6:	b002      	add	sp, #8
   262b8:	bd10      	pop	{r4, pc}

000262ba <endtx_isr>:
	return dev->config;
   262ba:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   262bc:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   262be:	f04f 0140 	mov.w	r1, #64	; 0x40
   262c2:	f3ef 8211 	mrs	r2, BASEPRI
   262c6:	f381 8812 	msr	BASEPRI_MAX, r1
   262ca:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   262ce:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   262d2:	b131      	cbz	r1, 262e2 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   262d4:	2100      	movs	r1, #0
   262d6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   262da:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   262de:	2101      	movs	r1, #1
   262e0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   262e2:	f382 8811 	msr	BASEPRI, r2
   262e6:	f3bf 8f6f 	isb	sy
}
   262ea:	4770      	bx	lr

000262ec <uarte_nrfx_isr_int>:
{
   262ec:	b538      	push	{r3, r4, r5, lr}
   262ee:	4604      	mov	r4, r0
	return dev->config;
   262f0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   262f2:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   262f4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   262f8:	f413 7f80 	tst.w	r3, #256	; 0x100
   262fc:	d003      	beq.n	26306 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   262fe:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   26302:	2b00      	cmp	r3, #0
   26304:	d139      	bne.n	2637a <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   26306:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   26308:	685b      	ldr	r3, [r3, #4]
   2630a:	f013 0f10 	tst.w	r3, #16
   2630e:	d01a      	beq.n	26346 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   26310:	f04f 0340 	mov.w	r3, #64	; 0x40
   26314:	f3ef 8211 	mrs	r2, BASEPRI
   26318:	f383 8812 	msr	BASEPRI_MAX, r3
   2631c:	f3bf 8f6f 	isb	sy
   26320:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   26324:	b113      	cbz	r3, 2632c <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   26326:	2300      	movs	r3, #0
   26328:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   2632c:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2632e:	68db      	ldr	r3, [r3, #12]
   26330:	b10b      	cbz	r3, 26336 <uarte_nrfx_isr_int+0x4a>
   26332:	691b      	ldr	r3, [r3, #16]
   26334:	b91b      	cbnz	r3, 2633e <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   26336:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2633a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   2633e:	f382 8811 	msr	BASEPRI, r2
   26342:	f3bf 8f6f 	isb	sy
	return dev->data;
   26346:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   26348:	68da      	ldr	r2, [r3, #12]
   2634a:	b1aa      	cbz	r2, 26378 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2634c:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   26350:	b121      	cbz	r1, 2635c <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   26352:	2100      	movs	r1, #0
   26354:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   26356:	68da      	ldr	r2, [r3, #12]
   26358:	7b92      	ldrb	r2, [r2, #14]
   2635a:	b98a      	cbnz	r2, 26380 <uarte_nrfx_isr_int+0x94>
   2635c:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   26360:	b122      	cbz	r2, 2636c <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26362:	2200      	movs	r2, #0
   26364:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   26368:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   2636c:	68da      	ldr	r2, [r3, #12]
   2636e:	6813      	ldr	r3, [r2, #0]
   26370:	b113      	cbz	r3, 26378 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   26372:	6851      	ldr	r1, [r2, #4]
   26374:	4620      	mov	r0, r4
   26376:	4798      	blx	r3
}
   26378:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   2637a:	f7ff ff9e 	bl	262ba <endtx_isr>
   2637e:	e7c2      	b.n	26306 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   26380:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   26384:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   26388:	68db      	ldr	r3, [r3, #12]
   2638a:	7399      	strb	r1, [r3, #14]
			return;
   2638c:	e7f4      	b.n	26378 <uarte_nrfx_isr_int+0x8c>

0002638e <uarte_nrfx_configure>:
{
   2638e:	b570      	push	{r4, r5, r6, lr}
   26390:	b082      	sub	sp, #8
   26392:	4605      	mov	r5, r0
   26394:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   26396:	794b      	ldrb	r3, [r1, #5]
   26398:	2b01      	cmp	r3, #1
   2639a:	d006      	beq.n	263aa <uarte_nrfx_configure+0x1c>
   2639c:	2b03      	cmp	r3, #3
   2639e:	d011      	beq.n	263c4 <uarte_nrfx_configure+0x36>
   263a0:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   263a4:	4618      	mov	r0, r3
   263a6:	b002      	add	sp, #8
   263a8:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   263aa:	2300      	movs	r3, #0
   263ac:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   263b0:	79a3      	ldrb	r3, [r4, #6]
   263b2:	2b03      	cmp	r3, #3
   263b4:	d140      	bne.n	26438 <uarte_nrfx_configure+0xaa>
	switch (cfg->flow_ctrl) {
   263b6:	79e3      	ldrb	r3, [r4, #7]
   263b8:	b143      	cbz	r3, 263cc <uarte_nrfx_configure+0x3e>
   263ba:	2b01      	cmp	r3, #1
   263bc:	d010      	beq.n	263e0 <uarte_nrfx_configure+0x52>
   263be:	f06f 0385 	mvn.w	r3, #133	; 0x85
   263c2:	e7ef      	b.n	263a4 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   263c4:	2310      	movs	r3, #16
   263c6:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   263ca:	e7f1      	b.n	263b0 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   263cc:	2300      	movs	r3, #0
   263ce:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   263d2:	7923      	ldrb	r3, [r4, #4]
   263d4:	b183      	cbz	r3, 263f8 <uarte_nrfx_configure+0x6a>
   263d6:	2b02      	cmp	r3, #2
   263d8:	d02a      	beq.n	26430 <uarte_nrfx_configure+0xa2>
   263da:	f06f 0385 	mvn.w	r3, #133	; 0x85
   263de:	e7e1      	b.n	263a4 <uarte_nrfx_configure+0x16>
	return dev->config;
   263e0:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   263e2:	685b      	ldr	r3, [r3, #4]
   263e4:	f003 0201 	and.w	r2, r3, #1
   263e8:	f003 0302 	and.w	r3, r3, #2
   263ec:	4313      	orrs	r3, r2
   263ee:	d026      	beq.n	2643e <uarte_nrfx_configure+0xb0>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   263f0:	2301      	movs	r3, #1
   263f2:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   263f6:	e7ec      	b.n	263d2 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   263f8:	2300      	movs	r3, #0
   263fa:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   263fe:	6821      	ldr	r1, [r4, #0]
   26400:	4628      	mov	r0, r5
   26402:	f7f3 fa4f 	bl	198a4 <baudrate_set>
   26406:	4603      	mov	r3, r0
   26408:	b9e0      	cbnz	r0, 26444 <uarte_nrfx_configure+0xb6>
	return dev->config;
   2640a:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   2640c:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2640e:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   26412:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   26416:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2641a:	4331      	orrs	r1, r6
   2641c:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2641e:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   26422:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   26424:	3204      	adds	r2, #4
   26426:	e894 0003 	ldmia.w	r4, {r0, r1}
   2642a:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   2642e:	e7b9      	b.n	263a4 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   26430:	230e      	movs	r3, #14
   26432:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   26436:	e7e2      	b.n	263fe <uarte_nrfx_configure+0x70>
		return -ENOTSUP;
   26438:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2643c:	e7b2      	b.n	263a4 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   2643e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   26442:	e7af      	b.n	263a4 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   26444:	f06f 0385 	mvn.w	r3, #133	; 0x85
   26448:	e7ac      	b.n	263a4 <uarte_nrfx_configure+0x16>

0002644a <uarte_nrfx_config_get>:
{
   2644a:	460b      	mov	r3, r1
	return dev->data;
   2644c:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   2644e:	6891      	ldr	r1, [r2, #8]
   26450:	6850      	ldr	r0, [r2, #4]
   26452:	e883 0003 	stmia.w	r3, {r0, r1}
}
   26456:	2000      	movs	r0, #0
   26458:	4770      	bx	lr

0002645a <uarte_nrfx_err_check>:
	return dev->config;
   2645a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2645c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2645e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26462:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   26466:	4770      	bx	lr

00026468 <is_tx_ready>:
	return dev->config;
   26468:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2646a:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2646c:	685b      	ldr	r3, [r3, #4]
   2646e:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26472:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26476:	b929      	cbnz	r1, 26484 <is_tx_ready+0x1c>
   26478:	b933      	cbnz	r3, 26488 <is_tx_ready+0x20>
   2647a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2647e:	b92b      	cbnz	r3, 2648c <is_tx_ready+0x24>
   26480:	2000      	movs	r0, #0
   26482:	4770      	bx	lr
   26484:	2001      	movs	r0, #1
   26486:	4770      	bx	lr
   26488:	2000      	movs	r0, #0
   2648a:	4770      	bx	lr
   2648c:	2001      	movs	r0, #1
}
   2648e:	4770      	bx	lr

00026490 <uarte_enable>:
	return dev->config;
   26490:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   26492:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   26494:	2208      	movs	r2, #8
   26496:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2649a:	4770      	bx	lr

0002649c <tx_start>:
{
   2649c:	b510      	push	{r4, lr}
	return dev->config;
   2649e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   264a0:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   264a2:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   264a6:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   264aa:	2300      	movs	r3, #0
   264ac:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   264b0:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   264b4:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   264b8:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   264bc:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   264be:	685b      	ldr	r3, [r3, #4]
   264c0:	f013 0f10 	tst.w	r3, #16
   264c4:	d102      	bne.n	264cc <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   264c6:	2301      	movs	r3, #1
   264c8:	60a3      	str	r3, [r4, #8]
}
   264ca:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   264cc:	2101      	movs	r1, #1
   264ce:	f7ff ffdf 	bl	26490 <uarte_enable>
    p_reg->INTENSET = mask;
   264d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   264d6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   264da:	e7f4      	b.n	264c6 <tx_start+0x2a>

000264dc <uarte_nrfx_poll_in>:
{
   264dc:	b410      	push	{r4}
	return dev->data;
   264de:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   264e0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   264e2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   264e4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   264e8:	b152      	cbz	r2, 26500 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   264ea:	7d62      	ldrb	r2, [r4, #21]
   264ec:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   264ee:	2000      	movs	r0, #0
   264f0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   264f4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   264f8:	2201      	movs	r2, #1
   264fa:	601a      	str	r2, [r3, #0]
}
   264fc:	bc10      	pop	{r4}
   264fe:	4770      	bx	lr
		return -1;
   26500:	f04f 30ff 	mov.w	r0, #4294967295
   26504:	e7fa      	b.n	264fc <uarte_nrfx_poll_in+0x20>

00026506 <uarte_nrfx_fifo_fill>:
{
   26506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2650a:	4680      	mov	r8, r0
	return dev->data;
   2650c:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   2650e:	68fb      	ldr	r3, [r7, #12]
   26510:	899e      	ldrh	r6, [r3, #12]
   26512:	4296      	cmp	r6, r2
   26514:	bfa8      	it	ge
   26516:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   26518:	3310      	adds	r3, #16
   2651a:	2201      	movs	r2, #1
   2651c:	f3bf 8f5b 	dmb	ish
   26520:	e853 0f00 	ldrex	r0, [r3]
   26524:	2800      	cmp	r0, #0
   26526:	d103      	bne.n	26530 <uarte_nrfx_fifo_fill+0x2a>
   26528:	e843 2400 	strex	r4, r2, [r3]
   2652c:	2c00      	cmp	r4, #0
   2652e:	d1f7      	bne.n	26520 <uarte_nrfx_fifo_fill+0x1a>
   26530:	f3bf 8f5b 	dmb	ish
   26534:	d101      	bne.n	2653a <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
   26536:	2300      	movs	r3, #0
   26538:	e006      	b.n	26548 <uarte_nrfx_fifo_fill+0x42>
		return 0;
   2653a:	2600      	movs	r6, #0
   2653c:	e019      	b.n	26572 <uarte_nrfx_fifo_fill+0x6c>
		data->int_driven->tx_buffer[i] = tx_data[i];
   2653e:	68fc      	ldr	r4, [r7, #12]
   26540:	68a4      	ldr	r4, [r4, #8]
   26542:	5ccd      	ldrb	r5, [r1, r3]
   26544:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   26546:	3301      	adds	r3, #1
   26548:	42b3      	cmp	r3, r6
   2654a:	dbf8      	blt.n	2653e <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
   2654c:	f04f 0340 	mov.w	r3, #64	; 0x40
   26550:	f3ef 8411 	mrs	r4, BASEPRI
   26554:	f383 8812 	msr	BASEPRI_MAX, r3
   26558:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   2655c:	4640      	mov	r0, r8
   2655e:	f7ff ff83 	bl	26468 <is_tx_ready>
   26562:	b948      	cbnz	r0, 26578 <uarte_nrfx_fifo_fill+0x72>
		data->int_driven->fifo_fill_lock = 0;
   26564:	68fb      	ldr	r3, [r7, #12]
   26566:	2600      	movs	r6, #0
   26568:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   2656a:	f384 8811 	msr	BASEPRI, r4
   2656e:	f3bf 8f6f 	isb	sy
}
   26572:	4630      	mov	r0, r6
   26574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   26578:	68fb      	ldr	r3, [r7, #12]
   2657a:	4632      	mov	r2, r6
   2657c:	6899      	ldr	r1, [r3, #8]
   2657e:	4640      	mov	r0, r8
   26580:	f7ff ff8c 	bl	2649c <tx_start>
   26584:	e7f1      	b.n	2656a <uarte_nrfx_fifo_fill+0x64>

00026586 <uarte_nrfx_fifo_read>:
	return dev->config;
   26586:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   26588:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   2658a:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2658c:	2a00      	cmp	r2, #0
   2658e:	dd0c      	ble.n	265aa <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26590:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   26594:	b15a      	cbz	r2, 265ae <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26596:	2200      	movs	r2, #0
   26598:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   2659c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   265a0:	7d42      	ldrb	r2, [r0, #21]
   265a2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   265a4:	2001      	movs	r0, #1
   265a6:	6018      	str	r0, [r3, #0]
}
   265a8:	4770      	bx	lr
	int num_rx = 0;
   265aa:	2000      	movs	r0, #0
   265ac:	4770      	bx	lr
   265ae:	2000      	movs	r0, #0
}
   265b0:	4770      	bx	lr

000265b2 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   265b2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   265b4:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   265b6:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   265b8:	f04f 0040 	mov.w	r0, #64	; 0x40
   265bc:	f3ef 8311 	mrs	r3, BASEPRI
   265c0:	f380 8812 	msr	BASEPRI_MAX, r0
   265c4:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   265c8:	68c9      	ldr	r1, [r1, #12]
   265ca:	2000      	movs	r0, #0
   265cc:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   265ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   265d2:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   265d6:	f383 8811 	msr	BASEPRI, r3
   265da:	f3bf 8f6f 	isb	sy
}
   265de:	4770      	bx	lr

000265e0 <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   265e0:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   265e2:	68db      	ldr	r3, [r3, #12]
   265e4:	2201      	movs	r2, #1
   265e6:	739a      	strb	r2, [r3, #14]
}
   265e8:	4770      	bx	lr

000265ea <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   265ea:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   265ec:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   265ee:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   265f0:	68db      	ldr	r3, [r3, #12]
   265f2:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   265f4:	b94a      	cbnz	r2, 2660a <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   265f6:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   265fa:	b15a      	cbz	r2, 26614 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   265fc:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   26600:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   26604:	d008      	beq.n	26618 <uarte_nrfx_irq_tx_ready_complete+0x2e>
   26606:	2001      	movs	r0, #1
   26608:	e000      	b.n	2660c <uarte_nrfx_irq_tx_ready_complete+0x22>
   2660a:	2000      	movs	r0, #0
	if (ready) {
   2660c:	b108      	cbz	r0, 26612 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   2660e:	2200      	movs	r2, #0
   26610:	611a      	str	r2, [r3, #16]
}
   26612:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   26614:	2000      	movs	r0, #0
   26616:	e7f9      	b.n	2660c <uarte_nrfx_irq_tx_ready_complete+0x22>
   26618:	2000      	movs	r0, #0
   2661a:	e7f7      	b.n	2660c <uarte_nrfx_irq_tx_ready_complete+0x22>

0002661c <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   2661c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2661e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26620:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   26624:	3800      	subs	r0, #0
   26626:	bf18      	it	ne
   26628:	2001      	movne	r0, #1
   2662a:	4770      	bx	lr

0002662c <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   2662c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2662e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   26630:	2210      	movs	r2, #16
   26632:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   26636:	4770      	bx	lr

00026638 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   26638:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2663a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2663c:	2210      	movs	r2, #16
   2663e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   26642:	4770      	bx	lr

00026644 <uarte_nrfx_irq_err_enable>:
	return dev->config;
   26644:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   26646:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   26648:	f44f 7200 	mov.w	r2, #512	; 0x200
   2664c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   26650:	4770      	bx	lr

00026652 <uarte_nrfx_irq_err_disable>:
	return dev->config;
   26652:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   26654:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   26656:	f44f 7200 	mov.w	r2, #512	; 0x200
   2665a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2665e:	4770      	bx	lr

00026660 <uarte_nrfx_irq_is_pending>:
{
   26660:	b538      	push	{r3, r4, r5, lr}
   26662:	4604      	mov	r4, r0
	return dev->config;
   26664:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   26666:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   26668:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2666c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   26670:	d106      	bne.n	26680 <uarte_nrfx_irq_is_pending+0x20>
   26672:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   26676:	f013 0f10 	tst.w	r3, #16
   2667a:	d107      	bne.n	2668c <uarte_nrfx_irq_is_pending+0x2c>
   2667c:	2000      	movs	r0, #0
}
   2667e:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   26680:	f7ff ffb3 	bl	265ea <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   26684:	2800      	cmp	r0, #0
   26686:	d0f4      	beq.n	26672 <uarte_nrfx_irq_is_pending+0x12>
		||
   26688:	2001      	movs	r0, #1
   2668a:	e7f8      	b.n	2667e <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   2668c:	4620      	mov	r0, r4
   2668e:	f7ff ffc5 	bl	2661c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   26692:	2800      	cmp	r0, #0
   26694:	d0f3      	beq.n	2667e <uarte_nrfx_irq_is_pending+0x1e>
		||
   26696:	2001      	movs	r0, #1
   26698:	e7f1      	b.n	2667e <uarte_nrfx_irq_is_pending+0x1e>

0002669a <uarte_nrfx_irq_update>:
}
   2669a:	2001      	movs	r0, #1
   2669c:	4770      	bx	lr

0002669e <uarte_nrfx_irq_callback_set>:
	return dev->data;
   2669e:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   266a0:	68d8      	ldr	r0, [r3, #12]
   266a2:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   266a4:	68db      	ldr	r3, [r3, #12]
   266a6:	605a      	str	r2, [r3, #4]
}
   266a8:	4770      	bx	lr

000266aa <wait_tx_ready>:
{
   266aa:	b570      	push	{r4, r5, r6, lr}
   266ac:	4606      	mov	r6, r0
   266ae:	e014      	b.n	266da <wait_tx_ready+0x30>
		if (res) {
   266b0:	b17d      	cbz	r5, 266d2 <wait_tx_ready+0x28>
	__asm__ volatile(
   266b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   266b6:	f3ef 8411 	mrs	r4, BASEPRI
   266ba:	f383 8812 	msr	BASEPRI_MAX, r3
   266be:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   266c2:	4630      	mov	r0, r6
   266c4:	f7ff fed0 	bl	26468 <is_tx_ready>
   266c8:	b9a0      	cbnz	r0, 266f4 <wait_tx_ready+0x4a>
	__asm__ volatile(
   266ca:	f384 8811 	msr	BASEPRI, r4
   266ce:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   266d2:	2021      	movs	r0, #33	; 0x21
   266d4:	2100      	movs	r1, #0
   266d6:	f7f7 fb87 	bl	1dde8 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   266da:	2464      	movs	r4, #100	; 0x64
   266dc:	4630      	mov	r0, r6
   266de:	f7ff fec3 	bl	26468 <is_tx_ready>
   266e2:	4605      	mov	r5, r0
   266e4:	2800      	cmp	r0, #0
   266e6:	d1e3      	bne.n	266b0 <wait_tx_ready+0x6>
   266e8:	2001      	movs	r0, #1
   266ea:	f000 fd3c 	bl	27166 <nrfx_busy_wait>
   266ee:	3c01      	subs	r4, #1
   266f0:	d1f4      	bne.n	266dc <wait_tx_ready+0x32>
   266f2:	e7dd      	b.n	266b0 <wait_tx_ready+0x6>
}
   266f4:	4620      	mov	r0, r4
   266f6:	bd70      	pop	{r4, r5, r6, pc}

000266f8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   266f8:	b510      	push	{r4, lr}
   266fa:	4604      	mov	r4, r0
   266fc:	2200      	movs	r2, #0
   266fe:	2101      	movs	r1, #1
   26700:	2002      	movs	r0, #2
   26702:	f7ed fb81 	bl	13e08 <z_arm_irq_priority_set>
   26706:	2002      	movs	r0, #2
   26708:	f7ed fb4c 	bl	13da4 <arch_irq_enable>
   2670c:	2101      	movs	r1, #1
   2670e:	4620      	mov	r0, r4
   26710:	f7f3 f9cc 	bl	19aac <uarte_instance_init>
   26714:	bd10      	pop	{r4, pc}

00026716 <rng_pool_put>:
{
   26716:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   26718:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   2671a:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   2671c:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   2671e:	1a9a      	subs	r2, r3, r2
   26720:	ea34 0202 	bics.w	r2, r4, r2
   26724:	d008      	beq.n	26738 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   26726:	18c2      	adds	r2, r0, r3
   26728:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   2672a:	3301      	adds	r3, #1
   2672c:	b25b      	sxtb	r3, r3
   2672e:	4023      	ands	r3, r4
   26730:	7083      	strb	r3, [r0, #2]
	return 0;
   26732:	2000      	movs	r0, #0
}
   26734:	bc10      	pop	{r4}
   26736:	4770      	bx	lr
		return -ENOBUFS;
   26738:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2673c:	e7fa      	b.n	26734 <rng_pool_put+0x1e>

0002673e <rng_pool_init>:
	rngp->first_alloc = 0U;
   2673e:	2300      	movs	r3, #0
   26740:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   26742:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   26744:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   26746:	3901      	subs	r1, #1
   26748:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   2674a:	7102      	strb	r2, [r0, #4]
}
   2674c:	4770      	bx	lr

0002674e <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   2674e:	b5f0      	push	{r4, r5, r6, r7, lr}
   26750:	b083      	sub	sp, #12
   26752:	460f      	mov	r7, r1
   26754:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   26756:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2675a:	2400      	movs	r4, #0
	int res = -EINVAL;
   2675c:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   26760:	e00a      	b.n	26778 <entropy_cc3xx_rng_get_entropy+0x2a>
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 * When the given context is NULL, a global internal
			 * ctr_drbg context is being used.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   26762:	ab01      	add	r3, sp, #4
   26764:	462a      	mov	r2, r5
   26766:	1939      	adds	r1, r7, r4
   26768:	2000      	movs	r0, #0
   2676a:	f7f8 f8c5 	bl	1e8f8 <nrf_cc3xx_platform_ctr_drbg_get>
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
   2676e:	9b01      	ldr	r3, [sp, #4]
   26770:	42ab      	cmp	r3, r5
   26772:	d109      	bne.n	26788 <entropy_cc3xx_rng_get_entropy+0x3a>
			return -EINVAL;
		}

		if (res != 0) {
   26774:	b950      	cbnz	r0, 2678c <entropy_cc3xx_rng_get_entropy+0x3e>
			break;
		}

		offset += chunk_size;
   26776:	442c      	add	r4, r5
	while (offset < length) {
   26778:	42a6      	cmp	r6, r4
   2677a:	d907      	bls.n	2678c <entropy_cc3xx_rng_get_entropy+0x3e>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2677c:	1b33      	subs	r3, r6, r4
   2677e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   26782:	d2ee      	bcs.n	26762 <entropy_cc3xx_rng_get_entropy+0x14>
			chunk_size = length - offset;
   26784:	461d      	mov	r5, r3
   26786:	e7ec      	b.n	26762 <entropy_cc3xx_rng_get_entropy+0x14>
			return -EINVAL;
   26788:	f06f 0015 	mvn.w	r0, #21
	}
#endif

	return res;
}
   2678c:	b003      	add	sp, #12
   2678e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026790 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   26790:	b508      	push	{r3, lr}
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   26792:	2200      	movs	r2, #0
   26794:	4611      	mov	r1, r2
   26796:	4610      	mov	r0, r2
   26798:	f7f8 f87a 	bl	1e890 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   2679c:	b900      	cbnz	r0, 267a0 <entropy_cc3xx_rng_init+0x10>
			return -EINVAL;
		}
	#endif

	return 0;
}
   2679e:	bd08      	pop	{r3, pc}
			return -EINVAL;
   267a0:	f06f 0015 	mvn.w	r0, #21
   267a4:	e7fb      	b.n	2679e <entropy_cc3xx_rng_init+0xe>

000267a6 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   267a6:	4770      	bx	lr

000267a8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   267a8:	4770      	bx	lr

000267aa <sys_clock_disable>:

void __weak sys_clock_disable(void)
{
}
   267aa:	4770      	bx	lr

000267ac <counter_sub>:
	return (a - b) & COUNTER_MAX;
   267ac:	1a40      	subs	r0, r0, r1
}
   267ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   267b2:	4770      	bx	lr

000267b4 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   267b4:	f100 0350 	add.w	r3, r0, #80	; 0x50
   267b8:	009b      	lsls	r3, r3, #2
   267ba:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   267bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   267c0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   267c4:	2200      	movs	r2, #0
   267c6:	601a      	str	r2, [r3, #0]
   267c8:	681b      	ldr	r3, [r3, #0]
}
   267ca:	4770      	bx	lr

000267cc <absolute_time_to_cc>:
}
   267cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   267d0:	4770      	bx	lr

000267d2 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   267d2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   267d6:	b672      	cpsid	i
}
   267d8:	4770      	bx	lr

000267da <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   267da:	f380 8810 	msr	PRIMASK, r0
}
   267de:	4770      	bx	lr

000267e0 <set_absolute_alarm>:
{
   267e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   267e2:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   267e4:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   267e8:	f7f3 fb6e 	bl	19ec8 <get_comparator>
   267ec:	4607      	mov	r7, r0
   267ee:	e019      	b.n	26824 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   267f0:	2013      	movs	r0, #19
   267f2:	f001 fabd 	bl	27d70 <z_impl_k_busy_wait>
}
   267f6:	e022      	b.n	2683e <set_absolute_alarm+0x5e>
		event_clear(chan);
   267f8:	4630      	mov	r0, r6
   267fa:	f7ff ffdb 	bl	267b4 <event_clear>
		event_enable(chan);
   267fe:	4630      	mov	r0, r6
   26800:	f7f3 fb6a 	bl	19ed8 <event_enable>
		set_comparator(chan, cc_val);
   26804:	4629      	mov	r1, r5
   26806:	4630      	mov	r0, r6
   26808:	f7f3 fb54 	bl	19eb4 <set_comparator>
		now2 = counter();
   2680c:	f7f3 fb78 	bl	19f00 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   26810:	4284      	cmp	r4, r0
   26812:	d01e      	beq.n	26852 <set_absolute_alarm+0x72>
   26814:	1c81      	adds	r1, r0, #2
   26816:	4628      	mov	r0, r5
   26818:	f7ff ffc8 	bl	267ac <counter_sub>
	} while ((now2 != now) &&
   2681c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   26820:	d917      	bls.n	26852 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   26822:	462f      	mov	r7, r5
		now = counter();
   26824:	f7f3 fb6c 	bl	19f00 <counter>
   26828:	4604      	mov	r4, r0
		set_comparator(chan, now);
   2682a:	4601      	mov	r1, r0
   2682c:	4630      	mov	r0, r6
   2682e:	f7f3 fb41 	bl	19eb4 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   26832:	4621      	mov	r1, r4
   26834:	4638      	mov	r0, r7
   26836:	f7ff ffb9 	bl	267ac <counter_sub>
   2683a:	2801      	cmp	r0, #1
   2683c:	d0d8      	beq.n	267f0 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   2683e:	1ca7      	adds	r7, r4, #2
   26840:	4639      	mov	r1, r7
   26842:	4628      	mov	r0, r5
   26844:	f7ff ffb2 	bl	267ac <counter_sub>
   26848:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2684c:	d9d4      	bls.n	267f8 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   2684e:	463d      	mov	r5, r7
   26850:	e7d2      	b.n	267f8 <set_absolute_alarm+0x18>
}
   26852:	4628      	mov	r0, r5
   26854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026856 <compare_set>:
{
   26856:	b5f0      	push	{r4, r5, r6, r7, lr}
   26858:	b083      	sub	sp, #12
   2685a:	4604      	mov	r4, r0
   2685c:	4617      	mov	r7, r2
   2685e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   26860:	f7f3 fb54 	bl	19f0c <compare_int_lock>
   26864:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   26866:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26868:	9301      	str	r3, [sp, #4]
   2686a:	9b08      	ldr	r3, [sp, #32]
   2686c:	9300      	str	r3, [sp, #0]
   2686e:	463a      	mov	r2, r7
   26870:	462b      	mov	r3, r5
   26872:	4620      	mov	r0, r4
   26874:	f7f3 fc38 	bl	1a0e8 <compare_set_nolocks>
   26878:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   2687a:	4631      	mov	r1, r6
   2687c:	4620      	mov	r0, r4
   2687e:	f7f3 fba9 	bl	19fd4 <compare_int_unlock>
}
   26882:	4628      	mov	r0, r5
   26884:	b003      	add	sp, #12
   26886:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026888 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   26888:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   2688a:	2000      	movs	r0, #0
   2688c:	f7ed fe4a 	bl	14524 <sys_arch_reboot>

00026890 <sdc_assertion_handler>:
	k_oops();
   26890:	4040      	eors	r0, r0
   26892:	f380 8811 	msr	BASEPRI, r0
   26896:	f04f 0003 	mov.w	r0, #3
   2689a:	df02      	svc	2
}
   2689c:	4770      	bx	lr

0002689e <event_packet_is_discardable>:
	switch (hdr->evt) {
   2689e:	7803      	ldrb	r3, [r0, #0]
   268a0:	2b3e      	cmp	r3, #62	; 0x3e
   268a2:	d003      	beq.n	268ac <event_packet_is_discardable+0xe>
   268a4:	2bff      	cmp	r3, #255	; 0xff
   268a6:	d00a      	beq.n	268be <event_packet_is_discardable+0x20>
   268a8:	2000      	movs	r0, #0
   268aa:	4770      	bx	lr
		switch (me->subevent) {
   268ac:	7883      	ldrb	r3, [r0, #2]
   268ae:	2b02      	cmp	r3, #2
   268b0:	d00c      	beq.n	268cc <event_packet_is_discardable+0x2e>
   268b2:	2b0d      	cmp	r3, #13
   268b4:	d001      	beq.n	268ba <event_packet_is_discardable+0x1c>
			return false;
   268b6:	2000      	movs	r0, #0
   268b8:	4770      	bx	lr
		switch (me->subevent) {
   268ba:	2001      	movs	r0, #1
   268bc:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   268be:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   268c0:	2b80      	cmp	r3, #128	; 0x80
   268c2:	d001      	beq.n	268c8 <event_packet_is_discardable+0x2a>
			return false;
   268c4:	2000      	movs	r0, #0
}
   268c6:	4770      	bx	lr
			return true;
   268c8:	2001      	movs	r0, #1
   268ca:	4770      	bx	lr
		switch (me->subevent) {
   268cc:	2001      	movs	r0, #1
   268ce:	4770      	bx	lr

000268d0 <hci_driver_send>:
{
   268d0:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   268d2:	8983      	ldrh	r3, [r0, #12]
   268d4:	b183      	cbz	r3, 268f8 <hci_driver_send+0x28>
   268d6:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   268d8:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   268da:	b14b      	cbz	r3, 268f0 <hci_driver_send+0x20>
   268dc:	2b02      	cmp	r3, #2
   268de:	d10e      	bne.n	268fe <hci_driver_send+0x2e>
		err = acl_handle(buf);
   268e0:	f7f3 fd70 	bl	1a3c4 <acl_handle>
   268e4:	4605      	mov	r5, r0
	if (!err) {
   268e6:	b965      	cbnz	r5, 26902 <hci_driver_send+0x32>
		net_buf_unref(buf);
   268e8:	4620      	mov	r0, r4
   268ea:	f7ff fa29 	bl	25d40 <net_buf_unref>
   268ee:	e008      	b.n	26902 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   268f0:	f7f3 fd82 	bl	1a3f8 <cmd_handle>
   268f4:	4605      	mov	r5, r0
		break;
   268f6:	e7f6      	b.n	268e6 <hci_driver_send+0x16>
		return -EINVAL;
   268f8:	f06f 0515 	mvn.w	r5, #21
   268fc:	e001      	b.n	26902 <hci_driver_send+0x32>
	switch (type) {
   268fe:	f06f 0515 	mvn.w	r5, #21
}
   26902:	4628      	mov	r0, r5
   26904:	bd38      	pop	{r3, r4, r5, pc}

00026906 <event_packet_process>:
{
   26906:	b538      	push	{r3, r4, r5, lr}
   26908:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   2690a:	f7ff ffc8 	bl	2689e <event_packet_is_discardable>
   2690e:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   26910:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   26912:	4619      	mov	r1, r3
   26914:	b17b      	cbz	r3, 26936 <event_packet_process+0x30>
   26916:	2200      	movs	r2, #0
   26918:	2300      	movs	r3, #0
   2691a:	f7ed fec1 	bl	146a0 <bt_buf_get_evt>
	if (!evt_buf) {
   2691e:	4605      	mov	r5, r0
   26920:	b140      	cbz	r0, 26934 <event_packet_process+0x2e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   26922:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   26924:	3202      	adds	r2, #2
   26926:	4621      	mov	r1, r4
   26928:	3008      	adds	r0, #8
   2692a:	f7ff fa59 	bl	25de0 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   2692e:	4628      	mov	r0, r5
   26930:	f7ee fe2e 	bl	15590 <bt_recv>
}
   26934:	bd38      	pop	{r3, r4, r5, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   26936:	f04f 32ff 	mov.w	r2, #4294967295
   2693a:	f04f 33ff 	mov.w	r3, #4294967295
   2693e:	e7ec      	b.n	2691a <event_packet_process+0x14>

00026940 <fetch_and_process_hci_evt>:
{
   26940:	b538      	push	{r3, r4, r5, lr}
   26942:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   26944:	f04f 30ff 	mov.w	r0, #4294967295
   26948:	f04f 31ff 	mov.w	r1, #4294967295
   2694c:	f7f3 fd08 	bl	1a360 <multithreading_lock_acquire>
	if (!errcode) {
   26950:	4605      	mov	r5, r0
   26952:	b110      	cbz	r0, 2695a <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   26954:	b145      	cbz	r5, 26968 <fetch_and_process_hci_evt+0x28>
		return false;
   26956:	2000      	movs	r0, #0
}
   26958:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   2695a:	4620      	mov	r0, r4
   2695c:	f7f3 fe2e 	bl	1a5bc <hci_internal_evt_get>
   26960:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   26962:	f7f3 fd07 	bl	1a374 <multithreading_lock_release>
   26966:	e7f5      	b.n	26954 <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   26968:	4620      	mov	r0, r4
   2696a:	f7ff ffcc 	bl	26906 <event_packet_process>
	return true;
   2696e:	2001      	movs	r0, #1
   26970:	e7f2      	b.n	26958 <fetch_and_process_hci_evt+0x18>

00026972 <data_packet_process>:
{
   26972:	b538      	push	{r3, r4, r5, lr}
   26974:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   26976:	f04f 32ff 	mov.w	r2, #4294967295
   2697a:	f04f 33ff 	mov.w	r3, #4294967295
   2697e:	2003      	movs	r0, #3
   26980:	f7ed fe64 	bl	1464c <bt_buf_get_rx>
	if (!data_buf) {
   26984:	b148      	cbz	r0, 2699a <data_packet_process+0x28>
   26986:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   26988:	8862      	ldrh	r2, [r4, #2]
   2698a:	3204      	adds	r2, #4
   2698c:	4621      	mov	r1, r4
   2698e:	3008      	adds	r0, #8
   26990:	f7ff fa26 	bl	25de0 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   26994:	4628      	mov	r0, r5
   26996:	f7ee fdfb 	bl	15590 <bt_recv>
}
   2699a:	bd38      	pop	{r3, r4, r5, pc}

0002699c <fetch_and_process_acl_data>:
{
   2699c:	b538      	push	{r3, r4, r5, lr}
   2699e:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   269a0:	f04f 30ff 	mov.w	r0, #4294967295
   269a4:	f04f 31ff 	mov.w	r1, #4294967295
   269a8:	f7f3 fcda 	bl	1a360 <multithreading_lock_acquire>
	if (!errcode) {
   269ac:	4605      	mov	r5, r0
   269ae:	b110      	cbz	r0, 269b6 <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   269b0:	b145      	cbz	r5, 269c4 <fetch_and_process_acl_data+0x28>
		return false;
   269b2:	2000      	movs	r0, #0
}
   269b4:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   269b6:	4620      	mov	r0, r4
   269b8:	f7e7 f9ba 	bl	dd30 <sdc_hci_data_get>
   269bc:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   269be:	f7f3 fcd9 	bl	1a374 <multithreading_lock_release>
   269c2:	e7f5      	b.n	269b0 <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   269c4:	4620      	mov	r0, r4
   269c6:	f7ff ffd4 	bl	26972 <data_packet_process>
	return true;
   269ca:	2001      	movs	r0, #1
   269cc:	e7f2      	b.n	269b4 <fetch_and_process_acl_data+0x18>

000269ce <configure_supported_features>:
{
   269ce:	b508      	push	{r3, lr}
			err = sdc_support_scan();
   269d0:	f7de fa06 	bl	4de0 <sdc_support_scan>
			if (err) {
   269d4:	b948      	cbnz	r0, 269ea <configure_supported_features+0x1c>
		err = sdc_support_master();
   269d6:	f7de f9f3 	bl	4dc0 <sdc_support_master>
		if (err) {
   269da:	b948      	cbnz	r0, 269f0 <configure_supported_features+0x22>
		err = sdc_support_dle();
   269dc:	f7de f9d0 	bl	4d80 <sdc_support_dle>
		if (err) {
   269e0:	b948      	cbnz	r0, 269f6 <configure_supported_features+0x28>
		err = sdc_support_le_2m_phy();
   269e2:	f7de f9dd 	bl	4da0 <sdc_support_le_2m_phy>
		if (err) {
   269e6:	b948      	cbnz	r0, 269fc <configure_supported_features+0x2e>
}
   269e8:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   269ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
   269ee:	e7fb      	b.n	269e8 <configure_supported_features+0x1a>
			return -ENOTSUP;
   269f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   269f4:	e7f8      	b.n	269e8 <configure_supported_features+0x1a>
			return -ENOTSUP;
   269f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   269fa:	e7f5      	b.n	269e8 <configure_supported_features+0x1a>
			return -ENOTSUP;
   269fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26a00:	e7f2      	b.n	269e8 <configure_supported_features+0x1a>

00026a02 <configure_memory_usage>:
{
   26a02:	b500      	push	{lr}
   26a04:	b083      	sub	sp, #12
	cfg.master_count.count = SDC_MASTER_COUNT;
   26a06:	2304      	movs	r3, #4
   26a08:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   26a0c:	eb0d 0203 	add.w	r2, sp, r3
   26a10:	2101      	movs	r1, #1
   26a12:	2000      	movs	r0, #0
   26a14:	f7de f8b2 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   26a18:	2800      	cmp	r0, #0
   26a1a:	db3b      	blt.n	26a94 <configure_memory_usage+0x92>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   26a1c:	2000      	movs	r0, #0
   26a1e:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   26a22:	aa01      	add	r2, sp, #4
   26a24:	2102      	movs	r1, #2
   26a26:	f7de f8a9 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   26a2a:	2800      	cmp	r0, #0
   26a2c:	db32      	blt.n	26a94 <configure_memory_usage+0x92>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   26a2e:	23fb      	movs	r3, #251	; 0xfb
   26a30:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   26a34:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   26a38:	2302      	movs	r3, #2
   26a3a:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   26a3e:	2103      	movs	r1, #3
   26a40:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   26a44:	aa01      	add	r2, sp, #4
   26a46:	2000      	movs	r0, #0
   26a48:	f7de f898 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   26a4c:	2800      	cmp	r0, #0
   26a4e:	db21      	blt.n	26a94 <configure_memory_usage+0x92>
	cfg.event_length.event_length_us =
   26a50:	f641 534c 	movw	r3, #7500	; 0x1d4c
   26a54:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   26a56:	aa01      	add	r2, sp, #4
   26a58:	2104      	movs	r1, #4
   26a5a:	2000      	movs	r0, #0
   26a5c:	f7de f88e 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   26a60:	2800      	cmp	r0, #0
   26a62:	db17      	blt.n	26a94 <configure_memory_usage+0x92>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   26a64:	2000      	movs	r0, #0
   26a66:	f88d 0004 	strb.w	r0, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   26a6a:	aa01      	add	r2, sp, #4
   26a6c:	2105      	movs	r1, #5
   26a6e:	f7de f885 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   26a72:	2800      	cmp	r0, #0
   26a74:	db0e      	blt.n	26a94 <configure_memory_usage+0x92>
		cfg.scan_buffer_cfg.count = CONFIG_SDC_SCAN_BUFFER_COUNT;
   26a76:	2303      	movs	r3, #3
   26a78:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   26a7c:	aa01      	add	r2, sp, #4
   26a7e:	2106      	movs	r1, #6
   26a80:	2000      	movs	r0, #0
   26a82:	f7de f87b 	bl	4b7c <sdc_cfg_set>
		if (required_memory < 0) {
   26a86:	2800      	cmp	r0, #0
   26a88:	db04      	blt.n	26a94 <configure_memory_usage+0x92>
	if (required_memory > sizeof(sdc_mempool)) {
   26a8a:	f242 0338 	movw	r3, #8248	; 0x2038
   26a8e:	4298      	cmp	r0, r3
   26a90:	d803      	bhi.n	26a9a <configure_memory_usage+0x98>
	return 0;
   26a92:	2000      	movs	r0, #0
}
   26a94:	b003      	add	sp, #12
   26a96:	f85d fb04 	ldr.w	pc, [sp], #4
		k_panic();
   26a9a:	4040      	eors	r0, r0
   26a9c:	f380 8811 	msr	BASEPRI, r0
   26aa0:	f04f 0004 	mov.w	r0, #4
   26aa4:	df02      	svc	2
		return -ENOMEM;
   26aa6:	f06f 000b 	mvn.w	r0, #11
   26aaa:	e7f3      	b.n	26a94 <configure_memory_usage+0x92>

00026aac <command_generates_command_complete_event>:
	switch (hci_opcode) {
   26aac:	f242 0344 	movw	r3, #8260	; 0x2044
   26ab0:	4298      	cmp	r0, r3
   26ab2:	d834      	bhi.n	26b1e <command_generates_command_complete_event+0x72>
   26ab4:	f242 030d 	movw	r3, #8205	; 0x200d
   26ab8:	4298      	cmp	r0, r3
   26aba:	d20b      	bcs.n	26ad4 <command_generates_command_complete_event+0x28>
   26abc:	f240 4306 	movw	r3, #1030	; 0x406
   26ac0:	4298      	cmp	r0, r3
   26ac2:	d02e      	beq.n	26b22 <command_generates_command_complete_event+0x76>
   26ac4:	f240 431d 	movw	r3, #1053	; 0x41d
   26ac8:	4298      	cmp	r0, r3
   26aca:	d001      	beq.n	26ad0 <command_generates_command_complete_event+0x24>
		return true;
   26acc:	2001      	movs	r0, #1
   26ace:	4770      	bx	lr
	switch (hci_opcode) {
   26ad0:	2000      	movs	r0, #0
   26ad2:	4770      	bx	lr
   26ad4:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   26ad8:	380d      	subs	r0, #13
   26ada:	2837      	cmp	r0, #55	; 0x37
   26adc:	d823      	bhi.n	26b26 <command_generates_command_complete_event+0x7a>
   26ade:	e8df f000 	tbb	[pc, r0]
   26ae2:	221c      	.short	0x221c
   26ae4:	22222222 	.word	0x22222222
   26ae8:	1c22221c 	.word	0x1c22221c
   26aec:	221c2222 	.word	0x221c2222
   26af0:	22222222 	.word	0x22222222
   26af4:	22222222 	.word	0x22222222
   26af8:	22222222 	.word	0x22222222
   26afc:	22222222 	.word	0x22222222
   26b00:	22222222 	.word	0x22222222
   26b04:	1c222222 	.word	0x1c222222
   26b08:	22222222 	.word	0x22222222
   26b0c:	22222222 	.word	0x22222222
   26b10:	22222222 	.word	0x22222222
   26b14:	22222222 	.word	0x22222222
   26b18:	1c1c      	.short	0x1c1c
   26b1a:	2000      	movs	r0, #0
   26b1c:	4770      	bx	lr
		return true;
   26b1e:	2001      	movs	r0, #1
   26b20:	4770      	bx	lr
	switch (hci_opcode) {
   26b22:	2000      	movs	r0, #0
   26b24:	4770      	bx	lr
		return true;
   26b26:	2001      	movs	r0, #1
}
   26b28:	4770      	bx	lr

00026b2a <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   26b2a:	230f      	movs	r3, #15
   26b2c:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   26b2e:	2304      	movs	r3, #4
   26b30:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   26b32:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   26b34:	2301      	movs	r3, #1
   26b36:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   26b38:	8081      	strh	r1, [r0, #4]
}
   26b3a:	4770      	bx	lr

00026b3c <encode_command_complete_header>:
{
   26b3c:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   26b3e:	240e      	movs	r4, #14
   26b40:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   26b42:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   26b44:	2201      	movs	r2, #1
   26b46:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   26b48:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   26b4c:	7143      	strb	r3, [r0, #5]
}
   26b4e:	bc10      	pop	{r4}
   26b50:	4770      	bx	lr

00026b52 <le_read_supported_states>:
	*buf = states1;
   26b52:	2370      	movs	r3, #112	; 0x70
   26b54:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   26b56:	2340      	movs	r3, #64	; 0x40
   26b58:	7103      	strb	r3, [r0, #4]
}
   26b5a:	4770      	bx	lr

00026b5c <status_param_cmd_put>:
}
   26b5c:	2001      	movs	r0, #1
   26b5e:	4770      	bx	lr

00026b60 <link_control_cmd_put>:
{
   26b60:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   26b62:	7842      	ldrb	r2, [r0, #1]
   26b64:	f810 3b03 	ldrb.w	r3, [r0], #3
   26b68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   26b6c:	b21b      	sxth	r3, r3
	switch (opcode)	{
   26b6e:	f240 4206 	movw	r2, #1030	; 0x406
   26b72:	4293      	cmp	r3, r2
   26b74:	d005      	beq.n	26b82 <link_control_cmd_put+0x22>
   26b76:	f240 421d 	movw	r2, #1053	; 0x41d
   26b7a:	4293      	cmp	r3, r2
   26b7c:	d004      	beq.n	26b88 <link_control_cmd_put+0x28>
   26b7e:	2001      	movs	r0, #1
}
   26b80:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   26b82:	f7e7 fa28 	bl	dfd6 <sdc_hci_cmd_lc_disconnect>
   26b86:	e7fb      	b.n	26b80 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   26b88:	f7e7 fa27 	bl	dfda <sdc_hci_cmd_lc_read_remote_version_information>
   26b8c:	e7f8      	b.n	26b80 <link_control_cmd_put+0x20>

00026b8e <controller_and_baseband_cmd_put>:
{
   26b8e:	b538      	push	{r3, r4, r5, lr}
   26b90:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   26b92:	3003      	adds	r0, #3
   26b94:	7865      	ldrb	r5, [r4, #1]
   26b96:	7823      	ldrb	r3, [r4, #0]
   26b98:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   26b9c:	b21b      	sxth	r3, r3
	switch (opcode)	{
   26b9e:	f640 4463 	movw	r4, #3171	; 0xc63
   26ba2:	42a3      	cmp	r3, r4
   26ba4:	d02c      	beq.n	26c00 <controller_and_baseband_cmd_put+0x72>
   26ba6:	f101 0106 	add.w	r1, r1, #6
   26baa:	dc16      	bgt.n	26bda <controller_and_baseband_cmd_put+0x4c>
   26bac:	f640 4403 	movw	r4, #3075	; 0xc03
   26bb0:	42a3      	cmp	r3, r4
   26bb2:	d022      	beq.n	26bfa <controller_and_baseband_cmd_put+0x6c>
   26bb4:	f640 442d 	movw	r4, #3117	; 0xc2d
   26bb8:	42a3      	cmp	r3, r4
   26bba:	d105      	bne.n	26bc8 <controller_and_baseband_cmd_put+0x3a>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   26bbc:	7813      	ldrb	r3, [r2, #0]
   26bbe:	3303      	adds	r3, #3
   26bc0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   26bc2:	f7e7 f8dc 	bl	dd7e <sdc_hci_cmd_cb_read_transmit_power_level>
   26bc6:	e007      	b.n	26bd8 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   26bc8:	f640 4201 	movw	r2, #3073	; 0xc01
   26bcc:	4293      	cmp	r3, r2
   26bce:	d102      	bne.n	26bd6 <controller_and_baseband_cmd_put+0x48>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   26bd0:	f7e7 f8d7 	bl	dd82 <sdc_hci_cmd_cb_set_event_mask>
   26bd4:	e000      	b.n	26bd8 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   26bd6:	2001      	movs	r0, #1
}
   26bd8:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   26bda:	f640 447b 	movw	r4, #3195	; 0xc7b
   26bde:	42a3      	cmp	r3, r4
   26be0:	d011      	beq.n	26c06 <controller_and_baseband_cmd_put+0x78>
   26be2:	f640 447c 	movw	r4, #3196	; 0xc7c
   26be6:	42a3      	cmp	r3, r4
   26be8:	d105      	bne.n	26bf6 <controller_and_baseband_cmd_put+0x68>
		*param_length_out +=
   26bea:	7813      	ldrb	r3, [r2, #0]
   26bec:	3302      	adds	r3, #2
   26bee:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   26bf0:	f7e7 f8d1 	bl	dd96 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   26bf4:	e7f0      	b.n	26bd8 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   26bf6:	2001      	movs	r0, #1
   26bf8:	e7ee      	b.n	26bd8 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_reset();
   26bfa:	f7de fa31 	bl	5060 <sdc_hci_cmd_cb_reset>
   26bfe:	e7eb      	b.n	26bd8 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   26c00:	f7e7 f8c4 	bl	dd8c <sdc_hci_cmd_cb_set_event_mask_page_2>
   26c04:	e7e8      	b.n	26bd8 <controller_and_baseband_cmd_put+0x4a>
		*param_length_out +=
   26c06:	7813      	ldrb	r3, [r2, #0]
   26c08:	3304      	adds	r3, #4
   26c0a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   26c0c:	f7e7 f8b5 	bl	dd7a <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   26c10:	e7e2      	b.n	26bd8 <controller_and_baseband_cmd_put+0x4a>

00026c12 <supported_commands>:
{
   26c12:	b510      	push	{r4, lr}
   26c14:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   26c16:	222e      	movs	r2, #46	; 0x2e
   26c18:	2100      	movs	r1, #0
   26c1a:	f7fb ff2c 	bl	22a76 <memset>
	cmds->hci_disconnect = 1;
   26c1e:	7823      	ldrb	r3, [r4, #0]
   26c20:	f043 0320 	orr.w	r3, r3, #32
   26c24:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   26c26:	78a3      	ldrb	r3, [r4, #2]
   26c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   26c2c:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   26c2e:	7963      	ldrb	r3, [r4, #5]
	cmds->hci_reset = 1;
   26c30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   26c34:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   26c36:	7aa3      	ldrb	r3, [r4, #10]
   26c38:	f043 0304 	orr.w	r3, r3, #4
   26c3c:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   26c3e:	7ba3      	ldrb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   26c40:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   26c44:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   26c46:	7be3      	ldrb	r3, [r4, #15]
   26c48:	f043 0302 	orr.w	r3, r3, #2
   26c4c:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   26c4e:	7da3      	ldrb	r3, [r4, #22]
   26c50:	f043 0304 	orr.w	r3, r3, #4
   26c54:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   26c56:	7e63      	ldrb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   26c58:	f043 0317 	orr.w	r3, r3, #23
   26c5c:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_parameters = 1;
   26c5e:	7ea3      	ldrb	r3, [r4, #26]
	cmds->hci_le_clear_white_list = 1;
   26c60:	f043 03fc 	orr.w	r3, r3, #252	; 0xfc
   26c64:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_rand = 1;
   26c66:	23ff      	movs	r3, #255	; 0xff
   26c68:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_enable_encryption = 1;
   26c6a:	7f23      	ldrb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   26c6c:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   26c70:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   26c72:	f894 3020 	ldrb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   26c76:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   26c7a:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   26c7e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   26c82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   26c86:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   26c8a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_resolving_list_size = 1;
   26c8e:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   26c92:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_set_address_resolution_enable = 1;
   26c96:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   26c9a:	f043 03fe 	orr.w	r3, r3, #254	; 0xfe
   26c9e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   26ca2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   26ca6:	f043 0301 	orr.w	r3, r3, #1
   26caa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   26cae:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   26cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   26cb6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   26cba:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   26cbe:	f043 0304 	orr.w	r3, r3, #4
   26cc2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   26cc6:	bd10      	pop	{r4, pc}

00026cc8 <supported_features>:
{
   26cc8:	b510      	push	{r4, lr}
   26cca:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   26ccc:	2208      	movs	r2, #8
   26cce:	2100      	movs	r1, #0
   26cd0:	f7fb fed1 	bl	22a76 <memset>
	features->bdedr_not_supported = 1;
   26cd4:	7923      	ldrb	r3, [r4, #4]
	features->le_supported = 1;
   26cd6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   26cda:	7123      	strb	r3, [r4, #4]
}
   26cdc:	bd10      	pop	{r4, pc}

00026cde <info_param_cmd_put>:
{
   26cde:	b538      	push	{r3, r4, r5, lr}
   26ce0:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   26ce2:	1d88      	adds	r0, r1, #6
   26ce4:	7865      	ldrb	r5, [r4, #1]
   26ce6:	7823      	ldrb	r3, [r4, #0]
   26ce8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   26cec:	b21b      	sxth	r3, r3
	switch (opcode)	{
   26cee:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   26cf2:	3b01      	subs	r3, #1
   26cf4:	2b08      	cmp	r3, #8
   26cf6:	d820      	bhi.n	26d3a <info_param_cmd_put+0x5c>
   26cf8:	e8df f003 	tbb	[pc, r3]
   26cfc:	1f120b05 	.word	0x1f120b05
   26d00:	1f1f1f1f 	.word	0x1f1f1f1f
   26d04:	19          	.byte	0x19
   26d05:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   26d06:	7813      	ldrb	r3, [r2, #0]
   26d08:	3308      	adds	r3, #8
   26d0a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   26d0c:	f7e7 f91c 	bl	df48 <sdc_hci_cmd_ip_read_local_version_information>
   26d10:	e014      	b.n	26d3c <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   26d12:	7813      	ldrb	r3, [r2, #0]
   26d14:	3340      	adds	r3, #64	; 0x40
   26d16:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   26d18:	f7ff ff7b 	bl	26c12 <supported_commands>
		return 0;
   26d1c:	2000      	movs	r0, #0
   26d1e:	e00d      	b.n	26d3c <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   26d20:	7813      	ldrb	r3, [r2, #0]
   26d22:	3308      	adds	r3, #8
   26d24:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   26d26:	f7ff ffcf 	bl	26cc8 <supported_features>
		return 0;
   26d2a:	2000      	movs	r0, #0
   26d2c:	e006      	b.n	26d3c <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   26d2e:	7813      	ldrb	r3, [r2, #0]
   26d30:	3306      	adds	r3, #6
   26d32:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   26d34:	f7e7 f906 	bl	df44 <sdc_hci_cmd_ip_read_bd_addr>
   26d38:	e000      	b.n	26d3c <info_param_cmd_put+0x5e>
   26d3a:	2001      	movs	r0, #1
}
   26d3c:	bd38      	pop	{r3, r4, r5, pc}

00026d3e <le_supported_features>:
{
   26d3e:	b510      	push	{r4, lr}
   26d40:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   26d42:	2205      	movs	r2, #5
   26d44:	2100      	movs	r1, #0
   26d46:	f7fb fe96 	bl	22a76 <memset>
	features->le_encryption = 1;
   26d4a:	7823      	ldrb	r3, [r4, #0]
	features->extended_scanner_filter_policies = 1;
   26d4c:	f043 03f5 	orr.w	r3, r3, #245	; 0xf5
   26d50:	7023      	strb	r3, [r4, #0]
	features->le_2m_phy = 1;
   26d52:	7863      	ldrb	r3, [r4, #1]
	features->channel_selection_algorithm_2 = 1;
   26d54:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   26d58:	7063      	strb	r3, [r4, #1]
}
   26d5a:	bd10      	pop	{r4, pc}

00026d5c <vs_zephyr_supported_commands>:
{
   26d5c:	b510      	push	{r4, lr}
   26d5e:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   26d60:	2202      	movs	r2, #2
   26d62:	2100      	movs	r1, #0
   26d64:	f7fb fe87 	bl	22a76 <memset>
	cmds->read_version_info = 1;
   26d68:	7823      	ldrb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   26d6a:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   26d6e:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   26d70:	7863      	ldrb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   26d72:	f043 0307 	orr.w	r3, r3, #7
   26d76:	7063      	strb	r3, [r4, #1]
}
   26d78:	bd10      	pop	{r4, pc}

00026d7a <vs_supported_commands>:
{
   26d7a:	b510      	push	{r4, lr}
   26d7c:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   26d7e:	2201      	movs	r2, #1
   26d80:	2100      	movs	r1, #0
   26d82:	f7fb fe78 	bl	22a76 <memset>
	cmds->read_supported_vs_commands = 1;
   26d86:	7823      	ldrb	r3, [r4, #0]
	cmds->event_length_set = 1;
   26d88:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   26d8c:	7023      	strb	r3, [r4, #0]
}
   26d8e:	bd10      	pop	{r4, pc}

00026d90 <le_controller_cmd_put>:
{
   26d90:	b538      	push	{r3, r4, r5, lr}
   26d92:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   26d94:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   26d96:	3106      	adds	r1, #6
   26d98:	7865      	ldrb	r5, [r4, #1]
   26d9a:	7823      	ldrb	r3, [r4, #0]
   26d9c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   26da0:	b21b      	sxth	r3, r3
	switch (opcode)	{
   26da2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   26da6:	3b01      	subs	r3, #1
   26da8:	2b4d      	cmp	r3, #77	; 0x4d
   26daa:	f200 80c4 	bhi.w	26f36 <le_controller_cmd_put+0x1a6>
   26dae:	e8df f003 	tbb	[pc, r3]
   26db2:	2a27      	.short	0x2a27
   26db4:	c239c231 	.word	0xc239c231
   26db8:	c2c2c2c2 	.word	0xc2c2c2c2
   26dbc:	45423f3c 	.word	0x45423f3c
   26dc0:	55524f48 	.word	0x55524f48
   26dc4:	645e5b58 	.word	0x645e5b58
   26dc8:	c2746d67 	.word	0xc2746d67
   26dcc:	c2c277c2 	.word	0xc2c277c2
   26dd0:	7fc2c2c2 	.word	0x7fc2c2c2
   26dd4:	c2c28c85 	.word	0xc2c28c85
   26dd8:	9895928f 	.word	0x9895928f
   26ddc:	a29fc2c2 	.word	0xa29fc2c2
   26de0:	b5b2aca5 	.word	0xb5b2aca5
   26de4:	c2c2c2c2 	.word	0xc2c2c2c2
   26de8:	c2c2c2c2 	.word	0xc2c2c2c2
   26dec:	c2c2c2c2 	.word	0xc2c2c2c2
   26df0:	c2c2c2c2 	.word	0xc2c2c2c2
   26df4:	c2c2c2c2 	.word	0xc2c2c2c2
   26df8:	c2c2c2c2 	.word	0xc2c2c2c2
   26dfc:	bfc2c2b8 	.word	0xbfc2c2b8
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   26e00:	f7e7 f8d4 	bl	dfac <sdc_hci_cmd_le_set_event_mask>
   26e04:	e098      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   26e06:	7813      	ldrb	r3, [r2, #0]
   26e08:	3303      	adds	r3, #3
   26e0a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   26e0c:	4608      	mov	r0, r1
   26e0e:	f7e7 f8b1 	bl	df74 <sdc_hci_cmd_le_read_buffer_size>
   26e12:	e091      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   26e14:	7813      	ldrb	r3, [r2, #0]
   26e16:	3308      	adds	r3, #8
   26e18:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   26e1a:	4608      	mov	r0, r1
   26e1c:	f7ff ff8f 	bl	26d3e <le_supported_features>
		return 0;
   26e20:	2000      	movs	r0, #0
   26e22:	e089      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   26e24:	f7e7 f8cd 	bl	dfc2 <sdc_hci_cmd_le_set_random_address>
   26e28:	e086      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   26e2a:	f7e7 f8d0 	bl	dfce <sdc_hci_cmd_le_set_scan_params>
   26e2e:	e083      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   26e30:	f7e7 f8cb 	bl	dfca <sdc_hci_cmd_le_set_scan_enable>
   26e34:	e080      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   26e36:	f7e7 f893 	bl	df60 <sdc_hci_cmd_le_create_conn>
   26e3a:	e07d      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_create_conn_cancel();
   26e3c:	f7e7 f892 	bl	df64 <sdc_hci_cmd_le_create_conn_cancel>
   26e40:	e07a      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   26e42:	7813      	ldrb	r3, [r2, #0]
   26e44:	3301      	adds	r3, #1
   26e46:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   26e48:	4608      	mov	r0, r1
   26e4a:	f7e7 f8a3 	bl	df94 <sdc_hci_cmd_le_read_white_list_size>
   26e4e:	e073      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_clear_white_list();
   26e50:	f7e7 f882 	bl	df58 <sdc_hci_cmd_le_clear_white_list>
   26e54:	e070      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   26e56:	f7e7 f87b 	bl	df50 <sdc_hci_cmd_le_add_device_to_white_list>
   26e5a:	e06d      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   26e5c:	f7e7 f89e 	bl	df9c <sdc_hci_cmd_le_remove_device_from_white_list>
   26e60:	e06a      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   26e62:	f7e7 f87b 	bl	df5c <sdc_hci_cmd_le_conn_update>
   26e66:	e067      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   26e68:	f7e7 f8a5 	bl	dfb6 <sdc_hci_cmd_le_set_host_channel_classification>
   26e6c:	e064      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   26e6e:	7813      	ldrb	r3, [r2, #0]
   26e70:	3307      	adds	r3, #7
   26e72:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   26e74:	f7e7 f880 	bl	df78 <sdc_hci_cmd_le_read_channel_map>
   26e78:	e05e      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   26e7a:	f7e7 f883 	bl	df84 <sdc_hci_cmd_le_read_remote_features>
   26e7e:	e05b      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   26e80:	7813      	ldrb	r3, [r2, #0]
   26e82:	3310      	adds	r3, #16
   26e84:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   26e86:	f7e7 f871 	bl	df6c <sdc_hci_cmd_le_encrypt>
   26e8a:	e055      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   26e8c:	7813      	ldrb	r3, [r2, #0]
   26e8e:	3308      	adds	r3, #8
   26e90:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   26e92:	4608      	mov	r0, r1
   26e94:	f7e7 f86c 	bl	df70 <sdc_hci_cmd_le_rand>
   26e98:	e04e      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   26e9a:	f7e7 f865 	bl	df68 <sdc_hci_cmd_le_enable_encryption>
   26e9e:	e04b      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   26ea0:	7813      	ldrb	r3, [r2, #0]
   26ea2:	3308      	adds	r3, #8
   26ea4:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   26ea6:	4608      	mov	r0, r1
   26ea8:	f7ff fe53 	bl	26b52 <le_read_supported_states>
		return 0;
   26eac:	2000      	movs	r0, #0
   26eae:	e043      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   26eb0:	7813      	ldrb	r3, [r2, #0]
   26eb2:	3302      	adds	r3, #2
   26eb4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   26eb6:	f7e7 f875 	bl	dfa4 <sdc_hci_cmd_le_set_data_length>
   26eba:	e03d      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		*param_length_out +=
   26ebc:	7813      	ldrb	r3, [r2, #0]
   26ebe:	3304      	adds	r3, #4
   26ec0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   26ec2:	4608      	mov	r0, r1
   26ec4:	f7e7 f862 	bl	df8c <sdc_hci_cmd_le_read_suggested_default_data_length>
   26ec8:	e036      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   26eca:	f7e7 f882 	bl	dfd2 <sdc_hci_cmd_le_write_suggested_default_data_length>
   26ece:	e033      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   26ed0:	f7e7 f83c 	bl	df4c <sdc_hci_cmd_le_add_device_to_resolving_list>
   26ed4:	e030      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   26ed6:	f7e7 f85f 	bl	df98 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   26eda:	e02d      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_clear_resolving_list();
   26edc:	f7e7 f83a 	bl	df54 <sdc_hci_cmd_le_clear_resolving_list>
   26ee0:	e02a      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   26ee2:	7813      	ldrb	r3, [r2, #0]
   26ee4:	3301      	adds	r3, #1
   26ee6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   26ee8:	4608      	mov	r0, r1
   26eea:	f7e7 f84d 	bl	df88 <sdc_hci_cmd_le_read_resolving_list_size>
   26eee:	e023      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   26ef0:	f7e7 f856 	bl	dfa0 <sdc_hci_cmd_le_set_address_resolution_enable>
   26ef4:	e020      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   26ef6:	f7e7 f866 	bl	dfc6 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   26efa:	e01d      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   26efc:	7813      	ldrb	r3, [r2, #0]
   26efe:	3308      	adds	r3, #8
   26f00:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   26f02:	4608      	mov	r0, r1
   26f04:	f7e7 f83a 	bl	df7c <sdc_hci_cmd_le_read_max_data_length>
   26f08:	e016      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   26f0a:	7813      	ldrb	r3, [r2, #0]
   26f0c:	3304      	adds	r3, #4
   26f0e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   26f10:	f7e7 f836 	bl	df80 <sdc_hci_cmd_le_read_phy>
   26f14:	e010      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   26f16:	f7e7 f847 	bl	dfa8 <sdc_hci_cmd_le_set_default_phy>
   26f1a:	e00d      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   26f1c:	f7e7 f84d 	bl	dfba <sdc_hci_cmd_le_set_phy>
   26f20:	e00a      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   26f22:	7813      	ldrb	r3, [r2, #0]
   26f24:	3302      	adds	r3, #2
   26f26:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   26f28:	4608      	mov	r0, r1
   26f2a:	f7e7 f831 	bl	df90 <sdc_hci_cmd_le_read_transmit_power>
   26f2e:	e003      	b.n	26f38 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   26f30:	f7e7 f845 	bl	dfbe <sdc_hci_cmd_le_set_privacy_mode>
   26f34:	e000      	b.n	26f38 <le_controller_cmd_put+0x1a8>
   26f36:	2001      	movs	r0, #1
}
   26f38:	bd38      	pop	{r3, r4, r5, pc}

00026f3a <vs_cmd_put>:
{
   26f3a:	b538      	push	{r3, r4, r5, lr}
   26f3c:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   26f3e:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   26f40:	3106      	adds	r1, #6
   26f42:	7865      	ldrb	r5, [r4, #1]
   26f44:	7823      	ldrb	r3, [r4, #0]
   26f46:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   26f4a:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   26f4e:	42a3      	cmp	r3, r4
   26f50:	d90f      	bls.n	26f72 <vs_cmd_put+0x38>
   26f52:	f64f 5405 	movw	r4, #64773	; 0xfd05
   26f56:	42a3      	cmp	r3, r4
   26f58:	d85b      	bhi.n	27012 <vs_cmd_put+0xd8>
   26f5a:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   26f5e:	d319      	bcc.n	26f94 <vs_cmd_put+0x5a>
   26f60:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   26f64:	2b05      	cmp	r3, #5
   26f66:	d850      	bhi.n	2700a <vs_cmd_put+0xd0>
   26f68:	e8df f003 	tbb	[pc, r3]
   26f6c:	46434038 	.word	0x46434038
   26f70:	4c49      	.short	0x4c49
   26f72:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   26f76:	d801      	bhi.n	26f7c <vs_cmd_put+0x42>
   26f78:	2001      	movs	r0, #1
}
   26f7a:	bd38      	pop	{r3, r4, r5, pc}
   26f7c:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   26f80:	3b01      	subs	r3, #1
   26f82:	2b09      	cmp	r3, #9
   26f84:	d843      	bhi.n	2700e <vs_cmd_put+0xd4>
   26f86:	e8df f003 	tbb	[pc, r3]
   26f8a:	0e07      	.short	0x0e07
   26f8c:	26424242 	.word	0x26424242
   26f90:	1f164242 	.word	0x1f164242
	switch (opcode)	{
   26f94:	2001      	movs	r0, #1
   26f96:	e7f0      	b.n	26f7a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   26f98:	7813      	ldrb	r3, [r2, #0]
   26f9a:	330c      	adds	r3, #12
   26f9c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   26f9e:	4608      	mov	r0, r1
   26fa0:	f7de f872 	bl	5088 <sdc_hci_cmd_vs_zephyr_read_version_info>
   26fa4:	e7e9      	b.n	26f7a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   26fa6:	7813      	ldrb	r3, [r2, #0]
   26fa8:	3340      	adds	r3, #64	; 0x40
   26faa:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   26fac:	4608      	mov	r0, r1
   26fae:	f7ff fed5 	bl	26d5c <vs_zephyr_supported_commands>
		return 0;
   26fb2:	2000      	movs	r0, #0
   26fb4:	e7e1      	b.n	26f7a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   26fb6:	7813      	ldrb	r3, [r2, #0]
   26fb8:	3301      	adds	r3, #1
   26fba:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   26fbc:	3316      	adds	r3, #22
   26fbe:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   26fc0:	4608      	mov	r0, r1
   26fc2:	f7e6 ff72 	bl	deaa <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   26fc6:	e7d8      	b.n	26f7a <vs_cmd_put+0x40>
		*param_length_out +=
   26fc8:	7813      	ldrb	r3, [r2, #0]
   26fca:	3320      	adds	r3, #32
   26fcc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   26fce:	4608      	mov	r0, r1
   26fd0:	f7e6 ff1e 	bl	de10 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   26fd4:	e7d1      	b.n	26f7a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   26fd6:	f7e6 ffb3 	bl	df40 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   26fda:	e7ce      	b.n	26f7a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   26fdc:	7813      	ldrb	r3, [r2, #0]
   26fde:	3340      	adds	r3, #64	; 0x40
   26fe0:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   26fe2:	4608      	mov	r0, r1
   26fe4:	f7ff fec9 	bl	26d7a <vs_supported_commands>
		return 0;
   26fe8:	2000      	movs	r0, #0
   26fea:	e7c6      	b.n	26f7a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   26fec:	f7e6 ff09 	bl	de02 <sdc_hci_cmd_vs_llpm_mode_set>
   26ff0:	e7c3      	b.n	26f7a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   26ff2:	f7e6 feda 	bl	ddaa <sdc_hci_cmd_vs_conn_update>
   26ff6:	e7c0      	b.n	26f7a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   26ff8:	f7e6 fecf 	bl	dd9a <sdc_hci_cmd_vs_conn_event_extend>
   26ffc:	e7bd      	b.n	26f7a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   26ffe:	f7e6 ff02 	bl	de06 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   27002:	e7ba      	b.n	26f7a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   27004:	f7e6 fefb 	bl	ddfe <sdc_hci_cmd_vs_event_length_set>
   27008:	e7b7      	b.n	26f7a <vs_cmd_put+0x40>
	switch (opcode)	{
   2700a:	2001      	movs	r0, #1
   2700c:	e7b5      	b.n	26f7a <vs_cmd_put+0x40>
   2700e:	2001      	movs	r0, #1
   27010:	e7b3      	b.n	26f7a <vs_cmd_put+0x40>
   27012:	2001      	movs	r0, #1
   27014:	e7b1      	b.n	26f7a <vs_cmd_put+0x40>

00027016 <cmd_put>:
{
   27016:	b570      	push	{r4, r5, r6, lr}
   27018:	b082      	sub	sp, #8
   2701a:	460e      	mov	r6, r1
   2701c:	7842      	ldrb	r2, [r0, #1]
   2701e:	7805      	ldrb	r5, [r0, #0]
   27020:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   27024:	2304      	movs	r3, #4
   27026:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   2702a:	0893      	lsrs	r3, r2, #2
   2702c:	2a23      	cmp	r2, #35	; 0x23
   2702e:	d80b      	bhi.n	27048 <cmd_put+0x32>
   27030:	b21a      	sxth	r2, r3
   27032:	2a00      	cmp	r2, #0
   27034:	d03a      	beq.n	270ac <cmd_put+0x96>
   27036:	3b01      	subs	r3, #1
   27038:	2b07      	cmp	r3, #7
   2703a:	d839      	bhi.n	270b0 <cmd_put+0x9a>
   2703c:	e8df f003 	tbb	[pc, r3]
   27040:	241e381a 	.word	0x241e381a
   27044:	3038382a 	.word	0x3038382a
   27048:	2b3f      	cmp	r3, #63	; 0x3f
   2704a:	d105      	bne.n	27058 <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   2704c:	f10d 0207 	add.w	r2, sp, #7
   27050:	f7ff ff73 	bl	26f3a <vs_cmd_put>
   27054:	4604      	mov	r4, r0
		break;
   27056:	e000      	b.n	2705a <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   27058:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   2705a:	4628      	mov	r0, r5
   2705c:	f7ff fd26 	bl	26aac <command_generates_command_complete_event>
   27060:	b108      	cbz	r0, 27066 <cmd_put+0x50>
   27062:	2c01      	cmp	r4, #1
   27064:	d126      	bne.n	270b4 <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   27066:	4622      	mov	r2, r4
   27068:	4629      	mov	r1, r5
   2706a:	4630      	mov	r0, r6
   2706c:	f7ff fd5d 	bl	26b2a <encode_command_status>
}
   27070:	b002      	add	sp, #8
   27072:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   27074:	f7ff fd74 	bl	26b60 <link_control_cmd_put>
   27078:	4604      	mov	r4, r0
		break;
   2707a:	e7ee      	b.n	2705a <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   2707c:	f10d 0207 	add.w	r2, sp, #7
   27080:	f7ff fd85 	bl	26b8e <controller_and_baseband_cmd_put>
   27084:	4604      	mov	r4, r0
		break;
   27086:	e7e8      	b.n	2705a <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   27088:	f10d 0207 	add.w	r2, sp, #7
   2708c:	f7ff fe27 	bl	26cde <info_param_cmd_put>
   27090:	4604      	mov	r4, r0
		break;
   27092:	e7e2      	b.n	2705a <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   27094:	f10d 0207 	add.w	r2, sp, #7
   27098:	f7ff fd60 	bl	26b5c <status_param_cmd_put>
   2709c:	4604      	mov	r4, r0
		break;
   2709e:	e7dc      	b.n	2705a <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   270a0:	f10d 0207 	add.w	r2, sp, #7
   270a4:	f7ff fe74 	bl	26d90 <le_controller_cmd_put>
   270a8:	4604      	mov	r4, r0
		break;
   270aa:	e7d6      	b.n	2705a <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   270ac:	2401      	movs	r4, #1
   270ae:	e7d4      	b.n	2705a <cmd_put+0x44>
   270b0:	2401      	movs	r4, #1
   270b2:	e7d2      	b.n	2705a <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   270b4:	4623      	mov	r3, r4
   270b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   270ba:	4629      	mov	r1, r5
   270bc:	4630      	mov	r0, r6
   270be:	f7ff fd3d 	bl	26b3c <encode_command_complete_header>
}
   270c2:	e7d5      	b.n	27070 <cmd_put+0x5a>

000270c4 <m_assert_handler>:
	k_oops();
   270c4:	4040      	eors	r0, r0
   270c6:	f380 8811 	msr	BASEPRI, r0
   270ca:	f04f 0003 	mov.w	r0, #3
   270ce:	df02      	svc	2
}
   270d0:	4770      	bx	lr

000270d2 <m_config_clock_source_get>:
}
   270d2:	2001      	movs	r0, #1
   270d4:	4770      	bx	lr

000270d6 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   270d6:	4668      	mov	r0, sp
   270d8:	f020 0107 	bic.w	r1, r0, #7
   270dc:	468d      	mov	sp, r1
   270de:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   270e0:	f7dc fbdc 	bl	389c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   270e4:	f7ec feac 	bl	13e40 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   270e8:	f7ec ffb6 	bl	14058 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   270ec:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   270f0:	4685      	mov	sp, r0
   270f2:	4770      	bx	lr

000270f4 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   270f4:	4668      	mov	r0, sp
   270f6:	f020 0107 	bic.w	r1, r0, #7
   270fa:	468d      	mov	sp, r1
   270fc:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   270fe:	f7dc fb4f 	bl	37a0 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   27102:	f7ec fe9d 	bl	13e40 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   27106:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2710a:	4685      	mov	sp, r0
   2710c:	4770      	bx	lr

0002710e <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2710e:	4668      	mov	r0, sp
   27110:	f020 0107 	bic.w	r1, r0, #7
   27114:	468d      	mov	sp, r1
   27116:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   27118:	f7e6 f893 	bl	d242 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2711c:	f7ec fe90 	bl	13e40 <_arch_isr_direct_pm>
   27120:	f7ec ff9a 	bl	14058 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   27124:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   27128:	4685      	mov	sp, r0
   2712a:	4770      	bx	lr

0002712c <nrfx_clock_stop>:
	switch (domain) {
   2712c:	2801      	cmp	r0, #1
   2712e:	d000      	beq.n	27132 <nrfx_clock_stop+0x6>
   27130:	4770      	bx	lr
{
   27132:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   27134:	f7dd f9a8 	bl	4488 <mpsl_clock_hfclk_release>
}
   27138:	bd08      	pop	{r3, pc}

0002713a <nrfx_clock_enable>:
}
   2713a:	4770      	bx	lr

0002713c <nrfx_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   2713c:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   2713e:	f7dc ffc1 	bl	40c4 <MPSL_IRQ_CLOCK_Handler>
}
   27142:	bd08      	pop	{r3, pc}

00027144 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   27144:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   27146:	f7f7 fb47 	bl	1e7d8 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   2714a:	bd08      	pop	{r3, pc}

0002714c <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   2714c:	b510      	push	{r4, lr}
   2714e:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   27150:	f7ec fd38 	bl	13bc4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   27154:	f7ec fdf4 	bl	13d40 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   27158:	4620      	mov	r0, r4
   2715a:	f7ff fff3 	bl	27144 <hw_cc3xx_init_internal>
	return res;
}
   2715e:	bd10      	pop	{r4, pc}

00027160 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   27160:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   27162:	4780      	blx	r0
}
   27164:	bd08      	pop	{r3, pc}

00027166 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   27166:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   27168:	f000 fe02 	bl	27d70 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   2716c:	bd08      	pop	{r3, pc}

0002716e <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   2716e:	2301      	movs	r3, #1
   27170:	4083      	lsls	r3, r0
   27172:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   27176:	bf14      	ite	ne
   27178:	2001      	movne	r0, #1
   2717a:	2000      	moveq	r0, #0
   2717c:	4770      	bx	lr

0002717e <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   2717e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27182:	f44f 7260 	mov.w	r2, #896	; 0x380
   27186:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2718a:	4770      	bx	lr

0002718c <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   2718c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27190:	f44f 7260 	mov.w	r2, #896	; 0x380
   27194:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   27198:	4770      	bx	lr

0002719a <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   2719a:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   2719c:	f7f3 fd34 	bl	1ac08 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
   271a0:	f7ff ffcc 	bl	2713c <nrfx_clock_irq_handler>
}
   271a4:	bd08      	pop	{r3, pc}

000271a6 <nrf52_errata_223>:
}
   271a6:	2000      	movs	r0, #0
   271a8:	4770      	bx	lr

000271aa <nrfx_usbd_consumer>:
{
   271aa:	b430      	push	{r4, r5}
    size_t size = p_transfer->size;
   271ac:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   271ae:	42a3      	cmp	r3, r4
   271b0:	d908      	bls.n	271c4 <nrfx_usbd_consumer+0x1a>
        p_next->size = 0;
   271b2:	2500      	movs	r5, #0
   271b4:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   271b6:	6809      	ldr	r1, [r1, #0]
   271b8:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
   271ba:	429a      	cmp	r2, r3
   271bc:	d00b      	beq.n	271d6 <nrfx_usbd_consumer+0x2c>
   271be:	2000      	movs	r0, #0
}
   271c0:	bc30      	pop	{r4, r5}
   271c2:	4770      	bx	lr
        p_next->size = data_size;
   271c4:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   271c6:	680d      	ldr	r5, [r1, #0]
   271c8:	6005      	str	r5, [r0, #0]
        size -= data_size;
   271ca:	1ae4      	subs	r4, r4, r3
        p_transfer->size = size;
   271cc:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   271ce:	6808      	ldr	r0, [r1, #0]
   271d0:	4418      	add	r0, r3
   271d2:	6008      	str	r0, [r1, #0]
   271d4:	e7f1      	b.n	271ba <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
   271d6:	b90c      	cbnz	r4, 271dc <nrfx_usbd_consumer+0x32>
   271d8:	2000      	movs	r0, #0
   271da:	e7f1      	b.n	271c0 <nrfx_usbd_consumer+0x16>
   271dc:	2001      	movs	r0, #1
   271de:	e7ef      	b.n	271c0 <nrfx_usbd_consumer+0x16>

000271e0 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   271e0:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   271e2:	4293      	cmp	r3, r2
   271e4:	d800      	bhi.n	271e8 <nrfx_usbd_feeder_ram+0x8>
    size_t tx_size = p_transfer->size;
   271e6:	461a      	mov	r2, r3
    p_next->p_data = p_transfer->p_data;
   271e8:	680b      	ldr	r3, [r1, #0]
   271ea:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   271ec:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   271ee:	6848      	ldr	r0, [r1, #4]
   271f0:	1a80      	subs	r0, r0, r2
   271f2:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   271f4:	680b      	ldr	r3, [r1, #0]
   271f6:	441a      	add	r2, r3
   271f8:	600a      	str	r2, [r1, #0]
}
   271fa:	3800      	subs	r0, #0
   271fc:	bf18      	it	ne
   271fe:	2001      	movne	r0, #1
   27200:	4770      	bx	lr

00027202 <nrfx_usbd_feeder_ram_zlp>:
    size_t tx_size = p_transfer->size;
   27202:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   27204:	4293      	cmp	r3, r2
   27206:	d800      	bhi.n	2720a <nrfx_usbd_feeder_ram_zlp+0x8>
    size_t tx_size = p_transfer->size;
   27208:	461a      	mov	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   2720a:	b162      	cbz	r2, 27226 <nrfx_usbd_feeder_ram_zlp+0x24>
   2720c:	680b      	ldr	r3, [r1, #0]
   2720e:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   27210:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   27212:	684b      	ldr	r3, [r1, #4]
   27214:	1a9b      	subs	r3, r3, r2
   27216:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   27218:	680b      	ldr	r3, [r1, #0]
   2721a:	4413      	add	r3, r2
   2721c:	600b      	str	r3, [r1, #0]
}
   2721e:	1e10      	subs	r0, r2, #0
   27220:	bf18      	it	ne
   27222:	2001      	movne	r0, #1
   27224:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   27226:	2300      	movs	r3, #0
   27228:	e7f1      	b.n	2720e <nrfx_usbd_feeder_ram_zlp+0xc>

0002722a <ev_started_handler>:
}
   2722a:	4770      	bx	lr

0002722c <usbd_dma_scheduler_algorithm>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   2722c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
   27230:	b110      	cbz	r0, 27238 <usbd_dma_scheduler_algorithm+0xc>
  return __builtin_clz(value);
   27232:	fab0 f080 	clz	r0, r0
   27236:	4770      	bx	lr
    return 32U;
   27238:	2020      	movs	r0, #32
}
   2723a:	4770      	bx	lr

0002723c <nrfx_usbd_feeder_flash>:
{
   2723c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27240:	4606      	mov	r6, r0
   27242:	460c      	mov	r4, r1
   27244:	4615      	mov	r5, r2
    size_t tx_size  = p_transfer->size;
   27246:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   2724a:	f7f4 fbf7 	bl	1ba3c <nrfx_usbd_feeder_buffer_get>
   2724e:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   27250:	45a8      	cmp	r8, r5
   27252:	d800      	bhi.n	27256 <nrfx_usbd_feeder_flash+0x1a>
    size_t tx_size  = p_transfer->size;
   27254:	4645      	mov	r5, r8
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   27256:	462a      	mov	r2, r5
   27258:	6821      	ldr	r1, [r4, #0]
   2725a:	4638      	mov	r0, r7
   2725c:	f7fb fbe7 	bl	22a2e <memcpy>
    p_next->p_data.tx = p_buffer;
   27260:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
   27262:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
   27264:	6860      	ldr	r0, [r4, #4]
   27266:	1b40      	subs	r0, r0, r5
   27268:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   2726a:	6822      	ldr	r2, [r4, #0]
   2726c:	442a      	add	r2, r5
   2726e:	6022      	str	r2, [r4, #0]
}
   27270:	3800      	subs	r0, #0
   27272:	bf18      	it	ne
   27274:	2001      	movne	r0, #1
   27276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002727a <nrfx_usbd_feeder_flash_zlp>:
{
   2727a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2727e:	4606      	mov	r6, r0
   27280:	460d      	mov	r5, r1
   27282:	4614      	mov	r4, r2
    size_t tx_size  = p_transfer->size;
   27284:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   27288:	f7f4 fbd8 	bl	1ba3c <nrfx_usbd_feeder_buffer_get>
   2728c:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   2728e:	45a0      	cmp	r8, r4
   27290:	d800      	bhi.n	27294 <nrfx_usbd_feeder_flash_zlp+0x1a>
    size_t tx_size  = p_transfer->size;
   27292:	4644      	mov	r4, r8
    if (tx_size != 0)
   27294:	b96c      	cbnz	r4, 272b2 <nrfx_usbd_feeder_flash_zlp+0x38>
        p_next->p_data.tx = NULL;
   27296:	2300      	movs	r3, #0
   27298:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
   2729a:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   2729c:	686b      	ldr	r3, [r5, #4]
   2729e:	1b1b      	subs	r3, r3, r4
   272a0:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   272a2:	682b      	ldr	r3, [r5, #0]
   272a4:	4423      	add	r3, r4
   272a6:	602b      	str	r3, [r5, #0]
}
   272a8:	1e20      	subs	r0, r4, #0
   272aa:	bf18      	it	ne
   272ac:	2001      	movne	r0, #1
   272ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   272b2:	4622      	mov	r2, r4
   272b4:	6829      	ldr	r1, [r5, #0]
   272b6:	4638      	mov	r0, r7
   272b8:	f7fb fbb9 	bl	22a2e <memcpy>
        p_next->p_data.tx = p_buffer;
   272bc:	6037      	str	r7, [r6, #0]
   272be:	e7ec      	b.n	2729a <nrfx_usbd_feeder_flash_zlp+0x20>

000272c0 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   272c0:	b148      	cbz	r0, 272d6 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   272c2:	68c3      	ldr	r3, [r0, #12]
   272c4:	8818      	ldrh	r0, [r3, #0]
   272c6:	f3c0 0008 	ubfx	r0, r0, #0, #9
   272ca:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   272ce:	bf14      	ite	ne
   272d0:	2000      	movne	r0, #0
   272d2:	2001      	moveq	r0, #1
   272d4:	4770      	bx	lr
		return false;
   272d6:	2000      	movs	r0, #0
}
   272d8:	4770      	bx	lr

000272da <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   272da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   272dc:	4605      	mov	r5, r0
   272de:	460e      	mov	r6, r1
	__asm__ volatile(
   272e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   272e4:	f3ef 8711 	mrs	r7, BASEPRI
   272e8:	f383 8812 	msr	BASEPRI_MAX, r3
   272ec:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   272f0:	f7f6 fda6 	bl	1de40 <z_impl_z_current_get>
   272f4:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   272f6:	4631      	mov	r1, r6
   272f8:	4628      	mov	r0, r5
   272fa:	f7ff fac5 	bl	26888 <k_sys_fatal_error_handler>
	__asm__ volatile(
   272fe:	f387 8811 	msr	BASEPRI, r7
   27302:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   27306:	4620      	mov	r0, r4
   27308:	f7ed f852 	bl	143b0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2730c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002730e <k_heap_init>:
{
   2730e:	b510      	push	{r4, lr}
   27310:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   27314:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   27316:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   27318:	f7fa fbb4 	bl	21a84 <sys_heap_init>
}
   2731c:	bd10      	pop	{r4, pc}

0002731e <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2731e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27322:	b087      	sub	sp, #28
   27324:	4680      	mov	r8, r0
   27326:	9103      	str	r1, [sp, #12]
   27328:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2732a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2732e:	f000 fd25 	bl	27d7c <sys_clock_timeout_end_calc>
   27332:	4681      	mov	r9, r0
   27334:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   27336:	f108 0314 	add.w	r3, r8, #20
   2733a:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   2733c:	f04f 0340 	mov.w	r3, #64	; 0x40
   27340:	f3ef 8511 	mrs	r5, BASEPRI
   27344:	f383 8812 	msr	BASEPRI_MAX, r3
   27348:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   2734c:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   27350:	4654      	mov	r4, sl

	while (ret == NULL) {
   27352:	e00f      	b.n	27374 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   27354:	e9cd 6700 	strd	r6, r7, [sp]
   27358:	f108 020c 	add.w	r2, r8, #12
   2735c:	4629      	mov	r1, r5
   2735e:	9805      	ldr	r0, [sp, #20]
   27360:	f7f6 fb76 	bl	1da50 <z_pend_curr>
   27364:	f04f 0340 	mov.w	r3, #64	; 0x40
   27368:	f3ef 8511 	mrs	r5, BASEPRI
   2736c:	f383 8812 	msr	BASEPRI_MAX, r3
   27370:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   27374:	b9b4      	cbnz	r4, 273a4 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   27376:	9a04      	ldr	r2, [sp, #16]
   27378:	9903      	ldr	r1, [sp, #12]
   2737a:	4640      	mov	r0, r8
   2737c:	f7fa faf4 	bl	21968 <sys_heap_aligned_alloc>
   27380:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   27382:	f7f6 ff1b 	bl	1e1bc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   27386:	b96c      	cbnz	r4, 273a4 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   27388:	ebb9 0600 	subs.w	r6, r9, r0
   2738c:	eb6b 0701 	sbc.w	r7, fp, r1
   27390:	2e01      	cmp	r6, #1
   27392:	f177 0300 	sbcs.w	r3, r7, #0
   27396:	db05      	blt.n	273a4 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   27398:	f1ba 0f00 	cmp.w	sl, #0
   2739c:	d1da      	bne.n	27354 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   2739e:	f04f 0a01 	mov.w	sl, #1
   273a2:	e7d7      	b.n	27354 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   273a4:	f385 8811 	msr	BASEPRI, r5
   273a8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   273ac:	4620      	mov	r0, r4
   273ae:	b007      	add	sp, #28
   273b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000273b4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   273b4:	b570      	push	{r4, r5, r6, lr}
   273b6:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   273b8:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   273bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   273c0:	f3ef 8511 	mrs	r5, BASEPRI
   273c4:	f383 8812 	msr	BASEPRI_MAX, r3
   273c8:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   273cc:	f7fa fa6a 	bl	218a4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   273d0:	f104 000c 	add.w	r0, r4, #12
   273d4:	f000 fc0a 	bl	27bec <z_unpend_all>
   273d8:	b920      	cbnz	r0, 273e4 <k_heap_free+0x30>
	__asm__ volatile(
   273da:	f385 8811 	msr	BASEPRI, r5
   273de:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   273e2:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   273e4:	4629      	mov	r1, r5
   273e6:	4630      	mov	r0, r6
   273e8:	f7f6 f9ce 	bl	1d788 <z_reschedule>
   273ec:	e7f9      	b.n	273e2 <k_heap_free+0x2e>

000273ee <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   273ee:	68c2      	ldr	r2, [r0, #12]
   273f0:	6903      	ldr	r3, [r0, #16]
   273f2:	431a      	orrs	r2, r3
   273f4:	f012 0203 	ands.w	r2, r2, #3
   273f8:	d10d      	bne.n	27416 <create_free_list+0x28>
	slab->free_list = NULL;
   273fa:	2100      	movs	r1, #0
   273fc:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   273fe:	e005      	b.n	2740c <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   27400:	6941      	ldr	r1, [r0, #20]
   27402:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   27404:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   27406:	68c1      	ldr	r1, [r0, #12]
   27408:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2740a:	3201      	adds	r2, #1
   2740c:	6881      	ldr	r1, [r0, #8]
   2740e:	4291      	cmp	r1, r2
   27410:	d8f6      	bhi.n	27400 <create_free_list+0x12>
	return 0;
   27412:	2000      	movs	r0, #0
   27414:	4770      	bx	lr
		return -EINVAL;
   27416:	f06f 0015 	mvn.w	r0, #21
}
   2741a:	4770      	bx	lr

0002741c <k_mem_slab_init>:
{
   2741c:	b510      	push	{r4, lr}
   2741e:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   27420:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   27422:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   27424:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   27426:	2300      	movs	r3, #0
   27428:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   2742a:	f7ff ffe0 	bl	273ee <create_free_list>
	if (rc < 0) {
   2742e:	2800      	cmp	r0, #0
   27430:	db01      	blt.n	27436 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   27432:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   27434:	6064      	str	r4, [r4, #4]
}
   27436:	bd10      	pop	{r4, pc}

00027438 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   27438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2743a:	4604      	mov	r4, r0
   2743c:	460d      	mov	r5, r1
	__asm__ volatile(
   2743e:	f04f 0340 	mov.w	r3, #64	; 0x40
   27442:	f3ef 8611 	mrs	r6, BASEPRI
   27446:	f383 8812 	msr	BASEPRI_MAX, r3
   2744a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2744e:	6943      	ldr	r3, [r0, #20]
   27450:	b163      	cbz	r3, 2746c <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   27452:	682b      	ldr	r3, [r5, #0]
   27454:	6962      	ldr	r2, [r4, #20]
   27456:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   27458:	682b      	ldr	r3, [r5, #0]
   2745a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2745c:	69a3      	ldr	r3, [r4, #24]
   2745e:	3b01      	subs	r3, #1
   27460:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   27462:	f386 8811 	msr	BASEPRI, r6
   27466:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2746a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2746c:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   27470:	f000 fb91 	bl	27b96 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   27474:	2800      	cmp	r0, #0
   27476:	d0ec      	beq.n	27452 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   27478:	682a      	ldr	r2, [r5, #0]
   2747a:	2100      	movs	r1, #0
   2747c:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   27480:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   27482:	f000 faed 	bl	27a60 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   27486:	4631      	mov	r1, r6
   27488:	4638      	mov	r0, r7
   2748a:	f7f6 f97d 	bl	1d788 <z_reschedule>
			return;
   2748e:	e7ec      	b.n	2746a <k_mem_slab_free+0x32>

00027490 <setup_thread_stack>:
{
   27490:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   27492:	3207      	adds	r2, #7
   27494:	f022 0207 	bic.w	r2, r2, #7
   27498:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2749c:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   274a0:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   274a4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   274a8:	2200      	movs	r2, #0
   274aa:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   274ae:	18c8      	adds	r0, r1, r3
   274b0:	bc10      	pop	{r4}
   274b2:	4770      	bx	lr

000274b4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   274b4:	f3ef 8005 	mrs	r0, IPSR
}
   274b8:	3800      	subs	r0, #0
   274ba:	bf18      	it	ne
   274bc:	2001      	movne	r0, #1
   274be:	4770      	bx	lr

000274c0 <z_impl_k_thread_start>:
{
   274c0:	b508      	push	{r3, lr}
	z_sched_start(thread);
   274c2:	f7f6 fa8b 	bl	1d9dc <z_sched_start>
}
   274c6:	bd08      	pop	{r3, pc}

000274c8 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   274c8:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   274ca:	2400      	movs	r4, #0
   274cc:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   274ce:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   274d0:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   274d2:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   274d4:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   274d6:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   274d8:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   274da:	bc10      	pop	{r4}
   274dc:	4770      	bx	lr

000274de <z_impl_k_thread_create>:
{
   274de:	b5f0      	push	{r4, r5, r6, r7, lr}
   274e0:	b087      	sub	sp, #28
   274e2:	4604      	mov	r4, r0
   274e4:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   274e8:	2500      	movs	r5, #0
   274ea:	9505      	str	r5, [sp, #20]
   274ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
   274ee:	9504      	str	r5, [sp, #16]
   274f0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   274f2:	9503      	str	r5, [sp, #12]
   274f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   274f6:	9502      	str	r5, [sp, #8]
   274f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   274fa:	9501      	str	r5, [sp, #4]
   274fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   274fe:	9500      	str	r5, [sp, #0]
   27500:	f7f5 fcf6 	bl	1cef0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   27504:	f1b7 3fff 	cmp.w	r7, #4294967295
   27508:	bf08      	it	eq
   2750a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2750e:	d102      	bne.n	27516 <z_impl_k_thread_create+0x38>
}
   27510:	4620      	mov	r0, r4
   27512:	b007      	add	sp, #28
   27514:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   27516:	4632      	mov	r2, r6
   27518:	463b      	mov	r3, r7
   2751a:	4620      	mov	r0, r4
   2751c:	f7f5 fcd6 	bl	1cecc <schedule_new_thread>
   27520:	e7f6      	b.n	27510 <z_impl_k_thread_create+0x32>

00027522 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   27522:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   27524:	f7eb fc0a 	bl	12d3c <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   27528:	f7ff f93e 	bl	267a8 <sys_clock_idle_exit>
}
   2752c:	bd08      	pop	{r3, pc}

0002752e <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   2752e:	b508      	push	{r3, lr}
	__asm__ volatile(
   27530:	f04f 0240 	mov.w	r2, #64	; 0x40
   27534:	f3ef 8311 	mrs	r3, BASEPRI
   27538:	f382 8812 	msr	BASEPRI_MAX, r2
   2753c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   27540:	f7f5 fd88 	bl	1d054 <pm_save_idle>
   27544:	e7f4      	b.n	27530 <idle+0x2>

00027546 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   27546:	4288      	cmp	r0, r1
   27548:	da00      	bge.n	2754c <new_prio_for_inheritance+0x6>
   2754a:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2754c:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   27550:	db01      	blt.n	27556 <new_prio_for_inheritance+0x10>
   27552:	4608      	mov	r0, r1
   27554:	4770      	bx	lr
   27556:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   2755a:	4770      	bx	lr

0002755c <adjust_owner_prio>:
{
   2755c:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   2755e:	6880      	ldr	r0, [r0, #8]
   27560:	f990 300e 	ldrsb.w	r3, [r0, #14]
   27564:	428b      	cmp	r3, r1
   27566:	d101      	bne.n	2756c <adjust_owner_prio+0x10>
	return false;
   27568:	2000      	movs	r0, #0
}
   2756a:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   2756c:	f7f6 fa84 	bl	1da78 <z_set_prio>
   27570:	e7fb      	b.n	2756a <adjust_owner_prio+0xe>

00027572 <z_impl_k_mutex_init>:
{
   27572:	4603      	mov	r3, r0
	mutex->owner = NULL;
   27574:	2000      	movs	r0, #0
   27576:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   27578:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   2757a:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2757c:	605b      	str	r3, [r3, #4]
}
   2757e:	4770      	bx	lr

00027580 <prepare_thread_to_run>:
{
   27580:	b508      	push	{r3, lr}
   27582:	2200      	movs	r2, #0
   27584:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   27588:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   2758a:	f000 fa69 	bl	27a60 <z_ready_thread>
}
   2758e:	bd08      	pop	{r3, pc}

00027590 <queue_insert>:
{
   27590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27594:	4605      	mov	r5, r0
   27596:	460e      	mov	r6, r1
   27598:	4614      	mov	r4, r2
   2759a:	461f      	mov	r7, r3
   2759c:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   275a0:	f100 0808 	add.w	r8, r0, #8
   275a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   275a8:	f3ef 8911 	mrs	r9, BASEPRI
   275ac:	f383 8812 	msr	BASEPRI_MAX, r3
   275b0:	f3bf 8f6f 	isb	sy
	if (is_append) {
   275b4:	b102      	cbz	r2, 275b8 <queue_insert+0x28>
	return list->tail;
   275b6:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   275b8:	4640      	mov	r0, r8
   275ba:	f000 faec 	bl	27b96 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   275be:	b9a0      	cbnz	r0, 275ea <queue_insert+0x5a>
	if (alloc) {
   275c0:	b9e7      	cbnz	r7, 275fc <queue_insert+0x6c>
	node->next_and_flags = flags;
   275c2:	2300      	movs	r3, #0
   275c4:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   275c6:	b356      	cbz	r6, 2761e <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   275c8:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   275ca:	f033 0303 	bics.w	r3, r3, #3
   275ce:	d134      	bne.n	2763a <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   275d0:	6823      	ldr	r3, [r4, #0]
   275d2:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   275d6:	6023      	str	r3, [r4, #0]
	return list->tail;
   275d8:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   275da:	b35a      	cbz	r2, 27634 <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   275dc:	6813      	ldr	r3, [r2, #0]
   275de:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   275e2:	4323      	orrs	r3, r4
   275e4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   275e6:	606c      	str	r4, [r5, #4]
}
   275e8:	e031      	b.n	2764e <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   275ea:	4621      	mov	r1, r4
   275ec:	f7ff ffc8 	bl	27580 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   275f0:	4649      	mov	r1, r9
   275f2:	4640      	mov	r0, r8
   275f4:	f7f6 f8c8 	bl	1d788 <z_reschedule>
		return 0;
   275f8:	2000      	movs	r0, #0
   275fa:	e032      	b.n	27662 <queue_insert+0xd2>
	return z_thread_aligned_alloc(0, size);
   275fc:	2108      	movs	r1, #8
   275fe:	2000      	movs	r0, #0
   27600:	f7f7 f8c8 	bl	1e794 <z_thread_aligned_alloc>
		if (anode == NULL) {
   27604:	b120      	cbz	r0, 27610 <queue_insert+0x80>
		anode->data = data;
   27606:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   27608:	2201      	movs	r2, #1
   2760a:	6002      	str	r2, [r0, #0]
		data = anode;
   2760c:	4604      	mov	r4, r0
   2760e:	e7da      	b.n	275c6 <queue_insert+0x36>
	__asm__ volatile(
   27610:	f389 8811 	msr	BASEPRI, r9
   27614:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   27618:	f06f 000b 	mvn.w	r0, #11
   2761c:	e021      	b.n	27662 <queue_insert+0xd2>
	return list->head;
   2761e:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27620:	6823      	ldr	r3, [r4, #0]
   27622:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   27626:	4313      	orrs	r3, r2
   27628:	6023      	str	r3, [r4, #0]
	list->head = node;
   2762a:	602c      	str	r4, [r5, #0]
	return list->tail;
   2762c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   2762e:	b973      	cbnz	r3, 2764e <queue_insert+0xbe>
	list->tail = node;
   27630:	606c      	str	r4, [r5, #4]
}
   27632:	e00c      	b.n	2764e <queue_insert+0xbe>
	list->tail = node;
   27634:	606c      	str	r4, [r5, #4]
	list->head = node;
   27636:	602c      	str	r4, [r5, #0]
}
   27638:	e009      	b.n	2764e <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2763a:	6822      	ldr	r2, [r4, #0]
   2763c:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   27640:	4313      	orrs	r3, r2
   27642:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27644:	6833      	ldr	r3, [r6, #0]
   27646:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2764a:	431c      	orrs	r4, r3
   2764c:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2764e:	2104      	movs	r1, #4
   27650:	f105 0010 	add.w	r0, r5, #16
   27654:	f000 fc4b 	bl	27eee <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   27658:	4649      	mov	r1, r9
   2765a:	4640      	mov	r0, r8
   2765c:	f7f6 f894 	bl	1d788 <z_reschedule>
	return 0;
   27660:	2000      	movs	r0, #0
}
   27662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027666 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   27666:	b160      	cbz	r0, 27682 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27668:	6803      	ldr	r3, [r0, #0]
   2766a:	f013 0f03 	tst.w	r3, #3
   2766e:	d008      	beq.n	27682 <z_queue_node_peek+0x1c>
{
   27670:	b510      	push	{r4, lr}
		ret = anode->data;
   27672:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   27674:	b909      	cbnz	r1, 2767a <z_queue_node_peek+0x14>
		ret = anode->data;
   27676:	4620      	mov	r0, r4
}
   27678:	bd10      	pop	{r4, pc}
			k_free(anode);
   2767a:	f000 fc62 	bl	27f42 <k_free>
		ret = anode->data;
   2767e:	4620      	mov	r0, r4
   27680:	e7fa      	b.n	27678 <z_queue_node_peek+0x12>
}
   27682:	4770      	bx	lr

00027684 <z_impl_k_queue_init>:
	list->head = NULL;
   27684:	2300      	movs	r3, #0
   27686:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   27688:	6043      	str	r3, [r0, #4]
   2768a:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   2768e:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   27690:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   27692:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   27696:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   27698:	6143      	str	r3, [r0, #20]
}
   2769a:	4770      	bx	lr

0002769c <k_queue_append>:
{
   2769c:	b500      	push	{lr}
   2769e:	b083      	sub	sp, #12
   276a0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   276a2:	2301      	movs	r3, #1
   276a4:	9300      	str	r3, [sp, #0]
   276a6:	2300      	movs	r3, #0
   276a8:	4619      	mov	r1, r3
   276aa:	f7ff ff71 	bl	27590 <queue_insert>
}
   276ae:	b003      	add	sp, #12
   276b0:	f85d fb04 	ldr.w	pc, [sp], #4

000276b4 <k_queue_prepend>:
{
   276b4:	b500      	push	{lr}
   276b6:	b083      	sub	sp, #12
   276b8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   276ba:	2100      	movs	r1, #0
   276bc:	9100      	str	r1, [sp, #0]
   276be:	460b      	mov	r3, r1
   276c0:	f7ff ff66 	bl	27590 <queue_insert>
}
   276c4:	b003      	add	sp, #12
   276c6:	f85d fb04 	ldr.w	pc, [sp], #4

000276ca <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   276ca:	b3a1      	cbz	r1, 27736 <k_queue_append_list+0x6c>
{
   276cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   276d0:	4606      	mov	r6, r0
   276d2:	4617      	mov	r7, r2
   276d4:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   276d6:	b38a      	cbz	r2, 2773c <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   276d8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   276dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   276e0:	f3ef 8811 	mrs	r8, BASEPRI
   276e4:	f383 8812 	msr	BASEPRI_MAX, r3
   276e8:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   276ec:	4628      	mov	r0, r5
   276ee:	f000 fa52 	bl	27b96 <z_unpend_first_thread>
   276f2:	e006      	b.n	27702 <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
   276f4:	4621      	mov	r1, r4
   276f6:	f7ff ff43 	bl	27580 <prepare_thread_to_run>
		head = *(void **)head;
   276fa:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   276fc:	4628      	mov	r0, r5
   276fe:	f000 fa4a 	bl	27b96 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   27702:	b10c      	cbz	r4, 27708 <k_queue_append_list+0x3e>
   27704:	2800      	cmp	r0, #0
   27706:	d1f5      	bne.n	276f4 <k_queue_append_list+0x2a>
	if (head != NULL) {
   27708:	b13c      	cbz	r4, 2771a <k_queue_append_list+0x50>
	return list->tail;
   2770a:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2770c:	b18a      	cbz	r2, 27732 <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2770e:	6813      	ldr	r3, [r2, #0]
   27710:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   27714:	431c      	orrs	r4, r3
   27716:	6014      	str	r4, [r2, #0]
	list->tail = node;
   27718:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2771a:	2104      	movs	r1, #4
   2771c:	f106 0010 	add.w	r0, r6, #16
   27720:	f000 fbe5 	bl	27eee <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   27724:	4641      	mov	r1, r8
   27726:	4628      	mov	r0, r5
   27728:	f7f6 f82e 	bl	1d788 <z_reschedule>
	return 0;
   2772c:	2000      	movs	r0, #0
}
   2772e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   27732:	6034      	str	r4, [r6, #0]
}
   27734:	e7f0      	b.n	27718 <k_queue_append_list+0x4e>
		return -EINVAL;
   27736:	f06f 0015 	mvn.w	r0, #21
}
   2773a:	4770      	bx	lr
		return -EINVAL;
   2773c:	f06f 0015 	mvn.w	r0, #21
   27740:	e7f5      	b.n	2772e <k_queue_append_list+0x64>

00027742 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   27742:	b15a      	cbz	r2, 2775c <z_impl_k_sem_init+0x1a>
   27744:	428a      	cmp	r2, r1
   27746:	d30c      	bcc.n	27762 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   27748:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2774a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   2774c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2774e:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   27750:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   27754:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   27756:	6143      	str	r3, [r0, #20]
	return 0;
   27758:	2000      	movs	r0, #0
   2775a:	4770      	bx	lr
		return -EINVAL;
   2775c:	f06f 0015 	mvn.w	r0, #21
   27760:	4770      	bx	lr
   27762:	f06f 0015 	mvn.w	r0, #21
}
   27766:	4770      	bx	lr

00027768 <cancel_async_locked>:
{
   27768:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   2776a:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2776c:	f012 0f02 	tst.w	r2, #2
   27770:	d009      	beq.n	27786 <cancel_async_locked+0x1e>
	return *flagp;
   27772:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   27774:	f012 000f 	ands.w	r0, r2, #15
   27778:	d037      	beq.n	277ea <cancel_async_locked+0x82>
	*flagp |= BIT(bit);
   2777a:	f042 0202 	orr.w	r2, r2, #2
   2777e:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   27780:	f002 000f 	and.w	r0, r2, #15
	return ret;
   27784:	4770      	bx	lr
{
   27786:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   27788:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   2778a:	f022 0104 	bic.w	r1, r2, #4
   2778e:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   27790:	f012 0f04 	tst.w	r2, #4
   27794:	d011      	beq.n	277ba <cancel_async_locked+0x52>
	return list->head;
   27796:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2779a:	2100      	movs	r1, #0
   2779c:	b16a      	cbz	r2, 277ba <cancel_async_locked+0x52>
   2779e:	4290      	cmp	r0, r2
   277a0:	d002      	beq.n	277a8 <cancel_async_locked+0x40>
   277a2:	4611      	mov	r1, r2
   277a4:	6812      	ldr	r2, [r2, #0]
   277a6:	e7f9      	b.n	2779c <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   277a8:	b191      	cbz	r1, 277d0 <cancel_async_locked+0x68>
	return node->next;
   277aa:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   277ac:	600a      	str	r2, [r1, #0]
	return list->tail;
   277ae:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   277b2:	4293      	cmp	r3, r2
   277b4:	d016      	beq.n	277e4 <cancel_async_locked+0x7c>
	parent->next = child;
   277b6:	2200      	movs	r2, #0
   277b8:	601a      	str	r2, [r3, #0]
	return *flagp;
   277ba:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   277bc:	f012 000f 	ands.w	r0, r2, #15
   277c0:	d004      	beq.n	277cc <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   277c2:	f042 0202 	orr.w	r2, r2, #2
   277c6:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   277c8:	f002 000f 	and.w	r0, r2, #15
}
   277cc:	bc10      	pop	{r4}
   277ce:	4770      	bx	lr
	return node->next;
   277d0:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   277d2:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
	return list->tail;
   277d6:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   277da:	428b      	cmp	r3, r1
   277dc:	d1eb      	bne.n	277b6 <cancel_async_locked+0x4e>
	list->tail = node;
   277de:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
}
   277e2:	e7e8      	b.n	277b6 <cancel_async_locked+0x4e>
	list->tail = node;
   277e4:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
}
   277e8:	e7e5      	b.n	277b6 <cancel_async_locked+0x4e>
   277ea:	4770      	bx	lr

000277ec <work_timeout>:
{
   277ec:	b510      	push	{r4, lr}
   277ee:	b082      	sub	sp, #8
   277f0:	4603      	mov	r3, r0
   277f2:	f04f 0240 	mov.w	r2, #64	; 0x40
   277f6:	f3ef 8411 	mrs	r4, BASEPRI
   277fa:	f382 8812 	msr	BASEPRI_MAX, r2
   277fe:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   27802:	2200      	movs	r2, #0
   27804:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   27806:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   2780a:	f022 0108 	bic.w	r1, r2, #8
   2780e:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   27812:	f012 0f08 	tst.w	r2, #8
   27816:	d105      	bne.n	27824 <work_timeout+0x38>
	__asm__ volatile(
   27818:	f384 8811 	msr	BASEPRI, r4
   2781c:	f3bf 8f6f 	isb	sy
}
   27820:	b002      	add	sp, #8
   27822:	bd10      	pop	{r4, pc}
   27824:	3810      	subs	r0, #16
		queue = dw->queue;
   27826:	699b      	ldr	r3, [r3, #24]
   27828:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2782a:	a901      	add	r1, sp, #4
   2782c:	f7f5 fd96 	bl	1d35c <submit_to_queue_locked>
   27830:	e7f2      	b.n	27818 <work_timeout+0x2c>

00027832 <cancel_delayable_async_locked>:
{
   27832:	b510      	push	{r4, lr}
   27834:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   27836:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   27838:	f023 0208 	bic.w	r2, r3, #8
   2783c:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2783e:	f013 0f08 	tst.w	r3, #8
   27842:	d103      	bne.n	2784c <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   27844:	4620      	mov	r0, r4
   27846:	f7ff ff8f 	bl	27768 <cancel_async_locked>
}
   2784a:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   2784c:	3010      	adds	r0, #16
   2784e:	f000 fa2c 	bl	27caa <z_abort_timeout>
		ret = true;
   27852:	e7f7      	b.n	27844 <cancel_delayable_async_locked+0x12>

00027854 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   27854:	2300      	movs	r3, #0
   27856:	6003      	str	r3, [r0, #0]
   27858:	6083      	str	r3, [r0, #8]
   2785a:	60c3      	str	r3, [r0, #12]
   2785c:	6041      	str	r1, [r0, #4]
}
   2785e:	4770      	bx	lr

00027860 <k_work_submit_to_queue>:
{
   27860:	b530      	push	{r4, r5, lr}
   27862:	b083      	sub	sp, #12
   27864:	9001      	str	r0, [sp, #4]
   27866:	4608      	mov	r0, r1
	__asm__ volatile(
   27868:	f04f 0340 	mov.w	r3, #64	; 0x40
   2786c:	f3ef 8511 	mrs	r5, BASEPRI
   27870:	f383 8812 	msr	BASEPRI_MAX, r3
   27874:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   27878:	a901      	add	r1, sp, #4
   2787a:	f7f5 fd6f 	bl	1d35c <submit_to_queue_locked>
   2787e:	4604      	mov	r4, r0
	__asm__ volatile(
   27880:	f385 8811 	msr	BASEPRI, r5
   27884:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   27888:	2800      	cmp	r0, #0
   2788a:	dc02      	bgt.n	27892 <k_work_submit_to_queue+0x32>
}
   2788c:	4620      	mov	r0, r4
   2788e:	b003      	add	sp, #12
   27890:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   27892:	f7f6 fadb 	bl	1de4c <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   27896:	2800      	cmp	r0, #0
   27898:	d0f8      	beq.n	2788c <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   2789a:	f7f6 fa11 	bl	1dcc0 <z_impl_k_yield>
	return ret;
   2789e:	e7f5      	b.n	2788c <k_work_submit_to_queue+0x2c>

000278a0 <k_work_init_delayable>:
{
   278a0:	b538      	push	{r3, r4, r5, lr}
   278a2:	4604      	mov	r4, r0
   278a4:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   278a6:	2230      	movs	r2, #48	; 0x30
   278a8:	2100      	movs	r1, #0
   278aa:	f7fb f8e4 	bl	22a76 <memset>
   278ae:	6065      	str	r5, [r4, #4]
   278b0:	f44f 7380 	mov.w	r3, #256	; 0x100
   278b4:	60e3      	str	r3, [r4, #12]
}
   278b6:	bd38      	pop	{r3, r4, r5, pc}

000278b8 <k_work_schedule_for_queue>:
{
   278b8:	b510      	push	{r4, lr}
   278ba:	b082      	sub	sp, #8
   278bc:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   278be:	f04f 0040 	mov.w	r0, #64	; 0x40
   278c2:	f3ef 8411 	mrs	r4, BASEPRI
   278c6:	f380 8812 	msr	BASEPRI_MAX, r0
   278ca:	f3bf 8f6f 	isb	sy
	return *flagp;
   278ce:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   278d0:	f010 0f0e 	tst.w	r0, #14
   278d4:	d006      	beq.n	278e4 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   278d6:	2000      	movs	r0, #0
	__asm__ volatile(
   278d8:	f384 8811 	msr	BASEPRI, r4
   278dc:	f3bf 8f6f 	isb	sy
}
   278e0:	b002      	add	sp, #8
   278e2:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   278e4:	a801      	add	r0, sp, #4
   278e6:	f7f5 fe7b 	bl	1d5e0 <schedule_for_queue_locked>
   278ea:	e7f5      	b.n	278d8 <k_work_schedule_for_queue+0x20>

000278ec <k_work_reschedule_for_queue>:
{
   278ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   278ee:	b083      	sub	sp, #12
   278f0:	9001      	str	r0, [sp, #4]
   278f2:	460c      	mov	r4, r1
   278f4:	4616      	mov	r6, r2
   278f6:	461d      	mov	r5, r3
	__asm__ volatile(
   278f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   278fc:	f3ef 8711 	mrs	r7, BASEPRI
   27900:	f383 8812 	msr	BASEPRI_MAX, r3
   27904:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   27908:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   2790a:	f023 0208 	bic.w	r2, r3, #8
   2790e:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   27910:	f013 0f08 	tst.w	r3, #8
   27914:	d10b      	bne.n	2792e <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   27916:	4632      	mov	r2, r6
   27918:	462b      	mov	r3, r5
   2791a:	4621      	mov	r1, r4
   2791c:	a801      	add	r0, sp, #4
   2791e:	f7f5 fe5f 	bl	1d5e0 <schedule_for_queue_locked>
	__asm__ volatile(
   27922:	f387 8811 	msr	BASEPRI, r7
   27926:	f3bf 8f6f 	isb	sy
}
   2792a:	b003      	add	sp, #12
   2792c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   2792e:	f101 0010 	add.w	r0, r1, #16
   27932:	f000 f9ba 	bl	27caa <z_abort_timeout>
		ret = true;
   27936:	e7ee      	b.n	27916 <k_work_reschedule_for_queue+0x2a>

00027938 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   27938:	b510      	push	{r4, lr}
	__asm__ volatile(
   2793a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2793e:	f3ef 8411 	mrs	r4, BASEPRI
   27942:	f383 8812 	msr	BASEPRI_MAX, r3
   27946:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   2794a:	f7ff ff72 	bl	27832 <cancel_delayable_async_locked>
	__asm__ volatile(
   2794e:	f384 8811 	msr	BASEPRI, r4
   27952:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   27956:	bd10      	pop	{r4, pc}

00027958 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   27958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2795a:	460f      	mov	r7, r1
	__asm__ volatile(
   2795c:	f04f 0340 	mov.w	r3, #64	; 0x40
   27960:	f3ef 8611 	mrs	r6, BASEPRI
   27964:	f383 8812 	msr	BASEPRI_MAX, r3
   27968:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2796c:	f3bf 8f5b 	dmb	ish
   27970:	68c3      	ldr	r3, [r0, #12]
   27972:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   27976:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2797a:	2b00      	cmp	r3, #0
   2797c:	bf14      	ite	ne
   2797e:	2501      	movne	r5, #1
   27980:	2500      	moveq	r5, #0
	bool need_wait = false;

	if (pending) {
   27982:	d107      	bne.n	27994 <k_work_cancel_delayable_sync+0x3c>
	bool need_wait = false;
   27984:	2000      	movs	r0, #0
	__asm__ volatile(
   27986:	f386 8811 	msr	BASEPRI, r6
   2798a:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2798e:	b948      	cbnz	r0, 279a4 <k_work_cancel_delayable_sync+0x4c>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   27990:	4628      	mov	r0, r5
   27992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27994:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   27996:	f7ff ff4c 	bl	27832 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2799a:	4639      	mov	r1, r7
   2799c:	4620      	mov	r0, r4
   2799e:	f7f5 fd85 	bl	1d4ac <cancel_sync_locked>
   279a2:	e7f0      	b.n	27986 <k_work_cancel_delayable_sync+0x2e>
		k_sem_take(&canceller->sem, K_FOREVER);
   279a4:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_sem_take(sem, timeout);
   279a8:	f04f 32ff 	mov.w	r2, #4294967295
   279ac:	f04f 33ff 	mov.w	r3, #4294967295
   279b0:	f7f5 fc90 	bl	1d2d4 <z_impl_k_sem_take>
   279b4:	e7ec      	b.n	27990 <k_work_cancel_delayable_sync+0x38>

000279b6 <thread_active_elsewhere>:
}
   279b6:	2000      	movs	r0, #0
   279b8:	4770      	bx	lr

000279ba <pended_on_thread>:
}
   279ba:	6880      	ldr	r0, [r0, #8]
   279bc:	4770      	bx	lr

000279be <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   279be:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   279c2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   279c6:	4283      	cmp	r3, r0
   279c8:	d001      	beq.n	279ce <z_sched_prio_cmp+0x10>
		return b2 - b1;
   279ca:	1ac0      	subs	r0, r0, r3
   279cc:	4770      	bx	lr
	return 0;
   279ce:	2000      	movs	r0, #0
}
   279d0:	4770      	bx	lr

000279d2 <z_reschedule_irqlock>:
{
   279d2:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   279d4:	4603      	mov	r3, r0
   279d6:	b920      	cbnz	r0, 279e2 <z_reschedule_irqlock+0x10>
   279d8:	f3ef 8205 	mrs	r2, IPSR
   279dc:	b942      	cbnz	r2, 279f0 <z_reschedule_irqlock+0x1e>
   279de:	2201      	movs	r2, #1
   279e0:	e000      	b.n	279e4 <z_reschedule_irqlock+0x12>
   279e2:	2200      	movs	r2, #0
	if (resched(key)) {
   279e4:	b932      	cbnz	r2, 279f4 <z_reschedule_irqlock+0x22>
   279e6:	f383 8811 	msr	BASEPRI, r3
   279ea:	f3bf 8f6f 	isb	sy
}
   279ee:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   279f0:	2200      	movs	r2, #0
   279f2:	e7f7      	b.n	279e4 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   279f4:	4618      	mov	r0, r3
   279f6:	f7ec fa51 	bl	13e9c <arch_swap>
	return ret;
   279fa:	e7f8      	b.n	279ee <z_reschedule_irqlock+0x1c>

000279fc <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   279fc:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   279fe:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   27a00:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27a02:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27a04:	2300      	movs	r3, #0
   27a06:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   27a08:	604b      	str	r3, [r1, #4]
}
   27a0a:	4770      	bx	lr

00027a0c <z_unpend_thread>:
{
   27a0c:	b538      	push	{r3, r4, r5, lr}
   27a0e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   27a10:	2300      	movs	r3, #0
	__asm__ volatile(
   27a12:	f04f 0240 	mov.w	r2, #64	; 0x40
   27a16:	f3ef 8511 	mrs	r5, BASEPRI
   27a1a:	f382 8812 	msr	BASEPRI_MAX, r2
   27a1e:	f3bf 8f6f 	isb	sy
   27a22:	b98b      	cbnz	r3, 27a48 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   27a24:	4620      	mov	r0, r4
   27a26:	f7ff ffc8 	bl	279ba <pended_on_thread>
   27a2a:	4621      	mov	r1, r4
   27a2c:	f7ff ffe6 	bl	279fc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   27a30:	7b63      	ldrb	r3, [r4, #13]
   27a32:	f023 0302 	bic.w	r3, r3, #2
   27a36:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   27a38:	2300      	movs	r3, #0
   27a3a:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   27a3c:	f385 8811 	msr	BASEPRI, r5
   27a40:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27a44:	2301      	movs	r3, #1
   27a46:	e7ec      	b.n	27a22 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   27a48:	f104 0018 	add.w	r0, r4, #24
   27a4c:	f000 f92d 	bl	27caa <z_abort_timeout>
}
   27a50:	bd38      	pop	{r3, r4, r5, pc}

00027a52 <z_priq_dumb_best>:
{
   27a52:	4603      	mov	r3, r0
	return list->head == list;
   27a54:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27a56:	4283      	cmp	r3, r0
   27a58:	d000      	beq.n	27a5c <z_priq_dumb_best+0xa>
}
   27a5a:	4770      	bx	lr
	struct k_thread *thread = NULL;
   27a5c:	2000      	movs	r0, #0
	return thread;
   27a5e:	e7fc      	b.n	27a5a <z_priq_dumb_best+0x8>

00027a60 <z_ready_thread>:
{
   27a60:	b538      	push	{r3, r4, r5, lr}
   27a62:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   27a64:	2300      	movs	r3, #0
	__asm__ volatile(
   27a66:	f04f 0240 	mov.w	r2, #64	; 0x40
   27a6a:	f3ef 8511 	mrs	r5, BASEPRI
   27a6e:	f382 8812 	msr	BASEPRI_MAX, r2
   27a72:	f3bf 8f6f 	isb	sy
   27a76:	e007      	b.n	27a88 <z_ready_thread+0x28>
			ready_thread(thread);
   27a78:	4620      	mov	r0, r4
   27a7a:	f7f5 ff6f 	bl	1d95c <ready_thread>
	__asm__ volatile(
   27a7e:	f385 8811 	msr	BASEPRI, r5
   27a82:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27a86:	2301      	movs	r3, #1
   27a88:	b92b      	cbnz	r3, 27a96 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   27a8a:	4620      	mov	r0, r4
   27a8c:	f7ff ff93 	bl	279b6 <thread_active_elsewhere>
   27a90:	2800      	cmp	r0, #0
   27a92:	d1f4      	bne.n	27a7e <z_ready_thread+0x1e>
   27a94:	e7f0      	b.n	27a78 <z_ready_thread+0x18>
}
   27a96:	bd38      	pop	{r3, r4, r5, pc}

00027a98 <z_thread_timeout>:
{
   27a98:	b570      	push	{r4, r5, r6, lr}
   27a9a:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   27a9c:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   27aa0:	2300      	movs	r3, #0
	__asm__ volatile(
   27aa2:	f04f 0240 	mov.w	r2, #64	; 0x40
   27aa6:	f3ef 8611 	mrs	r6, BASEPRI
   27aaa:	f382 8812 	msr	BASEPRI_MAX, r2
   27aae:	f3bf 8f6f 	isb	sy
   27ab2:	e019      	b.n	27ae8 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   27ab4:	4628      	mov	r0, r5
   27ab6:	f7ff ff80 	bl	279ba <pended_on_thread>
   27aba:	4629      	mov	r1, r5
   27abc:	f7ff ff9e 	bl	279fc <z_priq_dumb_remove>
   27ac0:	7b6b      	ldrb	r3, [r5, #13]
   27ac2:	f023 0302 	bic.w	r3, r3, #2
   27ac6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   27ac8:	2300      	movs	r3, #0
   27aca:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   27acc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   27ad0:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   27ad4:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   27ad8:	4628      	mov	r0, r5
   27ada:	f7f5 ff3f 	bl	1d95c <ready_thread>
	__asm__ volatile(
   27ade:	f386 8811 	msr	BASEPRI, r6
   27ae2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27ae6:	2301      	movs	r3, #1
   27ae8:	b94b      	cbnz	r3, 27afe <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   27aea:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   27aee:	f013 0f28 	tst.w	r3, #40	; 0x28
   27af2:	d1f4      	bne.n	27ade <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   27af4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   27af8:	2b00      	cmp	r3, #0
   27afa:	d1db      	bne.n	27ab4 <z_thread_timeout+0x1c>
   27afc:	e7e6      	b.n	27acc <z_thread_timeout+0x34>
}
   27afe:	bd70      	pop	{r4, r5, r6, pc}

00027b00 <add_to_waitq_locked>:
{
   27b00:	b570      	push	{r4, r5, r6, lr}
   27b02:	4605      	mov	r5, r0
   27b04:	460e      	mov	r6, r1
	unready_thread(thread);
   27b06:	f7f5 ff87 	bl	1da18 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   27b0a:	7b6b      	ldrb	r3, [r5, #13]
   27b0c:	f043 0302 	orr.w	r3, r3, #2
   27b10:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   27b12:	b1b6      	cbz	r6, 27b42 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   27b14:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   27b16:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27b18:	42a6      	cmp	r6, r4
   27b1a:	d019      	beq.n	27b50 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27b1c:	b164      	cbz	r4, 27b38 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   27b1e:	4621      	mov	r1, r4
   27b20:	4628      	mov	r0, r5
   27b22:	f7ff ff4c 	bl	279be <z_sched_prio_cmp>
   27b26:	2800      	cmp	r0, #0
   27b28:	dc0c      	bgt.n	27b44 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27b2a:	b12c      	cbz	r4, 27b38 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   27b2c:	6873      	ldr	r3, [r6, #4]
   27b2e:	429c      	cmp	r4, r3
   27b30:	d002      	beq.n	27b38 <add_to_waitq_locked+0x38>
   27b32:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27b34:	2c00      	cmp	r4, #0
   27b36:	d1f1      	bne.n	27b1c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   27b38:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   27b3a:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   27b3c:	606b      	str	r3, [r5, #4]
	tail->next = node;
   27b3e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   27b40:	6075      	str	r5, [r6, #4]
}
   27b42:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   27b44:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   27b46:	606b      	str	r3, [r5, #4]
	node->next = successor;
   27b48:	602c      	str	r4, [r5, #0]
	prev->next = node;
   27b4a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   27b4c:	6065      	str	r5, [r4, #4]
}
   27b4e:	e7f8      	b.n	27b42 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27b50:	2400      	movs	r4, #0
   27b52:	e7e3      	b.n	27b1c <add_to_waitq_locked+0x1c>

00027b54 <pend>:
{
   27b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27b58:	4605      	mov	r5, r0
   27b5a:	460f      	mov	r7, r1
   27b5c:	4691      	mov	r9, r2
   27b5e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   27b60:	2400      	movs	r4, #0
	__asm__ volatile(
   27b62:	f04f 0340 	mov.w	r3, #64	; 0x40
   27b66:	f3ef 8611 	mrs	r6, BASEPRI
   27b6a:	f383 8812 	msr	BASEPRI_MAX, r3
   27b6e:	f3bf 8f6f 	isb	sy
   27b72:	b94c      	cbnz	r4, 27b88 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   27b74:	4639      	mov	r1, r7
   27b76:	4628      	mov	r0, r5
   27b78:	f7ff ffc2 	bl	27b00 <add_to_waitq_locked>
	__asm__ volatile(
   27b7c:	f386 8811 	msr	BASEPRI, r6
   27b80:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27b84:	2401      	movs	r4, #1
   27b86:	e7f4      	b.n	27b72 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   27b88:	464a      	mov	r2, r9
   27b8a:	4643      	mov	r3, r8
   27b8c:	4628      	mov	r0, r5
   27b8e:	f7f5 fd99 	bl	1d6c4 <add_thread_timeout>
}
   27b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027b96 <z_unpend_first_thread>:
{
   27b96:	b570      	push	{r4, r5, r6, lr}
   27b98:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   27b9a:	2300      	movs	r3, #0
	__asm__ volatile(
   27b9c:	f04f 0240 	mov.w	r2, #64	; 0x40
   27ba0:	f3ef 8511 	mrs	r5, BASEPRI
   27ba4:	f382 8812 	msr	BASEPRI_MAX, r2
   27ba8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   27bac:	461c      	mov	r4, r3
   27bae:	e013      	b.n	27bd8 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   27bb0:	f7ff ff03 	bl	279ba <pended_on_thread>
   27bb4:	4621      	mov	r1, r4
   27bb6:	f7ff ff21 	bl	279fc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   27bba:	7b63      	ldrb	r3, [r4, #13]
   27bbc:	f023 0302 	bic.w	r3, r3, #2
   27bc0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   27bc2:	2300      	movs	r3, #0
   27bc4:	60a3      	str	r3, [r4, #8]
   27bc6:	f104 0018 	add.w	r0, r4, #24
   27bca:	f000 f86e 	bl	27caa <z_abort_timeout>
	__asm__ volatile(
   27bce:	f385 8811 	msr	BASEPRI, r5
   27bd2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27bd6:	2301      	movs	r3, #1
   27bd8:	b933      	cbnz	r3, 27be8 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   27bda:	4630      	mov	r0, r6
   27bdc:	f7ff ff39 	bl	27a52 <z_priq_dumb_best>
		if (thread != NULL) {
   27be0:	4604      	mov	r4, r0
   27be2:	2800      	cmp	r0, #0
   27be4:	d1e4      	bne.n	27bb0 <z_unpend_first_thread+0x1a>
   27be6:	e7f2      	b.n	27bce <z_unpend_first_thread+0x38>
}
   27be8:	4620      	mov	r0, r4
   27bea:	bd70      	pop	{r4, r5, r6, pc}

00027bec <z_unpend_all>:
{
   27bec:	b538      	push	{r3, r4, r5, lr}
   27bee:	4605      	mov	r5, r0
	int need_sched = 0;
   27bf0:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   27bf2:	e006      	b.n	27c02 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   27bf4:	4620      	mov	r0, r4
   27bf6:	f7ff ff09 	bl	27a0c <z_unpend_thread>
		z_ready_thread(thread);
   27bfa:	4620      	mov	r0, r4
   27bfc:	f7ff ff30 	bl	27a60 <z_ready_thread>
		need_sched = 1;
   27c00:	2001      	movs	r0, #1
	return list->head == list;
   27c02:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27c04:	42a5      	cmp	r5, r4
   27c06:	d001      	beq.n	27c0c <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   27c08:	2c00      	cmp	r4, #0
   27c0a:	d1f3      	bne.n	27bf4 <z_unpend_all+0x8>
}
   27c0c:	bd38      	pop	{r3, r4, r5, pc}

00027c0e <z_sched_wake>:
{
   27c0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27c12:	4606      	mov	r6, r0
   27c14:	4688      	mov	r8, r1
   27c16:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   27c18:	2300      	movs	r3, #0
	__asm__ volatile(
   27c1a:	f04f 0240 	mov.w	r2, #64	; 0x40
   27c1e:	f3ef 8511 	mrs	r5, BASEPRI
   27c22:	f382 8812 	msr	BASEPRI_MAX, r2
   27c26:	f3bf 8f6f 	isb	sy
	bool ret = false;
   27c2a:	4699      	mov	r9, r3
   27c2c:	e01b      	b.n	27c66 <z_sched_wake+0x58>
   27c2e:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   27c32:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   27c34:	f7ff fec1 	bl	279ba <pended_on_thread>
   27c38:	4621      	mov	r1, r4
   27c3a:	f7ff fedf 	bl	279fc <z_priq_dumb_remove>
   27c3e:	7b63      	ldrb	r3, [r4, #13]
   27c40:	f023 0302 	bic.w	r3, r3, #2
   27c44:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   27c46:	2300      	movs	r3, #0
   27c48:	60a3      	str	r3, [r4, #8]
   27c4a:	f104 0018 	add.w	r0, r4, #24
   27c4e:	f000 f82c 	bl	27caa <z_abort_timeout>
			ready_thread(thread);
   27c52:	4620      	mov	r0, r4
   27c54:	f7f5 fe82 	bl	1d95c <ready_thread>
			ret = true;
   27c58:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   27c5c:	f385 8811 	msr	BASEPRI, r5
   27c60:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27c64:	2301      	movs	r3, #1
   27c66:	b933      	cbnz	r3, 27c76 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   27c68:	4630      	mov	r0, r6
   27c6a:	f7ff fef2 	bl	27a52 <z_priq_dumb_best>
		if (thread != NULL) {
   27c6e:	4604      	mov	r4, r0
   27c70:	2800      	cmp	r0, #0
   27c72:	d1dc      	bne.n	27c2e <z_sched_wake+0x20>
   27c74:	e7f2      	b.n	27c5c <z_sched_wake+0x4e>
}
   27c76:	4648      	mov	r0, r9
   27c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027c7c <remove_timeout>:
{
   27c7c:	b538      	push	{r3, r4, r5, lr}
   27c7e:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   27c80:	f7f6 f952 	bl	1df28 <next>
   27c84:	b148      	cbz	r0, 27c9a <remove_timeout+0x1e>
   27c86:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   27c88:	6920      	ldr	r0, [r4, #16]
   27c8a:	6965      	ldr	r5, [r4, #20]
   27c8c:	6913      	ldr	r3, [r2, #16]
   27c8e:	6951      	ldr	r1, [r2, #20]
   27c90:	181b      	adds	r3, r3, r0
   27c92:	eb45 0101 	adc.w	r1, r5, r1
   27c96:	6113      	str	r3, [r2, #16]
   27c98:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   27c9a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   27c9c:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   27c9e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27ca0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27ca2:	2300      	movs	r3, #0
   27ca4:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   27ca6:	6063      	str	r3, [r4, #4]
}
   27ca8:	bd38      	pop	{r3, r4, r5, pc}

00027caa <z_abort_timeout>:
{
   27caa:	b570      	push	{r4, r5, r6, lr}
   27cac:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   27cae:	2300      	movs	r3, #0
	__asm__ volatile(
   27cb0:	f04f 0240 	mov.w	r2, #64	; 0x40
   27cb4:	f3ef 8611 	mrs	r6, BASEPRI
   27cb8:	f382 8812 	msr	BASEPRI_MAX, r2
   27cbc:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   27cc0:	f06f 0015 	mvn.w	r0, #21
   27cc4:	e008      	b.n	27cd8 <z_abort_timeout+0x2e>
			remove_timeout(to);
   27cc6:	4620      	mov	r0, r4
   27cc8:	f7ff ffd8 	bl	27c7c <remove_timeout>
			ret = 0;
   27ccc:	4628      	mov	r0, r5
	__asm__ volatile(
   27cce:	f386 8811 	msr	BASEPRI, r6
   27cd2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   27cd6:	2301      	movs	r3, #1
   27cd8:	461d      	mov	r5, r3
   27cda:	b91b      	cbnz	r3, 27ce4 <z_abort_timeout+0x3a>
	return node->next != NULL;
   27cdc:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   27cde:	2b00      	cmp	r3, #0
   27ce0:	d1f1      	bne.n	27cc6 <z_abort_timeout+0x1c>
   27ce2:	e7f4      	b.n	27cce <z_abort_timeout+0x24>
}
   27ce4:	bd70      	pop	{r4, r5, r6, pc}

00027ce6 <z_get_next_timeout_expiry>:
{
   27ce6:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   27ce8:	2300      	movs	r3, #0
	__asm__ volatile(
   27cea:	f04f 0240 	mov.w	r2, #64	; 0x40
   27cee:	f3ef 8411 	mrs	r4, BASEPRI
   27cf2:	f382 8812 	msr	BASEPRI_MAX, r2
   27cf6:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   27cfa:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   27cfe:	b93b      	cbnz	r3, 27d10 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   27d00:	f7f6 f92a 	bl	1df58 <next_timeout>
	__asm__ volatile(
   27d04:	f384 8811 	msr	BASEPRI, r4
   27d08:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   27d0c:	2301      	movs	r3, #1
   27d0e:	e7f6      	b.n	27cfe <z_get_next_timeout_expiry+0x18>
}
   27d10:	bd10      	pop	{r4, pc}

00027d12 <z_set_timeout_expiry>:
{
   27d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27d14:	4606      	mov	r6, r0
   27d16:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   27d18:	2300      	movs	r3, #0
	__asm__ volatile(
   27d1a:	f04f 0240 	mov.w	r2, #64	; 0x40
   27d1e:	f3ef 8511 	mrs	r5, BASEPRI
   27d22:	f382 8812 	msr	BASEPRI_MAX, r2
   27d26:	f3bf 8f6f 	isb	sy
   27d2a:	e00a      	b.n	27d42 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   27d2c:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   27d2e:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   27d32:	2801      	cmp	r0, #1
   27d34:	dd00      	ble.n	27d38 <z_set_timeout_expiry+0x26>
   27d36:	b97c      	cbnz	r4, 27d58 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   27d38:	f385 8811 	msr	BASEPRI, r5
   27d3c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   27d40:	2301      	movs	r3, #1
   27d42:	461c      	mov	r4, r3
   27d44:	b97b      	cbnz	r3, 27d66 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   27d46:	f7f6 f907 	bl	1df58 <next_timeout>
			      || (ticks <= next_to);
   27d4a:	f1b0 3fff 	cmp.w	r0, #4294967295
   27d4e:	d0ed      	beq.n	27d2c <z_set_timeout_expiry+0x1a>
   27d50:	42b0      	cmp	r0, r6
   27d52:	dbec      	blt.n	27d2e <z_set_timeout_expiry+0x1c>
   27d54:	2401      	movs	r4, #1
   27d56:	e7ea      	b.n	27d2e <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   27d58:	4639      	mov	r1, r7
   27d5a:	42b0      	cmp	r0, r6
   27d5c:	bfa8      	it	ge
   27d5e:	4630      	movge	r0, r6
   27d60:	f7f2 fac0 	bl	1a2e4 <sys_clock_set_timeout>
   27d64:	e7e8      	b.n	27d38 <z_set_timeout_expiry+0x26>
}
   27d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027d68 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   27d68:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   27d6a:	f7f6 fa27 	bl	1e1bc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   27d6e:	bd08      	pop	{r3, pc}

00027d70 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   27d70:	b900      	cbnz	r0, 27d74 <z_impl_k_busy_wait+0x4>
   27d72:	4770      	bx	lr
{
   27d74:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   27d76:	f7ec fbeb 	bl	14550 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   27d7a:	bd08      	pop	{r3, pc}

00027d7c <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   27d7c:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27d7e:	f1b1 3fff 	cmp.w	r1, #4294967295
   27d82:	bf08      	it	eq
   27d84:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   27d88:	d024      	beq.n	27dd4 <sys_clock_timeout_end_calc+0x58>
   27d8a:	4604      	mov	r4, r0
   27d8c:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27d8e:	ea54 0105 	orrs.w	r1, r4, r5
   27d92:	d00d      	beq.n	27db0 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   27d94:	f06f 0101 	mvn.w	r1, #1
   27d98:	1a0a      	subs	r2, r1, r0
   27d9a:	f04f 31ff 	mov.w	r1, #4294967295
   27d9e:	eb61 0305 	sbc.w	r3, r1, r5
   27da2:	2a00      	cmp	r2, #0
   27da4:	f173 0100 	sbcs.w	r1, r3, #0
   27da8:	db05      	blt.n	27db6 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   27daa:	4610      	mov	r0, r2
   27dac:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   27dae:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   27db0:	f7f6 fa04 	bl	1e1bc <sys_clock_tick_get>
   27db4:	e7fb      	b.n	27dae <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   27db6:	f7f6 fa01 	bl	1e1bc <sys_clock_tick_get>
   27dba:	4623      	mov	r3, r4
   27dbc:	462a      	mov	r2, r5
   27dbe:	2c01      	cmp	r4, #1
   27dc0:	f175 0400 	sbcs.w	r4, r5, #0
   27dc4:	db03      	blt.n	27dce <sys_clock_timeout_end_calc+0x52>
   27dc6:	18c0      	adds	r0, r0, r3
   27dc8:	eb42 0101 	adc.w	r1, r2, r1
   27dcc:	e7ef      	b.n	27dae <sys_clock_timeout_end_calc+0x32>
   27dce:	2301      	movs	r3, #1
   27dd0:	2200      	movs	r2, #0
   27dd2:	e7f8      	b.n	27dc6 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   27dd4:	f04f 30ff 	mov.w	r0, #4294967295
   27dd8:	4601      	mov	r1, r0
   27dda:	e7e8      	b.n	27dae <sys_clock_timeout_end_calc+0x32>

00027ddc <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   27ddc:	b108      	cbz	r0, 27de2 <poller_thread+0x6>
   27dde:	3860      	subs	r0, #96	; 0x60
   27de0:	4770      	bx	lr
}
   27de2:	4770      	bx	lr

00027de4 <signal_poller>:
{
   27de4:	b538      	push	{r3, r4, r5, lr}
   27de6:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   27de8:	6880      	ldr	r0, [r0, #8]
   27dea:	f7ff fff7 	bl	27ddc <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   27dee:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   27df0:	f013 0f02 	tst.w	r3, #2
   27df4:	d028      	beq.n	27e48 <signal_poller+0x64>
   27df6:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   27df8:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   27dfc:	f06f 0001 	mvn.w	r0, #1
   27e00:	f04f 31ff 	mov.w	r1, #4294967295
   27e04:	428b      	cmp	r3, r1
   27e06:	bf08      	it	eq
   27e08:	4282      	cmpeq	r2, r0
   27e0a:	d01f      	beq.n	27e4c <signal_poller+0x68>
	z_unpend_thread(thread);
   27e0c:	4620      	mov	r0, r4
   27e0e:	f7ff fdfd 	bl	27a0c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   27e12:	2d08      	cmp	r5, #8
   27e14:	d00a      	beq.n	27e2c <signal_poller+0x48>
   27e16:	2300      	movs	r3, #0
   27e18:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   27e1c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27e1e:	f013 0f1f 	tst.w	r3, #31
   27e22:	d108      	bne.n	27e36 <signal_poller+0x52>
   27e24:	69a3      	ldr	r3, [r4, #24]
   27e26:	b123      	cbz	r3, 27e32 <signal_poller+0x4e>
   27e28:	2300      	movs	r3, #0
   27e2a:	e005      	b.n	27e38 <signal_poller+0x54>
   27e2c:	f06f 0303 	mvn.w	r3, #3
   27e30:	e7f2      	b.n	27e18 <signal_poller+0x34>
   27e32:	2301      	movs	r3, #1
   27e34:	e000      	b.n	27e38 <signal_poller+0x54>
   27e36:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   27e38:	b90b      	cbnz	r3, 27e3e <signal_poller+0x5a>
		return 0;
   27e3a:	2000      	movs	r0, #0
   27e3c:	e005      	b.n	27e4a <signal_poller+0x66>
	z_ready_thread(thread);
   27e3e:	4620      	mov	r0, r4
   27e40:	f7ff fe0e 	bl	27a60 <z_ready_thread>
	return 0;
   27e44:	2000      	movs	r0, #0
   27e46:	e000      	b.n	27e4a <signal_poller+0x66>
		return 0;
   27e48:	2000      	movs	r0, #0
}
   27e4a:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   27e4c:	f06f 000a 	mvn.w	r0, #10
   27e50:	e7fb      	b.n	27e4a <signal_poller+0x66>

00027e52 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   27e52:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   27e54:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   27e56:	7823      	ldrb	r3, [r4, #0]
   27e58:	b173      	cbz	r3, 27e78 <signal_triggered_work+0x26>
   27e5a:	f854 5c04 	ldr.w	r5, [r4, #-4]
   27e5e:	b15d      	cbz	r5, 27e78 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   27e60:	f1a4 0614 	sub.w	r6, r4, #20
   27e64:	f104 0014 	add.w	r0, r4, #20
   27e68:	f7ff ff1f 	bl	27caa <z_abort_timeout>
		twork->poll_result = 0;
   27e6c:	2300      	movs	r3, #0
   27e6e:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   27e70:	4631      	mov	r1, r6
   27e72:	4628      	mov	r0, r5
   27e74:	f7ff fcf4 	bl	27860 <k_work_submit_to_queue>
	}

	return 0;
}
   27e78:	2000      	movs	r0, #0
   27e7a:	bd70      	pop	{r4, r5, r6, pc}

00027e7c <signal_poll_event>:
{
   27e7c:	b570      	push	{r4, r5, r6, lr}
   27e7e:	4604      	mov	r4, r0
   27e80:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   27e82:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   27e84:	b1d6      	cbz	r6, 27ebc <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   27e86:	7873      	ldrb	r3, [r6, #1]
   27e88:	2b01      	cmp	r3, #1
   27e8a:	d00d      	beq.n	27ea8 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   27e8c:	2b02      	cmp	r3, #2
   27e8e:	d012      	beq.n	27eb6 <signal_poll_event+0x3a>
		poller->is_polling = false;
   27e90:	2000      	movs	r0, #0
   27e92:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   27e94:	2300      	movs	r3, #0
   27e96:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   27e98:	68e3      	ldr	r3, [r4, #12]
   27e9a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   27e9e:	430d      	orrs	r5, r1
   27ea0:	f365 3352 	bfi	r3, r5, #13, #6
   27ea4:	60e3      	str	r3, [r4, #12]
}
   27ea6:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   27ea8:	f7ff ff9c 	bl	27de4 <signal_poller>
		poller->is_polling = false;
   27eac:	2300      	movs	r3, #0
   27eae:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   27eb0:	4298      	cmp	r0, r3
   27eb2:	daef      	bge.n	27e94 <signal_poll_event+0x18>
   27eb4:	e7f7      	b.n	27ea6 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   27eb6:	f7ff ffcc 	bl	27e52 <signal_triggered_work>
   27eba:	e7f7      	b.n	27eac <signal_poll_event+0x30>
	int retcode = 0;
   27ebc:	2000      	movs	r0, #0
   27ebe:	e7e9      	b.n	27e94 <signal_poll_event+0x18>

00027ec0 <k_poll_event_init>:
{
   27ec0:	b430      	push	{r4, r5}
	event->poller = NULL;
   27ec2:	2400      	movs	r4, #0
   27ec4:	6084      	str	r4, [r0, #8]
	event->type = type;
   27ec6:	7b45      	ldrb	r5, [r0, #13]
   27ec8:	f361 0504 	bfi	r5, r1, #0, #5
   27ecc:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   27ece:	68c1      	ldr	r1, [r0, #12]
   27ed0:	f364 3152 	bfi	r1, r4, #13, #6
   27ed4:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   27ed6:	f3c1 4107 	ubfx	r1, r1, #16, #8
   27eda:	f362 01c3 	bfi	r1, r2, #3, #1
   27ede:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   27ee0:	89c2      	ldrh	r2, [r0, #14]
   27ee2:	f364 120f 	bfi	r2, r4, #4, #12
   27ee6:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   27ee8:	6103      	str	r3, [r0, #16]
}
   27eea:	bc30      	pop	{r4, r5}
   27eec:	4770      	bx	lr

00027eee <z_handle_obj_poll_events>:
{
   27eee:	b508      	push	{r3, lr}
   27ef0:	4603      	mov	r3, r0
	return list->head == list;
   27ef2:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   27ef4:	4283      	cmp	r3, r0
   27ef6:	d009      	beq.n	27f0c <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   27ef8:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   27efa:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   27efc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27efe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27f00:	2300      	movs	r3, #0
   27f02:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   27f04:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   27f06:	b108      	cbz	r0, 27f0c <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   27f08:	f7ff ffb8 	bl	27e7c <signal_poll_event>
}
   27f0c:	bd08      	pop	{r3, pc}

00027f0e <z_heap_aligned_alloc>:
{
   27f0e:	b5d0      	push	{r4, r6, r7, lr}
   27f10:	b082      	sub	sp, #8
   27f12:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   27f14:	2000      	movs	r0, #0
   27f16:	2304      	movs	r3, #4
   27f18:	18d2      	adds	r2, r2, r3
   27f1a:	d20e      	bcs.n	27f3a <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   27f1c:	b978      	cbnz	r0, 27f3e <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   27f1e:	2600      	movs	r6, #0
   27f20:	2700      	movs	r7, #0
   27f22:	e9cd 6700 	strd	r6, r7, [sp]
   27f26:	f041 0104 	orr.w	r1, r1, #4
   27f2a:	4620      	mov	r0, r4
   27f2c:	f7ff f9f7 	bl	2731e <k_heap_aligned_alloc>
	if (mem == NULL) {
   27f30:	b108      	cbz	r0, 27f36 <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
   27f32:	f840 4b04 	str.w	r4, [r0], #4
}
   27f36:	b002      	add	sp, #8
   27f38:	bdd0      	pop	{r4, r6, r7, pc}
   27f3a:	2001      	movs	r0, #1
   27f3c:	e7ee      	b.n	27f1c <z_heap_aligned_alloc+0xe>
		return NULL;
   27f3e:	2000      	movs	r0, #0
   27f40:	e7f9      	b.n	27f36 <z_heap_aligned_alloc+0x28>

00027f42 <k_free>:
	if (ptr != NULL) {
   27f42:	b130      	cbz	r0, 27f52 <k_free+0x10>
{
   27f44:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   27f46:	1f01      	subs	r1, r0, #4
   27f48:	f850 0c04 	ldr.w	r0, [r0, #-4]
   27f4c:	f7ff fa32 	bl	273b4 <k_heap_free>
}
   27f50:	bd08      	pop	{r3, pc}
   27f52:	4770      	bx	lr

00027f54 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   27f54:	4770      	bx	lr
	...

00027f58 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   27f58:	f7f2 bca0 	b.w	1a89c <SystemInit>
